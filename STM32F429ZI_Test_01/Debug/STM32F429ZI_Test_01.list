
STM32F429ZI_Test_01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bdb8  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c4  0800bf68  0800bf68  0000cf68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c12c  0800c12c  0000e168  2**0
                  CONTENTS
  4 .ARM          00000008  0800c12c  0800c12c  0000d12c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c134  0800c134  0000e168  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c134  0800c134  0000d134  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c138  0800c138  0000d138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000168  20000000  0800c13c  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000e168  2**0
                  CONTENTS
 10 .bss          000103d8  20000168  20000168  0000e168  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20010540  20010540  0000e168  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000e168  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001d780  00000000  00000000  0000e198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004acf  00000000  00000000  0002b918  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001868  00000000  00000000  000303e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000012ad  00000000  00000000  00031c50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002a37a  00000000  00000000  00032efd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00020ddf  00000000  00000000  0005d277  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e6f64  00000000  00000000  0007e056  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00164fba  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006ca8  00000000  00000000  00165000  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006d  00000000  00000000  0016bca8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000168 	.word	0x20000168
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800bf50 	.word	0x0800bf50

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000016c 	.word	0x2000016c
 80001ec:	0800bf50 	.word	0x0800bf50

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b082      	sub	sp, #8
 8000584:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000586:	2300      	movs	r3, #0
 8000588:	607b      	str	r3, [r7, #4]
 800058a:	4b17      	ldr	r3, [pc, #92]	@ (80005e8 <MX_DMA_Init+0x68>)
 800058c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800058e:	4a16      	ldr	r2, [pc, #88]	@ (80005e8 <MX_DMA_Init+0x68>)
 8000590:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000594:	6313      	str	r3, [r2, #48]	@ 0x30
 8000596:	4b14      	ldr	r3, [pc, #80]	@ (80005e8 <MX_DMA_Init+0x68>)
 8000598:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800059a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800059e:	607b      	str	r3, [r7, #4]
 80005a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80005a2:	2300      	movs	r3, #0
 80005a4:	603b      	str	r3, [r7, #0]
 80005a6:	4b10      	ldr	r3, [pc, #64]	@ (80005e8 <MX_DMA_Init+0x68>)
 80005a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005aa:	4a0f      	ldr	r2, [pc, #60]	@ (80005e8 <MX_DMA_Init+0x68>)
 80005ac:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80005b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80005b2:	4b0d      	ldr	r3, [pc, #52]	@ (80005e8 <MX_DMA_Init+0x68>)
 80005b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005b6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80005ba:	603b      	str	r3, [r7, #0]
 80005bc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80005be:	2200      	movs	r2, #0
 80005c0:	2100      	movs	r1, #0
 80005c2:	2010      	movs	r0, #16
 80005c4:	f001 fe59 	bl	800227a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80005c8:	2010      	movs	r0, #16
 80005ca:	f001 fe72 	bl	80022b2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 80005ce:	2200      	movs	r2, #0
 80005d0:	2100      	movs	r1, #0
 80005d2:	2039      	movs	r0, #57	@ 0x39
 80005d4:	f001 fe51 	bl	800227a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80005d8:	2039      	movs	r0, #57	@ 0x39
 80005da:	f001 fe6a 	bl	80022b2 <HAL_NVIC_EnableIRQ>

}
 80005de:	bf00      	nop
 80005e0:	3708      	adds	r7, #8
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	bf00      	nop
 80005e8:	40023800 	.word	0x40023800

080005ec <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80005f0:	4b1f      	ldr	r3, [pc, #124]	@ (8000670 <MX_ETH_Init+0x84>)
 80005f2:	4a20      	ldr	r2, [pc, #128]	@ (8000674 <MX_ETH_Init+0x88>)
 80005f4:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80005f6:	4b20      	ldr	r3, [pc, #128]	@ (8000678 <MX_ETH_Init+0x8c>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80005fc:	4b1e      	ldr	r3, [pc, #120]	@ (8000678 <MX_ETH_Init+0x8c>)
 80005fe:	2280      	movs	r2, #128	@ 0x80
 8000600:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000602:	4b1d      	ldr	r3, [pc, #116]	@ (8000678 <MX_ETH_Init+0x8c>)
 8000604:	22e1      	movs	r2, #225	@ 0xe1
 8000606:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000608:	4b1b      	ldr	r3, [pc, #108]	@ (8000678 <MX_ETH_Init+0x8c>)
 800060a:	2200      	movs	r2, #0
 800060c:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800060e:	4b1a      	ldr	r3, [pc, #104]	@ (8000678 <MX_ETH_Init+0x8c>)
 8000610:	2200      	movs	r2, #0
 8000612:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000614:	4b18      	ldr	r3, [pc, #96]	@ (8000678 <MX_ETH_Init+0x8c>)
 8000616:	2200      	movs	r2, #0
 8000618:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800061a:	4b15      	ldr	r3, [pc, #84]	@ (8000670 <MX_ETH_Init+0x84>)
 800061c:	4a16      	ldr	r2, [pc, #88]	@ (8000678 <MX_ETH_Init+0x8c>)
 800061e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000620:	4b13      	ldr	r3, [pc, #76]	@ (8000670 <MX_ETH_Init+0x84>)
 8000622:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000626:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000628:	4b11      	ldr	r3, [pc, #68]	@ (8000670 <MX_ETH_Init+0x84>)
 800062a:	4a14      	ldr	r2, [pc, #80]	@ (800067c <MX_ETH_Init+0x90>)
 800062c:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800062e:	4b10      	ldr	r3, [pc, #64]	@ (8000670 <MX_ETH_Init+0x84>)
 8000630:	4a13      	ldr	r2, [pc, #76]	@ (8000680 <MX_ETH_Init+0x94>)
 8000632:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000634:	4b0e      	ldr	r3, [pc, #56]	@ (8000670 <MX_ETH_Init+0x84>)
 8000636:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 800063a:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800063c:	480c      	ldr	r0, [pc, #48]	@ (8000670 <MX_ETH_Init+0x84>)
 800063e:	f002 fa55 	bl	8002aec <HAL_ETH_Init>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000648:	f000 fa7c 	bl	8000b44 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800064c:	2238      	movs	r2, #56	@ 0x38
 800064e:	2100      	movs	r1, #0
 8000650:	480c      	ldr	r0, [pc, #48]	@ (8000684 <MX_ETH_Init+0x98>)
 8000652:	f00a feeb 	bl	800b42c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000656:	4b0b      	ldr	r3, [pc, #44]	@ (8000684 <MX_ETH_Init+0x98>)
 8000658:	2221      	movs	r2, #33	@ 0x21
 800065a:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800065c:	4b09      	ldr	r3, [pc, #36]	@ (8000684 <MX_ETH_Init+0x98>)
 800065e:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8000662:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000664:	4b07      	ldr	r3, [pc, #28]	@ (8000684 <MX_ETH_Init+0x98>)
 8000666:	2200      	movs	r2, #0
 8000668:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800066a:	bf00      	nop
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	200002fc 	.word	0x200002fc
 8000674:	40028000 	.word	0x40028000
 8000678:	200003ac 	.word	0x200003ac
 800067c:	20000224 	.word	0x20000224
 8000680:	20000184 	.word	0x20000184
 8000684:	200002c4 	.word	0x200002c4

08000688 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b08e      	sub	sp, #56	@ 0x38
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000690:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000694:	2200      	movs	r2, #0
 8000696:	601a      	str	r2, [r3, #0]
 8000698:	605a      	str	r2, [r3, #4]
 800069a:	609a      	str	r2, [r3, #8]
 800069c:	60da      	str	r2, [r3, #12]
 800069e:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	4a55      	ldr	r2, [pc, #340]	@ (80007fc <HAL_ETH_MspInit+0x174>)
 80006a6:	4293      	cmp	r3, r2
 80006a8:	f040 80a4 	bne.w	80007f4 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 80006ac:	2300      	movs	r3, #0
 80006ae:	623b      	str	r3, [r7, #32]
 80006b0:	4b53      	ldr	r3, [pc, #332]	@ (8000800 <HAL_ETH_MspInit+0x178>)
 80006b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006b4:	4a52      	ldr	r2, [pc, #328]	@ (8000800 <HAL_ETH_MspInit+0x178>)
 80006b6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80006ba:	6313      	str	r3, [r2, #48]	@ 0x30
 80006bc:	4b50      	ldr	r3, [pc, #320]	@ (8000800 <HAL_ETH_MspInit+0x178>)
 80006be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80006c4:	623b      	str	r3, [r7, #32]
 80006c6:	6a3b      	ldr	r3, [r7, #32]
 80006c8:	2300      	movs	r3, #0
 80006ca:	61fb      	str	r3, [r7, #28]
 80006cc:	4b4c      	ldr	r3, [pc, #304]	@ (8000800 <HAL_ETH_MspInit+0x178>)
 80006ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006d0:	4a4b      	ldr	r2, [pc, #300]	@ (8000800 <HAL_ETH_MspInit+0x178>)
 80006d2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80006d6:	6313      	str	r3, [r2, #48]	@ 0x30
 80006d8:	4b49      	ldr	r3, [pc, #292]	@ (8000800 <HAL_ETH_MspInit+0x178>)
 80006da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006dc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80006e0:	61fb      	str	r3, [r7, #28]
 80006e2:	69fb      	ldr	r3, [r7, #28]
 80006e4:	2300      	movs	r3, #0
 80006e6:	61bb      	str	r3, [r7, #24]
 80006e8:	4b45      	ldr	r3, [pc, #276]	@ (8000800 <HAL_ETH_MspInit+0x178>)
 80006ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ec:	4a44      	ldr	r2, [pc, #272]	@ (8000800 <HAL_ETH_MspInit+0x178>)
 80006ee:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80006f2:	6313      	str	r3, [r2, #48]	@ 0x30
 80006f4:	4b42      	ldr	r3, [pc, #264]	@ (8000800 <HAL_ETH_MspInit+0x178>)
 80006f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006f8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80006fc:	61bb      	str	r3, [r7, #24]
 80006fe:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000700:	2300      	movs	r3, #0
 8000702:	617b      	str	r3, [r7, #20]
 8000704:	4b3e      	ldr	r3, [pc, #248]	@ (8000800 <HAL_ETH_MspInit+0x178>)
 8000706:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000708:	4a3d      	ldr	r2, [pc, #244]	@ (8000800 <HAL_ETH_MspInit+0x178>)
 800070a:	f043 0304 	orr.w	r3, r3, #4
 800070e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000710:	4b3b      	ldr	r3, [pc, #236]	@ (8000800 <HAL_ETH_MspInit+0x178>)
 8000712:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000714:	f003 0304 	and.w	r3, r3, #4
 8000718:	617b      	str	r3, [r7, #20]
 800071a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800071c:	2300      	movs	r3, #0
 800071e:	613b      	str	r3, [r7, #16]
 8000720:	4b37      	ldr	r3, [pc, #220]	@ (8000800 <HAL_ETH_MspInit+0x178>)
 8000722:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000724:	4a36      	ldr	r2, [pc, #216]	@ (8000800 <HAL_ETH_MspInit+0x178>)
 8000726:	f043 0301 	orr.w	r3, r3, #1
 800072a:	6313      	str	r3, [r2, #48]	@ 0x30
 800072c:	4b34      	ldr	r3, [pc, #208]	@ (8000800 <HAL_ETH_MspInit+0x178>)
 800072e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000730:	f003 0301 	and.w	r3, r3, #1
 8000734:	613b      	str	r3, [r7, #16]
 8000736:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000738:	2300      	movs	r3, #0
 800073a:	60fb      	str	r3, [r7, #12]
 800073c:	4b30      	ldr	r3, [pc, #192]	@ (8000800 <HAL_ETH_MspInit+0x178>)
 800073e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000740:	4a2f      	ldr	r2, [pc, #188]	@ (8000800 <HAL_ETH_MspInit+0x178>)
 8000742:	f043 0302 	orr.w	r3, r3, #2
 8000746:	6313      	str	r3, [r2, #48]	@ 0x30
 8000748:	4b2d      	ldr	r3, [pc, #180]	@ (8000800 <HAL_ETH_MspInit+0x178>)
 800074a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800074c:	f003 0302 	and.w	r3, r3, #2
 8000750:	60fb      	str	r3, [r7, #12]
 8000752:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000754:	2300      	movs	r3, #0
 8000756:	60bb      	str	r3, [r7, #8]
 8000758:	4b29      	ldr	r3, [pc, #164]	@ (8000800 <HAL_ETH_MspInit+0x178>)
 800075a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800075c:	4a28      	ldr	r2, [pc, #160]	@ (8000800 <HAL_ETH_MspInit+0x178>)
 800075e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000762:	6313      	str	r3, [r2, #48]	@ 0x30
 8000764:	4b26      	ldr	r3, [pc, #152]	@ (8000800 <HAL_ETH_MspInit+0x178>)
 8000766:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000768:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800076c:	60bb      	str	r3, [r7, #8]
 800076e:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000770:	2332      	movs	r3, #50	@ 0x32
 8000772:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000774:	2302      	movs	r3, #2
 8000776:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000778:	2300      	movs	r3, #0
 800077a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800077c:	2303      	movs	r3, #3
 800077e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000780:	230b      	movs	r3, #11
 8000782:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000784:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000788:	4619      	mov	r1, r3
 800078a:	481e      	ldr	r0, [pc, #120]	@ (8000804 <HAL_ETH_MspInit+0x17c>)
 800078c:	f002 fcfe 	bl	800318c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000790:	2386      	movs	r3, #134	@ 0x86
 8000792:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000794:	2302      	movs	r3, #2
 8000796:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000798:	2300      	movs	r3, #0
 800079a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800079c:	2303      	movs	r3, #3
 800079e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007a0:	230b      	movs	r3, #11
 80007a2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007a4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007a8:	4619      	mov	r1, r3
 80007aa:	4817      	ldr	r0, [pc, #92]	@ (8000808 <HAL_ETH_MspInit+0x180>)
 80007ac:	f002 fcee 	bl	800318c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80007b0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007b4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007b6:	2302      	movs	r3, #2
 80007b8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ba:	2300      	movs	r3, #0
 80007bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007be:	2303      	movs	r3, #3
 80007c0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007c2:	230b      	movs	r3, #11
 80007c4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80007c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007ca:	4619      	mov	r1, r3
 80007cc:	480f      	ldr	r0, [pc, #60]	@ (800080c <HAL_ETH_MspInit+0x184>)
 80007ce:	f002 fcdd 	bl	800318c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80007d2:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 80007d6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007d8:	2302      	movs	r3, #2
 80007da:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007dc:	2300      	movs	r3, #0
 80007de:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007e0:	2303      	movs	r3, #3
 80007e2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007e4:	230b      	movs	r3, #11
 80007e6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80007e8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007ec:	4619      	mov	r1, r3
 80007ee:	4808      	ldr	r0, [pc, #32]	@ (8000810 <HAL_ETH_MspInit+0x188>)
 80007f0:	f002 fccc 	bl	800318c <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80007f4:	bf00      	nop
 80007f6:	3738      	adds	r7, #56	@ 0x38
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	40028000 	.word	0x40028000
 8000800:	40023800 	.word	0x40023800
 8000804:	40020800 	.word	0x40020800
 8000808:	40020000 	.word	0x40020000
 800080c:	40020400 	.word	0x40020400
 8000810:	40021800 	.word	0x40021800

08000814 <MX_GPIO_Init>:
        * EXTI
     PD8   ------> USART3_TX
     PD9   ------> USART3_RX
*/
void MX_GPIO_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b08c      	sub	sp, #48	@ 0x30
 8000818:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800081a:	f107 031c 	add.w	r3, r7, #28
 800081e:	2200      	movs	r2, #0
 8000820:	601a      	str	r2, [r3, #0]
 8000822:	605a      	str	r2, [r3, #4]
 8000824:	609a      	str	r2, [r3, #8]
 8000826:	60da      	str	r2, [r3, #12]
 8000828:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800082a:	2300      	movs	r3, #0
 800082c:	61bb      	str	r3, [r7, #24]
 800082e:	4b58      	ldr	r3, [pc, #352]	@ (8000990 <MX_GPIO_Init+0x17c>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000832:	4a57      	ldr	r2, [pc, #348]	@ (8000990 <MX_GPIO_Init+0x17c>)
 8000834:	f043 0304 	orr.w	r3, r3, #4
 8000838:	6313      	str	r3, [r2, #48]	@ 0x30
 800083a:	4b55      	ldr	r3, [pc, #340]	@ (8000990 <MX_GPIO_Init+0x17c>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800083e:	f003 0304 	and.w	r3, r3, #4
 8000842:	61bb      	str	r3, [r7, #24]
 8000844:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000846:	2300      	movs	r3, #0
 8000848:	617b      	str	r3, [r7, #20]
 800084a:	4b51      	ldr	r3, [pc, #324]	@ (8000990 <MX_GPIO_Init+0x17c>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084e:	4a50      	ldr	r2, [pc, #320]	@ (8000990 <MX_GPIO_Init+0x17c>)
 8000850:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000854:	6313      	str	r3, [r2, #48]	@ 0x30
 8000856:	4b4e      	ldr	r3, [pc, #312]	@ (8000990 <MX_GPIO_Init+0x17c>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800085a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800085e:	617b      	str	r3, [r7, #20]
 8000860:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000862:	2300      	movs	r3, #0
 8000864:	613b      	str	r3, [r7, #16]
 8000866:	4b4a      	ldr	r3, [pc, #296]	@ (8000990 <MX_GPIO_Init+0x17c>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800086a:	4a49      	ldr	r2, [pc, #292]	@ (8000990 <MX_GPIO_Init+0x17c>)
 800086c:	f043 0301 	orr.w	r3, r3, #1
 8000870:	6313      	str	r3, [r2, #48]	@ 0x30
 8000872:	4b47      	ldr	r3, [pc, #284]	@ (8000990 <MX_GPIO_Init+0x17c>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000876:	f003 0301 	and.w	r3, r3, #1
 800087a:	613b      	str	r3, [r7, #16]
 800087c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800087e:	2300      	movs	r3, #0
 8000880:	60fb      	str	r3, [r7, #12]
 8000882:	4b43      	ldr	r3, [pc, #268]	@ (8000990 <MX_GPIO_Init+0x17c>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000886:	4a42      	ldr	r2, [pc, #264]	@ (8000990 <MX_GPIO_Init+0x17c>)
 8000888:	f043 0302 	orr.w	r3, r3, #2
 800088c:	6313      	str	r3, [r2, #48]	@ 0x30
 800088e:	4b40      	ldr	r3, [pc, #256]	@ (8000990 <MX_GPIO_Init+0x17c>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000892:	f003 0302 	and.w	r3, r3, #2
 8000896:	60fb      	str	r3, [r7, #12]
 8000898:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800089a:	2300      	movs	r3, #0
 800089c:	60bb      	str	r3, [r7, #8]
 800089e:	4b3c      	ldr	r3, [pc, #240]	@ (8000990 <MX_GPIO_Init+0x17c>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008a2:	4a3b      	ldr	r2, [pc, #236]	@ (8000990 <MX_GPIO_Init+0x17c>)
 80008a4:	f043 0308 	orr.w	r3, r3, #8
 80008a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008aa:	4b39      	ldr	r3, [pc, #228]	@ (8000990 <MX_GPIO_Init+0x17c>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ae:	f003 0308 	and.w	r3, r3, #8
 80008b2:	60bb      	str	r3, [r7, #8]
 80008b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008b6:	2300      	movs	r3, #0
 80008b8:	607b      	str	r3, [r7, #4]
 80008ba:	4b35      	ldr	r3, [pc, #212]	@ (8000990 <MX_GPIO_Init+0x17c>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008be:	4a34      	ldr	r2, [pc, #208]	@ (8000990 <MX_GPIO_Init+0x17c>)
 80008c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80008c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008c6:	4b32      	ldr	r3, [pc, #200]	@ (8000990 <MX_GPIO_Init+0x17c>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80008ce:	607b      	str	r3, [r7, #4]
 80008d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80008d2:	2200      	movs	r2, #0
 80008d4:	f244 0181 	movw	r1, #16513	@ 0x4081
 80008d8:	482e      	ldr	r0, [pc, #184]	@ (8000994 <MX_GPIO_Init+0x180>)
 80008da:	f002 fe03 	bl	80034e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80008de:	2200      	movs	r2, #0
 80008e0:	2140      	movs	r1, #64	@ 0x40
 80008e2:	482d      	ldr	r0, [pc, #180]	@ (8000998 <MX_GPIO_Init+0x184>)
 80008e4:	f002 fdfe 	bl	80034e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80008e8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008ee:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80008f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f4:	2300      	movs	r3, #0
 80008f6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80008f8:	f107 031c 	add.w	r3, r7, #28
 80008fc:	4619      	mov	r1, r3
 80008fe:	4827      	ldr	r0, [pc, #156]	@ (800099c <MX_GPIO_Init+0x188>)
 8000900:	f002 fc44 	bl	800318c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000904:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000908:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800090a:	2301      	movs	r3, #1
 800090c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090e:	2300      	movs	r3, #0
 8000910:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000912:	2300      	movs	r3, #0
 8000914:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000916:	f107 031c 	add.w	r3, r7, #28
 800091a:	4619      	mov	r1, r3
 800091c:	481d      	ldr	r0, [pc, #116]	@ (8000994 <MX_GPIO_Init+0x180>)
 800091e:	f002 fc35 	bl	800318c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000922:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000926:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000928:	2302      	movs	r3, #2
 800092a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092c:	2300      	movs	r3, #0
 800092e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000930:	2303      	movs	r3, #3
 8000932:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000934:	2307      	movs	r3, #7
 8000936:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000938:	f107 031c 	add.w	r3, r7, #28
 800093c:	4619      	mov	r1, r3
 800093e:	4818      	ldr	r0, [pc, #96]	@ (80009a0 <MX_GPIO_Init+0x18c>)
 8000940:	f002 fc24 	bl	800318c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000944:	2340      	movs	r3, #64	@ 0x40
 8000946:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000948:	2301      	movs	r3, #1
 800094a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094c:	2300      	movs	r3, #0
 800094e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000950:	2300      	movs	r3, #0
 8000952:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000954:	f107 031c 	add.w	r3, r7, #28
 8000958:	4619      	mov	r1, r3
 800095a:	480f      	ldr	r0, [pc, #60]	@ (8000998 <MX_GPIO_Init+0x184>)
 800095c:	f002 fc16 	bl	800318c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000960:	2380      	movs	r3, #128	@ 0x80
 8000962:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000964:	2300      	movs	r3, #0
 8000966:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000968:	2300      	movs	r3, #0
 800096a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800096c:	f107 031c 	add.w	r3, r7, #28
 8000970:	4619      	mov	r1, r3
 8000972:	4809      	ldr	r0, [pc, #36]	@ (8000998 <MX_GPIO_Init+0x184>)
 8000974:	f002 fc0a 	bl	800318c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000978:	2200      	movs	r2, #0
 800097a:	2100      	movs	r1, #0
 800097c:	2028      	movs	r0, #40	@ 0x28
 800097e:	f001 fc7c 	bl	800227a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000982:	2028      	movs	r0, #40	@ 0x28
 8000984:	f001 fc95 	bl	80022b2 <HAL_NVIC_EnableIRQ>

}
 8000988:	bf00      	nop
 800098a:	3730      	adds	r7, #48	@ 0x30
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}
 8000990:	40023800 	.word	0x40023800
 8000994:	40020400 	.word	0x40020400
 8000998:	40021800 	.word	0x40021800
 800099c:	40020800 	.word	0x40020800
 80009a0:	40020c00 	.word	0x40020c00

080009a4 <_write>:

// #define MAX_MSEQ                1000

extern uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len);

int _write(int file, char *ptr, int len){
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b084      	sub	sp, #16
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	60f8      	str	r0, [r7, #12]
 80009ac:	60b9      	str	r1, [r7, #8]
 80009ae:	607a      	str	r2, [r7, #4]
    // CDC_Transmit_FS(ptr, len);
    Q_Write(&USB_TX_Q, ptr, len);
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	b29b      	uxth	r3, r3
 80009b4:	461a      	mov	r2, r3
 80009b6:	68b9      	ldr	r1, [r7, #8]
 80009b8:	4803      	ldr	r0, [pc, #12]	@ (80009c8 <_write+0x24>)
 80009ba:	f000 f8e8 	bl	8000b8e <Q_Write>
    // User_CDC_Transmit_FS(ptr, len);
    return (len);
 80009be:	687b      	ldr	r3, [r7, #4]
}
 80009c0:	4618      	mov	r0, r3
 80009c2:	3710      	adds	r7, #16
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	200003b4 	.word	0x200003b4

080009cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009d0:	f001 fae2 	bl	8001f98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009d4:	f000 f84c 	bl	8000a70 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009d8:	f7ff ff1c 	bl	8000814 <MX_GPIO_Init>
  MX_DMA_Init();
 80009dc:	f7ff fdd0 	bl	8000580 <MX_DMA_Init>
  MX_ETH_Init();
 80009e0:	f7ff fe04 	bl	80005ec <MX_ETH_Init>
  MX_USART2_UART_Init();
 80009e4:	f000 fc94 	bl	8001310 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 80009e8:	f000 fcbe 	bl	8001368 <MX_USART6_UART_Init>
  MX_USB_DEVICE_Init();
 80009ec:	f009 fdd4 	bl	800a598 <MX_USB_DEVICE_Init>
  MX_TIM1_Init();
 80009f0:	f000 fc16 	bl	8001220 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  Q_Init(&USB_TX_Q, (uint8_t *) USB_TX_Data, 2000);
 80009f4:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80009f8:	4914      	ldr	r1, [pc, #80]	@ (8000a4c <main+0x80>)
 80009fa:	4815      	ldr	r0, [pc, #84]	@ (8000a50 <main+0x84>)
 80009fc:	f000 f8a8 	bl	8000b50 <Q_Init>

  HAL_UARTEx_ReceiveToIdle_DMA(&huart2, (uint8_t *)uart2_rx_IDLE_buf, UART_RX_IDLE_BUFSIZE);
 8000a00:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000a04:	4913      	ldr	r1, [pc, #76]	@ (8000a54 <main+0x88>)
 8000a06:	4814      	ldr	r0, [pc, #80]	@ (8000a58 <main+0x8c>)
 8000a08:	f005 f9cd 	bl	8005da6 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 8000a0c:	4b13      	ldr	r3, [pc, #76]	@ (8000a5c <main+0x90>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	681a      	ldr	r2, [r3, #0]
 8000a12:	4b12      	ldr	r3, [pc, #72]	@ (8000a5c <main+0x90>)
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	f022 0208 	bic.w	r2, r2, #8
 8000a1a:	601a      	str	r2, [r3, #0]

  HAL_UARTEx_ReceiveToIdle_DMA(&huart6, (uint8_t *)uart6_rx_IDLE_buf, UART_RX_IDLE_BUFSIZE);
 8000a1c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000a20:	490f      	ldr	r1, [pc, #60]	@ (8000a60 <main+0x94>)
 8000a22:	4810      	ldr	r0, [pc, #64]	@ (8000a64 <main+0x98>)
 8000a24:	f005 f9bf 	bl	8005da6 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart6_rx, DMA_IT_HT);
 8000a28:	4b0f      	ldr	r3, [pc, #60]	@ (8000a68 <main+0x9c>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	681a      	ldr	r2, [r3, #0]
 8000a2e:	4b0e      	ldr	r3, [pc, #56]	@ (8000a68 <main+0x9c>)
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	f022 0208 	bic.w	r2, r2, #8
 8000a36:	601a      	str	r2, [r3, #0]

  HAL_TIM_Base_Start_IT(&htim1);
 8000a38:	480c      	ldr	r0, [pc, #48]	@ (8000a6c <main+0xa0>)
 8000a3a:	f004 fcbf 	bl	80053bc <HAL_TIM_Base_Start_IT>
    // if(TIM1_CNT_1 >= 500)
    // {
    //   TIM1_CNT_1 = 0;
    //   Verification_CKTChecksum();
    // }
    UART_RX_BufferClear();
 8000a3e:	f001 fa17 	bl	8001e70 <UART_RX_BufferClear>
    debug_buf_read();
 8000a42:	f000 ffd3 	bl	80019ec <debug_buf_read>
  {
 8000a46:	bf00      	nop
 8000a48:	e7f9      	b.n	8000a3e <main+0x72>
 8000a4a:	bf00      	nop
 8000a4c:	20000d34 	.word	0x20000d34
 8000a50:	200003b4 	.word	0x200003b4
 8000a54:	20006334 	.word	0x20006334
 8000a58:	20000410 	.word	0x20000410
 8000a5c:	200004a0 	.word	0x200004a0
 8000a60:	200076bc 	.word	0x200076bc
 8000a64:	20000458 	.word	0x20000458
 8000a68:	20000500 	.word	0x20000500
 8000a6c:	200003c8 	.word	0x200003c8

08000a70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b094      	sub	sp, #80	@ 0x50
 8000a74:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a76:	f107 0320 	add.w	r3, r7, #32
 8000a7a:	2230      	movs	r2, #48	@ 0x30
 8000a7c:	2100      	movs	r1, #0
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f00a fcd4 	bl	800b42c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a84:	f107 030c 	add.w	r3, r7, #12
 8000a88:	2200      	movs	r2, #0
 8000a8a:	601a      	str	r2, [r3, #0]
 8000a8c:	605a      	str	r2, [r3, #4]
 8000a8e:	609a      	str	r2, [r3, #8]
 8000a90:	60da      	str	r2, [r3, #12]
 8000a92:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a94:	2300      	movs	r3, #0
 8000a96:	60bb      	str	r3, [r7, #8]
 8000a98:	4b28      	ldr	r3, [pc, #160]	@ (8000b3c <SystemClock_Config+0xcc>)
 8000a9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a9c:	4a27      	ldr	r2, [pc, #156]	@ (8000b3c <SystemClock_Config+0xcc>)
 8000a9e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000aa2:	6413      	str	r3, [r2, #64]	@ 0x40
 8000aa4:	4b25      	ldr	r3, [pc, #148]	@ (8000b3c <SystemClock_Config+0xcc>)
 8000aa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aa8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000aac:	60bb      	str	r3, [r7, #8]
 8000aae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	607b      	str	r3, [r7, #4]
 8000ab4:	4b22      	ldr	r3, [pc, #136]	@ (8000b40 <SystemClock_Config+0xd0>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	4a21      	ldr	r2, [pc, #132]	@ (8000b40 <SystemClock_Config+0xd0>)
 8000aba:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000abe:	6013      	str	r3, [r2, #0]
 8000ac0:	4b1f      	ldr	r3, [pc, #124]	@ (8000b40 <SystemClock_Config+0xd0>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000ac8:	607b      	str	r3, [r7, #4]
 8000aca:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000acc:	2301      	movs	r3, #1
 8000ace:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000ad0:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000ad4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ad6:	2302      	movs	r3, #2
 8000ad8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ada:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000ade:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000ae0:	2304      	movs	r3, #4
 8000ae2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000ae4:	23a8      	movs	r3, #168	@ 0xa8
 8000ae6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ae8:	2302      	movs	r3, #2
 8000aea:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000aec:	2307      	movs	r3, #7
 8000aee:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000af0:	f107 0320 	add.w	r3, r7, #32
 8000af4:	4618      	mov	r0, r3
 8000af6:	f003 ff79 	bl	80049ec <HAL_RCC_OscConfig>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d001      	beq.n	8000b04 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000b00:	f000 f820 	bl	8000b44 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b04:	230f      	movs	r3, #15
 8000b06:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b08:	2302      	movs	r3, #2
 8000b0a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000b10:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000b14:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000b16:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b1a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000b1c:	f107 030c 	add.w	r3, r7, #12
 8000b20:	2105      	movs	r1, #5
 8000b22:	4618      	mov	r0, r3
 8000b24:	f004 f9da 	bl	8004edc <HAL_RCC_ClockConfig>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d001      	beq.n	8000b32 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000b2e:	f000 f809 	bl	8000b44 <Error_Handler>
  }
}
 8000b32:	bf00      	nop
 8000b34:	3750      	adds	r7, #80	@ 0x50
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	40023800 	.word	0x40023800
 8000b40:	40007000 	.word	0x40007000

08000b44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b48:	b672      	cpsid	i
}
 8000b4a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b4c:	bf00      	nop
 8000b4e:	e7fd      	b.n	8000b4c <Error_Handler+0x8>

08000b50 <Q_Init>:
#include "queue.h"

void Q_Init(Q_queue_t *queue, uint8_t *data, uint16_t len){
 8000b50:	b480      	push	{r7}
 8000b52:	b085      	sub	sp, #20
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	60f8      	str	r0, [r7, #12]
 8000b58:	60b9      	str	r1, [r7, #8]
 8000b5a:	4613      	mov	r3, r2
 8000b5c:	80fb      	strh	r3, [r7, #6]
    queue->idx_read = 0;
 8000b5e:	68fb      	ldr	r3, [r7, #12]
 8000b60:	2200      	movs	r2, #0
 8000b62:	809a      	strh	r2, [r3, #4]
    queue->idx_write = 0;
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	2200      	movs	r2, #0
 8000b68:	805a      	strh	r2, [r3, #2]
    queue->count_full = 0;
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	80da      	strh	r2, [r3, #6]
    queue->count_empty = 0;
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	2200      	movs	r2, #0
 8000b74:	811a      	strh	r2, [r3, #8]
    queue->size = len;
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	88fa      	ldrh	r2, [r7, #6]
 8000b7a:	801a      	strh	r2, [r3, #0]
    queue->data = data;
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	68ba      	ldr	r2, [r7, #8]
 8000b80:	60da      	str	r2, [r3, #12]
}
 8000b82:	bf00      	nop
 8000b84:	3714      	adds	r7, #20
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr

08000b8e <Q_Write>:

void Q_Clear(Q_queue_t *queue){
    queue->idx_write = queue->idx_read;
}

bool Q_Write(Q_queue_t *queue, uint8_t *data, uint16_t len){
 8000b8e:	b580      	push	{r7, lr}
 8000b90:	b088      	sub	sp, #32
 8000b92:	af00      	add	r7, sp, #0
 8000b94:	60f8      	str	r0, [r7, #12]
 8000b96:	60b9      	str	r1, [r7, #8]
 8000b98:	4613      	mov	r3, r2
 8000b9a:	80fb      	strh	r3, [r7, #6]
    int empty_bytes;
    uint16_t next_idx;
    uint16_t num_first;
    bool ret = false;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	77fb      	strb	r3, [r7, #31]
    
    empty_bytes = Q_NumEmptyBytes(queue);  
 8000ba0:	68f8      	ldr	r0, [r7, #12]
 8000ba2:	f000 f8ea 	bl	8000d7a <Q_NumEmptyBytes>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	61bb      	str	r3, [r7, #24]
    if(empty_bytes >= len){
 8000baa:	88fb      	ldrh	r3, [r7, #6]
 8000bac:	69ba      	ldr	r2, [r7, #24]
 8000bae:	429a      	cmp	r2, r3
 8000bb0:	db44      	blt.n	8000c3c <Q_Write+0xae>
        next_idx = queue->idx_write + len;
 8000bb2:	68fb      	ldr	r3, [r7, #12]
 8000bb4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000bb8:	b29a      	uxth	r2, r3
 8000bba:	88fb      	ldrh	r3, [r7, #6]
 8000bbc:	4413      	add	r3, r2
 8000bbe:	82fb      	strh	r3, [r7, #22]
        if(next_idx < queue->size){
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	881b      	ldrh	r3, [r3, #0]
 8000bc4:	8afa      	ldrh	r2, [r7, #22]
 8000bc6:	429a      	cmp	r2, r3
 8000bc8:	d20b      	bcs.n	8000be2 <Q_Write+0x54>
            memcpy(&(queue->data[queue->idx_write]),data,len);  //memcpy(dest,source,num)
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	68db      	ldr	r3, [r3, #12]
 8000bce:	68fa      	ldr	r2, [r7, #12]
 8000bd0:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8000bd4:	4413      	add	r3, r2
 8000bd6:	88fa      	ldrh	r2, [r7, #6]
 8000bd8:	68b9      	ldr	r1, [r7, #8]
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f00a fca1 	bl	800b522 <memcpy>
 8000be0:	e01d      	b.n	8000c1e <Q_Write+0x90>
        }
        else{
            num_first = queue->size-queue->idx_write;
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	881a      	ldrh	r2, [r3, #0]
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000bec:	b29b      	uxth	r3, r3
 8000bee:	1ad3      	subs	r3, r2, r3
 8000bf0:	82bb      	strh	r3, [r7, #20]
            memcpy(&(queue->data[queue->idx_write]),data,num_first);
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	68db      	ldr	r3, [r3, #12]
 8000bf6:	68fa      	ldr	r2, [r7, #12]
 8000bf8:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8000bfc:	4413      	add	r3, r2
 8000bfe:	8aba      	ldrh	r2, [r7, #20]
 8000c00:	68b9      	ldr	r1, [r7, #8]
 8000c02:	4618      	mov	r0, r3
 8000c04:	f00a fc8d 	bl	800b522 <memcpy>
            memcpy(&(queue->data[0]),&(data[num_first]),len-num_first);
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	68d8      	ldr	r0, [r3, #12]
 8000c0c:	8abb      	ldrh	r3, [r7, #20]
 8000c0e:	68ba      	ldr	r2, [r7, #8]
 8000c10:	18d1      	adds	r1, r2, r3
 8000c12:	88fa      	ldrh	r2, [r7, #6]
 8000c14:	8abb      	ldrh	r3, [r7, #20]
 8000c16:	1ad3      	subs	r3, r2, r3
 8000c18:	461a      	mov	r2, r3
 8000c1a:	f00a fc82 	bl	800b522 <memcpy>
        }        
        queue->idx_write = next_idx % queue->size;
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	881a      	ldrh	r2, [r3, #0]
 8000c22:	8afb      	ldrh	r3, [r7, #22]
 8000c24:	fbb3 f1f2 	udiv	r1, r3, r2
 8000c28:	fb01 f202 	mul.w	r2, r1, r2
 8000c2c:	1a9b      	subs	r3, r3, r2
 8000c2e:	b29b      	uxth	r3, r3
 8000c30:	b21a      	sxth	r2, r3
 8000c32:	68fb      	ldr	r3, [r7, #12]
 8000c34:	805a      	strh	r2, [r3, #2]
        ret = true;        
 8000c36:	2301      	movs	r3, #1
 8000c38:	77fb      	strb	r3, [r7, #31]
 8000c3a:	e00e      	b.n	8000c5a <Q_Write+0xcc>
    }
    else    queue->count_full = _upperlimit(queue->count_full+1,0xFFFF);      
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	88db      	ldrh	r3, [r3, #6]
 8000c40:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000c44:	4293      	cmp	r3, r2
 8000c46:	d004      	beq.n	8000c52 <Q_Write+0xc4>
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	88db      	ldrh	r3, [r3, #6]
 8000c4c:	3301      	adds	r3, #1
 8000c4e:	b29a      	uxth	r2, r3
 8000c50:	e001      	b.n	8000c56 <Q_Write+0xc8>
 8000c52:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000c56:	68fb      	ldr	r3, [r7, #12]
 8000c58:	80da      	strh	r2, [r3, #6]
    return ret;    
 8000c5a:	7ffb      	ldrb	r3, [r7, #31]
}
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	3720      	adds	r7, #32
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}

08000c64 <Q_Read>:
    }
    else    queue->count_full = _upperlimit(queue->count_full+1,0xFFFF);
    return ret;    
}

bool Q_Read(Q_queue_t *queue, uint8_t *data, uint16_t len){
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b086      	sub	sp, #24
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	60f8      	str	r0, [r7, #12]
 8000c6c:	60b9      	str	r1, [r7, #8]
 8000c6e:	4613      	mov	r3, r2
 8000c70:	80fb      	strh	r3, [r7, #6]
    bool ret;
    uint16_t next_idx;
    uint16_t num_first;

    if(Q_NumContents(queue) >= len){
 8000c72:	68f8      	ldr	r0, [r7, #12]
 8000c74:	f000 f864 	bl	8000d40 <Q_NumContents>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	461a      	mov	r2, r3
 8000c7c:	88fb      	ldrh	r3, [r7, #6]
 8000c7e:	4293      	cmp	r3, r2
 8000c80:	d848      	bhi.n	8000d14 <Q_Read+0xb0>
        next_idx = queue->idx_read + len;
 8000c82:	68fb      	ldr	r3, [r7, #12]
 8000c84:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000c88:	b29a      	uxth	r2, r3
 8000c8a:	88fb      	ldrh	r3, [r7, #6]
 8000c8c:	4413      	add	r3, r2
 8000c8e:	82bb      	strh	r3, [r7, #20]
        if(next_idx < queue->size){
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	881b      	ldrh	r3, [r3, #0]
 8000c94:	8aba      	ldrh	r2, [r7, #20]
 8000c96:	429a      	cmp	r2, r3
 8000c98:	d20b      	bcs.n	8000cb2 <Q_Read+0x4e>
            memcpy(data,&(queue->data[queue->idx_read]),len);  //memcpy(dest,source,num)
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	68db      	ldr	r3, [r3, #12]
 8000c9e:	68fa      	ldr	r2, [r7, #12]
 8000ca0:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8000ca4:	4413      	add	r3, r2
 8000ca6:	88fa      	ldrh	r2, [r7, #6]
 8000ca8:	4619      	mov	r1, r3
 8000caa:	68b8      	ldr	r0, [r7, #8]
 8000cac:	f00a fc39 	bl	800b522 <memcpy>
 8000cb0:	e01d      	b.n	8000cee <Q_Read+0x8a>
        }
        else{
            num_first = queue->size-queue->idx_read;
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	881a      	ldrh	r2, [r3, #0]
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000cbc:	b29b      	uxth	r3, r3
 8000cbe:	1ad3      	subs	r3, r2, r3
 8000cc0:	827b      	strh	r3, [r7, #18]
            memcpy(data,&(queue->data[queue->idx_read]),num_first);  //memcpy(dest,source,num)
 8000cc2:	68fb      	ldr	r3, [r7, #12]
 8000cc4:	68db      	ldr	r3, [r3, #12]
 8000cc6:	68fa      	ldr	r2, [r7, #12]
 8000cc8:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8000ccc:	4413      	add	r3, r2
 8000cce:	8a7a      	ldrh	r2, [r7, #18]
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	68b8      	ldr	r0, [r7, #8]
 8000cd4:	f00a fc25 	bl	800b522 <memcpy>
            memcpy(&(data[num_first]),&(queue->data[0]),len-num_first);
 8000cd8:	8a7b      	ldrh	r3, [r7, #18]
 8000cda:	68ba      	ldr	r2, [r7, #8]
 8000cdc:	18d0      	adds	r0, r2, r3
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	68d9      	ldr	r1, [r3, #12]
 8000ce2:	88fa      	ldrh	r2, [r7, #6]
 8000ce4:	8a7b      	ldrh	r3, [r7, #18]
 8000ce6:	1ad3      	subs	r3, r2, r3
 8000ce8:	461a      	mov	r2, r3
 8000cea:	f00a fc1a 	bl	800b522 <memcpy>
        }        
        queue->idx_read = (queue->idx_read+len)%queue->size;
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000cf4:	461a      	mov	r2, r3
 8000cf6:	88fb      	ldrh	r3, [r7, #6]
 8000cf8:	4413      	add	r3, r2
 8000cfa:	68fa      	ldr	r2, [r7, #12]
 8000cfc:	8812      	ldrh	r2, [r2, #0]
 8000cfe:	fb93 f1f2 	sdiv	r1, r3, r2
 8000d02:	fb01 f202 	mul.w	r2, r1, r2
 8000d06:	1a9b      	subs	r3, r3, r2
 8000d08:	b21a      	sxth	r2, r3
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	809a      	strh	r2, [r3, #4]
        ret = true;
 8000d0e:	2301      	movs	r3, #1
 8000d10:	75fb      	strb	r3, [r7, #23]
 8000d12:	e010      	b.n	8000d36 <Q_Read+0xd2>
    }
    else{
        queue->count_empty = _upperlimit(queue->count_empty+1,0xFFFF);
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	891b      	ldrh	r3, [r3, #8]
 8000d18:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000d1c:	4293      	cmp	r3, r2
 8000d1e:	d004      	beq.n	8000d2a <Q_Read+0xc6>
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	891b      	ldrh	r3, [r3, #8]
 8000d24:	3301      	adds	r3, #1
 8000d26:	b29a      	uxth	r2, r3
 8000d28:	e001      	b.n	8000d2e <Q_Read+0xca>
 8000d2a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	811a      	strh	r2, [r3, #8]
        ret = false;
 8000d32:	2300      	movs	r3, #0
 8000d34:	75fb      	strb	r3, [r7, #23]
    }
    return ret;
 8000d36:	7dfb      	ldrb	r3, [r7, #23]
}
 8000d38:	4618      	mov	r0, r3
 8000d3a:	3718      	adds	r7, #24
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}

08000d40 <Q_NumContents>:
    else    queue->count_empty = _upperlimit(queue->count_empty+1,0xFFFF);
    return ret;
}


uint16_t Q_NumContents(Q_queue_t *queue){
 8000d40:	b480      	push	{r7}
 8000d42:	b083      	sub	sp, #12
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
    return (uint16_t)((queue->size + queue->idx_write - queue->idx_read)%(queue->size));    
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	881b      	ldrh	r3, [r3, #0]
 8000d4c:	461a      	mov	r2, r3
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000d54:	4413      	add	r3, r2
 8000d56:	687a      	ldr	r2, [r7, #4]
 8000d58:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8000d5c:	1a9b      	subs	r3, r3, r2
 8000d5e:	687a      	ldr	r2, [r7, #4]
 8000d60:	8812      	ldrh	r2, [r2, #0]
 8000d62:	fb93 f1f2 	sdiv	r1, r3, r2
 8000d66:	fb01 f202 	mul.w	r2, r1, r2
 8000d6a:	1a9b      	subs	r3, r3, r2
 8000d6c:	b29b      	uxth	r3, r3
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	370c      	adds	r7, #12
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr

08000d7a <Q_NumEmptyBytes>:

uint16_t Q_NumEmptyBytes(Q_queue_t *queue){
 8000d7a:	b590      	push	{r4, r7, lr}
 8000d7c:	b083      	sub	sp, #12
 8000d7e:	af00      	add	r7, sp, #0
 8000d80:	6078      	str	r0, [r7, #4]
    return queue->size - (int)Q_NumContents(queue) - 1;
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	881c      	ldrh	r4, [r3, #0]
 8000d86:	6878      	ldr	r0, [r7, #4]
 8000d88:	f7ff ffda 	bl	8000d40 <Q_NumContents>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	1ae3      	subs	r3, r4, r3
 8000d90:	b29b      	uxth	r3, r3
 8000d92:	3b01      	subs	r3, #1
 8000d94:	b29b      	uxth	r3, r3
}
 8000d96:	4618      	mov	r0, r3
 8000d98:	370c      	adds	r7, #12
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd90      	pop	{r4, r7, pc}
	...

08000da0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	b083      	sub	sp, #12
 8000da4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000da6:	2300      	movs	r3, #0
 8000da8:	607b      	str	r3, [r7, #4]
 8000daa:	4b10      	ldr	r3, [pc, #64]	@ (8000dec <HAL_MspInit+0x4c>)
 8000dac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dae:	4a0f      	ldr	r2, [pc, #60]	@ (8000dec <HAL_MspInit+0x4c>)
 8000db0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000db4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000db6:	4b0d      	ldr	r3, [pc, #52]	@ (8000dec <HAL_MspInit+0x4c>)
 8000db8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000dbe:	607b      	str	r3, [r7, #4]
 8000dc0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	603b      	str	r3, [r7, #0]
 8000dc6:	4b09      	ldr	r3, [pc, #36]	@ (8000dec <HAL_MspInit+0x4c>)
 8000dc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dca:	4a08      	ldr	r2, [pc, #32]	@ (8000dec <HAL_MspInit+0x4c>)
 8000dcc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000dd0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000dd2:	4b06      	ldr	r3, [pc, #24]	@ (8000dec <HAL_MspInit+0x4c>)
 8000dd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dd6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000dda:	603b      	str	r3, [r7, #0]
 8000ddc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dde:	bf00      	nop
 8000de0:	370c      	adds	r7, #12
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop
 8000dec:	40023800 	.word	0x40023800

08000df0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000df4:	bf00      	nop
 8000df6:	e7fd      	b.n	8000df4 <NMI_Handler+0x4>

08000df8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dfc:	bf00      	nop
 8000dfe:	e7fd      	b.n	8000dfc <HardFault_Handler+0x4>

08000e00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e04:	bf00      	nop
 8000e06:	e7fd      	b.n	8000e04 <MemManage_Handler+0x4>

08000e08 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e0c:	bf00      	nop
 8000e0e:	e7fd      	b.n	8000e0c <BusFault_Handler+0x4>

08000e10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e14:	bf00      	nop
 8000e16:	e7fd      	b.n	8000e14 <UsageFault_Handler+0x4>

08000e18 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e1c:	bf00      	nop
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e24:	4770      	bx	lr

08000e26 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e26:	b480      	push	{r7}
 8000e28:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e2a:	bf00      	nop
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e32:	4770      	bx	lr

08000e34 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e38:	bf00      	nop
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr

08000e42 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e42:	b580      	push	{r7, lr}
 8000e44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e46:	f001 f8f9 	bl	800203c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e4a:	bf00      	nop
 8000e4c:	bd80      	pop	{r7, pc}
	...

08000e50 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000e54:	4802      	ldr	r0, [pc, #8]	@ (8000e60 <DMA1_Stream5_IRQHandler+0x10>)
 8000e56:	f001 fbdf 	bl	8002618 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000e5a:	bf00      	nop
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	200004a0 	.word	0x200004a0

08000e64 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000e68:	4802      	ldr	r0, [pc, #8]	@ (8000e74 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000e6a:	f004 fb17 	bl	800549c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000e6e:	bf00      	nop
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	200003c8 	.word	0x200003c8

08000e78 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b082      	sub	sp, #8
 8000e7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
  if (uart_rx_IDLE_TotalCnt < 2)
 8000e7e:	4b17      	ldr	r3, [pc, #92]	@ (8000edc <USART2_IRQHandler+0x64>)
 8000e80:	881b      	ldrh	r3, [r3, #0]
 8000e82:	2b01      	cmp	r3, #1
 8000e84:	d824      	bhi.n	8000ed0 <USART2_IRQHandler+0x58>
  {
    if ((__HAL_UART_GET_FLAG(&huart2, UART_FLAG_FE)) || (__HAL_UART_GET_FLAG(&huart2, UART_FLAG_ORE)))
 8000e86:	4b16      	ldr	r3, [pc, #88]	@ (8000ee0 <USART2_IRQHandler+0x68>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	f003 0302 	and.w	r3, r3, #2
 8000e90:	2b02      	cmp	r3, #2
 8000e92:	d006      	beq.n	8000ea2 <USART2_IRQHandler+0x2a>
 8000e94:	4b12      	ldr	r3, [pc, #72]	@ (8000ee0 <USART2_IRQHandler+0x68>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	f003 0308 	and.w	r3, r3, #8
 8000e9e:	2b08      	cmp	r3, #8
 8000ea0:	d116      	bne.n	8000ed0 <USART2_IRQHandler+0x58>
    {
      __HAL_UART_CLEAR_OREFLAG(&huart2);
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	607b      	str	r3, [r7, #4]
 8000ea6:	4b0e      	ldr	r3, [pc, #56]	@ (8000ee0 <USART2_IRQHandler+0x68>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	607b      	str	r3, [r7, #4]
 8000eae:	4b0c      	ldr	r3, [pc, #48]	@ (8000ee0 <USART2_IRQHandler+0x68>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	685b      	ldr	r3, [r3, #4]
 8000eb4:	607b      	str	r3, [r7, #4]
 8000eb6:	687b      	ldr	r3, [r7, #4]
      __HAL_UART_CLEAR_FEFLAG(&huart2);
 8000eb8:	2300      	movs	r3, #0
 8000eba:	603b      	str	r3, [r7, #0]
 8000ebc:	4b08      	ldr	r3, [pc, #32]	@ (8000ee0 <USART2_IRQHandler+0x68>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	603b      	str	r3, [r7, #0]
 8000ec4:	4b06      	ldr	r3, [pc, #24]	@ (8000ee0 <USART2_IRQHandler+0x68>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	685b      	ldr	r3, [r3, #4]
 8000eca:	603b      	str	r3, [r7, #0]
 8000ecc:	683b      	ldr	r3, [r7, #0]
    //   hdma_usart2_rx.Instance->NDTR = UART_RX_IDLE_BUFSIZE;
    //   __HAL_DMA_ENABLE(&hdma_usart2_rx);

    //   HAL_UARTEx_ReceiveToIdle_DMA(&huart2, (uint8_t *) uart2_rx_IDLE_buf, UART_RX_IDLE_BUFSIZE);
    // __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
    return ;
 8000ece:	e002      	b.n	8000ed6 <USART2_IRQHandler+0x5e>
    }
  }
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000ed0:	4803      	ldr	r0, [pc, #12]	@ (8000ee0 <USART2_IRQHandler+0x68>)
 8000ed2:	f004 ffc5 	bl	8005e60 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000ed6:	3708      	adds	r7, #8
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	20008a44 	.word	0x20008a44
 8000ee0:	20000410 	.word	0x20000410

08000ee4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8000ee8:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000eec:	f002 fb14 	bl	8003518 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000ef0:	bf00      	nop
 8000ef2:	bd80      	pop	{r7, pc}

08000ef4 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8000ef8:	4802      	ldr	r0, [pc, #8]	@ (8000f04 <DMA2_Stream1_IRQHandler+0x10>)
 8000efa:	f001 fb8d 	bl	8002618 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8000efe:	bf00      	nop
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	20000500 	.word	0x20000500

08000f08 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000f0c:	4802      	ldr	r0, [pc, #8]	@ (8000f18 <OTG_FS_IRQHandler+0x10>)
 8000f0e:	f002 fc5f 	bl	80037d0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000f12:	bf00      	nop
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	2000fcf0 	.word	0x2000fcf0

08000f1c <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8000f20:	4802      	ldr	r0, [pc, #8]	@ (8000f2c <USART6_IRQHandler+0x10>)
 8000f22:	f004 ff9d 	bl	8005e60 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8000f26:	bf00      	nop
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	20000458 	.word	0x20000458

08000f30 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b084      	sub	sp, #16
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  uint16_t num = 0;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	81fb      	strh	r3, [r7, #14]
  
  if ((num = Q_NumContents(&USB_TX_Q)) > 0 )
 8000f3c:	4818      	ldr	r0, [pc, #96]	@ (8000fa0 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000f3e:	f7ff feff 	bl	8000d40 <Q_NumContents>
 8000f42:	4603      	mov	r3, r0
 8000f44:	81fb      	strh	r3, [r7, #14]
 8000f46:	89fb      	ldrh	r3, [r7, #14]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d016      	beq.n	8000f7a <HAL_TIM_PeriodElapsedCallback+0x4a>
  {
    if (CDC_Transmit_Is_Busy() != USBD_BUSY)
 8000f4c:	f009 fc1a 	bl	800a784 <CDC_Transmit_Is_Busy>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b01      	cmp	r3, #1
 8000f54:	d011      	beq.n	8000f7a <HAL_TIM_PeriodElapsedCallback+0x4a>
    {
      queDataNum += num;
 8000f56:	4b13      	ldr	r3, [pc, #76]	@ (8000fa4 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000f58:	881a      	ldrh	r2, [r3, #0]
 8000f5a:	89fb      	ldrh	r3, [r7, #14]
 8000f5c:	4413      	add	r3, r2
 8000f5e:	b29a      	uxth	r2, r3
 8000f60:	4b10      	ldr	r3, [pc, #64]	@ (8000fa4 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000f62:	801a      	strh	r2, [r3, #0]

      Q_Read(&USB_TX_Q, (uint8_t *)queData, num);
 8000f64:	89fb      	ldrh	r3, [r7, #14]
 8000f66:	461a      	mov	r2, r3
 8000f68:	490f      	ldr	r1, [pc, #60]	@ (8000fa8 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000f6a:	480d      	ldr	r0, [pc, #52]	@ (8000fa0 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000f6c:	f7ff fe7a 	bl	8000c64 <Q_Read>

      CDC_Transmit_FS(queData, num);
 8000f70:	89fb      	ldrh	r3, [r7, #14]
 8000f72:	4619      	mov	r1, r3
 8000f74:	480c      	ldr	r0, [pc, #48]	@ (8000fa8 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000f76:	f009 fbcd 	bl	800a714 <CDC_Transmit_FS>
    }
  }

  TIM1_CNT_1++; // LED ?���??????? 
 8000f7a:	4b0c      	ldr	r3, [pc, #48]	@ (8000fac <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	3301      	adds	r3, #1
 8000f80:	4a0a      	ldr	r2, [pc, #40]	@ (8000fac <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000f82:	6013      	str	r3, [r2, #0]
  TIM1_CNT_2++; //
 8000f84:	4b0a      	ldr	r3, [pc, #40]	@ (8000fb0 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	3301      	adds	r3, #1
 8000f8a:	4a09      	ldr	r2, [pc, #36]	@ (8000fb0 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000f8c:	6013      	str	r3, [r2, #0]
  TIM1_CNT_3++; //
 8000f8e:	4b09      	ldr	r3, [pc, #36]	@ (8000fb4 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	3301      	adds	r3, #1
 8000f94:	4a07      	ldr	r2, [pc, #28]	@ (8000fb4 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000f96:	6013      	str	r3, [r2, #0]
}
 8000f98:	bf00      	nop
 8000f9a:	3710      	adds	r7, #16
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	200003b4 	.word	0x200003b4
 8000fa4:	20000d30 	.word	0x20000d30
 8000fa8:	20000560 	.word	0x20000560
 8000fac:	20001504 	.word	0x20001504
 8000fb0:	20001508 	.word	0x20001508
 8000fb4:	2000150c 	.word	0x2000150c

08000fb8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b083      	sub	sp, #12
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  
}
 8000fc0:	bf00      	nop
 8000fc2:	370c      	adds	r7, #12
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fca:	4770      	bx	lr

08000fcc <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
 8000fd4:	460b      	mov	r3, r1
 8000fd6:	807b      	strh	r3, [r7, #2]
  uart_rx_IDLE_TotalCnt += Size;
 8000fd8:	4b31      	ldr	r3, [pc, #196]	@ (80010a0 <HAL_UARTEx_RxEventCallback+0xd4>)
 8000fda:	881a      	ldrh	r2, [r3, #0]
 8000fdc:	887b      	ldrh	r3, [r7, #2]
 8000fde:	4413      	add	r3, r2
 8000fe0:	b29a      	uxth	r2, r3
 8000fe2:	4b2f      	ldr	r3, [pc, #188]	@ (80010a0 <HAL_UARTEx_RxEventCallback+0xd4>)
 8000fe4:	801a      	strh	r2, [r3, #0]

  if (huart->Instance == USART6)
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	4a2e      	ldr	r2, [pc, #184]	@ (80010a4 <HAL_UARTEx_RxEventCallback+0xd8>)
 8000fec:	4293      	cmp	r3, r2
 8000fee:	d127      	bne.n	8001040 <HAL_UARTEx_RxEventCallback+0x74>
  {
    mseq_upload_device(Size);
 8000ff0:	887b      	ldrh	r3, [r7, #2]
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f000 fc76 	bl	80018e4 <mseq_upload_device>

    __HAL_DMA_DISABLE(&hdma_usart6_rx);
 8000ff8:	4b2b      	ldr	r3, [pc, #172]	@ (80010a8 <HAL_UARTEx_RxEventCallback+0xdc>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	681a      	ldr	r2, [r3, #0]
 8000ffe:	4b2a      	ldr	r3, [pc, #168]	@ (80010a8 <HAL_UARTEx_RxEventCallback+0xdc>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f022 0201 	bic.w	r2, r2, #1
 8001006:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Instance->NDTR = UART_RX_IDLE_BUFSIZE;
 8001008:	4b27      	ldr	r3, [pc, #156]	@ (80010a8 <HAL_UARTEx_RxEventCallback+0xdc>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001010:	605a      	str	r2, [r3, #4]
    __HAL_DMA_ENABLE(&hdma_usart6_rx);
 8001012:	4b25      	ldr	r3, [pc, #148]	@ (80010a8 <HAL_UARTEx_RxEventCallback+0xdc>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	681a      	ldr	r2, [r3, #0]
 8001018:	4b23      	ldr	r3, [pc, #140]	@ (80010a8 <HAL_UARTEx_RxEventCallback+0xdc>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	f042 0201 	orr.w	r2, r2, #1
 8001020:	601a      	str	r2, [r3, #0]

    HAL_UARTEx_ReceiveToIdle_DMA(&huart6, (uint8_t *)uart6_rx_IDLE_buf, UART_RX_IDLE_BUFSIZE);
 8001022:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001026:	4921      	ldr	r1, [pc, #132]	@ (80010ac <HAL_UARTEx_RxEventCallback+0xe0>)
 8001028:	4821      	ldr	r0, [pc, #132]	@ (80010b0 <HAL_UARTEx_RxEventCallback+0xe4>)
 800102a:	f004 febc 	bl	8005da6 <HAL_UARTEx_ReceiveToIdle_DMA>
    __HAL_DMA_DISABLE_IT(&hdma_usart6_rx, DMA_IT_HT);
 800102e:	4b1e      	ldr	r3, [pc, #120]	@ (80010a8 <HAL_UARTEx_RxEventCallback+0xdc>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	681a      	ldr	r2, [r3, #0]
 8001034:	4b1c      	ldr	r3, [pc, #112]	@ (80010a8 <HAL_UARTEx_RxEventCallback+0xdc>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f022 0208 	bic.w	r2, r2, #8
 800103c:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(&hdma_usart2_rx);

    HAL_UARTEx_ReceiveToIdle_DMA(&huart2, (uint8_t *) uart2_rx_IDLE_buf, UART_RX_IDLE_BUFSIZE);
    __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
  }
}
 800103e:	e02b      	b.n	8001098 <HAL_UARTEx_RxEventCallback+0xcc>
  else if (huart->Instance == USART2)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4a1b      	ldr	r2, [pc, #108]	@ (80010b4 <HAL_UARTEx_RxEventCallback+0xe8>)
 8001046:	4293      	cmp	r3, r2
 8001048:	d126      	bne.n	8001098 <HAL_UARTEx_RxEventCallback+0xcc>
    mseq_upload_master(Size);
 800104a:	887b      	ldrh	r3, [r7, #2]
 800104c:	4618      	mov	r0, r3
 800104e:	f000 fb9b 	bl	8001788 <mseq_upload_master>
    __HAL_DMA_DISABLE(&hdma_usart2_rx);
 8001052:	4b19      	ldr	r3, [pc, #100]	@ (80010b8 <HAL_UARTEx_RxEventCallback+0xec>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	681a      	ldr	r2, [r3, #0]
 8001058:	4b17      	ldr	r3, [pc, #92]	@ (80010b8 <HAL_UARTEx_RxEventCallback+0xec>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	f022 0201 	bic.w	r2, r2, #1
 8001060:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Instance->NDTR = UART_RX_IDLE_BUFSIZE;
 8001062:	4b15      	ldr	r3, [pc, #84]	@ (80010b8 <HAL_UARTEx_RxEventCallback+0xec>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	f241 3288 	movw	r2, #5000	@ 0x1388
 800106a:	605a      	str	r2, [r3, #4]
    __HAL_DMA_ENABLE(&hdma_usart2_rx);
 800106c:	4b12      	ldr	r3, [pc, #72]	@ (80010b8 <HAL_UARTEx_RxEventCallback+0xec>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	681a      	ldr	r2, [r3, #0]
 8001072:	4b11      	ldr	r3, [pc, #68]	@ (80010b8 <HAL_UARTEx_RxEventCallback+0xec>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f042 0201 	orr.w	r2, r2, #1
 800107a:	601a      	str	r2, [r3, #0]
    HAL_UARTEx_ReceiveToIdle_DMA(&huart2, (uint8_t *) uart2_rx_IDLE_buf, UART_RX_IDLE_BUFSIZE);
 800107c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001080:	490e      	ldr	r1, [pc, #56]	@ (80010bc <HAL_UARTEx_RxEventCallback+0xf0>)
 8001082:	480f      	ldr	r0, [pc, #60]	@ (80010c0 <HAL_UARTEx_RxEventCallback+0xf4>)
 8001084:	f004 fe8f 	bl	8005da6 <HAL_UARTEx_ReceiveToIdle_DMA>
    __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 8001088:	4b0b      	ldr	r3, [pc, #44]	@ (80010b8 <HAL_UARTEx_RxEventCallback+0xec>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	681a      	ldr	r2, [r3, #0]
 800108e:	4b0a      	ldr	r3, [pc, #40]	@ (80010b8 <HAL_UARTEx_RxEventCallback+0xec>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f022 0208 	bic.w	r2, r2, #8
 8001096:	601a      	str	r2, [r3, #0]
}
 8001098:	bf00      	nop
 800109a:	3708      	adds	r7, #8
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	20008a44 	.word	0x20008a44
 80010a4:	40011400 	.word	0x40011400
 80010a8:	20000500 	.word	0x20000500
 80010ac:	200076bc 	.word	0x200076bc
 80010b0:	20000458 	.word	0x20000458
 80010b4:	40004400 	.word	0x40004400
 80010b8:	200004a0 	.word	0x200004a0
 80010bc:	20006334 	.word	0x20006334
 80010c0:	20000410 	.word	0x20000410

080010c4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b083      	sub	sp, #12
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	4603      	mov	r3, r0
 80010cc:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == GPIO_PIN_13)
 80010ce:	88fb      	ldrh	r3, [r7, #6]
 80010d0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80010d4:	d102      	bne.n	80010dc <HAL_GPIO_EXTI_Callback+0x18>
  {
    UserButton_Flag = 1;
 80010d6:	4b04      	ldr	r3, [pc, #16]	@ (80010e8 <HAL_GPIO_EXTI_Callback+0x24>)
 80010d8:	2201      	movs	r2, #1
 80010da:	701a      	strb	r2, [r3, #0]
  }
}
 80010dc:	bf00      	nop
 80010de:	370c      	adds	r7, #12
 80010e0:	46bd      	mov	sp, r7
 80010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e6:	4770      	bx	lr
 80010e8:	20001510 	.word	0x20001510

080010ec <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b086      	sub	sp, #24
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	60f8      	str	r0, [r7, #12]
 80010f4:	60b9      	str	r1, [r7, #8]
 80010f6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010f8:	2300      	movs	r3, #0
 80010fa:	617b      	str	r3, [r7, #20]
 80010fc:	e00a      	b.n	8001114 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80010fe:	f3af 8000 	nop.w
 8001102:	4601      	mov	r1, r0
 8001104:	68bb      	ldr	r3, [r7, #8]
 8001106:	1c5a      	adds	r2, r3, #1
 8001108:	60ba      	str	r2, [r7, #8]
 800110a:	b2ca      	uxtb	r2, r1
 800110c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800110e:	697b      	ldr	r3, [r7, #20]
 8001110:	3301      	adds	r3, #1
 8001112:	617b      	str	r3, [r7, #20]
 8001114:	697a      	ldr	r2, [r7, #20]
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	429a      	cmp	r2, r3
 800111a:	dbf0      	blt.n	80010fe <_read+0x12>
  }

  return len;
 800111c:	687b      	ldr	r3, [r7, #4]
}
 800111e:	4618      	mov	r0, r3
 8001120:	3718      	adds	r7, #24
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}

08001126 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001126:	b480      	push	{r7}
 8001128:	b083      	sub	sp, #12
 800112a:	af00      	add	r7, sp, #0
 800112c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800112e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001132:	4618      	mov	r0, r3
 8001134:	370c      	adds	r7, #12
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr

0800113e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800113e:	b480      	push	{r7}
 8001140:	b083      	sub	sp, #12
 8001142:	af00      	add	r7, sp, #0
 8001144:	6078      	str	r0, [r7, #4]
 8001146:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800114e:	605a      	str	r2, [r3, #4]
  return 0;
 8001150:	2300      	movs	r3, #0
}
 8001152:	4618      	mov	r0, r3
 8001154:	370c      	adds	r7, #12
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr

0800115e <_isatty>:

int _isatty(int file)
{
 800115e:	b480      	push	{r7}
 8001160:	b083      	sub	sp, #12
 8001162:	af00      	add	r7, sp, #0
 8001164:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001166:	2301      	movs	r3, #1
}
 8001168:	4618      	mov	r0, r3
 800116a:	370c      	adds	r7, #12
 800116c:	46bd      	mov	sp, r7
 800116e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001172:	4770      	bx	lr

08001174 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001174:	b480      	push	{r7}
 8001176:	b085      	sub	sp, #20
 8001178:	af00      	add	r7, sp, #0
 800117a:	60f8      	str	r0, [r7, #12]
 800117c:	60b9      	str	r1, [r7, #8]
 800117e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001180:	2300      	movs	r3, #0
}
 8001182:	4618      	mov	r0, r3
 8001184:	3714      	adds	r7, #20
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr
	...

08001190 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b086      	sub	sp, #24
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001198:	4a14      	ldr	r2, [pc, #80]	@ (80011ec <_sbrk+0x5c>)
 800119a:	4b15      	ldr	r3, [pc, #84]	@ (80011f0 <_sbrk+0x60>)
 800119c:	1ad3      	subs	r3, r2, r3
 800119e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011a0:	697b      	ldr	r3, [r7, #20]
 80011a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011a4:	4b13      	ldr	r3, [pc, #76]	@ (80011f4 <_sbrk+0x64>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d102      	bne.n	80011b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011ac:	4b11      	ldr	r3, [pc, #68]	@ (80011f4 <_sbrk+0x64>)
 80011ae:	4a12      	ldr	r2, [pc, #72]	@ (80011f8 <_sbrk+0x68>)
 80011b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011b2:	4b10      	ldr	r3, [pc, #64]	@ (80011f4 <_sbrk+0x64>)
 80011b4:	681a      	ldr	r2, [r3, #0]
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	4413      	add	r3, r2
 80011ba:	693a      	ldr	r2, [r7, #16]
 80011bc:	429a      	cmp	r2, r3
 80011be:	d207      	bcs.n	80011d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011c0:	f00a f982 	bl	800b4c8 <__errno>
 80011c4:	4603      	mov	r3, r0
 80011c6:	220c      	movs	r2, #12
 80011c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011ca:	f04f 33ff 	mov.w	r3, #4294967295
 80011ce:	e009      	b.n	80011e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011d0:	4b08      	ldr	r3, [pc, #32]	@ (80011f4 <_sbrk+0x64>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011d6:	4b07      	ldr	r3, [pc, #28]	@ (80011f4 <_sbrk+0x64>)
 80011d8:	681a      	ldr	r2, [r3, #0]
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	4413      	add	r3, r2
 80011de:	4a05      	ldr	r2, [pc, #20]	@ (80011f4 <_sbrk+0x64>)
 80011e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011e2:	68fb      	ldr	r3, [r7, #12]
}
 80011e4:	4618      	mov	r0, r3
 80011e6:	3718      	adds	r7, #24
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	20030000 	.word	0x20030000
 80011f0:	00000400 	.word	0x00000400
 80011f4:	200003c4 	.word	0x200003c4
 80011f8:	20010540 	.word	0x20010540

080011fc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001200:	4b06      	ldr	r3, [pc, #24]	@ (800121c <SystemInit+0x20>)
 8001202:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001206:	4a05      	ldr	r2, [pc, #20]	@ (800121c <SystemInit+0x20>)
 8001208:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800120c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001210:	bf00      	nop
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr
 800121a:	bf00      	nop
 800121c:	e000ed00 	.word	0xe000ed00

08001220 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b086      	sub	sp, #24
 8001224:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001226:	f107 0308 	add.w	r3, r7, #8
 800122a:	2200      	movs	r2, #0
 800122c:	601a      	str	r2, [r3, #0]
 800122e:	605a      	str	r2, [r3, #4]
 8001230:	609a      	str	r2, [r3, #8]
 8001232:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001234:	463b      	mov	r3, r7
 8001236:	2200      	movs	r2, #0
 8001238:	601a      	str	r2, [r3, #0]
 800123a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800123c:	4b1e      	ldr	r3, [pc, #120]	@ (80012b8 <MX_TIM1_Init+0x98>)
 800123e:	4a1f      	ldr	r2, [pc, #124]	@ (80012bc <MX_TIM1_Init+0x9c>)
 8001240:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1000-1;
 8001242:	4b1d      	ldr	r3, [pc, #116]	@ (80012b8 <MX_TIM1_Init+0x98>)
 8001244:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001248:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800124a:	4b1b      	ldr	r3, [pc, #108]	@ (80012b8 <MX_TIM1_Init+0x98>)
 800124c:	2200      	movs	r2, #0
 800124e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 168-1;
 8001250:	4b19      	ldr	r3, [pc, #100]	@ (80012b8 <MX_TIM1_Init+0x98>)
 8001252:	22a7      	movs	r2, #167	@ 0xa7
 8001254:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001256:	4b18      	ldr	r3, [pc, #96]	@ (80012b8 <MX_TIM1_Init+0x98>)
 8001258:	2200      	movs	r2, #0
 800125a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800125c:	4b16      	ldr	r3, [pc, #88]	@ (80012b8 <MX_TIM1_Init+0x98>)
 800125e:	2200      	movs	r2, #0
 8001260:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001262:	4b15      	ldr	r3, [pc, #84]	@ (80012b8 <MX_TIM1_Init+0x98>)
 8001264:	2200      	movs	r2, #0
 8001266:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001268:	4813      	ldr	r0, [pc, #76]	@ (80012b8 <MX_TIM1_Init+0x98>)
 800126a:	f004 f857 	bl	800531c <HAL_TIM_Base_Init>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001274:	f7ff fc66 	bl	8000b44 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001278:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800127c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800127e:	f107 0308 	add.w	r3, r7, #8
 8001282:	4619      	mov	r1, r3
 8001284:	480c      	ldr	r0, [pc, #48]	@ (80012b8 <MX_TIM1_Init+0x98>)
 8001286:	f004 f9f9 	bl	800567c <HAL_TIM_ConfigClockSource>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d001      	beq.n	8001294 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001290:	f7ff fc58 	bl	8000b44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001294:	2300      	movs	r3, #0
 8001296:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001298:	2300      	movs	r3, #0
 800129a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800129c:	463b      	mov	r3, r7
 800129e:	4619      	mov	r1, r3
 80012a0:	4805      	ldr	r0, [pc, #20]	@ (80012b8 <MX_TIM1_Init+0x98>)
 80012a2:	f004 fc21 	bl	8005ae8 <HAL_TIMEx_MasterConfigSynchronization>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d001      	beq.n	80012b0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80012ac:	f7ff fc4a 	bl	8000b44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80012b0:	bf00      	nop
 80012b2:	3718      	adds	r7, #24
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	200003c8 	.word	0x200003c8
 80012bc:	40010000 	.word	0x40010000

080012c0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b084      	sub	sp, #16
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a0e      	ldr	r2, [pc, #56]	@ (8001308 <HAL_TIM_Base_MspInit+0x48>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d115      	bne.n	80012fe <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80012d2:	2300      	movs	r3, #0
 80012d4:	60fb      	str	r3, [r7, #12]
 80012d6:	4b0d      	ldr	r3, [pc, #52]	@ (800130c <HAL_TIM_Base_MspInit+0x4c>)
 80012d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012da:	4a0c      	ldr	r2, [pc, #48]	@ (800130c <HAL_TIM_Base_MspInit+0x4c>)
 80012dc:	f043 0301 	orr.w	r3, r3, #1
 80012e0:	6453      	str	r3, [r2, #68]	@ 0x44
 80012e2:	4b0a      	ldr	r3, [pc, #40]	@ (800130c <HAL_TIM_Base_MspInit+0x4c>)
 80012e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012e6:	f003 0301 	and.w	r3, r3, #1
 80012ea:	60fb      	str	r3, [r7, #12]
 80012ec:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80012ee:	2200      	movs	r2, #0
 80012f0:	2100      	movs	r1, #0
 80012f2:	2019      	movs	r0, #25
 80012f4:	f000 ffc1 	bl	800227a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80012f8:	2019      	movs	r0, #25
 80012fa:	f000 ffda 	bl	80022b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80012fe:	bf00      	nop
 8001300:	3710      	adds	r7, #16
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	40010000 	.word	0x40010000
 800130c:	40023800 	.word	0x40023800

08001310 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart6_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001314:	4b12      	ldr	r3, [pc, #72]	@ (8001360 <MX_USART2_UART_Init+0x50>)
 8001316:	4a13      	ldr	r2, [pc, #76]	@ (8001364 <MX_USART2_UART_Init+0x54>)
 8001318:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 230400;
 800131a:	4b11      	ldr	r3, [pc, #68]	@ (8001360 <MX_USART2_UART_Init+0x50>)
 800131c:	f44f 3261 	mov.w	r2, #230400	@ 0x38400
 8001320:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8001322:	4b0f      	ldr	r3, [pc, #60]	@ (8001360 <MX_USART2_UART_Init+0x50>)
 8001324:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001328:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800132a:	4b0d      	ldr	r3, [pc, #52]	@ (8001360 <MX_USART2_UART_Init+0x50>)
 800132c:	2200      	movs	r2, #0
 800132e:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8001330:	4b0b      	ldr	r3, [pc, #44]	@ (8001360 <MX_USART2_UART_Init+0x50>)
 8001332:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001336:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001338:	4b09      	ldr	r3, [pc, #36]	@ (8001360 <MX_USART2_UART_Init+0x50>)
 800133a:	220c      	movs	r2, #12
 800133c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800133e:	4b08      	ldr	r3, [pc, #32]	@ (8001360 <MX_USART2_UART_Init+0x50>)
 8001340:	2200      	movs	r2, #0
 8001342:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001344:	4b06      	ldr	r3, [pc, #24]	@ (8001360 <MX_USART2_UART_Init+0x50>)
 8001346:	2200      	movs	r2, #0
 8001348:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800134a:	4805      	ldr	r0, [pc, #20]	@ (8001360 <MX_USART2_UART_Init+0x50>)
 800134c:	f004 fc5c 	bl	8005c08 <HAL_UART_Init>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d001      	beq.n	800135a <MX_USART2_UART_Init+0x4a>
  {
    Error_Handler();
 8001356:	f7ff fbf5 	bl	8000b44 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800135a:	bf00      	nop
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	20000410 	.word	0x20000410
 8001364:	40004400 	.word	0x40004400

08001368 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800136c:	4b12      	ldr	r3, [pc, #72]	@ (80013b8 <MX_USART6_UART_Init+0x50>)
 800136e:	4a13      	ldr	r2, [pc, #76]	@ (80013bc <MX_USART6_UART_Init+0x54>)
 8001370:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 230400;
 8001372:	4b11      	ldr	r3, [pc, #68]	@ (80013b8 <MX_USART6_UART_Init+0x50>)
 8001374:	f44f 3261 	mov.w	r2, #230400	@ 0x38400
 8001378:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_9B;
 800137a:	4b0f      	ldr	r3, [pc, #60]	@ (80013b8 <MX_USART6_UART_Init+0x50>)
 800137c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001380:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001382:	4b0d      	ldr	r3, [pc, #52]	@ (80013b8 <MX_USART6_UART_Init+0x50>)
 8001384:	2200      	movs	r2, #0
 8001386:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_EVEN;
 8001388:	4b0b      	ldr	r3, [pc, #44]	@ (80013b8 <MX_USART6_UART_Init+0x50>)
 800138a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800138e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001390:	4b09      	ldr	r3, [pc, #36]	@ (80013b8 <MX_USART6_UART_Init+0x50>)
 8001392:	220c      	movs	r2, #12
 8001394:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001396:	4b08      	ldr	r3, [pc, #32]	@ (80013b8 <MX_USART6_UART_Init+0x50>)
 8001398:	2200      	movs	r2, #0
 800139a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800139c:	4b06      	ldr	r3, [pc, #24]	@ (80013b8 <MX_USART6_UART_Init+0x50>)
 800139e:	2200      	movs	r2, #0
 80013a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80013a2:	4805      	ldr	r0, [pc, #20]	@ (80013b8 <MX_USART6_UART_Init+0x50>)
 80013a4:	f004 fc30 	bl	8005c08 <HAL_UART_Init>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d001      	beq.n	80013b2 <MX_USART6_UART_Init+0x4a>
  {
    Error_Handler();
 80013ae:	f7ff fbc9 	bl	8000b44 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80013b2:	bf00      	nop
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	20000458 	.word	0x20000458
 80013bc:	40011400 	.word	0x40011400

080013c0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b08c      	sub	sp, #48	@ 0x30
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013c8:	f107 031c 	add.w	r3, r7, #28
 80013cc:	2200      	movs	r2, #0
 80013ce:	601a      	str	r2, [r3, #0]
 80013d0:	605a      	str	r2, [r3, #4]
 80013d2:	609a      	str	r2, [r3, #8]
 80013d4:	60da      	str	r2, [r3, #12]
 80013d6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a77      	ldr	r2, [pc, #476]	@ (80015bc <HAL_UART_MspInit+0x1fc>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	f040 8081 	bne.w	80014e6 <HAL_UART_MspInit+0x126>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80013e4:	2300      	movs	r3, #0
 80013e6:	61bb      	str	r3, [r7, #24]
 80013e8:	4b75      	ldr	r3, [pc, #468]	@ (80015c0 <HAL_UART_MspInit+0x200>)
 80013ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013ec:	4a74      	ldr	r2, [pc, #464]	@ (80015c0 <HAL_UART_MspInit+0x200>)
 80013ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80013f2:	6413      	str	r3, [r2, #64]	@ 0x40
 80013f4:	4b72      	ldr	r3, [pc, #456]	@ (80015c0 <HAL_UART_MspInit+0x200>)
 80013f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013fc:	61bb      	str	r3, [r7, #24]
 80013fe:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001400:	2300      	movs	r3, #0
 8001402:	617b      	str	r3, [r7, #20]
 8001404:	4b6e      	ldr	r3, [pc, #440]	@ (80015c0 <HAL_UART_MspInit+0x200>)
 8001406:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001408:	4a6d      	ldr	r2, [pc, #436]	@ (80015c0 <HAL_UART_MspInit+0x200>)
 800140a:	f043 0301 	orr.w	r3, r3, #1
 800140e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001410:	4b6b      	ldr	r3, [pc, #428]	@ (80015c0 <HAL_UART_MspInit+0x200>)
 8001412:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001414:	f003 0301 	and.w	r3, r3, #1
 8001418:	617b      	str	r3, [r7, #20]
 800141a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800141c:	2300      	movs	r3, #0
 800141e:	613b      	str	r3, [r7, #16]
 8001420:	4b67      	ldr	r3, [pc, #412]	@ (80015c0 <HAL_UART_MspInit+0x200>)
 8001422:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001424:	4a66      	ldr	r2, [pc, #408]	@ (80015c0 <HAL_UART_MspInit+0x200>)
 8001426:	f043 0308 	orr.w	r3, r3, #8
 800142a:	6313      	str	r3, [r2, #48]	@ 0x30
 800142c:	4b64      	ldr	r3, [pc, #400]	@ (80015c0 <HAL_UART_MspInit+0x200>)
 800142e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001430:	f003 0308 	and.w	r3, r3, #8
 8001434:	613b      	str	r3, [r7, #16]
 8001436:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001438:	2308      	movs	r3, #8
 800143a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800143c:	2302      	movs	r3, #2
 800143e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001440:	2300      	movs	r3, #0
 8001442:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001444:	2303      	movs	r3, #3
 8001446:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001448:	2307      	movs	r3, #7
 800144a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800144c:	f107 031c 	add.w	r3, r7, #28
 8001450:	4619      	mov	r1, r3
 8001452:	485c      	ldr	r0, [pc, #368]	@ (80015c4 <HAL_UART_MspInit+0x204>)
 8001454:	f001 fe9a 	bl	800318c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001458:	2320      	movs	r3, #32
 800145a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800145c:	2302      	movs	r3, #2
 800145e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001460:	2300      	movs	r3, #0
 8001462:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001464:	2303      	movs	r3, #3
 8001466:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001468:	2307      	movs	r3, #7
 800146a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800146c:	f107 031c 	add.w	r3, r7, #28
 8001470:	4619      	mov	r1, r3
 8001472:	4855      	ldr	r0, [pc, #340]	@ (80015c8 <HAL_UART_MspInit+0x208>)
 8001474:	f001 fe8a 	bl	800318c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8001478:	4b54      	ldr	r3, [pc, #336]	@ (80015cc <HAL_UART_MspInit+0x20c>)
 800147a:	4a55      	ldr	r2, [pc, #340]	@ (80015d0 <HAL_UART_MspInit+0x210>)
 800147c:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800147e:	4b53      	ldr	r3, [pc, #332]	@ (80015cc <HAL_UART_MspInit+0x20c>)
 8001480:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001484:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001486:	4b51      	ldr	r3, [pc, #324]	@ (80015cc <HAL_UART_MspInit+0x20c>)
 8001488:	2200      	movs	r2, #0
 800148a:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800148c:	4b4f      	ldr	r3, [pc, #316]	@ (80015cc <HAL_UART_MspInit+0x20c>)
 800148e:	2200      	movs	r2, #0
 8001490:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001492:	4b4e      	ldr	r3, [pc, #312]	@ (80015cc <HAL_UART_MspInit+0x20c>)
 8001494:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001498:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800149a:	4b4c      	ldr	r3, [pc, #304]	@ (80015cc <HAL_UART_MspInit+0x20c>)
 800149c:	2200      	movs	r2, #0
 800149e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80014a0:	4b4a      	ldr	r3, [pc, #296]	@ (80015cc <HAL_UART_MspInit+0x20c>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80014a6:	4b49      	ldr	r3, [pc, #292]	@ (80015cc <HAL_UART_MspInit+0x20c>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80014ac:	4b47      	ldr	r3, [pc, #284]	@ (80015cc <HAL_UART_MspInit+0x20c>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80014b2:	4b46      	ldr	r3, [pc, #280]	@ (80015cc <HAL_UART_MspInit+0x20c>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80014b8:	4844      	ldr	r0, [pc, #272]	@ (80015cc <HAL_UART_MspInit+0x20c>)
 80014ba:	f000 ff15 	bl	80022e8 <HAL_DMA_Init>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d001      	beq.n	80014c8 <HAL_UART_MspInit+0x108>
    {
      Error_Handler();
 80014c4:	f7ff fb3e 	bl	8000b44 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	4a40      	ldr	r2, [pc, #256]	@ (80015cc <HAL_UART_MspInit+0x20c>)
 80014cc:	63da      	str	r2, [r3, #60]	@ 0x3c
 80014ce:	4a3f      	ldr	r2, [pc, #252]	@ (80015cc <HAL_UART_MspInit+0x20c>)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80014d4:	2200      	movs	r2, #0
 80014d6:	2100      	movs	r1, #0
 80014d8:	2026      	movs	r0, #38	@ 0x26
 80014da:	f000 fece 	bl	800227a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80014de:	2026      	movs	r0, #38	@ 0x26
 80014e0:	f000 fee7 	bl	80022b2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 80014e4:	e066      	b.n	80015b4 <HAL_UART_MspInit+0x1f4>
  else if(uartHandle->Instance==USART6)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4a3a      	ldr	r2, [pc, #232]	@ (80015d4 <HAL_UART_MspInit+0x214>)
 80014ec:	4293      	cmp	r3, r2
 80014ee:	d161      	bne.n	80015b4 <HAL_UART_MspInit+0x1f4>
    __HAL_RCC_USART6_CLK_ENABLE();
 80014f0:	2300      	movs	r3, #0
 80014f2:	60fb      	str	r3, [r7, #12]
 80014f4:	4b32      	ldr	r3, [pc, #200]	@ (80015c0 <HAL_UART_MspInit+0x200>)
 80014f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014f8:	4a31      	ldr	r2, [pc, #196]	@ (80015c0 <HAL_UART_MspInit+0x200>)
 80014fa:	f043 0320 	orr.w	r3, r3, #32
 80014fe:	6453      	str	r3, [r2, #68]	@ 0x44
 8001500:	4b2f      	ldr	r3, [pc, #188]	@ (80015c0 <HAL_UART_MspInit+0x200>)
 8001502:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001504:	f003 0320 	and.w	r3, r3, #32
 8001508:	60fb      	str	r3, [r7, #12]
 800150a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800150c:	2300      	movs	r3, #0
 800150e:	60bb      	str	r3, [r7, #8]
 8001510:	4b2b      	ldr	r3, [pc, #172]	@ (80015c0 <HAL_UART_MspInit+0x200>)
 8001512:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001514:	4a2a      	ldr	r2, [pc, #168]	@ (80015c0 <HAL_UART_MspInit+0x200>)
 8001516:	f043 0304 	orr.w	r3, r3, #4
 800151a:	6313      	str	r3, [r2, #48]	@ 0x30
 800151c:	4b28      	ldr	r3, [pc, #160]	@ (80015c0 <HAL_UART_MspInit+0x200>)
 800151e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001520:	f003 0304 	and.w	r3, r3, #4
 8001524:	60bb      	str	r3, [r7, #8]
 8001526:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001528:	23c0      	movs	r3, #192	@ 0xc0
 800152a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800152c:	2302      	movs	r3, #2
 800152e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001530:	2300      	movs	r3, #0
 8001532:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001534:	2303      	movs	r3, #3
 8001536:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001538:	2308      	movs	r3, #8
 800153a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800153c:	f107 031c 	add.w	r3, r7, #28
 8001540:	4619      	mov	r1, r3
 8001542:	4825      	ldr	r0, [pc, #148]	@ (80015d8 <HAL_UART_MspInit+0x218>)
 8001544:	f001 fe22 	bl	800318c <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8001548:	4b24      	ldr	r3, [pc, #144]	@ (80015dc <HAL_UART_MspInit+0x21c>)
 800154a:	4a25      	ldr	r2, [pc, #148]	@ (80015e0 <HAL_UART_MspInit+0x220>)
 800154c:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 800154e:	4b23      	ldr	r3, [pc, #140]	@ (80015dc <HAL_UART_MspInit+0x21c>)
 8001550:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8001554:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001556:	4b21      	ldr	r3, [pc, #132]	@ (80015dc <HAL_UART_MspInit+0x21c>)
 8001558:	2200      	movs	r2, #0
 800155a:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800155c:	4b1f      	ldr	r3, [pc, #124]	@ (80015dc <HAL_UART_MspInit+0x21c>)
 800155e:	2200      	movs	r2, #0
 8001560:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001562:	4b1e      	ldr	r3, [pc, #120]	@ (80015dc <HAL_UART_MspInit+0x21c>)
 8001564:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001568:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800156a:	4b1c      	ldr	r3, [pc, #112]	@ (80015dc <HAL_UART_MspInit+0x21c>)
 800156c:	2200      	movs	r2, #0
 800156e:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001570:	4b1a      	ldr	r3, [pc, #104]	@ (80015dc <HAL_UART_MspInit+0x21c>)
 8001572:	2200      	movs	r2, #0
 8001574:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 8001576:	4b19      	ldr	r3, [pc, #100]	@ (80015dc <HAL_UART_MspInit+0x21c>)
 8001578:	2200      	movs	r2, #0
 800157a:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 800157c:	4b17      	ldr	r3, [pc, #92]	@ (80015dc <HAL_UART_MspInit+0x21c>)
 800157e:	2200      	movs	r2, #0
 8001580:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001582:	4b16      	ldr	r3, [pc, #88]	@ (80015dc <HAL_UART_MspInit+0x21c>)
 8001584:	2200      	movs	r2, #0
 8001586:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8001588:	4814      	ldr	r0, [pc, #80]	@ (80015dc <HAL_UART_MspInit+0x21c>)
 800158a:	f000 fead 	bl	80022e8 <HAL_DMA_Init>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d001      	beq.n	8001598 <HAL_UART_MspInit+0x1d8>
      Error_Handler();
 8001594:	f7ff fad6 	bl	8000b44 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart6_rx);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	4a10      	ldr	r2, [pc, #64]	@ (80015dc <HAL_UART_MspInit+0x21c>)
 800159c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800159e:	4a0f      	ldr	r2, [pc, #60]	@ (80015dc <HAL_UART_MspInit+0x21c>)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 80015a4:	2200      	movs	r2, #0
 80015a6:	2100      	movs	r1, #0
 80015a8:	2047      	movs	r0, #71	@ 0x47
 80015aa:	f000 fe66 	bl	800227a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80015ae:	2047      	movs	r0, #71	@ 0x47
 80015b0:	f000 fe7f 	bl	80022b2 <HAL_NVIC_EnableIRQ>
}
 80015b4:	bf00      	nop
 80015b6:	3730      	adds	r7, #48	@ 0x30
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	40004400 	.word	0x40004400
 80015c0:	40023800 	.word	0x40023800
 80015c4:	40020000 	.word	0x40020000
 80015c8:	40020c00 	.word	0x40020c00
 80015cc:	200004a0 	.word	0x200004a0
 80015d0:	40026088 	.word	0x40026088
 80015d4:	40011400 	.word	0x40011400
 80015d8:	40020800 	.word	0x40020800
 80015dc:	20000500 	.word	0x20000500
 80015e0:	40026428 	.word	0x40026428

080015e4 <Decode_CalChecksum>:
bool flag_end;

uint32_t uart2_rx_stackcnt_total = 0;

static uint8_t Decode_CalChecksum(const uint8_t * pData, uint8_t length)  // CKT 에 대한 Checksum 검증
{
 80015e4:	b480      	push	{r7}
 80015e6:	b087      	sub	sp, #28
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
 80015ec:	460b      	mov	r3, r1
 80015ee:	70fb      	strb	r3, [r7, #3]
    uint8_t ck8 = 0x52;
 80015f0:	2352      	movs	r3, #82	@ 0x52
 80015f2:	75fb      	strb	r3, [r7, #23]
    uint8_t checksumsize = 0;
 80015f4:	2300      	movs	r3, #0
 80015f6:	757b      	strb	r3, [r7, #21]

    checksumsize = length;
 80015f8:	78fb      	ldrb	r3, [r7, #3]
 80015fa:	757b      	strb	r3, [r7, #21]

    // ck8 ^= *pData++; // MC Check 

    // ck8 ^= *pData++ & 0xC0; // CKT 6b clear. CKT Check
    for (uint8_t i = 0; i < checksumsize; i++)
 80015fc:	2300      	movs	r3, #0
 80015fe:	75bb      	strb	r3, [r7, #22]
 8001600:	e009      	b.n	8001616 <Decode_CalChecksum+0x32>
    {
        ck8 ^= *pData++;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	1c5a      	adds	r2, r3, #1
 8001606:	607a      	str	r2, [r7, #4]
 8001608:	781a      	ldrb	r2, [r3, #0]
 800160a:	7dfb      	ldrb	r3, [r7, #23]
 800160c:	4053      	eors	r3, r2
 800160e:	75fb      	strb	r3, [r7, #23]
    for (uint8_t i = 0; i < checksumsize; i++)
 8001610:	7dbb      	ldrb	r3, [r7, #22]
 8001612:	3301      	adds	r3, #1
 8001614:	75bb      	strb	r3, [r7, #22]
 8001616:	7dba      	ldrb	r2, [r7, #22]
 8001618:	7d7b      	ldrb	r3, [r7, #21]
 800161a:	429a      	cmp	r2, r3
 800161c:	d3f1      	bcc.n	8001602 <Decode_CalChecksum+0x1e>
    // {
    //         ck8 ^= *pData++;
    // }

    //Section A.1.6
    uint8_t bit5 = ((ck8 >> 7) & 1U) ^ ((ck8 >> 5) & 1U) ^ ((ck8 >> 3) & 1U) ^ ((ck8 >> 1) & 1U);
 800161e:	7dfb      	ldrb	r3, [r7, #23]
 8001620:	09db      	lsrs	r3, r3, #7
 8001622:	b2da      	uxtb	r2, r3
 8001624:	7dfb      	ldrb	r3, [r7, #23]
 8001626:	095b      	lsrs	r3, r3, #5
 8001628:	b2db      	uxtb	r3, r3
 800162a:	4053      	eors	r3, r2
 800162c:	b2da      	uxtb	r2, r3
 800162e:	7dfb      	ldrb	r3, [r7, #23]
 8001630:	08db      	lsrs	r3, r3, #3
 8001632:	b2db      	uxtb	r3, r3
 8001634:	4053      	eors	r3, r2
 8001636:	b2da      	uxtb	r2, r3
 8001638:	7dfb      	ldrb	r3, [r7, #23]
 800163a:	085b      	lsrs	r3, r3, #1
 800163c:	b2db      	uxtb	r3, r3
 800163e:	4053      	eors	r3, r2
 8001640:	b2db      	uxtb	r3, r3
 8001642:	f003 0301 	and.w	r3, r3, #1
 8001646:	753b      	strb	r3, [r7, #20]
    uint8_t bit4 = ((ck8 >> 6) & 1U) ^ ((ck8 >> 4) & 1U) ^ ((ck8 >> 2) & 1U) ^ (ck8 & 1U);
 8001648:	7dfb      	ldrb	r3, [r7, #23]
 800164a:	099b      	lsrs	r3, r3, #6
 800164c:	b2da      	uxtb	r2, r3
 800164e:	7dfb      	ldrb	r3, [r7, #23]
 8001650:	091b      	lsrs	r3, r3, #4
 8001652:	b2db      	uxtb	r3, r3
 8001654:	4053      	eors	r3, r2
 8001656:	b2da      	uxtb	r2, r3
 8001658:	7dfb      	ldrb	r3, [r7, #23]
 800165a:	089b      	lsrs	r3, r3, #2
 800165c:	b2db      	uxtb	r3, r3
 800165e:	4053      	eors	r3, r2
 8001660:	b2da      	uxtb	r2, r3
 8001662:	7dfb      	ldrb	r3, [r7, #23]
 8001664:	4053      	eors	r3, r2
 8001666:	b2db      	uxtb	r3, r3
 8001668:	f003 0301 	and.w	r3, r3, #1
 800166c:	74fb      	strb	r3, [r7, #19]
    uint8_t bit3 = ((ck8 >> 7) & 1U) ^ ((ck8 >> 6) & 1U);
 800166e:	7dfb      	ldrb	r3, [r7, #23]
 8001670:	09db      	lsrs	r3, r3, #7
 8001672:	b2da      	uxtb	r2, r3
 8001674:	7dfb      	ldrb	r3, [r7, #23]
 8001676:	099b      	lsrs	r3, r3, #6
 8001678:	b2db      	uxtb	r3, r3
 800167a:	4053      	eors	r3, r2
 800167c:	b2db      	uxtb	r3, r3
 800167e:	f003 0301 	and.w	r3, r3, #1
 8001682:	74bb      	strb	r3, [r7, #18]
    uint8_t bit2 = ((ck8 >> 5) & 1U) ^ ((ck8 >> 4) & 1U);
 8001684:	7dfb      	ldrb	r3, [r7, #23]
 8001686:	095b      	lsrs	r3, r3, #5
 8001688:	b2da      	uxtb	r2, r3
 800168a:	7dfb      	ldrb	r3, [r7, #23]
 800168c:	091b      	lsrs	r3, r3, #4
 800168e:	b2db      	uxtb	r3, r3
 8001690:	4053      	eors	r3, r2
 8001692:	b2db      	uxtb	r3, r3
 8001694:	f003 0301 	and.w	r3, r3, #1
 8001698:	747b      	strb	r3, [r7, #17]
    uint8_t bit1 = ((ck8 >> 3) & 1U) ^ ((ck8 >> 2) & 1U);
 800169a:	7dfb      	ldrb	r3, [r7, #23]
 800169c:	08db      	lsrs	r3, r3, #3
 800169e:	b2da      	uxtb	r2, r3
 80016a0:	7dfb      	ldrb	r3, [r7, #23]
 80016a2:	089b      	lsrs	r3, r3, #2
 80016a4:	b2db      	uxtb	r3, r3
 80016a6:	4053      	eors	r3, r2
 80016a8:	b2db      	uxtb	r3, r3
 80016aa:	f003 0301 	and.w	r3, r3, #1
 80016ae:	743b      	strb	r3, [r7, #16]
    uint8_t bit0 = ((ck8 >> 1) & 1U) ^ ((ck8 & 1U));
 80016b0:	7dfb      	ldrb	r3, [r7, #23]
 80016b2:	085b      	lsrs	r3, r3, #1
 80016b4:	b2da      	uxtb	r2, r3
 80016b6:	7dfb      	ldrb	r3, [r7, #23]
 80016b8:	4053      	eors	r3, r2
 80016ba:	b2db      	uxtb	r3, r3
 80016bc:	f003 0301 	and.w	r3, r3, #1
 80016c0:	73fb      	strb	r3, [r7, #15]
    uint8_t ck6 =   bit5 << 5 |
 80016c2:	7d3b      	ldrb	r3, [r7, #20]
 80016c4:	015b      	lsls	r3, r3, #5
 80016c6:	b25a      	sxtb	r2, r3
                    bit4 << 4 |
 80016c8:	7cfb      	ldrb	r3, [r7, #19]
 80016ca:	011b      	lsls	r3, r3, #4
    uint8_t ck6 =   bit5 << 5 |
 80016cc:	b25b      	sxtb	r3, r3
 80016ce:	4313      	orrs	r3, r2
 80016d0:	b25a      	sxtb	r2, r3
                    bit3 << 3 |
 80016d2:	7cbb      	ldrb	r3, [r7, #18]
 80016d4:	00db      	lsls	r3, r3, #3
                    bit4 << 4 |
 80016d6:	b25b      	sxtb	r3, r3
 80016d8:	4313      	orrs	r3, r2
 80016da:	b25a      	sxtb	r2, r3
                    bit2 << 2 |
 80016dc:	7c7b      	ldrb	r3, [r7, #17]
 80016de:	009b      	lsls	r3, r3, #2
                    bit3 << 3 |
 80016e0:	b25b      	sxtb	r3, r3
 80016e2:	4313      	orrs	r3, r2
 80016e4:	b25a      	sxtb	r2, r3
                    bit1 << 1 |
 80016e6:	7c3b      	ldrb	r3, [r7, #16]
 80016e8:	005b      	lsls	r3, r3, #1
                    bit2 << 2 |
 80016ea:	b25b      	sxtb	r3, r3
 80016ec:	4313      	orrs	r3, r2
 80016ee:	b25a      	sxtb	r2, r3
                    bit1 << 1 |
 80016f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016f4:	4313      	orrs	r3, r2
 80016f6:	b25b      	sxtb	r3, r3
    uint8_t ck6 =   bit5 << 5 |
 80016f8:	73bb      	strb	r3, [r7, #14]
                    bit0;
    return ck6;
 80016fa:	7bbb      	ldrb	r3, [r7, #14]
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	371c      	adds	r7, #28
 8001700:	46bd      	mov	sp, r7
 8001702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001706:	4770      	bx	lr

08001708 <Decode_CKT_GetChecksum>:

static uint8_t Decode_CKT_GetChecksum (const uint8_t * pData, uint8_t length)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b084      	sub	sp, #16
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
 8001710:	460b      	mov	r3, r1
 8001712:	70fb      	strb	r3, [r7, #3]
    uint8_t checksum6 = 0;
 8001714:	2300      	movs	r3, #0
 8001716:	73fb      	strb	r3, [r7, #15]
    uint8_t master_checksum = 0;
 8001718:	2300      	movs	r3, #0
 800171a:	73bb      	strb	r3, [r7, #14]
    uint8_t checksum_mctypebit = 0;
 800171c:	2300      	movs	r3, #0
 800171e:	737b      	strb	r3, [r7, #13]
    uint8_t calculated_checksum = 0;
 8001720:	2300      	movs	r3, #0
 8001722:	733b      	strb	r3, [r7, #12]
    
    checksum6 = Decode_CalChecksum((uint8_t *) pData, length);
 8001724:	78fb      	ldrb	r3, [r7, #3]
 8001726:	4619      	mov	r1, r3
 8001728:	6878      	ldr	r0, [r7, #4]
 800172a:	f7ff ff5b 	bl	80015e4 <Decode_CalChecksum>
 800172e:	4603      	mov	r3, r0
 8001730:	73fb      	strb	r3, [r7, #15]
    checksum_mctypebit = mseq[mseq_cnt].CKT & 0xC0;
 8001732:	4b13      	ldr	r3, [pc, #76]	@ (8001780 <Decode_CKT_GetChecksum+0x78>)
 8001734:	881b      	ldrh	r3, [r3, #0]
 8001736:	4619      	mov	r1, r3
 8001738:	4a12      	ldr	r2, [pc, #72]	@ (8001784 <Decode_CKT_GetChecksum+0x7c>)
 800173a:	460b      	mov	r3, r1
 800173c:	005b      	lsls	r3, r3, #1
 800173e:	440b      	add	r3, r1
 8001740:	00db      	lsls	r3, r3, #3
 8001742:	4413      	add	r3, r2
 8001744:	3302      	adds	r3, #2
 8001746:	781b      	ldrb	r3, [r3, #0]
 8001748:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800174c:	737b      	strb	r3, [r7, #13]
    calculated_checksum = checksum_mctypebit | checksum6;
 800174e:	7b7a      	ldrb	r2, [r7, #13]
 8001750:	7bfb      	ldrb	r3, [r7, #15]
 8001752:	4313      	orrs	r3, r2
 8001754:	733b      	strb	r3, [r7, #12]

    return (mseq[mseq_cnt].CKT == calculated_checksum) ? 1 : 0;
 8001756:	4b0a      	ldr	r3, [pc, #40]	@ (8001780 <Decode_CKT_GetChecksum+0x78>)
 8001758:	881b      	ldrh	r3, [r3, #0]
 800175a:	4619      	mov	r1, r3
 800175c:	4a09      	ldr	r2, [pc, #36]	@ (8001784 <Decode_CKT_GetChecksum+0x7c>)
 800175e:	460b      	mov	r3, r1
 8001760:	005b      	lsls	r3, r3, #1
 8001762:	440b      	add	r3, r1
 8001764:	00db      	lsls	r3, r3, #3
 8001766:	4413      	add	r3, r2
 8001768:	3302      	adds	r3, #2
 800176a:	781b      	ldrb	r3, [r3, #0]
 800176c:	7b3a      	ldrb	r2, [r7, #12]
 800176e:	429a      	cmp	r2, r3
 8001770:	bf0c      	ite	eq
 8001772:	2301      	moveq	r3, #1
 8001774:	2300      	movne	r3, #0
 8001776:	b2db      	uxtb	r3, r3
    // }
    // else
    // {
    //     return 0;
    // }
}
 8001778:	4618      	mov	r0, r3
 800177a:	3710      	adds	r7, #16
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}
 8001780:	20008a46 	.word	0x20008a46
 8001784:	20008a48 	.word	0x20008a48

08001788 <mseq_upload_master>:
    printf(" Checksum calculated_checksum Value : 0x%02X\r\n", calculated_checksum);
    printf(" Checksum Pass : %d\r\n", ChecksumTorF);
}

void mseq_upload_master (uint16_t size)
{
 8001788:	b590      	push	{r4, r7, lr}
 800178a:	b085      	sub	sp, #20
 800178c:	af00      	add	r7, sp, #0
 800178e:	4603      	mov	r3, r0
 8001790:	80fb      	strh	r3, [r7, #6]
    // uint16_t rxdataSize = 0;
    // uint16_t cks_offset = 1;
    uint8_t rxdataSize = 0;
 8001792:	2300      	movs	r3, #0
 8001794:	73fb      	strb	r3, [r7, #15]
    uint8_t cks_offset = 1;
 8001796:	2301      	movs	r3, #1
 8001798:	73bb      	strb	r3, [r7, #14]
    uint8_t checksumflag = 0;
 800179a:	2300      	movs	r3, #0
 800179c:	737b      	strb	r3, [r7, #13]
    uint8_t checksumlength = 0;
 800179e:	2300      	movs	r3, #0
 80017a0:	733b      	strb	r3, [r7, #12]

    rxdataSize = (uint8_t)size;
 80017a2:	88fb      	ldrh	r3, [r7, #6]
 80017a4:	73fb      	strb	r3, [r7, #15]
    checksumlength = rxdataSize - mseq[mseq_cnt + cks_offset].Device_octet_cnt;
 80017a6:	4b4a      	ldr	r3, [pc, #296]	@ (80018d0 <mseq_upload_master+0x148>)
 80017a8:	881b      	ldrh	r3, [r3, #0]
 80017aa:	461a      	mov	r2, r3
 80017ac:	7bbb      	ldrb	r3, [r7, #14]
 80017ae:	441a      	add	r2, r3
 80017b0:	4948      	ldr	r1, [pc, #288]	@ (80018d4 <mseq_upload_master+0x14c>)
 80017b2:	4613      	mov	r3, r2
 80017b4:	005b      	lsls	r3, r3, #1
 80017b6:	4413      	add	r3, r2
 80017b8:	00db      	lsls	r3, r3, #3
 80017ba:	440b      	add	r3, r1
 80017bc:	330d      	adds	r3, #13
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	7bfa      	ldrb	r2, [r7, #15]
 80017c2:	1ad3      	subs	r3, r2, r3
 80017c4:	733b      	strb	r3, [r7, #12]
    
    memcpy(uart2_rx_stack_buf + uart2_rx_stackcnt_total, uart2_rx_IDLE_buf, (rxdataSize - mseq[mseq_cnt + cks_offset].Device_octet_cnt));
 80017c6:	4b44      	ldr	r3, [pc, #272]	@ (80018d8 <mseq_upload_master+0x150>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4a44      	ldr	r2, [pc, #272]	@ (80018dc <mseq_upload_master+0x154>)
 80017cc:	1898      	adds	r0, r3, r2
 80017ce:	7bf9      	ldrb	r1, [r7, #15]
 80017d0:	4b3f      	ldr	r3, [pc, #252]	@ (80018d0 <mseq_upload_master+0x148>)
 80017d2:	881b      	ldrh	r3, [r3, #0]
 80017d4:	461a      	mov	r2, r3
 80017d6:	7bbb      	ldrb	r3, [r7, #14]
 80017d8:	441a      	add	r2, r3
 80017da:	4c3e      	ldr	r4, [pc, #248]	@ (80018d4 <mseq_upload_master+0x14c>)
 80017dc:	4613      	mov	r3, r2
 80017de:	005b      	lsls	r3, r3, #1
 80017e0:	4413      	add	r3, r2
 80017e2:	00db      	lsls	r3, r3, #3
 80017e4:	4423      	add	r3, r4
 80017e6:	330d      	adds	r3, #13
 80017e8:	781b      	ldrb	r3, [r3, #0]
 80017ea:	1acb      	subs	r3, r1, r3
 80017ec:	461a      	mov	r2, r3
 80017ee:	493c      	ldr	r1, [pc, #240]	@ (80018e0 <mseq_upload_master+0x158>)
 80017f0:	f009 fe97 	bl	800b522 <memcpy>
    mseq[mseq_cnt].Start_Octet = uart2_rx_stack_buf + uart2_rx_stackcnt_total; // 데이터 시작점부터 출력 하기위한 포인터 
 80017f4:	4b38      	ldr	r3, [pc, #224]	@ (80018d8 <mseq_upload_master+0x150>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a35      	ldr	r2, [pc, #212]	@ (80018d0 <mseq_upload_master+0x148>)
 80017fa:	8812      	ldrh	r2, [r2, #0]
 80017fc:	4610      	mov	r0, r2
 80017fe:	4a37      	ldr	r2, [pc, #220]	@ (80018dc <mseq_upload_master+0x154>)
 8001800:	441a      	add	r2, r3
 8001802:	4934      	ldr	r1, [pc, #208]	@ (80018d4 <mseq_upload_master+0x14c>)
 8001804:	4603      	mov	r3, r0
 8001806:	005b      	lsls	r3, r3, #1
 8001808:	4403      	add	r3, r0
 800180a:	00db      	lsls	r3, r3, #3
 800180c:	440b      	add	r3, r1
 800180e:	3310      	adds	r3, #16
 8001810:	601a      	str	r2, [r3, #0]
    // mseq[mseq_cnt].End_Octet = uart2_rx_IDLE_buf[rxdataSize - 1]; // 데이터 끝 지점 포인터 (수정 필요함)
    uart2_rx_stackcnt_total += rxdataSize; // octet 데이터 수 만큼 포인터 증가
 8001812:	7bfa      	ldrb	r2, [r7, #15]
 8001814:	4b30      	ldr	r3, [pc, #192]	@ (80018d8 <mseq_upload_master+0x150>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4413      	add	r3, r2
 800181a:	4a2f      	ldr	r2, [pc, #188]	@ (80018d8 <mseq_upload_master+0x150>)
 800181c:	6013      	str	r3, [r2, #0]

    mseq[mseq_cnt].Master_octet_cnt = rxdataSize;
 800181e:	4b2c      	ldr	r3, [pc, #176]	@ (80018d0 <mseq_upload_master+0x148>)
 8001820:	881b      	ldrh	r3, [r3, #0]
 8001822:	4619      	mov	r1, r3
 8001824:	4a2b      	ldr	r2, [pc, #172]	@ (80018d4 <mseq_upload_master+0x14c>)
 8001826:	460b      	mov	r3, r1
 8001828:	005b      	lsls	r3, r3, #1
 800182a:	440b      	add	r3, r1
 800182c:	00db      	lsls	r3, r3, #3
 800182e:	4413      	add	r3, r2
 8001830:	330c      	adds	r3, #12
 8001832:	7bfa      	ldrb	r2, [r7, #15]
 8001834:	701a      	strb	r2, [r3, #0]

    mseq[mseq_cnt].MC = uart2_rx_IDLE_buf[0];
 8001836:	4b26      	ldr	r3, [pc, #152]	@ (80018d0 <mseq_upload_master+0x148>)
 8001838:	881b      	ldrh	r3, [r3, #0]
 800183a:	4619      	mov	r1, r3
 800183c:	4b28      	ldr	r3, [pc, #160]	@ (80018e0 <mseq_upload_master+0x158>)
 800183e:	7818      	ldrb	r0, [r3, #0]
 8001840:	4a24      	ldr	r2, [pc, #144]	@ (80018d4 <mseq_upload_master+0x14c>)
 8001842:	460b      	mov	r3, r1
 8001844:	005b      	lsls	r3, r3, #1
 8001846:	440b      	add	r3, r1
 8001848:	00db      	lsls	r3, r3, #3
 800184a:	4413      	add	r3, r2
 800184c:	3301      	adds	r3, #1
 800184e:	4602      	mov	r2, r0
 8001850:	701a      	strb	r2, [r3, #0]
    mseq[mseq_cnt].CKT = uart2_rx_IDLE_buf[1];
 8001852:	4b1f      	ldr	r3, [pc, #124]	@ (80018d0 <mseq_upload_master+0x148>)
 8001854:	881b      	ldrh	r3, [r3, #0]
 8001856:	4619      	mov	r1, r3
 8001858:	4b21      	ldr	r3, [pc, #132]	@ (80018e0 <mseq_upload_master+0x158>)
 800185a:	7858      	ldrb	r0, [r3, #1]
 800185c:	4a1d      	ldr	r2, [pc, #116]	@ (80018d4 <mseq_upload_master+0x14c>)
 800185e:	460b      	mov	r3, r1
 8001860:	005b      	lsls	r3, r3, #1
 8001862:	440b      	add	r3, r1
 8001864:	00db      	lsls	r3, r3, #3
 8001866:	4413      	add	r3, r2
 8001868:	3302      	adds	r3, #2
 800186a:	4602      	mov	r2, r0
 800186c:	701a      	strb	r2, [r3, #0]

    checksumflag = Decode_CKT_GetChecksum((uint8_t *) uart2_rx_IDLE_buf, (mseq[mseq_cnt].Master_octet_cnt - mseq[mseq_cnt + cks_offset].Device_octet_cnt));
 800186e:	4b18      	ldr	r3, [pc, #96]	@ (80018d0 <mseq_upload_master+0x148>)
 8001870:	881b      	ldrh	r3, [r3, #0]
 8001872:	4619      	mov	r1, r3
 8001874:	4a17      	ldr	r2, [pc, #92]	@ (80018d4 <mseq_upload_master+0x14c>)
 8001876:	460b      	mov	r3, r1
 8001878:	005b      	lsls	r3, r3, #1
 800187a:	440b      	add	r3, r1
 800187c:	00db      	lsls	r3, r3, #3
 800187e:	4413      	add	r3, r2
 8001880:	330c      	adds	r3, #12
 8001882:	7819      	ldrb	r1, [r3, #0]
 8001884:	4b12      	ldr	r3, [pc, #72]	@ (80018d0 <mseq_upload_master+0x148>)
 8001886:	881b      	ldrh	r3, [r3, #0]
 8001888:	461a      	mov	r2, r3
 800188a:	7bbb      	ldrb	r3, [r7, #14]
 800188c:	441a      	add	r2, r3
 800188e:	4811      	ldr	r0, [pc, #68]	@ (80018d4 <mseq_upload_master+0x14c>)
 8001890:	4613      	mov	r3, r2
 8001892:	005b      	lsls	r3, r3, #1
 8001894:	4413      	add	r3, r2
 8001896:	00db      	lsls	r3, r3, #3
 8001898:	4403      	add	r3, r0
 800189a:	330d      	adds	r3, #13
 800189c:	781b      	ldrb	r3, [r3, #0]
 800189e:	1acb      	subs	r3, r1, r3
 80018a0:	b2db      	uxtb	r3, r3
 80018a2:	4619      	mov	r1, r3
 80018a4:	480e      	ldr	r0, [pc, #56]	@ (80018e0 <mseq_upload_master+0x158>)
 80018a6:	f7ff ff2f 	bl	8001708 <Decode_CKT_GetChecksum>
 80018aa:	4603      	mov	r3, r0
 80018ac:	737b      	strb	r3, [r7, #13]
    mseq[mseq_cnt].Master_checksum = checksumflag;
 80018ae:	4b08      	ldr	r3, [pc, #32]	@ (80018d0 <mseq_upload_master+0x148>)
 80018b0:	881b      	ldrh	r3, [r3, #0]
 80018b2:	4619      	mov	r1, r3
 80018b4:	4a07      	ldr	r2, [pc, #28]	@ (80018d4 <mseq_upload_master+0x14c>)
 80018b6:	460b      	mov	r3, r1
 80018b8:	005b      	lsls	r3, r3, #1
 80018ba:	440b      	add	r3, r1
 80018bc:	00db      	lsls	r3, r3, #3
 80018be:	4413      	add	r3, r2
 80018c0:	330e      	adds	r3, #14
 80018c2:	7b7a      	ldrb	r2, [r7, #13]
 80018c4:	701a      	strb	r2, [r3, #0]
    // mseq[mseq_cnt].Master_checksum = Decode_CKT_GetChecksum((uint8_t *) uart2_rx_IDLE_buf, (rxdataSize - mseq[mseq_cnt + cks_offset].Device_octet_cnt));
}
 80018c6:	bf00      	nop
 80018c8:	3714      	adds	r7, #20
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd90      	pop	{r4, r7, pc}
 80018ce:	bf00      	nop
 80018d0:	20008a46 	.word	0x20008a46
 80018d4:	20008a48 	.word	0x20008a48
 80018d8:	2000e808 	.word	0x2000e808
 80018dc:	20001514 	.word	0x20001514
 80018e0:	20006334 	.word	0x20006334

080018e4 <mseq_upload_device>:

void mseq_upload_device (uint16_t size)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b085      	sub	sp, #20
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	4603      	mov	r3, r0
 80018ec:	80fb      	strh	r3, [r7, #6]
    uint16_t rxdataSize = 0;
 80018ee:	2300      	movs	r3, #0
 80018f0:	81fb      	strh	r3, [r7, #14]
    uint16_t cks_offset = 1;
 80018f2:	2301      	movs	r3, #1
 80018f4:	81bb      	strh	r3, [r7, #12]

    rxdataSize = size;
 80018f6:	88fb      	ldrh	r3, [r7, #6]
 80018f8:	81fb      	strh	r3, [r7, #14]
    mseq[mseq_cnt + cks_offset].Device_octet_cnt = rxdataSize;
 80018fa:	4b17      	ldr	r3, [pc, #92]	@ (8001958 <mseq_upload_device+0x74>)
 80018fc:	881b      	ldrh	r3, [r3, #0]
 80018fe:	461a      	mov	r2, r3
 8001900:	89bb      	ldrh	r3, [r7, #12]
 8001902:	441a      	add	r2, r3
 8001904:	89fb      	ldrh	r3, [r7, #14]
 8001906:	b2d8      	uxtb	r0, r3
 8001908:	4914      	ldr	r1, [pc, #80]	@ (800195c <mseq_upload_device+0x78>)
 800190a:	4613      	mov	r3, r2
 800190c:	005b      	lsls	r3, r3, #1
 800190e:	4413      	add	r3, r2
 8001910:	00db      	lsls	r3, r3, #3
 8001912:	440b      	add	r3, r1
 8001914:	330d      	adds	r3, #13
 8001916:	4602      	mov	r2, r0
 8001918:	701a      	strb	r2, [r3, #0]
    // mseq[mseq_cnt].CKS = uart3_rx_IDLE_buf[rxdataSize - 1];
    
    mseq[(mseq_cnt + cks_offset)].CKS = uart6_rx_IDLE_buf[rxdataSize - 1];
 800191a:	89fb      	ldrh	r3, [r7, #14]
 800191c:	3b01      	subs	r3, #1
 800191e:	4a0e      	ldr	r2, [pc, #56]	@ (8001958 <mseq_upload_device+0x74>)
 8001920:	8812      	ldrh	r2, [r2, #0]
 8001922:	4611      	mov	r1, r2
 8001924:	89ba      	ldrh	r2, [r7, #12]
 8001926:	440a      	add	r2, r1
 8001928:	490d      	ldr	r1, [pc, #52]	@ (8001960 <mseq_upload_device+0x7c>)
 800192a:	5cc8      	ldrb	r0, [r1, r3]
 800192c:	490b      	ldr	r1, [pc, #44]	@ (800195c <mseq_upload_device+0x78>)
 800192e:	4613      	mov	r3, r2
 8001930:	005b      	lsls	r3, r3, #1
 8001932:	4413      	add	r3, r2
 8001934:	00db      	lsls	r3, r3, #3
 8001936:	440b      	add	r3, r1
 8001938:	3303      	adds	r3, #3
 800193a:	4602      	mov	r2, r0
 800193c:	701a      	strb	r2, [r3, #0]
    // Decode_GetChecksum(uart6_rx_IDLE_buf[0], rxdataSize);

    mseq_cnt++;
 800193e:	4b06      	ldr	r3, [pc, #24]	@ (8001958 <mseq_upload_device+0x74>)
 8001940:	881b      	ldrh	r3, [r3, #0]
 8001942:	3301      	adds	r3, #1
 8001944:	b29a      	uxth	r2, r3
 8001946:	4b04      	ldr	r3, [pc, #16]	@ (8001958 <mseq_upload_device+0x74>)
 8001948:	801a      	strh	r2, [r3, #0]
}
 800194a:	bf00      	nop
 800194c:	3714      	adds	r7, #20
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr
 8001956:	bf00      	nop
 8001958:	20008a46 	.word	0x20008a46
 800195c:	20008a48 	.word	0x20008a48
 8001960:	200076bc 	.word	0x200076bc

08001964 <mseq_display>:

void mseq_display (void)
{
 8001964:	b5b0      	push	{r4, r5, r7, lr}
 8001966:	b084      	sub	sp, #16
 8001968:	af02      	add	r7, sp, #8
    uint16_t i = 0;
 800196a:	2300      	movs	r3, #0
 800196c:	80fb      	strh	r3, [r7, #6]

    for (i = 0; i < mseq_cnt; ++i)
 800196e:	2300      	movs	r3, #0
 8001970:	80fb      	strh	r3, [r7, #6]
 8001972:	e02a      	b.n	80019ca <mseq_display+0x66>
    {
        // printf("%d,%d,%d,%d\r\n", i, mseq[i].MC, mseq[i].CKT, mseq[i].CKS);
        printf("%d,%d,%d,%d,", i, mseq[i].MC, mseq[i].CKT, mseq[i].CKS);
 8001974:	88f9      	ldrh	r1, [r7, #6]
 8001976:	88fa      	ldrh	r2, [r7, #6]
 8001978:	4819      	ldr	r0, [pc, #100]	@ (80019e0 <mseq_display+0x7c>)
 800197a:	4613      	mov	r3, r2
 800197c:	005b      	lsls	r3, r3, #1
 800197e:	4413      	add	r3, r2
 8001980:	00db      	lsls	r3, r3, #3
 8001982:	4403      	add	r3, r0
 8001984:	3301      	adds	r3, #1
 8001986:	781b      	ldrb	r3, [r3, #0]
 8001988:	461c      	mov	r4, r3
 800198a:	88fa      	ldrh	r2, [r7, #6]
 800198c:	4814      	ldr	r0, [pc, #80]	@ (80019e0 <mseq_display+0x7c>)
 800198e:	4613      	mov	r3, r2
 8001990:	005b      	lsls	r3, r3, #1
 8001992:	4413      	add	r3, r2
 8001994:	00db      	lsls	r3, r3, #3
 8001996:	4403      	add	r3, r0
 8001998:	3302      	adds	r3, #2
 800199a:	781b      	ldrb	r3, [r3, #0]
 800199c:	461d      	mov	r5, r3
 800199e:	88fa      	ldrh	r2, [r7, #6]
 80019a0:	480f      	ldr	r0, [pc, #60]	@ (80019e0 <mseq_display+0x7c>)
 80019a2:	4613      	mov	r3, r2
 80019a4:	005b      	lsls	r3, r3, #1
 80019a6:	4413      	add	r3, r2
 80019a8:	00db      	lsls	r3, r3, #3
 80019aa:	4403      	add	r3, r0
 80019ac:	3303      	adds	r3, #3
 80019ae:	781b      	ldrb	r3, [r3, #0]
 80019b0:	9300      	str	r3, [sp, #0]
 80019b2:	462b      	mov	r3, r5
 80019b4:	4622      	mov	r2, r4
 80019b6:	480b      	ldr	r0, [pc, #44]	@ (80019e4 <mseq_display+0x80>)
 80019b8:	f009 fbf0 	bl	800b19c <iprintf>
        Mseq_Display_PacketFrame(i);
 80019bc:	88fb      	ldrh	r3, [r7, #6]
 80019be:	4618      	mov	r0, r3
 80019c0:	f000 f924 	bl	8001c0c <Mseq_Display_PacketFrame>
    for (i = 0; i < mseq_cnt; ++i)
 80019c4:	88fb      	ldrh	r3, [r7, #6]
 80019c6:	3301      	adds	r3, #1
 80019c8:	80fb      	strh	r3, [r7, #6]
 80019ca:	4b07      	ldr	r3, [pc, #28]	@ (80019e8 <mseq_display+0x84>)
 80019cc:	881b      	ldrh	r3, [r3, #0]
 80019ce:	88fa      	ldrh	r2, [r7, #6]
 80019d0:	429a      	cmp	r2, r3
 80019d2:	d3cf      	bcc.n	8001974 <mseq_display+0x10>
        // HAL_Delay(1);
    }
}
 80019d4:	bf00      	nop
 80019d6:	bf00      	nop
 80019d8:	3708      	adds	r7, #8
 80019da:	46bd      	mov	sp, r7
 80019dc:	bdb0      	pop	{r4, r5, r7, pc}
 80019de:	bf00      	nop
 80019e0:	20008a48 	.word	0x20008a48
 80019e4:	0800c004 	.word	0x0800c004
 80019e8:	20008a46 	.word	0x20008a46

080019ec <debug_buf_read>:


void debug_buf_read (void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	af00      	add	r7, sp, #0
  if (uart_rx_IDLE_TotalCnt >= MAX_RX_DATA)
 80019f0:	4b09      	ldr	r3, [pc, #36]	@ (8001a18 <debug_buf_read+0x2c>)
 80019f2:	881b      	ldrh	r3, [r3, #0]
 80019f4:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d90a      	bls.n	8001a12 <debug_buf_read+0x26>
  {
    uart_rx_IDLE_TotalCnt = 0;
 80019fc:	4b06      	ldr	r3, [pc, #24]	@ (8001a18 <debug_buf_read+0x2c>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	801a      	strh	r2, [r3, #0]

    mseq_display();
 8001a02:	f7ff ffaf 	bl	8001964 <mseq_display>
    // Mseq_Display_PacketFrame();

    HAL_UART_DMAStop(&huart2);
 8001a06:	4805      	ldr	r0, [pc, #20]	@ (8001a1c <debug_buf_read+0x30>)
 8001a08:	f004 f94e 	bl	8005ca8 <HAL_UART_DMAStop>
    HAL_UART_DMAStop(&huart6);
 8001a0c:	4804      	ldr	r0, [pc, #16]	@ (8001a20 <debug_buf_read+0x34>)
 8001a0e:	f004 f94b 	bl	8005ca8 <HAL_UART_DMAStop>
  }
}
 8001a12:	bf00      	nop
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	20008a44 	.word	0x20008a44
 8001a1c:	20000410 	.word	0x20000410
 8001a20:	20000458 	.word	0x20000458

08001a24 <Decode_MC_ReadWrite>:

static uint8_t Decode_MC_ReadWrite (uint8_t Data)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b084      	sub	sp, #16
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	71fb      	strb	r3, [r7, #7]
    uint8_t MCdata = 0;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	73fb      	strb	r3, [r7, #15]

    MCdata = Data;
 8001a32:	79fb      	ldrb	r3, [r7, #7]
 8001a34:	73fb      	strb	r3, [r7, #15]
    MCdata = (MCdata >> 7) & 0x01;
 8001a36:	7bfb      	ldrb	r3, [r7, #15]
 8001a38:	09db      	lsrs	r3, r3, #7
 8001a3a:	73fb      	strb	r3, [r7, #15]

    switch (MCdata)
 8001a3c:	7bfb      	ldrb	r3, [r7, #15]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d002      	beq.n	8001a48 <Decode_MC_ReadWrite+0x24>
 8001a42:	2b01      	cmp	r3, #1
 8001a44:	d002      	beq.n	8001a4c <Decode_MC_ReadWrite+0x28>
 8001a46:	e003      	b.n	8001a50 <Decode_MC_ReadWrite+0x2c>
    {
        case 0 :
            return 'W';
 8001a48:	2357      	movs	r3, #87	@ 0x57
 8001a4a:	e005      	b.n	8001a58 <Decode_MC_ReadWrite+0x34>
        case 1 :
            return 'R';
 8001a4c:	2352      	movs	r3, #82	@ 0x52
 8001a4e:	e003      	b.n	8001a58 <Decode_MC_ReadWrite+0x34>
        default :
            printf("Unexpected value\n");
 8001a50:	4803      	ldr	r0, [pc, #12]	@ (8001a60 <Decode_MC_ReadWrite+0x3c>)
 8001a52:	f009 fc0b 	bl	800b26c <puts>
            return 'X';
 8001a56:	2358      	movs	r3, #88	@ 0x58
    }
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	3710      	adds	r7, #16
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	0800c014 	.word	0x0800c014

08001a64 <Print_MC_CommunicationChannel>:

//     return MCdata & 0x03;
// }

static uint8_t Print_MC_CommunicationChannel (uint8_t Data)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b084      	sub	sp, #16
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	71fb      	strb	r3, [r7, #7]
    uint8_t MCdata = 0;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	73fb      	strb	r3, [r7, #15]

    MCdata = Data;
 8001a72:	79fb      	ldrb	r3, [r7, #7]
 8001a74:	73fb      	strb	r3, [r7, #15]
    MCdata = (MCdata >> 5) & 0x03;
 8001a76:	7bfb      	ldrb	r3, [r7, #15]
 8001a78:	095b      	lsrs	r3, r3, #5
 8001a7a:	b2db      	uxtb	r3, r3
 8001a7c:	f003 0303 	and.w	r3, r3, #3
 8001a80:	73fb      	strb	r3, [r7, #15]
    
    switch (MCdata)
 8001a82:	7bfb      	ldrb	r3, [r7, #15]
 8001a84:	2b03      	cmp	r3, #3
 8001a86:	d827      	bhi.n	8001ad8 <Print_MC_CommunicationChannel+0x74>
 8001a88:	a201      	add	r2, pc, #4	@ (adr r2, 8001a90 <Print_MC_CommunicationChannel+0x2c>)
 8001a8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a8e:	bf00      	nop
 8001a90:	08001aa1 	.word	0x08001aa1
 8001a94:	08001aaf 	.word	0x08001aaf
 8001a98:	08001abd 	.word	0x08001abd
 8001a9c:	08001acb 	.word	0x08001acb
    {
        case 0 :
            printf("%s,", CommunicationChannel.MC_Com_Ch_0);
 8001aa0:	4b10      	ldr	r3, [pc, #64]	@ (8001ae4 <Print_MC_CommunicationChannel+0x80>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	4810      	ldr	r0, [pc, #64]	@ (8001ae8 <Print_MC_CommunicationChannel+0x84>)
 8001aa8:	f009 fb78 	bl	800b19c <iprintf>
            break;
 8001aac:	e014      	b.n	8001ad8 <Print_MC_CommunicationChannel+0x74>
        case 1 :
            printf("%s,", CommunicationChannel.MC_Com_Ch_1);
 8001aae:	4b0d      	ldr	r3, [pc, #52]	@ (8001ae4 <Print_MC_CommunicationChannel+0x80>)
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	480c      	ldr	r0, [pc, #48]	@ (8001ae8 <Print_MC_CommunicationChannel+0x84>)
 8001ab6:	f009 fb71 	bl	800b19c <iprintf>
            break;
 8001aba:	e00d      	b.n	8001ad8 <Print_MC_CommunicationChannel+0x74>
        case 2 :
            printf("%s,", CommunicationChannel.MC_Com_Ch_2);
 8001abc:	4b09      	ldr	r3, [pc, #36]	@ (8001ae4 <Print_MC_CommunicationChannel+0x80>)
 8001abe:	689b      	ldr	r3, [r3, #8]
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	4809      	ldr	r0, [pc, #36]	@ (8001ae8 <Print_MC_CommunicationChannel+0x84>)
 8001ac4:	f009 fb6a 	bl	800b19c <iprintf>
            break;
 8001ac8:	e006      	b.n	8001ad8 <Print_MC_CommunicationChannel+0x74>
        case 3 :
            printf("%s,", CommunicationChannel.MC_Com_Ch_3);
 8001aca:	4b06      	ldr	r3, [pc, #24]	@ (8001ae4 <Print_MC_CommunicationChannel+0x80>)
 8001acc:	68db      	ldr	r3, [r3, #12]
 8001ace:	4619      	mov	r1, r3
 8001ad0:	4805      	ldr	r0, [pc, #20]	@ (8001ae8 <Print_MC_CommunicationChannel+0x84>)
 8001ad2:	f009 fb63 	bl	800b19c <iprintf>
            break;
 8001ad6:	bf00      	nop
    }
}
 8001ad8:	bf00      	nop
 8001ada:	4618      	mov	r0, r3
 8001adc:	3710      	adds	r7, #16
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	20000004 	.word	0x20000004
 8001ae8:	0800c028 	.word	0x0800c028

08001aec <Decode_MC_Address>:

static uint8_t Decode_MC_Address (uint8_t Data)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b085      	sub	sp, #20
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	4603      	mov	r3, r0
 8001af4:	71fb      	strb	r3, [r7, #7]
    uint8_t MCdata = 0;
 8001af6:	2300      	movs	r3, #0
 8001af8:	73fb      	strb	r3, [r7, #15]

    MCdata = Data;
 8001afa:	79fb      	ldrb	r3, [r7, #7]
 8001afc:	73fb      	strb	r3, [r7, #15]
    
    return MCdata & 0x1F;
 8001afe:	7bfb      	ldrb	r3, [r7, #15]
 8001b00:	f003 031f 	and.w	r3, r3, #31
 8001b04:	b2db      	uxtb	r3, r3
}
 8001b06:	4618      	mov	r0, r3
 8001b08:	3714      	adds	r7, #20
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b10:	4770      	bx	lr

08001b12 <Decode_CKT_Type>:

static uint8_t Decode_CKT_Type (uint8_t Data)
{
 8001b12:	b480      	push	{r7}
 8001b14:	b085      	sub	sp, #20
 8001b16:	af00      	add	r7, sp, #0
 8001b18:	4603      	mov	r3, r0
 8001b1a:	71fb      	strb	r3, [r7, #7]
    uint8_t MCdata = 0;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	73fb      	strb	r3, [r7, #15]
    
    MCdata = Data;
 8001b20:	79fb      	ldrb	r3, [r7, #7]
 8001b22:	73fb      	strb	r3, [r7, #15]

    return (MCdata >> 6) & 0x03;
 8001b24:	7bfb      	ldrb	r3, [r7, #15]
 8001b26:	099b      	lsrs	r3, r3, #6
 8001b28:	b2db      	uxtb	r3, r3
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	3714      	adds	r7, #20
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr

08001b36 <Decode_CKT_Checksum>:

static uint8_t Decode_CKT_Checksum (uint8_t Data)
{
 8001b36:	b480      	push	{r7}
 8001b38:	b085      	sub	sp, #20
 8001b3a:	af00      	add	r7, sp, #0
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	71fb      	strb	r3, [r7, #7]
    uint8_t MCdata = 0;
 8001b40:	2300      	movs	r3, #0
 8001b42:	73fb      	strb	r3, [r7, #15]

    MCdata = Data;
 8001b44:	79fb      	ldrb	r3, [r7, #7]
 8001b46:	73fb      	strb	r3, [r7, #15]

    return MCdata & 0x3F;
 8001b48:	7bfb      	ldrb	r3, [r7, #15]
 8001b4a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001b4e:	b2db      	uxtb	r3, r3
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	3714      	adds	r7, #20
 8001b54:	46bd      	mov	sp, r7
 8001b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5a:	4770      	bx	lr

08001b5c <Decode_CKS_EventFlag>:

static uint8_t Decode_CKS_EventFlag (uint8_t Data)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b084      	sub	sp, #16
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	4603      	mov	r3, r0
 8001b64:	71fb      	strb	r3, [r7, #7]
    uint8_t MCdata = 0;
 8001b66:	2300      	movs	r3, #0
 8001b68:	73fb      	strb	r3, [r7, #15]

    MCdata = Data;
 8001b6a:	79fb      	ldrb	r3, [r7, #7]
 8001b6c:	73fb      	strb	r3, [r7, #15]

    #if 0
    return (MCdata >> 7) & 0x01;
    #else
    MCdata = (MCdata >> 7) & 0x01;
 8001b6e:	7bfb      	ldrb	r3, [r7, #15]
 8001b70:	09db      	lsrs	r3, r3, #7
 8001b72:	73fb      	strb	r3, [r7, #15]

    switch (MCdata)
 8001b74:	7bfb      	ldrb	r3, [r7, #15]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d002      	beq.n	8001b80 <Decode_CKS_EventFlag+0x24>
 8001b7a:	2b01      	cmp	r3, #1
 8001b7c:	d002      	beq.n	8001b84 <Decode_CKS_EventFlag+0x28>
 8001b7e:	e003      	b.n	8001b88 <Decode_CKS_EventFlag+0x2c>
    {
        case 0 :
            return 'N';
 8001b80:	234e      	movs	r3, #78	@ 0x4e
 8001b82:	e005      	b.n	8001b90 <Decode_CKS_EventFlag+0x34>
        case 1 :
            return 'E';
 8001b84:	2345      	movs	r3, #69	@ 0x45
 8001b86:	e003      	b.n	8001b90 <Decode_CKS_EventFlag+0x34>
        default :
            printf("Unexpected value\n");
 8001b88:	4803      	ldr	r0, [pc, #12]	@ (8001b98 <Decode_CKS_EventFlag+0x3c>)
 8001b8a:	f009 fb6f 	bl	800b26c <puts>
            return 'X';
 8001b8e:	2358      	movs	r3, #88	@ 0x58
    }
    #endif
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	3710      	adds	r7, #16
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}
 8001b98:	0800c014 	.word	0x0800c014

08001b9c <Decode_CKS_PDStatus>:

static uint8_t Decode_CKS_PDStatus (uint8_t Data)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b084      	sub	sp, #16
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	71fb      	strb	r3, [r7, #7]
    uint8_t MCdata = 0;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	73fb      	strb	r3, [r7, #15]

    MCdata = Data;
 8001baa:	79fb      	ldrb	r3, [r7, #7]
 8001bac:	73fb      	strb	r3, [r7, #15]

    #if 0
    return (MCdata >> 6) & 0x01;
    #else
    MCdata = (MCdata >> 6) & 0x01;
 8001bae:	7bfb      	ldrb	r3, [r7, #15]
 8001bb0:	099b      	lsrs	r3, r3, #6
 8001bb2:	b2db      	uxtb	r3, r3
 8001bb4:	f003 0301 	and.w	r3, r3, #1
 8001bb8:	73fb      	strb	r3, [r7, #15]

    switch (MCdata)
 8001bba:	7bfb      	ldrb	r3, [r7, #15]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d002      	beq.n	8001bc6 <Decode_CKS_PDStatus+0x2a>
 8001bc0:	2b01      	cmp	r3, #1
 8001bc2:	d002      	beq.n	8001bca <Decode_CKS_PDStatus+0x2e>
 8001bc4:	e003      	b.n	8001bce <Decode_CKS_PDStatus+0x32>
    {
        case 0 :
            return 'V';
 8001bc6:	2356      	movs	r3, #86	@ 0x56
 8001bc8:	e005      	b.n	8001bd6 <Decode_CKS_PDStatus+0x3a>
        case 1 :
            return 'N';
 8001bca:	234e      	movs	r3, #78	@ 0x4e
 8001bcc:	e003      	b.n	8001bd6 <Decode_CKS_PDStatus+0x3a>
        default :
            printf("Unexpected value\n");
 8001bce:	4804      	ldr	r0, [pc, #16]	@ (8001be0 <Decode_CKS_PDStatus+0x44>)
 8001bd0:	f009 fb4c 	bl	800b26c <puts>
            return 'X';
 8001bd4:	2358      	movs	r3, #88	@ 0x58
    }
    #endif
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	3710      	adds	r7, #16
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	0800c014 	.word	0x0800c014

08001be4 <Decode_CKS_Checksum>:

static uint8_t Decode_CKS_Checksum (uint8_t Data)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b085      	sub	sp, #20
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	4603      	mov	r3, r0
 8001bec:	71fb      	strb	r3, [r7, #7]
    uint8_t MCdata = 0;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	73fb      	strb	r3, [r7, #15]

    MCdata = Data;
 8001bf2:	79fb      	ldrb	r3, [r7, #7]
 8001bf4:	73fb      	strb	r3, [r7, #15]

    return MCdata & 0x3F;
 8001bf6:	7bfb      	ldrb	r3, [r7, #15]
 8001bf8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001bfc:	b2db      	uxtb	r3, r3
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	3714      	adds	r7, #20
 8001c02:	46bd      	mov	sp, r7
 8001c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c08:	4770      	bx	lr
	...

08001c0c <Mseq_Display_PacketFrame>:
}



void Mseq_Display_PacketFrame (uint16_t cnt)
{
 8001c0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001c10:	b089      	sub	sp, #36	@ 0x24
 8001c12:	af04      	add	r7, sp, #16
 8001c14:	4603      	mov	r3, r0
 8001c16:	80fb      	strh	r3, [r7, #6]
    uint16_t i, j = 0;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	81bb      	strh	r3, [r7, #12]
    i = cnt;
 8001c1c:	88fb      	ldrh	r3, [r7, #6]
 8001c1e:	81fb      	strh	r3, [r7, #14]

    printf("%c,",Decode_MC_ReadWrite(mseq[cnt].MC));
 8001c20:	88fa      	ldrh	r2, [r7, #6]
 8001c22:	4973      	ldr	r1, [pc, #460]	@ (8001df0 <Mseq_Display_PacketFrame+0x1e4>)
 8001c24:	4613      	mov	r3, r2
 8001c26:	005b      	lsls	r3, r3, #1
 8001c28:	4413      	add	r3, r2
 8001c2a:	00db      	lsls	r3, r3, #3
 8001c2c:	440b      	add	r3, r1
 8001c2e:	3301      	adds	r3, #1
 8001c30:	781b      	ldrb	r3, [r3, #0]
 8001c32:	4618      	mov	r0, r3
 8001c34:	f7ff fef6 	bl	8001a24 <Decode_MC_ReadWrite>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	4619      	mov	r1, r3
 8001c3c:	486d      	ldr	r0, [pc, #436]	@ (8001df4 <Mseq_Display_PacketFrame+0x1e8>)
 8001c3e:	f009 faad 	bl	800b19c <iprintf>
    Print_MC_CommunicationChannel(mseq[cnt].MC);
 8001c42:	88fa      	ldrh	r2, [r7, #6]
 8001c44:	496a      	ldr	r1, [pc, #424]	@ (8001df0 <Mseq_Display_PacketFrame+0x1e4>)
 8001c46:	4613      	mov	r3, r2
 8001c48:	005b      	lsls	r3, r3, #1
 8001c4a:	4413      	add	r3, r2
 8001c4c:	00db      	lsls	r3, r3, #3
 8001c4e:	440b      	add	r3, r1
 8001c50:	3301      	adds	r3, #1
 8001c52:	781b      	ldrb	r3, [r3, #0]
 8001c54:	4618      	mov	r0, r3
 8001c56:	f7ff ff05 	bl	8001a64 <Print_MC_CommunicationChannel>
    printf("%02X,%d,%02X,%c,%c,%02X,", 
                                        Decode_MC_Address(mseq[cnt].MC),
 8001c5a:	88fa      	ldrh	r2, [r7, #6]
 8001c5c:	4964      	ldr	r1, [pc, #400]	@ (8001df0 <Mseq_Display_PacketFrame+0x1e4>)
 8001c5e:	4613      	mov	r3, r2
 8001c60:	005b      	lsls	r3, r3, #1
 8001c62:	4413      	add	r3, r2
 8001c64:	00db      	lsls	r3, r3, #3
 8001c66:	440b      	add	r3, r1
 8001c68:	3301      	adds	r3, #1
 8001c6a:	781b      	ldrb	r3, [r3, #0]
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f7ff ff3d 	bl	8001aec <Decode_MC_Address>
 8001c72:	4603      	mov	r3, r0
    printf("%02X,%d,%02X,%c,%c,%02X,", 
 8001c74:	461e      	mov	r6, r3
                                        Decode_CKT_Type(mseq[cnt].CKT),
 8001c76:	88fa      	ldrh	r2, [r7, #6]
 8001c78:	495d      	ldr	r1, [pc, #372]	@ (8001df0 <Mseq_Display_PacketFrame+0x1e4>)
 8001c7a:	4613      	mov	r3, r2
 8001c7c:	005b      	lsls	r3, r3, #1
 8001c7e:	4413      	add	r3, r2
 8001c80:	00db      	lsls	r3, r3, #3
 8001c82:	440b      	add	r3, r1
 8001c84:	3302      	adds	r3, #2
 8001c86:	781b      	ldrb	r3, [r3, #0]
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f7ff ff42 	bl	8001b12 <Decode_CKT_Type>
 8001c8e:	4603      	mov	r3, r0
    printf("%02X,%d,%02X,%c,%c,%02X,", 
 8001c90:	4698      	mov	r8, r3
                                        Decode_CKT_Checksum(mseq[cnt].CKT),
 8001c92:	88fa      	ldrh	r2, [r7, #6]
 8001c94:	4956      	ldr	r1, [pc, #344]	@ (8001df0 <Mseq_Display_PacketFrame+0x1e4>)
 8001c96:	4613      	mov	r3, r2
 8001c98:	005b      	lsls	r3, r3, #1
 8001c9a:	4413      	add	r3, r2
 8001c9c:	00db      	lsls	r3, r3, #3
 8001c9e:	440b      	add	r3, r1
 8001ca0:	3302      	adds	r3, #2
 8001ca2:	781b      	ldrb	r3, [r3, #0]
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f7ff ff46 	bl	8001b36 <Decode_CKT_Checksum>
 8001caa:	4603      	mov	r3, r0
    printf("%02X,%d,%02X,%c,%c,%02X,", 
 8001cac:	4699      	mov	r9, r3
                                        Decode_CKS_EventFlag(mseq[cnt].CKS),
 8001cae:	88fa      	ldrh	r2, [r7, #6]
 8001cb0:	494f      	ldr	r1, [pc, #316]	@ (8001df0 <Mseq_Display_PacketFrame+0x1e4>)
 8001cb2:	4613      	mov	r3, r2
 8001cb4:	005b      	lsls	r3, r3, #1
 8001cb6:	4413      	add	r3, r2
 8001cb8:	00db      	lsls	r3, r3, #3
 8001cba:	440b      	add	r3, r1
 8001cbc:	3303      	adds	r3, #3
 8001cbe:	781b      	ldrb	r3, [r3, #0]
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f7ff ff4b 	bl	8001b5c <Decode_CKS_EventFlag>
 8001cc6:	4603      	mov	r3, r0
    printf("%02X,%d,%02X,%c,%c,%02X,", 
 8001cc8:	461c      	mov	r4, r3
                                        Decode_CKS_PDStatus(mseq[cnt].CKS),
 8001cca:	88fa      	ldrh	r2, [r7, #6]
 8001ccc:	4948      	ldr	r1, [pc, #288]	@ (8001df0 <Mseq_Display_PacketFrame+0x1e4>)
 8001cce:	4613      	mov	r3, r2
 8001cd0:	005b      	lsls	r3, r3, #1
 8001cd2:	4413      	add	r3, r2
 8001cd4:	00db      	lsls	r3, r3, #3
 8001cd6:	440b      	add	r3, r1
 8001cd8:	3303      	adds	r3, #3
 8001cda:	781b      	ldrb	r3, [r3, #0]
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f7ff ff5d 	bl	8001b9c <Decode_CKS_PDStatus>
 8001ce2:	4603      	mov	r3, r0
    printf("%02X,%d,%02X,%c,%c,%02X,", 
 8001ce4:	461d      	mov	r5, r3
                                        Decode_CKS_Checksum(mseq[cnt].CKS)
 8001ce6:	88fa      	ldrh	r2, [r7, #6]
 8001ce8:	4941      	ldr	r1, [pc, #260]	@ (8001df0 <Mseq_Display_PacketFrame+0x1e4>)
 8001cea:	4613      	mov	r3, r2
 8001cec:	005b      	lsls	r3, r3, #1
 8001cee:	4413      	add	r3, r2
 8001cf0:	00db      	lsls	r3, r3, #3
 8001cf2:	440b      	add	r3, r1
 8001cf4:	3303      	adds	r3, #3
 8001cf6:	781b      	ldrb	r3, [r3, #0]
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f7ff ff73 	bl	8001be4 <Decode_CKS_Checksum>
 8001cfe:	4603      	mov	r3, r0
    printf("%02X,%d,%02X,%c,%c,%02X,", 
 8001d00:	9302      	str	r3, [sp, #8]
 8001d02:	9501      	str	r5, [sp, #4]
 8001d04:	9400      	str	r4, [sp, #0]
 8001d06:	464b      	mov	r3, r9
 8001d08:	4642      	mov	r2, r8
 8001d0a:	4631      	mov	r1, r6
 8001d0c:	483a      	ldr	r0, [pc, #232]	@ (8001df8 <Mseq_Display_PacketFrame+0x1ec>)
 8001d0e:	f009 fa45 	bl	800b19c <iprintf>
                                        mseq[i].Start_Octet,
                                        mseq[i].End_Octet
                                        );
    #else
    printf("%d,%d,%02X,%02X,%02X,%02X,", 
                                        mseq[cnt].Master_octet_cnt,
 8001d12:	88fa      	ldrh	r2, [r7, #6]
 8001d14:	4936      	ldr	r1, [pc, #216]	@ (8001df0 <Mseq_Display_PacketFrame+0x1e4>)
 8001d16:	4613      	mov	r3, r2
 8001d18:	005b      	lsls	r3, r3, #1
 8001d1a:	4413      	add	r3, r2
 8001d1c:	00db      	lsls	r3, r3, #3
 8001d1e:	440b      	add	r3, r1
 8001d20:	330c      	adds	r3, #12
 8001d22:	781b      	ldrb	r3, [r3, #0]
    printf("%d,%d,%02X,%02X,%02X,%02X,", 
 8001d24:	461d      	mov	r5, r3
                                        mseq[cnt].Device_octet_cnt,
 8001d26:	88fa      	ldrh	r2, [r7, #6]
 8001d28:	4931      	ldr	r1, [pc, #196]	@ (8001df0 <Mseq_Display_PacketFrame+0x1e4>)
 8001d2a:	4613      	mov	r3, r2
 8001d2c:	005b      	lsls	r3, r3, #1
 8001d2e:	4413      	add	r3, r2
 8001d30:	00db      	lsls	r3, r3, #3
 8001d32:	440b      	add	r3, r1
 8001d34:	330d      	adds	r3, #13
 8001d36:	781b      	ldrb	r3, [r3, #0]
    printf("%d,%d,%02X,%02X,%02X,%02X,", 
 8001d38:	461e      	mov	r6, r3
                                        mseq[cnt].Master_checksum,
 8001d3a:	88fa      	ldrh	r2, [r7, #6]
 8001d3c:	492c      	ldr	r1, [pc, #176]	@ (8001df0 <Mseq_Display_PacketFrame+0x1e4>)
 8001d3e:	4613      	mov	r3, r2
 8001d40:	005b      	lsls	r3, r3, #1
 8001d42:	4413      	add	r3, r2
 8001d44:	00db      	lsls	r3, r3, #3
 8001d46:	440b      	add	r3, r1
 8001d48:	330e      	adds	r3, #14
 8001d4a:	781b      	ldrb	r3, [r3, #0]
    printf("%d,%d,%02X,%02X,%02X,%02X,", 
 8001d4c:	469c      	mov	ip, r3
                                        mseq[cnt].Device_checksum,
 8001d4e:	88fa      	ldrh	r2, [r7, #6]
 8001d50:	4927      	ldr	r1, [pc, #156]	@ (8001df0 <Mseq_Display_PacketFrame+0x1e4>)
 8001d52:	4613      	mov	r3, r2
 8001d54:	005b      	lsls	r3, r3, #1
 8001d56:	4413      	add	r3, r2
 8001d58:	00db      	lsls	r3, r3, #3
 8001d5a:	440b      	add	r3, r1
 8001d5c:	330f      	adds	r3, #15
 8001d5e:	781b      	ldrb	r3, [r3, #0]
    printf("%d,%d,%02X,%02X,%02X,%02X,", 
 8001d60:	461c      	mov	r4, r3
 8001d62:	88fa      	ldrh	r2, [r7, #6]
 8001d64:	4922      	ldr	r1, [pc, #136]	@ (8001df0 <Mseq_Display_PacketFrame+0x1e4>)
 8001d66:	4613      	mov	r3, r2
 8001d68:	005b      	lsls	r3, r3, #1
 8001d6a:	4413      	add	r3, r2
 8001d6c:	00db      	lsls	r3, r3, #3
 8001d6e:	440b      	add	r3, r1
 8001d70:	3310      	adds	r3, #16
 8001d72:	6819      	ldr	r1, [r3, #0]
 8001d74:	88fa      	ldrh	r2, [r7, #6]
 8001d76:	481e      	ldr	r0, [pc, #120]	@ (8001df0 <Mseq_Display_PacketFrame+0x1e4>)
 8001d78:	4613      	mov	r3, r2
 8001d7a:	005b      	lsls	r3, r3, #1
 8001d7c:	4413      	add	r3, r2
 8001d7e:	00db      	lsls	r3, r3, #3
 8001d80:	4403      	add	r3, r0
 8001d82:	3314      	adds	r3, #20
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	9302      	str	r3, [sp, #8]
 8001d88:	9101      	str	r1, [sp, #4]
 8001d8a:	9400      	str	r4, [sp, #0]
 8001d8c:	4663      	mov	r3, ip
 8001d8e:	4632      	mov	r2, r6
 8001d90:	4629      	mov	r1, r5
 8001d92:	481a      	ldr	r0, [pc, #104]	@ (8001dfc <Mseq_Display_PacketFrame+0x1f0>)
 8001d94:	f009 fa02 	bl	800b19c <iprintf>
                                        mseq[cnt].Start_Octet,
                                        mseq[cnt].End_Octet
                                        );
    
    // for (i = 0; i < (mseq[cnt].Master_octet_cnt - mseq[cnt].Device_octet_cnt); i++)
    for (i = 0; i < mseq[cnt].Master_octet_cnt; i++)
 8001d98:	2300      	movs	r3, #0
 8001d9a:	81fb      	strh	r3, [r7, #14]
 8001d9c:	e012      	b.n	8001dc4 <Mseq_Display_PacketFrame+0x1b8>
    {
        printf("%02X,", *(mseq[cnt].Start_Octet + i));
 8001d9e:	88fa      	ldrh	r2, [r7, #6]
 8001da0:	4913      	ldr	r1, [pc, #76]	@ (8001df0 <Mseq_Display_PacketFrame+0x1e4>)
 8001da2:	4613      	mov	r3, r2
 8001da4:	005b      	lsls	r3, r3, #1
 8001da6:	4413      	add	r3, r2
 8001da8:	00db      	lsls	r3, r3, #3
 8001daa:	440b      	add	r3, r1
 8001dac:	3310      	adds	r3, #16
 8001dae:	681a      	ldr	r2, [r3, #0]
 8001db0:	89fb      	ldrh	r3, [r7, #14]
 8001db2:	4413      	add	r3, r2
 8001db4:	781b      	ldrb	r3, [r3, #0]
 8001db6:	4619      	mov	r1, r3
 8001db8:	4811      	ldr	r0, [pc, #68]	@ (8001e00 <Mseq_Display_PacketFrame+0x1f4>)
 8001dba:	f009 f9ef 	bl	800b19c <iprintf>
    for (i = 0; i < mseq[cnt].Master_octet_cnt; i++)
 8001dbe:	89fb      	ldrh	r3, [r7, #14]
 8001dc0:	3301      	adds	r3, #1
 8001dc2:	81fb      	strh	r3, [r7, #14]
 8001dc4:	88fa      	ldrh	r2, [r7, #6]
 8001dc6:	490a      	ldr	r1, [pc, #40]	@ (8001df0 <Mseq_Display_PacketFrame+0x1e4>)
 8001dc8:	4613      	mov	r3, r2
 8001dca:	005b      	lsls	r3, r3, #1
 8001dcc:	4413      	add	r3, r2
 8001dce:	00db      	lsls	r3, r3, #3
 8001dd0:	440b      	add	r3, r1
 8001dd2:	330c      	adds	r3, #12
 8001dd4:	781b      	ldrb	r3, [r3, #0]
 8001dd6:	461a      	mov	r2, r3
 8001dd8:	89fb      	ldrh	r3, [r7, #14]
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d3df      	bcc.n	8001d9e <Mseq_Display_PacketFrame+0x192>
    }
    printf("\r\n");   
 8001dde:	4809      	ldr	r0, [pc, #36]	@ (8001e04 <Mseq_Display_PacketFrame+0x1f8>)
 8001de0:	f009 fa44 	bl	800b26c <puts>
    #endif

}
 8001de4:	bf00      	nop
 8001de6:	3714      	adds	r7, #20
 8001de8:	46bd      	mov	sp, r7
 8001dea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001dee:	bf00      	nop
 8001df0:	20008a48 	.word	0x20008a48
 8001df4:	0800c02c 	.word	0x0800c02c
 8001df8:	0800c030 	.word	0x0800c030
 8001dfc:	0800c04c 	.word	0x0800c04c
 8001e00:	0800c068 	.word	0x0800c068
 8001e04:	0800c070 	.word	0x0800c070

08001e08 <UserButton_BufferClear>:


static uint8_t UserButton_BufferClear (void)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b082      	sub	sp, #8
 8001e0c:	af00      	add	r7, sp, #0
    uint8_t buttonstatus = 0;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	71fb      	strb	r3, [r7, #7]

    if (TIM1_CNT_2 >= 100)
 8001e12:	4b13      	ldr	r3, [pc, #76]	@ (8001e60 <UserButton_BufferClear+0x58>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	2b63      	cmp	r3, #99	@ 0x63
 8001e18:	d918      	bls.n	8001e4c <UserButton_BufferClear+0x44>
    {
        TIM1_CNT_2 = 0;
 8001e1a:	4b11      	ldr	r3, [pc, #68]	@ (8001e60 <UserButton_BufferClear+0x58>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	601a      	str	r2, [r3, #0]

        if (UserButton_Flag == 1)
 8001e20:	4b10      	ldr	r3, [pc, #64]	@ (8001e64 <UserButton_BufferClear+0x5c>)
 8001e22:	781b      	ldrb	r3, [r3, #0]
 8001e24:	2b01      	cmp	r3, #1
 8001e26:	d111      	bne.n	8001e4c <UserButton_BufferClear+0x44>
        {
            buttonstatus = UserButton_Flag;
 8001e28:	4b0e      	ldr	r3, [pc, #56]	@ (8001e64 <UserButton_BufferClear+0x5c>)
 8001e2a:	781b      	ldrb	r3, [r3, #0]
 8001e2c:	71fb      	strb	r3, [r7, #7]

            UserButton_Flag = 0;
 8001e2e:	4b0d      	ldr	r3, [pc, #52]	@ (8001e64 <UserButton_BufferClear+0x5c>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	701a      	strb	r2, [r3, #0]

            memset(uart2_rx_IDLE_buf, 0, UART_RX_IDLE_BUFSIZE);
 8001e34:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e38:	2100      	movs	r1, #0
 8001e3a:	480b      	ldr	r0, [pc, #44]	@ (8001e68 <UserButton_BufferClear+0x60>)
 8001e3c:	f009 faf6 	bl	800b42c <memset>
            memset(uart6_rx_IDLE_buf, 0, UART_RX_IDLE_BUFSIZE);
 8001e40:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e44:	2100      	movs	r1, #0
 8001e46:	4809      	ldr	r0, [pc, #36]	@ (8001e6c <UserButton_BufferClear+0x64>)
 8001e48:	f009 faf0 	bl	800b42c <memset>
            // memset(mseq, 0, 1000);
        }
    }
    return !buttonstatus;
 8001e4c:	79fb      	ldrb	r3, [r7, #7]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	bf0c      	ite	eq
 8001e52:	2301      	moveq	r3, #1
 8001e54:	2300      	movne	r3, #0
 8001e56:	b2db      	uxtb	r3, r3
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	3708      	adds	r7, #8
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}
 8001e60:	20001508 	.word	0x20001508
 8001e64:	20001510 	.word	0x20001510
 8001e68:	20006334 	.word	0x20006334
 8001e6c:	200076bc 	.word	0x200076bc

08001e70 <UART_RX_BufferClear>:

void UART_RX_BufferClear (void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	af00      	add	r7, sp, #0
    if(UserButton_BufferClear() == HAL_OK)
 8001e74:	f7ff ffc8 	bl	8001e08 <UserButton_BufferClear>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d14e      	bne.n	8001f1c <UART_RX_BufferClear+0xac>
    {
        printf("\r\nUART RX Buffer Clear.\r\n\n");
 8001e7e:	4828      	ldr	r0, [pc, #160]	@ (8001f20 <UART_RX_BufferClear+0xb0>)
 8001e80:	f009 f9f4 	bl	800b26c <puts>
        
        uart_rx_IDLE_TotalCnt = 0;
 8001e84:	4b27      	ldr	r3, [pc, #156]	@ (8001f24 <UART_RX_BufferClear+0xb4>)
 8001e86:	2200      	movs	r2, #0
 8001e88:	801a      	strh	r2, [r3, #0]
        mseq_cnt = 0;
 8001e8a:	4b27      	ldr	r3, [pc, #156]	@ (8001f28 <UART_RX_BufferClear+0xb8>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	801a      	strh	r2, [r3, #0]
        
        __HAL_DMA_DISABLE(&hdma_usart2_rx);
 8001e90:	4b26      	ldr	r3, [pc, #152]	@ (8001f2c <UART_RX_BufferClear+0xbc>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	681a      	ldr	r2, [r3, #0]
 8001e96:	4b25      	ldr	r3, [pc, #148]	@ (8001f2c <UART_RX_BufferClear+0xbc>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f022 0201 	bic.w	r2, r2, #1
 8001e9e:	601a      	str	r2, [r3, #0]
        hdma_usart2_rx.Instance->NDTR = UART_RX_IDLE_BUFSIZE;
 8001ea0:	4b22      	ldr	r3, [pc, #136]	@ (8001f2c <UART_RX_BufferClear+0xbc>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ea8:	605a      	str	r2, [r3, #4]
        __HAL_DMA_ENABLE(&hdma_usart2_rx);
 8001eaa:	4b20      	ldr	r3, [pc, #128]	@ (8001f2c <UART_RX_BufferClear+0xbc>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	681a      	ldr	r2, [r3, #0]
 8001eb0:	4b1e      	ldr	r3, [pc, #120]	@ (8001f2c <UART_RX_BufferClear+0xbc>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f042 0201 	orr.w	r2, r2, #1
 8001eb8:	601a      	str	r2, [r3, #0]

        HAL_UARTEx_ReceiveToIdle_DMA(&huart2, (uint8_t *) uart2_rx_IDLE_buf, UART_RX_IDLE_BUFSIZE);
 8001eba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ebe:	491c      	ldr	r1, [pc, #112]	@ (8001f30 <UART_RX_BufferClear+0xc0>)
 8001ec0:	481c      	ldr	r0, [pc, #112]	@ (8001f34 <UART_RX_BufferClear+0xc4>)
 8001ec2:	f003 ff70 	bl	8005da6 <HAL_UARTEx_ReceiveToIdle_DMA>
        __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 8001ec6:	4b19      	ldr	r3, [pc, #100]	@ (8001f2c <UART_RX_BufferClear+0xbc>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	681a      	ldr	r2, [r3, #0]
 8001ecc:	4b17      	ldr	r3, [pc, #92]	@ (8001f2c <UART_RX_BufferClear+0xbc>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f022 0208 	bic.w	r2, r2, #8
 8001ed4:	601a      	str	r2, [r3, #0]

        __HAL_DMA_DISABLE(&hdma_usart6_rx);
 8001ed6:	4b18      	ldr	r3, [pc, #96]	@ (8001f38 <UART_RX_BufferClear+0xc8>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	681a      	ldr	r2, [r3, #0]
 8001edc:	4b16      	ldr	r3, [pc, #88]	@ (8001f38 <UART_RX_BufferClear+0xc8>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f022 0201 	bic.w	r2, r2, #1
 8001ee4:	601a      	str	r2, [r3, #0]
        hdma_usart6_rx.Instance->NDTR = UART_RX_IDLE_BUFSIZE;
 8001ee6:	4b14      	ldr	r3, [pc, #80]	@ (8001f38 <UART_RX_BufferClear+0xc8>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001eee:	605a      	str	r2, [r3, #4]
        __HAL_DMA_ENABLE(&hdma_usart6_rx);
 8001ef0:	4b11      	ldr	r3, [pc, #68]	@ (8001f38 <UART_RX_BufferClear+0xc8>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	681a      	ldr	r2, [r3, #0]
 8001ef6:	4b10      	ldr	r3, [pc, #64]	@ (8001f38 <UART_RX_BufferClear+0xc8>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f042 0201 	orr.w	r2, r2, #1
 8001efe:	601a      	str	r2, [r3, #0]

        HAL_UARTEx_ReceiveToIdle_DMA(&huart6, (uint8_t *)uart6_rx_IDLE_buf, UART_RX_IDLE_BUFSIZE);
 8001f00:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f04:	490d      	ldr	r1, [pc, #52]	@ (8001f3c <UART_RX_BufferClear+0xcc>)
 8001f06:	480e      	ldr	r0, [pc, #56]	@ (8001f40 <UART_RX_BufferClear+0xd0>)
 8001f08:	f003 ff4d 	bl	8005da6 <HAL_UARTEx_ReceiveToIdle_DMA>
        __HAL_DMA_DISABLE_IT(&hdma_usart6_rx, DMA_IT_HT);
 8001f0c:	4b0a      	ldr	r3, [pc, #40]	@ (8001f38 <UART_RX_BufferClear+0xc8>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	681a      	ldr	r2, [r3, #0]
 8001f12:	4b09      	ldr	r3, [pc, #36]	@ (8001f38 <UART_RX_BufferClear+0xc8>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f022 0208 	bic.w	r2, r2, #8
 8001f1a:	601a      	str	r2, [r3, #0]
        // HAL_UART_Receive_DMA(&huart2, uart2_rx_buf, UART_RXDATA_MAX);
        // HAL_UART_Receive_DMA(&huart3, uart3_rx_buf, UART_RXDATA_MAX);
    }

}
 8001f1c:	bf00      	nop
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	0800c074 	.word	0x0800c074
 8001f24:	20008a44 	.word	0x20008a44
 8001f28:	20008a46 	.word	0x20008a46
 8001f2c:	200004a0 	.word	0x200004a0
 8001f30:	20006334 	.word	0x20006334
 8001f34:	20000410 	.word	0x20000410
 8001f38:	20000500 	.word	0x20000500
 8001f3c:	200076bc 	.word	0x200076bc
 8001f40:	20000458 	.word	0x20000458

08001f44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001f44:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001f7c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001f48:	f7ff f958 	bl	80011fc <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001f4c:	480c      	ldr	r0, [pc, #48]	@ (8001f80 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001f4e:	490d      	ldr	r1, [pc, #52]	@ (8001f84 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001f50:	4a0d      	ldr	r2, [pc, #52]	@ (8001f88 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001f52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f54:	e002      	b.n	8001f5c <LoopCopyDataInit>

08001f56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f5a:	3304      	adds	r3, #4

08001f5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f60:	d3f9      	bcc.n	8001f56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f62:	4a0a      	ldr	r2, [pc, #40]	@ (8001f8c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001f64:	4c0a      	ldr	r4, [pc, #40]	@ (8001f90 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001f66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f68:	e001      	b.n	8001f6e <LoopFillZerobss>

08001f6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f6c:	3204      	adds	r2, #4

08001f6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f70:	d3fb      	bcc.n	8001f6a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001f72:	f009 faaf 	bl	800b4d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f76:	f7fe fd29 	bl	80009cc <main>
  bx  lr    
 8001f7a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001f7c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001f80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f84:	20000168 	.word	0x20000168
  ldr r2, =_sidata
 8001f88:	0800c13c 	.word	0x0800c13c
  ldr r2, =_sbss
 8001f8c:	20000168 	.word	0x20000168
  ldr r4, =_ebss
 8001f90:	20010540 	.word	0x20010540

08001f94 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f94:	e7fe      	b.n	8001f94 <ADC_IRQHandler>
	...

08001f98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f9c:	4b0e      	ldr	r3, [pc, #56]	@ (8001fd8 <HAL_Init+0x40>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a0d      	ldr	r2, [pc, #52]	@ (8001fd8 <HAL_Init+0x40>)
 8001fa2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001fa6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001fa8:	4b0b      	ldr	r3, [pc, #44]	@ (8001fd8 <HAL_Init+0x40>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a0a      	ldr	r2, [pc, #40]	@ (8001fd8 <HAL_Init+0x40>)
 8001fae:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001fb2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001fb4:	4b08      	ldr	r3, [pc, #32]	@ (8001fd8 <HAL_Init+0x40>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a07      	ldr	r2, [pc, #28]	@ (8001fd8 <HAL_Init+0x40>)
 8001fba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fbe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fc0:	2003      	movs	r0, #3
 8001fc2:	f000 f94f 	bl	8002264 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001fc6:	2000      	movs	r0, #0
 8001fc8:	f000 f808 	bl	8001fdc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001fcc:	f7fe fee8 	bl	8000da0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001fd0:	2300      	movs	r3, #0
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	40023c00 	.word	0x40023c00

08001fdc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b082      	sub	sp, #8
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001fe4:	4b12      	ldr	r3, [pc, #72]	@ (8002030 <HAL_InitTick+0x54>)
 8001fe6:	681a      	ldr	r2, [r3, #0]
 8001fe8:	4b12      	ldr	r3, [pc, #72]	@ (8002034 <HAL_InitTick+0x58>)
 8001fea:	781b      	ldrb	r3, [r3, #0]
 8001fec:	4619      	mov	r1, r3
 8001fee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ff2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ff6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f000 f967 	bl	80022ce <HAL_SYSTICK_Config>
 8002000:	4603      	mov	r3, r0
 8002002:	2b00      	cmp	r3, #0
 8002004:	d001      	beq.n	800200a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	e00e      	b.n	8002028 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2b0f      	cmp	r3, #15
 800200e:	d80a      	bhi.n	8002026 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002010:	2200      	movs	r2, #0
 8002012:	6879      	ldr	r1, [r7, #4]
 8002014:	f04f 30ff 	mov.w	r0, #4294967295
 8002018:	f000 f92f 	bl	800227a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800201c:	4a06      	ldr	r2, [pc, #24]	@ (8002038 <HAL_InitTick+0x5c>)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002022:	2300      	movs	r3, #0
 8002024:	e000      	b.n	8002028 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002026:	2301      	movs	r3, #1
}
 8002028:	4618      	mov	r0, r3
 800202a:	3708      	adds	r7, #8
 800202c:	46bd      	mov	sp, r7
 800202e:	bd80      	pop	{r7, pc}
 8002030:	20000000 	.word	0x20000000
 8002034:	20000018 	.word	0x20000018
 8002038:	20000014 	.word	0x20000014

0800203c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800203c:	b480      	push	{r7}
 800203e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002040:	4b06      	ldr	r3, [pc, #24]	@ (800205c <HAL_IncTick+0x20>)
 8002042:	781b      	ldrb	r3, [r3, #0]
 8002044:	461a      	mov	r2, r3
 8002046:	4b06      	ldr	r3, [pc, #24]	@ (8002060 <HAL_IncTick+0x24>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4413      	add	r3, r2
 800204c:	4a04      	ldr	r2, [pc, #16]	@ (8002060 <HAL_IncTick+0x24>)
 800204e:	6013      	str	r3, [r2, #0]
}
 8002050:	bf00      	nop
 8002052:	46bd      	mov	sp, r7
 8002054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002058:	4770      	bx	lr
 800205a:	bf00      	nop
 800205c:	20000018 	.word	0x20000018
 8002060:	2000e80c 	.word	0x2000e80c

08002064 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002064:	b480      	push	{r7}
 8002066:	af00      	add	r7, sp, #0
  return uwTick;
 8002068:	4b03      	ldr	r3, [pc, #12]	@ (8002078 <HAL_GetTick+0x14>)
 800206a:	681b      	ldr	r3, [r3, #0]
}
 800206c:	4618      	mov	r0, r3
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr
 8002076:	bf00      	nop
 8002078:	2000e80c 	.word	0x2000e80c

0800207c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b084      	sub	sp, #16
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002084:	f7ff ffee 	bl	8002064 <HAL_GetTick>
 8002088:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002094:	d005      	beq.n	80020a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002096:	4b0a      	ldr	r3, [pc, #40]	@ (80020c0 <HAL_Delay+0x44>)
 8002098:	781b      	ldrb	r3, [r3, #0]
 800209a:	461a      	mov	r2, r3
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	4413      	add	r3, r2
 80020a0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80020a2:	bf00      	nop
 80020a4:	f7ff ffde 	bl	8002064 <HAL_GetTick>
 80020a8:	4602      	mov	r2, r0
 80020aa:	68bb      	ldr	r3, [r7, #8]
 80020ac:	1ad3      	subs	r3, r2, r3
 80020ae:	68fa      	ldr	r2, [r7, #12]
 80020b0:	429a      	cmp	r2, r3
 80020b2:	d8f7      	bhi.n	80020a4 <HAL_Delay+0x28>
  {
  }
}
 80020b4:	bf00      	nop
 80020b6:	bf00      	nop
 80020b8:	3710      	adds	r7, #16
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	bf00      	nop
 80020c0:	20000018 	.word	0x20000018

080020c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b085      	sub	sp, #20
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	f003 0307 	and.w	r3, r3, #7
 80020d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020d4:	4b0c      	ldr	r3, [pc, #48]	@ (8002108 <__NVIC_SetPriorityGrouping+0x44>)
 80020d6:	68db      	ldr	r3, [r3, #12]
 80020d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020da:	68ba      	ldr	r2, [r7, #8]
 80020dc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80020e0:	4013      	ands	r3, r2
 80020e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020e8:	68bb      	ldr	r3, [r7, #8]
 80020ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020ec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80020f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80020f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020f6:	4a04      	ldr	r2, [pc, #16]	@ (8002108 <__NVIC_SetPriorityGrouping+0x44>)
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	60d3      	str	r3, [r2, #12]
}
 80020fc:	bf00      	nop
 80020fe:	3714      	adds	r7, #20
 8002100:	46bd      	mov	sp, r7
 8002102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002106:	4770      	bx	lr
 8002108:	e000ed00 	.word	0xe000ed00

0800210c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800210c:	b480      	push	{r7}
 800210e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002110:	4b04      	ldr	r3, [pc, #16]	@ (8002124 <__NVIC_GetPriorityGrouping+0x18>)
 8002112:	68db      	ldr	r3, [r3, #12]
 8002114:	0a1b      	lsrs	r3, r3, #8
 8002116:	f003 0307 	and.w	r3, r3, #7
}
 800211a:	4618      	mov	r0, r3
 800211c:	46bd      	mov	sp, r7
 800211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002122:	4770      	bx	lr
 8002124:	e000ed00 	.word	0xe000ed00

08002128 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002128:	b480      	push	{r7}
 800212a:	b083      	sub	sp, #12
 800212c:	af00      	add	r7, sp, #0
 800212e:	4603      	mov	r3, r0
 8002130:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002132:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002136:	2b00      	cmp	r3, #0
 8002138:	db0b      	blt.n	8002152 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800213a:	79fb      	ldrb	r3, [r7, #7]
 800213c:	f003 021f 	and.w	r2, r3, #31
 8002140:	4907      	ldr	r1, [pc, #28]	@ (8002160 <__NVIC_EnableIRQ+0x38>)
 8002142:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002146:	095b      	lsrs	r3, r3, #5
 8002148:	2001      	movs	r0, #1
 800214a:	fa00 f202 	lsl.w	r2, r0, r2
 800214e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002152:	bf00      	nop
 8002154:	370c      	adds	r7, #12
 8002156:	46bd      	mov	sp, r7
 8002158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215c:	4770      	bx	lr
 800215e:	bf00      	nop
 8002160:	e000e100 	.word	0xe000e100

08002164 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002164:	b480      	push	{r7}
 8002166:	b083      	sub	sp, #12
 8002168:	af00      	add	r7, sp, #0
 800216a:	4603      	mov	r3, r0
 800216c:	6039      	str	r1, [r7, #0]
 800216e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002170:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002174:	2b00      	cmp	r3, #0
 8002176:	db0a      	blt.n	800218e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	b2da      	uxtb	r2, r3
 800217c:	490c      	ldr	r1, [pc, #48]	@ (80021b0 <__NVIC_SetPriority+0x4c>)
 800217e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002182:	0112      	lsls	r2, r2, #4
 8002184:	b2d2      	uxtb	r2, r2
 8002186:	440b      	add	r3, r1
 8002188:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800218c:	e00a      	b.n	80021a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	b2da      	uxtb	r2, r3
 8002192:	4908      	ldr	r1, [pc, #32]	@ (80021b4 <__NVIC_SetPriority+0x50>)
 8002194:	79fb      	ldrb	r3, [r7, #7]
 8002196:	f003 030f 	and.w	r3, r3, #15
 800219a:	3b04      	subs	r3, #4
 800219c:	0112      	lsls	r2, r2, #4
 800219e:	b2d2      	uxtb	r2, r2
 80021a0:	440b      	add	r3, r1
 80021a2:	761a      	strb	r2, [r3, #24]
}
 80021a4:	bf00      	nop
 80021a6:	370c      	adds	r7, #12
 80021a8:	46bd      	mov	sp, r7
 80021aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ae:	4770      	bx	lr
 80021b0:	e000e100 	.word	0xe000e100
 80021b4:	e000ed00 	.word	0xe000ed00

080021b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b089      	sub	sp, #36	@ 0x24
 80021bc:	af00      	add	r7, sp, #0
 80021be:	60f8      	str	r0, [r7, #12]
 80021c0:	60b9      	str	r1, [r7, #8]
 80021c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	f003 0307 	and.w	r3, r3, #7
 80021ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021cc:	69fb      	ldr	r3, [r7, #28]
 80021ce:	f1c3 0307 	rsb	r3, r3, #7
 80021d2:	2b04      	cmp	r3, #4
 80021d4:	bf28      	it	cs
 80021d6:	2304      	movcs	r3, #4
 80021d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021da:	69fb      	ldr	r3, [r7, #28]
 80021dc:	3304      	adds	r3, #4
 80021de:	2b06      	cmp	r3, #6
 80021e0:	d902      	bls.n	80021e8 <NVIC_EncodePriority+0x30>
 80021e2:	69fb      	ldr	r3, [r7, #28]
 80021e4:	3b03      	subs	r3, #3
 80021e6:	e000      	b.n	80021ea <NVIC_EncodePriority+0x32>
 80021e8:	2300      	movs	r3, #0
 80021ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021ec:	f04f 32ff 	mov.w	r2, #4294967295
 80021f0:	69bb      	ldr	r3, [r7, #24]
 80021f2:	fa02 f303 	lsl.w	r3, r2, r3
 80021f6:	43da      	mvns	r2, r3
 80021f8:	68bb      	ldr	r3, [r7, #8]
 80021fa:	401a      	ands	r2, r3
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002200:	f04f 31ff 	mov.w	r1, #4294967295
 8002204:	697b      	ldr	r3, [r7, #20]
 8002206:	fa01 f303 	lsl.w	r3, r1, r3
 800220a:	43d9      	mvns	r1, r3
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002210:	4313      	orrs	r3, r2
         );
}
 8002212:	4618      	mov	r0, r3
 8002214:	3724      	adds	r7, #36	@ 0x24
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr
	...

08002220 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b082      	sub	sp, #8
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	3b01      	subs	r3, #1
 800222c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002230:	d301      	bcc.n	8002236 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002232:	2301      	movs	r3, #1
 8002234:	e00f      	b.n	8002256 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002236:	4a0a      	ldr	r2, [pc, #40]	@ (8002260 <SysTick_Config+0x40>)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	3b01      	subs	r3, #1
 800223c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800223e:	210f      	movs	r1, #15
 8002240:	f04f 30ff 	mov.w	r0, #4294967295
 8002244:	f7ff ff8e 	bl	8002164 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002248:	4b05      	ldr	r3, [pc, #20]	@ (8002260 <SysTick_Config+0x40>)
 800224a:	2200      	movs	r2, #0
 800224c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800224e:	4b04      	ldr	r3, [pc, #16]	@ (8002260 <SysTick_Config+0x40>)
 8002250:	2207      	movs	r2, #7
 8002252:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002254:	2300      	movs	r3, #0
}
 8002256:	4618      	mov	r0, r3
 8002258:	3708      	adds	r7, #8
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}
 800225e:	bf00      	nop
 8002260:	e000e010 	.word	0xe000e010

08002264 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b082      	sub	sp, #8
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800226c:	6878      	ldr	r0, [r7, #4]
 800226e:	f7ff ff29 	bl	80020c4 <__NVIC_SetPriorityGrouping>
}
 8002272:	bf00      	nop
 8002274:	3708      	adds	r7, #8
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}

0800227a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800227a:	b580      	push	{r7, lr}
 800227c:	b086      	sub	sp, #24
 800227e:	af00      	add	r7, sp, #0
 8002280:	4603      	mov	r3, r0
 8002282:	60b9      	str	r1, [r7, #8]
 8002284:	607a      	str	r2, [r7, #4]
 8002286:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002288:	2300      	movs	r3, #0
 800228a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800228c:	f7ff ff3e 	bl	800210c <__NVIC_GetPriorityGrouping>
 8002290:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002292:	687a      	ldr	r2, [r7, #4]
 8002294:	68b9      	ldr	r1, [r7, #8]
 8002296:	6978      	ldr	r0, [r7, #20]
 8002298:	f7ff ff8e 	bl	80021b8 <NVIC_EncodePriority>
 800229c:	4602      	mov	r2, r0
 800229e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022a2:	4611      	mov	r1, r2
 80022a4:	4618      	mov	r0, r3
 80022a6:	f7ff ff5d 	bl	8002164 <__NVIC_SetPriority>
}
 80022aa:	bf00      	nop
 80022ac:	3718      	adds	r7, #24
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}

080022b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022b2:	b580      	push	{r7, lr}
 80022b4:	b082      	sub	sp, #8
 80022b6:	af00      	add	r7, sp, #0
 80022b8:	4603      	mov	r3, r0
 80022ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022c0:	4618      	mov	r0, r3
 80022c2:	f7ff ff31 	bl	8002128 <__NVIC_EnableIRQ>
}
 80022c6:	bf00      	nop
 80022c8:	3708      	adds	r7, #8
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}

080022ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022ce:	b580      	push	{r7, lr}
 80022d0:	b082      	sub	sp, #8
 80022d2:	af00      	add	r7, sp, #0
 80022d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022d6:	6878      	ldr	r0, [r7, #4]
 80022d8:	f7ff ffa2 	bl	8002220 <SysTick_Config>
 80022dc:	4603      	mov	r3, r0
}
 80022de:	4618      	mov	r0, r3
 80022e0:	3708      	adds	r7, #8
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}
	...

080022e8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b086      	sub	sp, #24
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80022f0:	2300      	movs	r3, #0
 80022f2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80022f4:	f7ff feb6 	bl	8002064 <HAL_GetTick>
 80022f8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d101      	bne.n	8002304 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002300:	2301      	movs	r3, #1
 8002302:	e099      	b.n	8002438 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2202      	movs	r2, #2
 8002308:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2200      	movs	r2, #0
 8002310:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	681a      	ldr	r2, [r3, #0]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f022 0201 	bic.w	r2, r2, #1
 8002322:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002324:	e00f      	b.n	8002346 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002326:	f7ff fe9d 	bl	8002064 <HAL_GetTick>
 800232a:	4602      	mov	r2, r0
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	1ad3      	subs	r3, r2, r3
 8002330:	2b05      	cmp	r3, #5
 8002332:	d908      	bls.n	8002346 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2220      	movs	r2, #32
 8002338:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2203      	movs	r2, #3
 800233e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002342:	2303      	movs	r3, #3
 8002344:	e078      	b.n	8002438 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f003 0301 	and.w	r3, r3, #1
 8002350:	2b00      	cmp	r3, #0
 8002352:	d1e8      	bne.n	8002326 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800235c:	697a      	ldr	r2, [r7, #20]
 800235e:	4b38      	ldr	r3, [pc, #224]	@ (8002440 <HAL_DMA_Init+0x158>)
 8002360:	4013      	ands	r3, r2
 8002362:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	685a      	ldr	r2, [r3, #4]
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002372:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	691b      	ldr	r3, [r3, #16]
 8002378:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800237e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	699b      	ldr	r3, [r3, #24]
 8002384:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800238a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6a1b      	ldr	r3, [r3, #32]
 8002390:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002392:	697a      	ldr	r2, [r7, #20]
 8002394:	4313      	orrs	r3, r2
 8002396:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800239c:	2b04      	cmp	r3, #4
 800239e:	d107      	bne.n	80023b0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023a8:	4313      	orrs	r3, r2
 80023aa:	697a      	ldr	r2, [r7, #20]
 80023ac:	4313      	orrs	r3, r2
 80023ae:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	697a      	ldr	r2, [r7, #20]
 80023b6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	695b      	ldr	r3, [r3, #20]
 80023be:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	f023 0307 	bic.w	r3, r3, #7
 80023c6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023cc:	697a      	ldr	r2, [r7, #20]
 80023ce:	4313      	orrs	r3, r2
 80023d0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023d6:	2b04      	cmp	r3, #4
 80023d8:	d117      	bne.n	800240a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023de:	697a      	ldr	r2, [r7, #20]
 80023e0:	4313      	orrs	r3, r2
 80023e2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d00e      	beq.n	800240a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80023ec:	6878      	ldr	r0, [r7, #4]
 80023ee:	f000 fb01 	bl	80029f4 <DMA_CheckFifoParam>
 80023f2:	4603      	mov	r3, r0
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d008      	beq.n	800240a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2240      	movs	r2, #64	@ 0x40
 80023fc:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2201      	movs	r2, #1
 8002402:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002406:	2301      	movs	r3, #1
 8002408:	e016      	b.n	8002438 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	697a      	ldr	r2, [r7, #20]
 8002410:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002412:	6878      	ldr	r0, [r7, #4]
 8002414:	f000 fab8 	bl	8002988 <DMA_CalcBaseAndBitshift>
 8002418:	4603      	mov	r3, r0
 800241a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002420:	223f      	movs	r2, #63	@ 0x3f
 8002422:	409a      	lsls	r2, r3
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2200      	movs	r2, #0
 800242c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2201      	movs	r2, #1
 8002432:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002436:	2300      	movs	r3, #0
}
 8002438:	4618      	mov	r0, r3
 800243a:	3718      	adds	r7, #24
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}
 8002440:	f010803f 	.word	0xf010803f

08002444 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b086      	sub	sp, #24
 8002448:	af00      	add	r7, sp, #0
 800244a:	60f8      	str	r0, [r7, #12]
 800244c:	60b9      	str	r1, [r7, #8]
 800244e:	607a      	str	r2, [r7, #4]
 8002450:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002452:	2300      	movs	r3, #0
 8002454:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800245a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002462:	2b01      	cmp	r3, #1
 8002464:	d101      	bne.n	800246a <HAL_DMA_Start_IT+0x26>
 8002466:	2302      	movs	r3, #2
 8002468:	e040      	b.n	80024ec <HAL_DMA_Start_IT+0xa8>
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	2201      	movs	r2, #1
 800246e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002478:	b2db      	uxtb	r3, r3
 800247a:	2b01      	cmp	r3, #1
 800247c:	d12f      	bne.n	80024de <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	2202      	movs	r2, #2
 8002482:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	2200      	movs	r2, #0
 800248a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	687a      	ldr	r2, [r7, #4]
 8002490:	68b9      	ldr	r1, [r7, #8]
 8002492:	68f8      	ldr	r0, [r7, #12]
 8002494:	f000 fa4a 	bl	800292c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800249c:	223f      	movs	r2, #63	@ 0x3f
 800249e:	409a      	lsls	r2, r3
 80024a0:	693b      	ldr	r3, [r7, #16]
 80024a2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	681a      	ldr	r2, [r3, #0]
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f042 0216 	orr.w	r2, r2, #22
 80024b2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d007      	beq.n	80024cc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	681a      	ldr	r2, [r3, #0]
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f042 0208 	orr.w	r2, r2, #8
 80024ca:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	681a      	ldr	r2, [r3, #0]
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f042 0201 	orr.w	r2, r2, #1
 80024da:	601a      	str	r2, [r3, #0]
 80024dc:	e005      	b.n	80024ea <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	2200      	movs	r2, #0
 80024e2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80024e6:	2302      	movs	r3, #2
 80024e8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80024ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80024ec:	4618      	mov	r0, r3
 80024ee:	3718      	adds	r7, #24
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bd80      	pop	{r7, pc}

080024f4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b084      	sub	sp, #16
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002500:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002502:	f7ff fdaf 	bl	8002064 <HAL_GetTick>
 8002506:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800250e:	b2db      	uxtb	r3, r3
 8002510:	2b02      	cmp	r3, #2
 8002512:	d008      	beq.n	8002526 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2280      	movs	r2, #128	@ 0x80
 8002518:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2200      	movs	r2, #0
 800251e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002522:	2301      	movs	r3, #1
 8002524:	e052      	b.n	80025cc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	681a      	ldr	r2, [r3, #0]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f022 0216 	bic.w	r2, r2, #22
 8002534:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	695a      	ldr	r2, [r3, #20]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002544:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800254a:	2b00      	cmp	r3, #0
 800254c:	d103      	bne.n	8002556 <HAL_DMA_Abort+0x62>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002552:	2b00      	cmp	r3, #0
 8002554:	d007      	beq.n	8002566 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f022 0208 	bic.w	r2, r2, #8
 8002564:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	681a      	ldr	r2, [r3, #0]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f022 0201 	bic.w	r2, r2, #1
 8002574:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002576:	e013      	b.n	80025a0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002578:	f7ff fd74 	bl	8002064 <HAL_GetTick>
 800257c:	4602      	mov	r2, r0
 800257e:	68bb      	ldr	r3, [r7, #8]
 8002580:	1ad3      	subs	r3, r2, r3
 8002582:	2b05      	cmp	r3, #5
 8002584:	d90c      	bls.n	80025a0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2220      	movs	r2, #32
 800258a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2203      	movs	r2, #3
 8002590:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2200      	movs	r2, #0
 8002598:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800259c:	2303      	movs	r3, #3
 800259e:	e015      	b.n	80025cc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f003 0301 	and.w	r3, r3, #1
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d1e4      	bne.n	8002578 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025b2:	223f      	movs	r2, #63	@ 0x3f
 80025b4:	409a      	lsls	r2, r3
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2201      	movs	r2, #1
 80025be:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2200      	movs	r2, #0
 80025c6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80025ca:	2300      	movs	r3, #0
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	3710      	adds	r7, #16
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd80      	pop	{r7, pc}

080025d4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b083      	sub	sp, #12
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80025e2:	b2db      	uxtb	r3, r3
 80025e4:	2b02      	cmp	r3, #2
 80025e6:	d004      	beq.n	80025f2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2280      	movs	r2, #128	@ 0x80
 80025ec:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	e00c      	b.n	800260c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2205      	movs	r2, #5
 80025f6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	681a      	ldr	r2, [r3, #0]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f022 0201 	bic.w	r2, r2, #1
 8002608:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800260a:	2300      	movs	r3, #0
}
 800260c:	4618      	mov	r0, r3
 800260e:	370c      	adds	r7, #12
 8002610:	46bd      	mov	sp, r7
 8002612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002616:	4770      	bx	lr

08002618 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b086      	sub	sp, #24
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002620:	2300      	movs	r3, #0
 8002622:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002624:	4b8e      	ldr	r3, [pc, #568]	@ (8002860 <HAL_DMA_IRQHandler+0x248>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a8e      	ldr	r2, [pc, #568]	@ (8002864 <HAL_DMA_IRQHandler+0x24c>)
 800262a:	fba2 2303 	umull	r2, r3, r2, r3
 800262e:	0a9b      	lsrs	r3, r3, #10
 8002630:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002636:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002642:	2208      	movs	r2, #8
 8002644:	409a      	lsls	r2, r3
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	4013      	ands	r3, r2
 800264a:	2b00      	cmp	r3, #0
 800264c:	d01a      	beq.n	8002684 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f003 0304 	and.w	r3, r3, #4
 8002658:	2b00      	cmp	r3, #0
 800265a:	d013      	beq.n	8002684 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	681a      	ldr	r2, [r3, #0]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f022 0204 	bic.w	r2, r2, #4
 800266a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002670:	2208      	movs	r2, #8
 8002672:	409a      	lsls	r2, r3
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800267c:	f043 0201 	orr.w	r2, r3, #1
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002688:	2201      	movs	r2, #1
 800268a:	409a      	lsls	r2, r3
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	4013      	ands	r3, r2
 8002690:	2b00      	cmp	r3, #0
 8002692:	d012      	beq.n	80026ba <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	695b      	ldr	r3, [r3, #20]
 800269a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d00b      	beq.n	80026ba <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026a6:	2201      	movs	r2, #1
 80026a8:	409a      	lsls	r2, r3
 80026aa:	693b      	ldr	r3, [r7, #16]
 80026ac:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026b2:	f043 0202 	orr.w	r2, r3, #2
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026be:	2204      	movs	r2, #4
 80026c0:	409a      	lsls	r2, r3
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	4013      	ands	r3, r2
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d012      	beq.n	80026f0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f003 0302 	and.w	r3, r3, #2
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d00b      	beq.n	80026f0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026dc:	2204      	movs	r2, #4
 80026de:	409a      	lsls	r2, r3
 80026e0:	693b      	ldr	r3, [r7, #16]
 80026e2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026e8:	f043 0204 	orr.w	r2, r3, #4
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026f4:	2210      	movs	r2, #16
 80026f6:	409a      	lsls	r2, r3
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	4013      	ands	r3, r2
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d043      	beq.n	8002788 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f003 0308 	and.w	r3, r3, #8
 800270a:	2b00      	cmp	r3, #0
 800270c:	d03c      	beq.n	8002788 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002712:	2210      	movs	r2, #16
 8002714:	409a      	lsls	r2, r3
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002724:	2b00      	cmp	r3, #0
 8002726:	d018      	beq.n	800275a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002732:	2b00      	cmp	r3, #0
 8002734:	d108      	bne.n	8002748 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800273a:	2b00      	cmp	r3, #0
 800273c:	d024      	beq.n	8002788 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002742:	6878      	ldr	r0, [r7, #4]
 8002744:	4798      	blx	r3
 8002746:	e01f      	b.n	8002788 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800274c:	2b00      	cmp	r3, #0
 800274e:	d01b      	beq.n	8002788 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002754:	6878      	ldr	r0, [r7, #4]
 8002756:	4798      	blx	r3
 8002758:	e016      	b.n	8002788 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002764:	2b00      	cmp	r3, #0
 8002766:	d107      	bne.n	8002778 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	681a      	ldr	r2, [r3, #0]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f022 0208 	bic.w	r2, r2, #8
 8002776:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800277c:	2b00      	cmp	r3, #0
 800277e:	d003      	beq.n	8002788 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002784:	6878      	ldr	r0, [r7, #4]
 8002786:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800278c:	2220      	movs	r2, #32
 800278e:	409a      	lsls	r2, r3
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	4013      	ands	r3, r2
 8002794:	2b00      	cmp	r3, #0
 8002796:	f000 808f 	beq.w	80028b8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f003 0310 	and.w	r3, r3, #16
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	f000 8087 	beq.w	80028b8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027ae:	2220      	movs	r2, #32
 80027b0:	409a      	lsls	r2, r3
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80027bc:	b2db      	uxtb	r3, r3
 80027be:	2b05      	cmp	r3, #5
 80027c0:	d136      	bne.n	8002830 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	681a      	ldr	r2, [r3, #0]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f022 0216 	bic.w	r2, r2, #22
 80027d0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	695a      	ldr	r2, [r3, #20]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80027e0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d103      	bne.n	80027f2 <HAL_DMA_IRQHandler+0x1da>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d007      	beq.n	8002802 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	681a      	ldr	r2, [r3, #0]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f022 0208 	bic.w	r2, r2, #8
 8002800:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002806:	223f      	movs	r2, #63	@ 0x3f
 8002808:	409a      	lsls	r2, r3
 800280a:	693b      	ldr	r3, [r7, #16]
 800280c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2201      	movs	r2, #1
 8002812:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2200      	movs	r2, #0
 800281a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002822:	2b00      	cmp	r3, #0
 8002824:	d07e      	beq.n	8002924 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800282a:	6878      	ldr	r0, [r7, #4]
 800282c:	4798      	blx	r3
        }
        return;
 800282e:	e079      	b.n	8002924 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800283a:	2b00      	cmp	r3, #0
 800283c:	d01d      	beq.n	800287a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002848:	2b00      	cmp	r3, #0
 800284a:	d10d      	bne.n	8002868 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002850:	2b00      	cmp	r3, #0
 8002852:	d031      	beq.n	80028b8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002858:	6878      	ldr	r0, [r7, #4]
 800285a:	4798      	blx	r3
 800285c:	e02c      	b.n	80028b8 <HAL_DMA_IRQHandler+0x2a0>
 800285e:	bf00      	nop
 8002860:	20000000 	.word	0x20000000
 8002864:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800286c:	2b00      	cmp	r3, #0
 800286e:	d023      	beq.n	80028b8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002874:	6878      	ldr	r0, [r7, #4]
 8002876:	4798      	blx	r3
 8002878:	e01e      	b.n	80028b8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002884:	2b00      	cmp	r3, #0
 8002886:	d10f      	bne.n	80028a8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	681a      	ldr	r2, [r3, #0]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f022 0210 	bic.w	r2, r2, #16
 8002896:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2201      	movs	r2, #1
 800289c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2200      	movs	r2, #0
 80028a4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d003      	beq.n	80028b8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028b4:	6878      	ldr	r0, [r7, #4]
 80028b6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d032      	beq.n	8002926 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028c4:	f003 0301 	and.w	r3, r3, #1
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d022      	beq.n	8002912 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2205      	movs	r2, #5
 80028d0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	681a      	ldr	r2, [r3, #0]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f022 0201 	bic.w	r2, r2, #1
 80028e2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	3301      	adds	r3, #1
 80028e8:	60bb      	str	r3, [r7, #8]
 80028ea:	697a      	ldr	r2, [r7, #20]
 80028ec:	429a      	cmp	r2, r3
 80028ee:	d307      	bcc.n	8002900 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 0301 	and.w	r3, r3, #1
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d1f2      	bne.n	80028e4 <HAL_DMA_IRQHandler+0x2cc>
 80028fe:	e000      	b.n	8002902 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002900:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2201      	movs	r2, #1
 8002906:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2200      	movs	r2, #0
 800290e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002916:	2b00      	cmp	r3, #0
 8002918:	d005      	beq.n	8002926 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800291e:	6878      	ldr	r0, [r7, #4]
 8002920:	4798      	blx	r3
 8002922:	e000      	b.n	8002926 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002924:	bf00      	nop
    }
  }
}
 8002926:	3718      	adds	r7, #24
 8002928:	46bd      	mov	sp, r7
 800292a:	bd80      	pop	{r7, pc}

0800292c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800292c:	b480      	push	{r7}
 800292e:	b085      	sub	sp, #20
 8002930:	af00      	add	r7, sp, #0
 8002932:	60f8      	str	r0, [r7, #12]
 8002934:	60b9      	str	r1, [r7, #8]
 8002936:	607a      	str	r2, [r7, #4]
 8002938:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002948:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	683a      	ldr	r2, [r7, #0]
 8002950:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	689b      	ldr	r3, [r3, #8]
 8002956:	2b40      	cmp	r3, #64	@ 0x40
 8002958:	d108      	bne.n	800296c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	687a      	ldr	r2, [r7, #4]
 8002960:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	68ba      	ldr	r2, [r7, #8]
 8002968:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800296a:	e007      	b.n	800297c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	68ba      	ldr	r2, [r7, #8]
 8002972:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	687a      	ldr	r2, [r7, #4]
 800297a:	60da      	str	r2, [r3, #12]
}
 800297c:	bf00      	nop
 800297e:	3714      	adds	r7, #20
 8002980:	46bd      	mov	sp, r7
 8002982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002986:	4770      	bx	lr

08002988 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002988:	b480      	push	{r7}
 800298a:	b085      	sub	sp, #20
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	b2db      	uxtb	r3, r3
 8002996:	3b10      	subs	r3, #16
 8002998:	4a14      	ldr	r2, [pc, #80]	@ (80029ec <DMA_CalcBaseAndBitshift+0x64>)
 800299a:	fba2 2303 	umull	r2, r3, r2, r3
 800299e:	091b      	lsrs	r3, r3, #4
 80029a0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80029a2:	4a13      	ldr	r2, [pc, #76]	@ (80029f0 <DMA_CalcBaseAndBitshift+0x68>)
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	4413      	add	r3, r2
 80029a8:	781b      	ldrb	r3, [r3, #0]
 80029aa:	461a      	mov	r2, r3
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	2b03      	cmp	r3, #3
 80029b4:	d909      	bls.n	80029ca <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80029be:	f023 0303 	bic.w	r3, r3, #3
 80029c2:	1d1a      	adds	r2, r3, #4
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	659a      	str	r2, [r3, #88]	@ 0x58
 80029c8:	e007      	b.n	80029da <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80029d2:	f023 0303 	bic.w	r3, r3, #3
 80029d6:	687a      	ldr	r2, [r7, #4]
 80029d8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80029de:	4618      	mov	r0, r3
 80029e0:	3714      	adds	r7, #20
 80029e2:	46bd      	mov	sp, r7
 80029e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e8:	4770      	bx	lr
 80029ea:	bf00      	nop
 80029ec:	aaaaaaab 	.word	0xaaaaaaab
 80029f0:	0800c0f0 	.word	0x0800c0f0

080029f4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b085      	sub	sp, #20
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80029fc:	2300      	movs	r3, #0
 80029fe:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a04:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	699b      	ldr	r3, [r3, #24]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d11f      	bne.n	8002a4e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002a0e:	68bb      	ldr	r3, [r7, #8]
 8002a10:	2b03      	cmp	r3, #3
 8002a12:	d856      	bhi.n	8002ac2 <DMA_CheckFifoParam+0xce>
 8002a14:	a201      	add	r2, pc, #4	@ (adr r2, 8002a1c <DMA_CheckFifoParam+0x28>)
 8002a16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a1a:	bf00      	nop
 8002a1c:	08002a2d 	.word	0x08002a2d
 8002a20:	08002a3f 	.word	0x08002a3f
 8002a24:	08002a2d 	.word	0x08002a2d
 8002a28:	08002ac3 	.word	0x08002ac3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a30:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d046      	beq.n	8002ac6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a3c:	e043      	b.n	8002ac6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a42:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002a46:	d140      	bne.n	8002aca <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a4c:	e03d      	b.n	8002aca <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	699b      	ldr	r3, [r3, #24]
 8002a52:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002a56:	d121      	bne.n	8002a9c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	2b03      	cmp	r3, #3
 8002a5c:	d837      	bhi.n	8002ace <DMA_CheckFifoParam+0xda>
 8002a5e:	a201      	add	r2, pc, #4	@ (adr r2, 8002a64 <DMA_CheckFifoParam+0x70>)
 8002a60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a64:	08002a75 	.word	0x08002a75
 8002a68:	08002a7b 	.word	0x08002a7b
 8002a6c:	08002a75 	.word	0x08002a75
 8002a70:	08002a8d 	.word	0x08002a8d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002a74:	2301      	movs	r3, #1
 8002a76:	73fb      	strb	r3, [r7, #15]
      break;
 8002a78:	e030      	b.n	8002adc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a7e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d025      	beq.n	8002ad2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
 8002a88:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a8a:	e022      	b.n	8002ad2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a90:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002a94:	d11f      	bne.n	8002ad6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002a96:	2301      	movs	r3, #1
 8002a98:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002a9a:	e01c      	b.n	8002ad6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	2b02      	cmp	r3, #2
 8002aa0:	d903      	bls.n	8002aaa <DMA_CheckFifoParam+0xb6>
 8002aa2:	68bb      	ldr	r3, [r7, #8]
 8002aa4:	2b03      	cmp	r3, #3
 8002aa6:	d003      	beq.n	8002ab0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002aa8:	e018      	b.n	8002adc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	73fb      	strb	r3, [r7, #15]
      break;
 8002aae:	e015      	b.n	8002adc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ab4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d00e      	beq.n	8002ada <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002abc:	2301      	movs	r3, #1
 8002abe:	73fb      	strb	r3, [r7, #15]
      break;
 8002ac0:	e00b      	b.n	8002ada <DMA_CheckFifoParam+0xe6>
      break;
 8002ac2:	bf00      	nop
 8002ac4:	e00a      	b.n	8002adc <DMA_CheckFifoParam+0xe8>
      break;
 8002ac6:	bf00      	nop
 8002ac8:	e008      	b.n	8002adc <DMA_CheckFifoParam+0xe8>
      break;
 8002aca:	bf00      	nop
 8002acc:	e006      	b.n	8002adc <DMA_CheckFifoParam+0xe8>
      break;
 8002ace:	bf00      	nop
 8002ad0:	e004      	b.n	8002adc <DMA_CheckFifoParam+0xe8>
      break;
 8002ad2:	bf00      	nop
 8002ad4:	e002      	b.n	8002adc <DMA_CheckFifoParam+0xe8>
      break;   
 8002ad6:	bf00      	nop
 8002ad8:	e000      	b.n	8002adc <DMA_CheckFifoParam+0xe8>
      break;
 8002ada:	bf00      	nop
    }
  } 
  
  return status; 
 8002adc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	3714      	adds	r7, #20
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae8:	4770      	bx	lr
 8002aea:	bf00      	nop

08002aec <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b084      	sub	sp, #16
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d101      	bne.n	8002afe <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8002afa:	2301      	movs	r3, #1
 8002afc:	e08a      	b.n	8002c14 <HAL_ETH_Init+0x128>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d106      	bne.n	8002b16 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2223      	movs	r2, #35	@ 0x23
 8002b0c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002b10:	6878      	ldr	r0, [r7, #4]
 8002b12:	f7fd fdb9 	bl	8000688 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b16:	2300      	movs	r3, #0
 8002b18:	60bb      	str	r3, [r7, #8]
 8002b1a:	4b40      	ldr	r3, [pc, #256]	@ (8002c1c <HAL_ETH_Init+0x130>)
 8002b1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b1e:	4a3f      	ldr	r2, [pc, #252]	@ (8002c1c <HAL_ETH_Init+0x130>)
 8002b20:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002b24:	6453      	str	r3, [r2, #68]	@ 0x44
 8002b26:	4b3d      	ldr	r3, [pc, #244]	@ (8002c1c <HAL_ETH_Init+0x130>)
 8002b28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b2a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b2e:	60bb      	str	r3, [r7, #8]
 8002b30:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8002b32:	4b3b      	ldr	r3, [pc, #236]	@ (8002c20 <HAL_ETH_Init+0x134>)
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	4a3a      	ldr	r2, [pc, #232]	@ (8002c20 <HAL_ETH_Init+0x134>)
 8002b38:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002b3c:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8002b3e:	4b38      	ldr	r3, [pc, #224]	@ (8002c20 <HAL_ETH_Init+0x134>)
 8002b40:	685a      	ldr	r2, [r3, #4]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	689b      	ldr	r3, [r3, #8]
 8002b46:	4936      	ldr	r1, [pc, #216]	@ (8002c20 <HAL_ETH_Init+0x134>)
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8002b4c:	4b34      	ldr	r3, [pc, #208]	@ (8002c20 <HAL_ETH_Init+0x134>)
 8002b4e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	687a      	ldr	r2, [r7, #4]
 8002b5c:	6812      	ldr	r2, [r2, #0]
 8002b5e:	f043 0301 	orr.w	r3, r3, #1
 8002b62:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002b66:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b68:	f7ff fa7c 	bl	8002064 <HAL_GetTick>
 8002b6c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002b6e:	e011      	b.n	8002b94 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002b70:	f7ff fa78 	bl	8002064 <HAL_GetTick>
 8002b74:	4602      	mov	r2, r0
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	1ad3      	subs	r3, r2, r3
 8002b7a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8002b7e:	d909      	bls.n	8002b94 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2204      	movs	r2, #4
 8002b84:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	22e0      	movs	r2, #224	@ 0xe0
 8002b8c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8002b90:	2301      	movs	r3, #1
 8002b92:	e03f      	b.n	8002c14 <HAL_ETH_Init+0x128>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f003 0301 	and.w	r3, r3, #1
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d1e4      	bne.n	8002b70 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002ba6:	6878      	ldr	r0, [r7, #4]
 8002ba8:	f000 f97a 	bl	8002ea0 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002bac:	6878      	ldr	r0, [r7, #4]
 8002bae:	f000 fa25 	bl	8002ffc <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002bb2:	6878      	ldr	r0, [r7, #4]
 8002bb4:	f000 fa7b 	bl	80030ae <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	461a      	mov	r2, r3
 8002bbe:	2100      	movs	r1, #0
 8002bc0:	6878      	ldr	r0, [r7, #4]
 8002bc2:	f000 f9e3 	bl	8002f8c <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8002bd4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 8002bde:	687a      	ldr	r2, [r7, #4]
 8002be0:	6812      	ldr	r2, [r2, #0]
 8002be2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002be6:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002bea:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 8002bfe:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2200      	movs	r2, #0
 8002c06:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2210      	movs	r2, #16
 8002c0e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8002c12:	2300      	movs	r3, #0
}
 8002c14:	4618      	mov	r0, r3
 8002c16:	3710      	adds	r7, #16
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bd80      	pop	{r7, pc}
 8002c1c:	40023800 	.word	0x40023800
 8002c20:	40013800 	.word	0x40013800

08002c24 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b084      	sub	sp, #16
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
 8002c2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002c36:	68fa      	ldr	r2, [r7, #12]
 8002c38:	4b53      	ldr	r3, [pc, #332]	@ (8002d88 <ETH_SetMACConfig+0x164>)
 8002c3a:	4013      	ands	r3, r2
 8002c3c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	7b9b      	ldrb	r3, [r3, #14]
 8002c42:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002c44:	683a      	ldr	r2, [r7, #0]
 8002c46:	7c12      	ldrb	r2, [r2, #16]
 8002c48:	2a00      	cmp	r2, #0
 8002c4a:	d102      	bne.n	8002c52 <ETH_SetMACConfig+0x2e>
 8002c4c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002c50:	e000      	b.n	8002c54 <ETH_SetMACConfig+0x30>
 8002c52:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8002c54:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002c56:	683a      	ldr	r2, [r7, #0]
 8002c58:	7c52      	ldrb	r2, [r2, #17]
 8002c5a:	2a00      	cmp	r2, #0
 8002c5c:	d102      	bne.n	8002c64 <ETH_SetMACConfig+0x40>
 8002c5e:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8002c62:	e000      	b.n	8002c66 <ETH_SetMACConfig+0x42>
 8002c64:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002c66:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002c6c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	7fdb      	ldrb	r3, [r3, #31]
 8002c72:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002c74:	431a      	orrs	r2, r3
                        macconf->Speed |
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002c7a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002c7c:	683a      	ldr	r2, [r7, #0]
 8002c7e:	7f92      	ldrb	r2, [r2, #30]
 8002c80:	2a00      	cmp	r2, #0
 8002c82:	d102      	bne.n	8002c8a <ETH_SetMACConfig+0x66>
 8002c84:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002c88:	e000      	b.n	8002c8c <ETH_SetMACConfig+0x68>
 8002c8a:	2200      	movs	r2, #0
                        macconf->Speed |
 8002c8c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	7f1b      	ldrb	r3, [r3, #28]
 8002c92:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002c94:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002c9a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	791b      	ldrb	r3, [r3, #4]
 8002ca0:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8002ca2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002ca4:	683a      	ldr	r2, [r7, #0]
 8002ca6:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002caa:	2a00      	cmp	r2, #0
 8002cac:	d102      	bne.n	8002cb4 <ETH_SetMACConfig+0x90>
 8002cae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002cb2:	e000      	b.n	8002cb6 <ETH_SetMACConfig+0x92>
 8002cb4:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002cb6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	7bdb      	ldrb	r3, [r3, #15]
 8002cbc:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002cbe:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002cc4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002ccc:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	68fa      	ldr	r2, [r7, #12]
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	68fa      	ldr	r2, [r7, #12]
 8002cdc:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002ce6:	2001      	movs	r0, #1
 8002ce8:	f7ff f9c8 	bl	800207c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	68fa      	ldr	r2, [r7, #12]
 8002cf2:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	699b      	ldr	r3, [r3, #24]
 8002cfa:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002cfc:	68fa      	ldr	r2, [r7, #12]
 8002cfe:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8002d02:	4013      	ands	r3, r2
 8002d04:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d0a:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002d0c:	683a      	ldr	r2, [r7, #0]
 8002d0e:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8002d12:	2a00      	cmp	r2, #0
 8002d14:	d101      	bne.n	8002d1a <ETH_SetMACConfig+0xf6>
 8002d16:	2280      	movs	r2, #128	@ 0x80
 8002d18:	e000      	b.n	8002d1c <ETH_SetMACConfig+0xf8>
 8002d1a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002d1c:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002d22:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002d24:	683a      	ldr	r2, [r7, #0]
 8002d26:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8002d2a:	2a01      	cmp	r2, #1
 8002d2c:	d101      	bne.n	8002d32 <ETH_SetMACConfig+0x10e>
 8002d2e:	2208      	movs	r2, #8
 8002d30:	e000      	b.n	8002d34 <ETH_SetMACConfig+0x110>
 8002d32:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002d34:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8002d36:	683a      	ldr	r2, [r7, #0]
 8002d38:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8002d3c:	2a01      	cmp	r2, #1
 8002d3e:	d101      	bne.n	8002d44 <ETH_SetMACConfig+0x120>
 8002d40:	2204      	movs	r2, #4
 8002d42:	e000      	b.n	8002d46 <ETH_SetMACConfig+0x122>
 8002d44:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002d46:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002d48:	683a      	ldr	r2, [r7, #0]
 8002d4a:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8002d4e:	2a01      	cmp	r2, #1
 8002d50:	d101      	bne.n	8002d56 <ETH_SetMACConfig+0x132>
 8002d52:	2202      	movs	r2, #2
 8002d54:	e000      	b.n	8002d58 <ETH_SetMACConfig+0x134>
 8002d56:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	68fa      	ldr	r2, [r7, #12]
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	68fa      	ldr	r2, [r7, #12]
 8002d66:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	699b      	ldr	r3, [r3, #24]
 8002d6e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002d70:	2001      	movs	r0, #1
 8002d72:	f7ff f983 	bl	800207c <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	68fa      	ldr	r2, [r7, #12]
 8002d7c:	619a      	str	r2, [r3, #24]
}
 8002d7e:	bf00      	nop
 8002d80:	3710      	adds	r7, #16
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}
 8002d86:	bf00      	nop
 8002d88:	fd20810f 	.word	0xfd20810f

08002d8c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b084      	sub	sp, #16
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
 8002d94:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002d9e:	699b      	ldr	r3, [r3, #24]
 8002da0:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002da2:	68fa      	ldr	r2, [r7, #12]
 8002da4:	4b3d      	ldr	r3, [pc, #244]	@ (8002e9c <ETH_SetDMAConfig+0x110>)
 8002da6:	4013      	ands	r3, r2
 8002da8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	7b1b      	ldrb	r3, [r3, #12]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d102      	bne.n	8002db8 <ETH_SetDMAConfig+0x2c>
 8002db2:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002db6:	e000      	b.n	8002dba <ETH_SetDMAConfig+0x2e>
 8002db8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	7b5b      	ldrb	r3, [r3, #13]
 8002dbe:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002dc0:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002dc2:	683a      	ldr	r2, [r7, #0]
 8002dc4:	7f52      	ldrb	r2, [r2, #29]
 8002dc6:	2a00      	cmp	r2, #0
 8002dc8:	d102      	bne.n	8002dd0 <ETH_SetDMAConfig+0x44>
 8002dca:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002dce:	e000      	b.n	8002dd2 <ETH_SetDMAConfig+0x46>
 8002dd0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002dd2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	7b9b      	ldrb	r3, [r3, #14]
 8002dd8:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002dda:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002de0:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	7f1b      	ldrb	r3, [r3, #28]
 8002de6:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002de8:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	7f9b      	ldrb	r3, [r3, #30]
 8002dee:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002df0:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002df6:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002dfe:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002e00:	4313      	orrs	r3, r2
 8002e02:	68fa      	ldr	r2, [r7, #12]
 8002e04:	4313      	orrs	r3, r2
 8002e06:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002e10:	461a      	mov	r2, r3
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002e1e:	699b      	ldr	r3, [r3, #24]
 8002e20:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002e22:	2001      	movs	r0, #1
 8002e24:	f7ff f92a 	bl	800207c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002e30:	461a      	mov	r2, r3
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	791b      	ldrb	r3, [r3, #4]
 8002e3a:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002e40:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8002e46:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002e4c:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002e54:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8002e56:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e5c:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002e5e:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002e64:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002e66:	687a      	ldr	r2, [r7, #4]
 8002e68:	6812      	ldr	r2, [r2, #0]
 8002e6a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002e6e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002e72:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002e80:	2001      	movs	r0, #1
 8002e82:	f7ff f8fb 	bl	800207c <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002e8e:	461a      	mov	r2, r3
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	6013      	str	r3, [r2, #0]
}
 8002e94:	bf00      	nop
 8002e96:	3710      	adds	r7, #16
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bd80      	pop	{r7, pc}
 8002e9c:	f8de3f23 	.word	0xf8de3f23

08002ea0 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b0a6      	sub	sp, #152	@ 0x98
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002edc:	2300      	movs	r3, #0
 8002ede:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002eec:	2300      	movs	r3, #0
 8002eee:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002efc:	2300      	movs	r3, #0
 8002efe:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002f02:	2300      	movs	r3, #0
 8002f04:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002f08:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002f0c:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002f0e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002f12:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002f14:	2300      	movs	r3, #0
 8002f16:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002f1a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002f1e:	4619      	mov	r1, r3
 8002f20:	6878      	ldr	r0, [r7, #4]
 8002f22:	f7ff fe7f 	bl	8002c24 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002f26:	2301      	movs	r3, #1
 8002f28:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002f34:	2301      	movs	r3, #1
 8002f36:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002f42:	2300      	movs	r3, #0
 8002f44:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002f52:	2301      	movs	r3, #1
 8002f54:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002f56:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002f5a:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002f5c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002f60:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002f62:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002f66:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002f72:	2300      	movs	r3, #0
 8002f74:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002f76:	f107 0308 	add.w	r3, r7, #8
 8002f7a:	4619      	mov	r1, r3
 8002f7c:	6878      	ldr	r0, [r7, #4]
 8002f7e:	f7ff ff05 	bl	8002d8c <ETH_SetDMAConfig>
}
 8002f82:	bf00      	nop
 8002f84:	3798      	adds	r7, #152	@ 0x98
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd80      	pop	{r7, pc}
	...

08002f8c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b087      	sub	sp, #28
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	60f8      	str	r0, [r7, #12]
 8002f94:	60b9      	str	r1, [r7, #8]
 8002f96:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	3305      	adds	r3, #5
 8002f9c:	781b      	ldrb	r3, [r3, #0]
 8002f9e:	021b      	lsls	r3, r3, #8
 8002fa0:	687a      	ldr	r2, [r7, #4]
 8002fa2:	3204      	adds	r2, #4
 8002fa4:	7812      	ldrb	r2, [r2, #0]
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002faa:	68ba      	ldr	r2, [r7, #8]
 8002fac:	4b11      	ldr	r3, [pc, #68]	@ (8002ff4 <ETH_MACAddressConfig+0x68>)
 8002fae:	4413      	add	r3, r2
 8002fb0:	461a      	mov	r2, r3
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	3303      	adds	r3, #3
 8002fba:	781b      	ldrb	r3, [r3, #0]
 8002fbc:	061a      	lsls	r2, r3, #24
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	3302      	adds	r3, #2
 8002fc2:	781b      	ldrb	r3, [r3, #0]
 8002fc4:	041b      	lsls	r3, r3, #16
 8002fc6:	431a      	orrs	r2, r3
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	3301      	adds	r3, #1
 8002fcc:	781b      	ldrb	r3, [r3, #0]
 8002fce:	021b      	lsls	r3, r3, #8
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	687a      	ldr	r2, [r7, #4]
 8002fd4:	7812      	ldrb	r2, [r2, #0]
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002fda:	68ba      	ldr	r2, [r7, #8]
 8002fdc:	4b06      	ldr	r3, [pc, #24]	@ (8002ff8 <ETH_MACAddressConfig+0x6c>)
 8002fde:	4413      	add	r3, r2
 8002fe0:	461a      	mov	r2, r3
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	6013      	str	r3, [r2, #0]
}
 8002fe6:	bf00      	nop
 8002fe8:	371c      	adds	r7, #28
 8002fea:	46bd      	mov	sp, r7
 8002fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff0:	4770      	bx	lr
 8002ff2:	bf00      	nop
 8002ff4:	40028040 	.word	0x40028040
 8002ff8:	40028044 	.word	0x40028044

08002ffc <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b085      	sub	sp, #20
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003004:	2300      	movs	r3, #0
 8003006:	60fb      	str	r3, [r7, #12]
 8003008:	e03e      	b.n	8003088 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	68d9      	ldr	r1, [r3, #12]
 800300e:	68fa      	ldr	r2, [r7, #12]
 8003010:	4613      	mov	r3, r2
 8003012:	009b      	lsls	r3, r3, #2
 8003014:	4413      	add	r3, r2
 8003016:	00db      	lsls	r3, r3, #3
 8003018:	440b      	add	r3, r1
 800301a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	2200      	movs	r2, #0
 8003020:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8003022:	68bb      	ldr	r3, [r7, #8]
 8003024:	2200      	movs	r2, #0
 8003026:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	2200      	movs	r2, #0
 800302c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 800302e:	68bb      	ldr	r3, [r7, #8]
 8003030:	2200      	movs	r2, #0
 8003032:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8003034:	68b9      	ldr	r1, [r7, #8]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	68fa      	ldr	r2, [r7, #12]
 800303a:	3206      	adds	r2, #6
 800303c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003048:	68bb      	ldr	r3, [r7, #8]
 800304a:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	2b02      	cmp	r3, #2
 8003050:	d80c      	bhi.n	800306c <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	68d9      	ldr	r1, [r3, #12]
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	1c5a      	adds	r2, r3, #1
 800305a:	4613      	mov	r3, r2
 800305c:	009b      	lsls	r3, r3, #2
 800305e:	4413      	add	r3, r2
 8003060:	00db      	lsls	r3, r3, #3
 8003062:	440b      	add	r3, r1
 8003064:	461a      	mov	r2, r3
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	60da      	str	r2, [r3, #12]
 800306a:	e004      	b.n	8003076 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	68db      	ldr	r3, [r3, #12]
 8003070:	461a      	mov	r2, r3
 8003072:	68bb      	ldr	r3, [r7, #8]
 8003074:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	3301      	adds	r3, #1
 8003086:	60fb      	str	r3, [r7, #12]
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	2b03      	cmp	r3, #3
 800308c:	d9bd      	bls.n	800300a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2200      	movs	r2, #0
 8003092:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	68da      	ldr	r2, [r3, #12]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80030a0:	611a      	str	r2, [r3, #16]
}
 80030a2:	bf00      	nop
 80030a4:	3714      	adds	r7, #20
 80030a6:	46bd      	mov	sp, r7
 80030a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ac:	4770      	bx	lr

080030ae <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80030ae:	b480      	push	{r7}
 80030b0:	b085      	sub	sp, #20
 80030b2:	af00      	add	r7, sp, #0
 80030b4:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80030b6:	2300      	movs	r3, #0
 80030b8:	60fb      	str	r3, [r7, #12]
 80030ba:	e048      	b.n	800314e <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6919      	ldr	r1, [r3, #16]
 80030c0:	68fa      	ldr	r2, [r7, #12]
 80030c2:	4613      	mov	r3, r2
 80030c4:	009b      	lsls	r3, r3, #2
 80030c6:	4413      	add	r3, r2
 80030c8:	00db      	lsls	r3, r3, #3
 80030ca:	440b      	add	r3, r1
 80030cc:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 80030ce:	68bb      	ldr	r3, [r7, #8]
 80030d0:	2200      	movs	r2, #0
 80030d2:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	2200      	movs	r2, #0
 80030d8:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 80030da:	68bb      	ldr	r3, [r7, #8]
 80030dc:	2200      	movs	r2, #0
 80030de:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	2200      	movs	r2, #0
 80030e4:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 80030e6:	68bb      	ldr	r3, [r7, #8]
 80030e8:	2200      	movs	r2, #0
 80030ea:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	2200      	movs	r2, #0
 80030f0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80030f2:	68bb      	ldr	r3, [r7, #8]
 80030f4:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80030f8:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	695b      	ldr	r3, [r3, #20]
 80030fe:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8003102:	68bb      	ldr	r3, [r7, #8]
 8003104:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800310e:	68bb      	ldr	r3, [r7, #8]
 8003110:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8003112:	68b9      	ldr	r1, [r7, #8]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	68fa      	ldr	r2, [r7, #12]
 8003118:	3212      	adds	r2, #18
 800311a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	2b02      	cmp	r3, #2
 8003122:	d80c      	bhi.n	800313e <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6919      	ldr	r1, [r3, #16]
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	1c5a      	adds	r2, r3, #1
 800312c:	4613      	mov	r3, r2
 800312e:	009b      	lsls	r3, r3, #2
 8003130:	4413      	add	r3, r2
 8003132:	00db      	lsls	r3, r3, #3
 8003134:	440b      	add	r3, r1
 8003136:	461a      	mov	r2, r3
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	60da      	str	r2, [r3, #12]
 800313c:	e004      	b.n	8003148 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	691b      	ldr	r3, [r3, #16]
 8003142:	461a      	mov	r2, r3
 8003144:	68bb      	ldr	r3, [r7, #8]
 8003146:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	3301      	adds	r3, #1
 800314c:	60fb      	str	r3, [r7, #12]
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	2b03      	cmp	r3, #3
 8003152:	d9b3      	bls.n	80030bc <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2200      	movs	r2, #0
 8003158:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2200      	movs	r2, #0
 800315e:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2200      	movs	r2, #0
 8003164:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2200      	movs	r2, #0
 800316a:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2200      	movs	r2, #0
 8003170:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	691a      	ldr	r2, [r3, #16]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800317e:	60da      	str	r2, [r3, #12]
}
 8003180:	bf00      	nop
 8003182:	3714      	adds	r7, #20
 8003184:	46bd      	mov	sp, r7
 8003186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318a:	4770      	bx	lr

0800318c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800318c:	b480      	push	{r7}
 800318e:	b089      	sub	sp, #36	@ 0x24
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
 8003194:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003196:	2300      	movs	r3, #0
 8003198:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800319a:	2300      	movs	r3, #0
 800319c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800319e:	2300      	movs	r3, #0
 80031a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80031a2:	2300      	movs	r3, #0
 80031a4:	61fb      	str	r3, [r7, #28]
 80031a6:	e177      	b.n	8003498 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80031a8:	2201      	movs	r2, #1
 80031aa:	69fb      	ldr	r3, [r7, #28]
 80031ac:	fa02 f303 	lsl.w	r3, r2, r3
 80031b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	697a      	ldr	r2, [r7, #20]
 80031b8:	4013      	ands	r3, r2
 80031ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80031bc:	693a      	ldr	r2, [r7, #16]
 80031be:	697b      	ldr	r3, [r7, #20]
 80031c0:	429a      	cmp	r2, r3
 80031c2:	f040 8166 	bne.w	8003492 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	f003 0303 	and.w	r3, r3, #3
 80031ce:	2b01      	cmp	r3, #1
 80031d0:	d005      	beq.n	80031de <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80031da:	2b02      	cmp	r3, #2
 80031dc:	d130      	bne.n	8003240 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	689b      	ldr	r3, [r3, #8]
 80031e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80031e4:	69fb      	ldr	r3, [r7, #28]
 80031e6:	005b      	lsls	r3, r3, #1
 80031e8:	2203      	movs	r2, #3
 80031ea:	fa02 f303 	lsl.w	r3, r2, r3
 80031ee:	43db      	mvns	r3, r3
 80031f0:	69ba      	ldr	r2, [r7, #24]
 80031f2:	4013      	ands	r3, r2
 80031f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	68da      	ldr	r2, [r3, #12]
 80031fa:	69fb      	ldr	r3, [r7, #28]
 80031fc:	005b      	lsls	r3, r3, #1
 80031fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003202:	69ba      	ldr	r2, [r7, #24]
 8003204:	4313      	orrs	r3, r2
 8003206:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	69ba      	ldr	r2, [r7, #24]
 800320c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003214:	2201      	movs	r2, #1
 8003216:	69fb      	ldr	r3, [r7, #28]
 8003218:	fa02 f303 	lsl.w	r3, r2, r3
 800321c:	43db      	mvns	r3, r3
 800321e:	69ba      	ldr	r2, [r7, #24]
 8003220:	4013      	ands	r3, r2
 8003222:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	091b      	lsrs	r3, r3, #4
 800322a:	f003 0201 	and.w	r2, r3, #1
 800322e:	69fb      	ldr	r3, [r7, #28]
 8003230:	fa02 f303 	lsl.w	r3, r2, r3
 8003234:	69ba      	ldr	r2, [r7, #24]
 8003236:	4313      	orrs	r3, r2
 8003238:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	69ba      	ldr	r2, [r7, #24]
 800323e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	f003 0303 	and.w	r3, r3, #3
 8003248:	2b03      	cmp	r3, #3
 800324a:	d017      	beq.n	800327c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	68db      	ldr	r3, [r3, #12]
 8003250:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003252:	69fb      	ldr	r3, [r7, #28]
 8003254:	005b      	lsls	r3, r3, #1
 8003256:	2203      	movs	r2, #3
 8003258:	fa02 f303 	lsl.w	r3, r2, r3
 800325c:	43db      	mvns	r3, r3
 800325e:	69ba      	ldr	r2, [r7, #24]
 8003260:	4013      	ands	r3, r2
 8003262:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	689a      	ldr	r2, [r3, #8]
 8003268:	69fb      	ldr	r3, [r7, #28]
 800326a:	005b      	lsls	r3, r3, #1
 800326c:	fa02 f303 	lsl.w	r3, r2, r3
 8003270:	69ba      	ldr	r2, [r7, #24]
 8003272:	4313      	orrs	r3, r2
 8003274:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	69ba      	ldr	r2, [r7, #24]
 800327a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	f003 0303 	and.w	r3, r3, #3
 8003284:	2b02      	cmp	r3, #2
 8003286:	d123      	bne.n	80032d0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003288:	69fb      	ldr	r3, [r7, #28]
 800328a:	08da      	lsrs	r2, r3, #3
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	3208      	adds	r2, #8
 8003290:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003294:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003296:	69fb      	ldr	r3, [r7, #28]
 8003298:	f003 0307 	and.w	r3, r3, #7
 800329c:	009b      	lsls	r3, r3, #2
 800329e:	220f      	movs	r2, #15
 80032a0:	fa02 f303 	lsl.w	r3, r2, r3
 80032a4:	43db      	mvns	r3, r3
 80032a6:	69ba      	ldr	r2, [r7, #24]
 80032a8:	4013      	ands	r3, r2
 80032aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	691a      	ldr	r2, [r3, #16]
 80032b0:	69fb      	ldr	r3, [r7, #28]
 80032b2:	f003 0307 	and.w	r3, r3, #7
 80032b6:	009b      	lsls	r3, r3, #2
 80032b8:	fa02 f303 	lsl.w	r3, r2, r3
 80032bc:	69ba      	ldr	r2, [r7, #24]
 80032be:	4313      	orrs	r3, r2
 80032c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80032c2:	69fb      	ldr	r3, [r7, #28]
 80032c4:	08da      	lsrs	r2, r3, #3
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	3208      	adds	r2, #8
 80032ca:	69b9      	ldr	r1, [r7, #24]
 80032cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80032d6:	69fb      	ldr	r3, [r7, #28]
 80032d8:	005b      	lsls	r3, r3, #1
 80032da:	2203      	movs	r2, #3
 80032dc:	fa02 f303 	lsl.w	r3, r2, r3
 80032e0:	43db      	mvns	r3, r3
 80032e2:	69ba      	ldr	r2, [r7, #24]
 80032e4:	4013      	ands	r3, r2
 80032e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	f003 0203 	and.w	r2, r3, #3
 80032f0:	69fb      	ldr	r3, [r7, #28]
 80032f2:	005b      	lsls	r3, r3, #1
 80032f4:	fa02 f303 	lsl.w	r3, r2, r3
 80032f8:	69ba      	ldr	r2, [r7, #24]
 80032fa:	4313      	orrs	r3, r2
 80032fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	69ba      	ldr	r2, [r7, #24]
 8003302:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800330c:	2b00      	cmp	r3, #0
 800330e:	f000 80c0 	beq.w	8003492 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003312:	2300      	movs	r3, #0
 8003314:	60fb      	str	r3, [r7, #12]
 8003316:	4b66      	ldr	r3, [pc, #408]	@ (80034b0 <HAL_GPIO_Init+0x324>)
 8003318:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800331a:	4a65      	ldr	r2, [pc, #404]	@ (80034b0 <HAL_GPIO_Init+0x324>)
 800331c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003320:	6453      	str	r3, [r2, #68]	@ 0x44
 8003322:	4b63      	ldr	r3, [pc, #396]	@ (80034b0 <HAL_GPIO_Init+0x324>)
 8003324:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003326:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800332a:	60fb      	str	r3, [r7, #12]
 800332c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800332e:	4a61      	ldr	r2, [pc, #388]	@ (80034b4 <HAL_GPIO_Init+0x328>)
 8003330:	69fb      	ldr	r3, [r7, #28]
 8003332:	089b      	lsrs	r3, r3, #2
 8003334:	3302      	adds	r3, #2
 8003336:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800333a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800333c:	69fb      	ldr	r3, [r7, #28]
 800333e:	f003 0303 	and.w	r3, r3, #3
 8003342:	009b      	lsls	r3, r3, #2
 8003344:	220f      	movs	r2, #15
 8003346:	fa02 f303 	lsl.w	r3, r2, r3
 800334a:	43db      	mvns	r3, r3
 800334c:	69ba      	ldr	r2, [r7, #24]
 800334e:	4013      	ands	r3, r2
 8003350:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	4a58      	ldr	r2, [pc, #352]	@ (80034b8 <HAL_GPIO_Init+0x32c>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d037      	beq.n	80033ca <HAL_GPIO_Init+0x23e>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	4a57      	ldr	r2, [pc, #348]	@ (80034bc <HAL_GPIO_Init+0x330>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d031      	beq.n	80033c6 <HAL_GPIO_Init+0x23a>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	4a56      	ldr	r2, [pc, #344]	@ (80034c0 <HAL_GPIO_Init+0x334>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d02b      	beq.n	80033c2 <HAL_GPIO_Init+0x236>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	4a55      	ldr	r2, [pc, #340]	@ (80034c4 <HAL_GPIO_Init+0x338>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d025      	beq.n	80033be <HAL_GPIO_Init+0x232>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	4a54      	ldr	r2, [pc, #336]	@ (80034c8 <HAL_GPIO_Init+0x33c>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d01f      	beq.n	80033ba <HAL_GPIO_Init+0x22e>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	4a53      	ldr	r2, [pc, #332]	@ (80034cc <HAL_GPIO_Init+0x340>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d019      	beq.n	80033b6 <HAL_GPIO_Init+0x22a>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	4a52      	ldr	r2, [pc, #328]	@ (80034d0 <HAL_GPIO_Init+0x344>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d013      	beq.n	80033b2 <HAL_GPIO_Init+0x226>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	4a51      	ldr	r2, [pc, #324]	@ (80034d4 <HAL_GPIO_Init+0x348>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d00d      	beq.n	80033ae <HAL_GPIO_Init+0x222>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	4a50      	ldr	r2, [pc, #320]	@ (80034d8 <HAL_GPIO_Init+0x34c>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d007      	beq.n	80033aa <HAL_GPIO_Init+0x21e>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	4a4f      	ldr	r2, [pc, #316]	@ (80034dc <HAL_GPIO_Init+0x350>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d101      	bne.n	80033a6 <HAL_GPIO_Init+0x21a>
 80033a2:	2309      	movs	r3, #9
 80033a4:	e012      	b.n	80033cc <HAL_GPIO_Init+0x240>
 80033a6:	230a      	movs	r3, #10
 80033a8:	e010      	b.n	80033cc <HAL_GPIO_Init+0x240>
 80033aa:	2308      	movs	r3, #8
 80033ac:	e00e      	b.n	80033cc <HAL_GPIO_Init+0x240>
 80033ae:	2307      	movs	r3, #7
 80033b0:	e00c      	b.n	80033cc <HAL_GPIO_Init+0x240>
 80033b2:	2306      	movs	r3, #6
 80033b4:	e00a      	b.n	80033cc <HAL_GPIO_Init+0x240>
 80033b6:	2305      	movs	r3, #5
 80033b8:	e008      	b.n	80033cc <HAL_GPIO_Init+0x240>
 80033ba:	2304      	movs	r3, #4
 80033bc:	e006      	b.n	80033cc <HAL_GPIO_Init+0x240>
 80033be:	2303      	movs	r3, #3
 80033c0:	e004      	b.n	80033cc <HAL_GPIO_Init+0x240>
 80033c2:	2302      	movs	r3, #2
 80033c4:	e002      	b.n	80033cc <HAL_GPIO_Init+0x240>
 80033c6:	2301      	movs	r3, #1
 80033c8:	e000      	b.n	80033cc <HAL_GPIO_Init+0x240>
 80033ca:	2300      	movs	r3, #0
 80033cc:	69fa      	ldr	r2, [r7, #28]
 80033ce:	f002 0203 	and.w	r2, r2, #3
 80033d2:	0092      	lsls	r2, r2, #2
 80033d4:	4093      	lsls	r3, r2
 80033d6:	69ba      	ldr	r2, [r7, #24]
 80033d8:	4313      	orrs	r3, r2
 80033da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80033dc:	4935      	ldr	r1, [pc, #212]	@ (80034b4 <HAL_GPIO_Init+0x328>)
 80033de:	69fb      	ldr	r3, [r7, #28]
 80033e0:	089b      	lsrs	r3, r3, #2
 80033e2:	3302      	adds	r3, #2
 80033e4:	69ba      	ldr	r2, [r7, #24]
 80033e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80033ea:	4b3d      	ldr	r3, [pc, #244]	@ (80034e0 <HAL_GPIO_Init+0x354>)
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	43db      	mvns	r3, r3
 80033f4:	69ba      	ldr	r2, [r7, #24]
 80033f6:	4013      	ands	r3, r2
 80033f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003402:	2b00      	cmp	r3, #0
 8003404:	d003      	beq.n	800340e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003406:	69ba      	ldr	r2, [r7, #24]
 8003408:	693b      	ldr	r3, [r7, #16]
 800340a:	4313      	orrs	r3, r2
 800340c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800340e:	4a34      	ldr	r2, [pc, #208]	@ (80034e0 <HAL_GPIO_Init+0x354>)
 8003410:	69bb      	ldr	r3, [r7, #24]
 8003412:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003414:	4b32      	ldr	r3, [pc, #200]	@ (80034e0 <HAL_GPIO_Init+0x354>)
 8003416:	68db      	ldr	r3, [r3, #12]
 8003418:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	43db      	mvns	r3, r3
 800341e:	69ba      	ldr	r2, [r7, #24]
 8003420:	4013      	ands	r3, r2
 8003422:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800342c:	2b00      	cmp	r3, #0
 800342e:	d003      	beq.n	8003438 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003430:	69ba      	ldr	r2, [r7, #24]
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	4313      	orrs	r3, r2
 8003436:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003438:	4a29      	ldr	r2, [pc, #164]	@ (80034e0 <HAL_GPIO_Init+0x354>)
 800343a:	69bb      	ldr	r3, [r7, #24]
 800343c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800343e:	4b28      	ldr	r3, [pc, #160]	@ (80034e0 <HAL_GPIO_Init+0x354>)
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	43db      	mvns	r3, r3
 8003448:	69ba      	ldr	r2, [r7, #24]
 800344a:	4013      	ands	r3, r2
 800344c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003456:	2b00      	cmp	r3, #0
 8003458:	d003      	beq.n	8003462 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800345a:	69ba      	ldr	r2, [r7, #24]
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	4313      	orrs	r3, r2
 8003460:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003462:	4a1f      	ldr	r2, [pc, #124]	@ (80034e0 <HAL_GPIO_Init+0x354>)
 8003464:	69bb      	ldr	r3, [r7, #24]
 8003466:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003468:	4b1d      	ldr	r3, [pc, #116]	@ (80034e0 <HAL_GPIO_Init+0x354>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	43db      	mvns	r3, r3
 8003472:	69ba      	ldr	r2, [r7, #24]
 8003474:	4013      	ands	r3, r2
 8003476:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003480:	2b00      	cmp	r3, #0
 8003482:	d003      	beq.n	800348c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003484:	69ba      	ldr	r2, [r7, #24]
 8003486:	693b      	ldr	r3, [r7, #16]
 8003488:	4313      	orrs	r3, r2
 800348a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800348c:	4a14      	ldr	r2, [pc, #80]	@ (80034e0 <HAL_GPIO_Init+0x354>)
 800348e:	69bb      	ldr	r3, [r7, #24]
 8003490:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003492:	69fb      	ldr	r3, [r7, #28]
 8003494:	3301      	adds	r3, #1
 8003496:	61fb      	str	r3, [r7, #28]
 8003498:	69fb      	ldr	r3, [r7, #28]
 800349a:	2b0f      	cmp	r3, #15
 800349c:	f67f ae84 	bls.w	80031a8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80034a0:	bf00      	nop
 80034a2:	bf00      	nop
 80034a4:	3724      	adds	r7, #36	@ 0x24
 80034a6:	46bd      	mov	sp, r7
 80034a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ac:	4770      	bx	lr
 80034ae:	bf00      	nop
 80034b0:	40023800 	.word	0x40023800
 80034b4:	40013800 	.word	0x40013800
 80034b8:	40020000 	.word	0x40020000
 80034bc:	40020400 	.word	0x40020400
 80034c0:	40020800 	.word	0x40020800
 80034c4:	40020c00 	.word	0x40020c00
 80034c8:	40021000 	.word	0x40021000
 80034cc:	40021400 	.word	0x40021400
 80034d0:	40021800 	.word	0x40021800
 80034d4:	40021c00 	.word	0x40021c00
 80034d8:	40022000 	.word	0x40022000
 80034dc:	40022400 	.word	0x40022400
 80034e0:	40013c00 	.word	0x40013c00

080034e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80034e4:	b480      	push	{r7}
 80034e6:	b083      	sub	sp, #12
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
 80034ec:	460b      	mov	r3, r1
 80034ee:	807b      	strh	r3, [r7, #2]
 80034f0:	4613      	mov	r3, r2
 80034f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80034f4:	787b      	ldrb	r3, [r7, #1]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d003      	beq.n	8003502 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80034fa:	887a      	ldrh	r2, [r7, #2]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003500:	e003      	b.n	800350a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003502:	887b      	ldrh	r3, [r7, #2]
 8003504:	041a      	lsls	r2, r3, #16
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	619a      	str	r2, [r3, #24]
}
 800350a:	bf00      	nop
 800350c:	370c      	adds	r7, #12
 800350e:	46bd      	mov	sp, r7
 8003510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003514:	4770      	bx	lr
	...

08003518 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b082      	sub	sp, #8
 800351c:	af00      	add	r7, sp, #0
 800351e:	4603      	mov	r3, r0
 8003520:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003522:	4b08      	ldr	r3, [pc, #32]	@ (8003544 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003524:	695a      	ldr	r2, [r3, #20]
 8003526:	88fb      	ldrh	r3, [r7, #6]
 8003528:	4013      	ands	r3, r2
 800352a:	2b00      	cmp	r3, #0
 800352c:	d006      	beq.n	800353c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800352e:	4a05      	ldr	r2, [pc, #20]	@ (8003544 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003530:	88fb      	ldrh	r3, [r7, #6]
 8003532:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003534:	88fb      	ldrh	r3, [r7, #6]
 8003536:	4618      	mov	r0, r3
 8003538:	f7fd fdc4 	bl	80010c4 <HAL_GPIO_EXTI_Callback>
  }
}
 800353c:	bf00      	nop
 800353e:	3708      	adds	r7, #8
 8003540:	46bd      	mov	sp, r7
 8003542:	bd80      	pop	{r7, pc}
 8003544:	40013c00 	.word	0x40013c00

08003548 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b086      	sub	sp, #24
 800354c:	af02      	add	r7, sp, #8
 800354e:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d101      	bne.n	800355a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003556:	2301      	movs	r3, #1
 8003558:	e101      	b.n	800375e <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8003566:	b2db      	uxtb	r3, r3
 8003568:	2b00      	cmp	r3, #0
 800356a:	d106      	bne.n	800357a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2200      	movs	r2, #0
 8003570:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003574:	6878      	ldr	r0, [r7, #4]
 8003576:	f007 fa2d 	bl	800a9d4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2203      	movs	r2, #3
 800357e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8003582:	68bb      	ldr	r3, [r7, #8]
 8003584:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003588:	d102      	bne.n	8003590 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2200      	movs	r2, #0
 800358e:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4618      	mov	r0, r3
 8003596:	f003 fdfc 	bl	8007192 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6818      	ldr	r0, [r3, #0]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	7c1a      	ldrb	r2, [r3, #16]
 80035a2:	f88d 2000 	strb.w	r2, [sp]
 80035a6:	3304      	adds	r3, #4
 80035a8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80035aa:	f003 fcdb 	bl	8006f64 <USB_CoreInit>
 80035ae:	4603      	mov	r3, r0
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d005      	beq.n	80035c0 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2202      	movs	r2, #2
 80035b8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80035bc:	2301      	movs	r3, #1
 80035be:	e0ce      	b.n	800375e <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	2100      	movs	r1, #0
 80035c6:	4618      	mov	r0, r3
 80035c8:	f003 fdf4 	bl	80071b4 <USB_SetCurrentMode>
 80035cc:	4603      	mov	r3, r0
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d005      	beq.n	80035de <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2202      	movs	r2, #2
 80035d6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80035da:	2301      	movs	r3, #1
 80035dc:	e0bf      	b.n	800375e <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035de:	2300      	movs	r3, #0
 80035e0:	73fb      	strb	r3, [r7, #15]
 80035e2:	e04a      	b.n	800367a <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80035e4:	7bfa      	ldrb	r2, [r7, #15]
 80035e6:	6879      	ldr	r1, [r7, #4]
 80035e8:	4613      	mov	r3, r2
 80035ea:	00db      	lsls	r3, r3, #3
 80035ec:	4413      	add	r3, r2
 80035ee:	009b      	lsls	r3, r3, #2
 80035f0:	440b      	add	r3, r1
 80035f2:	3315      	adds	r3, #21
 80035f4:	2201      	movs	r2, #1
 80035f6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80035f8:	7bfa      	ldrb	r2, [r7, #15]
 80035fa:	6879      	ldr	r1, [r7, #4]
 80035fc:	4613      	mov	r3, r2
 80035fe:	00db      	lsls	r3, r3, #3
 8003600:	4413      	add	r3, r2
 8003602:	009b      	lsls	r3, r3, #2
 8003604:	440b      	add	r3, r1
 8003606:	3314      	adds	r3, #20
 8003608:	7bfa      	ldrb	r2, [r7, #15]
 800360a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800360c:	7bfa      	ldrb	r2, [r7, #15]
 800360e:	7bfb      	ldrb	r3, [r7, #15]
 8003610:	b298      	uxth	r0, r3
 8003612:	6879      	ldr	r1, [r7, #4]
 8003614:	4613      	mov	r3, r2
 8003616:	00db      	lsls	r3, r3, #3
 8003618:	4413      	add	r3, r2
 800361a:	009b      	lsls	r3, r3, #2
 800361c:	440b      	add	r3, r1
 800361e:	332e      	adds	r3, #46	@ 0x2e
 8003620:	4602      	mov	r2, r0
 8003622:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003624:	7bfa      	ldrb	r2, [r7, #15]
 8003626:	6879      	ldr	r1, [r7, #4]
 8003628:	4613      	mov	r3, r2
 800362a:	00db      	lsls	r3, r3, #3
 800362c:	4413      	add	r3, r2
 800362e:	009b      	lsls	r3, r3, #2
 8003630:	440b      	add	r3, r1
 8003632:	3318      	adds	r3, #24
 8003634:	2200      	movs	r2, #0
 8003636:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003638:	7bfa      	ldrb	r2, [r7, #15]
 800363a:	6879      	ldr	r1, [r7, #4]
 800363c:	4613      	mov	r3, r2
 800363e:	00db      	lsls	r3, r3, #3
 8003640:	4413      	add	r3, r2
 8003642:	009b      	lsls	r3, r3, #2
 8003644:	440b      	add	r3, r1
 8003646:	331c      	adds	r3, #28
 8003648:	2200      	movs	r2, #0
 800364a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800364c:	7bfa      	ldrb	r2, [r7, #15]
 800364e:	6879      	ldr	r1, [r7, #4]
 8003650:	4613      	mov	r3, r2
 8003652:	00db      	lsls	r3, r3, #3
 8003654:	4413      	add	r3, r2
 8003656:	009b      	lsls	r3, r3, #2
 8003658:	440b      	add	r3, r1
 800365a:	3320      	adds	r3, #32
 800365c:	2200      	movs	r2, #0
 800365e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003660:	7bfa      	ldrb	r2, [r7, #15]
 8003662:	6879      	ldr	r1, [r7, #4]
 8003664:	4613      	mov	r3, r2
 8003666:	00db      	lsls	r3, r3, #3
 8003668:	4413      	add	r3, r2
 800366a:	009b      	lsls	r3, r3, #2
 800366c:	440b      	add	r3, r1
 800366e:	3324      	adds	r3, #36	@ 0x24
 8003670:	2200      	movs	r2, #0
 8003672:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003674:	7bfb      	ldrb	r3, [r7, #15]
 8003676:	3301      	adds	r3, #1
 8003678:	73fb      	strb	r3, [r7, #15]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	791b      	ldrb	r3, [r3, #4]
 800367e:	7bfa      	ldrb	r2, [r7, #15]
 8003680:	429a      	cmp	r2, r3
 8003682:	d3af      	bcc.n	80035e4 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003684:	2300      	movs	r3, #0
 8003686:	73fb      	strb	r3, [r7, #15]
 8003688:	e044      	b.n	8003714 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800368a:	7bfa      	ldrb	r2, [r7, #15]
 800368c:	6879      	ldr	r1, [r7, #4]
 800368e:	4613      	mov	r3, r2
 8003690:	00db      	lsls	r3, r3, #3
 8003692:	4413      	add	r3, r2
 8003694:	009b      	lsls	r3, r3, #2
 8003696:	440b      	add	r3, r1
 8003698:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800369c:	2200      	movs	r2, #0
 800369e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80036a0:	7bfa      	ldrb	r2, [r7, #15]
 80036a2:	6879      	ldr	r1, [r7, #4]
 80036a4:	4613      	mov	r3, r2
 80036a6:	00db      	lsls	r3, r3, #3
 80036a8:	4413      	add	r3, r2
 80036aa:	009b      	lsls	r3, r3, #2
 80036ac:	440b      	add	r3, r1
 80036ae:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80036b2:	7bfa      	ldrb	r2, [r7, #15]
 80036b4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80036b6:	7bfa      	ldrb	r2, [r7, #15]
 80036b8:	6879      	ldr	r1, [r7, #4]
 80036ba:	4613      	mov	r3, r2
 80036bc:	00db      	lsls	r3, r3, #3
 80036be:	4413      	add	r3, r2
 80036c0:	009b      	lsls	r3, r3, #2
 80036c2:	440b      	add	r3, r1
 80036c4:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80036c8:	2200      	movs	r2, #0
 80036ca:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80036cc:	7bfa      	ldrb	r2, [r7, #15]
 80036ce:	6879      	ldr	r1, [r7, #4]
 80036d0:	4613      	mov	r3, r2
 80036d2:	00db      	lsls	r3, r3, #3
 80036d4:	4413      	add	r3, r2
 80036d6:	009b      	lsls	r3, r3, #2
 80036d8:	440b      	add	r3, r1
 80036da:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80036de:	2200      	movs	r2, #0
 80036e0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80036e2:	7bfa      	ldrb	r2, [r7, #15]
 80036e4:	6879      	ldr	r1, [r7, #4]
 80036e6:	4613      	mov	r3, r2
 80036e8:	00db      	lsls	r3, r3, #3
 80036ea:	4413      	add	r3, r2
 80036ec:	009b      	lsls	r3, r3, #2
 80036ee:	440b      	add	r3, r1
 80036f0:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80036f4:	2200      	movs	r2, #0
 80036f6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80036f8:	7bfa      	ldrb	r2, [r7, #15]
 80036fa:	6879      	ldr	r1, [r7, #4]
 80036fc:	4613      	mov	r3, r2
 80036fe:	00db      	lsls	r3, r3, #3
 8003700:	4413      	add	r3, r2
 8003702:	009b      	lsls	r3, r3, #2
 8003704:	440b      	add	r3, r1
 8003706:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800370a:	2200      	movs	r2, #0
 800370c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800370e:	7bfb      	ldrb	r3, [r7, #15]
 8003710:	3301      	adds	r3, #1
 8003712:	73fb      	strb	r3, [r7, #15]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	791b      	ldrb	r3, [r3, #4]
 8003718:	7bfa      	ldrb	r2, [r7, #15]
 800371a:	429a      	cmp	r2, r3
 800371c:	d3b5      	bcc.n	800368a <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6818      	ldr	r0, [r3, #0]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	7c1a      	ldrb	r2, [r3, #16]
 8003726:	f88d 2000 	strb.w	r2, [sp]
 800372a:	3304      	adds	r3, #4
 800372c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800372e:	f003 fd8d 	bl	800724c <USB_DevInit>
 8003732:	4603      	mov	r3, r0
 8003734:	2b00      	cmp	r3, #0
 8003736:	d005      	beq.n	8003744 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2202      	movs	r2, #2
 800373c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003740:	2301      	movs	r3, #1
 8003742:	e00c      	b.n	800375e <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2200      	movs	r2, #0
 8003748:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2201      	movs	r2, #1
 800374e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4618      	mov	r0, r3
 8003758:	f004 fdd7 	bl	800830a <USB_DevDisconnect>

  return HAL_OK;
 800375c:	2300      	movs	r3, #0
}
 800375e:	4618      	mov	r0, r3
 8003760:	3710      	adds	r7, #16
 8003762:	46bd      	mov	sp, r7
 8003764:	bd80      	pop	{r7, pc}

08003766 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003766:	b580      	push	{r7, lr}
 8003768:	b084      	sub	sp, #16
 800376a:	af00      	add	r7, sp, #0
 800376c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800377a:	2b01      	cmp	r3, #1
 800377c:	d101      	bne.n	8003782 <HAL_PCD_Start+0x1c>
 800377e:	2302      	movs	r3, #2
 8003780:	e022      	b.n	80037c8 <HAL_PCD_Start+0x62>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2201      	movs	r2, #1
 8003786:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	68db      	ldr	r3, [r3, #12]
 800378e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003792:	2b00      	cmp	r3, #0
 8003794:	d009      	beq.n	80037aa <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800379a:	2b01      	cmp	r3, #1
 800379c:	d105      	bne.n	80037aa <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037a2:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4618      	mov	r0, r3
 80037b0:	f003 fcde 	bl	8007170 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4618      	mov	r0, r3
 80037ba:	f004 fd85 	bl	80082c8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2200      	movs	r2, #0
 80037c2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80037c6:	2300      	movs	r3, #0
}
 80037c8:	4618      	mov	r0, r3
 80037ca:	3710      	adds	r7, #16
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bd80      	pop	{r7, pc}

080037d0 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80037d0:	b590      	push	{r4, r7, lr}
 80037d2:	b08d      	sub	sp, #52	@ 0x34
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80037de:	6a3b      	ldr	r3, [r7, #32]
 80037e0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4618      	mov	r0, r3
 80037e8:	f004 fe43 	bl	8008472 <USB_GetMode>
 80037ec:	4603      	mov	r3, r0
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	f040 848c 	bne.w	800410c <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4618      	mov	r0, r3
 80037fa:	f004 fda7 	bl	800834c <USB_ReadInterrupts>
 80037fe:	4603      	mov	r3, r0
 8003800:	2b00      	cmp	r3, #0
 8003802:	f000 8482 	beq.w	800410a <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003806:	69fb      	ldr	r3, [r7, #28]
 8003808:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800380c:	689b      	ldr	r3, [r3, #8]
 800380e:	0a1b      	lsrs	r3, r3, #8
 8003810:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4618      	mov	r0, r3
 8003820:	f004 fd94 	bl	800834c <USB_ReadInterrupts>
 8003824:	4603      	mov	r3, r0
 8003826:	f003 0302 	and.w	r3, r3, #2
 800382a:	2b02      	cmp	r3, #2
 800382c:	d107      	bne.n	800383e <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	695a      	ldr	r2, [r3, #20]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f002 0202 	and.w	r2, r2, #2
 800383c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4618      	mov	r0, r3
 8003844:	f004 fd82 	bl	800834c <USB_ReadInterrupts>
 8003848:	4603      	mov	r3, r0
 800384a:	f003 0310 	and.w	r3, r3, #16
 800384e:	2b10      	cmp	r3, #16
 8003850:	d161      	bne.n	8003916 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	699a      	ldr	r2, [r3, #24]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f022 0210 	bic.w	r2, r2, #16
 8003860:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003862:	6a3b      	ldr	r3, [r7, #32]
 8003864:	6a1b      	ldr	r3, [r3, #32]
 8003866:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003868:	69bb      	ldr	r3, [r7, #24]
 800386a:	f003 020f 	and.w	r2, r3, #15
 800386e:	4613      	mov	r3, r2
 8003870:	00db      	lsls	r3, r3, #3
 8003872:	4413      	add	r3, r2
 8003874:	009b      	lsls	r3, r3, #2
 8003876:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800387a:	687a      	ldr	r2, [r7, #4]
 800387c:	4413      	add	r3, r2
 800387e:	3304      	adds	r3, #4
 8003880:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003882:	69bb      	ldr	r3, [r7, #24]
 8003884:	0c5b      	lsrs	r3, r3, #17
 8003886:	f003 030f 	and.w	r3, r3, #15
 800388a:	2b02      	cmp	r3, #2
 800388c:	d124      	bne.n	80038d8 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800388e:	69ba      	ldr	r2, [r7, #24]
 8003890:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8003894:	4013      	ands	r3, r2
 8003896:	2b00      	cmp	r3, #0
 8003898:	d035      	beq.n	8003906 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800389e:	69bb      	ldr	r3, [r7, #24]
 80038a0:	091b      	lsrs	r3, r3, #4
 80038a2:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80038a4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80038a8:	b29b      	uxth	r3, r3
 80038aa:	461a      	mov	r2, r3
 80038ac:	6a38      	ldr	r0, [r7, #32]
 80038ae:	f004 fbb9 	bl	8008024 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80038b2:	697b      	ldr	r3, [r7, #20]
 80038b4:	68da      	ldr	r2, [r3, #12]
 80038b6:	69bb      	ldr	r3, [r7, #24]
 80038b8:	091b      	lsrs	r3, r3, #4
 80038ba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80038be:	441a      	add	r2, r3
 80038c0:	697b      	ldr	r3, [r7, #20]
 80038c2:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80038c4:	697b      	ldr	r3, [r7, #20]
 80038c6:	695a      	ldr	r2, [r3, #20]
 80038c8:	69bb      	ldr	r3, [r7, #24]
 80038ca:	091b      	lsrs	r3, r3, #4
 80038cc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80038d0:	441a      	add	r2, r3
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	615a      	str	r2, [r3, #20]
 80038d6:	e016      	b.n	8003906 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80038d8:	69bb      	ldr	r3, [r7, #24]
 80038da:	0c5b      	lsrs	r3, r3, #17
 80038dc:	f003 030f 	and.w	r3, r3, #15
 80038e0:	2b06      	cmp	r3, #6
 80038e2:	d110      	bne.n	8003906 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80038ea:	2208      	movs	r2, #8
 80038ec:	4619      	mov	r1, r3
 80038ee:	6a38      	ldr	r0, [r7, #32]
 80038f0:	f004 fb98 	bl	8008024 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	695a      	ldr	r2, [r3, #20]
 80038f8:	69bb      	ldr	r3, [r7, #24]
 80038fa:	091b      	lsrs	r3, r3, #4
 80038fc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003900:	441a      	add	r2, r3
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	699a      	ldr	r2, [r3, #24]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f042 0210 	orr.w	r2, r2, #16
 8003914:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4618      	mov	r0, r3
 800391c:	f004 fd16 	bl	800834c <USB_ReadInterrupts>
 8003920:	4603      	mov	r3, r0
 8003922:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003926:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800392a:	f040 80a7 	bne.w	8003a7c <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800392e:	2300      	movs	r3, #0
 8003930:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4618      	mov	r0, r3
 8003938:	f004 fd1b 	bl	8008372 <USB_ReadDevAllOutEpInterrupt>
 800393c:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800393e:	e099      	b.n	8003a74 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003940:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003942:	f003 0301 	and.w	r3, r3, #1
 8003946:	2b00      	cmp	r3, #0
 8003948:	f000 808e 	beq.w	8003a68 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003952:	b2d2      	uxtb	r2, r2
 8003954:	4611      	mov	r1, r2
 8003956:	4618      	mov	r0, r3
 8003958:	f004 fd3f 	bl	80083da <USB_ReadDevOutEPInterrupt>
 800395c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	f003 0301 	and.w	r3, r3, #1
 8003964:	2b00      	cmp	r3, #0
 8003966:	d00c      	beq.n	8003982 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003968:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800396a:	015a      	lsls	r2, r3, #5
 800396c:	69fb      	ldr	r3, [r7, #28]
 800396e:	4413      	add	r3, r2
 8003970:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003974:	461a      	mov	r2, r3
 8003976:	2301      	movs	r3, #1
 8003978:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800397a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800397c:	6878      	ldr	r0, [r7, #4]
 800397e:	f000 fea3 	bl	80046c8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003982:	693b      	ldr	r3, [r7, #16]
 8003984:	f003 0308 	and.w	r3, r3, #8
 8003988:	2b00      	cmp	r3, #0
 800398a:	d00c      	beq.n	80039a6 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800398c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800398e:	015a      	lsls	r2, r3, #5
 8003990:	69fb      	ldr	r3, [r7, #28]
 8003992:	4413      	add	r3, r2
 8003994:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003998:	461a      	mov	r2, r3
 800399a:	2308      	movs	r3, #8
 800399c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800399e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80039a0:	6878      	ldr	r0, [r7, #4]
 80039a2:	f000 ff79 	bl	8004898 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80039a6:	693b      	ldr	r3, [r7, #16]
 80039a8:	f003 0310 	and.w	r3, r3, #16
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d008      	beq.n	80039c2 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80039b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039b2:	015a      	lsls	r2, r3, #5
 80039b4:	69fb      	ldr	r3, [r7, #28]
 80039b6:	4413      	add	r3, r2
 80039b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80039bc:	461a      	mov	r2, r3
 80039be:	2310      	movs	r3, #16
 80039c0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80039c2:	693b      	ldr	r3, [r7, #16]
 80039c4:	f003 0302 	and.w	r3, r3, #2
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d030      	beq.n	8003a2e <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80039cc:	6a3b      	ldr	r3, [r7, #32]
 80039ce:	695b      	ldr	r3, [r3, #20]
 80039d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039d4:	2b80      	cmp	r3, #128	@ 0x80
 80039d6:	d109      	bne.n	80039ec <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80039d8:	69fb      	ldr	r3, [r7, #28]
 80039da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	69fa      	ldr	r2, [r7, #28]
 80039e2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80039e6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80039ea:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80039ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039ee:	4613      	mov	r3, r2
 80039f0:	00db      	lsls	r3, r3, #3
 80039f2:	4413      	add	r3, r2
 80039f4:	009b      	lsls	r3, r3, #2
 80039f6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80039fa:	687a      	ldr	r2, [r7, #4]
 80039fc:	4413      	add	r3, r2
 80039fe:	3304      	adds	r3, #4
 8003a00:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003a02:	697b      	ldr	r3, [r7, #20]
 8003a04:	78db      	ldrb	r3, [r3, #3]
 8003a06:	2b01      	cmp	r3, #1
 8003a08:	d108      	bne.n	8003a1c <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003a0a:	697b      	ldr	r3, [r7, #20]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003a10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a12:	b2db      	uxtb	r3, r3
 8003a14:	4619      	mov	r1, r3
 8003a16:	6878      	ldr	r0, [r7, #4]
 8003a18:	f007 f8f0 	bl	800abfc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003a1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a1e:	015a      	lsls	r2, r3, #5
 8003a20:	69fb      	ldr	r3, [r7, #28]
 8003a22:	4413      	add	r3, r2
 8003a24:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a28:	461a      	mov	r2, r3
 8003a2a:	2302      	movs	r3, #2
 8003a2c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	f003 0320 	and.w	r3, r3, #32
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d008      	beq.n	8003a4a <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003a38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a3a:	015a      	lsls	r2, r3, #5
 8003a3c:	69fb      	ldr	r3, [r7, #28]
 8003a3e:	4413      	add	r3, r2
 8003a40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a44:	461a      	mov	r2, r3
 8003a46:	2320      	movs	r3, #32
 8003a48:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003a4a:	693b      	ldr	r3, [r7, #16]
 8003a4c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d009      	beq.n	8003a68 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003a54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a56:	015a      	lsls	r2, r3, #5
 8003a58:	69fb      	ldr	r3, [r7, #28]
 8003a5a:	4413      	add	r3, r2
 8003a5c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a60:	461a      	mov	r2, r3
 8003a62:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003a66:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003a68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a6a:	3301      	adds	r3, #1
 8003a6c:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003a6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a70:	085b      	lsrs	r3, r3, #1
 8003a72:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003a74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	f47f af62 	bne.w	8003940 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4618      	mov	r0, r3
 8003a82:	f004 fc63 	bl	800834c <USB_ReadInterrupts>
 8003a86:	4603      	mov	r3, r0
 8003a88:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003a8c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003a90:	f040 80db 	bne.w	8003c4a <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4618      	mov	r0, r3
 8003a9a:	f004 fc84 	bl	80083a6 <USB_ReadDevAllInEpInterrupt>
 8003a9e:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8003aa4:	e0cd      	b.n	8003c42 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003aa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003aa8:	f003 0301 	and.w	r3, r3, #1
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	f000 80c2 	beq.w	8003c36 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ab8:	b2d2      	uxtb	r2, r2
 8003aba:	4611      	mov	r1, r2
 8003abc:	4618      	mov	r0, r3
 8003abe:	f004 fcaa 	bl	8008416 <USB_ReadDevInEPInterrupt>
 8003ac2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003ac4:	693b      	ldr	r3, [r7, #16]
 8003ac6:	f003 0301 	and.w	r3, r3, #1
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d057      	beq.n	8003b7e <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003ace:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ad0:	f003 030f 	and.w	r3, r3, #15
 8003ad4:	2201      	movs	r2, #1
 8003ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8003ada:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003adc:	69fb      	ldr	r3, [r7, #28]
 8003ade:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003ae2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	43db      	mvns	r3, r3
 8003ae8:	69f9      	ldr	r1, [r7, #28]
 8003aea:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003aee:	4013      	ands	r3, r2
 8003af0:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003af2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003af4:	015a      	lsls	r2, r3, #5
 8003af6:	69fb      	ldr	r3, [r7, #28]
 8003af8:	4413      	add	r3, r2
 8003afa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003afe:	461a      	mov	r2, r3
 8003b00:	2301      	movs	r3, #1
 8003b02:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	799b      	ldrb	r3, [r3, #6]
 8003b08:	2b01      	cmp	r3, #1
 8003b0a:	d132      	bne.n	8003b72 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003b0c:	6879      	ldr	r1, [r7, #4]
 8003b0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b10:	4613      	mov	r3, r2
 8003b12:	00db      	lsls	r3, r3, #3
 8003b14:	4413      	add	r3, r2
 8003b16:	009b      	lsls	r3, r3, #2
 8003b18:	440b      	add	r3, r1
 8003b1a:	3320      	adds	r3, #32
 8003b1c:	6819      	ldr	r1, [r3, #0]
 8003b1e:	6878      	ldr	r0, [r7, #4]
 8003b20:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b22:	4613      	mov	r3, r2
 8003b24:	00db      	lsls	r3, r3, #3
 8003b26:	4413      	add	r3, r2
 8003b28:	009b      	lsls	r3, r3, #2
 8003b2a:	4403      	add	r3, r0
 8003b2c:	331c      	adds	r3, #28
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4419      	add	r1, r3
 8003b32:	6878      	ldr	r0, [r7, #4]
 8003b34:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b36:	4613      	mov	r3, r2
 8003b38:	00db      	lsls	r3, r3, #3
 8003b3a:	4413      	add	r3, r2
 8003b3c:	009b      	lsls	r3, r3, #2
 8003b3e:	4403      	add	r3, r0
 8003b40:	3320      	adds	r3, #32
 8003b42:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003b44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d113      	bne.n	8003b72 <HAL_PCD_IRQHandler+0x3a2>
 8003b4a:	6879      	ldr	r1, [r7, #4]
 8003b4c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b4e:	4613      	mov	r3, r2
 8003b50:	00db      	lsls	r3, r3, #3
 8003b52:	4413      	add	r3, r2
 8003b54:	009b      	lsls	r3, r3, #2
 8003b56:	440b      	add	r3, r1
 8003b58:	3324      	adds	r3, #36	@ 0x24
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d108      	bne.n	8003b72 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6818      	ldr	r0, [r3, #0]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003b6a:	461a      	mov	r2, r3
 8003b6c:	2101      	movs	r1, #1
 8003b6e:	f004 fcb1 	bl	80084d4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003b72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b74:	b2db      	uxtb	r3, r3
 8003b76:	4619      	mov	r1, r3
 8003b78:	6878      	ldr	r0, [r7, #4]
 8003b7a:	f006 ffba 	bl	800aaf2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	f003 0308 	and.w	r3, r3, #8
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d008      	beq.n	8003b9a <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003b88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b8a:	015a      	lsls	r2, r3, #5
 8003b8c:	69fb      	ldr	r3, [r7, #28]
 8003b8e:	4413      	add	r3, r2
 8003b90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003b94:	461a      	mov	r2, r3
 8003b96:	2308      	movs	r3, #8
 8003b98:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003b9a:	693b      	ldr	r3, [r7, #16]
 8003b9c:	f003 0310 	and.w	r3, r3, #16
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d008      	beq.n	8003bb6 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003ba4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ba6:	015a      	lsls	r2, r3, #5
 8003ba8:	69fb      	ldr	r3, [r7, #28]
 8003baa:	4413      	add	r3, r2
 8003bac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003bb0:	461a      	mov	r2, r3
 8003bb2:	2310      	movs	r3, #16
 8003bb4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003bb6:	693b      	ldr	r3, [r7, #16]
 8003bb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d008      	beq.n	8003bd2 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003bc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bc2:	015a      	lsls	r2, r3, #5
 8003bc4:	69fb      	ldr	r3, [r7, #28]
 8003bc6:	4413      	add	r3, r2
 8003bc8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003bcc:	461a      	mov	r2, r3
 8003bce:	2340      	movs	r3, #64	@ 0x40
 8003bd0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	f003 0302 	and.w	r3, r3, #2
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d023      	beq.n	8003c24 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003bdc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003bde:	6a38      	ldr	r0, [r7, #32]
 8003be0:	f003 fc98 	bl	8007514 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003be4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003be6:	4613      	mov	r3, r2
 8003be8:	00db      	lsls	r3, r3, #3
 8003bea:	4413      	add	r3, r2
 8003bec:	009b      	lsls	r3, r3, #2
 8003bee:	3310      	adds	r3, #16
 8003bf0:	687a      	ldr	r2, [r7, #4]
 8003bf2:	4413      	add	r3, r2
 8003bf4:	3304      	adds	r3, #4
 8003bf6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003bf8:	697b      	ldr	r3, [r7, #20]
 8003bfa:	78db      	ldrb	r3, [r3, #3]
 8003bfc:	2b01      	cmp	r3, #1
 8003bfe:	d108      	bne.n	8003c12 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003c00:	697b      	ldr	r3, [r7, #20]
 8003c02:	2200      	movs	r2, #0
 8003c04:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003c06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c08:	b2db      	uxtb	r3, r3
 8003c0a:	4619      	mov	r1, r3
 8003c0c:	6878      	ldr	r0, [r7, #4]
 8003c0e:	f007 f807 	bl	800ac20 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003c12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c14:	015a      	lsls	r2, r3, #5
 8003c16:	69fb      	ldr	r3, [r7, #28]
 8003c18:	4413      	add	r3, r2
 8003c1a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003c1e:	461a      	mov	r2, r3
 8003c20:	2302      	movs	r3, #2
 8003c22:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003c24:	693b      	ldr	r3, [r7, #16]
 8003c26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d003      	beq.n	8003c36 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003c2e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003c30:	6878      	ldr	r0, [r7, #4]
 8003c32:	f000 fcbd 	bl	80045b0 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003c36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c38:	3301      	adds	r3, #1
 8003c3a:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003c3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c3e:	085b      	lsrs	r3, r3, #1
 8003c40:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003c42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	f47f af2e 	bne.w	8003aa6 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4618      	mov	r0, r3
 8003c50:	f004 fb7c 	bl	800834c <USB_ReadInterrupts>
 8003c54:	4603      	mov	r3, r0
 8003c56:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003c5a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003c5e:	d122      	bne.n	8003ca6 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003c60:	69fb      	ldr	r3, [r7, #28]
 8003c62:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	69fa      	ldr	r2, [r7, #28]
 8003c6a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003c6e:	f023 0301 	bic.w	r3, r3, #1
 8003c72:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8003c7a:	2b01      	cmp	r3, #1
 8003c7c:	d108      	bne.n	8003c90 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2200      	movs	r2, #0
 8003c82:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003c86:	2100      	movs	r1, #0
 8003c88:	6878      	ldr	r0, [r7, #4]
 8003c8a:	f000 fea3 	bl	80049d4 <HAL_PCDEx_LPM_Callback>
 8003c8e:	e002      	b.n	8003c96 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003c90:	6878      	ldr	r0, [r7, #4]
 8003c92:	f006 ffa5 	bl	800abe0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	695a      	ldr	r2, [r3, #20]
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8003ca4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4618      	mov	r0, r3
 8003cac:	f004 fb4e 	bl	800834c <USB_ReadInterrupts>
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003cb6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003cba:	d112      	bne.n	8003ce2 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003cbc:	69fb      	ldr	r3, [r7, #28]
 8003cbe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003cc2:	689b      	ldr	r3, [r3, #8]
 8003cc4:	f003 0301 	and.w	r3, r3, #1
 8003cc8:	2b01      	cmp	r3, #1
 8003cca:	d102      	bne.n	8003cd2 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003ccc:	6878      	ldr	r0, [r7, #4]
 8003cce:	f006 ff61 	bl	800ab94 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	695a      	ldr	r2, [r3, #20]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8003ce0:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	f004 fb30 	bl	800834c <USB_ReadInterrupts>
 8003cec:	4603      	mov	r3, r0
 8003cee:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003cf2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003cf6:	f040 80b7 	bne.w	8003e68 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003cfa:	69fb      	ldr	r3, [r7, #28]
 8003cfc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	69fa      	ldr	r2, [r7, #28]
 8003d04:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003d08:	f023 0301 	bic.w	r3, r3, #1
 8003d0c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	2110      	movs	r1, #16
 8003d14:	4618      	mov	r0, r3
 8003d16:	f003 fbfd 	bl	8007514 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003d1e:	e046      	b.n	8003dae <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003d20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d22:	015a      	lsls	r2, r3, #5
 8003d24:	69fb      	ldr	r3, [r7, #28]
 8003d26:	4413      	add	r3, r2
 8003d28:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003d2c:	461a      	mov	r2, r3
 8003d2e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003d32:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003d34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d36:	015a      	lsls	r2, r3, #5
 8003d38:	69fb      	ldr	r3, [r7, #28]
 8003d3a:	4413      	add	r3, r2
 8003d3c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003d44:	0151      	lsls	r1, r2, #5
 8003d46:	69fa      	ldr	r2, [r7, #28]
 8003d48:	440a      	add	r2, r1
 8003d4a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003d4e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003d52:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003d54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d56:	015a      	lsls	r2, r3, #5
 8003d58:	69fb      	ldr	r3, [r7, #28]
 8003d5a:	4413      	add	r3, r2
 8003d5c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d60:	461a      	mov	r2, r3
 8003d62:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003d66:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003d68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d6a:	015a      	lsls	r2, r3, #5
 8003d6c:	69fb      	ldr	r3, [r7, #28]
 8003d6e:	4413      	add	r3, r2
 8003d70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003d78:	0151      	lsls	r1, r2, #5
 8003d7a:	69fa      	ldr	r2, [r7, #28]
 8003d7c:	440a      	add	r2, r1
 8003d7e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003d82:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003d86:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003d88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d8a:	015a      	lsls	r2, r3, #5
 8003d8c:	69fb      	ldr	r3, [r7, #28]
 8003d8e:	4413      	add	r3, r2
 8003d90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003d98:	0151      	lsls	r1, r2, #5
 8003d9a:	69fa      	ldr	r2, [r7, #28]
 8003d9c:	440a      	add	r2, r1
 8003d9e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003da2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003da6:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003da8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003daa:	3301      	adds	r3, #1
 8003dac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	791b      	ldrb	r3, [r3, #4]
 8003db2:	461a      	mov	r2, r3
 8003db4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d3b2      	bcc.n	8003d20 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003dba:	69fb      	ldr	r3, [r7, #28]
 8003dbc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003dc0:	69db      	ldr	r3, [r3, #28]
 8003dc2:	69fa      	ldr	r2, [r7, #28]
 8003dc4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003dc8:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8003dcc:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	7bdb      	ldrb	r3, [r3, #15]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d016      	beq.n	8003e04 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003dd6:	69fb      	ldr	r3, [r7, #28]
 8003dd8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003ddc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003de0:	69fa      	ldr	r2, [r7, #28]
 8003de2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003de6:	f043 030b 	orr.w	r3, r3, #11
 8003dea:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003dee:	69fb      	ldr	r3, [r7, #28]
 8003df0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003df4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003df6:	69fa      	ldr	r2, [r7, #28]
 8003df8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003dfc:	f043 030b 	orr.w	r3, r3, #11
 8003e00:	6453      	str	r3, [r2, #68]	@ 0x44
 8003e02:	e015      	b.n	8003e30 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003e04:	69fb      	ldr	r3, [r7, #28]
 8003e06:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e0a:	695b      	ldr	r3, [r3, #20]
 8003e0c:	69fa      	ldr	r2, [r7, #28]
 8003e0e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003e12:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003e16:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8003e1a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003e1c:	69fb      	ldr	r3, [r7, #28]
 8003e1e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e22:	691b      	ldr	r3, [r3, #16]
 8003e24:	69fa      	ldr	r2, [r7, #28]
 8003e26:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003e2a:	f043 030b 	orr.w	r3, r3, #11
 8003e2e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003e30:	69fb      	ldr	r3, [r7, #28]
 8003e32:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	69fa      	ldr	r2, [r7, #28]
 8003e3a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003e3e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8003e42:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6818      	ldr	r0, [r3, #0]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003e52:	461a      	mov	r2, r3
 8003e54:	f004 fb3e 	bl	80084d4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	695a      	ldr	r2, [r3, #20]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8003e66:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	f004 fa6d 	bl	800834c <USB_ReadInterrupts>
 8003e72:	4603      	mov	r3, r0
 8003e74:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003e78:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e7c:	d123      	bne.n	8003ec6 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4618      	mov	r0, r3
 8003e84:	f004 fb03 	bl	800848e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	f003 fbba 	bl	8007606 <USB_GetDevSpeed>
 8003e92:	4603      	mov	r3, r0
 8003e94:	461a      	mov	r2, r3
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681c      	ldr	r4, [r3, #0]
 8003e9e:	f001 fa09 	bl	80052b4 <HAL_RCC_GetHCLKFreq>
 8003ea2:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003ea8:	461a      	mov	r2, r3
 8003eaa:	4620      	mov	r0, r4
 8003eac:	f003 f8be 	bl	800702c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003eb0:	6878      	ldr	r0, [r7, #4]
 8003eb2:	f006 fe46 	bl	800ab42 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	695a      	ldr	r2, [r3, #20]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8003ec4:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4618      	mov	r0, r3
 8003ecc:	f004 fa3e 	bl	800834c <USB_ReadInterrupts>
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	f003 0308 	and.w	r3, r3, #8
 8003ed6:	2b08      	cmp	r3, #8
 8003ed8:	d10a      	bne.n	8003ef0 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003eda:	6878      	ldr	r0, [r7, #4]
 8003edc:	f006 fe23 	bl	800ab26 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	695a      	ldr	r2, [r3, #20]
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f002 0208 	and.w	r2, r2, #8
 8003eee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	f004 fa29 	bl	800834c <USB_ReadInterrupts>
 8003efa:	4603      	mov	r3, r0
 8003efc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f00:	2b80      	cmp	r3, #128	@ 0x80
 8003f02:	d123      	bne.n	8003f4c <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003f04:	6a3b      	ldr	r3, [r7, #32]
 8003f06:	699b      	ldr	r3, [r3, #24]
 8003f08:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003f0c:	6a3b      	ldr	r3, [r7, #32]
 8003f0e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003f10:	2301      	movs	r3, #1
 8003f12:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f14:	e014      	b.n	8003f40 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003f16:	6879      	ldr	r1, [r7, #4]
 8003f18:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f1a:	4613      	mov	r3, r2
 8003f1c:	00db      	lsls	r3, r3, #3
 8003f1e:	4413      	add	r3, r2
 8003f20:	009b      	lsls	r3, r3, #2
 8003f22:	440b      	add	r3, r1
 8003f24:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003f28:	781b      	ldrb	r3, [r3, #0]
 8003f2a:	2b01      	cmp	r3, #1
 8003f2c:	d105      	bne.n	8003f3a <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003f2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f30:	b2db      	uxtb	r3, r3
 8003f32:	4619      	mov	r1, r3
 8003f34:	6878      	ldr	r0, [r7, #4]
 8003f36:	f000 fb0a 	bl	800454e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003f3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f3c:	3301      	adds	r3, #1
 8003f3e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	791b      	ldrb	r3, [r3, #4]
 8003f44:	461a      	mov	r2, r3
 8003f46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d3e4      	bcc.n	8003f16 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4618      	mov	r0, r3
 8003f52:	f004 f9fb 	bl	800834c <USB_ReadInterrupts>
 8003f56:	4603      	mov	r3, r0
 8003f58:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003f5c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003f60:	d13c      	bne.n	8003fdc <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003f62:	2301      	movs	r3, #1
 8003f64:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f66:	e02b      	b.n	8003fc0 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003f68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f6a:	015a      	lsls	r2, r3, #5
 8003f6c:	69fb      	ldr	r3, [r7, #28]
 8003f6e:	4413      	add	r3, r2
 8003f70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003f78:	6879      	ldr	r1, [r7, #4]
 8003f7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f7c:	4613      	mov	r3, r2
 8003f7e:	00db      	lsls	r3, r3, #3
 8003f80:	4413      	add	r3, r2
 8003f82:	009b      	lsls	r3, r3, #2
 8003f84:	440b      	add	r3, r1
 8003f86:	3318      	adds	r3, #24
 8003f88:	781b      	ldrb	r3, [r3, #0]
 8003f8a:	2b01      	cmp	r3, #1
 8003f8c:	d115      	bne.n	8003fba <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003f8e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	da12      	bge.n	8003fba <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003f94:	6879      	ldr	r1, [r7, #4]
 8003f96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f98:	4613      	mov	r3, r2
 8003f9a:	00db      	lsls	r3, r3, #3
 8003f9c:	4413      	add	r3, r2
 8003f9e:	009b      	lsls	r3, r3, #2
 8003fa0:	440b      	add	r3, r1
 8003fa2:	3317      	adds	r3, #23
 8003fa4:	2201      	movs	r2, #1
 8003fa6:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003fa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003faa:	b2db      	uxtb	r3, r3
 8003fac:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003fb0:	b2db      	uxtb	r3, r3
 8003fb2:	4619      	mov	r1, r3
 8003fb4:	6878      	ldr	r0, [r7, #4]
 8003fb6:	f000 faca 	bl	800454e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003fba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fbc:	3301      	adds	r3, #1
 8003fbe:	627b      	str	r3, [r7, #36]	@ 0x24
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	791b      	ldrb	r3, [r3, #4]
 8003fc4:	461a      	mov	r2, r3
 8003fc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d3cd      	bcc.n	8003f68 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	695a      	ldr	r2, [r3, #20]
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8003fda:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	f004 f9b3 	bl	800834c <USB_ReadInterrupts>
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003fec:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003ff0:	d156      	bne.n	80040a0 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ff6:	e045      	b.n	8004084 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003ff8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ffa:	015a      	lsls	r2, r3, #5
 8003ffc:	69fb      	ldr	r3, [r7, #28]
 8003ffe:	4413      	add	r3, r2
 8004000:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004008:	6879      	ldr	r1, [r7, #4]
 800400a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800400c:	4613      	mov	r3, r2
 800400e:	00db      	lsls	r3, r3, #3
 8004010:	4413      	add	r3, r2
 8004012:	009b      	lsls	r3, r3, #2
 8004014:	440b      	add	r3, r1
 8004016:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800401a:	781b      	ldrb	r3, [r3, #0]
 800401c:	2b01      	cmp	r3, #1
 800401e:	d12e      	bne.n	800407e <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004020:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004022:	2b00      	cmp	r3, #0
 8004024:	da2b      	bge.n	800407e <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8004026:	69bb      	ldr	r3, [r7, #24]
 8004028:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8004032:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004036:	429a      	cmp	r2, r3
 8004038:	d121      	bne.n	800407e <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800403a:	6879      	ldr	r1, [r7, #4]
 800403c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800403e:	4613      	mov	r3, r2
 8004040:	00db      	lsls	r3, r3, #3
 8004042:	4413      	add	r3, r2
 8004044:	009b      	lsls	r3, r3, #2
 8004046:	440b      	add	r3, r1
 8004048:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800404c:	2201      	movs	r2, #1
 800404e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8004050:	6a3b      	ldr	r3, [r7, #32]
 8004052:	699b      	ldr	r3, [r3, #24]
 8004054:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004058:	6a3b      	ldr	r3, [r7, #32]
 800405a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800405c:	6a3b      	ldr	r3, [r7, #32]
 800405e:	695b      	ldr	r3, [r3, #20]
 8004060:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004064:	2b00      	cmp	r3, #0
 8004066:	d10a      	bne.n	800407e <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8004068:	69fb      	ldr	r3, [r7, #28]
 800406a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	69fa      	ldr	r2, [r7, #28]
 8004072:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004076:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800407a:	6053      	str	r3, [r2, #4]
            break;
 800407c:	e008      	b.n	8004090 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800407e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004080:	3301      	adds	r3, #1
 8004082:	627b      	str	r3, [r7, #36]	@ 0x24
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	791b      	ldrb	r3, [r3, #4]
 8004088:	461a      	mov	r2, r3
 800408a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800408c:	4293      	cmp	r3, r2
 800408e:	d3b3      	bcc.n	8003ff8 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	695a      	ldr	r2, [r3, #20]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 800409e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4618      	mov	r0, r3
 80040a6:	f004 f951 	bl	800834c <USB_ReadInterrupts>
 80040aa:	4603      	mov	r3, r0
 80040ac:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80040b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040b4:	d10a      	bne.n	80040cc <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80040b6:	6878      	ldr	r0, [r7, #4]
 80040b8:	f006 fdc4 	bl	800ac44 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	695a      	ldr	r2, [r3, #20]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80040ca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4618      	mov	r0, r3
 80040d2:	f004 f93b 	bl	800834c <USB_ReadInterrupts>
 80040d6:	4603      	mov	r3, r0
 80040d8:	f003 0304 	and.w	r3, r3, #4
 80040dc:	2b04      	cmp	r3, #4
 80040de:	d115      	bne.n	800410c <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80040e8:	69bb      	ldr	r3, [r7, #24]
 80040ea:	f003 0304 	and.w	r3, r3, #4
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d002      	beq.n	80040f8 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80040f2:	6878      	ldr	r0, [r7, #4]
 80040f4:	f006 fdb4 	bl	800ac60 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	6859      	ldr	r1, [r3, #4]
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	69ba      	ldr	r2, [r7, #24]
 8004104:	430a      	orrs	r2, r1
 8004106:	605a      	str	r2, [r3, #4]
 8004108:	e000      	b.n	800410c <HAL_PCD_IRQHandler+0x93c>
      return;
 800410a:	bf00      	nop
    }
  }
}
 800410c:	3734      	adds	r7, #52	@ 0x34
 800410e:	46bd      	mov	sp, r7
 8004110:	bd90      	pop	{r4, r7, pc}

08004112 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004112:	b580      	push	{r7, lr}
 8004114:	b082      	sub	sp, #8
 8004116:	af00      	add	r7, sp, #0
 8004118:	6078      	str	r0, [r7, #4]
 800411a:	460b      	mov	r3, r1
 800411c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004124:	2b01      	cmp	r3, #1
 8004126:	d101      	bne.n	800412c <HAL_PCD_SetAddress+0x1a>
 8004128:	2302      	movs	r3, #2
 800412a:	e012      	b.n	8004152 <HAL_PCD_SetAddress+0x40>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2201      	movs	r2, #1
 8004130:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	78fa      	ldrb	r2, [r7, #3]
 8004138:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	78fa      	ldrb	r2, [r7, #3]
 8004140:	4611      	mov	r1, r2
 8004142:	4618      	mov	r0, r3
 8004144:	f004 f89a 	bl	800827c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2200      	movs	r2, #0
 800414c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004150:	2300      	movs	r3, #0
}
 8004152:	4618      	mov	r0, r3
 8004154:	3708      	adds	r7, #8
 8004156:	46bd      	mov	sp, r7
 8004158:	bd80      	pop	{r7, pc}

0800415a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800415a:	b580      	push	{r7, lr}
 800415c:	b084      	sub	sp, #16
 800415e:	af00      	add	r7, sp, #0
 8004160:	6078      	str	r0, [r7, #4]
 8004162:	4608      	mov	r0, r1
 8004164:	4611      	mov	r1, r2
 8004166:	461a      	mov	r2, r3
 8004168:	4603      	mov	r3, r0
 800416a:	70fb      	strb	r3, [r7, #3]
 800416c:	460b      	mov	r3, r1
 800416e:	803b      	strh	r3, [r7, #0]
 8004170:	4613      	mov	r3, r2
 8004172:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8004174:	2300      	movs	r3, #0
 8004176:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004178:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800417c:	2b00      	cmp	r3, #0
 800417e:	da0f      	bge.n	80041a0 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004180:	78fb      	ldrb	r3, [r7, #3]
 8004182:	f003 020f 	and.w	r2, r3, #15
 8004186:	4613      	mov	r3, r2
 8004188:	00db      	lsls	r3, r3, #3
 800418a:	4413      	add	r3, r2
 800418c:	009b      	lsls	r3, r3, #2
 800418e:	3310      	adds	r3, #16
 8004190:	687a      	ldr	r2, [r7, #4]
 8004192:	4413      	add	r3, r2
 8004194:	3304      	adds	r3, #4
 8004196:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	2201      	movs	r2, #1
 800419c:	705a      	strb	r2, [r3, #1]
 800419e:	e00f      	b.n	80041c0 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80041a0:	78fb      	ldrb	r3, [r7, #3]
 80041a2:	f003 020f 	and.w	r2, r3, #15
 80041a6:	4613      	mov	r3, r2
 80041a8:	00db      	lsls	r3, r3, #3
 80041aa:	4413      	add	r3, r2
 80041ac:	009b      	lsls	r3, r3, #2
 80041ae:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80041b2:	687a      	ldr	r2, [r7, #4]
 80041b4:	4413      	add	r3, r2
 80041b6:	3304      	adds	r3, #4
 80041b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	2200      	movs	r2, #0
 80041be:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80041c0:	78fb      	ldrb	r3, [r7, #3]
 80041c2:	f003 030f 	and.w	r3, r3, #15
 80041c6:	b2da      	uxtb	r2, r3
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80041cc:	883b      	ldrh	r3, [r7, #0]
 80041ce:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	78ba      	ldrb	r2, [r7, #2]
 80041da:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	785b      	ldrb	r3, [r3, #1]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d004      	beq.n	80041ee <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	781b      	ldrb	r3, [r3, #0]
 80041e8:	461a      	mov	r2, r3
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80041ee:	78bb      	ldrb	r3, [r7, #2]
 80041f0:	2b02      	cmp	r3, #2
 80041f2:	d102      	bne.n	80041fa <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	2200      	movs	r2, #0
 80041f8:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004200:	2b01      	cmp	r3, #1
 8004202:	d101      	bne.n	8004208 <HAL_PCD_EP_Open+0xae>
 8004204:	2302      	movs	r3, #2
 8004206:	e00e      	b.n	8004226 <HAL_PCD_EP_Open+0xcc>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2201      	movs	r2, #1
 800420c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	68f9      	ldr	r1, [r7, #12]
 8004216:	4618      	mov	r0, r3
 8004218:	f003 fa1a 	bl	8007650 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2200      	movs	r2, #0
 8004220:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8004224:	7afb      	ldrb	r3, [r7, #11]
}
 8004226:	4618      	mov	r0, r3
 8004228:	3710      	adds	r7, #16
 800422a:	46bd      	mov	sp, r7
 800422c:	bd80      	pop	{r7, pc}

0800422e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800422e:	b580      	push	{r7, lr}
 8004230:	b084      	sub	sp, #16
 8004232:	af00      	add	r7, sp, #0
 8004234:	6078      	str	r0, [r7, #4]
 8004236:	460b      	mov	r3, r1
 8004238:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800423a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800423e:	2b00      	cmp	r3, #0
 8004240:	da0f      	bge.n	8004262 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004242:	78fb      	ldrb	r3, [r7, #3]
 8004244:	f003 020f 	and.w	r2, r3, #15
 8004248:	4613      	mov	r3, r2
 800424a:	00db      	lsls	r3, r3, #3
 800424c:	4413      	add	r3, r2
 800424e:	009b      	lsls	r3, r3, #2
 8004250:	3310      	adds	r3, #16
 8004252:	687a      	ldr	r2, [r7, #4]
 8004254:	4413      	add	r3, r2
 8004256:	3304      	adds	r3, #4
 8004258:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	2201      	movs	r2, #1
 800425e:	705a      	strb	r2, [r3, #1]
 8004260:	e00f      	b.n	8004282 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004262:	78fb      	ldrb	r3, [r7, #3]
 8004264:	f003 020f 	and.w	r2, r3, #15
 8004268:	4613      	mov	r3, r2
 800426a:	00db      	lsls	r3, r3, #3
 800426c:	4413      	add	r3, r2
 800426e:	009b      	lsls	r3, r3, #2
 8004270:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004274:	687a      	ldr	r2, [r7, #4]
 8004276:	4413      	add	r3, r2
 8004278:	3304      	adds	r3, #4
 800427a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	2200      	movs	r2, #0
 8004280:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8004282:	78fb      	ldrb	r3, [r7, #3]
 8004284:	f003 030f 	and.w	r3, r3, #15
 8004288:	b2da      	uxtb	r2, r3
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004294:	2b01      	cmp	r3, #1
 8004296:	d101      	bne.n	800429c <HAL_PCD_EP_Close+0x6e>
 8004298:	2302      	movs	r3, #2
 800429a:	e00e      	b.n	80042ba <HAL_PCD_EP_Close+0x8c>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2201      	movs	r2, #1
 80042a0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	68f9      	ldr	r1, [r7, #12]
 80042aa:	4618      	mov	r0, r3
 80042ac:	f003 fa58 	bl	8007760 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2200      	movs	r2, #0
 80042b4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 80042b8:	2300      	movs	r3, #0
}
 80042ba:	4618      	mov	r0, r3
 80042bc:	3710      	adds	r7, #16
 80042be:	46bd      	mov	sp, r7
 80042c0:	bd80      	pop	{r7, pc}

080042c2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80042c2:	b580      	push	{r7, lr}
 80042c4:	b086      	sub	sp, #24
 80042c6:	af00      	add	r7, sp, #0
 80042c8:	60f8      	str	r0, [r7, #12]
 80042ca:	607a      	str	r2, [r7, #4]
 80042cc:	603b      	str	r3, [r7, #0]
 80042ce:	460b      	mov	r3, r1
 80042d0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80042d2:	7afb      	ldrb	r3, [r7, #11]
 80042d4:	f003 020f 	and.w	r2, r3, #15
 80042d8:	4613      	mov	r3, r2
 80042da:	00db      	lsls	r3, r3, #3
 80042dc:	4413      	add	r3, r2
 80042de:	009b      	lsls	r3, r3, #2
 80042e0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80042e4:	68fa      	ldr	r2, [r7, #12]
 80042e6:	4413      	add	r3, r2
 80042e8:	3304      	adds	r3, #4
 80042ea:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80042ec:	697b      	ldr	r3, [r7, #20]
 80042ee:	687a      	ldr	r2, [r7, #4]
 80042f0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80042f2:	697b      	ldr	r3, [r7, #20]
 80042f4:	683a      	ldr	r2, [r7, #0]
 80042f6:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80042f8:	697b      	ldr	r3, [r7, #20]
 80042fa:	2200      	movs	r2, #0
 80042fc:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80042fe:	697b      	ldr	r3, [r7, #20]
 8004300:	2200      	movs	r2, #0
 8004302:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004304:	7afb      	ldrb	r3, [r7, #11]
 8004306:	f003 030f 	and.w	r3, r3, #15
 800430a:	b2da      	uxtb	r2, r3
 800430c:	697b      	ldr	r3, [r7, #20]
 800430e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	799b      	ldrb	r3, [r3, #6]
 8004314:	2b01      	cmp	r3, #1
 8004316:	d102      	bne.n	800431e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004318:	687a      	ldr	r2, [r7, #4]
 800431a:	697b      	ldr	r3, [r7, #20]
 800431c:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	6818      	ldr	r0, [r3, #0]
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	799b      	ldrb	r3, [r3, #6]
 8004326:	461a      	mov	r2, r3
 8004328:	6979      	ldr	r1, [r7, #20]
 800432a:	f003 faf5 	bl	8007918 <USB_EPStartXfer>

  return HAL_OK;
 800432e:	2300      	movs	r3, #0
}
 8004330:	4618      	mov	r0, r3
 8004332:	3718      	adds	r7, #24
 8004334:	46bd      	mov	sp, r7
 8004336:	bd80      	pop	{r7, pc}

08004338 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8004338:	b480      	push	{r7}
 800433a:	b083      	sub	sp, #12
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
 8004340:	460b      	mov	r3, r1
 8004342:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004344:	78fb      	ldrb	r3, [r7, #3]
 8004346:	f003 020f 	and.w	r2, r3, #15
 800434a:	6879      	ldr	r1, [r7, #4]
 800434c:	4613      	mov	r3, r2
 800434e:	00db      	lsls	r3, r3, #3
 8004350:	4413      	add	r3, r2
 8004352:	009b      	lsls	r3, r3, #2
 8004354:	440b      	add	r3, r1
 8004356:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 800435a:	681b      	ldr	r3, [r3, #0]
}
 800435c:	4618      	mov	r0, r3
 800435e:	370c      	adds	r7, #12
 8004360:	46bd      	mov	sp, r7
 8004362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004366:	4770      	bx	lr

08004368 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b086      	sub	sp, #24
 800436c:	af00      	add	r7, sp, #0
 800436e:	60f8      	str	r0, [r7, #12]
 8004370:	607a      	str	r2, [r7, #4]
 8004372:	603b      	str	r3, [r7, #0]
 8004374:	460b      	mov	r3, r1
 8004376:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004378:	7afb      	ldrb	r3, [r7, #11]
 800437a:	f003 020f 	and.w	r2, r3, #15
 800437e:	4613      	mov	r3, r2
 8004380:	00db      	lsls	r3, r3, #3
 8004382:	4413      	add	r3, r2
 8004384:	009b      	lsls	r3, r3, #2
 8004386:	3310      	adds	r3, #16
 8004388:	68fa      	ldr	r2, [r7, #12]
 800438a:	4413      	add	r3, r2
 800438c:	3304      	adds	r3, #4
 800438e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004390:	697b      	ldr	r3, [r7, #20]
 8004392:	687a      	ldr	r2, [r7, #4]
 8004394:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004396:	697b      	ldr	r3, [r7, #20]
 8004398:	683a      	ldr	r2, [r7, #0]
 800439a:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800439c:	697b      	ldr	r3, [r7, #20]
 800439e:	2200      	movs	r2, #0
 80043a0:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80043a2:	697b      	ldr	r3, [r7, #20]
 80043a4:	2201      	movs	r2, #1
 80043a6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80043a8:	7afb      	ldrb	r3, [r7, #11]
 80043aa:	f003 030f 	and.w	r3, r3, #15
 80043ae:	b2da      	uxtb	r2, r3
 80043b0:	697b      	ldr	r3, [r7, #20]
 80043b2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	799b      	ldrb	r3, [r3, #6]
 80043b8:	2b01      	cmp	r3, #1
 80043ba:	d102      	bne.n	80043c2 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80043bc:	687a      	ldr	r2, [r7, #4]
 80043be:	697b      	ldr	r3, [r7, #20]
 80043c0:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	6818      	ldr	r0, [r3, #0]
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	799b      	ldrb	r3, [r3, #6]
 80043ca:	461a      	mov	r2, r3
 80043cc:	6979      	ldr	r1, [r7, #20]
 80043ce:	f003 faa3 	bl	8007918 <USB_EPStartXfer>

  return HAL_OK;
 80043d2:	2300      	movs	r3, #0
}
 80043d4:	4618      	mov	r0, r3
 80043d6:	3718      	adds	r7, #24
 80043d8:	46bd      	mov	sp, r7
 80043da:	bd80      	pop	{r7, pc}

080043dc <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b084      	sub	sp, #16
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
 80043e4:	460b      	mov	r3, r1
 80043e6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80043e8:	78fb      	ldrb	r3, [r7, #3]
 80043ea:	f003 030f 	and.w	r3, r3, #15
 80043ee:	687a      	ldr	r2, [r7, #4]
 80043f0:	7912      	ldrb	r2, [r2, #4]
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d901      	bls.n	80043fa <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80043f6:	2301      	movs	r3, #1
 80043f8:	e04f      	b.n	800449a <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80043fa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	da0f      	bge.n	8004422 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004402:	78fb      	ldrb	r3, [r7, #3]
 8004404:	f003 020f 	and.w	r2, r3, #15
 8004408:	4613      	mov	r3, r2
 800440a:	00db      	lsls	r3, r3, #3
 800440c:	4413      	add	r3, r2
 800440e:	009b      	lsls	r3, r3, #2
 8004410:	3310      	adds	r3, #16
 8004412:	687a      	ldr	r2, [r7, #4]
 8004414:	4413      	add	r3, r2
 8004416:	3304      	adds	r3, #4
 8004418:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	2201      	movs	r2, #1
 800441e:	705a      	strb	r2, [r3, #1]
 8004420:	e00d      	b.n	800443e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004422:	78fa      	ldrb	r2, [r7, #3]
 8004424:	4613      	mov	r3, r2
 8004426:	00db      	lsls	r3, r3, #3
 8004428:	4413      	add	r3, r2
 800442a:	009b      	lsls	r3, r3, #2
 800442c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004430:	687a      	ldr	r2, [r7, #4]
 8004432:	4413      	add	r3, r2
 8004434:	3304      	adds	r3, #4
 8004436:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	2200      	movs	r2, #0
 800443c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	2201      	movs	r2, #1
 8004442:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004444:	78fb      	ldrb	r3, [r7, #3]
 8004446:	f003 030f 	and.w	r3, r3, #15
 800444a:	b2da      	uxtb	r2, r3
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004456:	2b01      	cmp	r3, #1
 8004458:	d101      	bne.n	800445e <HAL_PCD_EP_SetStall+0x82>
 800445a:	2302      	movs	r3, #2
 800445c:	e01d      	b.n	800449a <HAL_PCD_EP_SetStall+0xbe>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2201      	movs	r2, #1
 8004462:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	68f9      	ldr	r1, [r7, #12]
 800446c:	4618      	mov	r0, r3
 800446e:	f003 fe31 	bl	80080d4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004472:	78fb      	ldrb	r3, [r7, #3]
 8004474:	f003 030f 	and.w	r3, r3, #15
 8004478:	2b00      	cmp	r3, #0
 800447a:	d109      	bne.n	8004490 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6818      	ldr	r0, [r3, #0]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	7999      	ldrb	r1, [r3, #6]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800448a:	461a      	mov	r2, r3
 800448c:	f004 f822 	bl	80084d4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2200      	movs	r2, #0
 8004494:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004498:	2300      	movs	r3, #0
}
 800449a:	4618      	mov	r0, r3
 800449c:	3710      	adds	r7, #16
 800449e:	46bd      	mov	sp, r7
 80044a0:	bd80      	pop	{r7, pc}

080044a2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80044a2:	b580      	push	{r7, lr}
 80044a4:	b084      	sub	sp, #16
 80044a6:	af00      	add	r7, sp, #0
 80044a8:	6078      	str	r0, [r7, #4]
 80044aa:	460b      	mov	r3, r1
 80044ac:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80044ae:	78fb      	ldrb	r3, [r7, #3]
 80044b0:	f003 030f 	and.w	r3, r3, #15
 80044b4:	687a      	ldr	r2, [r7, #4]
 80044b6:	7912      	ldrb	r2, [r2, #4]
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d901      	bls.n	80044c0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80044bc:	2301      	movs	r3, #1
 80044be:	e042      	b.n	8004546 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80044c0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	da0f      	bge.n	80044e8 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80044c8:	78fb      	ldrb	r3, [r7, #3]
 80044ca:	f003 020f 	and.w	r2, r3, #15
 80044ce:	4613      	mov	r3, r2
 80044d0:	00db      	lsls	r3, r3, #3
 80044d2:	4413      	add	r3, r2
 80044d4:	009b      	lsls	r3, r3, #2
 80044d6:	3310      	adds	r3, #16
 80044d8:	687a      	ldr	r2, [r7, #4]
 80044da:	4413      	add	r3, r2
 80044dc:	3304      	adds	r3, #4
 80044de:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	2201      	movs	r2, #1
 80044e4:	705a      	strb	r2, [r3, #1]
 80044e6:	e00f      	b.n	8004508 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80044e8:	78fb      	ldrb	r3, [r7, #3]
 80044ea:	f003 020f 	and.w	r2, r3, #15
 80044ee:	4613      	mov	r3, r2
 80044f0:	00db      	lsls	r3, r3, #3
 80044f2:	4413      	add	r3, r2
 80044f4:	009b      	lsls	r3, r3, #2
 80044f6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80044fa:	687a      	ldr	r2, [r7, #4]
 80044fc:	4413      	add	r3, r2
 80044fe:	3304      	adds	r3, #4
 8004500:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	2200      	movs	r2, #0
 8004506:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	2200      	movs	r2, #0
 800450c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800450e:	78fb      	ldrb	r3, [r7, #3]
 8004510:	f003 030f 	and.w	r3, r3, #15
 8004514:	b2da      	uxtb	r2, r3
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004520:	2b01      	cmp	r3, #1
 8004522:	d101      	bne.n	8004528 <HAL_PCD_EP_ClrStall+0x86>
 8004524:	2302      	movs	r3, #2
 8004526:	e00e      	b.n	8004546 <HAL_PCD_EP_ClrStall+0xa4>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2201      	movs	r2, #1
 800452c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	68f9      	ldr	r1, [r7, #12]
 8004536:	4618      	mov	r0, r3
 8004538:	f003 fe3a 	bl	80081b0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2200      	movs	r2, #0
 8004540:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004544:	2300      	movs	r3, #0
}
 8004546:	4618      	mov	r0, r3
 8004548:	3710      	adds	r7, #16
 800454a:	46bd      	mov	sp, r7
 800454c:	bd80      	pop	{r7, pc}

0800454e <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800454e:	b580      	push	{r7, lr}
 8004550:	b084      	sub	sp, #16
 8004552:	af00      	add	r7, sp, #0
 8004554:	6078      	str	r0, [r7, #4]
 8004556:	460b      	mov	r3, r1
 8004558:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800455a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800455e:	2b00      	cmp	r3, #0
 8004560:	da0c      	bge.n	800457c <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004562:	78fb      	ldrb	r3, [r7, #3]
 8004564:	f003 020f 	and.w	r2, r3, #15
 8004568:	4613      	mov	r3, r2
 800456a:	00db      	lsls	r3, r3, #3
 800456c:	4413      	add	r3, r2
 800456e:	009b      	lsls	r3, r3, #2
 8004570:	3310      	adds	r3, #16
 8004572:	687a      	ldr	r2, [r7, #4]
 8004574:	4413      	add	r3, r2
 8004576:	3304      	adds	r3, #4
 8004578:	60fb      	str	r3, [r7, #12]
 800457a:	e00c      	b.n	8004596 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800457c:	78fb      	ldrb	r3, [r7, #3]
 800457e:	f003 020f 	and.w	r2, r3, #15
 8004582:	4613      	mov	r3, r2
 8004584:	00db      	lsls	r3, r3, #3
 8004586:	4413      	add	r3, r2
 8004588:	009b      	lsls	r3, r3, #2
 800458a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800458e:	687a      	ldr	r2, [r7, #4]
 8004590:	4413      	add	r3, r2
 8004592:	3304      	adds	r3, #4
 8004594:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	68f9      	ldr	r1, [r7, #12]
 800459c:	4618      	mov	r0, r3
 800459e:	f003 fc59 	bl	8007e54 <USB_EPStopXfer>
 80045a2:	4603      	mov	r3, r0
 80045a4:	72fb      	strb	r3, [r7, #11]

  return ret;
 80045a6:	7afb      	ldrb	r3, [r7, #11]
}
 80045a8:	4618      	mov	r0, r3
 80045aa:	3710      	adds	r7, #16
 80045ac:	46bd      	mov	sp, r7
 80045ae:	bd80      	pop	{r7, pc}

080045b0 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b08a      	sub	sp, #40	@ 0x28
 80045b4:	af02      	add	r7, sp, #8
 80045b6:	6078      	str	r0, [r7, #4]
 80045b8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045c0:	697b      	ldr	r3, [r7, #20]
 80045c2:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80045c4:	683a      	ldr	r2, [r7, #0]
 80045c6:	4613      	mov	r3, r2
 80045c8:	00db      	lsls	r3, r3, #3
 80045ca:	4413      	add	r3, r2
 80045cc:	009b      	lsls	r3, r3, #2
 80045ce:	3310      	adds	r3, #16
 80045d0:	687a      	ldr	r2, [r7, #4]
 80045d2:	4413      	add	r3, r2
 80045d4:	3304      	adds	r3, #4
 80045d6:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	695a      	ldr	r2, [r3, #20]
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	691b      	ldr	r3, [r3, #16]
 80045e0:	429a      	cmp	r2, r3
 80045e2:	d901      	bls.n	80045e8 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80045e4:	2301      	movs	r3, #1
 80045e6:	e06b      	b.n	80046c0 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	691a      	ldr	r2, [r3, #16]
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	695b      	ldr	r3, [r3, #20]
 80045f0:	1ad3      	subs	r3, r2, r3
 80045f2:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	689b      	ldr	r3, [r3, #8]
 80045f8:	69fa      	ldr	r2, [r7, #28]
 80045fa:	429a      	cmp	r2, r3
 80045fc:	d902      	bls.n	8004604 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	689b      	ldr	r3, [r3, #8]
 8004602:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004604:	69fb      	ldr	r3, [r7, #28]
 8004606:	3303      	adds	r3, #3
 8004608:	089b      	lsrs	r3, r3, #2
 800460a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800460c:	e02a      	b.n	8004664 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	691a      	ldr	r2, [r3, #16]
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	695b      	ldr	r3, [r3, #20]
 8004616:	1ad3      	subs	r3, r2, r3
 8004618:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	689b      	ldr	r3, [r3, #8]
 800461e:	69fa      	ldr	r2, [r7, #28]
 8004620:	429a      	cmp	r2, r3
 8004622:	d902      	bls.n	800462a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	689b      	ldr	r3, [r3, #8]
 8004628:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800462a:	69fb      	ldr	r3, [r7, #28]
 800462c:	3303      	adds	r3, #3
 800462e:	089b      	lsrs	r3, r3, #2
 8004630:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	68d9      	ldr	r1, [r3, #12]
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	b2da      	uxtb	r2, r3
 800463a:	69fb      	ldr	r3, [r7, #28]
 800463c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004642:	9300      	str	r3, [sp, #0]
 8004644:	4603      	mov	r3, r0
 8004646:	6978      	ldr	r0, [r7, #20]
 8004648:	f003 fcae 	bl	8007fa8 <USB_WritePacket>

    ep->xfer_buff  += len;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	68da      	ldr	r2, [r3, #12]
 8004650:	69fb      	ldr	r3, [r7, #28]
 8004652:	441a      	add	r2, r3
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	695a      	ldr	r2, [r3, #20]
 800465c:	69fb      	ldr	r3, [r7, #28]
 800465e:	441a      	add	r2, r3
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	015a      	lsls	r2, r3, #5
 8004668:	693b      	ldr	r3, [r7, #16]
 800466a:	4413      	add	r3, r2
 800466c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004670:	699b      	ldr	r3, [r3, #24]
 8004672:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004674:	69ba      	ldr	r2, [r7, #24]
 8004676:	429a      	cmp	r2, r3
 8004678:	d809      	bhi.n	800468e <PCD_WriteEmptyTxFifo+0xde>
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	695a      	ldr	r2, [r3, #20]
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004682:	429a      	cmp	r2, r3
 8004684:	d203      	bcs.n	800468e <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	691b      	ldr	r3, [r3, #16]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d1bf      	bne.n	800460e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	691a      	ldr	r2, [r3, #16]
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	695b      	ldr	r3, [r3, #20]
 8004696:	429a      	cmp	r2, r3
 8004698:	d811      	bhi.n	80046be <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	f003 030f 	and.w	r3, r3, #15
 80046a0:	2201      	movs	r2, #1
 80046a2:	fa02 f303 	lsl.w	r3, r2, r3
 80046a6:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80046a8:	693b      	ldr	r3, [r7, #16]
 80046aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80046ae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	43db      	mvns	r3, r3
 80046b4:	6939      	ldr	r1, [r7, #16]
 80046b6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80046ba:	4013      	ands	r3, r2
 80046bc:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80046be:	2300      	movs	r3, #0
}
 80046c0:	4618      	mov	r0, r3
 80046c2:	3720      	adds	r7, #32
 80046c4:	46bd      	mov	sp, r7
 80046c6:	bd80      	pop	{r7, pc}

080046c8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b088      	sub	sp, #32
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
 80046d0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046d8:	69fb      	ldr	r3, [r7, #28]
 80046da:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80046dc:	69fb      	ldr	r3, [r7, #28]
 80046de:	333c      	adds	r3, #60	@ 0x3c
 80046e0:	3304      	adds	r3, #4
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	015a      	lsls	r2, r3, #5
 80046ea:	69bb      	ldr	r3, [r7, #24]
 80046ec:	4413      	add	r3, r2
 80046ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80046f2:	689b      	ldr	r3, [r3, #8]
 80046f4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	799b      	ldrb	r3, [r3, #6]
 80046fa:	2b01      	cmp	r3, #1
 80046fc:	d17b      	bne.n	80047f6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80046fe:	693b      	ldr	r3, [r7, #16]
 8004700:	f003 0308 	and.w	r3, r3, #8
 8004704:	2b00      	cmp	r3, #0
 8004706:	d015      	beq.n	8004734 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004708:	697b      	ldr	r3, [r7, #20]
 800470a:	4a61      	ldr	r2, [pc, #388]	@ (8004890 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800470c:	4293      	cmp	r3, r2
 800470e:	f240 80b9 	bls.w	8004884 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004712:	693b      	ldr	r3, [r7, #16]
 8004714:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004718:	2b00      	cmp	r3, #0
 800471a:	f000 80b3 	beq.w	8004884 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	015a      	lsls	r2, r3, #5
 8004722:	69bb      	ldr	r3, [r7, #24]
 8004724:	4413      	add	r3, r2
 8004726:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800472a:	461a      	mov	r2, r3
 800472c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004730:	6093      	str	r3, [r2, #8]
 8004732:	e0a7      	b.n	8004884 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004734:	693b      	ldr	r3, [r7, #16]
 8004736:	f003 0320 	and.w	r3, r3, #32
 800473a:	2b00      	cmp	r3, #0
 800473c:	d009      	beq.n	8004752 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	015a      	lsls	r2, r3, #5
 8004742:	69bb      	ldr	r3, [r7, #24]
 8004744:	4413      	add	r3, r2
 8004746:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800474a:	461a      	mov	r2, r3
 800474c:	2320      	movs	r3, #32
 800474e:	6093      	str	r3, [r2, #8]
 8004750:	e098      	b.n	8004884 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004752:	693b      	ldr	r3, [r7, #16]
 8004754:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004758:	2b00      	cmp	r3, #0
 800475a:	f040 8093 	bne.w	8004884 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800475e:	697b      	ldr	r3, [r7, #20]
 8004760:	4a4b      	ldr	r2, [pc, #300]	@ (8004890 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d90f      	bls.n	8004786 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004766:	693b      	ldr	r3, [r7, #16]
 8004768:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800476c:	2b00      	cmp	r3, #0
 800476e:	d00a      	beq.n	8004786 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	015a      	lsls	r2, r3, #5
 8004774:	69bb      	ldr	r3, [r7, #24]
 8004776:	4413      	add	r3, r2
 8004778:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800477c:	461a      	mov	r2, r3
 800477e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004782:	6093      	str	r3, [r2, #8]
 8004784:	e07e      	b.n	8004884 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8004786:	683a      	ldr	r2, [r7, #0]
 8004788:	4613      	mov	r3, r2
 800478a:	00db      	lsls	r3, r3, #3
 800478c:	4413      	add	r3, r2
 800478e:	009b      	lsls	r3, r3, #2
 8004790:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004794:	687a      	ldr	r2, [r7, #4]
 8004796:	4413      	add	r3, r2
 8004798:	3304      	adds	r3, #4
 800479a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	6a1a      	ldr	r2, [r3, #32]
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	0159      	lsls	r1, r3, #5
 80047a4:	69bb      	ldr	r3, [r7, #24]
 80047a6:	440b      	add	r3, r1
 80047a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80047ac:	691b      	ldr	r3, [r3, #16]
 80047ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80047b2:	1ad2      	subs	r2, r2, r3
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d114      	bne.n	80047e8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	691b      	ldr	r3, [r3, #16]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d109      	bne.n	80047da <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6818      	ldr	r0, [r3, #0]
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80047d0:	461a      	mov	r2, r3
 80047d2:	2101      	movs	r1, #1
 80047d4:	f003 fe7e 	bl	80084d4 <USB_EP0_OutStart>
 80047d8:	e006      	b.n	80047e8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	68da      	ldr	r2, [r3, #12]
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	695b      	ldr	r3, [r3, #20]
 80047e2:	441a      	add	r2, r3
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	b2db      	uxtb	r3, r3
 80047ec:	4619      	mov	r1, r3
 80047ee:	6878      	ldr	r0, [r7, #4]
 80047f0:	f006 f964 	bl	800aabc <HAL_PCD_DataOutStageCallback>
 80047f4:	e046      	b.n	8004884 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80047f6:	697b      	ldr	r3, [r7, #20]
 80047f8:	4a26      	ldr	r2, [pc, #152]	@ (8004894 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d124      	bne.n	8004848 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80047fe:	693b      	ldr	r3, [r7, #16]
 8004800:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004804:	2b00      	cmp	r3, #0
 8004806:	d00a      	beq.n	800481e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	015a      	lsls	r2, r3, #5
 800480c:	69bb      	ldr	r3, [r7, #24]
 800480e:	4413      	add	r3, r2
 8004810:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004814:	461a      	mov	r2, r3
 8004816:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800481a:	6093      	str	r3, [r2, #8]
 800481c:	e032      	b.n	8004884 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800481e:	693b      	ldr	r3, [r7, #16]
 8004820:	f003 0320 	and.w	r3, r3, #32
 8004824:	2b00      	cmp	r3, #0
 8004826:	d008      	beq.n	800483a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	015a      	lsls	r2, r3, #5
 800482c:	69bb      	ldr	r3, [r7, #24]
 800482e:	4413      	add	r3, r2
 8004830:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004834:	461a      	mov	r2, r3
 8004836:	2320      	movs	r3, #32
 8004838:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	b2db      	uxtb	r3, r3
 800483e:	4619      	mov	r1, r3
 8004840:	6878      	ldr	r0, [r7, #4]
 8004842:	f006 f93b 	bl	800aabc <HAL_PCD_DataOutStageCallback>
 8004846:	e01d      	b.n	8004884 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d114      	bne.n	8004878 <PCD_EP_OutXfrComplete_int+0x1b0>
 800484e:	6879      	ldr	r1, [r7, #4]
 8004850:	683a      	ldr	r2, [r7, #0]
 8004852:	4613      	mov	r3, r2
 8004854:	00db      	lsls	r3, r3, #3
 8004856:	4413      	add	r3, r2
 8004858:	009b      	lsls	r3, r3, #2
 800485a:	440b      	add	r3, r1
 800485c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d108      	bne.n	8004878 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6818      	ldr	r0, [r3, #0]
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004870:	461a      	mov	r2, r3
 8004872:	2100      	movs	r1, #0
 8004874:	f003 fe2e 	bl	80084d4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	b2db      	uxtb	r3, r3
 800487c:	4619      	mov	r1, r3
 800487e:	6878      	ldr	r0, [r7, #4]
 8004880:	f006 f91c 	bl	800aabc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004884:	2300      	movs	r3, #0
}
 8004886:	4618      	mov	r0, r3
 8004888:	3720      	adds	r7, #32
 800488a:	46bd      	mov	sp, r7
 800488c:	bd80      	pop	{r7, pc}
 800488e:	bf00      	nop
 8004890:	4f54300a 	.word	0x4f54300a
 8004894:	4f54310a 	.word	0x4f54310a

08004898 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b086      	sub	sp, #24
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
 80048a0:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048a8:	697b      	ldr	r3, [r7, #20]
 80048aa:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80048ac:	697b      	ldr	r3, [r7, #20]
 80048ae:	333c      	adds	r3, #60	@ 0x3c
 80048b0:	3304      	adds	r3, #4
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	015a      	lsls	r2, r3, #5
 80048ba:	693b      	ldr	r3, [r7, #16]
 80048bc:	4413      	add	r3, r2
 80048be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80048c2:	689b      	ldr	r3, [r3, #8]
 80048c4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	4a15      	ldr	r2, [pc, #84]	@ (8004920 <PCD_EP_OutSetupPacket_int+0x88>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d90e      	bls.n	80048ec <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80048ce:	68bb      	ldr	r3, [r7, #8]
 80048d0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d009      	beq.n	80048ec <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	015a      	lsls	r2, r3, #5
 80048dc:	693b      	ldr	r3, [r7, #16]
 80048de:	4413      	add	r3, r2
 80048e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80048e4:	461a      	mov	r2, r3
 80048e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80048ea:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80048ec:	6878      	ldr	r0, [r7, #4]
 80048ee:	f006 f8d3 	bl	800aa98 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	4a0a      	ldr	r2, [pc, #40]	@ (8004920 <PCD_EP_OutSetupPacket_int+0x88>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d90c      	bls.n	8004914 <PCD_EP_OutSetupPacket_int+0x7c>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	799b      	ldrb	r3, [r3, #6]
 80048fe:	2b01      	cmp	r3, #1
 8004900:	d108      	bne.n	8004914 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6818      	ldr	r0, [r3, #0]
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800490c:	461a      	mov	r2, r3
 800490e:	2101      	movs	r1, #1
 8004910:	f003 fde0 	bl	80084d4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004914:	2300      	movs	r3, #0
}
 8004916:	4618      	mov	r0, r3
 8004918:	3718      	adds	r7, #24
 800491a:	46bd      	mov	sp, r7
 800491c:	bd80      	pop	{r7, pc}
 800491e:	bf00      	nop
 8004920:	4f54300a 	.word	0x4f54300a

08004924 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004924:	b480      	push	{r7}
 8004926:	b085      	sub	sp, #20
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
 800492c:	460b      	mov	r3, r1
 800492e:	70fb      	strb	r3, [r7, #3]
 8004930:	4613      	mov	r3, r2
 8004932:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800493a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800493c:	78fb      	ldrb	r3, [r7, #3]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d107      	bne.n	8004952 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004942:	883b      	ldrh	r3, [r7, #0]
 8004944:	0419      	lsls	r1, r3, #16
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	68ba      	ldr	r2, [r7, #8]
 800494c:	430a      	orrs	r2, r1
 800494e:	629a      	str	r2, [r3, #40]	@ 0x28
 8004950:	e028      	b.n	80049a4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004958:	0c1b      	lsrs	r3, r3, #16
 800495a:	68ba      	ldr	r2, [r7, #8]
 800495c:	4413      	add	r3, r2
 800495e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004960:	2300      	movs	r3, #0
 8004962:	73fb      	strb	r3, [r7, #15]
 8004964:	e00d      	b.n	8004982 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681a      	ldr	r2, [r3, #0]
 800496a:	7bfb      	ldrb	r3, [r7, #15]
 800496c:	3340      	adds	r3, #64	@ 0x40
 800496e:	009b      	lsls	r3, r3, #2
 8004970:	4413      	add	r3, r2
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	0c1b      	lsrs	r3, r3, #16
 8004976:	68ba      	ldr	r2, [r7, #8]
 8004978:	4413      	add	r3, r2
 800497a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800497c:	7bfb      	ldrb	r3, [r7, #15]
 800497e:	3301      	adds	r3, #1
 8004980:	73fb      	strb	r3, [r7, #15]
 8004982:	7bfa      	ldrb	r2, [r7, #15]
 8004984:	78fb      	ldrb	r3, [r7, #3]
 8004986:	3b01      	subs	r3, #1
 8004988:	429a      	cmp	r2, r3
 800498a:	d3ec      	bcc.n	8004966 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800498c:	883b      	ldrh	r3, [r7, #0]
 800498e:	0418      	lsls	r0, r3, #16
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6819      	ldr	r1, [r3, #0]
 8004994:	78fb      	ldrb	r3, [r7, #3]
 8004996:	3b01      	subs	r3, #1
 8004998:	68ba      	ldr	r2, [r7, #8]
 800499a:	4302      	orrs	r2, r0
 800499c:	3340      	adds	r3, #64	@ 0x40
 800499e:	009b      	lsls	r3, r3, #2
 80049a0:	440b      	add	r3, r1
 80049a2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80049a4:	2300      	movs	r3, #0
}
 80049a6:	4618      	mov	r0, r3
 80049a8:	3714      	adds	r7, #20
 80049aa:	46bd      	mov	sp, r7
 80049ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b0:	4770      	bx	lr

080049b2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80049b2:	b480      	push	{r7}
 80049b4:	b083      	sub	sp, #12
 80049b6:	af00      	add	r7, sp, #0
 80049b8:	6078      	str	r0, [r7, #4]
 80049ba:	460b      	mov	r3, r1
 80049bc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	887a      	ldrh	r2, [r7, #2]
 80049c4:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80049c6:	2300      	movs	r3, #0
}
 80049c8:	4618      	mov	r0, r3
 80049ca:	370c      	adds	r7, #12
 80049cc:	46bd      	mov	sp, r7
 80049ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d2:	4770      	bx	lr

080049d4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80049d4:	b480      	push	{r7}
 80049d6:	b083      	sub	sp, #12
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
 80049dc:	460b      	mov	r3, r1
 80049de:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80049e0:	bf00      	nop
 80049e2:	370c      	adds	r7, #12
 80049e4:	46bd      	mov	sp, r7
 80049e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ea:	4770      	bx	lr

080049ec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b086      	sub	sp, #24
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d101      	bne.n	80049fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80049fa:	2301      	movs	r3, #1
 80049fc:	e267      	b.n	8004ece <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f003 0301 	and.w	r3, r3, #1
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d075      	beq.n	8004af6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004a0a:	4b88      	ldr	r3, [pc, #544]	@ (8004c2c <HAL_RCC_OscConfig+0x240>)
 8004a0c:	689b      	ldr	r3, [r3, #8]
 8004a0e:	f003 030c 	and.w	r3, r3, #12
 8004a12:	2b04      	cmp	r3, #4
 8004a14:	d00c      	beq.n	8004a30 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a16:	4b85      	ldr	r3, [pc, #532]	@ (8004c2c <HAL_RCC_OscConfig+0x240>)
 8004a18:	689b      	ldr	r3, [r3, #8]
 8004a1a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004a1e:	2b08      	cmp	r3, #8
 8004a20:	d112      	bne.n	8004a48 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a22:	4b82      	ldr	r3, [pc, #520]	@ (8004c2c <HAL_RCC_OscConfig+0x240>)
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a2a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004a2e:	d10b      	bne.n	8004a48 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a30:	4b7e      	ldr	r3, [pc, #504]	@ (8004c2c <HAL_RCC_OscConfig+0x240>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d05b      	beq.n	8004af4 <HAL_RCC_OscConfig+0x108>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	685b      	ldr	r3, [r3, #4]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d157      	bne.n	8004af4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004a44:	2301      	movs	r3, #1
 8004a46:	e242      	b.n	8004ece <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	685b      	ldr	r3, [r3, #4]
 8004a4c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a50:	d106      	bne.n	8004a60 <HAL_RCC_OscConfig+0x74>
 8004a52:	4b76      	ldr	r3, [pc, #472]	@ (8004c2c <HAL_RCC_OscConfig+0x240>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4a75      	ldr	r2, [pc, #468]	@ (8004c2c <HAL_RCC_OscConfig+0x240>)
 8004a58:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a5c:	6013      	str	r3, [r2, #0]
 8004a5e:	e01d      	b.n	8004a9c <HAL_RCC_OscConfig+0xb0>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004a68:	d10c      	bne.n	8004a84 <HAL_RCC_OscConfig+0x98>
 8004a6a:	4b70      	ldr	r3, [pc, #448]	@ (8004c2c <HAL_RCC_OscConfig+0x240>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4a6f      	ldr	r2, [pc, #444]	@ (8004c2c <HAL_RCC_OscConfig+0x240>)
 8004a70:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004a74:	6013      	str	r3, [r2, #0]
 8004a76:	4b6d      	ldr	r3, [pc, #436]	@ (8004c2c <HAL_RCC_OscConfig+0x240>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4a6c      	ldr	r2, [pc, #432]	@ (8004c2c <HAL_RCC_OscConfig+0x240>)
 8004a7c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a80:	6013      	str	r3, [r2, #0]
 8004a82:	e00b      	b.n	8004a9c <HAL_RCC_OscConfig+0xb0>
 8004a84:	4b69      	ldr	r3, [pc, #420]	@ (8004c2c <HAL_RCC_OscConfig+0x240>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a68      	ldr	r2, [pc, #416]	@ (8004c2c <HAL_RCC_OscConfig+0x240>)
 8004a8a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004a8e:	6013      	str	r3, [r2, #0]
 8004a90:	4b66      	ldr	r3, [pc, #408]	@ (8004c2c <HAL_RCC_OscConfig+0x240>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a65      	ldr	r2, [pc, #404]	@ (8004c2c <HAL_RCC_OscConfig+0x240>)
 8004a96:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004a9a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	685b      	ldr	r3, [r3, #4]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d013      	beq.n	8004acc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004aa4:	f7fd fade 	bl	8002064 <HAL_GetTick>
 8004aa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004aaa:	e008      	b.n	8004abe <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004aac:	f7fd fada 	bl	8002064 <HAL_GetTick>
 8004ab0:	4602      	mov	r2, r0
 8004ab2:	693b      	ldr	r3, [r7, #16]
 8004ab4:	1ad3      	subs	r3, r2, r3
 8004ab6:	2b64      	cmp	r3, #100	@ 0x64
 8004ab8:	d901      	bls.n	8004abe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004aba:	2303      	movs	r3, #3
 8004abc:	e207      	b.n	8004ece <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004abe:	4b5b      	ldr	r3, [pc, #364]	@ (8004c2c <HAL_RCC_OscConfig+0x240>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d0f0      	beq.n	8004aac <HAL_RCC_OscConfig+0xc0>
 8004aca:	e014      	b.n	8004af6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004acc:	f7fd faca 	bl	8002064 <HAL_GetTick>
 8004ad0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ad2:	e008      	b.n	8004ae6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ad4:	f7fd fac6 	bl	8002064 <HAL_GetTick>
 8004ad8:	4602      	mov	r2, r0
 8004ada:	693b      	ldr	r3, [r7, #16]
 8004adc:	1ad3      	subs	r3, r2, r3
 8004ade:	2b64      	cmp	r3, #100	@ 0x64
 8004ae0:	d901      	bls.n	8004ae6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004ae2:	2303      	movs	r3, #3
 8004ae4:	e1f3      	b.n	8004ece <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ae6:	4b51      	ldr	r3, [pc, #324]	@ (8004c2c <HAL_RCC_OscConfig+0x240>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d1f0      	bne.n	8004ad4 <HAL_RCC_OscConfig+0xe8>
 8004af2:	e000      	b.n	8004af6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004af4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f003 0302 	and.w	r3, r3, #2
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d063      	beq.n	8004bca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004b02:	4b4a      	ldr	r3, [pc, #296]	@ (8004c2c <HAL_RCC_OscConfig+0x240>)
 8004b04:	689b      	ldr	r3, [r3, #8]
 8004b06:	f003 030c 	and.w	r3, r3, #12
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d00b      	beq.n	8004b26 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b0e:	4b47      	ldr	r3, [pc, #284]	@ (8004c2c <HAL_RCC_OscConfig+0x240>)
 8004b10:	689b      	ldr	r3, [r3, #8]
 8004b12:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004b16:	2b08      	cmp	r3, #8
 8004b18:	d11c      	bne.n	8004b54 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b1a:	4b44      	ldr	r3, [pc, #272]	@ (8004c2c <HAL_RCC_OscConfig+0x240>)
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d116      	bne.n	8004b54 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b26:	4b41      	ldr	r3, [pc, #260]	@ (8004c2c <HAL_RCC_OscConfig+0x240>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f003 0302 	and.w	r3, r3, #2
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d005      	beq.n	8004b3e <HAL_RCC_OscConfig+0x152>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	68db      	ldr	r3, [r3, #12]
 8004b36:	2b01      	cmp	r3, #1
 8004b38:	d001      	beq.n	8004b3e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	e1c7      	b.n	8004ece <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b3e:	4b3b      	ldr	r3, [pc, #236]	@ (8004c2c <HAL_RCC_OscConfig+0x240>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	691b      	ldr	r3, [r3, #16]
 8004b4a:	00db      	lsls	r3, r3, #3
 8004b4c:	4937      	ldr	r1, [pc, #220]	@ (8004c2c <HAL_RCC_OscConfig+0x240>)
 8004b4e:	4313      	orrs	r3, r2
 8004b50:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b52:	e03a      	b.n	8004bca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	68db      	ldr	r3, [r3, #12]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d020      	beq.n	8004b9e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b5c:	4b34      	ldr	r3, [pc, #208]	@ (8004c30 <HAL_RCC_OscConfig+0x244>)
 8004b5e:	2201      	movs	r2, #1
 8004b60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b62:	f7fd fa7f 	bl	8002064 <HAL_GetTick>
 8004b66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b68:	e008      	b.n	8004b7c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b6a:	f7fd fa7b 	bl	8002064 <HAL_GetTick>
 8004b6e:	4602      	mov	r2, r0
 8004b70:	693b      	ldr	r3, [r7, #16]
 8004b72:	1ad3      	subs	r3, r2, r3
 8004b74:	2b02      	cmp	r3, #2
 8004b76:	d901      	bls.n	8004b7c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004b78:	2303      	movs	r3, #3
 8004b7a:	e1a8      	b.n	8004ece <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b7c:	4b2b      	ldr	r3, [pc, #172]	@ (8004c2c <HAL_RCC_OscConfig+0x240>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f003 0302 	and.w	r3, r3, #2
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d0f0      	beq.n	8004b6a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b88:	4b28      	ldr	r3, [pc, #160]	@ (8004c2c <HAL_RCC_OscConfig+0x240>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	691b      	ldr	r3, [r3, #16]
 8004b94:	00db      	lsls	r3, r3, #3
 8004b96:	4925      	ldr	r1, [pc, #148]	@ (8004c2c <HAL_RCC_OscConfig+0x240>)
 8004b98:	4313      	orrs	r3, r2
 8004b9a:	600b      	str	r3, [r1, #0]
 8004b9c:	e015      	b.n	8004bca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b9e:	4b24      	ldr	r3, [pc, #144]	@ (8004c30 <HAL_RCC_OscConfig+0x244>)
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ba4:	f7fd fa5e 	bl	8002064 <HAL_GetTick>
 8004ba8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004baa:	e008      	b.n	8004bbe <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004bac:	f7fd fa5a 	bl	8002064 <HAL_GetTick>
 8004bb0:	4602      	mov	r2, r0
 8004bb2:	693b      	ldr	r3, [r7, #16]
 8004bb4:	1ad3      	subs	r3, r2, r3
 8004bb6:	2b02      	cmp	r3, #2
 8004bb8:	d901      	bls.n	8004bbe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004bba:	2303      	movs	r3, #3
 8004bbc:	e187      	b.n	8004ece <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004bbe:	4b1b      	ldr	r3, [pc, #108]	@ (8004c2c <HAL_RCC_OscConfig+0x240>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f003 0302 	and.w	r3, r3, #2
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d1f0      	bne.n	8004bac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f003 0308 	and.w	r3, r3, #8
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d036      	beq.n	8004c44 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	695b      	ldr	r3, [r3, #20]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d016      	beq.n	8004c0c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004bde:	4b15      	ldr	r3, [pc, #84]	@ (8004c34 <HAL_RCC_OscConfig+0x248>)
 8004be0:	2201      	movs	r2, #1
 8004be2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004be4:	f7fd fa3e 	bl	8002064 <HAL_GetTick>
 8004be8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004bea:	e008      	b.n	8004bfe <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004bec:	f7fd fa3a 	bl	8002064 <HAL_GetTick>
 8004bf0:	4602      	mov	r2, r0
 8004bf2:	693b      	ldr	r3, [r7, #16]
 8004bf4:	1ad3      	subs	r3, r2, r3
 8004bf6:	2b02      	cmp	r3, #2
 8004bf8:	d901      	bls.n	8004bfe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004bfa:	2303      	movs	r3, #3
 8004bfc:	e167      	b.n	8004ece <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004bfe:	4b0b      	ldr	r3, [pc, #44]	@ (8004c2c <HAL_RCC_OscConfig+0x240>)
 8004c00:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c02:	f003 0302 	and.w	r3, r3, #2
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d0f0      	beq.n	8004bec <HAL_RCC_OscConfig+0x200>
 8004c0a:	e01b      	b.n	8004c44 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c0c:	4b09      	ldr	r3, [pc, #36]	@ (8004c34 <HAL_RCC_OscConfig+0x248>)
 8004c0e:	2200      	movs	r2, #0
 8004c10:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c12:	f7fd fa27 	bl	8002064 <HAL_GetTick>
 8004c16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c18:	e00e      	b.n	8004c38 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c1a:	f7fd fa23 	bl	8002064 <HAL_GetTick>
 8004c1e:	4602      	mov	r2, r0
 8004c20:	693b      	ldr	r3, [r7, #16]
 8004c22:	1ad3      	subs	r3, r2, r3
 8004c24:	2b02      	cmp	r3, #2
 8004c26:	d907      	bls.n	8004c38 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004c28:	2303      	movs	r3, #3
 8004c2a:	e150      	b.n	8004ece <HAL_RCC_OscConfig+0x4e2>
 8004c2c:	40023800 	.word	0x40023800
 8004c30:	42470000 	.word	0x42470000
 8004c34:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c38:	4b88      	ldr	r3, [pc, #544]	@ (8004e5c <HAL_RCC_OscConfig+0x470>)
 8004c3a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c3c:	f003 0302 	and.w	r3, r3, #2
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d1ea      	bne.n	8004c1a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f003 0304 	and.w	r3, r3, #4
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	f000 8097 	beq.w	8004d80 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c52:	2300      	movs	r3, #0
 8004c54:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c56:	4b81      	ldr	r3, [pc, #516]	@ (8004e5c <HAL_RCC_OscConfig+0x470>)
 8004c58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d10f      	bne.n	8004c82 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c62:	2300      	movs	r3, #0
 8004c64:	60bb      	str	r3, [r7, #8]
 8004c66:	4b7d      	ldr	r3, [pc, #500]	@ (8004e5c <HAL_RCC_OscConfig+0x470>)
 8004c68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c6a:	4a7c      	ldr	r2, [pc, #496]	@ (8004e5c <HAL_RCC_OscConfig+0x470>)
 8004c6c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004c70:	6413      	str	r3, [r2, #64]	@ 0x40
 8004c72:	4b7a      	ldr	r3, [pc, #488]	@ (8004e5c <HAL_RCC_OscConfig+0x470>)
 8004c74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c7a:	60bb      	str	r3, [r7, #8]
 8004c7c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c7e:	2301      	movs	r3, #1
 8004c80:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c82:	4b77      	ldr	r3, [pc, #476]	@ (8004e60 <HAL_RCC_OscConfig+0x474>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d118      	bne.n	8004cc0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004c8e:	4b74      	ldr	r3, [pc, #464]	@ (8004e60 <HAL_RCC_OscConfig+0x474>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4a73      	ldr	r2, [pc, #460]	@ (8004e60 <HAL_RCC_OscConfig+0x474>)
 8004c94:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c98:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c9a:	f7fd f9e3 	bl	8002064 <HAL_GetTick>
 8004c9e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ca0:	e008      	b.n	8004cb4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ca2:	f7fd f9df 	bl	8002064 <HAL_GetTick>
 8004ca6:	4602      	mov	r2, r0
 8004ca8:	693b      	ldr	r3, [r7, #16]
 8004caa:	1ad3      	subs	r3, r2, r3
 8004cac:	2b02      	cmp	r3, #2
 8004cae:	d901      	bls.n	8004cb4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004cb0:	2303      	movs	r3, #3
 8004cb2:	e10c      	b.n	8004ece <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cb4:	4b6a      	ldr	r3, [pc, #424]	@ (8004e60 <HAL_RCC_OscConfig+0x474>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d0f0      	beq.n	8004ca2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	689b      	ldr	r3, [r3, #8]
 8004cc4:	2b01      	cmp	r3, #1
 8004cc6:	d106      	bne.n	8004cd6 <HAL_RCC_OscConfig+0x2ea>
 8004cc8:	4b64      	ldr	r3, [pc, #400]	@ (8004e5c <HAL_RCC_OscConfig+0x470>)
 8004cca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ccc:	4a63      	ldr	r2, [pc, #396]	@ (8004e5c <HAL_RCC_OscConfig+0x470>)
 8004cce:	f043 0301 	orr.w	r3, r3, #1
 8004cd2:	6713      	str	r3, [r2, #112]	@ 0x70
 8004cd4:	e01c      	b.n	8004d10 <HAL_RCC_OscConfig+0x324>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	689b      	ldr	r3, [r3, #8]
 8004cda:	2b05      	cmp	r3, #5
 8004cdc:	d10c      	bne.n	8004cf8 <HAL_RCC_OscConfig+0x30c>
 8004cde:	4b5f      	ldr	r3, [pc, #380]	@ (8004e5c <HAL_RCC_OscConfig+0x470>)
 8004ce0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ce2:	4a5e      	ldr	r2, [pc, #376]	@ (8004e5c <HAL_RCC_OscConfig+0x470>)
 8004ce4:	f043 0304 	orr.w	r3, r3, #4
 8004ce8:	6713      	str	r3, [r2, #112]	@ 0x70
 8004cea:	4b5c      	ldr	r3, [pc, #368]	@ (8004e5c <HAL_RCC_OscConfig+0x470>)
 8004cec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cee:	4a5b      	ldr	r2, [pc, #364]	@ (8004e5c <HAL_RCC_OscConfig+0x470>)
 8004cf0:	f043 0301 	orr.w	r3, r3, #1
 8004cf4:	6713      	str	r3, [r2, #112]	@ 0x70
 8004cf6:	e00b      	b.n	8004d10 <HAL_RCC_OscConfig+0x324>
 8004cf8:	4b58      	ldr	r3, [pc, #352]	@ (8004e5c <HAL_RCC_OscConfig+0x470>)
 8004cfa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cfc:	4a57      	ldr	r2, [pc, #348]	@ (8004e5c <HAL_RCC_OscConfig+0x470>)
 8004cfe:	f023 0301 	bic.w	r3, r3, #1
 8004d02:	6713      	str	r3, [r2, #112]	@ 0x70
 8004d04:	4b55      	ldr	r3, [pc, #340]	@ (8004e5c <HAL_RCC_OscConfig+0x470>)
 8004d06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d08:	4a54      	ldr	r2, [pc, #336]	@ (8004e5c <HAL_RCC_OscConfig+0x470>)
 8004d0a:	f023 0304 	bic.w	r3, r3, #4
 8004d0e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	689b      	ldr	r3, [r3, #8]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d015      	beq.n	8004d44 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d18:	f7fd f9a4 	bl	8002064 <HAL_GetTick>
 8004d1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d1e:	e00a      	b.n	8004d36 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d20:	f7fd f9a0 	bl	8002064 <HAL_GetTick>
 8004d24:	4602      	mov	r2, r0
 8004d26:	693b      	ldr	r3, [r7, #16]
 8004d28:	1ad3      	subs	r3, r2, r3
 8004d2a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d901      	bls.n	8004d36 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004d32:	2303      	movs	r3, #3
 8004d34:	e0cb      	b.n	8004ece <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d36:	4b49      	ldr	r3, [pc, #292]	@ (8004e5c <HAL_RCC_OscConfig+0x470>)
 8004d38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d3a:	f003 0302 	and.w	r3, r3, #2
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d0ee      	beq.n	8004d20 <HAL_RCC_OscConfig+0x334>
 8004d42:	e014      	b.n	8004d6e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d44:	f7fd f98e 	bl	8002064 <HAL_GetTick>
 8004d48:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d4a:	e00a      	b.n	8004d62 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d4c:	f7fd f98a 	bl	8002064 <HAL_GetTick>
 8004d50:	4602      	mov	r2, r0
 8004d52:	693b      	ldr	r3, [r7, #16]
 8004d54:	1ad3      	subs	r3, r2, r3
 8004d56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d901      	bls.n	8004d62 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004d5e:	2303      	movs	r3, #3
 8004d60:	e0b5      	b.n	8004ece <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d62:	4b3e      	ldr	r3, [pc, #248]	@ (8004e5c <HAL_RCC_OscConfig+0x470>)
 8004d64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d66:	f003 0302 	and.w	r3, r3, #2
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d1ee      	bne.n	8004d4c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004d6e:	7dfb      	ldrb	r3, [r7, #23]
 8004d70:	2b01      	cmp	r3, #1
 8004d72:	d105      	bne.n	8004d80 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d74:	4b39      	ldr	r3, [pc, #228]	@ (8004e5c <HAL_RCC_OscConfig+0x470>)
 8004d76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d78:	4a38      	ldr	r2, [pc, #224]	@ (8004e5c <HAL_RCC_OscConfig+0x470>)
 8004d7a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004d7e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	699b      	ldr	r3, [r3, #24]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	f000 80a1 	beq.w	8004ecc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004d8a:	4b34      	ldr	r3, [pc, #208]	@ (8004e5c <HAL_RCC_OscConfig+0x470>)
 8004d8c:	689b      	ldr	r3, [r3, #8]
 8004d8e:	f003 030c 	and.w	r3, r3, #12
 8004d92:	2b08      	cmp	r3, #8
 8004d94:	d05c      	beq.n	8004e50 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	699b      	ldr	r3, [r3, #24]
 8004d9a:	2b02      	cmp	r3, #2
 8004d9c:	d141      	bne.n	8004e22 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d9e:	4b31      	ldr	r3, [pc, #196]	@ (8004e64 <HAL_RCC_OscConfig+0x478>)
 8004da0:	2200      	movs	r2, #0
 8004da2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004da4:	f7fd f95e 	bl	8002064 <HAL_GetTick>
 8004da8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004daa:	e008      	b.n	8004dbe <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004dac:	f7fd f95a 	bl	8002064 <HAL_GetTick>
 8004db0:	4602      	mov	r2, r0
 8004db2:	693b      	ldr	r3, [r7, #16]
 8004db4:	1ad3      	subs	r3, r2, r3
 8004db6:	2b02      	cmp	r3, #2
 8004db8:	d901      	bls.n	8004dbe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004dba:	2303      	movs	r3, #3
 8004dbc:	e087      	b.n	8004ece <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004dbe:	4b27      	ldr	r3, [pc, #156]	@ (8004e5c <HAL_RCC_OscConfig+0x470>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d1f0      	bne.n	8004dac <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	69da      	ldr	r2, [r3, #28]
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6a1b      	ldr	r3, [r3, #32]
 8004dd2:	431a      	orrs	r2, r3
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dd8:	019b      	lsls	r3, r3, #6
 8004dda:	431a      	orrs	r2, r3
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004de0:	085b      	lsrs	r3, r3, #1
 8004de2:	3b01      	subs	r3, #1
 8004de4:	041b      	lsls	r3, r3, #16
 8004de6:	431a      	orrs	r2, r3
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dec:	061b      	lsls	r3, r3, #24
 8004dee:	491b      	ldr	r1, [pc, #108]	@ (8004e5c <HAL_RCC_OscConfig+0x470>)
 8004df0:	4313      	orrs	r3, r2
 8004df2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004df4:	4b1b      	ldr	r3, [pc, #108]	@ (8004e64 <HAL_RCC_OscConfig+0x478>)
 8004df6:	2201      	movs	r2, #1
 8004df8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dfa:	f7fd f933 	bl	8002064 <HAL_GetTick>
 8004dfe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e00:	e008      	b.n	8004e14 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e02:	f7fd f92f 	bl	8002064 <HAL_GetTick>
 8004e06:	4602      	mov	r2, r0
 8004e08:	693b      	ldr	r3, [r7, #16]
 8004e0a:	1ad3      	subs	r3, r2, r3
 8004e0c:	2b02      	cmp	r3, #2
 8004e0e:	d901      	bls.n	8004e14 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004e10:	2303      	movs	r3, #3
 8004e12:	e05c      	b.n	8004ece <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e14:	4b11      	ldr	r3, [pc, #68]	@ (8004e5c <HAL_RCC_OscConfig+0x470>)
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d0f0      	beq.n	8004e02 <HAL_RCC_OscConfig+0x416>
 8004e20:	e054      	b.n	8004ecc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e22:	4b10      	ldr	r3, [pc, #64]	@ (8004e64 <HAL_RCC_OscConfig+0x478>)
 8004e24:	2200      	movs	r2, #0
 8004e26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e28:	f7fd f91c 	bl	8002064 <HAL_GetTick>
 8004e2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e2e:	e008      	b.n	8004e42 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e30:	f7fd f918 	bl	8002064 <HAL_GetTick>
 8004e34:	4602      	mov	r2, r0
 8004e36:	693b      	ldr	r3, [r7, #16]
 8004e38:	1ad3      	subs	r3, r2, r3
 8004e3a:	2b02      	cmp	r3, #2
 8004e3c:	d901      	bls.n	8004e42 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004e3e:	2303      	movs	r3, #3
 8004e40:	e045      	b.n	8004ece <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e42:	4b06      	ldr	r3, [pc, #24]	@ (8004e5c <HAL_RCC_OscConfig+0x470>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d1f0      	bne.n	8004e30 <HAL_RCC_OscConfig+0x444>
 8004e4e:	e03d      	b.n	8004ecc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	699b      	ldr	r3, [r3, #24]
 8004e54:	2b01      	cmp	r3, #1
 8004e56:	d107      	bne.n	8004e68 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004e58:	2301      	movs	r3, #1
 8004e5a:	e038      	b.n	8004ece <HAL_RCC_OscConfig+0x4e2>
 8004e5c:	40023800 	.word	0x40023800
 8004e60:	40007000 	.word	0x40007000
 8004e64:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004e68:	4b1b      	ldr	r3, [pc, #108]	@ (8004ed8 <HAL_RCC_OscConfig+0x4ec>)
 8004e6a:	685b      	ldr	r3, [r3, #4]
 8004e6c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	699b      	ldr	r3, [r3, #24]
 8004e72:	2b01      	cmp	r3, #1
 8004e74:	d028      	beq.n	8004ec8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e80:	429a      	cmp	r2, r3
 8004e82:	d121      	bne.n	8004ec8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e8e:	429a      	cmp	r2, r3
 8004e90:	d11a      	bne.n	8004ec8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004e92:	68fa      	ldr	r2, [r7, #12]
 8004e94:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004e98:	4013      	ands	r3, r2
 8004e9a:	687a      	ldr	r2, [r7, #4]
 8004e9c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004e9e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d111      	bne.n	8004ec8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004eae:	085b      	lsrs	r3, r3, #1
 8004eb0:	3b01      	subs	r3, #1
 8004eb2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004eb4:	429a      	cmp	r2, r3
 8004eb6:	d107      	bne.n	8004ec8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ec2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004ec4:	429a      	cmp	r2, r3
 8004ec6:	d001      	beq.n	8004ecc <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004ec8:	2301      	movs	r3, #1
 8004eca:	e000      	b.n	8004ece <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004ecc:	2300      	movs	r3, #0
}
 8004ece:	4618      	mov	r0, r3
 8004ed0:	3718      	adds	r7, #24
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	bd80      	pop	{r7, pc}
 8004ed6:	bf00      	nop
 8004ed8:	40023800 	.word	0x40023800

08004edc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b084      	sub	sp, #16
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
 8004ee4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d101      	bne.n	8004ef0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004eec:	2301      	movs	r3, #1
 8004eee:	e0cc      	b.n	800508a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004ef0:	4b68      	ldr	r3, [pc, #416]	@ (8005094 <HAL_RCC_ClockConfig+0x1b8>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f003 030f 	and.w	r3, r3, #15
 8004ef8:	683a      	ldr	r2, [r7, #0]
 8004efa:	429a      	cmp	r2, r3
 8004efc:	d90c      	bls.n	8004f18 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004efe:	4b65      	ldr	r3, [pc, #404]	@ (8005094 <HAL_RCC_ClockConfig+0x1b8>)
 8004f00:	683a      	ldr	r2, [r7, #0]
 8004f02:	b2d2      	uxtb	r2, r2
 8004f04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f06:	4b63      	ldr	r3, [pc, #396]	@ (8005094 <HAL_RCC_ClockConfig+0x1b8>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f003 030f 	and.w	r3, r3, #15
 8004f0e:	683a      	ldr	r2, [r7, #0]
 8004f10:	429a      	cmp	r2, r3
 8004f12:	d001      	beq.n	8004f18 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004f14:	2301      	movs	r3, #1
 8004f16:	e0b8      	b.n	800508a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f003 0302 	and.w	r3, r3, #2
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d020      	beq.n	8004f66 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f003 0304 	and.w	r3, r3, #4
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d005      	beq.n	8004f3c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004f30:	4b59      	ldr	r3, [pc, #356]	@ (8005098 <HAL_RCC_ClockConfig+0x1bc>)
 8004f32:	689b      	ldr	r3, [r3, #8]
 8004f34:	4a58      	ldr	r2, [pc, #352]	@ (8005098 <HAL_RCC_ClockConfig+0x1bc>)
 8004f36:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004f3a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f003 0308 	and.w	r3, r3, #8
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d005      	beq.n	8004f54 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004f48:	4b53      	ldr	r3, [pc, #332]	@ (8005098 <HAL_RCC_ClockConfig+0x1bc>)
 8004f4a:	689b      	ldr	r3, [r3, #8]
 8004f4c:	4a52      	ldr	r2, [pc, #328]	@ (8005098 <HAL_RCC_ClockConfig+0x1bc>)
 8004f4e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004f52:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f54:	4b50      	ldr	r3, [pc, #320]	@ (8005098 <HAL_RCC_ClockConfig+0x1bc>)
 8004f56:	689b      	ldr	r3, [r3, #8]
 8004f58:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	689b      	ldr	r3, [r3, #8]
 8004f60:	494d      	ldr	r1, [pc, #308]	@ (8005098 <HAL_RCC_ClockConfig+0x1bc>)
 8004f62:	4313      	orrs	r3, r2
 8004f64:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f003 0301 	and.w	r3, r3, #1
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d044      	beq.n	8004ffc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	685b      	ldr	r3, [r3, #4]
 8004f76:	2b01      	cmp	r3, #1
 8004f78:	d107      	bne.n	8004f8a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f7a:	4b47      	ldr	r3, [pc, #284]	@ (8005098 <HAL_RCC_ClockConfig+0x1bc>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d119      	bne.n	8004fba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f86:	2301      	movs	r3, #1
 8004f88:	e07f      	b.n	800508a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	685b      	ldr	r3, [r3, #4]
 8004f8e:	2b02      	cmp	r3, #2
 8004f90:	d003      	beq.n	8004f9a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004f96:	2b03      	cmp	r3, #3
 8004f98:	d107      	bne.n	8004faa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f9a:	4b3f      	ldr	r3, [pc, #252]	@ (8005098 <HAL_RCC_ClockConfig+0x1bc>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d109      	bne.n	8004fba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	e06f      	b.n	800508a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004faa:	4b3b      	ldr	r3, [pc, #236]	@ (8005098 <HAL_RCC_ClockConfig+0x1bc>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f003 0302 	and.w	r3, r3, #2
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d101      	bne.n	8004fba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	e067      	b.n	800508a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004fba:	4b37      	ldr	r3, [pc, #220]	@ (8005098 <HAL_RCC_ClockConfig+0x1bc>)
 8004fbc:	689b      	ldr	r3, [r3, #8]
 8004fbe:	f023 0203 	bic.w	r2, r3, #3
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	685b      	ldr	r3, [r3, #4]
 8004fc6:	4934      	ldr	r1, [pc, #208]	@ (8005098 <HAL_RCC_ClockConfig+0x1bc>)
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004fcc:	f7fd f84a 	bl	8002064 <HAL_GetTick>
 8004fd0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fd2:	e00a      	b.n	8004fea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004fd4:	f7fd f846 	bl	8002064 <HAL_GetTick>
 8004fd8:	4602      	mov	r2, r0
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	1ad3      	subs	r3, r2, r3
 8004fde:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d901      	bls.n	8004fea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004fe6:	2303      	movs	r3, #3
 8004fe8:	e04f      	b.n	800508a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fea:	4b2b      	ldr	r3, [pc, #172]	@ (8005098 <HAL_RCC_ClockConfig+0x1bc>)
 8004fec:	689b      	ldr	r3, [r3, #8]
 8004fee:	f003 020c 	and.w	r2, r3, #12
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	685b      	ldr	r3, [r3, #4]
 8004ff6:	009b      	lsls	r3, r3, #2
 8004ff8:	429a      	cmp	r2, r3
 8004ffa:	d1eb      	bne.n	8004fd4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004ffc:	4b25      	ldr	r3, [pc, #148]	@ (8005094 <HAL_RCC_ClockConfig+0x1b8>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f003 030f 	and.w	r3, r3, #15
 8005004:	683a      	ldr	r2, [r7, #0]
 8005006:	429a      	cmp	r2, r3
 8005008:	d20c      	bcs.n	8005024 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800500a:	4b22      	ldr	r3, [pc, #136]	@ (8005094 <HAL_RCC_ClockConfig+0x1b8>)
 800500c:	683a      	ldr	r2, [r7, #0]
 800500e:	b2d2      	uxtb	r2, r2
 8005010:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005012:	4b20      	ldr	r3, [pc, #128]	@ (8005094 <HAL_RCC_ClockConfig+0x1b8>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f003 030f 	and.w	r3, r3, #15
 800501a:	683a      	ldr	r2, [r7, #0]
 800501c:	429a      	cmp	r2, r3
 800501e:	d001      	beq.n	8005024 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005020:	2301      	movs	r3, #1
 8005022:	e032      	b.n	800508a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f003 0304 	and.w	r3, r3, #4
 800502c:	2b00      	cmp	r3, #0
 800502e:	d008      	beq.n	8005042 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005030:	4b19      	ldr	r3, [pc, #100]	@ (8005098 <HAL_RCC_ClockConfig+0x1bc>)
 8005032:	689b      	ldr	r3, [r3, #8]
 8005034:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	68db      	ldr	r3, [r3, #12]
 800503c:	4916      	ldr	r1, [pc, #88]	@ (8005098 <HAL_RCC_ClockConfig+0x1bc>)
 800503e:	4313      	orrs	r3, r2
 8005040:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f003 0308 	and.w	r3, r3, #8
 800504a:	2b00      	cmp	r3, #0
 800504c:	d009      	beq.n	8005062 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800504e:	4b12      	ldr	r3, [pc, #72]	@ (8005098 <HAL_RCC_ClockConfig+0x1bc>)
 8005050:	689b      	ldr	r3, [r3, #8]
 8005052:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	691b      	ldr	r3, [r3, #16]
 800505a:	00db      	lsls	r3, r3, #3
 800505c:	490e      	ldr	r1, [pc, #56]	@ (8005098 <HAL_RCC_ClockConfig+0x1bc>)
 800505e:	4313      	orrs	r3, r2
 8005060:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005062:	f000 f821 	bl	80050a8 <HAL_RCC_GetSysClockFreq>
 8005066:	4602      	mov	r2, r0
 8005068:	4b0b      	ldr	r3, [pc, #44]	@ (8005098 <HAL_RCC_ClockConfig+0x1bc>)
 800506a:	689b      	ldr	r3, [r3, #8]
 800506c:	091b      	lsrs	r3, r3, #4
 800506e:	f003 030f 	and.w	r3, r3, #15
 8005072:	490a      	ldr	r1, [pc, #40]	@ (800509c <HAL_RCC_ClockConfig+0x1c0>)
 8005074:	5ccb      	ldrb	r3, [r1, r3]
 8005076:	fa22 f303 	lsr.w	r3, r2, r3
 800507a:	4a09      	ldr	r2, [pc, #36]	@ (80050a0 <HAL_RCC_ClockConfig+0x1c4>)
 800507c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800507e:	4b09      	ldr	r3, [pc, #36]	@ (80050a4 <HAL_RCC_ClockConfig+0x1c8>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	4618      	mov	r0, r3
 8005084:	f7fc ffaa 	bl	8001fdc <HAL_InitTick>

  return HAL_OK;
 8005088:	2300      	movs	r3, #0
}
 800508a:	4618      	mov	r0, r3
 800508c:	3710      	adds	r7, #16
 800508e:	46bd      	mov	sp, r7
 8005090:	bd80      	pop	{r7, pc}
 8005092:	bf00      	nop
 8005094:	40023c00 	.word	0x40023c00
 8005098:	40023800 	.word	0x40023800
 800509c:	0800c0d8 	.word	0x0800c0d8
 80050a0:	20000000 	.word	0x20000000
 80050a4:	20000014 	.word	0x20000014

080050a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80050a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80050ac:	b094      	sub	sp, #80	@ 0x50
 80050ae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80050b0:	2300      	movs	r3, #0
 80050b2:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80050b4:	2300      	movs	r3, #0
 80050b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80050b8:	2300      	movs	r3, #0
 80050ba:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80050bc:	2300      	movs	r3, #0
 80050be:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80050c0:	4b79      	ldr	r3, [pc, #484]	@ (80052a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80050c2:	689b      	ldr	r3, [r3, #8]
 80050c4:	f003 030c 	and.w	r3, r3, #12
 80050c8:	2b08      	cmp	r3, #8
 80050ca:	d00d      	beq.n	80050e8 <HAL_RCC_GetSysClockFreq+0x40>
 80050cc:	2b08      	cmp	r3, #8
 80050ce:	f200 80e1 	bhi.w	8005294 <HAL_RCC_GetSysClockFreq+0x1ec>
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d002      	beq.n	80050dc <HAL_RCC_GetSysClockFreq+0x34>
 80050d6:	2b04      	cmp	r3, #4
 80050d8:	d003      	beq.n	80050e2 <HAL_RCC_GetSysClockFreq+0x3a>
 80050da:	e0db      	b.n	8005294 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80050dc:	4b73      	ldr	r3, [pc, #460]	@ (80052ac <HAL_RCC_GetSysClockFreq+0x204>)
 80050de:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80050e0:	e0db      	b.n	800529a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80050e2:	4b73      	ldr	r3, [pc, #460]	@ (80052b0 <HAL_RCC_GetSysClockFreq+0x208>)
 80050e4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80050e6:	e0d8      	b.n	800529a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80050e8:	4b6f      	ldr	r3, [pc, #444]	@ (80052a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80050ea:	685b      	ldr	r3, [r3, #4]
 80050ec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80050f0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80050f2:	4b6d      	ldr	r3, [pc, #436]	@ (80052a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80050f4:	685b      	ldr	r3, [r3, #4]
 80050f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d063      	beq.n	80051c6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80050fe:	4b6a      	ldr	r3, [pc, #424]	@ (80052a8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005100:	685b      	ldr	r3, [r3, #4]
 8005102:	099b      	lsrs	r3, r3, #6
 8005104:	2200      	movs	r2, #0
 8005106:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005108:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800510a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800510c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005110:	633b      	str	r3, [r7, #48]	@ 0x30
 8005112:	2300      	movs	r3, #0
 8005114:	637b      	str	r3, [r7, #52]	@ 0x34
 8005116:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800511a:	4622      	mov	r2, r4
 800511c:	462b      	mov	r3, r5
 800511e:	f04f 0000 	mov.w	r0, #0
 8005122:	f04f 0100 	mov.w	r1, #0
 8005126:	0159      	lsls	r1, r3, #5
 8005128:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800512c:	0150      	lsls	r0, r2, #5
 800512e:	4602      	mov	r2, r0
 8005130:	460b      	mov	r3, r1
 8005132:	4621      	mov	r1, r4
 8005134:	1a51      	subs	r1, r2, r1
 8005136:	6139      	str	r1, [r7, #16]
 8005138:	4629      	mov	r1, r5
 800513a:	eb63 0301 	sbc.w	r3, r3, r1
 800513e:	617b      	str	r3, [r7, #20]
 8005140:	f04f 0200 	mov.w	r2, #0
 8005144:	f04f 0300 	mov.w	r3, #0
 8005148:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800514c:	4659      	mov	r1, fp
 800514e:	018b      	lsls	r3, r1, #6
 8005150:	4651      	mov	r1, sl
 8005152:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005156:	4651      	mov	r1, sl
 8005158:	018a      	lsls	r2, r1, #6
 800515a:	4651      	mov	r1, sl
 800515c:	ebb2 0801 	subs.w	r8, r2, r1
 8005160:	4659      	mov	r1, fp
 8005162:	eb63 0901 	sbc.w	r9, r3, r1
 8005166:	f04f 0200 	mov.w	r2, #0
 800516a:	f04f 0300 	mov.w	r3, #0
 800516e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005172:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005176:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800517a:	4690      	mov	r8, r2
 800517c:	4699      	mov	r9, r3
 800517e:	4623      	mov	r3, r4
 8005180:	eb18 0303 	adds.w	r3, r8, r3
 8005184:	60bb      	str	r3, [r7, #8]
 8005186:	462b      	mov	r3, r5
 8005188:	eb49 0303 	adc.w	r3, r9, r3
 800518c:	60fb      	str	r3, [r7, #12]
 800518e:	f04f 0200 	mov.w	r2, #0
 8005192:	f04f 0300 	mov.w	r3, #0
 8005196:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800519a:	4629      	mov	r1, r5
 800519c:	024b      	lsls	r3, r1, #9
 800519e:	4621      	mov	r1, r4
 80051a0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80051a4:	4621      	mov	r1, r4
 80051a6:	024a      	lsls	r2, r1, #9
 80051a8:	4610      	mov	r0, r2
 80051aa:	4619      	mov	r1, r3
 80051ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80051ae:	2200      	movs	r2, #0
 80051b0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80051b2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80051b4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80051b8:	f7fb f86a 	bl	8000290 <__aeabi_uldivmod>
 80051bc:	4602      	mov	r2, r0
 80051be:	460b      	mov	r3, r1
 80051c0:	4613      	mov	r3, r2
 80051c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80051c4:	e058      	b.n	8005278 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80051c6:	4b38      	ldr	r3, [pc, #224]	@ (80052a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80051c8:	685b      	ldr	r3, [r3, #4]
 80051ca:	099b      	lsrs	r3, r3, #6
 80051cc:	2200      	movs	r2, #0
 80051ce:	4618      	mov	r0, r3
 80051d0:	4611      	mov	r1, r2
 80051d2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80051d6:	623b      	str	r3, [r7, #32]
 80051d8:	2300      	movs	r3, #0
 80051da:	627b      	str	r3, [r7, #36]	@ 0x24
 80051dc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80051e0:	4642      	mov	r2, r8
 80051e2:	464b      	mov	r3, r9
 80051e4:	f04f 0000 	mov.w	r0, #0
 80051e8:	f04f 0100 	mov.w	r1, #0
 80051ec:	0159      	lsls	r1, r3, #5
 80051ee:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80051f2:	0150      	lsls	r0, r2, #5
 80051f4:	4602      	mov	r2, r0
 80051f6:	460b      	mov	r3, r1
 80051f8:	4641      	mov	r1, r8
 80051fa:	ebb2 0a01 	subs.w	sl, r2, r1
 80051fe:	4649      	mov	r1, r9
 8005200:	eb63 0b01 	sbc.w	fp, r3, r1
 8005204:	f04f 0200 	mov.w	r2, #0
 8005208:	f04f 0300 	mov.w	r3, #0
 800520c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005210:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005214:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005218:	ebb2 040a 	subs.w	r4, r2, sl
 800521c:	eb63 050b 	sbc.w	r5, r3, fp
 8005220:	f04f 0200 	mov.w	r2, #0
 8005224:	f04f 0300 	mov.w	r3, #0
 8005228:	00eb      	lsls	r3, r5, #3
 800522a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800522e:	00e2      	lsls	r2, r4, #3
 8005230:	4614      	mov	r4, r2
 8005232:	461d      	mov	r5, r3
 8005234:	4643      	mov	r3, r8
 8005236:	18e3      	adds	r3, r4, r3
 8005238:	603b      	str	r3, [r7, #0]
 800523a:	464b      	mov	r3, r9
 800523c:	eb45 0303 	adc.w	r3, r5, r3
 8005240:	607b      	str	r3, [r7, #4]
 8005242:	f04f 0200 	mov.w	r2, #0
 8005246:	f04f 0300 	mov.w	r3, #0
 800524a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800524e:	4629      	mov	r1, r5
 8005250:	028b      	lsls	r3, r1, #10
 8005252:	4621      	mov	r1, r4
 8005254:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005258:	4621      	mov	r1, r4
 800525a:	028a      	lsls	r2, r1, #10
 800525c:	4610      	mov	r0, r2
 800525e:	4619      	mov	r1, r3
 8005260:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005262:	2200      	movs	r2, #0
 8005264:	61bb      	str	r3, [r7, #24]
 8005266:	61fa      	str	r2, [r7, #28]
 8005268:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800526c:	f7fb f810 	bl	8000290 <__aeabi_uldivmod>
 8005270:	4602      	mov	r2, r0
 8005272:	460b      	mov	r3, r1
 8005274:	4613      	mov	r3, r2
 8005276:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005278:	4b0b      	ldr	r3, [pc, #44]	@ (80052a8 <HAL_RCC_GetSysClockFreq+0x200>)
 800527a:	685b      	ldr	r3, [r3, #4]
 800527c:	0c1b      	lsrs	r3, r3, #16
 800527e:	f003 0303 	and.w	r3, r3, #3
 8005282:	3301      	adds	r3, #1
 8005284:	005b      	lsls	r3, r3, #1
 8005286:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8005288:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800528a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800528c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005290:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005292:	e002      	b.n	800529a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005294:	4b05      	ldr	r3, [pc, #20]	@ (80052ac <HAL_RCC_GetSysClockFreq+0x204>)
 8005296:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005298:	bf00      	nop
    }
  }
  return sysclockfreq;
 800529a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800529c:	4618      	mov	r0, r3
 800529e:	3750      	adds	r7, #80	@ 0x50
 80052a0:	46bd      	mov	sp, r7
 80052a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80052a6:	bf00      	nop
 80052a8:	40023800 	.word	0x40023800
 80052ac:	00f42400 	.word	0x00f42400
 80052b0:	007a1200 	.word	0x007a1200

080052b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80052b4:	b480      	push	{r7}
 80052b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80052b8:	4b03      	ldr	r3, [pc, #12]	@ (80052c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80052ba:	681b      	ldr	r3, [r3, #0]
}
 80052bc:	4618      	mov	r0, r3
 80052be:	46bd      	mov	sp, r7
 80052c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c4:	4770      	bx	lr
 80052c6:	bf00      	nop
 80052c8:	20000000 	.word	0x20000000

080052cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80052d0:	f7ff fff0 	bl	80052b4 <HAL_RCC_GetHCLKFreq>
 80052d4:	4602      	mov	r2, r0
 80052d6:	4b05      	ldr	r3, [pc, #20]	@ (80052ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80052d8:	689b      	ldr	r3, [r3, #8]
 80052da:	0a9b      	lsrs	r3, r3, #10
 80052dc:	f003 0307 	and.w	r3, r3, #7
 80052e0:	4903      	ldr	r1, [pc, #12]	@ (80052f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80052e2:	5ccb      	ldrb	r3, [r1, r3]
 80052e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80052e8:	4618      	mov	r0, r3
 80052ea:	bd80      	pop	{r7, pc}
 80052ec:	40023800 	.word	0x40023800
 80052f0:	0800c0e8 	.word	0x0800c0e8

080052f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80052f8:	f7ff ffdc 	bl	80052b4 <HAL_RCC_GetHCLKFreq>
 80052fc:	4602      	mov	r2, r0
 80052fe:	4b05      	ldr	r3, [pc, #20]	@ (8005314 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005300:	689b      	ldr	r3, [r3, #8]
 8005302:	0b5b      	lsrs	r3, r3, #13
 8005304:	f003 0307 	and.w	r3, r3, #7
 8005308:	4903      	ldr	r1, [pc, #12]	@ (8005318 <HAL_RCC_GetPCLK2Freq+0x24>)
 800530a:	5ccb      	ldrb	r3, [r1, r3]
 800530c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005310:	4618      	mov	r0, r3
 8005312:	bd80      	pop	{r7, pc}
 8005314:	40023800 	.word	0x40023800
 8005318:	0800c0e8 	.word	0x0800c0e8

0800531c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b082      	sub	sp, #8
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d101      	bne.n	800532e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800532a:	2301      	movs	r3, #1
 800532c:	e041      	b.n	80053b2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005334:	b2db      	uxtb	r3, r3
 8005336:	2b00      	cmp	r3, #0
 8005338:	d106      	bne.n	8005348 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2200      	movs	r2, #0
 800533e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005342:	6878      	ldr	r0, [r7, #4]
 8005344:	f7fb ffbc 	bl	80012c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2202      	movs	r2, #2
 800534c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681a      	ldr	r2, [r3, #0]
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	3304      	adds	r3, #4
 8005358:	4619      	mov	r1, r3
 800535a:	4610      	mov	r0, r2
 800535c:	f000 fa7e 	bl	800585c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2201      	movs	r2, #1
 8005364:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2201      	movs	r2, #1
 800536c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2201      	movs	r2, #1
 8005374:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2201      	movs	r2, #1
 800537c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2201      	movs	r2, #1
 8005384:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2201      	movs	r2, #1
 800538c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2201      	movs	r2, #1
 8005394:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2201      	movs	r2, #1
 800539c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2201      	movs	r2, #1
 80053a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2201      	movs	r2, #1
 80053ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80053b0:	2300      	movs	r3, #0
}
 80053b2:	4618      	mov	r0, r3
 80053b4:	3708      	adds	r7, #8
 80053b6:	46bd      	mov	sp, r7
 80053b8:	bd80      	pop	{r7, pc}
	...

080053bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80053bc:	b480      	push	{r7}
 80053be:	b085      	sub	sp, #20
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80053ca:	b2db      	uxtb	r3, r3
 80053cc:	2b01      	cmp	r3, #1
 80053ce:	d001      	beq.n	80053d4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80053d0:	2301      	movs	r3, #1
 80053d2:	e04e      	b.n	8005472 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2202      	movs	r2, #2
 80053d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	68da      	ldr	r2, [r3, #12]
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f042 0201 	orr.w	r2, r2, #1
 80053ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4a23      	ldr	r2, [pc, #140]	@ (8005480 <HAL_TIM_Base_Start_IT+0xc4>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d022      	beq.n	800543c <HAL_TIM_Base_Start_IT+0x80>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80053fe:	d01d      	beq.n	800543c <HAL_TIM_Base_Start_IT+0x80>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4a1f      	ldr	r2, [pc, #124]	@ (8005484 <HAL_TIM_Base_Start_IT+0xc8>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d018      	beq.n	800543c <HAL_TIM_Base_Start_IT+0x80>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	4a1e      	ldr	r2, [pc, #120]	@ (8005488 <HAL_TIM_Base_Start_IT+0xcc>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d013      	beq.n	800543c <HAL_TIM_Base_Start_IT+0x80>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4a1c      	ldr	r2, [pc, #112]	@ (800548c <HAL_TIM_Base_Start_IT+0xd0>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d00e      	beq.n	800543c <HAL_TIM_Base_Start_IT+0x80>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	4a1b      	ldr	r2, [pc, #108]	@ (8005490 <HAL_TIM_Base_Start_IT+0xd4>)
 8005424:	4293      	cmp	r3, r2
 8005426:	d009      	beq.n	800543c <HAL_TIM_Base_Start_IT+0x80>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	4a19      	ldr	r2, [pc, #100]	@ (8005494 <HAL_TIM_Base_Start_IT+0xd8>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d004      	beq.n	800543c <HAL_TIM_Base_Start_IT+0x80>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4a18      	ldr	r2, [pc, #96]	@ (8005498 <HAL_TIM_Base_Start_IT+0xdc>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d111      	bne.n	8005460 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	689b      	ldr	r3, [r3, #8]
 8005442:	f003 0307 	and.w	r3, r3, #7
 8005446:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	2b06      	cmp	r3, #6
 800544c:	d010      	beq.n	8005470 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	681a      	ldr	r2, [r3, #0]
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f042 0201 	orr.w	r2, r2, #1
 800545c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800545e:	e007      	b.n	8005470 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	681a      	ldr	r2, [r3, #0]
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f042 0201 	orr.w	r2, r2, #1
 800546e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005470:	2300      	movs	r3, #0
}
 8005472:	4618      	mov	r0, r3
 8005474:	3714      	adds	r7, #20
 8005476:	46bd      	mov	sp, r7
 8005478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547c:	4770      	bx	lr
 800547e:	bf00      	nop
 8005480:	40010000 	.word	0x40010000
 8005484:	40000400 	.word	0x40000400
 8005488:	40000800 	.word	0x40000800
 800548c:	40000c00 	.word	0x40000c00
 8005490:	40010400 	.word	0x40010400
 8005494:	40014000 	.word	0x40014000
 8005498:	40001800 	.word	0x40001800

0800549c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b084      	sub	sp, #16
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	68db      	ldr	r3, [r3, #12]
 80054aa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	691b      	ldr	r3, [r3, #16]
 80054b2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80054b4:	68bb      	ldr	r3, [r7, #8]
 80054b6:	f003 0302 	and.w	r3, r3, #2
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d020      	beq.n	8005500 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	f003 0302 	and.w	r3, r3, #2
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d01b      	beq.n	8005500 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f06f 0202 	mvn.w	r2, #2
 80054d0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2201      	movs	r2, #1
 80054d6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	699b      	ldr	r3, [r3, #24]
 80054de:	f003 0303 	and.w	r3, r3, #3
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d003      	beq.n	80054ee <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80054e6:	6878      	ldr	r0, [r7, #4]
 80054e8:	f000 f999 	bl	800581e <HAL_TIM_IC_CaptureCallback>
 80054ec:	e005      	b.n	80054fa <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80054ee:	6878      	ldr	r0, [r7, #4]
 80054f0:	f000 f98b 	bl	800580a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054f4:	6878      	ldr	r0, [r7, #4]
 80054f6:	f000 f99c 	bl	8005832 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2200      	movs	r2, #0
 80054fe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005500:	68bb      	ldr	r3, [r7, #8]
 8005502:	f003 0304 	and.w	r3, r3, #4
 8005506:	2b00      	cmp	r3, #0
 8005508:	d020      	beq.n	800554c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	f003 0304 	and.w	r3, r3, #4
 8005510:	2b00      	cmp	r3, #0
 8005512:	d01b      	beq.n	800554c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f06f 0204 	mvn.w	r2, #4
 800551c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2202      	movs	r2, #2
 8005522:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	699b      	ldr	r3, [r3, #24]
 800552a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800552e:	2b00      	cmp	r3, #0
 8005530:	d003      	beq.n	800553a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005532:	6878      	ldr	r0, [r7, #4]
 8005534:	f000 f973 	bl	800581e <HAL_TIM_IC_CaptureCallback>
 8005538:	e005      	b.n	8005546 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800553a:	6878      	ldr	r0, [r7, #4]
 800553c:	f000 f965 	bl	800580a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005540:	6878      	ldr	r0, [r7, #4]
 8005542:	f000 f976 	bl	8005832 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2200      	movs	r2, #0
 800554a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	f003 0308 	and.w	r3, r3, #8
 8005552:	2b00      	cmp	r3, #0
 8005554:	d020      	beq.n	8005598 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	f003 0308 	and.w	r3, r3, #8
 800555c:	2b00      	cmp	r3, #0
 800555e:	d01b      	beq.n	8005598 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f06f 0208 	mvn.w	r2, #8
 8005568:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2204      	movs	r2, #4
 800556e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	69db      	ldr	r3, [r3, #28]
 8005576:	f003 0303 	and.w	r3, r3, #3
 800557a:	2b00      	cmp	r3, #0
 800557c:	d003      	beq.n	8005586 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800557e:	6878      	ldr	r0, [r7, #4]
 8005580:	f000 f94d 	bl	800581e <HAL_TIM_IC_CaptureCallback>
 8005584:	e005      	b.n	8005592 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005586:	6878      	ldr	r0, [r7, #4]
 8005588:	f000 f93f 	bl	800580a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800558c:	6878      	ldr	r0, [r7, #4]
 800558e:	f000 f950 	bl	8005832 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2200      	movs	r2, #0
 8005596:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005598:	68bb      	ldr	r3, [r7, #8]
 800559a:	f003 0310 	and.w	r3, r3, #16
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d020      	beq.n	80055e4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	f003 0310 	and.w	r3, r3, #16
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d01b      	beq.n	80055e4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f06f 0210 	mvn.w	r2, #16
 80055b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2208      	movs	r2, #8
 80055ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	69db      	ldr	r3, [r3, #28]
 80055c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d003      	beq.n	80055d2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055ca:	6878      	ldr	r0, [r7, #4]
 80055cc:	f000 f927 	bl	800581e <HAL_TIM_IC_CaptureCallback>
 80055d0:	e005      	b.n	80055de <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055d2:	6878      	ldr	r0, [r7, #4]
 80055d4:	f000 f919 	bl	800580a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055d8:	6878      	ldr	r0, [r7, #4]
 80055da:	f000 f92a 	bl	8005832 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2200      	movs	r2, #0
 80055e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80055e4:	68bb      	ldr	r3, [r7, #8]
 80055e6:	f003 0301 	and.w	r3, r3, #1
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d00c      	beq.n	8005608 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	f003 0301 	and.w	r3, r3, #1
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d007      	beq.n	8005608 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f06f 0201 	mvn.w	r2, #1
 8005600:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005602:	6878      	ldr	r0, [r7, #4]
 8005604:	f7fb fc94 	bl	8000f30 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005608:	68bb      	ldr	r3, [r7, #8]
 800560a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800560e:	2b00      	cmp	r3, #0
 8005610:	d00c      	beq.n	800562c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005618:	2b00      	cmp	r3, #0
 800561a:	d007      	beq.n	800562c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005624:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005626:	6878      	ldr	r0, [r7, #4]
 8005628:	f000 fae4 	bl	8005bf4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800562c:	68bb      	ldr	r3, [r7, #8]
 800562e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005632:	2b00      	cmp	r3, #0
 8005634:	d00c      	beq.n	8005650 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800563c:	2b00      	cmp	r3, #0
 800563e:	d007      	beq.n	8005650 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005648:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800564a:	6878      	ldr	r0, [r7, #4]
 800564c:	f000 f8fb 	bl	8005846 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	f003 0320 	and.w	r3, r3, #32
 8005656:	2b00      	cmp	r3, #0
 8005658:	d00c      	beq.n	8005674 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	f003 0320 	and.w	r3, r3, #32
 8005660:	2b00      	cmp	r3, #0
 8005662:	d007      	beq.n	8005674 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f06f 0220 	mvn.w	r2, #32
 800566c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800566e:	6878      	ldr	r0, [r7, #4]
 8005670:	f000 fab6 	bl	8005be0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005674:	bf00      	nop
 8005676:	3710      	adds	r7, #16
 8005678:	46bd      	mov	sp, r7
 800567a:	bd80      	pop	{r7, pc}

0800567c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b084      	sub	sp, #16
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
 8005684:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005686:	2300      	movs	r3, #0
 8005688:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005690:	2b01      	cmp	r3, #1
 8005692:	d101      	bne.n	8005698 <HAL_TIM_ConfigClockSource+0x1c>
 8005694:	2302      	movs	r3, #2
 8005696:	e0b4      	b.n	8005802 <HAL_TIM_ConfigClockSource+0x186>
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2201      	movs	r2, #1
 800569c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2202      	movs	r2, #2
 80056a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	689b      	ldr	r3, [r3, #8]
 80056ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80056b0:	68bb      	ldr	r3, [r7, #8]
 80056b2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80056b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80056b8:	68bb      	ldr	r3, [r7, #8]
 80056ba:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80056be:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	68ba      	ldr	r2, [r7, #8]
 80056c6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80056d0:	d03e      	beq.n	8005750 <HAL_TIM_ConfigClockSource+0xd4>
 80056d2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80056d6:	f200 8087 	bhi.w	80057e8 <HAL_TIM_ConfigClockSource+0x16c>
 80056da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80056de:	f000 8086 	beq.w	80057ee <HAL_TIM_ConfigClockSource+0x172>
 80056e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80056e6:	d87f      	bhi.n	80057e8 <HAL_TIM_ConfigClockSource+0x16c>
 80056e8:	2b70      	cmp	r3, #112	@ 0x70
 80056ea:	d01a      	beq.n	8005722 <HAL_TIM_ConfigClockSource+0xa6>
 80056ec:	2b70      	cmp	r3, #112	@ 0x70
 80056ee:	d87b      	bhi.n	80057e8 <HAL_TIM_ConfigClockSource+0x16c>
 80056f0:	2b60      	cmp	r3, #96	@ 0x60
 80056f2:	d050      	beq.n	8005796 <HAL_TIM_ConfigClockSource+0x11a>
 80056f4:	2b60      	cmp	r3, #96	@ 0x60
 80056f6:	d877      	bhi.n	80057e8 <HAL_TIM_ConfigClockSource+0x16c>
 80056f8:	2b50      	cmp	r3, #80	@ 0x50
 80056fa:	d03c      	beq.n	8005776 <HAL_TIM_ConfigClockSource+0xfa>
 80056fc:	2b50      	cmp	r3, #80	@ 0x50
 80056fe:	d873      	bhi.n	80057e8 <HAL_TIM_ConfigClockSource+0x16c>
 8005700:	2b40      	cmp	r3, #64	@ 0x40
 8005702:	d058      	beq.n	80057b6 <HAL_TIM_ConfigClockSource+0x13a>
 8005704:	2b40      	cmp	r3, #64	@ 0x40
 8005706:	d86f      	bhi.n	80057e8 <HAL_TIM_ConfigClockSource+0x16c>
 8005708:	2b30      	cmp	r3, #48	@ 0x30
 800570a:	d064      	beq.n	80057d6 <HAL_TIM_ConfigClockSource+0x15a>
 800570c:	2b30      	cmp	r3, #48	@ 0x30
 800570e:	d86b      	bhi.n	80057e8 <HAL_TIM_ConfigClockSource+0x16c>
 8005710:	2b20      	cmp	r3, #32
 8005712:	d060      	beq.n	80057d6 <HAL_TIM_ConfigClockSource+0x15a>
 8005714:	2b20      	cmp	r3, #32
 8005716:	d867      	bhi.n	80057e8 <HAL_TIM_ConfigClockSource+0x16c>
 8005718:	2b00      	cmp	r3, #0
 800571a:	d05c      	beq.n	80057d6 <HAL_TIM_ConfigClockSource+0x15a>
 800571c:	2b10      	cmp	r3, #16
 800571e:	d05a      	beq.n	80057d6 <HAL_TIM_ConfigClockSource+0x15a>
 8005720:	e062      	b.n	80057e8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005732:	f000 f9b9 	bl	8005aa8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	689b      	ldr	r3, [r3, #8]
 800573c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800573e:	68bb      	ldr	r3, [r7, #8]
 8005740:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005744:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	68ba      	ldr	r2, [r7, #8]
 800574c:	609a      	str	r2, [r3, #8]
      break;
 800574e:	e04f      	b.n	80057f0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005760:	f000 f9a2 	bl	8005aa8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	689a      	ldr	r2, [r3, #8]
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005772:	609a      	str	r2, [r3, #8]
      break;
 8005774:	e03c      	b.n	80057f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005782:	461a      	mov	r2, r3
 8005784:	f000 f916 	bl	80059b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	2150      	movs	r1, #80	@ 0x50
 800578e:	4618      	mov	r0, r3
 8005790:	f000 f96f 	bl	8005a72 <TIM_ITRx_SetConfig>
      break;
 8005794:	e02c      	b.n	80057f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80057a2:	461a      	mov	r2, r3
 80057a4:	f000 f935 	bl	8005a12 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	2160      	movs	r1, #96	@ 0x60
 80057ae:	4618      	mov	r0, r3
 80057b0:	f000 f95f 	bl	8005a72 <TIM_ITRx_SetConfig>
      break;
 80057b4:	e01c      	b.n	80057f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80057c2:	461a      	mov	r2, r3
 80057c4:	f000 f8f6 	bl	80059b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	2140      	movs	r1, #64	@ 0x40
 80057ce:	4618      	mov	r0, r3
 80057d0:	f000 f94f 	bl	8005a72 <TIM_ITRx_SetConfig>
      break;
 80057d4:	e00c      	b.n	80057f0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681a      	ldr	r2, [r3, #0]
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	4619      	mov	r1, r3
 80057e0:	4610      	mov	r0, r2
 80057e2:	f000 f946 	bl	8005a72 <TIM_ITRx_SetConfig>
      break;
 80057e6:	e003      	b.n	80057f0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80057e8:	2301      	movs	r3, #1
 80057ea:	73fb      	strb	r3, [r7, #15]
      break;
 80057ec:	e000      	b.n	80057f0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80057ee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2201      	movs	r2, #1
 80057f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2200      	movs	r2, #0
 80057fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005800:	7bfb      	ldrb	r3, [r7, #15]
}
 8005802:	4618      	mov	r0, r3
 8005804:	3710      	adds	r7, #16
 8005806:	46bd      	mov	sp, r7
 8005808:	bd80      	pop	{r7, pc}

0800580a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800580a:	b480      	push	{r7}
 800580c:	b083      	sub	sp, #12
 800580e:	af00      	add	r7, sp, #0
 8005810:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005812:	bf00      	nop
 8005814:	370c      	adds	r7, #12
 8005816:	46bd      	mov	sp, r7
 8005818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581c:	4770      	bx	lr

0800581e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800581e:	b480      	push	{r7}
 8005820:	b083      	sub	sp, #12
 8005822:	af00      	add	r7, sp, #0
 8005824:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005826:	bf00      	nop
 8005828:	370c      	adds	r7, #12
 800582a:	46bd      	mov	sp, r7
 800582c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005830:	4770      	bx	lr

08005832 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005832:	b480      	push	{r7}
 8005834:	b083      	sub	sp, #12
 8005836:	af00      	add	r7, sp, #0
 8005838:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800583a:	bf00      	nop
 800583c:	370c      	adds	r7, #12
 800583e:	46bd      	mov	sp, r7
 8005840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005844:	4770      	bx	lr

08005846 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005846:	b480      	push	{r7}
 8005848:	b083      	sub	sp, #12
 800584a:	af00      	add	r7, sp, #0
 800584c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800584e:	bf00      	nop
 8005850:	370c      	adds	r7, #12
 8005852:	46bd      	mov	sp, r7
 8005854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005858:	4770      	bx	lr
	...

0800585c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800585c:	b480      	push	{r7}
 800585e:	b085      	sub	sp, #20
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
 8005864:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	4a46      	ldr	r2, [pc, #280]	@ (8005988 <TIM_Base_SetConfig+0x12c>)
 8005870:	4293      	cmp	r3, r2
 8005872:	d013      	beq.n	800589c <TIM_Base_SetConfig+0x40>
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800587a:	d00f      	beq.n	800589c <TIM_Base_SetConfig+0x40>
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	4a43      	ldr	r2, [pc, #268]	@ (800598c <TIM_Base_SetConfig+0x130>)
 8005880:	4293      	cmp	r3, r2
 8005882:	d00b      	beq.n	800589c <TIM_Base_SetConfig+0x40>
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	4a42      	ldr	r2, [pc, #264]	@ (8005990 <TIM_Base_SetConfig+0x134>)
 8005888:	4293      	cmp	r3, r2
 800588a:	d007      	beq.n	800589c <TIM_Base_SetConfig+0x40>
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	4a41      	ldr	r2, [pc, #260]	@ (8005994 <TIM_Base_SetConfig+0x138>)
 8005890:	4293      	cmp	r3, r2
 8005892:	d003      	beq.n	800589c <TIM_Base_SetConfig+0x40>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	4a40      	ldr	r2, [pc, #256]	@ (8005998 <TIM_Base_SetConfig+0x13c>)
 8005898:	4293      	cmp	r3, r2
 800589a:	d108      	bne.n	80058ae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80058a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	685b      	ldr	r3, [r3, #4]
 80058a8:	68fa      	ldr	r2, [r7, #12]
 80058aa:	4313      	orrs	r3, r2
 80058ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	4a35      	ldr	r2, [pc, #212]	@ (8005988 <TIM_Base_SetConfig+0x12c>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d02b      	beq.n	800590e <TIM_Base_SetConfig+0xb2>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80058bc:	d027      	beq.n	800590e <TIM_Base_SetConfig+0xb2>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	4a32      	ldr	r2, [pc, #200]	@ (800598c <TIM_Base_SetConfig+0x130>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d023      	beq.n	800590e <TIM_Base_SetConfig+0xb2>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	4a31      	ldr	r2, [pc, #196]	@ (8005990 <TIM_Base_SetConfig+0x134>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d01f      	beq.n	800590e <TIM_Base_SetConfig+0xb2>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	4a30      	ldr	r2, [pc, #192]	@ (8005994 <TIM_Base_SetConfig+0x138>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d01b      	beq.n	800590e <TIM_Base_SetConfig+0xb2>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	4a2f      	ldr	r2, [pc, #188]	@ (8005998 <TIM_Base_SetConfig+0x13c>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d017      	beq.n	800590e <TIM_Base_SetConfig+0xb2>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	4a2e      	ldr	r2, [pc, #184]	@ (800599c <TIM_Base_SetConfig+0x140>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d013      	beq.n	800590e <TIM_Base_SetConfig+0xb2>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	4a2d      	ldr	r2, [pc, #180]	@ (80059a0 <TIM_Base_SetConfig+0x144>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d00f      	beq.n	800590e <TIM_Base_SetConfig+0xb2>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	4a2c      	ldr	r2, [pc, #176]	@ (80059a4 <TIM_Base_SetConfig+0x148>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d00b      	beq.n	800590e <TIM_Base_SetConfig+0xb2>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	4a2b      	ldr	r2, [pc, #172]	@ (80059a8 <TIM_Base_SetConfig+0x14c>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d007      	beq.n	800590e <TIM_Base_SetConfig+0xb2>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	4a2a      	ldr	r2, [pc, #168]	@ (80059ac <TIM_Base_SetConfig+0x150>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d003      	beq.n	800590e <TIM_Base_SetConfig+0xb2>
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	4a29      	ldr	r2, [pc, #164]	@ (80059b0 <TIM_Base_SetConfig+0x154>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d108      	bne.n	8005920 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005914:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	68db      	ldr	r3, [r3, #12]
 800591a:	68fa      	ldr	r2, [r7, #12]
 800591c:	4313      	orrs	r3, r2
 800591e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	695b      	ldr	r3, [r3, #20]
 800592a:	4313      	orrs	r3, r2
 800592c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	68fa      	ldr	r2, [r7, #12]
 8005932:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	689a      	ldr	r2, [r3, #8]
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	681a      	ldr	r2, [r3, #0]
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	4a10      	ldr	r2, [pc, #64]	@ (8005988 <TIM_Base_SetConfig+0x12c>)
 8005948:	4293      	cmp	r3, r2
 800594a:	d003      	beq.n	8005954 <TIM_Base_SetConfig+0xf8>
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	4a12      	ldr	r2, [pc, #72]	@ (8005998 <TIM_Base_SetConfig+0x13c>)
 8005950:	4293      	cmp	r3, r2
 8005952:	d103      	bne.n	800595c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	691a      	ldr	r2, [r3, #16]
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2201      	movs	r2, #1
 8005960:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	691b      	ldr	r3, [r3, #16]
 8005966:	f003 0301 	and.w	r3, r3, #1
 800596a:	2b01      	cmp	r3, #1
 800596c:	d105      	bne.n	800597a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	691b      	ldr	r3, [r3, #16]
 8005972:	f023 0201 	bic.w	r2, r3, #1
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	611a      	str	r2, [r3, #16]
  }
}
 800597a:	bf00      	nop
 800597c:	3714      	adds	r7, #20
 800597e:	46bd      	mov	sp, r7
 8005980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005984:	4770      	bx	lr
 8005986:	bf00      	nop
 8005988:	40010000 	.word	0x40010000
 800598c:	40000400 	.word	0x40000400
 8005990:	40000800 	.word	0x40000800
 8005994:	40000c00 	.word	0x40000c00
 8005998:	40010400 	.word	0x40010400
 800599c:	40014000 	.word	0x40014000
 80059a0:	40014400 	.word	0x40014400
 80059a4:	40014800 	.word	0x40014800
 80059a8:	40001800 	.word	0x40001800
 80059ac:	40001c00 	.word	0x40001c00
 80059b0:	40002000 	.word	0x40002000

080059b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80059b4:	b480      	push	{r7}
 80059b6:	b087      	sub	sp, #28
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	60f8      	str	r0, [r7, #12]
 80059bc:	60b9      	str	r1, [r7, #8]
 80059be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	6a1b      	ldr	r3, [r3, #32]
 80059c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	6a1b      	ldr	r3, [r3, #32]
 80059ca:	f023 0201 	bic.w	r2, r3, #1
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	699b      	ldr	r3, [r3, #24]
 80059d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80059d8:	693b      	ldr	r3, [r7, #16]
 80059da:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80059de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	011b      	lsls	r3, r3, #4
 80059e4:	693a      	ldr	r2, [r7, #16]
 80059e6:	4313      	orrs	r3, r2
 80059e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80059ea:	697b      	ldr	r3, [r7, #20]
 80059ec:	f023 030a 	bic.w	r3, r3, #10
 80059f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80059f2:	697a      	ldr	r2, [r7, #20]
 80059f4:	68bb      	ldr	r3, [r7, #8]
 80059f6:	4313      	orrs	r3, r2
 80059f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	693a      	ldr	r2, [r7, #16]
 80059fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	697a      	ldr	r2, [r7, #20]
 8005a04:	621a      	str	r2, [r3, #32]
}
 8005a06:	bf00      	nop
 8005a08:	371c      	adds	r7, #28
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a10:	4770      	bx	lr

08005a12 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005a12:	b480      	push	{r7}
 8005a14:	b087      	sub	sp, #28
 8005a16:	af00      	add	r7, sp, #0
 8005a18:	60f8      	str	r0, [r7, #12]
 8005a1a:	60b9      	str	r1, [r7, #8]
 8005a1c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	6a1b      	ldr	r3, [r3, #32]
 8005a22:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	6a1b      	ldr	r3, [r3, #32]
 8005a28:	f023 0210 	bic.w	r2, r3, #16
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	699b      	ldr	r3, [r3, #24]
 8005a34:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005a36:	693b      	ldr	r3, [r7, #16]
 8005a38:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005a3c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	031b      	lsls	r3, r3, #12
 8005a42:	693a      	ldr	r2, [r7, #16]
 8005a44:	4313      	orrs	r3, r2
 8005a46:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005a48:	697b      	ldr	r3, [r7, #20]
 8005a4a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005a4e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	011b      	lsls	r3, r3, #4
 8005a54:	697a      	ldr	r2, [r7, #20]
 8005a56:	4313      	orrs	r3, r2
 8005a58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	693a      	ldr	r2, [r7, #16]
 8005a5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	697a      	ldr	r2, [r7, #20]
 8005a64:	621a      	str	r2, [r3, #32]
}
 8005a66:	bf00      	nop
 8005a68:	371c      	adds	r7, #28
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a70:	4770      	bx	lr

08005a72 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005a72:	b480      	push	{r7}
 8005a74:	b085      	sub	sp, #20
 8005a76:	af00      	add	r7, sp, #0
 8005a78:	6078      	str	r0, [r7, #4]
 8005a7a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	689b      	ldr	r3, [r3, #8]
 8005a80:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a88:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005a8a:	683a      	ldr	r2, [r7, #0]
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	4313      	orrs	r3, r2
 8005a90:	f043 0307 	orr.w	r3, r3, #7
 8005a94:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	68fa      	ldr	r2, [r7, #12]
 8005a9a:	609a      	str	r2, [r3, #8]
}
 8005a9c:	bf00      	nop
 8005a9e:	3714      	adds	r7, #20
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa6:	4770      	bx	lr

08005aa8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	b087      	sub	sp, #28
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	60f8      	str	r0, [r7, #12]
 8005ab0:	60b9      	str	r1, [r7, #8]
 8005ab2:	607a      	str	r2, [r7, #4]
 8005ab4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	689b      	ldr	r3, [r3, #8]
 8005aba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005abc:	697b      	ldr	r3, [r7, #20]
 8005abe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005ac2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	021a      	lsls	r2, r3, #8
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	431a      	orrs	r2, r3
 8005acc:	68bb      	ldr	r3, [r7, #8]
 8005ace:	4313      	orrs	r3, r2
 8005ad0:	697a      	ldr	r2, [r7, #20]
 8005ad2:	4313      	orrs	r3, r2
 8005ad4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	697a      	ldr	r2, [r7, #20]
 8005ada:	609a      	str	r2, [r3, #8]
}
 8005adc:	bf00      	nop
 8005ade:	371c      	adds	r7, #28
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae6:	4770      	bx	lr

08005ae8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005ae8:	b480      	push	{r7}
 8005aea:	b085      	sub	sp, #20
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
 8005af0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005af8:	2b01      	cmp	r3, #1
 8005afa:	d101      	bne.n	8005b00 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005afc:	2302      	movs	r3, #2
 8005afe:	e05a      	b.n	8005bb6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2201      	movs	r2, #1
 8005b04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2202      	movs	r2, #2
 8005b0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	685b      	ldr	r3, [r3, #4]
 8005b16:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	689b      	ldr	r3, [r3, #8]
 8005b1e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b26:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	68fa      	ldr	r2, [r7, #12]
 8005b2e:	4313      	orrs	r3, r2
 8005b30:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	68fa      	ldr	r2, [r7, #12]
 8005b38:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	4a21      	ldr	r2, [pc, #132]	@ (8005bc4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005b40:	4293      	cmp	r3, r2
 8005b42:	d022      	beq.n	8005b8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b4c:	d01d      	beq.n	8005b8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	4a1d      	ldr	r2, [pc, #116]	@ (8005bc8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d018      	beq.n	8005b8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	4a1b      	ldr	r2, [pc, #108]	@ (8005bcc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d013      	beq.n	8005b8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	4a1a      	ldr	r2, [pc, #104]	@ (8005bd0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d00e      	beq.n	8005b8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	4a18      	ldr	r2, [pc, #96]	@ (8005bd4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d009      	beq.n	8005b8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	4a17      	ldr	r2, [pc, #92]	@ (8005bd8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d004      	beq.n	8005b8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	4a15      	ldr	r2, [pc, #84]	@ (8005bdc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d10c      	bne.n	8005ba4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005b8a:	68bb      	ldr	r3, [r7, #8]
 8005b8c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005b90:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	685b      	ldr	r3, [r3, #4]
 8005b96:	68ba      	ldr	r2, [r7, #8]
 8005b98:	4313      	orrs	r3, r2
 8005b9a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	68ba      	ldr	r2, [r7, #8]
 8005ba2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2201      	movs	r2, #1
 8005ba8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2200      	movs	r2, #0
 8005bb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005bb4:	2300      	movs	r3, #0
}
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	3714      	adds	r7, #20
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc0:	4770      	bx	lr
 8005bc2:	bf00      	nop
 8005bc4:	40010000 	.word	0x40010000
 8005bc8:	40000400 	.word	0x40000400
 8005bcc:	40000800 	.word	0x40000800
 8005bd0:	40000c00 	.word	0x40000c00
 8005bd4:	40010400 	.word	0x40010400
 8005bd8:	40014000 	.word	0x40014000
 8005bdc:	40001800 	.word	0x40001800

08005be0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005be0:	b480      	push	{r7}
 8005be2:	b083      	sub	sp, #12
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005be8:	bf00      	nop
 8005bea:	370c      	adds	r7, #12
 8005bec:	46bd      	mov	sp, r7
 8005bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf2:	4770      	bx	lr

08005bf4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005bf4:	b480      	push	{r7}
 8005bf6:	b083      	sub	sp, #12
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005bfc:	bf00      	nop
 8005bfe:	370c      	adds	r7, #12
 8005c00:	46bd      	mov	sp, r7
 8005c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c06:	4770      	bx	lr

08005c08 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b082      	sub	sp, #8
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d101      	bne.n	8005c1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005c16:	2301      	movs	r3, #1
 8005c18:	e042      	b.n	8005ca0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005c20:	b2db      	uxtb	r3, r3
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d106      	bne.n	8005c34 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2200      	movs	r2, #0
 8005c2a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005c2e:	6878      	ldr	r0, [r7, #4]
 8005c30:	f7fb fbc6 	bl	80013c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2224      	movs	r2, #36	@ 0x24
 8005c38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	68da      	ldr	r2, [r3, #12]
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005c4a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005c4c:	6878      	ldr	r0, [r7, #4]
 8005c4e:	f000 ff15 	bl	8006a7c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	691a      	ldr	r2, [r3, #16]
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005c60:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	695a      	ldr	r2, [r3, #20]
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005c70:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	68da      	ldr	r2, [r3, #12]
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005c80:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2200      	movs	r2, #0
 8005c86:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2220      	movs	r2, #32
 8005c8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2220      	movs	r2, #32
 8005c94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005c9e:	2300      	movs	r3, #0
}
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	3708      	adds	r7, #8
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	bd80      	pop	{r7, pc}

08005ca8 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b090      	sub	sp, #64	@ 0x40
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	695b      	ldr	r3, [r3, #20]
 8005cba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005cbe:	2b80      	cmp	r3, #128	@ 0x80
 8005cc0:	bf0c      	ite	eq
 8005cc2:	2301      	moveq	r3, #1
 8005cc4:	2300      	movne	r3, #0
 8005cc6:	b2db      	uxtb	r3, r3
 8005cc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005cd0:	b2db      	uxtb	r3, r3
 8005cd2:	2b21      	cmp	r3, #33	@ 0x21
 8005cd4:	d128      	bne.n	8005d28 <HAL_UART_DMAStop+0x80>
 8005cd6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d025      	beq.n	8005d28 <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	3314      	adds	r3, #20
 8005ce2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ce4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ce6:	e853 3f00 	ldrex	r3, [r3]
 8005cea:	623b      	str	r3, [r7, #32]
   return(result);
 8005cec:	6a3b      	ldr	r3, [r7, #32]
 8005cee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005cf2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	3314      	adds	r3, #20
 8005cfa:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005cfc:	633a      	str	r2, [r7, #48]	@ 0x30
 8005cfe:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d00:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005d02:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005d04:	e841 2300 	strex	r3, r2, [r1]
 8005d08:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005d0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d1e5      	bne.n	8005cdc <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d004      	beq.n	8005d22 <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	f7fc fbe9 	bl	80024f4 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 8005d22:	6878      	ldr	r0, [r7, #4]
 8005d24:	f000 fce4 	bl	80066f0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	695b      	ldr	r3, [r3, #20]
 8005d2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d32:	2b40      	cmp	r3, #64	@ 0x40
 8005d34:	bf0c      	ite	eq
 8005d36:	2301      	moveq	r3, #1
 8005d38:	2300      	movne	r3, #0
 8005d3a:	b2db      	uxtb	r3, r3
 8005d3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005d44:	b2db      	uxtb	r3, r3
 8005d46:	2b22      	cmp	r3, #34	@ 0x22
 8005d48:	d128      	bne.n	8005d9c <HAL_UART_DMAStop+0xf4>
 8005d4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d025      	beq.n	8005d9c <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	3314      	adds	r3, #20
 8005d56:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d58:	693b      	ldr	r3, [r7, #16]
 8005d5a:	e853 3f00 	ldrex	r3, [r3]
 8005d5e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005d66:	637b      	str	r3, [r7, #52]	@ 0x34
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	3314      	adds	r3, #20
 8005d6e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005d70:	61fa      	str	r2, [r7, #28]
 8005d72:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d74:	69b9      	ldr	r1, [r7, #24]
 8005d76:	69fa      	ldr	r2, [r7, #28]
 8005d78:	e841 2300 	strex	r3, r2, [r1]
 8005d7c:	617b      	str	r3, [r7, #20]
   return(result);
 8005d7e:	697b      	ldr	r3, [r7, #20]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d1e5      	bne.n	8005d50 <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d004      	beq.n	8005d96 <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d90:	4618      	mov	r0, r3
 8005d92:	f7fc fbaf 	bl	80024f4 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 8005d96:	6878      	ldr	r0, [r7, #4]
 8005d98:	f000 fcd2 	bl	8006740 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8005d9c:	2300      	movs	r3, #0
}
 8005d9e:	4618      	mov	r0, r3
 8005da0:	3740      	adds	r7, #64	@ 0x40
 8005da2:	46bd      	mov	sp, r7
 8005da4:	bd80      	pop	{r7, pc}

08005da6 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005da6:	b580      	push	{r7, lr}
 8005da8:	b08c      	sub	sp, #48	@ 0x30
 8005daa:	af00      	add	r7, sp, #0
 8005dac:	60f8      	str	r0, [r7, #12]
 8005dae:	60b9      	str	r1, [r7, #8]
 8005db0:	4613      	mov	r3, r2
 8005db2:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005dba:	b2db      	uxtb	r3, r3
 8005dbc:	2b20      	cmp	r3, #32
 8005dbe:	d14a      	bne.n	8005e56 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8005dc0:	68bb      	ldr	r3, [r7, #8]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d002      	beq.n	8005dcc <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8005dc6:	88fb      	ldrh	r3, [r7, #6]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d101      	bne.n	8005dd0 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8005dcc:	2301      	movs	r3, #1
 8005dce:	e043      	b.n	8005e58 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	2201      	movs	r2, #1
 8005dd4:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	2200      	movs	r2, #0
 8005dda:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8005ddc:	88fb      	ldrh	r3, [r7, #6]
 8005dde:	461a      	mov	r2, r3
 8005de0:	68b9      	ldr	r1, [r7, #8]
 8005de2:	68f8      	ldr	r0, [r7, #12]
 8005de4:	f000 fbea 	bl	80065bc <UART_Start_Receive_DMA>
 8005de8:	4603      	mov	r3, r0
 8005dea:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8005dee:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d12c      	bne.n	8005e50 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005dfa:	2b01      	cmp	r3, #1
 8005dfc:	d125      	bne.n	8005e4a <HAL_UARTEx_ReceiveToIdle_DMA+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005dfe:	2300      	movs	r3, #0
 8005e00:	613b      	str	r3, [r7, #16]
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	613b      	str	r3, [r7, #16]
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	685b      	ldr	r3, [r3, #4]
 8005e10:	613b      	str	r3, [r7, #16]
 8005e12:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	330c      	adds	r3, #12
 8005e1a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e1c:	69bb      	ldr	r3, [r7, #24]
 8005e1e:	e853 3f00 	ldrex	r3, [r3]
 8005e22:	617b      	str	r3, [r7, #20]
   return(result);
 8005e24:	697b      	ldr	r3, [r7, #20]
 8005e26:	f043 0310 	orr.w	r3, r3, #16
 8005e2a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	330c      	adds	r3, #12
 8005e32:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005e34:	627a      	str	r2, [r7, #36]	@ 0x24
 8005e36:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e38:	6a39      	ldr	r1, [r7, #32]
 8005e3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e3c:	e841 2300 	strex	r3, r2, [r1]
 8005e40:	61fb      	str	r3, [r7, #28]
   return(result);
 8005e42:	69fb      	ldr	r3, [r7, #28]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d1e5      	bne.n	8005e14 <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 8005e48:	e002      	b.n	8005e50 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8005e4a:	2301      	movs	r3, #1
 8005e4c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8005e50:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005e54:	e000      	b.n	8005e58 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8005e56:	2302      	movs	r3, #2
  }
}
 8005e58:	4618      	mov	r0, r3
 8005e5a:	3730      	adds	r7, #48	@ 0x30
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	bd80      	pop	{r7, pc}

08005e60 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b0ba      	sub	sp, #232	@ 0xe8
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	68db      	ldr	r3, [r3, #12]
 8005e78:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	695b      	ldr	r3, [r3, #20]
 8005e82:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8005e86:	2300      	movs	r3, #0
 8005e88:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005e92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e96:	f003 030f 	and.w	r3, r3, #15
 8005e9a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8005e9e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d10f      	bne.n	8005ec6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005ea6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005eaa:	f003 0320 	and.w	r3, r3, #32
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d009      	beq.n	8005ec6 <HAL_UART_IRQHandler+0x66>
 8005eb2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005eb6:	f003 0320 	and.w	r3, r3, #32
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d003      	beq.n	8005ec6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005ebe:	6878      	ldr	r0, [r7, #4]
 8005ec0:	f000 fd1d 	bl	80068fe <UART_Receive_IT>
      return;
 8005ec4:	e25b      	b.n	800637e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005ec6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	f000 80de 	beq.w	800608c <HAL_UART_IRQHandler+0x22c>
 8005ed0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005ed4:	f003 0301 	and.w	r3, r3, #1
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d106      	bne.n	8005eea <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005edc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005ee0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	f000 80d1 	beq.w	800608c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005eea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005eee:	f003 0301 	and.w	r3, r3, #1
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d00b      	beq.n	8005f0e <HAL_UART_IRQHandler+0xae>
 8005ef6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005efa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d005      	beq.n	8005f0e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f06:	f043 0201 	orr.w	r2, r3, #1
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005f0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f12:	f003 0304 	and.w	r3, r3, #4
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d00b      	beq.n	8005f32 <HAL_UART_IRQHandler+0xd2>
 8005f1a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005f1e:	f003 0301 	and.w	r3, r3, #1
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d005      	beq.n	8005f32 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f2a:	f043 0202 	orr.w	r2, r3, #2
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005f32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f36:	f003 0302 	and.w	r3, r3, #2
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d00b      	beq.n	8005f56 <HAL_UART_IRQHandler+0xf6>
 8005f3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005f42:	f003 0301 	and.w	r3, r3, #1
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d005      	beq.n	8005f56 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f4e:	f043 0204 	orr.w	r2, r3, #4
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005f56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f5a:	f003 0308 	and.w	r3, r3, #8
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d011      	beq.n	8005f86 <HAL_UART_IRQHandler+0x126>
 8005f62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f66:	f003 0320 	and.w	r3, r3, #32
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d105      	bne.n	8005f7a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005f6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005f72:	f003 0301 	and.w	r3, r3, #1
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d005      	beq.n	8005f86 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f7e:	f043 0208 	orr.w	r2, r3, #8
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	f000 81f2 	beq.w	8006374 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005f90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f94:	f003 0320 	and.w	r3, r3, #32
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d008      	beq.n	8005fae <HAL_UART_IRQHandler+0x14e>
 8005f9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005fa0:	f003 0320 	and.w	r3, r3, #32
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d002      	beq.n	8005fae <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005fa8:	6878      	ldr	r0, [r7, #4]
 8005faa:	f000 fca8 	bl	80068fe <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	695b      	ldr	r3, [r3, #20]
 8005fb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fb8:	2b40      	cmp	r3, #64	@ 0x40
 8005fba:	bf0c      	ite	eq
 8005fbc:	2301      	moveq	r3, #1
 8005fbe:	2300      	movne	r3, #0
 8005fc0:	b2db      	uxtb	r3, r3
 8005fc2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005fca:	f003 0308 	and.w	r3, r3, #8
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d103      	bne.n	8005fda <HAL_UART_IRQHandler+0x17a>
 8005fd2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d04f      	beq.n	800607a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005fda:	6878      	ldr	r0, [r7, #4]
 8005fdc:	f000 fbb0 	bl	8006740 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	695b      	ldr	r3, [r3, #20]
 8005fe6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fea:	2b40      	cmp	r3, #64	@ 0x40
 8005fec:	d141      	bne.n	8006072 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	3314      	adds	r3, #20
 8005ff4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ff8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005ffc:	e853 3f00 	ldrex	r3, [r3]
 8006000:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006004:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006008:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800600c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	3314      	adds	r3, #20
 8006016:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800601a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800601e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006022:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006026:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800602a:	e841 2300 	strex	r3, r2, [r1]
 800602e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006032:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006036:	2b00      	cmp	r3, #0
 8006038:	d1d9      	bne.n	8005fee <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800603e:	2b00      	cmp	r3, #0
 8006040:	d013      	beq.n	800606a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006046:	4a7e      	ldr	r2, [pc, #504]	@ (8006240 <HAL_UART_IRQHandler+0x3e0>)
 8006048:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800604e:	4618      	mov	r0, r3
 8006050:	f7fc fac0 	bl	80025d4 <HAL_DMA_Abort_IT>
 8006054:	4603      	mov	r3, r0
 8006056:	2b00      	cmp	r3, #0
 8006058:	d016      	beq.n	8006088 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800605e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006060:	687a      	ldr	r2, [r7, #4]
 8006062:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006064:	4610      	mov	r0, r2
 8006066:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006068:	e00e      	b.n	8006088 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800606a:	6878      	ldr	r0, [r7, #4]
 800606c:	f000 f99e 	bl	80063ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006070:	e00a      	b.n	8006088 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006072:	6878      	ldr	r0, [r7, #4]
 8006074:	f000 f99a 	bl	80063ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006078:	e006      	b.n	8006088 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800607a:	6878      	ldr	r0, [r7, #4]
 800607c:	f000 f996 	bl	80063ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2200      	movs	r2, #0
 8006084:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8006086:	e175      	b.n	8006374 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006088:	bf00      	nop
    return;
 800608a:	e173      	b.n	8006374 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006090:	2b01      	cmp	r3, #1
 8006092:	f040 814f 	bne.w	8006334 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006096:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800609a:	f003 0310 	and.w	r3, r3, #16
 800609e:	2b00      	cmp	r3, #0
 80060a0:	f000 8148 	beq.w	8006334 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80060a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80060a8:	f003 0310 	and.w	r3, r3, #16
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	f000 8141 	beq.w	8006334 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80060b2:	2300      	movs	r3, #0
 80060b4:	60bb      	str	r3, [r7, #8]
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	60bb      	str	r3, [r7, #8]
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	685b      	ldr	r3, [r3, #4]
 80060c4:	60bb      	str	r3, [r7, #8]
 80060c6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	695b      	ldr	r3, [r3, #20]
 80060ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060d2:	2b40      	cmp	r3, #64	@ 0x40
 80060d4:	f040 80b6 	bne.w	8006244 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	685b      	ldr	r3, [r3, #4]
 80060e0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80060e4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	f000 8145 	beq.w	8006378 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80060f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80060f6:	429a      	cmp	r2, r3
 80060f8:	f080 813e 	bcs.w	8006378 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006102:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006108:	69db      	ldr	r3, [r3, #28]
 800610a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800610e:	f000 8088 	beq.w	8006222 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	330c      	adds	r3, #12
 8006118:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800611c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006120:	e853 3f00 	ldrex	r3, [r3]
 8006124:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006128:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800612c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006130:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	330c      	adds	r3, #12
 800613a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800613e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006142:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006146:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800614a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800614e:	e841 2300 	strex	r3, r2, [r1]
 8006152:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006156:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800615a:	2b00      	cmp	r3, #0
 800615c:	d1d9      	bne.n	8006112 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	3314      	adds	r3, #20
 8006164:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006166:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006168:	e853 3f00 	ldrex	r3, [r3]
 800616c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800616e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006170:	f023 0301 	bic.w	r3, r3, #1
 8006174:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	3314      	adds	r3, #20
 800617e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006182:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006186:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006188:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800618a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800618e:	e841 2300 	strex	r3, r2, [r1]
 8006192:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006194:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006196:	2b00      	cmp	r3, #0
 8006198:	d1e1      	bne.n	800615e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	3314      	adds	r3, #20
 80061a0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061a2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80061a4:	e853 3f00 	ldrex	r3, [r3]
 80061a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80061aa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80061ac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80061b0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	3314      	adds	r3, #20
 80061ba:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80061be:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80061c0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061c2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80061c4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80061c6:	e841 2300 	strex	r3, r2, [r1]
 80061ca:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80061cc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d1e3      	bne.n	800619a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	2220      	movs	r2, #32
 80061d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2200      	movs	r2, #0
 80061de:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	330c      	adds	r3, #12
 80061e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80061ea:	e853 3f00 	ldrex	r3, [r3]
 80061ee:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80061f0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80061f2:	f023 0310 	bic.w	r3, r3, #16
 80061f6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	330c      	adds	r3, #12
 8006200:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8006204:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006206:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006208:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800620a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800620c:	e841 2300 	strex	r3, r2, [r1]
 8006210:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006212:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006214:	2b00      	cmp	r3, #0
 8006216:	d1e3      	bne.n	80061e0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800621c:	4618      	mov	r0, r3
 800621e:	f7fc f969 	bl	80024f4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	2202      	movs	r2, #2
 8006226:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006230:	b29b      	uxth	r3, r3
 8006232:	1ad3      	subs	r3, r2, r3
 8006234:	b29b      	uxth	r3, r3
 8006236:	4619      	mov	r1, r3
 8006238:	6878      	ldr	r0, [r7, #4]
 800623a:	f7fa fec7 	bl	8000fcc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800623e:	e09b      	b.n	8006378 <HAL_UART_IRQHandler+0x518>
 8006240:	08006807 	.word	0x08006807
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800624c:	b29b      	uxth	r3, r3
 800624e:	1ad3      	subs	r3, r2, r3
 8006250:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006258:	b29b      	uxth	r3, r3
 800625a:	2b00      	cmp	r3, #0
 800625c:	f000 808e 	beq.w	800637c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006260:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006264:	2b00      	cmp	r3, #0
 8006266:	f000 8089 	beq.w	800637c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	330c      	adds	r3, #12
 8006270:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006272:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006274:	e853 3f00 	ldrex	r3, [r3]
 8006278:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800627a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800627c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006280:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	330c      	adds	r3, #12
 800628a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800628e:	647a      	str	r2, [r7, #68]	@ 0x44
 8006290:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006292:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006294:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006296:	e841 2300 	strex	r3, r2, [r1]
 800629a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800629c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d1e3      	bne.n	800626a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	3314      	adds	r3, #20
 80062a8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062ac:	e853 3f00 	ldrex	r3, [r3]
 80062b0:	623b      	str	r3, [r7, #32]
   return(result);
 80062b2:	6a3b      	ldr	r3, [r7, #32]
 80062b4:	f023 0301 	bic.w	r3, r3, #1
 80062b8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	3314      	adds	r3, #20
 80062c2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80062c6:	633a      	str	r2, [r7, #48]	@ 0x30
 80062c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062ca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80062cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80062ce:	e841 2300 	strex	r3, r2, [r1]
 80062d2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80062d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d1e3      	bne.n	80062a2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2220      	movs	r2, #32
 80062de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	2200      	movs	r2, #0
 80062e6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	330c      	adds	r3, #12
 80062ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062f0:	693b      	ldr	r3, [r7, #16]
 80062f2:	e853 3f00 	ldrex	r3, [r3]
 80062f6:	60fb      	str	r3, [r7, #12]
   return(result);
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	f023 0310 	bic.w	r3, r3, #16
 80062fe:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	330c      	adds	r3, #12
 8006308:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800630c:	61fa      	str	r2, [r7, #28]
 800630e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006310:	69b9      	ldr	r1, [r7, #24]
 8006312:	69fa      	ldr	r2, [r7, #28]
 8006314:	e841 2300 	strex	r3, r2, [r1]
 8006318:	617b      	str	r3, [r7, #20]
   return(result);
 800631a:	697b      	ldr	r3, [r7, #20]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d1e3      	bne.n	80062e8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2202      	movs	r2, #2
 8006324:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006326:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800632a:	4619      	mov	r1, r3
 800632c:	6878      	ldr	r0, [r7, #4]
 800632e:	f7fa fe4d 	bl	8000fcc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006332:	e023      	b.n	800637c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006334:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006338:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800633c:	2b00      	cmp	r3, #0
 800633e:	d009      	beq.n	8006354 <HAL_UART_IRQHandler+0x4f4>
 8006340:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006344:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006348:	2b00      	cmp	r3, #0
 800634a:	d003      	beq.n	8006354 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800634c:	6878      	ldr	r0, [r7, #4]
 800634e:	f000 fa6e 	bl	800682e <UART_Transmit_IT>
    return;
 8006352:	e014      	b.n	800637e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006354:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006358:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800635c:	2b00      	cmp	r3, #0
 800635e:	d00e      	beq.n	800637e <HAL_UART_IRQHandler+0x51e>
 8006360:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006364:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006368:	2b00      	cmp	r3, #0
 800636a:	d008      	beq.n	800637e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800636c:	6878      	ldr	r0, [r7, #4]
 800636e:	f000 faae 	bl	80068ce <UART_EndTransmit_IT>
    return;
 8006372:	e004      	b.n	800637e <HAL_UART_IRQHandler+0x51e>
    return;
 8006374:	bf00      	nop
 8006376:	e002      	b.n	800637e <HAL_UART_IRQHandler+0x51e>
      return;
 8006378:	bf00      	nop
 800637a:	e000      	b.n	800637e <HAL_UART_IRQHandler+0x51e>
      return;
 800637c:	bf00      	nop
  }
}
 800637e:	37e8      	adds	r7, #232	@ 0xe8
 8006380:	46bd      	mov	sp, r7
 8006382:	bd80      	pop	{r7, pc}

08006384 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006384:	b480      	push	{r7}
 8006386:	b083      	sub	sp, #12
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800638c:	bf00      	nop
 800638e:	370c      	adds	r7, #12
 8006390:	46bd      	mov	sp, r7
 8006392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006396:	4770      	bx	lr

08006398 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006398:	b480      	push	{r7}
 800639a:	b083      	sub	sp, #12
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80063a0:	bf00      	nop
 80063a2:	370c      	adds	r7, #12
 80063a4:	46bd      	mov	sp, r7
 80063a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063aa:	4770      	bx	lr

080063ac <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80063ac:	b480      	push	{r7}
 80063ae:	b083      	sub	sp, #12
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80063b4:	bf00      	nop
 80063b6:	370c      	adds	r7, #12
 80063b8:	46bd      	mov	sp, r7
 80063ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063be:	4770      	bx	lr

080063c0 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b09c      	sub	sp, #112	@ 0x70
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063cc:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d172      	bne.n	80064c2 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80063dc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80063de:	2200      	movs	r2, #0
 80063e0:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80063e2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	330c      	adds	r3, #12
 80063e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80063ec:	e853 3f00 	ldrex	r3, [r3]
 80063f0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80063f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80063f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80063f8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80063fa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	330c      	adds	r3, #12
 8006400:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8006402:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006404:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006406:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006408:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800640a:	e841 2300 	strex	r3, r2, [r1]
 800640e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006410:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006412:	2b00      	cmp	r3, #0
 8006414:	d1e5      	bne.n	80063e2 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006416:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	3314      	adds	r3, #20
 800641c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800641e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006420:	e853 3f00 	ldrex	r3, [r3]
 8006424:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006426:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006428:	f023 0301 	bic.w	r3, r3, #1
 800642c:	667b      	str	r3, [r7, #100]	@ 0x64
 800642e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	3314      	adds	r3, #20
 8006434:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006436:	647a      	str	r2, [r7, #68]	@ 0x44
 8006438:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800643a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800643c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800643e:	e841 2300 	strex	r3, r2, [r1]
 8006442:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006444:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006446:	2b00      	cmp	r3, #0
 8006448:	d1e5      	bne.n	8006416 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800644a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	3314      	adds	r3, #20
 8006450:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006452:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006454:	e853 3f00 	ldrex	r3, [r3]
 8006458:	623b      	str	r3, [r7, #32]
   return(result);
 800645a:	6a3b      	ldr	r3, [r7, #32]
 800645c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006460:	663b      	str	r3, [r7, #96]	@ 0x60
 8006462:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	3314      	adds	r3, #20
 8006468:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800646a:	633a      	str	r2, [r7, #48]	@ 0x30
 800646c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800646e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006470:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006472:	e841 2300 	strex	r3, r2, [r1]
 8006476:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006478:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800647a:	2b00      	cmp	r3, #0
 800647c:	d1e5      	bne.n	800644a <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800647e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006480:	2220      	movs	r2, #32
 8006482:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006486:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006488:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800648a:	2b01      	cmp	r3, #1
 800648c:	d119      	bne.n	80064c2 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800648e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	330c      	adds	r3, #12
 8006494:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006496:	693b      	ldr	r3, [r7, #16]
 8006498:	e853 3f00 	ldrex	r3, [r3]
 800649c:	60fb      	str	r3, [r7, #12]
   return(result);
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	f023 0310 	bic.w	r3, r3, #16
 80064a4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80064a6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	330c      	adds	r3, #12
 80064ac:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80064ae:	61fa      	str	r2, [r7, #28]
 80064b0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064b2:	69b9      	ldr	r1, [r7, #24]
 80064b4:	69fa      	ldr	r2, [r7, #28]
 80064b6:	e841 2300 	strex	r3, r2, [r1]
 80064ba:	617b      	str	r3, [r7, #20]
   return(result);
 80064bc:	697b      	ldr	r3, [r7, #20]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d1e5      	bne.n	800648e <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80064c2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80064c4:	2200      	movs	r2, #0
 80064c6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80064c8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80064ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064cc:	2b01      	cmp	r3, #1
 80064ce:	d106      	bne.n	80064de <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80064d0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80064d2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80064d4:	4619      	mov	r1, r3
 80064d6:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80064d8:	f7fa fd78 	bl	8000fcc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80064dc:	e002      	b.n	80064e4 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80064de:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80064e0:	f7fa fd6a 	bl	8000fb8 <HAL_UART_RxCpltCallback>
}
 80064e4:	bf00      	nop
 80064e6:	3770      	adds	r7, #112	@ 0x70
 80064e8:	46bd      	mov	sp, r7
 80064ea:	bd80      	pop	{r7, pc}

080064ec <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80064ec:	b580      	push	{r7, lr}
 80064ee:	b084      	sub	sp, #16
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064f8:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	2201      	movs	r2, #1
 80064fe:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006504:	2b01      	cmp	r3, #1
 8006506:	d108      	bne.n	800651a <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800650c:	085b      	lsrs	r3, r3, #1
 800650e:	b29b      	uxth	r3, r3
 8006510:	4619      	mov	r1, r3
 8006512:	68f8      	ldr	r0, [r7, #12]
 8006514:	f7fa fd5a 	bl	8000fcc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006518:	e002      	b.n	8006520 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800651a:	68f8      	ldr	r0, [r7, #12]
 800651c:	f7ff ff3c 	bl	8006398 <HAL_UART_RxHalfCpltCallback>
}
 8006520:	bf00      	nop
 8006522:	3710      	adds	r7, #16
 8006524:	46bd      	mov	sp, r7
 8006526:	bd80      	pop	{r7, pc}

08006528 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006528:	b580      	push	{r7, lr}
 800652a:	b084      	sub	sp, #16
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006530:	2300      	movs	r3, #0
 8006532:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006538:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800653a:	68bb      	ldr	r3, [r7, #8]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	695b      	ldr	r3, [r3, #20]
 8006540:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006544:	2b80      	cmp	r3, #128	@ 0x80
 8006546:	bf0c      	ite	eq
 8006548:	2301      	moveq	r3, #1
 800654a:	2300      	movne	r3, #0
 800654c:	b2db      	uxtb	r3, r3
 800654e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006550:	68bb      	ldr	r3, [r7, #8]
 8006552:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006556:	b2db      	uxtb	r3, r3
 8006558:	2b21      	cmp	r3, #33	@ 0x21
 800655a:	d108      	bne.n	800656e <UART_DMAError+0x46>
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d005      	beq.n	800656e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006562:	68bb      	ldr	r3, [r7, #8]
 8006564:	2200      	movs	r2, #0
 8006566:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8006568:	68b8      	ldr	r0, [r7, #8]
 800656a:	f000 f8c1 	bl	80066f0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800656e:	68bb      	ldr	r3, [r7, #8]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	695b      	ldr	r3, [r3, #20]
 8006574:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006578:	2b40      	cmp	r3, #64	@ 0x40
 800657a:	bf0c      	ite	eq
 800657c:	2301      	moveq	r3, #1
 800657e:	2300      	movne	r3, #0
 8006580:	b2db      	uxtb	r3, r3
 8006582:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006584:	68bb      	ldr	r3, [r7, #8]
 8006586:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800658a:	b2db      	uxtb	r3, r3
 800658c:	2b22      	cmp	r3, #34	@ 0x22
 800658e:	d108      	bne.n	80065a2 <UART_DMAError+0x7a>
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d005      	beq.n	80065a2 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006596:	68bb      	ldr	r3, [r7, #8]
 8006598:	2200      	movs	r2, #0
 800659a:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 800659c:	68b8      	ldr	r0, [r7, #8]
 800659e:	f000 f8cf 	bl	8006740 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80065a2:	68bb      	ldr	r3, [r7, #8]
 80065a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065a6:	f043 0210 	orr.w	r2, r3, #16
 80065aa:	68bb      	ldr	r3, [r7, #8]
 80065ac:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80065ae:	68b8      	ldr	r0, [r7, #8]
 80065b0:	f7ff fefc 	bl	80063ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80065b4:	bf00      	nop
 80065b6:	3710      	adds	r7, #16
 80065b8:	46bd      	mov	sp, r7
 80065ba:	bd80      	pop	{r7, pc}

080065bc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	b098      	sub	sp, #96	@ 0x60
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	60f8      	str	r0, [r7, #12]
 80065c4:	60b9      	str	r1, [r7, #8]
 80065c6:	4613      	mov	r3, r2
 80065c8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80065ca:	68ba      	ldr	r2, [r7, #8]
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	88fa      	ldrh	r2, [r7, #6]
 80065d4:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	2200      	movs	r2, #0
 80065da:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	2222      	movs	r2, #34	@ 0x22
 80065e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065e8:	4a3e      	ldr	r2, [pc, #248]	@ (80066e4 <UART_Start_Receive_DMA+0x128>)
 80065ea:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065f0:	4a3d      	ldr	r2, [pc, #244]	@ (80066e8 <UART_Start_Receive_DMA+0x12c>)
 80065f2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065f8:	4a3c      	ldr	r2, [pc, #240]	@ (80066ec <UART_Start_Receive_DMA+0x130>)
 80065fa:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006600:	2200      	movs	r2, #0
 8006602:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8006604:	f107 0308 	add.w	r3, r7, #8
 8006608:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	3304      	adds	r3, #4
 8006614:	4619      	mov	r1, r3
 8006616:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006618:	681a      	ldr	r2, [r3, #0]
 800661a:	88fb      	ldrh	r3, [r7, #6]
 800661c:	f7fb ff12 	bl	8002444 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8006620:	2300      	movs	r3, #0
 8006622:	613b      	str	r3, [r7, #16]
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	613b      	str	r3, [r7, #16]
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	685b      	ldr	r3, [r3, #4]
 8006632:	613b      	str	r3, [r7, #16]
 8006634:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	691b      	ldr	r3, [r3, #16]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d019      	beq.n	8006672 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	330c      	adds	r3, #12
 8006644:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006646:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006648:	e853 3f00 	ldrex	r3, [r3]
 800664c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800664e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006650:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006654:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	330c      	adds	r3, #12
 800665c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800665e:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8006660:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006662:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8006664:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006666:	e841 2300 	strex	r3, r2, [r1]
 800666a:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800666c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800666e:	2b00      	cmp	r3, #0
 8006670:	d1e5      	bne.n	800663e <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	3314      	adds	r3, #20
 8006678:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800667a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800667c:	e853 3f00 	ldrex	r3, [r3]
 8006680:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006682:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006684:	f043 0301 	orr.w	r3, r3, #1
 8006688:	657b      	str	r3, [r7, #84]	@ 0x54
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	3314      	adds	r3, #20
 8006690:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006692:	63ba      	str	r2, [r7, #56]	@ 0x38
 8006694:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006696:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8006698:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800669a:	e841 2300 	strex	r3, r2, [r1]
 800669e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80066a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d1e5      	bne.n	8006672 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	3314      	adds	r3, #20
 80066ac:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066ae:	69bb      	ldr	r3, [r7, #24]
 80066b0:	e853 3f00 	ldrex	r3, [r3]
 80066b4:	617b      	str	r3, [r7, #20]
   return(result);
 80066b6:	697b      	ldr	r3, [r7, #20]
 80066b8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80066bc:	653b      	str	r3, [r7, #80]	@ 0x50
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	3314      	adds	r3, #20
 80066c4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80066c6:	627a      	str	r2, [r7, #36]	@ 0x24
 80066c8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066ca:	6a39      	ldr	r1, [r7, #32]
 80066cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80066ce:	e841 2300 	strex	r3, r2, [r1]
 80066d2:	61fb      	str	r3, [r7, #28]
   return(result);
 80066d4:	69fb      	ldr	r3, [r7, #28]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d1e5      	bne.n	80066a6 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80066da:	2300      	movs	r3, #0
}
 80066dc:	4618      	mov	r0, r3
 80066de:	3760      	adds	r7, #96	@ 0x60
 80066e0:	46bd      	mov	sp, r7
 80066e2:	bd80      	pop	{r7, pc}
 80066e4:	080063c1 	.word	0x080063c1
 80066e8:	080064ed 	.word	0x080064ed
 80066ec:	08006529 	.word	0x08006529

080066f0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80066f0:	b480      	push	{r7}
 80066f2:	b089      	sub	sp, #36	@ 0x24
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	330c      	adds	r3, #12
 80066fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	e853 3f00 	ldrex	r3, [r3]
 8006706:	60bb      	str	r3, [r7, #8]
   return(result);
 8006708:	68bb      	ldr	r3, [r7, #8]
 800670a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800670e:	61fb      	str	r3, [r7, #28]
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	330c      	adds	r3, #12
 8006716:	69fa      	ldr	r2, [r7, #28]
 8006718:	61ba      	str	r2, [r7, #24]
 800671a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800671c:	6979      	ldr	r1, [r7, #20]
 800671e:	69ba      	ldr	r2, [r7, #24]
 8006720:	e841 2300 	strex	r3, r2, [r1]
 8006724:	613b      	str	r3, [r7, #16]
   return(result);
 8006726:	693b      	ldr	r3, [r7, #16]
 8006728:	2b00      	cmp	r3, #0
 800672a:	d1e5      	bne.n	80066f8 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2220      	movs	r2, #32
 8006730:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8006734:	bf00      	nop
 8006736:	3724      	adds	r7, #36	@ 0x24
 8006738:	46bd      	mov	sp, r7
 800673a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673e:	4770      	bx	lr

08006740 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006740:	b480      	push	{r7}
 8006742:	b095      	sub	sp, #84	@ 0x54
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	330c      	adds	r3, #12
 800674e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006750:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006752:	e853 3f00 	ldrex	r3, [r3]
 8006756:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006758:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800675a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800675e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	330c      	adds	r3, #12
 8006766:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006768:	643a      	str	r2, [r7, #64]	@ 0x40
 800676a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800676c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800676e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006770:	e841 2300 	strex	r3, r2, [r1]
 8006774:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006776:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006778:	2b00      	cmp	r3, #0
 800677a:	d1e5      	bne.n	8006748 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	3314      	adds	r3, #20
 8006782:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006784:	6a3b      	ldr	r3, [r7, #32]
 8006786:	e853 3f00 	ldrex	r3, [r3]
 800678a:	61fb      	str	r3, [r7, #28]
   return(result);
 800678c:	69fb      	ldr	r3, [r7, #28]
 800678e:	f023 0301 	bic.w	r3, r3, #1
 8006792:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	3314      	adds	r3, #20
 800679a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800679c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800679e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067a0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80067a2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80067a4:	e841 2300 	strex	r3, r2, [r1]
 80067a8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80067aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d1e5      	bne.n	800677c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067b4:	2b01      	cmp	r3, #1
 80067b6:	d119      	bne.n	80067ec <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	330c      	adds	r3, #12
 80067be:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	e853 3f00 	ldrex	r3, [r3]
 80067c6:	60bb      	str	r3, [r7, #8]
   return(result);
 80067c8:	68bb      	ldr	r3, [r7, #8]
 80067ca:	f023 0310 	bic.w	r3, r3, #16
 80067ce:	647b      	str	r3, [r7, #68]	@ 0x44
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	330c      	adds	r3, #12
 80067d6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80067d8:	61ba      	str	r2, [r7, #24]
 80067da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067dc:	6979      	ldr	r1, [r7, #20]
 80067de:	69ba      	ldr	r2, [r7, #24]
 80067e0:	e841 2300 	strex	r3, r2, [r1]
 80067e4:	613b      	str	r3, [r7, #16]
   return(result);
 80067e6:	693b      	ldr	r3, [r7, #16]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d1e5      	bne.n	80067b8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2220      	movs	r2, #32
 80067f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2200      	movs	r2, #0
 80067f8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80067fa:	bf00      	nop
 80067fc:	3754      	adds	r7, #84	@ 0x54
 80067fe:	46bd      	mov	sp, r7
 8006800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006804:	4770      	bx	lr

08006806 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006806:	b580      	push	{r7, lr}
 8006808:	b084      	sub	sp, #16
 800680a:	af00      	add	r7, sp, #0
 800680c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006812:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	2200      	movs	r2, #0
 8006818:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	2200      	movs	r2, #0
 800681e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006820:	68f8      	ldr	r0, [r7, #12]
 8006822:	f7ff fdc3 	bl	80063ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006826:	bf00      	nop
 8006828:	3710      	adds	r7, #16
 800682a:	46bd      	mov	sp, r7
 800682c:	bd80      	pop	{r7, pc}

0800682e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800682e:	b480      	push	{r7}
 8006830:	b085      	sub	sp, #20
 8006832:	af00      	add	r7, sp, #0
 8006834:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800683c:	b2db      	uxtb	r3, r3
 800683e:	2b21      	cmp	r3, #33	@ 0x21
 8006840:	d13e      	bne.n	80068c0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	689b      	ldr	r3, [r3, #8]
 8006846:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800684a:	d114      	bne.n	8006876 <UART_Transmit_IT+0x48>
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	691b      	ldr	r3, [r3, #16]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d110      	bne.n	8006876 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	6a1b      	ldr	r3, [r3, #32]
 8006858:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	881b      	ldrh	r3, [r3, #0]
 800685e:	461a      	mov	r2, r3
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006868:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6a1b      	ldr	r3, [r3, #32]
 800686e:	1c9a      	adds	r2, r3, #2
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	621a      	str	r2, [r3, #32]
 8006874:	e008      	b.n	8006888 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6a1b      	ldr	r3, [r3, #32]
 800687a:	1c59      	adds	r1, r3, #1
 800687c:	687a      	ldr	r2, [r7, #4]
 800687e:	6211      	str	r1, [r2, #32]
 8006880:	781a      	ldrb	r2, [r3, #0]
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800688c:	b29b      	uxth	r3, r3
 800688e:	3b01      	subs	r3, #1
 8006890:	b29b      	uxth	r3, r3
 8006892:	687a      	ldr	r2, [r7, #4]
 8006894:	4619      	mov	r1, r3
 8006896:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8006898:	2b00      	cmp	r3, #0
 800689a:	d10f      	bne.n	80068bc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	68da      	ldr	r2, [r3, #12]
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80068aa:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	68da      	ldr	r2, [r3, #12]
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80068ba:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80068bc:	2300      	movs	r3, #0
 80068be:	e000      	b.n	80068c2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80068c0:	2302      	movs	r3, #2
  }
}
 80068c2:	4618      	mov	r0, r3
 80068c4:	3714      	adds	r7, #20
 80068c6:	46bd      	mov	sp, r7
 80068c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068cc:	4770      	bx	lr

080068ce <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80068ce:	b580      	push	{r7, lr}
 80068d0:	b082      	sub	sp, #8
 80068d2:	af00      	add	r7, sp, #0
 80068d4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	68da      	ldr	r2, [r3, #12]
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80068e4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2220      	movs	r2, #32
 80068ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80068ee:	6878      	ldr	r0, [r7, #4]
 80068f0:	f7ff fd48 	bl	8006384 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80068f4:	2300      	movs	r3, #0
}
 80068f6:	4618      	mov	r0, r3
 80068f8:	3708      	adds	r7, #8
 80068fa:	46bd      	mov	sp, r7
 80068fc:	bd80      	pop	{r7, pc}

080068fe <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80068fe:	b580      	push	{r7, lr}
 8006900:	b08c      	sub	sp, #48	@ 0x30
 8006902:	af00      	add	r7, sp, #0
 8006904:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800690c:	b2db      	uxtb	r3, r3
 800690e:	2b22      	cmp	r3, #34	@ 0x22
 8006910:	f040 80ae 	bne.w	8006a70 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	689b      	ldr	r3, [r3, #8]
 8006918:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800691c:	d117      	bne.n	800694e <UART_Receive_IT+0x50>
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	691b      	ldr	r3, [r3, #16]
 8006922:	2b00      	cmp	r3, #0
 8006924:	d113      	bne.n	800694e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006926:	2300      	movs	r3, #0
 8006928:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800692e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	685b      	ldr	r3, [r3, #4]
 8006936:	b29b      	uxth	r3, r3
 8006938:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800693c:	b29a      	uxth	r2, r3
 800693e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006940:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006946:	1c9a      	adds	r2, r3, #2
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	629a      	str	r2, [r3, #40]	@ 0x28
 800694c:	e026      	b.n	800699c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006952:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8006954:	2300      	movs	r3, #0
 8006956:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	689b      	ldr	r3, [r3, #8]
 800695c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006960:	d007      	beq.n	8006972 <UART_Receive_IT+0x74>
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	689b      	ldr	r3, [r3, #8]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d10a      	bne.n	8006980 <UART_Receive_IT+0x82>
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	691b      	ldr	r3, [r3, #16]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d106      	bne.n	8006980 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	685b      	ldr	r3, [r3, #4]
 8006978:	b2da      	uxtb	r2, r3
 800697a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800697c:	701a      	strb	r2, [r3, #0]
 800697e:	e008      	b.n	8006992 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	685b      	ldr	r3, [r3, #4]
 8006986:	b2db      	uxtb	r3, r3
 8006988:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800698c:	b2da      	uxtb	r2, r3
 800698e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006990:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006996:	1c5a      	adds	r2, r3, #1
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80069a0:	b29b      	uxth	r3, r3
 80069a2:	3b01      	subs	r3, #1
 80069a4:	b29b      	uxth	r3, r3
 80069a6:	687a      	ldr	r2, [r7, #4]
 80069a8:	4619      	mov	r1, r3
 80069aa:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d15d      	bne.n	8006a6c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	68da      	ldr	r2, [r3, #12]
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f022 0220 	bic.w	r2, r2, #32
 80069be:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	68da      	ldr	r2, [r3, #12]
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80069ce:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	695a      	ldr	r2, [r3, #20]
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f022 0201 	bic.w	r2, r2, #1
 80069de:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2220      	movs	r2, #32
 80069e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2200      	movs	r2, #0
 80069ec:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069f2:	2b01      	cmp	r3, #1
 80069f4:	d135      	bne.n	8006a62 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	2200      	movs	r2, #0
 80069fa:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	330c      	adds	r3, #12
 8006a02:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a04:	697b      	ldr	r3, [r7, #20]
 8006a06:	e853 3f00 	ldrex	r3, [r3]
 8006a0a:	613b      	str	r3, [r7, #16]
   return(result);
 8006a0c:	693b      	ldr	r3, [r7, #16]
 8006a0e:	f023 0310 	bic.w	r3, r3, #16
 8006a12:	627b      	str	r3, [r7, #36]	@ 0x24
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	330c      	adds	r3, #12
 8006a1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a1c:	623a      	str	r2, [r7, #32]
 8006a1e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a20:	69f9      	ldr	r1, [r7, #28]
 8006a22:	6a3a      	ldr	r2, [r7, #32]
 8006a24:	e841 2300 	strex	r3, r2, [r1]
 8006a28:	61bb      	str	r3, [r7, #24]
   return(result);
 8006a2a:	69bb      	ldr	r3, [r7, #24]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d1e5      	bne.n	80069fc <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	f003 0310 	and.w	r3, r3, #16
 8006a3a:	2b10      	cmp	r3, #16
 8006a3c:	d10a      	bne.n	8006a54 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006a3e:	2300      	movs	r3, #0
 8006a40:	60fb      	str	r3, [r7, #12]
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	60fb      	str	r3, [r7, #12]
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	685b      	ldr	r3, [r3, #4]
 8006a50:	60fb      	str	r3, [r7, #12]
 8006a52:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006a58:	4619      	mov	r1, r3
 8006a5a:	6878      	ldr	r0, [r7, #4]
 8006a5c:	f7fa fab6 	bl	8000fcc <HAL_UARTEx_RxEventCallback>
 8006a60:	e002      	b.n	8006a68 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006a62:	6878      	ldr	r0, [r7, #4]
 8006a64:	f7fa faa8 	bl	8000fb8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006a68:	2300      	movs	r3, #0
 8006a6a:	e002      	b.n	8006a72 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006a6c:	2300      	movs	r3, #0
 8006a6e:	e000      	b.n	8006a72 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006a70:	2302      	movs	r3, #2
  }
}
 8006a72:	4618      	mov	r0, r3
 8006a74:	3730      	adds	r7, #48	@ 0x30
 8006a76:	46bd      	mov	sp, r7
 8006a78:	bd80      	pop	{r7, pc}
	...

08006a7c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006a7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006a80:	b0c0      	sub	sp, #256	@ 0x100
 8006a82:	af00      	add	r7, sp, #0
 8006a84:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006a88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	691b      	ldr	r3, [r3, #16]
 8006a90:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006a94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a98:	68d9      	ldr	r1, [r3, #12]
 8006a9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a9e:	681a      	ldr	r2, [r3, #0]
 8006aa0:	ea40 0301 	orr.w	r3, r0, r1
 8006aa4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006aa6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006aaa:	689a      	ldr	r2, [r3, #8]
 8006aac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ab0:	691b      	ldr	r3, [r3, #16]
 8006ab2:	431a      	orrs	r2, r3
 8006ab4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ab8:	695b      	ldr	r3, [r3, #20]
 8006aba:	431a      	orrs	r2, r3
 8006abc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ac0:	69db      	ldr	r3, [r3, #28]
 8006ac2:	4313      	orrs	r3, r2
 8006ac4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006ac8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	68db      	ldr	r3, [r3, #12]
 8006ad0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006ad4:	f021 010c 	bic.w	r1, r1, #12
 8006ad8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006adc:	681a      	ldr	r2, [r3, #0]
 8006ade:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006ae2:	430b      	orrs	r3, r1
 8006ae4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006ae6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	695b      	ldr	r3, [r3, #20]
 8006aee:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006af2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006af6:	6999      	ldr	r1, [r3, #24]
 8006af8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006afc:	681a      	ldr	r2, [r3, #0]
 8006afe:	ea40 0301 	orr.w	r3, r0, r1
 8006b02:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006b04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b08:	681a      	ldr	r2, [r3, #0]
 8006b0a:	4b8f      	ldr	r3, [pc, #572]	@ (8006d48 <UART_SetConfig+0x2cc>)
 8006b0c:	429a      	cmp	r2, r3
 8006b0e:	d005      	beq.n	8006b1c <UART_SetConfig+0xa0>
 8006b10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b14:	681a      	ldr	r2, [r3, #0]
 8006b16:	4b8d      	ldr	r3, [pc, #564]	@ (8006d4c <UART_SetConfig+0x2d0>)
 8006b18:	429a      	cmp	r2, r3
 8006b1a:	d104      	bne.n	8006b26 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006b1c:	f7fe fbea 	bl	80052f4 <HAL_RCC_GetPCLK2Freq>
 8006b20:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006b24:	e003      	b.n	8006b2e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006b26:	f7fe fbd1 	bl	80052cc <HAL_RCC_GetPCLK1Freq>
 8006b2a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006b2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b32:	69db      	ldr	r3, [r3, #28]
 8006b34:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006b38:	f040 810c 	bne.w	8006d54 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006b3c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006b40:	2200      	movs	r2, #0
 8006b42:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006b46:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006b4a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006b4e:	4622      	mov	r2, r4
 8006b50:	462b      	mov	r3, r5
 8006b52:	1891      	adds	r1, r2, r2
 8006b54:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006b56:	415b      	adcs	r3, r3
 8006b58:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006b5a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006b5e:	4621      	mov	r1, r4
 8006b60:	eb12 0801 	adds.w	r8, r2, r1
 8006b64:	4629      	mov	r1, r5
 8006b66:	eb43 0901 	adc.w	r9, r3, r1
 8006b6a:	f04f 0200 	mov.w	r2, #0
 8006b6e:	f04f 0300 	mov.w	r3, #0
 8006b72:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006b76:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006b7a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006b7e:	4690      	mov	r8, r2
 8006b80:	4699      	mov	r9, r3
 8006b82:	4623      	mov	r3, r4
 8006b84:	eb18 0303 	adds.w	r3, r8, r3
 8006b88:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006b8c:	462b      	mov	r3, r5
 8006b8e:	eb49 0303 	adc.w	r3, r9, r3
 8006b92:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006b96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b9a:	685b      	ldr	r3, [r3, #4]
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006ba2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006ba6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006baa:	460b      	mov	r3, r1
 8006bac:	18db      	adds	r3, r3, r3
 8006bae:	653b      	str	r3, [r7, #80]	@ 0x50
 8006bb0:	4613      	mov	r3, r2
 8006bb2:	eb42 0303 	adc.w	r3, r2, r3
 8006bb6:	657b      	str	r3, [r7, #84]	@ 0x54
 8006bb8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006bbc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006bc0:	f7f9 fb66 	bl	8000290 <__aeabi_uldivmod>
 8006bc4:	4602      	mov	r2, r0
 8006bc6:	460b      	mov	r3, r1
 8006bc8:	4b61      	ldr	r3, [pc, #388]	@ (8006d50 <UART_SetConfig+0x2d4>)
 8006bca:	fba3 2302 	umull	r2, r3, r3, r2
 8006bce:	095b      	lsrs	r3, r3, #5
 8006bd0:	011c      	lsls	r4, r3, #4
 8006bd2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006bdc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006be0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006be4:	4642      	mov	r2, r8
 8006be6:	464b      	mov	r3, r9
 8006be8:	1891      	adds	r1, r2, r2
 8006bea:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006bec:	415b      	adcs	r3, r3
 8006bee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006bf0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006bf4:	4641      	mov	r1, r8
 8006bf6:	eb12 0a01 	adds.w	sl, r2, r1
 8006bfa:	4649      	mov	r1, r9
 8006bfc:	eb43 0b01 	adc.w	fp, r3, r1
 8006c00:	f04f 0200 	mov.w	r2, #0
 8006c04:	f04f 0300 	mov.w	r3, #0
 8006c08:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006c0c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006c10:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006c14:	4692      	mov	sl, r2
 8006c16:	469b      	mov	fp, r3
 8006c18:	4643      	mov	r3, r8
 8006c1a:	eb1a 0303 	adds.w	r3, sl, r3
 8006c1e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006c22:	464b      	mov	r3, r9
 8006c24:	eb4b 0303 	adc.w	r3, fp, r3
 8006c28:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006c2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c30:	685b      	ldr	r3, [r3, #4]
 8006c32:	2200      	movs	r2, #0
 8006c34:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006c38:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006c3c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006c40:	460b      	mov	r3, r1
 8006c42:	18db      	adds	r3, r3, r3
 8006c44:	643b      	str	r3, [r7, #64]	@ 0x40
 8006c46:	4613      	mov	r3, r2
 8006c48:	eb42 0303 	adc.w	r3, r2, r3
 8006c4c:	647b      	str	r3, [r7, #68]	@ 0x44
 8006c4e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006c52:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006c56:	f7f9 fb1b 	bl	8000290 <__aeabi_uldivmod>
 8006c5a:	4602      	mov	r2, r0
 8006c5c:	460b      	mov	r3, r1
 8006c5e:	4611      	mov	r1, r2
 8006c60:	4b3b      	ldr	r3, [pc, #236]	@ (8006d50 <UART_SetConfig+0x2d4>)
 8006c62:	fba3 2301 	umull	r2, r3, r3, r1
 8006c66:	095b      	lsrs	r3, r3, #5
 8006c68:	2264      	movs	r2, #100	@ 0x64
 8006c6a:	fb02 f303 	mul.w	r3, r2, r3
 8006c6e:	1acb      	subs	r3, r1, r3
 8006c70:	00db      	lsls	r3, r3, #3
 8006c72:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006c76:	4b36      	ldr	r3, [pc, #216]	@ (8006d50 <UART_SetConfig+0x2d4>)
 8006c78:	fba3 2302 	umull	r2, r3, r3, r2
 8006c7c:	095b      	lsrs	r3, r3, #5
 8006c7e:	005b      	lsls	r3, r3, #1
 8006c80:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006c84:	441c      	add	r4, r3
 8006c86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006c90:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006c94:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006c98:	4642      	mov	r2, r8
 8006c9a:	464b      	mov	r3, r9
 8006c9c:	1891      	adds	r1, r2, r2
 8006c9e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006ca0:	415b      	adcs	r3, r3
 8006ca2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006ca4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006ca8:	4641      	mov	r1, r8
 8006caa:	1851      	adds	r1, r2, r1
 8006cac:	6339      	str	r1, [r7, #48]	@ 0x30
 8006cae:	4649      	mov	r1, r9
 8006cb0:	414b      	adcs	r3, r1
 8006cb2:	637b      	str	r3, [r7, #52]	@ 0x34
 8006cb4:	f04f 0200 	mov.w	r2, #0
 8006cb8:	f04f 0300 	mov.w	r3, #0
 8006cbc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006cc0:	4659      	mov	r1, fp
 8006cc2:	00cb      	lsls	r3, r1, #3
 8006cc4:	4651      	mov	r1, sl
 8006cc6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006cca:	4651      	mov	r1, sl
 8006ccc:	00ca      	lsls	r2, r1, #3
 8006cce:	4610      	mov	r0, r2
 8006cd0:	4619      	mov	r1, r3
 8006cd2:	4603      	mov	r3, r0
 8006cd4:	4642      	mov	r2, r8
 8006cd6:	189b      	adds	r3, r3, r2
 8006cd8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006cdc:	464b      	mov	r3, r9
 8006cde:	460a      	mov	r2, r1
 8006ce0:	eb42 0303 	adc.w	r3, r2, r3
 8006ce4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006ce8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006cec:	685b      	ldr	r3, [r3, #4]
 8006cee:	2200      	movs	r2, #0
 8006cf0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006cf4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006cf8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006cfc:	460b      	mov	r3, r1
 8006cfe:	18db      	adds	r3, r3, r3
 8006d00:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006d02:	4613      	mov	r3, r2
 8006d04:	eb42 0303 	adc.w	r3, r2, r3
 8006d08:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006d0a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006d0e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006d12:	f7f9 fabd 	bl	8000290 <__aeabi_uldivmod>
 8006d16:	4602      	mov	r2, r0
 8006d18:	460b      	mov	r3, r1
 8006d1a:	4b0d      	ldr	r3, [pc, #52]	@ (8006d50 <UART_SetConfig+0x2d4>)
 8006d1c:	fba3 1302 	umull	r1, r3, r3, r2
 8006d20:	095b      	lsrs	r3, r3, #5
 8006d22:	2164      	movs	r1, #100	@ 0x64
 8006d24:	fb01 f303 	mul.w	r3, r1, r3
 8006d28:	1ad3      	subs	r3, r2, r3
 8006d2a:	00db      	lsls	r3, r3, #3
 8006d2c:	3332      	adds	r3, #50	@ 0x32
 8006d2e:	4a08      	ldr	r2, [pc, #32]	@ (8006d50 <UART_SetConfig+0x2d4>)
 8006d30:	fba2 2303 	umull	r2, r3, r2, r3
 8006d34:	095b      	lsrs	r3, r3, #5
 8006d36:	f003 0207 	and.w	r2, r3, #7
 8006d3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	4422      	add	r2, r4
 8006d42:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006d44:	e106      	b.n	8006f54 <UART_SetConfig+0x4d8>
 8006d46:	bf00      	nop
 8006d48:	40011000 	.word	0x40011000
 8006d4c:	40011400 	.word	0x40011400
 8006d50:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006d54:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006d58:	2200      	movs	r2, #0
 8006d5a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006d5e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006d62:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006d66:	4642      	mov	r2, r8
 8006d68:	464b      	mov	r3, r9
 8006d6a:	1891      	adds	r1, r2, r2
 8006d6c:	6239      	str	r1, [r7, #32]
 8006d6e:	415b      	adcs	r3, r3
 8006d70:	627b      	str	r3, [r7, #36]	@ 0x24
 8006d72:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006d76:	4641      	mov	r1, r8
 8006d78:	1854      	adds	r4, r2, r1
 8006d7a:	4649      	mov	r1, r9
 8006d7c:	eb43 0501 	adc.w	r5, r3, r1
 8006d80:	f04f 0200 	mov.w	r2, #0
 8006d84:	f04f 0300 	mov.w	r3, #0
 8006d88:	00eb      	lsls	r3, r5, #3
 8006d8a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006d8e:	00e2      	lsls	r2, r4, #3
 8006d90:	4614      	mov	r4, r2
 8006d92:	461d      	mov	r5, r3
 8006d94:	4643      	mov	r3, r8
 8006d96:	18e3      	adds	r3, r4, r3
 8006d98:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006d9c:	464b      	mov	r3, r9
 8006d9e:	eb45 0303 	adc.w	r3, r5, r3
 8006da2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006da6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006daa:	685b      	ldr	r3, [r3, #4]
 8006dac:	2200      	movs	r2, #0
 8006dae:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006db2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006db6:	f04f 0200 	mov.w	r2, #0
 8006dba:	f04f 0300 	mov.w	r3, #0
 8006dbe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006dc2:	4629      	mov	r1, r5
 8006dc4:	008b      	lsls	r3, r1, #2
 8006dc6:	4621      	mov	r1, r4
 8006dc8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006dcc:	4621      	mov	r1, r4
 8006dce:	008a      	lsls	r2, r1, #2
 8006dd0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006dd4:	f7f9 fa5c 	bl	8000290 <__aeabi_uldivmod>
 8006dd8:	4602      	mov	r2, r0
 8006dda:	460b      	mov	r3, r1
 8006ddc:	4b60      	ldr	r3, [pc, #384]	@ (8006f60 <UART_SetConfig+0x4e4>)
 8006dde:	fba3 2302 	umull	r2, r3, r3, r2
 8006de2:	095b      	lsrs	r3, r3, #5
 8006de4:	011c      	lsls	r4, r3, #4
 8006de6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006dea:	2200      	movs	r2, #0
 8006dec:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006df0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006df4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006df8:	4642      	mov	r2, r8
 8006dfa:	464b      	mov	r3, r9
 8006dfc:	1891      	adds	r1, r2, r2
 8006dfe:	61b9      	str	r1, [r7, #24]
 8006e00:	415b      	adcs	r3, r3
 8006e02:	61fb      	str	r3, [r7, #28]
 8006e04:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006e08:	4641      	mov	r1, r8
 8006e0a:	1851      	adds	r1, r2, r1
 8006e0c:	6139      	str	r1, [r7, #16]
 8006e0e:	4649      	mov	r1, r9
 8006e10:	414b      	adcs	r3, r1
 8006e12:	617b      	str	r3, [r7, #20]
 8006e14:	f04f 0200 	mov.w	r2, #0
 8006e18:	f04f 0300 	mov.w	r3, #0
 8006e1c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006e20:	4659      	mov	r1, fp
 8006e22:	00cb      	lsls	r3, r1, #3
 8006e24:	4651      	mov	r1, sl
 8006e26:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006e2a:	4651      	mov	r1, sl
 8006e2c:	00ca      	lsls	r2, r1, #3
 8006e2e:	4610      	mov	r0, r2
 8006e30:	4619      	mov	r1, r3
 8006e32:	4603      	mov	r3, r0
 8006e34:	4642      	mov	r2, r8
 8006e36:	189b      	adds	r3, r3, r2
 8006e38:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006e3c:	464b      	mov	r3, r9
 8006e3e:	460a      	mov	r2, r1
 8006e40:	eb42 0303 	adc.w	r3, r2, r3
 8006e44:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006e48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e4c:	685b      	ldr	r3, [r3, #4]
 8006e4e:	2200      	movs	r2, #0
 8006e50:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006e52:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006e54:	f04f 0200 	mov.w	r2, #0
 8006e58:	f04f 0300 	mov.w	r3, #0
 8006e5c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006e60:	4649      	mov	r1, r9
 8006e62:	008b      	lsls	r3, r1, #2
 8006e64:	4641      	mov	r1, r8
 8006e66:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006e6a:	4641      	mov	r1, r8
 8006e6c:	008a      	lsls	r2, r1, #2
 8006e6e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006e72:	f7f9 fa0d 	bl	8000290 <__aeabi_uldivmod>
 8006e76:	4602      	mov	r2, r0
 8006e78:	460b      	mov	r3, r1
 8006e7a:	4611      	mov	r1, r2
 8006e7c:	4b38      	ldr	r3, [pc, #224]	@ (8006f60 <UART_SetConfig+0x4e4>)
 8006e7e:	fba3 2301 	umull	r2, r3, r3, r1
 8006e82:	095b      	lsrs	r3, r3, #5
 8006e84:	2264      	movs	r2, #100	@ 0x64
 8006e86:	fb02 f303 	mul.w	r3, r2, r3
 8006e8a:	1acb      	subs	r3, r1, r3
 8006e8c:	011b      	lsls	r3, r3, #4
 8006e8e:	3332      	adds	r3, #50	@ 0x32
 8006e90:	4a33      	ldr	r2, [pc, #204]	@ (8006f60 <UART_SetConfig+0x4e4>)
 8006e92:	fba2 2303 	umull	r2, r3, r2, r3
 8006e96:	095b      	lsrs	r3, r3, #5
 8006e98:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006e9c:	441c      	add	r4, r3
 8006e9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	673b      	str	r3, [r7, #112]	@ 0x70
 8006ea6:	677a      	str	r2, [r7, #116]	@ 0x74
 8006ea8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006eac:	4642      	mov	r2, r8
 8006eae:	464b      	mov	r3, r9
 8006eb0:	1891      	adds	r1, r2, r2
 8006eb2:	60b9      	str	r1, [r7, #8]
 8006eb4:	415b      	adcs	r3, r3
 8006eb6:	60fb      	str	r3, [r7, #12]
 8006eb8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006ebc:	4641      	mov	r1, r8
 8006ebe:	1851      	adds	r1, r2, r1
 8006ec0:	6039      	str	r1, [r7, #0]
 8006ec2:	4649      	mov	r1, r9
 8006ec4:	414b      	adcs	r3, r1
 8006ec6:	607b      	str	r3, [r7, #4]
 8006ec8:	f04f 0200 	mov.w	r2, #0
 8006ecc:	f04f 0300 	mov.w	r3, #0
 8006ed0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006ed4:	4659      	mov	r1, fp
 8006ed6:	00cb      	lsls	r3, r1, #3
 8006ed8:	4651      	mov	r1, sl
 8006eda:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006ede:	4651      	mov	r1, sl
 8006ee0:	00ca      	lsls	r2, r1, #3
 8006ee2:	4610      	mov	r0, r2
 8006ee4:	4619      	mov	r1, r3
 8006ee6:	4603      	mov	r3, r0
 8006ee8:	4642      	mov	r2, r8
 8006eea:	189b      	adds	r3, r3, r2
 8006eec:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006eee:	464b      	mov	r3, r9
 8006ef0:	460a      	mov	r2, r1
 8006ef2:	eb42 0303 	adc.w	r3, r2, r3
 8006ef6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006ef8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006efc:	685b      	ldr	r3, [r3, #4]
 8006efe:	2200      	movs	r2, #0
 8006f00:	663b      	str	r3, [r7, #96]	@ 0x60
 8006f02:	667a      	str	r2, [r7, #100]	@ 0x64
 8006f04:	f04f 0200 	mov.w	r2, #0
 8006f08:	f04f 0300 	mov.w	r3, #0
 8006f0c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006f10:	4649      	mov	r1, r9
 8006f12:	008b      	lsls	r3, r1, #2
 8006f14:	4641      	mov	r1, r8
 8006f16:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006f1a:	4641      	mov	r1, r8
 8006f1c:	008a      	lsls	r2, r1, #2
 8006f1e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006f22:	f7f9 f9b5 	bl	8000290 <__aeabi_uldivmod>
 8006f26:	4602      	mov	r2, r0
 8006f28:	460b      	mov	r3, r1
 8006f2a:	4b0d      	ldr	r3, [pc, #52]	@ (8006f60 <UART_SetConfig+0x4e4>)
 8006f2c:	fba3 1302 	umull	r1, r3, r3, r2
 8006f30:	095b      	lsrs	r3, r3, #5
 8006f32:	2164      	movs	r1, #100	@ 0x64
 8006f34:	fb01 f303 	mul.w	r3, r1, r3
 8006f38:	1ad3      	subs	r3, r2, r3
 8006f3a:	011b      	lsls	r3, r3, #4
 8006f3c:	3332      	adds	r3, #50	@ 0x32
 8006f3e:	4a08      	ldr	r2, [pc, #32]	@ (8006f60 <UART_SetConfig+0x4e4>)
 8006f40:	fba2 2303 	umull	r2, r3, r2, r3
 8006f44:	095b      	lsrs	r3, r3, #5
 8006f46:	f003 020f 	and.w	r2, r3, #15
 8006f4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	4422      	add	r2, r4
 8006f52:	609a      	str	r2, [r3, #8]
}
 8006f54:	bf00      	nop
 8006f56:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006f60:	51eb851f 	.word	0x51eb851f

08006f64 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006f64:	b084      	sub	sp, #16
 8006f66:	b580      	push	{r7, lr}
 8006f68:	b084      	sub	sp, #16
 8006f6a:	af00      	add	r7, sp, #0
 8006f6c:	6078      	str	r0, [r7, #4]
 8006f6e:	f107 001c 	add.w	r0, r7, #28
 8006f72:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006f76:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8006f7a:	2b01      	cmp	r3, #1
 8006f7c:	d123      	bne.n	8006fc6 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f82:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	68db      	ldr	r3, [r3, #12]
 8006f8e:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8006f92:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006f96:	687a      	ldr	r2, [r7, #4]
 8006f98:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	68db      	ldr	r3, [r3, #12]
 8006f9e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006fa6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006faa:	2b01      	cmp	r3, #1
 8006fac:	d105      	bne.n	8006fba <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	68db      	ldr	r3, [r3, #12]
 8006fb2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006fba:	6878      	ldr	r0, [r7, #4]
 8006fbc:	f001 fae8 	bl	8008590 <USB_CoreReset>
 8006fc0:	4603      	mov	r3, r0
 8006fc2:	73fb      	strb	r3, [r7, #15]
 8006fc4:	e01b      	b.n	8006ffe <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	68db      	ldr	r3, [r3, #12]
 8006fca:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006fd2:	6878      	ldr	r0, [r7, #4]
 8006fd4:	f001 fadc 	bl	8008590 <USB_CoreReset>
 8006fd8:	4603      	mov	r3, r0
 8006fda:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006fdc:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d106      	bne.n	8006ff2 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fe8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	639a      	str	r2, [r3, #56]	@ 0x38
 8006ff0:	e005      	b.n	8006ffe <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ff6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006ffe:	7fbb      	ldrb	r3, [r7, #30]
 8007000:	2b01      	cmp	r3, #1
 8007002:	d10b      	bne.n	800701c <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	689b      	ldr	r3, [r3, #8]
 8007008:	f043 0206 	orr.w	r2, r3, #6
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	689b      	ldr	r3, [r3, #8]
 8007014:	f043 0220 	orr.w	r2, r3, #32
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800701c:	7bfb      	ldrb	r3, [r7, #15]
}
 800701e:	4618      	mov	r0, r3
 8007020:	3710      	adds	r7, #16
 8007022:	46bd      	mov	sp, r7
 8007024:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007028:	b004      	add	sp, #16
 800702a:	4770      	bx	lr

0800702c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800702c:	b480      	push	{r7}
 800702e:	b087      	sub	sp, #28
 8007030:	af00      	add	r7, sp, #0
 8007032:	60f8      	str	r0, [r7, #12]
 8007034:	60b9      	str	r1, [r7, #8]
 8007036:	4613      	mov	r3, r2
 8007038:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800703a:	79fb      	ldrb	r3, [r7, #7]
 800703c:	2b02      	cmp	r3, #2
 800703e:	d165      	bne.n	800710c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8007040:	68bb      	ldr	r3, [r7, #8]
 8007042:	4a41      	ldr	r2, [pc, #260]	@ (8007148 <USB_SetTurnaroundTime+0x11c>)
 8007044:	4293      	cmp	r3, r2
 8007046:	d906      	bls.n	8007056 <USB_SetTurnaroundTime+0x2a>
 8007048:	68bb      	ldr	r3, [r7, #8]
 800704a:	4a40      	ldr	r2, [pc, #256]	@ (800714c <USB_SetTurnaroundTime+0x120>)
 800704c:	4293      	cmp	r3, r2
 800704e:	d202      	bcs.n	8007056 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8007050:	230f      	movs	r3, #15
 8007052:	617b      	str	r3, [r7, #20]
 8007054:	e062      	b.n	800711c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8007056:	68bb      	ldr	r3, [r7, #8]
 8007058:	4a3c      	ldr	r2, [pc, #240]	@ (800714c <USB_SetTurnaroundTime+0x120>)
 800705a:	4293      	cmp	r3, r2
 800705c:	d306      	bcc.n	800706c <USB_SetTurnaroundTime+0x40>
 800705e:	68bb      	ldr	r3, [r7, #8]
 8007060:	4a3b      	ldr	r2, [pc, #236]	@ (8007150 <USB_SetTurnaroundTime+0x124>)
 8007062:	4293      	cmp	r3, r2
 8007064:	d202      	bcs.n	800706c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8007066:	230e      	movs	r3, #14
 8007068:	617b      	str	r3, [r7, #20]
 800706a:	e057      	b.n	800711c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800706c:	68bb      	ldr	r3, [r7, #8]
 800706e:	4a38      	ldr	r2, [pc, #224]	@ (8007150 <USB_SetTurnaroundTime+0x124>)
 8007070:	4293      	cmp	r3, r2
 8007072:	d306      	bcc.n	8007082 <USB_SetTurnaroundTime+0x56>
 8007074:	68bb      	ldr	r3, [r7, #8]
 8007076:	4a37      	ldr	r2, [pc, #220]	@ (8007154 <USB_SetTurnaroundTime+0x128>)
 8007078:	4293      	cmp	r3, r2
 800707a:	d202      	bcs.n	8007082 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800707c:	230d      	movs	r3, #13
 800707e:	617b      	str	r3, [r7, #20]
 8007080:	e04c      	b.n	800711c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8007082:	68bb      	ldr	r3, [r7, #8]
 8007084:	4a33      	ldr	r2, [pc, #204]	@ (8007154 <USB_SetTurnaroundTime+0x128>)
 8007086:	4293      	cmp	r3, r2
 8007088:	d306      	bcc.n	8007098 <USB_SetTurnaroundTime+0x6c>
 800708a:	68bb      	ldr	r3, [r7, #8]
 800708c:	4a32      	ldr	r2, [pc, #200]	@ (8007158 <USB_SetTurnaroundTime+0x12c>)
 800708e:	4293      	cmp	r3, r2
 8007090:	d802      	bhi.n	8007098 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8007092:	230c      	movs	r3, #12
 8007094:	617b      	str	r3, [r7, #20]
 8007096:	e041      	b.n	800711c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8007098:	68bb      	ldr	r3, [r7, #8]
 800709a:	4a2f      	ldr	r2, [pc, #188]	@ (8007158 <USB_SetTurnaroundTime+0x12c>)
 800709c:	4293      	cmp	r3, r2
 800709e:	d906      	bls.n	80070ae <USB_SetTurnaroundTime+0x82>
 80070a0:	68bb      	ldr	r3, [r7, #8]
 80070a2:	4a2e      	ldr	r2, [pc, #184]	@ (800715c <USB_SetTurnaroundTime+0x130>)
 80070a4:	4293      	cmp	r3, r2
 80070a6:	d802      	bhi.n	80070ae <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80070a8:	230b      	movs	r3, #11
 80070aa:	617b      	str	r3, [r7, #20]
 80070ac:	e036      	b.n	800711c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80070ae:	68bb      	ldr	r3, [r7, #8]
 80070b0:	4a2a      	ldr	r2, [pc, #168]	@ (800715c <USB_SetTurnaroundTime+0x130>)
 80070b2:	4293      	cmp	r3, r2
 80070b4:	d906      	bls.n	80070c4 <USB_SetTurnaroundTime+0x98>
 80070b6:	68bb      	ldr	r3, [r7, #8]
 80070b8:	4a29      	ldr	r2, [pc, #164]	@ (8007160 <USB_SetTurnaroundTime+0x134>)
 80070ba:	4293      	cmp	r3, r2
 80070bc:	d802      	bhi.n	80070c4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80070be:	230a      	movs	r3, #10
 80070c0:	617b      	str	r3, [r7, #20]
 80070c2:	e02b      	b.n	800711c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80070c4:	68bb      	ldr	r3, [r7, #8]
 80070c6:	4a26      	ldr	r2, [pc, #152]	@ (8007160 <USB_SetTurnaroundTime+0x134>)
 80070c8:	4293      	cmp	r3, r2
 80070ca:	d906      	bls.n	80070da <USB_SetTurnaroundTime+0xae>
 80070cc:	68bb      	ldr	r3, [r7, #8]
 80070ce:	4a25      	ldr	r2, [pc, #148]	@ (8007164 <USB_SetTurnaroundTime+0x138>)
 80070d0:	4293      	cmp	r3, r2
 80070d2:	d202      	bcs.n	80070da <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80070d4:	2309      	movs	r3, #9
 80070d6:	617b      	str	r3, [r7, #20]
 80070d8:	e020      	b.n	800711c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80070da:	68bb      	ldr	r3, [r7, #8]
 80070dc:	4a21      	ldr	r2, [pc, #132]	@ (8007164 <USB_SetTurnaroundTime+0x138>)
 80070de:	4293      	cmp	r3, r2
 80070e0:	d306      	bcc.n	80070f0 <USB_SetTurnaroundTime+0xc4>
 80070e2:	68bb      	ldr	r3, [r7, #8]
 80070e4:	4a20      	ldr	r2, [pc, #128]	@ (8007168 <USB_SetTurnaroundTime+0x13c>)
 80070e6:	4293      	cmp	r3, r2
 80070e8:	d802      	bhi.n	80070f0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80070ea:	2308      	movs	r3, #8
 80070ec:	617b      	str	r3, [r7, #20]
 80070ee:	e015      	b.n	800711c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80070f0:	68bb      	ldr	r3, [r7, #8]
 80070f2:	4a1d      	ldr	r2, [pc, #116]	@ (8007168 <USB_SetTurnaroundTime+0x13c>)
 80070f4:	4293      	cmp	r3, r2
 80070f6:	d906      	bls.n	8007106 <USB_SetTurnaroundTime+0xda>
 80070f8:	68bb      	ldr	r3, [r7, #8]
 80070fa:	4a1c      	ldr	r2, [pc, #112]	@ (800716c <USB_SetTurnaroundTime+0x140>)
 80070fc:	4293      	cmp	r3, r2
 80070fe:	d202      	bcs.n	8007106 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8007100:	2307      	movs	r3, #7
 8007102:	617b      	str	r3, [r7, #20]
 8007104:	e00a      	b.n	800711c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8007106:	2306      	movs	r3, #6
 8007108:	617b      	str	r3, [r7, #20]
 800710a:	e007      	b.n	800711c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800710c:	79fb      	ldrb	r3, [r7, #7]
 800710e:	2b00      	cmp	r3, #0
 8007110:	d102      	bne.n	8007118 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8007112:	2309      	movs	r3, #9
 8007114:	617b      	str	r3, [r7, #20]
 8007116:	e001      	b.n	800711c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8007118:	2309      	movs	r3, #9
 800711a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	68db      	ldr	r3, [r3, #12]
 8007120:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	68da      	ldr	r2, [r3, #12]
 800712c:	697b      	ldr	r3, [r7, #20]
 800712e:	029b      	lsls	r3, r3, #10
 8007130:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8007134:	431a      	orrs	r2, r3
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800713a:	2300      	movs	r3, #0
}
 800713c:	4618      	mov	r0, r3
 800713e:	371c      	adds	r7, #28
 8007140:	46bd      	mov	sp, r7
 8007142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007146:	4770      	bx	lr
 8007148:	00d8acbf 	.word	0x00d8acbf
 800714c:	00e4e1c0 	.word	0x00e4e1c0
 8007150:	00f42400 	.word	0x00f42400
 8007154:	01067380 	.word	0x01067380
 8007158:	011a499f 	.word	0x011a499f
 800715c:	01312cff 	.word	0x01312cff
 8007160:	014ca43f 	.word	0x014ca43f
 8007164:	016e3600 	.word	0x016e3600
 8007168:	01a6ab1f 	.word	0x01a6ab1f
 800716c:	01e84800 	.word	0x01e84800

08007170 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007170:	b480      	push	{r7}
 8007172:	b083      	sub	sp, #12
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	689b      	ldr	r3, [r3, #8]
 800717c:	f043 0201 	orr.w	r2, r3, #1
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007184:	2300      	movs	r3, #0
}
 8007186:	4618      	mov	r0, r3
 8007188:	370c      	adds	r7, #12
 800718a:	46bd      	mov	sp, r7
 800718c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007190:	4770      	bx	lr

08007192 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007192:	b480      	push	{r7}
 8007194:	b083      	sub	sp, #12
 8007196:	af00      	add	r7, sp, #0
 8007198:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	689b      	ldr	r3, [r3, #8]
 800719e:	f023 0201 	bic.w	r2, r3, #1
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80071a6:	2300      	movs	r3, #0
}
 80071a8:	4618      	mov	r0, r3
 80071aa:	370c      	adds	r7, #12
 80071ac:	46bd      	mov	sp, r7
 80071ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b2:	4770      	bx	lr

080071b4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80071b4:	b580      	push	{r7, lr}
 80071b6:	b084      	sub	sp, #16
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	6078      	str	r0, [r7, #4]
 80071bc:	460b      	mov	r3, r1
 80071be:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80071c0:	2300      	movs	r3, #0
 80071c2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	68db      	ldr	r3, [r3, #12]
 80071c8:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80071d0:	78fb      	ldrb	r3, [r7, #3]
 80071d2:	2b01      	cmp	r3, #1
 80071d4:	d115      	bne.n	8007202 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	68db      	ldr	r3, [r3, #12]
 80071da:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80071e2:	200a      	movs	r0, #10
 80071e4:	f7fa ff4a 	bl	800207c <HAL_Delay>
      ms += 10U;
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	330a      	adds	r3, #10
 80071ec:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80071ee:	6878      	ldr	r0, [r7, #4]
 80071f0:	f001 f93f 	bl	8008472 <USB_GetMode>
 80071f4:	4603      	mov	r3, r0
 80071f6:	2b01      	cmp	r3, #1
 80071f8:	d01e      	beq.n	8007238 <USB_SetCurrentMode+0x84>
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	2bc7      	cmp	r3, #199	@ 0xc7
 80071fe:	d9f0      	bls.n	80071e2 <USB_SetCurrentMode+0x2e>
 8007200:	e01a      	b.n	8007238 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007202:	78fb      	ldrb	r3, [r7, #3]
 8007204:	2b00      	cmp	r3, #0
 8007206:	d115      	bne.n	8007234 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	68db      	ldr	r3, [r3, #12]
 800720c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007214:	200a      	movs	r0, #10
 8007216:	f7fa ff31 	bl	800207c <HAL_Delay>
      ms += 10U;
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	330a      	adds	r3, #10
 800721e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007220:	6878      	ldr	r0, [r7, #4]
 8007222:	f001 f926 	bl	8008472 <USB_GetMode>
 8007226:	4603      	mov	r3, r0
 8007228:	2b00      	cmp	r3, #0
 800722a:	d005      	beq.n	8007238 <USB_SetCurrentMode+0x84>
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	2bc7      	cmp	r3, #199	@ 0xc7
 8007230:	d9f0      	bls.n	8007214 <USB_SetCurrentMode+0x60>
 8007232:	e001      	b.n	8007238 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007234:	2301      	movs	r3, #1
 8007236:	e005      	b.n	8007244 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	2bc8      	cmp	r3, #200	@ 0xc8
 800723c:	d101      	bne.n	8007242 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800723e:	2301      	movs	r3, #1
 8007240:	e000      	b.n	8007244 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007242:	2300      	movs	r3, #0
}
 8007244:	4618      	mov	r0, r3
 8007246:	3710      	adds	r7, #16
 8007248:	46bd      	mov	sp, r7
 800724a:	bd80      	pop	{r7, pc}

0800724c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800724c:	b084      	sub	sp, #16
 800724e:	b580      	push	{r7, lr}
 8007250:	b086      	sub	sp, #24
 8007252:	af00      	add	r7, sp, #0
 8007254:	6078      	str	r0, [r7, #4]
 8007256:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800725a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800725e:	2300      	movs	r3, #0
 8007260:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007266:	2300      	movs	r3, #0
 8007268:	613b      	str	r3, [r7, #16]
 800726a:	e009      	b.n	8007280 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800726c:	687a      	ldr	r2, [r7, #4]
 800726e:	693b      	ldr	r3, [r7, #16]
 8007270:	3340      	adds	r3, #64	@ 0x40
 8007272:	009b      	lsls	r3, r3, #2
 8007274:	4413      	add	r3, r2
 8007276:	2200      	movs	r2, #0
 8007278:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800727a:	693b      	ldr	r3, [r7, #16]
 800727c:	3301      	adds	r3, #1
 800727e:	613b      	str	r3, [r7, #16]
 8007280:	693b      	ldr	r3, [r7, #16]
 8007282:	2b0e      	cmp	r3, #14
 8007284:	d9f2      	bls.n	800726c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007286:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800728a:	2b00      	cmp	r3, #0
 800728c:	d11c      	bne.n	80072c8 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007294:	685b      	ldr	r3, [r3, #4]
 8007296:	68fa      	ldr	r2, [r7, #12]
 8007298:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800729c:	f043 0302 	orr.w	r3, r3, #2
 80072a0:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072a6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072b2:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072be:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	639a      	str	r2, [r3, #56]	@ 0x38
 80072c6:	e00b      	b.n	80072e0 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072cc:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072d8:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80072e6:	461a      	mov	r2, r3
 80072e8:	2300      	movs	r3, #0
 80072ea:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80072ec:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80072f0:	2b01      	cmp	r3, #1
 80072f2:	d10d      	bne.n	8007310 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80072f4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d104      	bne.n	8007306 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80072fc:	2100      	movs	r1, #0
 80072fe:	6878      	ldr	r0, [r7, #4]
 8007300:	f000 f968 	bl	80075d4 <USB_SetDevSpeed>
 8007304:	e008      	b.n	8007318 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007306:	2101      	movs	r1, #1
 8007308:	6878      	ldr	r0, [r7, #4]
 800730a:	f000 f963 	bl	80075d4 <USB_SetDevSpeed>
 800730e:	e003      	b.n	8007318 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007310:	2103      	movs	r1, #3
 8007312:	6878      	ldr	r0, [r7, #4]
 8007314:	f000 f95e 	bl	80075d4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007318:	2110      	movs	r1, #16
 800731a:	6878      	ldr	r0, [r7, #4]
 800731c:	f000 f8fa 	bl	8007514 <USB_FlushTxFifo>
 8007320:	4603      	mov	r3, r0
 8007322:	2b00      	cmp	r3, #0
 8007324:	d001      	beq.n	800732a <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8007326:	2301      	movs	r3, #1
 8007328:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800732a:	6878      	ldr	r0, [r7, #4]
 800732c:	f000 f924 	bl	8007578 <USB_FlushRxFifo>
 8007330:	4603      	mov	r3, r0
 8007332:	2b00      	cmp	r3, #0
 8007334:	d001      	beq.n	800733a <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8007336:	2301      	movs	r3, #1
 8007338:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007340:	461a      	mov	r2, r3
 8007342:	2300      	movs	r3, #0
 8007344:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800734c:	461a      	mov	r2, r3
 800734e:	2300      	movs	r3, #0
 8007350:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007358:	461a      	mov	r2, r3
 800735a:	2300      	movs	r3, #0
 800735c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800735e:	2300      	movs	r3, #0
 8007360:	613b      	str	r3, [r7, #16]
 8007362:	e043      	b.n	80073ec <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007364:	693b      	ldr	r3, [r7, #16]
 8007366:	015a      	lsls	r2, r3, #5
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	4413      	add	r3, r2
 800736c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007376:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800737a:	d118      	bne.n	80073ae <USB_DevInit+0x162>
    {
      if (i == 0U)
 800737c:	693b      	ldr	r3, [r7, #16]
 800737e:	2b00      	cmp	r3, #0
 8007380:	d10a      	bne.n	8007398 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007382:	693b      	ldr	r3, [r7, #16]
 8007384:	015a      	lsls	r2, r3, #5
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	4413      	add	r3, r2
 800738a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800738e:	461a      	mov	r2, r3
 8007390:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007394:	6013      	str	r3, [r2, #0]
 8007396:	e013      	b.n	80073c0 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007398:	693b      	ldr	r3, [r7, #16]
 800739a:	015a      	lsls	r2, r3, #5
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	4413      	add	r3, r2
 80073a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80073a4:	461a      	mov	r2, r3
 80073a6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80073aa:	6013      	str	r3, [r2, #0]
 80073ac:	e008      	b.n	80073c0 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80073ae:	693b      	ldr	r3, [r7, #16]
 80073b0:	015a      	lsls	r2, r3, #5
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	4413      	add	r3, r2
 80073b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80073ba:	461a      	mov	r2, r3
 80073bc:	2300      	movs	r3, #0
 80073be:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80073c0:	693b      	ldr	r3, [r7, #16]
 80073c2:	015a      	lsls	r2, r3, #5
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	4413      	add	r3, r2
 80073c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80073cc:	461a      	mov	r2, r3
 80073ce:	2300      	movs	r3, #0
 80073d0:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80073d2:	693b      	ldr	r3, [r7, #16]
 80073d4:	015a      	lsls	r2, r3, #5
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	4413      	add	r3, r2
 80073da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80073de:	461a      	mov	r2, r3
 80073e0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80073e4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80073e6:	693b      	ldr	r3, [r7, #16]
 80073e8:	3301      	adds	r3, #1
 80073ea:	613b      	str	r3, [r7, #16]
 80073ec:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80073f0:	461a      	mov	r2, r3
 80073f2:	693b      	ldr	r3, [r7, #16]
 80073f4:	4293      	cmp	r3, r2
 80073f6:	d3b5      	bcc.n	8007364 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80073f8:	2300      	movs	r3, #0
 80073fa:	613b      	str	r3, [r7, #16]
 80073fc:	e043      	b.n	8007486 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80073fe:	693b      	ldr	r3, [r7, #16]
 8007400:	015a      	lsls	r2, r3, #5
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	4413      	add	r3, r2
 8007406:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007410:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007414:	d118      	bne.n	8007448 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8007416:	693b      	ldr	r3, [r7, #16]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d10a      	bne.n	8007432 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800741c:	693b      	ldr	r3, [r7, #16]
 800741e:	015a      	lsls	r2, r3, #5
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	4413      	add	r3, r2
 8007424:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007428:	461a      	mov	r2, r3
 800742a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800742e:	6013      	str	r3, [r2, #0]
 8007430:	e013      	b.n	800745a <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007432:	693b      	ldr	r3, [r7, #16]
 8007434:	015a      	lsls	r2, r3, #5
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	4413      	add	r3, r2
 800743a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800743e:	461a      	mov	r2, r3
 8007440:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007444:	6013      	str	r3, [r2, #0]
 8007446:	e008      	b.n	800745a <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007448:	693b      	ldr	r3, [r7, #16]
 800744a:	015a      	lsls	r2, r3, #5
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	4413      	add	r3, r2
 8007450:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007454:	461a      	mov	r2, r3
 8007456:	2300      	movs	r3, #0
 8007458:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800745a:	693b      	ldr	r3, [r7, #16]
 800745c:	015a      	lsls	r2, r3, #5
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	4413      	add	r3, r2
 8007462:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007466:	461a      	mov	r2, r3
 8007468:	2300      	movs	r3, #0
 800746a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800746c:	693b      	ldr	r3, [r7, #16]
 800746e:	015a      	lsls	r2, r3, #5
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	4413      	add	r3, r2
 8007474:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007478:	461a      	mov	r2, r3
 800747a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800747e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007480:	693b      	ldr	r3, [r7, #16]
 8007482:	3301      	adds	r3, #1
 8007484:	613b      	str	r3, [r7, #16]
 8007486:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800748a:	461a      	mov	r2, r3
 800748c:	693b      	ldr	r3, [r7, #16]
 800748e:	4293      	cmp	r3, r2
 8007490:	d3b5      	bcc.n	80073fe <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007498:	691b      	ldr	r3, [r3, #16]
 800749a:	68fa      	ldr	r2, [r7, #12]
 800749c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80074a0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80074a4:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	2200      	movs	r2, #0
 80074aa:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80074b2:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80074b4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d105      	bne.n	80074c8 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	699b      	ldr	r3, [r3, #24]
 80074c0:	f043 0210 	orr.w	r2, r3, #16
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	699a      	ldr	r2, [r3, #24]
 80074cc:	4b10      	ldr	r3, [pc, #64]	@ (8007510 <USB_DevInit+0x2c4>)
 80074ce:	4313      	orrs	r3, r2
 80074d0:	687a      	ldr	r2, [r7, #4]
 80074d2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80074d4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d005      	beq.n	80074e8 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	699b      	ldr	r3, [r3, #24]
 80074e0:	f043 0208 	orr.w	r2, r3, #8
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80074e8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80074ec:	2b01      	cmp	r3, #1
 80074ee:	d107      	bne.n	8007500 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	699b      	ldr	r3, [r3, #24]
 80074f4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80074f8:	f043 0304 	orr.w	r3, r3, #4
 80074fc:	687a      	ldr	r2, [r7, #4]
 80074fe:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007500:	7dfb      	ldrb	r3, [r7, #23]
}
 8007502:	4618      	mov	r0, r3
 8007504:	3718      	adds	r7, #24
 8007506:	46bd      	mov	sp, r7
 8007508:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800750c:	b004      	add	sp, #16
 800750e:	4770      	bx	lr
 8007510:	803c3800 	.word	0x803c3800

08007514 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007514:	b480      	push	{r7}
 8007516:	b085      	sub	sp, #20
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
 800751c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800751e:	2300      	movs	r3, #0
 8007520:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	3301      	adds	r3, #1
 8007526:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800752e:	d901      	bls.n	8007534 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007530:	2303      	movs	r3, #3
 8007532:	e01b      	b.n	800756c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	691b      	ldr	r3, [r3, #16]
 8007538:	2b00      	cmp	r3, #0
 800753a:	daf2      	bge.n	8007522 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800753c:	2300      	movs	r3, #0
 800753e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007540:	683b      	ldr	r3, [r7, #0]
 8007542:	019b      	lsls	r3, r3, #6
 8007544:	f043 0220 	orr.w	r2, r3, #32
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	3301      	adds	r3, #1
 8007550:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007558:	d901      	bls.n	800755e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800755a:	2303      	movs	r3, #3
 800755c:	e006      	b.n	800756c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	691b      	ldr	r3, [r3, #16]
 8007562:	f003 0320 	and.w	r3, r3, #32
 8007566:	2b20      	cmp	r3, #32
 8007568:	d0f0      	beq.n	800754c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800756a:	2300      	movs	r3, #0
}
 800756c:	4618      	mov	r0, r3
 800756e:	3714      	adds	r7, #20
 8007570:	46bd      	mov	sp, r7
 8007572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007576:	4770      	bx	lr

08007578 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007578:	b480      	push	{r7}
 800757a:	b085      	sub	sp, #20
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007580:	2300      	movs	r3, #0
 8007582:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	3301      	adds	r3, #1
 8007588:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007590:	d901      	bls.n	8007596 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007592:	2303      	movs	r3, #3
 8007594:	e018      	b.n	80075c8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	691b      	ldr	r3, [r3, #16]
 800759a:	2b00      	cmp	r3, #0
 800759c:	daf2      	bge.n	8007584 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800759e:	2300      	movs	r3, #0
 80075a0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	2210      	movs	r2, #16
 80075a6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	3301      	adds	r3, #1
 80075ac:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80075b4:	d901      	bls.n	80075ba <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80075b6:	2303      	movs	r3, #3
 80075b8:	e006      	b.n	80075c8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	691b      	ldr	r3, [r3, #16]
 80075be:	f003 0310 	and.w	r3, r3, #16
 80075c2:	2b10      	cmp	r3, #16
 80075c4:	d0f0      	beq.n	80075a8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80075c6:	2300      	movs	r3, #0
}
 80075c8:	4618      	mov	r0, r3
 80075ca:	3714      	adds	r7, #20
 80075cc:	46bd      	mov	sp, r7
 80075ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d2:	4770      	bx	lr

080075d4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80075d4:	b480      	push	{r7}
 80075d6:	b085      	sub	sp, #20
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
 80075dc:	460b      	mov	r3, r1
 80075de:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80075ea:	681a      	ldr	r2, [r3, #0]
 80075ec:	78fb      	ldrb	r3, [r7, #3]
 80075ee:	68f9      	ldr	r1, [r7, #12]
 80075f0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80075f4:	4313      	orrs	r3, r2
 80075f6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80075f8:	2300      	movs	r3, #0
}
 80075fa:	4618      	mov	r0, r3
 80075fc:	3714      	adds	r7, #20
 80075fe:	46bd      	mov	sp, r7
 8007600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007604:	4770      	bx	lr

08007606 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8007606:	b480      	push	{r7}
 8007608:	b087      	sub	sp, #28
 800760a:	af00      	add	r7, sp, #0
 800760c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8007612:	693b      	ldr	r3, [r7, #16]
 8007614:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007618:	689b      	ldr	r3, [r3, #8]
 800761a:	f003 0306 	and.w	r3, r3, #6
 800761e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	2b00      	cmp	r3, #0
 8007624:	d102      	bne.n	800762c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8007626:	2300      	movs	r3, #0
 8007628:	75fb      	strb	r3, [r7, #23]
 800762a:	e00a      	b.n	8007642 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	2b02      	cmp	r3, #2
 8007630:	d002      	beq.n	8007638 <USB_GetDevSpeed+0x32>
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	2b06      	cmp	r3, #6
 8007636:	d102      	bne.n	800763e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007638:	2302      	movs	r3, #2
 800763a:	75fb      	strb	r3, [r7, #23]
 800763c:	e001      	b.n	8007642 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800763e:	230f      	movs	r3, #15
 8007640:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8007642:	7dfb      	ldrb	r3, [r7, #23]
}
 8007644:	4618      	mov	r0, r3
 8007646:	371c      	adds	r7, #28
 8007648:	46bd      	mov	sp, r7
 800764a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764e:	4770      	bx	lr

08007650 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007650:	b480      	push	{r7}
 8007652:	b085      	sub	sp, #20
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]
 8007658:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800765e:	683b      	ldr	r3, [r7, #0]
 8007660:	781b      	ldrb	r3, [r3, #0]
 8007662:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007664:	683b      	ldr	r3, [r7, #0]
 8007666:	785b      	ldrb	r3, [r3, #1]
 8007668:	2b01      	cmp	r3, #1
 800766a:	d13a      	bne.n	80076e2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007672:	69da      	ldr	r2, [r3, #28]
 8007674:	683b      	ldr	r3, [r7, #0]
 8007676:	781b      	ldrb	r3, [r3, #0]
 8007678:	f003 030f 	and.w	r3, r3, #15
 800767c:	2101      	movs	r1, #1
 800767e:	fa01 f303 	lsl.w	r3, r1, r3
 8007682:	b29b      	uxth	r3, r3
 8007684:	68f9      	ldr	r1, [r7, #12]
 8007686:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800768a:	4313      	orrs	r3, r2
 800768c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800768e:	68bb      	ldr	r3, [r7, #8]
 8007690:	015a      	lsls	r2, r3, #5
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	4413      	add	r3, r2
 8007696:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d155      	bne.n	8007750 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80076a4:	68bb      	ldr	r3, [r7, #8]
 80076a6:	015a      	lsls	r2, r3, #5
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	4413      	add	r3, r2
 80076ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80076b0:	681a      	ldr	r2, [r3, #0]
 80076b2:	683b      	ldr	r3, [r7, #0]
 80076b4:	689b      	ldr	r3, [r3, #8]
 80076b6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80076ba:	683b      	ldr	r3, [r7, #0]
 80076bc:	791b      	ldrb	r3, [r3, #4]
 80076be:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80076c0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80076c2:	68bb      	ldr	r3, [r7, #8]
 80076c4:	059b      	lsls	r3, r3, #22
 80076c6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80076c8:	4313      	orrs	r3, r2
 80076ca:	68ba      	ldr	r2, [r7, #8]
 80076cc:	0151      	lsls	r1, r2, #5
 80076ce:	68fa      	ldr	r2, [r7, #12]
 80076d0:	440a      	add	r2, r1
 80076d2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80076d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80076da:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80076de:	6013      	str	r3, [r2, #0]
 80076e0:	e036      	b.n	8007750 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80076e8:	69da      	ldr	r2, [r3, #28]
 80076ea:	683b      	ldr	r3, [r7, #0]
 80076ec:	781b      	ldrb	r3, [r3, #0]
 80076ee:	f003 030f 	and.w	r3, r3, #15
 80076f2:	2101      	movs	r1, #1
 80076f4:	fa01 f303 	lsl.w	r3, r1, r3
 80076f8:	041b      	lsls	r3, r3, #16
 80076fa:	68f9      	ldr	r1, [r7, #12]
 80076fc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007700:	4313      	orrs	r3, r2
 8007702:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007704:	68bb      	ldr	r3, [r7, #8]
 8007706:	015a      	lsls	r2, r3, #5
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	4413      	add	r3, r2
 800770c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007716:	2b00      	cmp	r3, #0
 8007718:	d11a      	bne.n	8007750 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800771a:	68bb      	ldr	r3, [r7, #8]
 800771c:	015a      	lsls	r2, r3, #5
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	4413      	add	r3, r2
 8007722:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007726:	681a      	ldr	r2, [r3, #0]
 8007728:	683b      	ldr	r3, [r7, #0]
 800772a:	689b      	ldr	r3, [r3, #8]
 800772c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007730:	683b      	ldr	r3, [r7, #0]
 8007732:	791b      	ldrb	r3, [r3, #4]
 8007734:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007736:	430b      	orrs	r3, r1
 8007738:	4313      	orrs	r3, r2
 800773a:	68ba      	ldr	r2, [r7, #8]
 800773c:	0151      	lsls	r1, r2, #5
 800773e:	68fa      	ldr	r2, [r7, #12]
 8007740:	440a      	add	r2, r1
 8007742:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007746:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800774a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800774e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007750:	2300      	movs	r3, #0
}
 8007752:	4618      	mov	r0, r3
 8007754:	3714      	adds	r7, #20
 8007756:	46bd      	mov	sp, r7
 8007758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775c:	4770      	bx	lr
	...

08007760 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007760:	b480      	push	{r7}
 8007762:	b085      	sub	sp, #20
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]
 8007768:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800776e:	683b      	ldr	r3, [r7, #0]
 8007770:	781b      	ldrb	r3, [r3, #0]
 8007772:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007774:	683b      	ldr	r3, [r7, #0]
 8007776:	785b      	ldrb	r3, [r3, #1]
 8007778:	2b01      	cmp	r3, #1
 800777a:	d161      	bne.n	8007840 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800777c:	68bb      	ldr	r3, [r7, #8]
 800777e:	015a      	lsls	r2, r3, #5
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	4413      	add	r3, r2
 8007784:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800778e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007792:	d11f      	bne.n	80077d4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007794:	68bb      	ldr	r3, [r7, #8]
 8007796:	015a      	lsls	r2, r3, #5
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	4413      	add	r3, r2
 800779c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	68ba      	ldr	r2, [r7, #8]
 80077a4:	0151      	lsls	r1, r2, #5
 80077a6:	68fa      	ldr	r2, [r7, #12]
 80077a8:	440a      	add	r2, r1
 80077aa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80077ae:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80077b2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80077b4:	68bb      	ldr	r3, [r7, #8]
 80077b6:	015a      	lsls	r2, r3, #5
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	4413      	add	r3, r2
 80077bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	68ba      	ldr	r2, [r7, #8]
 80077c4:	0151      	lsls	r1, r2, #5
 80077c6:	68fa      	ldr	r2, [r7, #12]
 80077c8:	440a      	add	r2, r1
 80077ca:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80077ce:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80077d2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80077da:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80077dc:	683b      	ldr	r3, [r7, #0]
 80077de:	781b      	ldrb	r3, [r3, #0]
 80077e0:	f003 030f 	and.w	r3, r3, #15
 80077e4:	2101      	movs	r1, #1
 80077e6:	fa01 f303 	lsl.w	r3, r1, r3
 80077ea:	b29b      	uxth	r3, r3
 80077ec:	43db      	mvns	r3, r3
 80077ee:	68f9      	ldr	r1, [r7, #12]
 80077f0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80077f4:	4013      	ands	r3, r2
 80077f6:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80077fe:	69da      	ldr	r2, [r3, #28]
 8007800:	683b      	ldr	r3, [r7, #0]
 8007802:	781b      	ldrb	r3, [r3, #0]
 8007804:	f003 030f 	and.w	r3, r3, #15
 8007808:	2101      	movs	r1, #1
 800780a:	fa01 f303 	lsl.w	r3, r1, r3
 800780e:	b29b      	uxth	r3, r3
 8007810:	43db      	mvns	r3, r3
 8007812:	68f9      	ldr	r1, [r7, #12]
 8007814:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007818:	4013      	ands	r3, r2
 800781a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800781c:	68bb      	ldr	r3, [r7, #8]
 800781e:	015a      	lsls	r2, r3, #5
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	4413      	add	r3, r2
 8007824:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007828:	681a      	ldr	r2, [r3, #0]
 800782a:	68bb      	ldr	r3, [r7, #8]
 800782c:	0159      	lsls	r1, r3, #5
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	440b      	add	r3, r1
 8007832:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007836:	4619      	mov	r1, r3
 8007838:	4b35      	ldr	r3, [pc, #212]	@ (8007910 <USB_DeactivateEndpoint+0x1b0>)
 800783a:	4013      	ands	r3, r2
 800783c:	600b      	str	r3, [r1, #0]
 800783e:	e060      	b.n	8007902 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007840:	68bb      	ldr	r3, [r7, #8]
 8007842:	015a      	lsls	r2, r3, #5
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	4413      	add	r3, r2
 8007848:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007852:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007856:	d11f      	bne.n	8007898 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007858:	68bb      	ldr	r3, [r7, #8]
 800785a:	015a      	lsls	r2, r3, #5
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	4413      	add	r3, r2
 8007860:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	68ba      	ldr	r2, [r7, #8]
 8007868:	0151      	lsls	r1, r2, #5
 800786a:	68fa      	ldr	r2, [r7, #12]
 800786c:	440a      	add	r2, r1
 800786e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007872:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007876:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007878:	68bb      	ldr	r3, [r7, #8]
 800787a:	015a      	lsls	r2, r3, #5
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	4413      	add	r3, r2
 8007880:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	68ba      	ldr	r2, [r7, #8]
 8007888:	0151      	lsls	r1, r2, #5
 800788a:	68fa      	ldr	r2, [r7, #12]
 800788c:	440a      	add	r2, r1
 800788e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007892:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007896:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800789e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80078a0:	683b      	ldr	r3, [r7, #0]
 80078a2:	781b      	ldrb	r3, [r3, #0]
 80078a4:	f003 030f 	and.w	r3, r3, #15
 80078a8:	2101      	movs	r1, #1
 80078aa:	fa01 f303 	lsl.w	r3, r1, r3
 80078ae:	041b      	lsls	r3, r3, #16
 80078b0:	43db      	mvns	r3, r3
 80078b2:	68f9      	ldr	r1, [r7, #12]
 80078b4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80078b8:	4013      	ands	r3, r2
 80078ba:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80078c2:	69da      	ldr	r2, [r3, #28]
 80078c4:	683b      	ldr	r3, [r7, #0]
 80078c6:	781b      	ldrb	r3, [r3, #0]
 80078c8:	f003 030f 	and.w	r3, r3, #15
 80078cc:	2101      	movs	r1, #1
 80078ce:	fa01 f303 	lsl.w	r3, r1, r3
 80078d2:	041b      	lsls	r3, r3, #16
 80078d4:	43db      	mvns	r3, r3
 80078d6:	68f9      	ldr	r1, [r7, #12]
 80078d8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80078dc:	4013      	ands	r3, r2
 80078de:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80078e0:	68bb      	ldr	r3, [r7, #8]
 80078e2:	015a      	lsls	r2, r3, #5
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	4413      	add	r3, r2
 80078e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80078ec:	681a      	ldr	r2, [r3, #0]
 80078ee:	68bb      	ldr	r3, [r7, #8]
 80078f0:	0159      	lsls	r1, r3, #5
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	440b      	add	r3, r1
 80078f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80078fa:	4619      	mov	r1, r3
 80078fc:	4b05      	ldr	r3, [pc, #20]	@ (8007914 <USB_DeactivateEndpoint+0x1b4>)
 80078fe:	4013      	ands	r3, r2
 8007900:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8007902:	2300      	movs	r3, #0
}
 8007904:	4618      	mov	r0, r3
 8007906:	3714      	adds	r7, #20
 8007908:	46bd      	mov	sp, r7
 800790a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790e:	4770      	bx	lr
 8007910:	ec337800 	.word	0xec337800
 8007914:	eff37800 	.word	0xeff37800

08007918 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007918:	b580      	push	{r7, lr}
 800791a:	b08a      	sub	sp, #40	@ 0x28
 800791c:	af02      	add	r7, sp, #8
 800791e:	60f8      	str	r0, [r7, #12]
 8007920:	60b9      	str	r1, [r7, #8]
 8007922:	4613      	mov	r3, r2
 8007924:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800792a:	68bb      	ldr	r3, [r7, #8]
 800792c:	781b      	ldrb	r3, [r3, #0]
 800792e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007930:	68bb      	ldr	r3, [r7, #8]
 8007932:	785b      	ldrb	r3, [r3, #1]
 8007934:	2b01      	cmp	r3, #1
 8007936:	f040 817f 	bne.w	8007c38 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800793a:	68bb      	ldr	r3, [r7, #8]
 800793c:	691b      	ldr	r3, [r3, #16]
 800793e:	2b00      	cmp	r3, #0
 8007940:	d132      	bne.n	80079a8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007942:	69bb      	ldr	r3, [r7, #24]
 8007944:	015a      	lsls	r2, r3, #5
 8007946:	69fb      	ldr	r3, [r7, #28]
 8007948:	4413      	add	r3, r2
 800794a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800794e:	691b      	ldr	r3, [r3, #16]
 8007950:	69ba      	ldr	r2, [r7, #24]
 8007952:	0151      	lsls	r1, r2, #5
 8007954:	69fa      	ldr	r2, [r7, #28]
 8007956:	440a      	add	r2, r1
 8007958:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800795c:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8007960:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8007964:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007966:	69bb      	ldr	r3, [r7, #24]
 8007968:	015a      	lsls	r2, r3, #5
 800796a:	69fb      	ldr	r3, [r7, #28]
 800796c:	4413      	add	r3, r2
 800796e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007972:	691b      	ldr	r3, [r3, #16]
 8007974:	69ba      	ldr	r2, [r7, #24]
 8007976:	0151      	lsls	r1, r2, #5
 8007978:	69fa      	ldr	r2, [r7, #28]
 800797a:	440a      	add	r2, r1
 800797c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007980:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007984:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007986:	69bb      	ldr	r3, [r7, #24]
 8007988:	015a      	lsls	r2, r3, #5
 800798a:	69fb      	ldr	r3, [r7, #28]
 800798c:	4413      	add	r3, r2
 800798e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007992:	691b      	ldr	r3, [r3, #16]
 8007994:	69ba      	ldr	r2, [r7, #24]
 8007996:	0151      	lsls	r1, r2, #5
 8007998:	69fa      	ldr	r2, [r7, #28]
 800799a:	440a      	add	r2, r1
 800799c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80079a0:	0cdb      	lsrs	r3, r3, #19
 80079a2:	04db      	lsls	r3, r3, #19
 80079a4:	6113      	str	r3, [r2, #16]
 80079a6:	e097      	b.n	8007ad8 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80079a8:	69bb      	ldr	r3, [r7, #24]
 80079aa:	015a      	lsls	r2, r3, #5
 80079ac:	69fb      	ldr	r3, [r7, #28]
 80079ae:	4413      	add	r3, r2
 80079b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80079b4:	691b      	ldr	r3, [r3, #16]
 80079b6:	69ba      	ldr	r2, [r7, #24]
 80079b8:	0151      	lsls	r1, r2, #5
 80079ba:	69fa      	ldr	r2, [r7, #28]
 80079bc:	440a      	add	r2, r1
 80079be:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80079c2:	0cdb      	lsrs	r3, r3, #19
 80079c4:	04db      	lsls	r3, r3, #19
 80079c6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80079c8:	69bb      	ldr	r3, [r7, #24]
 80079ca:	015a      	lsls	r2, r3, #5
 80079cc:	69fb      	ldr	r3, [r7, #28]
 80079ce:	4413      	add	r3, r2
 80079d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80079d4:	691b      	ldr	r3, [r3, #16]
 80079d6:	69ba      	ldr	r2, [r7, #24]
 80079d8:	0151      	lsls	r1, r2, #5
 80079da:	69fa      	ldr	r2, [r7, #28]
 80079dc:	440a      	add	r2, r1
 80079de:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80079e2:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80079e6:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80079ea:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 80079ec:	69bb      	ldr	r3, [r7, #24]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d11a      	bne.n	8007a28 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80079f2:	68bb      	ldr	r3, [r7, #8]
 80079f4:	691a      	ldr	r2, [r3, #16]
 80079f6:	68bb      	ldr	r3, [r7, #8]
 80079f8:	689b      	ldr	r3, [r3, #8]
 80079fa:	429a      	cmp	r2, r3
 80079fc:	d903      	bls.n	8007a06 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80079fe:	68bb      	ldr	r3, [r7, #8]
 8007a00:	689a      	ldr	r2, [r3, #8]
 8007a02:	68bb      	ldr	r3, [r7, #8]
 8007a04:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007a06:	69bb      	ldr	r3, [r7, #24]
 8007a08:	015a      	lsls	r2, r3, #5
 8007a0a:	69fb      	ldr	r3, [r7, #28]
 8007a0c:	4413      	add	r3, r2
 8007a0e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a12:	691b      	ldr	r3, [r3, #16]
 8007a14:	69ba      	ldr	r2, [r7, #24]
 8007a16:	0151      	lsls	r1, r2, #5
 8007a18:	69fa      	ldr	r2, [r7, #28]
 8007a1a:	440a      	add	r2, r1
 8007a1c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007a20:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007a24:	6113      	str	r3, [r2, #16]
 8007a26:	e044      	b.n	8007ab2 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007a28:	68bb      	ldr	r3, [r7, #8]
 8007a2a:	691a      	ldr	r2, [r3, #16]
 8007a2c:	68bb      	ldr	r3, [r7, #8]
 8007a2e:	689b      	ldr	r3, [r3, #8]
 8007a30:	4413      	add	r3, r2
 8007a32:	1e5a      	subs	r2, r3, #1
 8007a34:	68bb      	ldr	r3, [r7, #8]
 8007a36:	689b      	ldr	r3, [r3, #8]
 8007a38:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a3c:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8007a3e:	69bb      	ldr	r3, [r7, #24]
 8007a40:	015a      	lsls	r2, r3, #5
 8007a42:	69fb      	ldr	r3, [r7, #28]
 8007a44:	4413      	add	r3, r2
 8007a46:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a4a:	691a      	ldr	r2, [r3, #16]
 8007a4c:	8afb      	ldrh	r3, [r7, #22]
 8007a4e:	04d9      	lsls	r1, r3, #19
 8007a50:	4ba4      	ldr	r3, [pc, #656]	@ (8007ce4 <USB_EPStartXfer+0x3cc>)
 8007a52:	400b      	ands	r3, r1
 8007a54:	69b9      	ldr	r1, [r7, #24]
 8007a56:	0148      	lsls	r0, r1, #5
 8007a58:	69f9      	ldr	r1, [r7, #28]
 8007a5a:	4401      	add	r1, r0
 8007a5c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8007a60:	4313      	orrs	r3, r2
 8007a62:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8007a64:	68bb      	ldr	r3, [r7, #8]
 8007a66:	791b      	ldrb	r3, [r3, #4]
 8007a68:	2b01      	cmp	r3, #1
 8007a6a:	d122      	bne.n	8007ab2 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8007a6c:	69bb      	ldr	r3, [r7, #24]
 8007a6e:	015a      	lsls	r2, r3, #5
 8007a70:	69fb      	ldr	r3, [r7, #28]
 8007a72:	4413      	add	r3, r2
 8007a74:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a78:	691b      	ldr	r3, [r3, #16]
 8007a7a:	69ba      	ldr	r2, [r7, #24]
 8007a7c:	0151      	lsls	r1, r2, #5
 8007a7e:	69fa      	ldr	r2, [r7, #28]
 8007a80:	440a      	add	r2, r1
 8007a82:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007a86:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8007a8a:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8007a8c:	69bb      	ldr	r3, [r7, #24]
 8007a8e:	015a      	lsls	r2, r3, #5
 8007a90:	69fb      	ldr	r3, [r7, #28]
 8007a92:	4413      	add	r3, r2
 8007a94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a98:	691a      	ldr	r2, [r3, #16]
 8007a9a:	8afb      	ldrh	r3, [r7, #22]
 8007a9c:	075b      	lsls	r3, r3, #29
 8007a9e:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8007aa2:	69b9      	ldr	r1, [r7, #24]
 8007aa4:	0148      	lsls	r0, r1, #5
 8007aa6:	69f9      	ldr	r1, [r7, #28]
 8007aa8:	4401      	add	r1, r0
 8007aaa:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8007aae:	4313      	orrs	r3, r2
 8007ab0:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007ab2:	69bb      	ldr	r3, [r7, #24]
 8007ab4:	015a      	lsls	r2, r3, #5
 8007ab6:	69fb      	ldr	r3, [r7, #28]
 8007ab8:	4413      	add	r3, r2
 8007aba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007abe:	691a      	ldr	r2, [r3, #16]
 8007ac0:	68bb      	ldr	r3, [r7, #8]
 8007ac2:	691b      	ldr	r3, [r3, #16]
 8007ac4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007ac8:	69b9      	ldr	r1, [r7, #24]
 8007aca:	0148      	lsls	r0, r1, #5
 8007acc:	69f9      	ldr	r1, [r7, #28]
 8007ace:	4401      	add	r1, r0
 8007ad0:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8007ad4:	4313      	orrs	r3, r2
 8007ad6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007ad8:	79fb      	ldrb	r3, [r7, #7]
 8007ada:	2b01      	cmp	r3, #1
 8007adc:	d14b      	bne.n	8007b76 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007ade:	68bb      	ldr	r3, [r7, #8]
 8007ae0:	69db      	ldr	r3, [r3, #28]
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d009      	beq.n	8007afa <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007ae6:	69bb      	ldr	r3, [r7, #24]
 8007ae8:	015a      	lsls	r2, r3, #5
 8007aea:	69fb      	ldr	r3, [r7, #28]
 8007aec:	4413      	add	r3, r2
 8007aee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007af2:	461a      	mov	r2, r3
 8007af4:	68bb      	ldr	r3, [r7, #8]
 8007af6:	69db      	ldr	r3, [r3, #28]
 8007af8:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8007afa:	68bb      	ldr	r3, [r7, #8]
 8007afc:	791b      	ldrb	r3, [r3, #4]
 8007afe:	2b01      	cmp	r3, #1
 8007b00:	d128      	bne.n	8007b54 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007b02:	69fb      	ldr	r3, [r7, #28]
 8007b04:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007b08:	689b      	ldr	r3, [r3, #8]
 8007b0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d110      	bne.n	8007b34 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007b12:	69bb      	ldr	r3, [r7, #24]
 8007b14:	015a      	lsls	r2, r3, #5
 8007b16:	69fb      	ldr	r3, [r7, #28]
 8007b18:	4413      	add	r3, r2
 8007b1a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	69ba      	ldr	r2, [r7, #24]
 8007b22:	0151      	lsls	r1, r2, #5
 8007b24:	69fa      	ldr	r2, [r7, #28]
 8007b26:	440a      	add	r2, r1
 8007b28:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007b2c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007b30:	6013      	str	r3, [r2, #0]
 8007b32:	e00f      	b.n	8007b54 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007b34:	69bb      	ldr	r3, [r7, #24]
 8007b36:	015a      	lsls	r2, r3, #5
 8007b38:	69fb      	ldr	r3, [r7, #28]
 8007b3a:	4413      	add	r3, r2
 8007b3c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	69ba      	ldr	r2, [r7, #24]
 8007b44:	0151      	lsls	r1, r2, #5
 8007b46:	69fa      	ldr	r2, [r7, #28]
 8007b48:	440a      	add	r2, r1
 8007b4a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007b4e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007b52:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007b54:	69bb      	ldr	r3, [r7, #24]
 8007b56:	015a      	lsls	r2, r3, #5
 8007b58:	69fb      	ldr	r3, [r7, #28]
 8007b5a:	4413      	add	r3, r2
 8007b5c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	69ba      	ldr	r2, [r7, #24]
 8007b64:	0151      	lsls	r1, r2, #5
 8007b66:	69fa      	ldr	r2, [r7, #28]
 8007b68:	440a      	add	r2, r1
 8007b6a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007b6e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007b72:	6013      	str	r3, [r2, #0]
 8007b74:	e166      	b.n	8007e44 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007b76:	69bb      	ldr	r3, [r7, #24]
 8007b78:	015a      	lsls	r2, r3, #5
 8007b7a:	69fb      	ldr	r3, [r7, #28]
 8007b7c:	4413      	add	r3, r2
 8007b7e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	69ba      	ldr	r2, [r7, #24]
 8007b86:	0151      	lsls	r1, r2, #5
 8007b88:	69fa      	ldr	r2, [r7, #28]
 8007b8a:	440a      	add	r2, r1
 8007b8c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007b90:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007b94:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007b96:	68bb      	ldr	r3, [r7, #8]
 8007b98:	791b      	ldrb	r3, [r3, #4]
 8007b9a:	2b01      	cmp	r3, #1
 8007b9c:	d015      	beq.n	8007bca <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8007b9e:	68bb      	ldr	r3, [r7, #8]
 8007ba0:	691b      	ldr	r3, [r3, #16]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	f000 814e 	beq.w	8007e44 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007ba8:	69fb      	ldr	r3, [r7, #28]
 8007baa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007bae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007bb0:	68bb      	ldr	r3, [r7, #8]
 8007bb2:	781b      	ldrb	r3, [r3, #0]
 8007bb4:	f003 030f 	and.w	r3, r3, #15
 8007bb8:	2101      	movs	r1, #1
 8007bba:	fa01 f303 	lsl.w	r3, r1, r3
 8007bbe:	69f9      	ldr	r1, [r7, #28]
 8007bc0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007bc4:	4313      	orrs	r3, r2
 8007bc6:	634b      	str	r3, [r1, #52]	@ 0x34
 8007bc8:	e13c      	b.n	8007e44 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007bca:	69fb      	ldr	r3, [r7, #28]
 8007bcc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007bd0:	689b      	ldr	r3, [r3, #8]
 8007bd2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d110      	bne.n	8007bfc <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007bda:	69bb      	ldr	r3, [r7, #24]
 8007bdc:	015a      	lsls	r2, r3, #5
 8007bde:	69fb      	ldr	r3, [r7, #28]
 8007be0:	4413      	add	r3, r2
 8007be2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	69ba      	ldr	r2, [r7, #24]
 8007bea:	0151      	lsls	r1, r2, #5
 8007bec:	69fa      	ldr	r2, [r7, #28]
 8007bee:	440a      	add	r2, r1
 8007bf0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007bf4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007bf8:	6013      	str	r3, [r2, #0]
 8007bfa:	e00f      	b.n	8007c1c <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007bfc:	69bb      	ldr	r3, [r7, #24]
 8007bfe:	015a      	lsls	r2, r3, #5
 8007c00:	69fb      	ldr	r3, [r7, #28]
 8007c02:	4413      	add	r3, r2
 8007c04:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	69ba      	ldr	r2, [r7, #24]
 8007c0c:	0151      	lsls	r1, r2, #5
 8007c0e:	69fa      	ldr	r2, [r7, #28]
 8007c10:	440a      	add	r2, r1
 8007c12:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007c16:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007c1a:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8007c1c:	68bb      	ldr	r3, [r7, #8]
 8007c1e:	68d9      	ldr	r1, [r3, #12]
 8007c20:	68bb      	ldr	r3, [r7, #8]
 8007c22:	781a      	ldrb	r2, [r3, #0]
 8007c24:	68bb      	ldr	r3, [r7, #8]
 8007c26:	691b      	ldr	r3, [r3, #16]
 8007c28:	b298      	uxth	r0, r3
 8007c2a:	79fb      	ldrb	r3, [r7, #7]
 8007c2c:	9300      	str	r3, [sp, #0]
 8007c2e:	4603      	mov	r3, r0
 8007c30:	68f8      	ldr	r0, [r7, #12]
 8007c32:	f000 f9b9 	bl	8007fa8 <USB_WritePacket>
 8007c36:	e105      	b.n	8007e44 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007c38:	69bb      	ldr	r3, [r7, #24]
 8007c3a:	015a      	lsls	r2, r3, #5
 8007c3c:	69fb      	ldr	r3, [r7, #28]
 8007c3e:	4413      	add	r3, r2
 8007c40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007c44:	691b      	ldr	r3, [r3, #16]
 8007c46:	69ba      	ldr	r2, [r7, #24]
 8007c48:	0151      	lsls	r1, r2, #5
 8007c4a:	69fa      	ldr	r2, [r7, #28]
 8007c4c:	440a      	add	r2, r1
 8007c4e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007c52:	0cdb      	lsrs	r3, r3, #19
 8007c54:	04db      	lsls	r3, r3, #19
 8007c56:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007c58:	69bb      	ldr	r3, [r7, #24]
 8007c5a:	015a      	lsls	r2, r3, #5
 8007c5c:	69fb      	ldr	r3, [r7, #28]
 8007c5e:	4413      	add	r3, r2
 8007c60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007c64:	691b      	ldr	r3, [r3, #16]
 8007c66:	69ba      	ldr	r2, [r7, #24]
 8007c68:	0151      	lsls	r1, r2, #5
 8007c6a:	69fa      	ldr	r2, [r7, #28]
 8007c6c:	440a      	add	r2, r1
 8007c6e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007c72:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8007c76:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8007c7a:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8007c7c:	69bb      	ldr	r3, [r7, #24]
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d132      	bne.n	8007ce8 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8007c82:	68bb      	ldr	r3, [r7, #8]
 8007c84:	691b      	ldr	r3, [r3, #16]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d003      	beq.n	8007c92 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8007c8a:	68bb      	ldr	r3, [r7, #8]
 8007c8c:	689a      	ldr	r2, [r3, #8]
 8007c8e:	68bb      	ldr	r3, [r7, #8]
 8007c90:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8007c92:	68bb      	ldr	r3, [r7, #8]
 8007c94:	689a      	ldr	r2, [r3, #8]
 8007c96:	68bb      	ldr	r3, [r7, #8]
 8007c98:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8007c9a:	69bb      	ldr	r3, [r7, #24]
 8007c9c:	015a      	lsls	r2, r3, #5
 8007c9e:	69fb      	ldr	r3, [r7, #28]
 8007ca0:	4413      	add	r3, r2
 8007ca2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ca6:	691a      	ldr	r2, [r3, #16]
 8007ca8:	68bb      	ldr	r3, [r7, #8]
 8007caa:	6a1b      	ldr	r3, [r3, #32]
 8007cac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007cb0:	69b9      	ldr	r1, [r7, #24]
 8007cb2:	0148      	lsls	r0, r1, #5
 8007cb4:	69f9      	ldr	r1, [r7, #28]
 8007cb6:	4401      	add	r1, r0
 8007cb8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007cbc:	4313      	orrs	r3, r2
 8007cbe:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007cc0:	69bb      	ldr	r3, [r7, #24]
 8007cc2:	015a      	lsls	r2, r3, #5
 8007cc4:	69fb      	ldr	r3, [r7, #28]
 8007cc6:	4413      	add	r3, r2
 8007cc8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ccc:	691b      	ldr	r3, [r3, #16]
 8007cce:	69ba      	ldr	r2, [r7, #24]
 8007cd0:	0151      	lsls	r1, r2, #5
 8007cd2:	69fa      	ldr	r2, [r7, #28]
 8007cd4:	440a      	add	r2, r1
 8007cd6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007cda:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007cde:	6113      	str	r3, [r2, #16]
 8007ce0:	e062      	b.n	8007da8 <USB_EPStartXfer+0x490>
 8007ce2:	bf00      	nop
 8007ce4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8007ce8:	68bb      	ldr	r3, [r7, #8]
 8007cea:	691b      	ldr	r3, [r3, #16]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d123      	bne.n	8007d38 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007cf0:	69bb      	ldr	r3, [r7, #24]
 8007cf2:	015a      	lsls	r2, r3, #5
 8007cf4:	69fb      	ldr	r3, [r7, #28]
 8007cf6:	4413      	add	r3, r2
 8007cf8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007cfc:	691a      	ldr	r2, [r3, #16]
 8007cfe:	68bb      	ldr	r3, [r7, #8]
 8007d00:	689b      	ldr	r3, [r3, #8]
 8007d02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007d06:	69b9      	ldr	r1, [r7, #24]
 8007d08:	0148      	lsls	r0, r1, #5
 8007d0a:	69f9      	ldr	r1, [r7, #28]
 8007d0c:	4401      	add	r1, r0
 8007d0e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007d12:	4313      	orrs	r3, r2
 8007d14:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007d16:	69bb      	ldr	r3, [r7, #24]
 8007d18:	015a      	lsls	r2, r3, #5
 8007d1a:	69fb      	ldr	r3, [r7, #28]
 8007d1c:	4413      	add	r3, r2
 8007d1e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d22:	691b      	ldr	r3, [r3, #16]
 8007d24:	69ba      	ldr	r2, [r7, #24]
 8007d26:	0151      	lsls	r1, r2, #5
 8007d28:	69fa      	ldr	r2, [r7, #28]
 8007d2a:	440a      	add	r2, r1
 8007d2c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007d30:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007d34:	6113      	str	r3, [r2, #16]
 8007d36:	e037      	b.n	8007da8 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007d38:	68bb      	ldr	r3, [r7, #8]
 8007d3a:	691a      	ldr	r2, [r3, #16]
 8007d3c:	68bb      	ldr	r3, [r7, #8]
 8007d3e:	689b      	ldr	r3, [r3, #8]
 8007d40:	4413      	add	r3, r2
 8007d42:	1e5a      	subs	r2, r3, #1
 8007d44:	68bb      	ldr	r3, [r7, #8]
 8007d46:	689b      	ldr	r3, [r3, #8]
 8007d48:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d4c:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8007d4e:	68bb      	ldr	r3, [r7, #8]
 8007d50:	689b      	ldr	r3, [r3, #8]
 8007d52:	8afa      	ldrh	r2, [r7, #22]
 8007d54:	fb03 f202 	mul.w	r2, r3, r2
 8007d58:	68bb      	ldr	r3, [r7, #8]
 8007d5a:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007d5c:	69bb      	ldr	r3, [r7, #24]
 8007d5e:	015a      	lsls	r2, r3, #5
 8007d60:	69fb      	ldr	r3, [r7, #28]
 8007d62:	4413      	add	r3, r2
 8007d64:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d68:	691a      	ldr	r2, [r3, #16]
 8007d6a:	8afb      	ldrh	r3, [r7, #22]
 8007d6c:	04d9      	lsls	r1, r3, #19
 8007d6e:	4b38      	ldr	r3, [pc, #224]	@ (8007e50 <USB_EPStartXfer+0x538>)
 8007d70:	400b      	ands	r3, r1
 8007d72:	69b9      	ldr	r1, [r7, #24]
 8007d74:	0148      	lsls	r0, r1, #5
 8007d76:	69f9      	ldr	r1, [r7, #28]
 8007d78:	4401      	add	r1, r0
 8007d7a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007d7e:	4313      	orrs	r3, r2
 8007d80:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8007d82:	69bb      	ldr	r3, [r7, #24]
 8007d84:	015a      	lsls	r2, r3, #5
 8007d86:	69fb      	ldr	r3, [r7, #28]
 8007d88:	4413      	add	r3, r2
 8007d8a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d8e:	691a      	ldr	r2, [r3, #16]
 8007d90:	68bb      	ldr	r3, [r7, #8]
 8007d92:	6a1b      	ldr	r3, [r3, #32]
 8007d94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007d98:	69b9      	ldr	r1, [r7, #24]
 8007d9a:	0148      	lsls	r0, r1, #5
 8007d9c:	69f9      	ldr	r1, [r7, #28]
 8007d9e:	4401      	add	r1, r0
 8007da0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007da4:	4313      	orrs	r3, r2
 8007da6:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8007da8:	79fb      	ldrb	r3, [r7, #7]
 8007daa:	2b01      	cmp	r3, #1
 8007dac:	d10d      	bne.n	8007dca <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007dae:	68bb      	ldr	r3, [r7, #8]
 8007db0:	68db      	ldr	r3, [r3, #12]
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d009      	beq.n	8007dca <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007db6:	68bb      	ldr	r3, [r7, #8]
 8007db8:	68d9      	ldr	r1, [r3, #12]
 8007dba:	69bb      	ldr	r3, [r7, #24]
 8007dbc:	015a      	lsls	r2, r3, #5
 8007dbe:	69fb      	ldr	r3, [r7, #28]
 8007dc0:	4413      	add	r3, r2
 8007dc2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007dc6:	460a      	mov	r2, r1
 8007dc8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8007dca:	68bb      	ldr	r3, [r7, #8]
 8007dcc:	791b      	ldrb	r3, [r3, #4]
 8007dce:	2b01      	cmp	r3, #1
 8007dd0:	d128      	bne.n	8007e24 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007dd2:	69fb      	ldr	r3, [r7, #28]
 8007dd4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007dd8:	689b      	ldr	r3, [r3, #8]
 8007dda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d110      	bne.n	8007e04 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007de2:	69bb      	ldr	r3, [r7, #24]
 8007de4:	015a      	lsls	r2, r3, #5
 8007de6:	69fb      	ldr	r3, [r7, #28]
 8007de8:	4413      	add	r3, r2
 8007dea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	69ba      	ldr	r2, [r7, #24]
 8007df2:	0151      	lsls	r1, r2, #5
 8007df4:	69fa      	ldr	r2, [r7, #28]
 8007df6:	440a      	add	r2, r1
 8007df8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007dfc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007e00:	6013      	str	r3, [r2, #0]
 8007e02:	e00f      	b.n	8007e24 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007e04:	69bb      	ldr	r3, [r7, #24]
 8007e06:	015a      	lsls	r2, r3, #5
 8007e08:	69fb      	ldr	r3, [r7, #28]
 8007e0a:	4413      	add	r3, r2
 8007e0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	69ba      	ldr	r2, [r7, #24]
 8007e14:	0151      	lsls	r1, r2, #5
 8007e16:	69fa      	ldr	r2, [r7, #28]
 8007e18:	440a      	add	r2, r1
 8007e1a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007e1e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007e22:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007e24:	69bb      	ldr	r3, [r7, #24]
 8007e26:	015a      	lsls	r2, r3, #5
 8007e28:	69fb      	ldr	r3, [r7, #28]
 8007e2a:	4413      	add	r3, r2
 8007e2c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	69ba      	ldr	r2, [r7, #24]
 8007e34:	0151      	lsls	r1, r2, #5
 8007e36:	69fa      	ldr	r2, [r7, #28]
 8007e38:	440a      	add	r2, r1
 8007e3a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007e3e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007e42:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007e44:	2300      	movs	r3, #0
}
 8007e46:	4618      	mov	r0, r3
 8007e48:	3720      	adds	r7, #32
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	bd80      	pop	{r7, pc}
 8007e4e:	bf00      	nop
 8007e50:	1ff80000 	.word	0x1ff80000

08007e54 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007e54:	b480      	push	{r7}
 8007e56:	b087      	sub	sp, #28
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	6078      	str	r0, [r7, #4]
 8007e5c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007e5e:	2300      	movs	r3, #0
 8007e60:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8007e62:	2300      	movs	r3, #0
 8007e64:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007e6a:	683b      	ldr	r3, [r7, #0]
 8007e6c:	785b      	ldrb	r3, [r3, #1]
 8007e6e:	2b01      	cmp	r3, #1
 8007e70:	d14a      	bne.n	8007f08 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007e72:	683b      	ldr	r3, [r7, #0]
 8007e74:	781b      	ldrb	r3, [r3, #0]
 8007e76:	015a      	lsls	r2, r3, #5
 8007e78:	693b      	ldr	r3, [r7, #16]
 8007e7a:	4413      	add	r3, r2
 8007e7c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007e86:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007e8a:	f040 8086 	bne.w	8007f9a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8007e8e:	683b      	ldr	r3, [r7, #0]
 8007e90:	781b      	ldrb	r3, [r3, #0]
 8007e92:	015a      	lsls	r2, r3, #5
 8007e94:	693b      	ldr	r3, [r7, #16]
 8007e96:	4413      	add	r3, r2
 8007e98:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	683a      	ldr	r2, [r7, #0]
 8007ea0:	7812      	ldrb	r2, [r2, #0]
 8007ea2:	0151      	lsls	r1, r2, #5
 8007ea4:	693a      	ldr	r2, [r7, #16]
 8007ea6:	440a      	add	r2, r1
 8007ea8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007eac:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007eb0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8007eb2:	683b      	ldr	r3, [r7, #0]
 8007eb4:	781b      	ldrb	r3, [r3, #0]
 8007eb6:	015a      	lsls	r2, r3, #5
 8007eb8:	693b      	ldr	r3, [r7, #16]
 8007eba:	4413      	add	r3, r2
 8007ebc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	683a      	ldr	r2, [r7, #0]
 8007ec4:	7812      	ldrb	r2, [r2, #0]
 8007ec6:	0151      	lsls	r1, r2, #5
 8007ec8:	693a      	ldr	r2, [r7, #16]
 8007eca:	440a      	add	r2, r1
 8007ecc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007ed0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007ed4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	3301      	adds	r3, #1
 8007eda:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	f242 7210 	movw	r2, #10000	@ 0x2710
 8007ee2:	4293      	cmp	r3, r2
 8007ee4:	d902      	bls.n	8007eec <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8007ee6:	2301      	movs	r3, #1
 8007ee8:	75fb      	strb	r3, [r7, #23]
          break;
 8007eea:	e056      	b.n	8007f9a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8007eec:	683b      	ldr	r3, [r7, #0]
 8007eee:	781b      	ldrb	r3, [r3, #0]
 8007ef0:	015a      	lsls	r2, r3, #5
 8007ef2:	693b      	ldr	r3, [r7, #16]
 8007ef4:	4413      	add	r3, r2
 8007ef6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007f00:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007f04:	d0e7      	beq.n	8007ed6 <USB_EPStopXfer+0x82>
 8007f06:	e048      	b.n	8007f9a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007f08:	683b      	ldr	r3, [r7, #0]
 8007f0a:	781b      	ldrb	r3, [r3, #0]
 8007f0c:	015a      	lsls	r2, r3, #5
 8007f0e:	693b      	ldr	r3, [r7, #16]
 8007f10:	4413      	add	r3, r2
 8007f12:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007f1c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007f20:	d13b      	bne.n	8007f9a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8007f22:	683b      	ldr	r3, [r7, #0]
 8007f24:	781b      	ldrb	r3, [r3, #0]
 8007f26:	015a      	lsls	r2, r3, #5
 8007f28:	693b      	ldr	r3, [r7, #16]
 8007f2a:	4413      	add	r3, r2
 8007f2c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	683a      	ldr	r2, [r7, #0]
 8007f34:	7812      	ldrb	r2, [r2, #0]
 8007f36:	0151      	lsls	r1, r2, #5
 8007f38:	693a      	ldr	r2, [r7, #16]
 8007f3a:	440a      	add	r2, r1
 8007f3c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007f40:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007f44:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8007f46:	683b      	ldr	r3, [r7, #0]
 8007f48:	781b      	ldrb	r3, [r3, #0]
 8007f4a:	015a      	lsls	r2, r3, #5
 8007f4c:	693b      	ldr	r3, [r7, #16]
 8007f4e:	4413      	add	r3, r2
 8007f50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	683a      	ldr	r2, [r7, #0]
 8007f58:	7812      	ldrb	r2, [r2, #0]
 8007f5a:	0151      	lsls	r1, r2, #5
 8007f5c:	693a      	ldr	r2, [r7, #16]
 8007f5e:	440a      	add	r2, r1
 8007f60:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007f64:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007f68:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	3301      	adds	r3, #1
 8007f6e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	f242 7210 	movw	r2, #10000	@ 0x2710
 8007f76:	4293      	cmp	r3, r2
 8007f78:	d902      	bls.n	8007f80 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8007f7a:	2301      	movs	r3, #1
 8007f7c:	75fb      	strb	r3, [r7, #23]
          break;
 8007f7e:	e00c      	b.n	8007f9a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8007f80:	683b      	ldr	r3, [r7, #0]
 8007f82:	781b      	ldrb	r3, [r3, #0]
 8007f84:	015a      	lsls	r2, r3, #5
 8007f86:	693b      	ldr	r3, [r7, #16]
 8007f88:	4413      	add	r3, r2
 8007f8a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007f94:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007f98:	d0e7      	beq.n	8007f6a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8007f9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f9c:	4618      	mov	r0, r3
 8007f9e:	371c      	adds	r7, #28
 8007fa0:	46bd      	mov	sp, r7
 8007fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa6:	4770      	bx	lr

08007fa8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007fa8:	b480      	push	{r7}
 8007faa:	b089      	sub	sp, #36	@ 0x24
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	60f8      	str	r0, [r7, #12]
 8007fb0:	60b9      	str	r1, [r7, #8]
 8007fb2:	4611      	mov	r1, r2
 8007fb4:	461a      	mov	r2, r3
 8007fb6:	460b      	mov	r3, r1
 8007fb8:	71fb      	strb	r3, [r7, #7]
 8007fba:	4613      	mov	r3, r2
 8007fbc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007fc2:	68bb      	ldr	r3, [r7, #8]
 8007fc4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007fc6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d123      	bne.n	8008016 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007fce:	88bb      	ldrh	r3, [r7, #4]
 8007fd0:	3303      	adds	r3, #3
 8007fd2:	089b      	lsrs	r3, r3, #2
 8007fd4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007fd6:	2300      	movs	r3, #0
 8007fd8:	61bb      	str	r3, [r7, #24]
 8007fda:	e018      	b.n	800800e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007fdc:	79fb      	ldrb	r3, [r7, #7]
 8007fde:	031a      	lsls	r2, r3, #12
 8007fe0:	697b      	ldr	r3, [r7, #20]
 8007fe2:	4413      	add	r3, r2
 8007fe4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007fe8:	461a      	mov	r2, r3
 8007fea:	69fb      	ldr	r3, [r7, #28]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007ff0:	69fb      	ldr	r3, [r7, #28]
 8007ff2:	3301      	adds	r3, #1
 8007ff4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007ff6:	69fb      	ldr	r3, [r7, #28]
 8007ff8:	3301      	adds	r3, #1
 8007ffa:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007ffc:	69fb      	ldr	r3, [r7, #28]
 8007ffe:	3301      	adds	r3, #1
 8008000:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008002:	69fb      	ldr	r3, [r7, #28]
 8008004:	3301      	adds	r3, #1
 8008006:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008008:	69bb      	ldr	r3, [r7, #24]
 800800a:	3301      	adds	r3, #1
 800800c:	61bb      	str	r3, [r7, #24]
 800800e:	69ba      	ldr	r2, [r7, #24]
 8008010:	693b      	ldr	r3, [r7, #16]
 8008012:	429a      	cmp	r2, r3
 8008014:	d3e2      	bcc.n	8007fdc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008016:	2300      	movs	r3, #0
}
 8008018:	4618      	mov	r0, r3
 800801a:	3724      	adds	r7, #36	@ 0x24
 800801c:	46bd      	mov	sp, r7
 800801e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008022:	4770      	bx	lr

08008024 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008024:	b480      	push	{r7}
 8008026:	b08b      	sub	sp, #44	@ 0x2c
 8008028:	af00      	add	r7, sp, #0
 800802a:	60f8      	str	r0, [r7, #12]
 800802c:	60b9      	str	r1, [r7, #8]
 800802e:	4613      	mov	r3, r2
 8008030:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8008036:	68bb      	ldr	r3, [r7, #8]
 8008038:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800803a:	88fb      	ldrh	r3, [r7, #6]
 800803c:	089b      	lsrs	r3, r3, #2
 800803e:	b29b      	uxth	r3, r3
 8008040:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8008042:	88fb      	ldrh	r3, [r7, #6]
 8008044:	f003 0303 	and.w	r3, r3, #3
 8008048:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800804a:	2300      	movs	r3, #0
 800804c:	623b      	str	r3, [r7, #32]
 800804e:	e014      	b.n	800807a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008050:	69bb      	ldr	r3, [r7, #24]
 8008052:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008056:	681a      	ldr	r2, [r3, #0]
 8008058:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800805a:	601a      	str	r2, [r3, #0]
    pDest++;
 800805c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800805e:	3301      	adds	r3, #1
 8008060:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008062:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008064:	3301      	adds	r3, #1
 8008066:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008068:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800806a:	3301      	adds	r3, #1
 800806c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800806e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008070:	3301      	adds	r3, #1
 8008072:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8008074:	6a3b      	ldr	r3, [r7, #32]
 8008076:	3301      	adds	r3, #1
 8008078:	623b      	str	r3, [r7, #32]
 800807a:	6a3a      	ldr	r2, [r7, #32]
 800807c:	697b      	ldr	r3, [r7, #20]
 800807e:	429a      	cmp	r2, r3
 8008080:	d3e6      	bcc.n	8008050 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8008082:	8bfb      	ldrh	r3, [r7, #30]
 8008084:	2b00      	cmp	r3, #0
 8008086:	d01e      	beq.n	80080c6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008088:	2300      	movs	r3, #0
 800808a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800808c:	69bb      	ldr	r3, [r7, #24]
 800808e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008092:	461a      	mov	r2, r3
 8008094:	f107 0310 	add.w	r3, r7, #16
 8008098:	6812      	ldr	r2, [r2, #0]
 800809a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800809c:	693a      	ldr	r2, [r7, #16]
 800809e:	6a3b      	ldr	r3, [r7, #32]
 80080a0:	b2db      	uxtb	r3, r3
 80080a2:	00db      	lsls	r3, r3, #3
 80080a4:	fa22 f303 	lsr.w	r3, r2, r3
 80080a8:	b2da      	uxtb	r2, r3
 80080aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080ac:	701a      	strb	r2, [r3, #0]
      i++;
 80080ae:	6a3b      	ldr	r3, [r7, #32]
 80080b0:	3301      	adds	r3, #1
 80080b2:	623b      	str	r3, [r7, #32]
      pDest++;
 80080b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080b6:	3301      	adds	r3, #1
 80080b8:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80080ba:	8bfb      	ldrh	r3, [r7, #30]
 80080bc:	3b01      	subs	r3, #1
 80080be:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80080c0:	8bfb      	ldrh	r3, [r7, #30]
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d1ea      	bne.n	800809c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80080c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80080c8:	4618      	mov	r0, r3
 80080ca:	372c      	adds	r7, #44	@ 0x2c
 80080cc:	46bd      	mov	sp, r7
 80080ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d2:	4770      	bx	lr

080080d4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80080d4:	b480      	push	{r7}
 80080d6:	b085      	sub	sp, #20
 80080d8:	af00      	add	r7, sp, #0
 80080da:	6078      	str	r0, [r7, #4]
 80080dc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80080e2:	683b      	ldr	r3, [r7, #0]
 80080e4:	781b      	ldrb	r3, [r3, #0]
 80080e6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80080e8:	683b      	ldr	r3, [r7, #0]
 80080ea:	785b      	ldrb	r3, [r3, #1]
 80080ec:	2b01      	cmp	r3, #1
 80080ee:	d12c      	bne.n	800814a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80080f0:	68bb      	ldr	r3, [r7, #8]
 80080f2:	015a      	lsls	r2, r3, #5
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	4413      	add	r3, r2
 80080f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	2b00      	cmp	r3, #0
 8008100:	db12      	blt.n	8008128 <USB_EPSetStall+0x54>
 8008102:	68bb      	ldr	r3, [r7, #8]
 8008104:	2b00      	cmp	r3, #0
 8008106:	d00f      	beq.n	8008128 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8008108:	68bb      	ldr	r3, [r7, #8]
 800810a:	015a      	lsls	r2, r3, #5
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	4413      	add	r3, r2
 8008110:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	68ba      	ldr	r2, [r7, #8]
 8008118:	0151      	lsls	r1, r2, #5
 800811a:	68fa      	ldr	r2, [r7, #12]
 800811c:	440a      	add	r2, r1
 800811e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008122:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008126:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8008128:	68bb      	ldr	r3, [r7, #8]
 800812a:	015a      	lsls	r2, r3, #5
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	4413      	add	r3, r2
 8008130:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	68ba      	ldr	r2, [r7, #8]
 8008138:	0151      	lsls	r1, r2, #5
 800813a:	68fa      	ldr	r2, [r7, #12]
 800813c:	440a      	add	r2, r1
 800813e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008142:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008146:	6013      	str	r3, [r2, #0]
 8008148:	e02b      	b.n	80081a2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800814a:	68bb      	ldr	r3, [r7, #8]
 800814c:	015a      	lsls	r2, r3, #5
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	4413      	add	r3, r2
 8008152:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	2b00      	cmp	r3, #0
 800815a:	db12      	blt.n	8008182 <USB_EPSetStall+0xae>
 800815c:	68bb      	ldr	r3, [r7, #8]
 800815e:	2b00      	cmp	r3, #0
 8008160:	d00f      	beq.n	8008182 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8008162:	68bb      	ldr	r3, [r7, #8]
 8008164:	015a      	lsls	r2, r3, #5
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	4413      	add	r3, r2
 800816a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	68ba      	ldr	r2, [r7, #8]
 8008172:	0151      	lsls	r1, r2, #5
 8008174:	68fa      	ldr	r2, [r7, #12]
 8008176:	440a      	add	r2, r1
 8008178:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800817c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008180:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8008182:	68bb      	ldr	r3, [r7, #8]
 8008184:	015a      	lsls	r2, r3, #5
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	4413      	add	r3, r2
 800818a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	68ba      	ldr	r2, [r7, #8]
 8008192:	0151      	lsls	r1, r2, #5
 8008194:	68fa      	ldr	r2, [r7, #12]
 8008196:	440a      	add	r2, r1
 8008198:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800819c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80081a0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80081a2:	2300      	movs	r3, #0
}
 80081a4:	4618      	mov	r0, r3
 80081a6:	3714      	adds	r7, #20
 80081a8:	46bd      	mov	sp, r7
 80081aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ae:	4770      	bx	lr

080081b0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80081b0:	b480      	push	{r7}
 80081b2:	b085      	sub	sp, #20
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	6078      	str	r0, [r7, #4]
 80081b8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80081be:	683b      	ldr	r3, [r7, #0]
 80081c0:	781b      	ldrb	r3, [r3, #0]
 80081c2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80081c4:	683b      	ldr	r3, [r7, #0]
 80081c6:	785b      	ldrb	r3, [r3, #1]
 80081c8:	2b01      	cmp	r3, #1
 80081ca:	d128      	bne.n	800821e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80081cc:	68bb      	ldr	r3, [r7, #8]
 80081ce:	015a      	lsls	r2, r3, #5
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	4413      	add	r3, r2
 80081d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	68ba      	ldr	r2, [r7, #8]
 80081dc:	0151      	lsls	r1, r2, #5
 80081de:	68fa      	ldr	r2, [r7, #12]
 80081e0:	440a      	add	r2, r1
 80081e2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80081e6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80081ea:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80081ec:	683b      	ldr	r3, [r7, #0]
 80081ee:	791b      	ldrb	r3, [r3, #4]
 80081f0:	2b03      	cmp	r3, #3
 80081f2:	d003      	beq.n	80081fc <USB_EPClearStall+0x4c>
 80081f4:	683b      	ldr	r3, [r7, #0]
 80081f6:	791b      	ldrb	r3, [r3, #4]
 80081f8:	2b02      	cmp	r3, #2
 80081fa:	d138      	bne.n	800826e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80081fc:	68bb      	ldr	r3, [r7, #8]
 80081fe:	015a      	lsls	r2, r3, #5
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	4413      	add	r3, r2
 8008204:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	68ba      	ldr	r2, [r7, #8]
 800820c:	0151      	lsls	r1, r2, #5
 800820e:	68fa      	ldr	r2, [r7, #12]
 8008210:	440a      	add	r2, r1
 8008212:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008216:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800821a:	6013      	str	r3, [r2, #0]
 800821c:	e027      	b.n	800826e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800821e:	68bb      	ldr	r3, [r7, #8]
 8008220:	015a      	lsls	r2, r3, #5
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	4413      	add	r3, r2
 8008226:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	68ba      	ldr	r2, [r7, #8]
 800822e:	0151      	lsls	r1, r2, #5
 8008230:	68fa      	ldr	r2, [r7, #12]
 8008232:	440a      	add	r2, r1
 8008234:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008238:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800823c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800823e:	683b      	ldr	r3, [r7, #0]
 8008240:	791b      	ldrb	r3, [r3, #4]
 8008242:	2b03      	cmp	r3, #3
 8008244:	d003      	beq.n	800824e <USB_EPClearStall+0x9e>
 8008246:	683b      	ldr	r3, [r7, #0]
 8008248:	791b      	ldrb	r3, [r3, #4]
 800824a:	2b02      	cmp	r3, #2
 800824c:	d10f      	bne.n	800826e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800824e:	68bb      	ldr	r3, [r7, #8]
 8008250:	015a      	lsls	r2, r3, #5
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	4413      	add	r3, r2
 8008256:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	68ba      	ldr	r2, [r7, #8]
 800825e:	0151      	lsls	r1, r2, #5
 8008260:	68fa      	ldr	r2, [r7, #12]
 8008262:	440a      	add	r2, r1
 8008264:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008268:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800826c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800826e:	2300      	movs	r3, #0
}
 8008270:	4618      	mov	r0, r3
 8008272:	3714      	adds	r7, #20
 8008274:	46bd      	mov	sp, r7
 8008276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827a:	4770      	bx	lr

0800827c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800827c:	b480      	push	{r7}
 800827e:	b085      	sub	sp, #20
 8008280:	af00      	add	r7, sp, #0
 8008282:	6078      	str	r0, [r7, #4]
 8008284:	460b      	mov	r3, r1
 8008286:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	68fa      	ldr	r2, [r7, #12]
 8008296:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800829a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800829e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80082a6:	681a      	ldr	r2, [r3, #0]
 80082a8:	78fb      	ldrb	r3, [r7, #3]
 80082aa:	011b      	lsls	r3, r3, #4
 80082ac:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 80082b0:	68f9      	ldr	r1, [r7, #12]
 80082b2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80082b6:	4313      	orrs	r3, r2
 80082b8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80082ba:	2300      	movs	r3, #0
}
 80082bc:	4618      	mov	r0, r3
 80082be:	3714      	adds	r7, #20
 80082c0:	46bd      	mov	sp, r7
 80082c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c6:	4770      	bx	lr

080082c8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80082c8:	b480      	push	{r7}
 80082ca:	b085      	sub	sp, #20
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	68fa      	ldr	r2, [r7, #12]
 80082de:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80082e2:	f023 0303 	bic.w	r3, r3, #3
 80082e6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80082ee:	685b      	ldr	r3, [r3, #4]
 80082f0:	68fa      	ldr	r2, [r7, #12]
 80082f2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80082f6:	f023 0302 	bic.w	r3, r3, #2
 80082fa:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80082fc:	2300      	movs	r3, #0
}
 80082fe:	4618      	mov	r0, r3
 8008300:	3714      	adds	r7, #20
 8008302:	46bd      	mov	sp, r7
 8008304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008308:	4770      	bx	lr

0800830a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800830a:	b480      	push	{r7}
 800830c:	b085      	sub	sp, #20
 800830e:	af00      	add	r7, sp, #0
 8008310:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	68fa      	ldr	r2, [r7, #12]
 8008320:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008324:	f023 0303 	bic.w	r3, r3, #3
 8008328:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008330:	685b      	ldr	r3, [r3, #4]
 8008332:	68fa      	ldr	r2, [r7, #12]
 8008334:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008338:	f043 0302 	orr.w	r3, r3, #2
 800833c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800833e:	2300      	movs	r3, #0
}
 8008340:	4618      	mov	r0, r3
 8008342:	3714      	adds	r7, #20
 8008344:	46bd      	mov	sp, r7
 8008346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834a:	4770      	bx	lr

0800834c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800834c:	b480      	push	{r7}
 800834e:	b085      	sub	sp, #20
 8008350:	af00      	add	r7, sp, #0
 8008352:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	695b      	ldr	r3, [r3, #20]
 8008358:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	699b      	ldr	r3, [r3, #24]
 800835e:	68fa      	ldr	r2, [r7, #12]
 8008360:	4013      	ands	r3, r2
 8008362:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008364:	68fb      	ldr	r3, [r7, #12]
}
 8008366:	4618      	mov	r0, r3
 8008368:	3714      	adds	r7, #20
 800836a:	46bd      	mov	sp, r7
 800836c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008370:	4770      	bx	lr

08008372 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8008372:	b480      	push	{r7}
 8008374:	b085      	sub	sp, #20
 8008376:	af00      	add	r7, sp, #0
 8008378:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008384:	699b      	ldr	r3, [r3, #24]
 8008386:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800838e:	69db      	ldr	r3, [r3, #28]
 8008390:	68ba      	ldr	r2, [r7, #8]
 8008392:	4013      	ands	r3, r2
 8008394:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8008396:	68bb      	ldr	r3, [r7, #8]
 8008398:	0c1b      	lsrs	r3, r3, #16
}
 800839a:	4618      	mov	r0, r3
 800839c:	3714      	adds	r7, #20
 800839e:	46bd      	mov	sp, r7
 80083a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a4:	4770      	bx	lr

080083a6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80083a6:	b480      	push	{r7}
 80083a8:	b085      	sub	sp, #20
 80083aa:	af00      	add	r7, sp, #0
 80083ac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80083b8:	699b      	ldr	r3, [r3, #24]
 80083ba:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80083c2:	69db      	ldr	r3, [r3, #28]
 80083c4:	68ba      	ldr	r2, [r7, #8]
 80083c6:	4013      	ands	r3, r2
 80083c8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80083ca:	68bb      	ldr	r3, [r7, #8]
 80083cc:	b29b      	uxth	r3, r3
}
 80083ce:	4618      	mov	r0, r3
 80083d0:	3714      	adds	r7, #20
 80083d2:	46bd      	mov	sp, r7
 80083d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d8:	4770      	bx	lr

080083da <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80083da:	b480      	push	{r7}
 80083dc:	b085      	sub	sp, #20
 80083de:	af00      	add	r7, sp, #0
 80083e0:	6078      	str	r0, [r7, #4]
 80083e2:	460b      	mov	r3, r1
 80083e4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80083ea:	78fb      	ldrb	r3, [r7, #3]
 80083ec:	015a      	lsls	r2, r3, #5
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	4413      	add	r3, r2
 80083f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80083f6:	689b      	ldr	r3, [r3, #8]
 80083f8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008400:	695b      	ldr	r3, [r3, #20]
 8008402:	68ba      	ldr	r2, [r7, #8]
 8008404:	4013      	ands	r3, r2
 8008406:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008408:	68bb      	ldr	r3, [r7, #8]
}
 800840a:	4618      	mov	r0, r3
 800840c:	3714      	adds	r7, #20
 800840e:	46bd      	mov	sp, r7
 8008410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008414:	4770      	bx	lr

08008416 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008416:	b480      	push	{r7}
 8008418:	b087      	sub	sp, #28
 800841a:	af00      	add	r7, sp, #0
 800841c:	6078      	str	r0, [r7, #4]
 800841e:	460b      	mov	r3, r1
 8008420:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8008426:	697b      	ldr	r3, [r7, #20]
 8008428:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800842c:	691b      	ldr	r3, [r3, #16]
 800842e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008430:	697b      	ldr	r3, [r7, #20]
 8008432:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008436:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008438:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800843a:	78fb      	ldrb	r3, [r7, #3]
 800843c:	f003 030f 	and.w	r3, r3, #15
 8008440:	68fa      	ldr	r2, [r7, #12]
 8008442:	fa22 f303 	lsr.w	r3, r2, r3
 8008446:	01db      	lsls	r3, r3, #7
 8008448:	b2db      	uxtb	r3, r3
 800844a:	693a      	ldr	r2, [r7, #16]
 800844c:	4313      	orrs	r3, r2
 800844e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8008450:	78fb      	ldrb	r3, [r7, #3]
 8008452:	015a      	lsls	r2, r3, #5
 8008454:	697b      	ldr	r3, [r7, #20]
 8008456:	4413      	add	r3, r2
 8008458:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800845c:	689b      	ldr	r3, [r3, #8]
 800845e:	693a      	ldr	r2, [r7, #16]
 8008460:	4013      	ands	r3, r2
 8008462:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008464:	68bb      	ldr	r3, [r7, #8]
}
 8008466:	4618      	mov	r0, r3
 8008468:	371c      	adds	r7, #28
 800846a:	46bd      	mov	sp, r7
 800846c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008470:	4770      	bx	lr

08008472 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8008472:	b480      	push	{r7}
 8008474:	b083      	sub	sp, #12
 8008476:	af00      	add	r7, sp, #0
 8008478:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	695b      	ldr	r3, [r3, #20]
 800847e:	f003 0301 	and.w	r3, r3, #1
}
 8008482:	4618      	mov	r0, r3
 8008484:	370c      	adds	r7, #12
 8008486:	46bd      	mov	sp, r7
 8008488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848c:	4770      	bx	lr

0800848e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800848e:	b480      	push	{r7}
 8008490:	b085      	sub	sp, #20
 8008492:	af00      	add	r7, sp, #0
 8008494:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	68fa      	ldr	r2, [r7, #12]
 80084a4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80084a8:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80084ac:	f023 0307 	bic.w	r3, r3, #7
 80084b0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80084b8:	685b      	ldr	r3, [r3, #4]
 80084ba:	68fa      	ldr	r2, [r7, #12]
 80084bc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80084c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80084c4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80084c6:	2300      	movs	r3, #0
}
 80084c8:	4618      	mov	r0, r3
 80084ca:	3714      	adds	r7, #20
 80084cc:	46bd      	mov	sp, r7
 80084ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d2:	4770      	bx	lr

080084d4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80084d4:	b480      	push	{r7}
 80084d6:	b087      	sub	sp, #28
 80084d8:	af00      	add	r7, sp, #0
 80084da:	60f8      	str	r0, [r7, #12]
 80084dc:	460b      	mov	r3, r1
 80084de:	607a      	str	r2, [r7, #4]
 80084e0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	333c      	adds	r3, #60	@ 0x3c
 80084ea:	3304      	adds	r3, #4
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80084f0:	693b      	ldr	r3, [r7, #16]
 80084f2:	4a26      	ldr	r2, [pc, #152]	@ (800858c <USB_EP0_OutStart+0xb8>)
 80084f4:	4293      	cmp	r3, r2
 80084f6:	d90a      	bls.n	800850e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80084f8:	697b      	ldr	r3, [r7, #20]
 80084fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008504:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008508:	d101      	bne.n	800850e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800850a:	2300      	movs	r3, #0
 800850c:	e037      	b.n	800857e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800850e:	697b      	ldr	r3, [r7, #20]
 8008510:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008514:	461a      	mov	r2, r3
 8008516:	2300      	movs	r3, #0
 8008518:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800851a:	697b      	ldr	r3, [r7, #20]
 800851c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008520:	691b      	ldr	r3, [r3, #16]
 8008522:	697a      	ldr	r2, [r7, #20]
 8008524:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008528:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800852c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800852e:	697b      	ldr	r3, [r7, #20]
 8008530:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008534:	691b      	ldr	r3, [r3, #16]
 8008536:	697a      	ldr	r2, [r7, #20]
 8008538:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800853c:	f043 0318 	orr.w	r3, r3, #24
 8008540:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8008542:	697b      	ldr	r3, [r7, #20]
 8008544:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008548:	691b      	ldr	r3, [r3, #16]
 800854a:	697a      	ldr	r2, [r7, #20]
 800854c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008550:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8008554:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8008556:	7afb      	ldrb	r3, [r7, #11]
 8008558:	2b01      	cmp	r3, #1
 800855a:	d10f      	bne.n	800857c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800855c:	697b      	ldr	r3, [r7, #20]
 800855e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008562:	461a      	mov	r2, r3
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8008568:	697b      	ldr	r3, [r7, #20]
 800856a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	697a      	ldr	r2, [r7, #20]
 8008572:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008576:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800857a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800857c:	2300      	movs	r3, #0
}
 800857e:	4618      	mov	r0, r3
 8008580:	371c      	adds	r7, #28
 8008582:	46bd      	mov	sp, r7
 8008584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008588:	4770      	bx	lr
 800858a:	bf00      	nop
 800858c:	4f54300a 	.word	0x4f54300a

08008590 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008590:	b480      	push	{r7}
 8008592:	b085      	sub	sp, #20
 8008594:	af00      	add	r7, sp, #0
 8008596:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008598:	2300      	movs	r3, #0
 800859a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	3301      	adds	r3, #1
 80085a0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80085a8:	d901      	bls.n	80085ae <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80085aa:	2303      	movs	r3, #3
 80085ac:	e01b      	b.n	80085e6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	691b      	ldr	r3, [r3, #16]
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	daf2      	bge.n	800859c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80085b6:	2300      	movs	r3, #0
 80085b8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	691b      	ldr	r3, [r3, #16]
 80085be:	f043 0201 	orr.w	r2, r3, #1
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	3301      	adds	r3, #1
 80085ca:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80085d2:	d901      	bls.n	80085d8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80085d4:	2303      	movs	r3, #3
 80085d6:	e006      	b.n	80085e6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	691b      	ldr	r3, [r3, #16]
 80085dc:	f003 0301 	and.w	r3, r3, #1
 80085e0:	2b01      	cmp	r3, #1
 80085e2:	d0f0      	beq.n	80085c6 <USB_CoreReset+0x36>

  return HAL_OK;
 80085e4:	2300      	movs	r3, #0
}
 80085e6:	4618      	mov	r0, r3
 80085e8:	3714      	adds	r7, #20
 80085ea:	46bd      	mov	sp, r7
 80085ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f0:	4770      	bx	lr
	...

080085f4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80085f4:	b580      	push	{r7, lr}
 80085f6:	b084      	sub	sp, #16
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	6078      	str	r0, [r7, #4]
 80085fc:	460b      	mov	r3, r1
 80085fe:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008600:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8008604:	f002 fcc4 	bl	800af90 <USBD_static_malloc>
 8008608:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	2b00      	cmp	r3, #0
 800860e:	d109      	bne.n	8008624 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	32b0      	adds	r2, #176	@ 0xb0
 800861a:	2100      	movs	r1, #0
 800861c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8008620:	2302      	movs	r3, #2
 8008622:	e0d4      	b.n	80087ce <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8008624:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8008628:	2100      	movs	r1, #0
 800862a:	68f8      	ldr	r0, [r7, #12]
 800862c:	f002 fefe 	bl	800b42c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	32b0      	adds	r2, #176	@ 0xb0
 800863a:	68f9      	ldr	r1, [r7, #12]
 800863c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	32b0      	adds	r2, #176	@ 0xb0
 800864a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	7c1b      	ldrb	r3, [r3, #16]
 8008658:	2b00      	cmp	r3, #0
 800865a:	d138      	bne.n	80086ce <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800865c:	4b5e      	ldr	r3, [pc, #376]	@ (80087d8 <USBD_CDC_Init+0x1e4>)
 800865e:	7819      	ldrb	r1, [r3, #0]
 8008660:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008664:	2202      	movs	r2, #2
 8008666:	6878      	ldr	r0, [r7, #4]
 8008668:	f002 fb6f 	bl	800ad4a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800866c:	4b5a      	ldr	r3, [pc, #360]	@ (80087d8 <USBD_CDC_Init+0x1e4>)
 800866e:	781b      	ldrb	r3, [r3, #0]
 8008670:	f003 020f 	and.w	r2, r3, #15
 8008674:	6879      	ldr	r1, [r7, #4]
 8008676:	4613      	mov	r3, r2
 8008678:	009b      	lsls	r3, r3, #2
 800867a:	4413      	add	r3, r2
 800867c:	009b      	lsls	r3, r3, #2
 800867e:	440b      	add	r3, r1
 8008680:	3324      	adds	r3, #36	@ 0x24
 8008682:	2201      	movs	r2, #1
 8008684:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8008686:	4b55      	ldr	r3, [pc, #340]	@ (80087dc <USBD_CDC_Init+0x1e8>)
 8008688:	7819      	ldrb	r1, [r3, #0]
 800868a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800868e:	2202      	movs	r2, #2
 8008690:	6878      	ldr	r0, [r7, #4]
 8008692:	f002 fb5a 	bl	800ad4a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008696:	4b51      	ldr	r3, [pc, #324]	@ (80087dc <USBD_CDC_Init+0x1e8>)
 8008698:	781b      	ldrb	r3, [r3, #0]
 800869a:	f003 020f 	and.w	r2, r3, #15
 800869e:	6879      	ldr	r1, [r7, #4]
 80086a0:	4613      	mov	r3, r2
 80086a2:	009b      	lsls	r3, r3, #2
 80086a4:	4413      	add	r3, r2
 80086a6:	009b      	lsls	r3, r3, #2
 80086a8:	440b      	add	r3, r1
 80086aa:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80086ae:	2201      	movs	r2, #1
 80086b0:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80086b2:	4b4b      	ldr	r3, [pc, #300]	@ (80087e0 <USBD_CDC_Init+0x1ec>)
 80086b4:	781b      	ldrb	r3, [r3, #0]
 80086b6:	f003 020f 	and.w	r2, r3, #15
 80086ba:	6879      	ldr	r1, [r7, #4]
 80086bc:	4613      	mov	r3, r2
 80086be:	009b      	lsls	r3, r3, #2
 80086c0:	4413      	add	r3, r2
 80086c2:	009b      	lsls	r3, r3, #2
 80086c4:	440b      	add	r3, r1
 80086c6:	3326      	adds	r3, #38	@ 0x26
 80086c8:	2210      	movs	r2, #16
 80086ca:	801a      	strh	r2, [r3, #0]
 80086cc:	e035      	b.n	800873a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80086ce:	4b42      	ldr	r3, [pc, #264]	@ (80087d8 <USBD_CDC_Init+0x1e4>)
 80086d0:	7819      	ldrb	r1, [r3, #0]
 80086d2:	2340      	movs	r3, #64	@ 0x40
 80086d4:	2202      	movs	r2, #2
 80086d6:	6878      	ldr	r0, [r7, #4]
 80086d8:	f002 fb37 	bl	800ad4a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80086dc:	4b3e      	ldr	r3, [pc, #248]	@ (80087d8 <USBD_CDC_Init+0x1e4>)
 80086de:	781b      	ldrb	r3, [r3, #0]
 80086e0:	f003 020f 	and.w	r2, r3, #15
 80086e4:	6879      	ldr	r1, [r7, #4]
 80086e6:	4613      	mov	r3, r2
 80086e8:	009b      	lsls	r3, r3, #2
 80086ea:	4413      	add	r3, r2
 80086ec:	009b      	lsls	r3, r3, #2
 80086ee:	440b      	add	r3, r1
 80086f0:	3324      	adds	r3, #36	@ 0x24
 80086f2:	2201      	movs	r2, #1
 80086f4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80086f6:	4b39      	ldr	r3, [pc, #228]	@ (80087dc <USBD_CDC_Init+0x1e8>)
 80086f8:	7819      	ldrb	r1, [r3, #0]
 80086fa:	2340      	movs	r3, #64	@ 0x40
 80086fc:	2202      	movs	r2, #2
 80086fe:	6878      	ldr	r0, [r7, #4]
 8008700:	f002 fb23 	bl	800ad4a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008704:	4b35      	ldr	r3, [pc, #212]	@ (80087dc <USBD_CDC_Init+0x1e8>)
 8008706:	781b      	ldrb	r3, [r3, #0]
 8008708:	f003 020f 	and.w	r2, r3, #15
 800870c:	6879      	ldr	r1, [r7, #4]
 800870e:	4613      	mov	r3, r2
 8008710:	009b      	lsls	r3, r3, #2
 8008712:	4413      	add	r3, r2
 8008714:	009b      	lsls	r3, r3, #2
 8008716:	440b      	add	r3, r1
 8008718:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800871c:	2201      	movs	r2, #1
 800871e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8008720:	4b2f      	ldr	r3, [pc, #188]	@ (80087e0 <USBD_CDC_Init+0x1ec>)
 8008722:	781b      	ldrb	r3, [r3, #0]
 8008724:	f003 020f 	and.w	r2, r3, #15
 8008728:	6879      	ldr	r1, [r7, #4]
 800872a:	4613      	mov	r3, r2
 800872c:	009b      	lsls	r3, r3, #2
 800872e:	4413      	add	r3, r2
 8008730:	009b      	lsls	r3, r3, #2
 8008732:	440b      	add	r3, r1
 8008734:	3326      	adds	r3, #38	@ 0x26
 8008736:	2210      	movs	r2, #16
 8008738:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800873a:	4b29      	ldr	r3, [pc, #164]	@ (80087e0 <USBD_CDC_Init+0x1ec>)
 800873c:	7819      	ldrb	r1, [r3, #0]
 800873e:	2308      	movs	r3, #8
 8008740:	2203      	movs	r2, #3
 8008742:	6878      	ldr	r0, [r7, #4]
 8008744:	f002 fb01 	bl	800ad4a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8008748:	4b25      	ldr	r3, [pc, #148]	@ (80087e0 <USBD_CDC_Init+0x1ec>)
 800874a:	781b      	ldrb	r3, [r3, #0]
 800874c:	f003 020f 	and.w	r2, r3, #15
 8008750:	6879      	ldr	r1, [r7, #4]
 8008752:	4613      	mov	r3, r2
 8008754:	009b      	lsls	r3, r3, #2
 8008756:	4413      	add	r3, r2
 8008758:	009b      	lsls	r3, r3, #2
 800875a:	440b      	add	r3, r1
 800875c:	3324      	adds	r3, #36	@ 0x24
 800875e:	2201      	movs	r2, #1
 8008760:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	2200      	movs	r2, #0
 8008766:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008770:	687a      	ldr	r2, [r7, #4]
 8008772:	33b0      	adds	r3, #176	@ 0xb0
 8008774:	009b      	lsls	r3, r3, #2
 8008776:	4413      	add	r3, r2
 8008778:	685b      	ldr	r3, [r3, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	2200      	movs	r2, #0
 8008782:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	2200      	movs	r2, #0
 800878a:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8008794:	2b00      	cmp	r3, #0
 8008796:	d101      	bne.n	800879c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8008798:	2302      	movs	r3, #2
 800879a:	e018      	b.n	80087ce <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	7c1b      	ldrb	r3, [r3, #16]
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d10a      	bne.n	80087ba <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80087a4:	4b0d      	ldr	r3, [pc, #52]	@ (80087dc <USBD_CDC_Init+0x1e8>)
 80087a6:	7819      	ldrb	r1, [r3, #0]
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80087ae:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80087b2:	6878      	ldr	r0, [r7, #4]
 80087b4:	f002 fbb8 	bl	800af28 <USBD_LL_PrepareReceive>
 80087b8:	e008      	b.n	80087cc <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80087ba:	4b08      	ldr	r3, [pc, #32]	@ (80087dc <USBD_CDC_Init+0x1e8>)
 80087bc:	7819      	ldrb	r1, [r3, #0]
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80087c4:	2340      	movs	r3, #64	@ 0x40
 80087c6:	6878      	ldr	r0, [r7, #4]
 80087c8:	f002 fbae 	bl	800af28 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80087cc:	2300      	movs	r3, #0
}
 80087ce:	4618      	mov	r0, r3
 80087d0:	3710      	adds	r7, #16
 80087d2:	46bd      	mov	sp, r7
 80087d4:	bd80      	pop	{r7, pc}
 80087d6:	bf00      	nop
 80087d8:	200000a3 	.word	0x200000a3
 80087dc:	200000a4 	.word	0x200000a4
 80087e0:	200000a5 	.word	0x200000a5

080087e4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80087e4:	b580      	push	{r7, lr}
 80087e6:	b082      	sub	sp, #8
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	6078      	str	r0, [r7, #4]
 80087ec:	460b      	mov	r3, r1
 80087ee:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80087f0:	4b3a      	ldr	r3, [pc, #232]	@ (80088dc <USBD_CDC_DeInit+0xf8>)
 80087f2:	781b      	ldrb	r3, [r3, #0]
 80087f4:	4619      	mov	r1, r3
 80087f6:	6878      	ldr	r0, [r7, #4]
 80087f8:	f002 facd 	bl	800ad96 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80087fc:	4b37      	ldr	r3, [pc, #220]	@ (80088dc <USBD_CDC_DeInit+0xf8>)
 80087fe:	781b      	ldrb	r3, [r3, #0]
 8008800:	f003 020f 	and.w	r2, r3, #15
 8008804:	6879      	ldr	r1, [r7, #4]
 8008806:	4613      	mov	r3, r2
 8008808:	009b      	lsls	r3, r3, #2
 800880a:	4413      	add	r3, r2
 800880c:	009b      	lsls	r3, r3, #2
 800880e:	440b      	add	r3, r1
 8008810:	3324      	adds	r3, #36	@ 0x24
 8008812:	2200      	movs	r2, #0
 8008814:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8008816:	4b32      	ldr	r3, [pc, #200]	@ (80088e0 <USBD_CDC_DeInit+0xfc>)
 8008818:	781b      	ldrb	r3, [r3, #0]
 800881a:	4619      	mov	r1, r3
 800881c:	6878      	ldr	r0, [r7, #4]
 800881e:	f002 faba 	bl	800ad96 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8008822:	4b2f      	ldr	r3, [pc, #188]	@ (80088e0 <USBD_CDC_DeInit+0xfc>)
 8008824:	781b      	ldrb	r3, [r3, #0]
 8008826:	f003 020f 	and.w	r2, r3, #15
 800882a:	6879      	ldr	r1, [r7, #4]
 800882c:	4613      	mov	r3, r2
 800882e:	009b      	lsls	r3, r3, #2
 8008830:	4413      	add	r3, r2
 8008832:	009b      	lsls	r3, r3, #2
 8008834:	440b      	add	r3, r1
 8008836:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800883a:	2200      	movs	r2, #0
 800883c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800883e:	4b29      	ldr	r3, [pc, #164]	@ (80088e4 <USBD_CDC_DeInit+0x100>)
 8008840:	781b      	ldrb	r3, [r3, #0]
 8008842:	4619      	mov	r1, r3
 8008844:	6878      	ldr	r0, [r7, #4]
 8008846:	f002 faa6 	bl	800ad96 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800884a:	4b26      	ldr	r3, [pc, #152]	@ (80088e4 <USBD_CDC_DeInit+0x100>)
 800884c:	781b      	ldrb	r3, [r3, #0]
 800884e:	f003 020f 	and.w	r2, r3, #15
 8008852:	6879      	ldr	r1, [r7, #4]
 8008854:	4613      	mov	r3, r2
 8008856:	009b      	lsls	r3, r3, #2
 8008858:	4413      	add	r3, r2
 800885a:	009b      	lsls	r3, r3, #2
 800885c:	440b      	add	r3, r1
 800885e:	3324      	adds	r3, #36	@ 0x24
 8008860:	2200      	movs	r2, #0
 8008862:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8008864:	4b1f      	ldr	r3, [pc, #124]	@ (80088e4 <USBD_CDC_DeInit+0x100>)
 8008866:	781b      	ldrb	r3, [r3, #0]
 8008868:	f003 020f 	and.w	r2, r3, #15
 800886c:	6879      	ldr	r1, [r7, #4]
 800886e:	4613      	mov	r3, r2
 8008870:	009b      	lsls	r3, r3, #2
 8008872:	4413      	add	r3, r2
 8008874:	009b      	lsls	r3, r3, #2
 8008876:	440b      	add	r3, r1
 8008878:	3326      	adds	r3, #38	@ 0x26
 800887a:	2200      	movs	r2, #0
 800887c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	32b0      	adds	r2, #176	@ 0xb0
 8008888:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800888c:	2b00      	cmp	r3, #0
 800888e:	d01f      	beq.n	80088d0 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008896:	687a      	ldr	r2, [r7, #4]
 8008898:	33b0      	adds	r3, #176	@ 0xb0
 800889a:	009b      	lsls	r3, r3, #2
 800889c:	4413      	add	r3, r2
 800889e:	685b      	ldr	r3, [r3, #4]
 80088a0:	685b      	ldr	r3, [r3, #4]
 80088a2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	32b0      	adds	r2, #176	@ 0xb0
 80088ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088b2:	4618      	mov	r0, r3
 80088b4:	f002 fb7a 	bl	800afac <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	32b0      	adds	r2, #176	@ 0xb0
 80088c2:	2100      	movs	r1, #0
 80088c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	2200      	movs	r2, #0
 80088cc:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 80088d0:	2300      	movs	r3, #0
}
 80088d2:	4618      	mov	r0, r3
 80088d4:	3708      	adds	r7, #8
 80088d6:	46bd      	mov	sp, r7
 80088d8:	bd80      	pop	{r7, pc}
 80088da:	bf00      	nop
 80088dc:	200000a3 	.word	0x200000a3
 80088e0:	200000a4 	.word	0x200000a4
 80088e4:	200000a5 	.word	0x200000a5

080088e8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80088e8:	b580      	push	{r7, lr}
 80088ea:	b086      	sub	sp, #24
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	6078      	str	r0, [r7, #4]
 80088f0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	32b0      	adds	r2, #176	@ 0xb0
 80088fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008900:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8008902:	2300      	movs	r3, #0
 8008904:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8008906:	2300      	movs	r3, #0
 8008908:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800890a:	2300      	movs	r3, #0
 800890c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800890e:	693b      	ldr	r3, [r7, #16]
 8008910:	2b00      	cmp	r3, #0
 8008912:	d101      	bne.n	8008918 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8008914:	2303      	movs	r3, #3
 8008916:	e0bf      	b.n	8008a98 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008918:	683b      	ldr	r3, [r7, #0]
 800891a:	781b      	ldrb	r3, [r3, #0]
 800891c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008920:	2b00      	cmp	r3, #0
 8008922:	d050      	beq.n	80089c6 <USBD_CDC_Setup+0xde>
 8008924:	2b20      	cmp	r3, #32
 8008926:	f040 80af 	bne.w	8008a88 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800892a:	683b      	ldr	r3, [r7, #0]
 800892c:	88db      	ldrh	r3, [r3, #6]
 800892e:	2b00      	cmp	r3, #0
 8008930:	d03a      	beq.n	80089a8 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8008932:	683b      	ldr	r3, [r7, #0]
 8008934:	781b      	ldrb	r3, [r3, #0]
 8008936:	b25b      	sxtb	r3, r3
 8008938:	2b00      	cmp	r3, #0
 800893a:	da1b      	bge.n	8008974 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008942:	687a      	ldr	r2, [r7, #4]
 8008944:	33b0      	adds	r3, #176	@ 0xb0
 8008946:	009b      	lsls	r3, r3, #2
 8008948:	4413      	add	r3, r2
 800894a:	685b      	ldr	r3, [r3, #4]
 800894c:	689b      	ldr	r3, [r3, #8]
 800894e:	683a      	ldr	r2, [r7, #0]
 8008950:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8008952:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008954:	683a      	ldr	r2, [r7, #0]
 8008956:	88d2      	ldrh	r2, [r2, #6]
 8008958:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800895a:	683b      	ldr	r3, [r7, #0]
 800895c:	88db      	ldrh	r3, [r3, #6]
 800895e:	2b07      	cmp	r3, #7
 8008960:	bf28      	it	cs
 8008962:	2307      	movcs	r3, #7
 8008964:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8008966:	693b      	ldr	r3, [r7, #16]
 8008968:	89fa      	ldrh	r2, [r7, #14]
 800896a:	4619      	mov	r1, r3
 800896c:	6878      	ldr	r0, [r7, #4]
 800896e:	f001 fd93 	bl	800a498 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8008972:	e090      	b.n	8008a96 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8008974:	683b      	ldr	r3, [r7, #0]
 8008976:	785a      	ldrb	r2, [r3, #1]
 8008978:	693b      	ldr	r3, [r7, #16]
 800897a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800897e:	683b      	ldr	r3, [r7, #0]
 8008980:	88db      	ldrh	r3, [r3, #6]
 8008982:	2b3f      	cmp	r3, #63	@ 0x3f
 8008984:	d803      	bhi.n	800898e <USBD_CDC_Setup+0xa6>
 8008986:	683b      	ldr	r3, [r7, #0]
 8008988:	88db      	ldrh	r3, [r3, #6]
 800898a:	b2da      	uxtb	r2, r3
 800898c:	e000      	b.n	8008990 <USBD_CDC_Setup+0xa8>
 800898e:	2240      	movs	r2, #64	@ 0x40
 8008990:	693b      	ldr	r3, [r7, #16]
 8008992:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8008996:	6939      	ldr	r1, [r7, #16]
 8008998:	693b      	ldr	r3, [r7, #16]
 800899a:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800899e:	461a      	mov	r2, r3
 80089a0:	6878      	ldr	r0, [r7, #4]
 80089a2:	f001 fda5 	bl	800a4f0 <USBD_CtlPrepareRx>
      break;
 80089a6:	e076      	b.n	8008a96 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80089ae:	687a      	ldr	r2, [r7, #4]
 80089b0:	33b0      	adds	r3, #176	@ 0xb0
 80089b2:	009b      	lsls	r3, r3, #2
 80089b4:	4413      	add	r3, r2
 80089b6:	685b      	ldr	r3, [r3, #4]
 80089b8:	689b      	ldr	r3, [r3, #8]
 80089ba:	683a      	ldr	r2, [r7, #0]
 80089bc:	7850      	ldrb	r0, [r2, #1]
 80089be:	2200      	movs	r2, #0
 80089c0:	6839      	ldr	r1, [r7, #0]
 80089c2:	4798      	blx	r3
      break;
 80089c4:	e067      	b.n	8008a96 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80089c6:	683b      	ldr	r3, [r7, #0]
 80089c8:	785b      	ldrb	r3, [r3, #1]
 80089ca:	2b0b      	cmp	r3, #11
 80089cc:	d851      	bhi.n	8008a72 <USBD_CDC_Setup+0x18a>
 80089ce:	a201      	add	r2, pc, #4	@ (adr r2, 80089d4 <USBD_CDC_Setup+0xec>)
 80089d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089d4:	08008a05 	.word	0x08008a05
 80089d8:	08008a81 	.word	0x08008a81
 80089dc:	08008a73 	.word	0x08008a73
 80089e0:	08008a73 	.word	0x08008a73
 80089e4:	08008a73 	.word	0x08008a73
 80089e8:	08008a73 	.word	0x08008a73
 80089ec:	08008a73 	.word	0x08008a73
 80089f0:	08008a73 	.word	0x08008a73
 80089f4:	08008a73 	.word	0x08008a73
 80089f8:	08008a73 	.word	0x08008a73
 80089fc:	08008a2f 	.word	0x08008a2f
 8008a00:	08008a59 	.word	0x08008a59
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008a0a:	b2db      	uxtb	r3, r3
 8008a0c:	2b03      	cmp	r3, #3
 8008a0e:	d107      	bne.n	8008a20 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008a10:	f107 030a 	add.w	r3, r7, #10
 8008a14:	2202      	movs	r2, #2
 8008a16:	4619      	mov	r1, r3
 8008a18:	6878      	ldr	r0, [r7, #4]
 8008a1a:	f001 fd3d 	bl	800a498 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008a1e:	e032      	b.n	8008a86 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008a20:	6839      	ldr	r1, [r7, #0]
 8008a22:	6878      	ldr	r0, [r7, #4]
 8008a24:	f001 fcbb 	bl	800a39e <USBD_CtlError>
            ret = USBD_FAIL;
 8008a28:	2303      	movs	r3, #3
 8008a2a:	75fb      	strb	r3, [r7, #23]
          break;
 8008a2c:	e02b      	b.n	8008a86 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008a34:	b2db      	uxtb	r3, r3
 8008a36:	2b03      	cmp	r3, #3
 8008a38:	d107      	bne.n	8008a4a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8008a3a:	f107 030d 	add.w	r3, r7, #13
 8008a3e:	2201      	movs	r2, #1
 8008a40:	4619      	mov	r1, r3
 8008a42:	6878      	ldr	r0, [r7, #4]
 8008a44:	f001 fd28 	bl	800a498 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008a48:	e01d      	b.n	8008a86 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008a4a:	6839      	ldr	r1, [r7, #0]
 8008a4c:	6878      	ldr	r0, [r7, #4]
 8008a4e:	f001 fca6 	bl	800a39e <USBD_CtlError>
            ret = USBD_FAIL;
 8008a52:	2303      	movs	r3, #3
 8008a54:	75fb      	strb	r3, [r7, #23]
          break;
 8008a56:	e016      	b.n	8008a86 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008a5e:	b2db      	uxtb	r3, r3
 8008a60:	2b03      	cmp	r3, #3
 8008a62:	d00f      	beq.n	8008a84 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8008a64:	6839      	ldr	r1, [r7, #0]
 8008a66:	6878      	ldr	r0, [r7, #4]
 8008a68:	f001 fc99 	bl	800a39e <USBD_CtlError>
            ret = USBD_FAIL;
 8008a6c:	2303      	movs	r3, #3
 8008a6e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008a70:	e008      	b.n	8008a84 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8008a72:	6839      	ldr	r1, [r7, #0]
 8008a74:	6878      	ldr	r0, [r7, #4]
 8008a76:	f001 fc92 	bl	800a39e <USBD_CtlError>
          ret = USBD_FAIL;
 8008a7a:	2303      	movs	r3, #3
 8008a7c:	75fb      	strb	r3, [r7, #23]
          break;
 8008a7e:	e002      	b.n	8008a86 <USBD_CDC_Setup+0x19e>
          break;
 8008a80:	bf00      	nop
 8008a82:	e008      	b.n	8008a96 <USBD_CDC_Setup+0x1ae>
          break;
 8008a84:	bf00      	nop
      }
      break;
 8008a86:	e006      	b.n	8008a96 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8008a88:	6839      	ldr	r1, [r7, #0]
 8008a8a:	6878      	ldr	r0, [r7, #4]
 8008a8c:	f001 fc87 	bl	800a39e <USBD_CtlError>
      ret = USBD_FAIL;
 8008a90:	2303      	movs	r3, #3
 8008a92:	75fb      	strb	r3, [r7, #23]
      break;
 8008a94:	bf00      	nop
  }

  return (uint8_t)ret;
 8008a96:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a98:	4618      	mov	r0, r3
 8008a9a:	3718      	adds	r7, #24
 8008a9c:	46bd      	mov	sp, r7
 8008a9e:	bd80      	pop	{r7, pc}

08008aa0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008aa0:	b580      	push	{r7, lr}
 8008aa2:	b084      	sub	sp, #16
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	6078      	str	r0, [r7, #4]
 8008aa8:	460b      	mov	r3, r1
 8008aaa:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008ab2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	32b0      	adds	r2, #176	@ 0xb0
 8008abe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d101      	bne.n	8008aca <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8008ac6:	2303      	movs	r3, #3
 8008ac8:	e065      	b.n	8008b96 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	32b0      	adds	r2, #176	@ 0xb0
 8008ad4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ad8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008ada:	78fb      	ldrb	r3, [r7, #3]
 8008adc:	f003 020f 	and.w	r2, r3, #15
 8008ae0:	6879      	ldr	r1, [r7, #4]
 8008ae2:	4613      	mov	r3, r2
 8008ae4:	009b      	lsls	r3, r3, #2
 8008ae6:	4413      	add	r3, r2
 8008ae8:	009b      	lsls	r3, r3, #2
 8008aea:	440b      	add	r3, r1
 8008aec:	3318      	adds	r3, #24
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d02f      	beq.n	8008b54 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8008af4:	78fb      	ldrb	r3, [r7, #3]
 8008af6:	f003 020f 	and.w	r2, r3, #15
 8008afa:	6879      	ldr	r1, [r7, #4]
 8008afc:	4613      	mov	r3, r2
 8008afe:	009b      	lsls	r3, r3, #2
 8008b00:	4413      	add	r3, r2
 8008b02:	009b      	lsls	r3, r3, #2
 8008b04:	440b      	add	r3, r1
 8008b06:	3318      	adds	r3, #24
 8008b08:	681a      	ldr	r2, [r3, #0]
 8008b0a:	78fb      	ldrb	r3, [r7, #3]
 8008b0c:	f003 010f 	and.w	r1, r3, #15
 8008b10:	68f8      	ldr	r0, [r7, #12]
 8008b12:	460b      	mov	r3, r1
 8008b14:	00db      	lsls	r3, r3, #3
 8008b16:	440b      	add	r3, r1
 8008b18:	009b      	lsls	r3, r3, #2
 8008b1a:	4403      	add	r3, r0
 8008b1c:	331c      	adds	r3, #28
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	fbb2 f1f3 	udiv	r1, r2, r3
 8008b24:	fb01 f303 	mul.w	r3, r1, r3
 8008b28:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d112      	bne.n	8008b54 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8008b2e:	78fb      	ldrb	r3, [r7, #3]
 8008b30:	f003 020f 	and.w	r2, r3, #15
 8008b34:	6879      	ldr	r1, [r7, #4]
 8008b36:	4613      	mov	r3, r2
 8008b38:	009b      	lsls	r3, r3, #2
 8008b3a:	4413      	add	r3, r2
 8008b3c:	009b      	lsls	r3, r3, #2
 8008b3e:	440b      	add	r3, r1
 8008b40:	3318      	adds	r3, #24
 8008b42:	2200      	movs	r2, #0
 8008b44:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008b46:	78f9      	ldrb	r1, [r7, #3]
 8008b48:	2300      	movs	r3, #0
 8008b4a:	2200      	movs	r2, #0
 8008b4c:	6878      	ldr	r0, [r7, #4]
 8008b4e:	f002 f9ca 	bl	800aee6 <USBD_LL_Transmit>
 8008b52:	e01f      	b.n	8008b94 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8008b54:	68bb      	ldr	r3, [r7, #8]
 8008b56:	2200      	movs	r2, #0
 8008b58:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008b62:	687a      	ldr	r2, [r7, #4]
 8008b64:	33b0      	adds	r3, #176	@ 0xb0
 8008b66:	009b      	lsls	r3, r3, #2
 8008b68:	4413      	add	r3, r2
 8008b6a:	685b      	ldr	r3, [r3, #4]
 8008b6c:	691b      	ldr	r3, [r3, #16]
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d010      	beq.n	8008b94 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008b78:	687a      	ldr	r2, [r7, #4]
 8008b7a:	33b0      	adds	r3, #176	@ 0xb0
 8008b7c:	009b      	lsls	r3, r3, #2
 8008b7e:	4413      	add	r3, r2
 8008b80:	685b      	ldr	r3, [r3, #4]
 8008b82:	691b      	ldr	r3, [r3, #16]
 8008b84:	68ba      	ldr	r2, [r7, #8]
 8008b86:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8008b8a:	68ba      	ldr	r2, [r7, #8]
 8008b8c:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8008b90:	78fa      	ldrb	r2, [r7, #3]
 8008b92:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8008b94:	2300      	movs	r3, #0
}
 8008b96:	4618      	mov	r0, r3
 8008b98:	3710      	adds	r7, #16
 8008b9a:	46bd      	mov	sp, r7
 8008b9c:	bd80      	pop	{r7, pc}

08008b9e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008b9e:	b580      	push	{r7, lr}
 8008ba0:	b084      	sub	sp, #16
 8008ba2:	af00      	add	r7, sp, #0
 8008ba4:	6078      	str	r0, [r7, #4]
 8008ba6:	460b      	mov	r3, r1
 8008ba8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	32b0      	adds	r2, #176	@ 0xb0
 8008bb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bb8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	32b0      	adds	r2, #176	@ 0xb0
 8008bc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d101      	bne.n	8008bd0 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8008bcc:	2303      	movs	r3, #3
 8008bce:	e01a      	b.n	8008c06 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008bd0:	78fb      	ldrb	r3, [r7, #3]
 8008bd2:	4619      	mov	r1, r3
 8008bd4:	6878      	ldr	r0, [r7, #4]
 8008bd6:	f002 f9c8 	bl	800af6a <USBD_LL_GetRxDataSize>
 8008bda:	4602      	mov	r2, r0
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008be8:	687a      	ldr	r2, [r7, #4]
 8008bea:	33b0      	adds	r3, #176	@ 0xb0
 8008bec:	009b      	lsls	r3, r3, #2
 8008bee:	4413      	add	r3, r2
 8008bf0:	685b      	ldr	r3, [r3, #4]
 8008bf2:	68db      	ldr	r3, [r3, #12]
 8008bf4:	68fa      	ldr	r2, [r7, #12]
 8008bf6:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8008bfa:	68fa      	ldr	r2, [r7, #12]
 8008bfc:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8008c00:	4611      	mov	r1, r2
 8008c02:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008c04:	2300      	movs	r3, #0
}
 8008c06:	4618      	mov	r0, r3
 8008c08:	3710      	adds	r7, #16
 8008c0a:	46bd      	mov	sp, r7
 8008c0c:	bd80      	pop	{r7, pc}

08008c0e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008c0e:	b580      	push	{r7, lr}
 8008c10:	b084      	sub	sp, #16
 8008c12:	af00      	add	r7, sp, #0
 8008c14:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	32b0      	adds	r2, #176	@ 0xb0
 8008c20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c24:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d101      	bne.n	8008c30 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008c2c:	2303      	movs	r3, #3
 8008c2e:	e024      	b.n	8008c7a <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008c36:	687a      	ldr	r2, [r7, #4]
 8008c38:	33b0      	adds	r3, #176	@ 0xb0
 8008c3a:	009b      	lsls	r3, r3, #2
 8008c3c:	4413      	add	r3, r2
 8008c3e:	685b      	ldr	r3, [r3, #4]
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d019      	beq.n	8008c78 <USBD_CDC_EP0_RxReady+0x6a>
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8008c4a:	2bff      	cmp	r3, #255	@ 0xff
 8008c4c:	d014      	beq.n	8008c78 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008c54:	687a      	ldr	r2, [r7, #4]
 8008c56:	33b0      	adds	r3, #176	@ 0xb0
 8008c58:	009b      	lsls	r3, r3, #2
 8008c5a:	4413      	add	r3, r2
 8008c5c:	685b      	ldr	r3, [r3, #4]
 8008c5e:	689b      	ldr	r3, [r3, #8]
 8008c60:	68fa      	ldr	r2, [r7, #12]
 8008c62:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8008c66:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8008c68:	68fa      	ldr	r2, [r7, #12]
 8008c6a:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008c6e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	22ff      	movs	r2, #255	@ 0xff
 8008c74:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8008c78:	2300      	movs	r3, #0
}
 8008c7a:	4618      	mov	r0, r3
 8008c7c:	3710      	adds	r7, #16
 8008c7e:	46bd      	mov	sp, r7
 8008c80:	bd80      	pop	{r7, pc}
	...

08008c84 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008c84:	b580      	push	{r7, lr}
 8008c86:	b086      	sub	sp, #24
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008c8c:	2182      	movs	r1, #130	@ 0x82
 8008c8e:	4818      	ldr	r0, [pc, #96]	@ (8008cf0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008c90:	f000 fd4f 	bl	8009732 <USBD_GetEpDesc>
 8008c94:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008c96:	2101      	movs	r1, #1
 8008c98:	4815      	ldr	r0, [pc, #84]	@ (8008cf0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008c9a:	f000 fd4a 	bl	8009732 <USBD_GetEpDesc>
 8008c9e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008ca0:	2181      	movs	r1, #129	@ 0x81
 8008ca2:	4813      	ldr	r0, [pc, #76]	@ (8008cf0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008ca4:	f000 fd45 	bl	8009732 <USBD_GetEpDesc>
 8008ca8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008caa:	697b      	ldr	r3, [r7, #20]
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d002      	beq.n	8008cb6 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008cb0:	697b      	ldr	r3, [r7, #20]
 8008cb2:	2210      	movs	r2, #16
 8008cb4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008cb6:	693b      	ldr	r3, [r7, #16]
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d006      	beq.n	8008cca <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008cbc:	693b      	ldr	r3, [r7, #16]
 8008cbe:	2200      	movs	r2, #0
 8008cc0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008cc4:	711a      	strb	r2, [r3, #4]
 8008cc6:	2200      	movs	r2, #0
 8008cc8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d006      	beq.n	8008cde <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	2200      	movs	r2, #0
 8008cd4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008cd8:	711a      	strb	r2, [r3, #4]
 8008cda:	2200      	movs	r2, #0
 8008cdc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	2243      	movs	r2, #67	@ 0x43
 8008ce2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008ce4:	4b02      	ldr	r3, [pc, #8]	@ (8008cf0 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8008ce6:	4618      	mov	r0, r3
 8008ce8:	3718      	adds	r7, #24
 8008cea:	46bd      	mov	sp, r7
 8008cec:	bd80      	pop	{r7, pc}
 8008cee:	bf00      	nop
 8008cf0:	20000060 	.word	0x20000060

08008cf4 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008cf4:	b580      	push	{r7, lr}
 8008cf6:	b086      	sub	sp, #24
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008cfc:	2182      	movs	r1, #130	@ 0x82
 8008cfe:	4818      	ldr	r0, [pc, #96]	@ (8008d60 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008d00:	f000 fd17 	bl	8009732 <USBD_GetEpDesc>
 8008d04:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008d06:	2101      	movs	r1, #1
 8008d08:	4815      	ldr	r0, [pc, #84]	@ (8008d60 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008d0a:	f000 fd12 	bl	8009732 <USBD_GetEpDesc>
 8008d0e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008d10:	2181      	movs	r1, #129	@ 0x81
 8008d12:	4813      	ldr	r0, [pc, #76]	@ (8008d60 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008d14:	f000 fd0d 	bl	8009732 <USBD_GetEpDesc>
 8008d18:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008d1a:	697b      	ldr	r3, [r7, #20]
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d002      	beq.n	8008d26 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8008d20:	697b      	ldr	r3, [r7, #20]
 8008d22:	2210      	movs	r2, #16
 8008d24:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008d26:	693b      	ldr	r3, [r7, #16]
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d006      	beq.n	8008d3a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008d2c:	693b      	ldr	r3, [r7, #16]
 8008d2e:	2200      	movs	r2, #0
 8008d30:	711a      	strb	r2, [r3, #4]
 8008d32:	2200      	movs	r2, #0
 8008d34:	f042 0202 	orr.w	r2, r2, #2
 8008d38:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d006      	beq.n	8008d4e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	2200      	movs	r2, #0
 8008d44:	711a      	strb	r2, [r3, #4]
 8008d46:	2200      	movs	r2, #0
 8008d48:	f042 0202 	orr.w	r2, r2, #2
 8008d4c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	2243      	movs	r2, #67	@ 0x43
 8008d52:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008d54:	4b02      	ldr	r3, [pc, #8]	@ (8008d60 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8008d56:	4618      	mov	r0, r3
 8008d58:	3718      	adds	r7, #24
 8008d5a:	46bd      	mov	sp, r7
 8008d5c:	bd80      	pop	{r7, pc}
 8008d5e:	bf00      	nop
 8008d60:	20000060 	.word	0x20000060

08008d64 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008d64:	b580      	push	{r7, lr}
 8008d66:	b086      	sub	sp, #24
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008d6c:	2182      	movs	r1, #130	@ 0x82
 8008d6e:	4818      	ldr	r0, [pc, #96]	@ (8008dd0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008d70:	f000 fcdf 	bl	8009732 <USBD_GetEpDesc>
 8008d74:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008d76:	2101      	movs	r1, #1
 8008d78:	4815      	ldr	r0, [pc, #84]	@ (8008dd0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008d7a:	f000 fcda 	bl	8009732 <USBD_GetEpDesc>
 8008d7e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008d80:	2181      	movs	r1, #129	@ 0x81
 8008d82:	4813      	ldr	r0, [pc, #76]	@ (8008dd0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008d84:	f000 fcd5 	bl	8009732 <USBD_GetEpDesc>
 8008d88:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008d8a:	697b      	ldr	r3, [r7, #20]
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d002      	beq.n	8008d96 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008d90:	697b      	ldr	r3, [r7, #20]
 8008d92:	2210      	movs	r2, #16
 8008d94:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008d96:	693b      	ldr	r3, [r7, #16]
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d006      	beq.n	8008daa <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008d9c:	693b      	ldr	r3, [r7, #16]
 8008d9e:	2200      	movs	r2, #0
 8008da0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008da4:	711a      	strb	r2, [r3, #4]
 8008da6:	2200      	movs	r2, #0
 8008da8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d006      	beq.n	8008dbe <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	2200      	movs	r2, #0
 8008db4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008db8:	711a      	strb	r2, [r3, #4]
 8008dba:	2200      	movs	r2, #0
 8008dbc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	2243      	movs	r2, #67	@ 0x43
 8008dc2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008dc4:	4b02      	ldr	r3, [pc, #8]	@ (8008dd0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	3718      	adds	r7, #24
 8008dca:	46bd      	mov	sp, r7
 8008dcc:	bd80      	pop	{r7, pc}
 8008dce:	bf00      	nop
 8008dd0:	20000060 	.word	0x20000060

08008dd4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008dd4:	b480      	push	{r7}
 8008dd6:	b083      	sub	sp, #12
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	220a      	movs	r2, #10
 8008de0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8008de2:	4b03      	ldr	r3, [pc, #12]	@ (8008df0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008de4:	4618      	mov	r0, r3
 8008de6:	370c      	adds	r7, #12
 8008de8:	46bd      	mov	sp, r7
 8008dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dee:	4770      	bx	lr
 8008df0:	2000001c 	.word	0x2000001c

08008df4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008df4:	b480      	push	{r7}
 8008df6:	b083      	sub	sp, #12
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	6078      	str	r0, [r7, #4]
 8008dfc:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008dfe:	683b      	ldr	r3, [r7, #0]
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d101      	bne.n	8008e08 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008e04:	2303      	movs	r3, #3
 8008e06:	e009      	b.n	8008e1c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008e0e:	687a      	ldr	r2, [r7, #4]
 8008e10:	33b0      	adds	r3, #176	@ 0xb0
 8008e12:	009b      	lsls	r3, r3, #2
 8008e14:	4413      	add	r3, r2
 8008e16:	683a      	ldr	r2, [r7, #0]
 8008e18:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8008e1a:	2300      	movs	r3, #0
}
 8008e1c:	4618      	mov	r0, r3
 8008e1e:	370c      	adds	r7, #12
 8008e20:	46bd      	mov	sp, r7
 8008e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e26:	4770      	bx	lr

08008e28 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8008e28:	b480      	push	{r7}
 8008e2a:	b087      	sub	sp, #28
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	60f8      	str	r0, [r7, #12]
 8008e30:	60b9      	str	r1, [r7, #8]
 8008e32:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	32b0      	adds	r2, #176	@ 0xb0
 8008e3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e42:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8008e44:	697b      	ldr	r3, [r7, #20]
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d101      	bne.n	8008e4e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8008e4a:	2303      	movs	r3, #3
 8008e4c:	e008      	b.n	8008e60 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8008e4e:	697b      	ldr	r3, [r7, #20]
 8008e50:	68ba      	ldr	r2, [r7, #8]
 8008e52:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8008e56:	697b      	ldr	r3, [r7, #20]
 8008e58:	687a      	ldr	r2, [r7, #4]
 8008e5a:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8008e5e:	2300      	movs	r3, #0
}
 8008e60:	4618      	mov	r0, r3
 8008e62:	371c      	adds	r7, #28
 8008e64:	46bd      	mov	sp, r7
 8008e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e6a:	4770      	bx	lr

08008e6c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008e6c:	b480      	push	{r7}
 8008e6e:	b085      	sub	sp, #20
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	6078      	str	r0, [r7, #4]
 8008e74:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	32b0      	adds	r2, #176	@ 0xb0
 8008e80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e84:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d101      	bne.n	8008e90 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8008e8c:	2303      	movs	r3, #3
 8008e8e:	e004      	b.n	8008e9a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	683a      	ldr	r2, [r7, #0]
 8008e94:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8008e98:	2300      	movs	r3, #0
}
 8008e9a:	4618      	mov	r0, r3
 8008e9c:	3714      	adds	r7, #20
 8008e9e:	46bd      	mov	sp, r7
 8008ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea4:	4770      	bx	lr
	...

08008ea8 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008ea8:	b580      	push	{r7, lr}
 8008eaa:	b084      	sub	sp, #16
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	32b0      	adds	r2, #176	@ 0xb0
 8008eba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ebe:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8008ec0:	2301      	movs	r3, #1
 8008ec2:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8008ec4:	68bb      	ldr	r3, [r7, #8]
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d101      	bne.n	8008ece <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8008eca:	2303      	movs	r3, #3
 8008ecc:	e025      	b.n	8008f1a <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8008ece:	68bb      	ldr	r3, [r7, #8]
 8008ed0:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d11f      	bne.n	8008f18 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8008ed8:	68bb      	ldr	r3, [r7, #8]
 8008eda:	2201      	movs	r2, #1
 8008edc:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8008ee0:	4b10      	ldr	r3, [pc, #64]	@ (8008f24 <USBD_CDC_TransmitPacket+0x7c>)
 8008ee2:	781b      	ldrb	r3, [r3, #0]
 8008ee4:	f003 020f 	and.w	r2, r3, #15
 8008ee8:	68bb      	ldr	r3, [r7, #8]
 8008eea:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8008eee:	6878      	ldr	r0, [r7, #4]
 8008ef0:	4613      	mov	r3, r2
 8008ef2:	009b      	lsls	r3, r3, #2
 8008ef4:	4413      	add	r3, r2
 8008ef6:	009b      	lsls	r3, r3, #2
 8008ef8:	4403      	add	r3, r0
 8008efa:	3318      	adds	r3, #24
 8008efc:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8008efe:	4b09      	ldr	r3, [pc, #36]	@ (8008f24 <USBD_CDC_TransmitPacket+0x7c>)
 8008f00:	7819      	ldrb	r1, [r3, #0]
 8008f02:	68bb      	ldr	r3, [r7, #8]
 8008f04:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8008f08:	68bb      	ldr	r3, [r7, #8]
 8008f0a:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8008f0e:	6878      	ldr	r0, [r7, #4]
 8008f10:	f001 ffe9 	bl	800aee6 <USBD_LL_Transmit>

    ret = USBD_OK;
 8008f14:	2300      	movs	r3, #0
 8008f16:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8008f18:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f1a:	4618      	mov	r0, r3
 8008f1c:	3710      	adds	r7, #16
 8008f1e:	46bd      	mov	sp, r7
 8008f20:	bd80      	pop	{r7, pc}
 8008f22:	bf00      	nop
 8008f24:	200000a3 	.word	0x200000a3

08008f28 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008f28:	b580      	push	{r7, lr}
 8008f2a:	b084      	sub	sp, #16
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	32b0      	adds	r2, #176	@ 0xb0
 8008f3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f3e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	32b0      	adds	r2, #176	@ 0xb0
 8008f4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d101      	bne.n	8008f56 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8008f52:	2303      	movs	r3, #3
 8008f54:	e018      	b.n	8008f88 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	7c1b      	ldrb	r3, [r3, #16]
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d10a      	bne.n	8008f74 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008f5e:	4b0c      	ldr	r3, [pc, #48]	@ (8008f90 <USBD_CDC_ReceivePacket+0x68>)
 8008f60:	7819      	ldrb	r1, [r3, #0]
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008f68:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008f6c:	6878      	ldr	r0, [r7, #4]
 8008f6e:	f001 ffdb 	bl	800af28 <USBD_LL_PrepareReceive>
 8008f72:	e008      	b.n	8008f86 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008f74:	4b06      	ldr	r3, [pc, #24]	@ (8008f90 <USBD_CDC_ReceivePacket+0x68>)
 8008f76:	7819      	ldrb	r1, [r3, #0]
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008f7e:	2340      	movs	r3, #64	@ 0x40
 8008f80:	6878      	ldr	r0, [r7, #4]
 8008f82:	f001 ffd1 	bl	800af28 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008f86:	2300      	movs	r3, #0
}
 8008f88:	4618      	mov	r0, r3
 8008f8a:	3710      	adds	r7, #16
 8008f8c:	46bd      	mov	sp, r7
 8008f8e:	bd80      	pop	{r7, pc}
 8008f90:	200000a4 	.word	0x200000a4

08008f94 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008f94:	b580      	push	{r7, lr}
 8008f96:	b086      	sub	sp, #24
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	60f8      	str	r0, [r7, #12]
 8008f9c:	60b9      	str	r1, [r7, #8]
 8008f9e:	4613      	mov	r3, r2
 8008fa0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d101      	bne.n	8008fac <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008fa8:	2303      	movs	r3, #3
 8008faa:	e01f      	b.n	8008fec <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	2200      	movs	r2, #0
 8008fb0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	2200      	movs	r2, #0
 8008fb8:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	2200      	movs	r2, #0
 8008fc0:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008fc4:	68bb      	ldr	r3, [r7, #8]
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d003      	beq.n	8008fd2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	68ba      	ldr	r2, [r7, #8]
 8008fce:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	2201      	movs	r2, #1
 8008fd6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	79fa      	ldrb	r2, [r7, #7]
 8008fde:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008fe0:	68f8      	ldr	r0, [r7, #12]
 8008fe2:	f001 fe4b 	bl	800ac7c <USBD_LL_Init>
 8008fe6:	4603      	mov	r3, r0
 8008fe8:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008fea:	7dfb      	ldrb	r3, [r7, #23]
}
 8008fec:	4618      	mov	r0, r3
 8008fee:	3718      	adds	r7, #24
 8008ff0:	46bd      	mov	sp, r7
 8008ff2:	bd80      	pop	{r7, pc}

08008ff4 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008ff4:	b580      	push	{r7, lr}
 8008ff6:	b084      	sub	sp, #16
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	6078      	str	r0, [r7, #4]
 8008ffc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008ffe:	2300      	movs	r3, #0
 8009000:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8009002:	683b      	ldr	r3, [r7, #0]
 8009004:	2b00      	cmp	r3, #0
 8009006:	d101      	bne.n	800900c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009008:	2303      	movs	r3, #3
 800900a:	e025      	b.n	8009058 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	683a      	ldr	r2, [r7, #0]
 8009010:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	32ae      	adds	r2, #174	@ 0xae
 800901e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009022:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009024:	2b00      	cmp	r3, #0
 8009026:	d00f      	beq.n	8009048 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	32ae      	adds	r2, #174	@ 0xae
 8009032:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009036:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009038:	f107 020e 	add.w	r2, r7, #14
 800903c:	4610      	mov	r0, r2
 800903e:	4798      	blx	r3
 8009040:	4602      	mov	r2, r0
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800904e:	1c5a      	adds	r2, r3, #1
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8009056:	2300      	movs	r3, #0
}
 8009058:	4618      	mov	r0, r3
 800905a:	3710      	adds	r7, #16
 800905c:	46bd      	mov	sp, r7
 800905e:	bd80      	pop	{r7, pc}

08009060 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009060:	b580      	push	{r7, lr}
 8009062:	b082      	sub	sp, #8
 8009064:	af00      	add	r7, sp, #0
 8009066:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8009068:	6878      	ldr	r0, [r7, #4]
 800906a:	f001 fe53 	bl	800ad14 <USBD_LL_Start>
 800906e:	4603      	mov	r3, r0
}
 8009070:	4618      	mov	r0, r3
 8009072:	3708      	adds	r7, #8
 8009074:	46bd      	mov	sp, r7
 8009076:	bd80      	pop	{r7, pc}

08009078 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8009078:	b480      	push	{r7}
 800907a:	b083      	sub	sp, #12
 800907c:	af00      	add	r7, sp, #0
 800907e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009080:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8009082:	4618      	mov	r0, r3
 8009084:	370c      	adds	r7, #12
 8009086:	46bd      	mov	sp, r7
 8009088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800908c:	4770      	bx	lr

0800908e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800908e:	b580      	push	{r7, lr}
 8009090:	b084      	sub	sp, #16
 8009092:	af00      	add	r7, sp, #0
 8009094:	6078      	str	r0, [r7, #4]
 8009096:	460b      	mov	r3, r1
 8009098:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800909a:	2300      	movs	r3, #0
 800909c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d009      	beq.n	80090bc <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	78fa      	ldrb	r2, [r7, #3]
 80090b2:	4611      	mov	r1, r2
 80090b4:	6878      	ldr	r0, [r7, #4]
 80090b6:	4798      	blx	r3
 80090b8:	4603      	mov	r3, r0
 80090ba:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80090bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80090be:	4618      	mov	r0, r3
 80090c0:	3710      	adds	r7, #16
 80090c2:	46bd      	mov	sp, r7
 80090c4:	bd80      	pop	{r7, pc}

080090c6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80090c6:	b580      	push	{r7, lr}
 80090c8:	b084      	sub	sp, #16
 80090ca:	af00      	add	r7, sp, #0
 80090cc:	6078      	str	r0, [r7, #4]
 80090ce:	460b      	mov	r3, r1
 80090d0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80090d2:	2300      	movs	r3, #0
 80090d4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80090dc:	685b      	ldr	r3, [r3, #4]
 80090de:	78fa      	ldrb	r2, [r7, #3]
 80090e0:	4611      	mov	r1, r2
 80090e2:	6878      	ldr	r0, [r7, #4]
 80090e4:	4798      	blx	r3
 80090e6:	4603      	mov	r3, r0
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d001      	beq.n	80090f0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80090ec:	2303      	movs	r3, #3
 80090ee:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80090f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80090f2:	4618      	mov	r0, r3
 80090f4:	3710      	adds	r7, #16
 80090f6:	46bd      	mov	sp, r7
 80090f8:	bd80      	pop	{r7, pc}

080090fa <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80090fa:	b580      	push	{r7, lr}
 80090fc:	b084      	sub	sp, #16
 80090fe:	af00      	add	r7, sp, #0
 8009100:	6078      	str	r0, [r7, #4]
 8009102:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800910a:	6839      	ldr	r1, [r7, #0]
 800910c:	4618      	mov	r0, r3
 800910e:	f001 f90c 	bl	800a32a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	2201      	movs	r2, #1
 8009116:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8009120:	461a      	mov	r2, r3
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800912e:	f003 031f 	and.w	r3, r3, #31
 8009132:	2b02      	cmp	r3, #2
 8009134:	d01a      	beq.n	800916c <USBD_LL_SetupStage+0x72>
 8009136:	2b02      	cmp	r3, #2
 8009138:	d822      	bhi.n	8009180 <USBD_LL_SetupStage+0x86>
 800913a:	2b00      	cmp	r3, #0
 800913c:	d002      	beq.n	8009144 <USBD_LL_SetupStage+0x4a>
 800913e:	2b01      	cmp	r3, #1
 8009140:	d00a      	beq.n	8009158 <USBD_LL_SetupStage+0x5e>
 8009142:	e01d      	b.n	8009180 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800914a:	4619      	mov	r1, r3
 800914c:	6878      	ldr	r0, [r7, #4]
 800914e:	f000 fb63 	bl	8009818 <USBD_StdDevReq>
 8009152:	4603      	mov	r3, r0
 8009154:	73fb      	strb	r3, [r7, #15]
      break;
 8009156:	e020      	b.n	800919a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800915e:	4619      	mov	r1, r3
 8009160:	6878      	ldr	r0, [r7, #4]
 8009162:	f000 fbcb 	bl	80098fc <USBD_StdItfReq>
 8009166:	4603      	mov	r3, r0
 8009168:	73fb      	strb	r3, [r7, #15]
      break;
 800916a:	e016      	b.n	800919a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009172:	4619      	mov	r1, r3
 8009174:	6878      	ldr	r0, [r7, #4]
 8009176:	f000 fc2d 	bl	80099d4 <USBD_StdEPReq>
 800917a:	4603      	mov	r3, r0
 800917c:	73fb      	strb	r3, [r7, #15]
      break;
 800917e:	e00c      	b.n	800919a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8009186:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800918a:	b2db      	uxtb	r3, r3
 800918c:	4619      	mov	r1, r3
 800918e:	6878      	ldr	r0, [r7, #4]
 8009190:	f001 fe20 	bl	800add4 <USBD_LL_StallEP>
 8009194:	4603      	mov	r3, r0
 8009196:	73fb      	strb	r3, [r7, #15]
      break;
 8009198:	bf00      	nop
  }

  return ret;
 800919a:	7bfb      	ldrb	r3, [r7, #15]
}
 800919c:	4618      	mov	r0, r3
 800919e:	3710      	adds	r7, #16
 80091a0:	46bd      	mov	sp, r7
 80091a2:	bd80      	pop	{r7, pc}

080091a4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80091a4:	b580      	push	{r7, lr}
 80091a6:	b086      	sub	sp, #24
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	60f8      	str	r0, [r7, #12]
 80091ac:	460b      	mov	r3, r1
 80091ae:	607a      	str	r2, [r7, #4]
 80091b0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80091b2:	2300      	movs	r3, #0
 80091b4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80091b6:	7afb      	ldrb	r3, [r7, #11]
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d16e      	bne.n	800929a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80091c2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80091ca:	2b03      	cmp	r3, #3
 80091cc:	f040 8098 	bne.w	8009300 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80091d0:	693b      	ldr	r3, [r7, #16]
 80091d2:	689a      	ldr	r2, [r3, #8]
 80091d4:	693b      	ldr	r3, [r7, #16]
 80091d6:	68db      	ldr	r3, [r3, #12]
 80091d8:	429a      	cmp	r2, r3
 80091da:	d913      	bls.n	8009204 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80091dc:	693b      	ldr	r3, [r7, #16]
 80091de:	689a      	ldr	r2, [r3, #8]
 80091e0:	693b      	ldr	r3, [r7, #16]
 80091e2:	68db      	ldr	r3, [r3, #12]
 80091e4:	1ad2      	subs	r2, r2, r3
 80091e6:	693b      	ldr	r3, [r7, #16]
 80091e8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80091ea:	693b      	ldr	r3, [r7, #16]
 80091ec:	68da      	ldr	r2, [r3, #12]
 80091ee:	693b      	ldr	r3, [r7, #16]
 80091f0:	689b      	ldr	r3, [r3, #8]
 80091f2:	4293      	cmp	r3, r2
 80091f4:	bf28      	it	cs
 80091f6:	4613      	movcs	r3, r2
 80091f8:	461a      	mov	r2, r3
 80091fa:	6879      	ldr	r1, [r7, #4]
 80091fc:	68f8      	ldr	r0, [r7, #12]
 80091fe:	f001 f994 	bl	800a52a <USBD_CtlContinueRx>
 8009202:	e07d      	b.n	8009300 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800920a:	f003 031f 	and.w	r3, r3, #31
 800920e:	2b02      	cmp	r3, #2
 8009210:	d014      	beq.n	800923c <USBD_LL_DataOutStage+0x98>
 8009212:	2b02      	cmp	r3, #2
 8009214:	d81d      	bhi.n	8009252 <USBD_LL_DataOutStage+0xae>
 8009216:	2b00      	cmp	r3, #0
 8009218:	d002      	beq.n	8009220 <USBD_LL_DataOutStage+0x7c>
 800921a:	2b01      	cmp	r3, #1
 800921c:	d003      	beq.n	8009226 <USBD_LL_DataOutStage+0x82>
 800921e:	e018      	b.n	8009252 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8009220:	2300      	movs	r3, #0
 8009222:	75bb      	strb	r3, [r7, #22]
            break;
 8009224:	e018      	b.n	8009258 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800922c:	b2db      	uxtb	r3, r3
 800922e:	4619      	mov	r1, r3
 8009230:	68f8      	ldr	r0, [r7, #12]
 8009232:	f000 fa64 	bl	80096fe <USBD_CoreFindIF>
 8009236:	4603      	mov	r3, r0
 8009238:	75bb      	strb	r3, [r7, #22]
            break;
 800923a:	e00d      	b.n	8009258 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8009242:	b2db      	uxtb	r3, r3
 8009244:	4619      	mov	r1, r3
 8009246:	68f8      	ldr	r0, [r7, #12]
 8009248:	f000 fa66 	bl	8009718 <USBD_CoreFindEP>
 800924c:	4603      	mov	r3, r0
 800924e:	75bb      	strb	r3, [r7, #22]
            break;
 8009250:	e002      	b.n	8009258 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8009252:	2300      	movs	r3, #0
 8009254:	75bb      	strb	r3, [r7, #22]
            break;
 8009256:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8009258:	7dbb      	ldrb	r3, [r7, #22]
 800925a:	2b00      	cmp	r3, #0
 800925c:	d119      	bne.n	8009292 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009264:	b2db      	uxtb	r3, r3
 8009266:	2b03      	cmp	r3, #3
 8009268:	d113      	bne.n	8009292 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800926a:	7dba      	ldrb	r2, [r7, #22]
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	32ae      	adds	r2, #174	@ 0xae
 8009270:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009274:	691b      	ldr	r3, [r3, #16]
 8009276:	2b00      	cmp	r3, #0
 8009278:	d00b      	beq.n	8009292 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800927a:	7dba      	ldrb	r2, [r7, #22]
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8009282:	7dba      	ldrb	r2, [r7, #22]
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	32ae      	adds	r2, #174	@ 0xae
 8009288:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800928c:	691b      	ldr	r3, [r3, #16]
 800928e:	68f8      	ldr	r0, [r7, #12]
 8009290:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8009292:	68f8      	ldr	r0, [r7, #12]
 8009294:	f001 f95a 	bl	800a54c <USBD_CtlSendStatus>
 8009298:	e032      	b.n	8009300 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800929a:	7afb      	ldrb	r3, [r7, #11]
 800929c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80092a0:	b2db      	uxtb	r3, r3
 80092a2:	4619      	mov	r1, r3
 80092a4:	68f8      	ldr	r0, [r7, #12]
 80092a6:	f000 fa37 	bl	8009718 <USBD_CoreFindEP>
 80092aa:	4603      	mov	r3, r0
 80092ac:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80092ae:	7dbb      	ldrb	r3, [r7, #22]
 80092b0:	2bff      	cmp	r3, #255	@ 0xff
 80092b2:	d025      	beq.n	8009300 <USBD_LL_DataOutStage+0x15c>
 80092b4:	7dbb      	ldrb	r3, [r7, #22]
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d122      	bne.n	8009300 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80092c0:	b2db      	uxtb	r3, r3
 80092c2:	2b03      	cmp	r3, #3
 80092c4:	d117      	bne.n	80092f6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80092c6:	7dba      	ldrb	r2, [r7, #22]
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	32ae      	adds	r2, #174	@ 0xae
 80092cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092d0:	699b      	ldr	r3, [r3, #24]
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d00f      	beq.n	80092f6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80092d6:	7dba      	ldrb	r2, [r7, #22]
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80092de:	7dba      	ldrb	r2, [r7, #22]
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	32ae      	adds	r2, #174	@ 0xae
 80092e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092e8:	699b      	ldr	r3, [r3, #24]
 80092ea:	7afa      	ldrb	r2, [r7, #11]
 80092ec:	4611      	mov	r1, r2
 80092ee:	68f8      	ldr	r0, [r7, #12]
 80092f0:	4798      	blx	r3
 80092f2:	4603      	mov	r3, r0
 80092f4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80092f6:	7dfb      	ldrb	r3, [r7, #23]
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d001      	beq.n	8009300 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80092fc:	7dfb      	ldrb	r3, [r7, #23]
 80092fe:	e000      	b.n	8009302 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8009300:	2300      	movs	r3, #0
}
 8009302:	4618      	mov	r0, r3
 8009304:	3718      	adds	r7, #24
 8009306:	46bd      	mov	sp, r7
 8009308:	bd80      	pop	{r7, pc}

0800930a <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800930a:	b580      	push	{r7, lr}
 800930c:	b086      	sub	sp, #24
 800930e:	af00      	add	r7, sp, #0
 8009310:	60f8      	str	r0, [r7, #12]
 8009312:	460b      	mov	r3, r1
 8009314:	607a      	str	r2, [r7, #4]
 8009316:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8009318:	7afb      	ldrb	r3, [r7, #11]
 800931a:	2b00      	cmp	r3, #0
 800931c:	d16f      	bne.n	80093fe <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	3314      	adds	r3, #20
 8009322:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800932a:	2b02      	cmp	r3, #2
 800932c:	d15a      	bne.n	80093e4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800932e:	693b      	ldr	r3, [r7, #16]
 8009330:	689a      	ldr	r2, [r3, #8]
 8009332:	693b      	ldr	r3, [r7, #16]
 8009334:	68db      	ldr	r3, [r3, #12]
 8009336:	429a      	cmp	r2, r3
 8009338:	d914      	bls.n	8009364 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800933a:	693b      	ldr	r3, [r7, #16]
 800933c:	689a      	ldr	r2, [r3, #8]
 800933e:	693b      	ldr	r3, [r7, #16]
 8009340:	68db      	ldr	r3, [r3, #12]
 8009342:	1ad2      	subs	r2, r2, r3
 8009344:	693b      	ldr	r3, [r7, #16]
 8009346:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8009348:	693b      	ldr	r3, [r7, #16]
 800934a:	689b      	ldr	r3, [r3, #8]
 800934c:	461a      	mov	r2, r3
 800934e:	6879      	ldr	r1, [r7, #4]
 8009350:	68f8      	ldr	r0, [r7, #12]
 8009352:	f001 f8bc 	bl	800a4ce <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009356:	2300      	movs	r3, #0
 8009358:	2200      	movs	r2, #0
 800935a:	2100      	movs	r1, #0
 800935c:	68f8      	ldr	r0, [r7, #12]
 800935e:	f001 fde3 	bl	800af28 <USBD_LL_PrepareReceive>
 8009362:	e03f      	b.n	80093e4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8009364:	693b      	ldr	r3, [r7, #16]
 8009366:	68da      	ldr	r2, [r3, #12]
 8009368:	693b      	ldr	r3, [r7, #16]
 800936a:	689b      	ldr	r3, [r3, #8]
 800936c:	429a      	cmp	r2, r3
 800936e:	d11c      	bne.n	80093aa <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8009370:	693b      	ldr	r3, [r7, #16]
 8009372:	685a      	ldr	r2, [r3, #4]
 8009374:	693b      	ldr	r3, [r7, #16]
 8009376:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8009378:	429a      	cmp	r2, r3
 800937a:	d316      	bcc.n	80093aa <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800937c:	693b      	ldr	r3, [r7, #16]
 800937e:	685a      	ldr	r2, [r3, #4]
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009386:	429a      	cmp	r2, r3
 8009388:	d20f      	bcs.n	80093aa <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800938a:	2200      	movs	r2, #0
 800938c:	2100      	movs	r1, #0
 800938e:	68f8      	ldr	r0, [r7, #12]
 8009390:	f001 f89d 	bl	800a4ce <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	2200      	movs	r2, #0
 8009398:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800939c:	2300      	movs	r3, #0
 800939e:	2200      	movs	r2, #0
 80093a0:	2100      	movs	r1, #0
 80093a2:	68f8      	ldr	r0, [r7, #12]
 80093a4:	f001 fdc0 	bl	800af28 <USBD_LL_PrepareReceive>
 80093a8:	e01c      	b.n	80093e4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80093b0:	b2db      	uxtb	r3, r3
 80093b2:	2b03      	cmp	r3, #3
 80093b4:	d10f      	bne.n	80093d6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80093bc:	68db      	ldr	r3, [r3, #12]
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d009      	beq.n	80093d6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	2200      	movs	r2, #0
 80093c6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80093d0:	68db      	ldr	r3, [r3, #12]
 80093d2:	68f8      	ldr	r0, [r7, #12]
 80093d4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80093d6:	2180      	movs	r1, #128	@ 0x80
 80093d8:	68f8      	ldr	r0, [r7, #12]
 80093da:	f001 fcfb 	bl	800add4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80093de:	68f8      	ldr	r0, [r7, #12]
 80093e0:	f001 f8c7 	bl	800a572 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d03a      	beq.n	8009464 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80093ee:	68f8      	ldr	r0, [r7, #12]
 80093f0:	f7ff fe42 	bl	8009078 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	2200      	movs	r2, #0
 80093f8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80093fc:	e032      	b.n	8009464 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80093fe:	7afb      	ldrb	r3, [r7, #11]
 8009400:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8009404:	b2db      	uxtb	r3, r3
 8009406:	4619      	mov	r1, r3
 8009408:	68f8      	ldr	r0, [r7, #12]
 800940a:	f000 f985 	bl	8009718 <USBD_CoreFindEP>
 800940e:	4603      	mov	r3, r0
 8009410:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009412:	7dfb      	ldrb	r3, [r7, #23]
 8009414:	2bff      	cmp	r3, #255	@ 0xff
 8009416:	d025      	beq.n	8009464 <USBD_LL_DataInStage+0x15a>
 8009418:	7dfb      	ldrb	r3, [r7, #23]
 800941a:	2b00      	cmp	r3, #0
 800941c:	d122      	bne.n	8009464 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009424:	b2db      	uxtb	r3, r3
 8009426:	2b03      	cmp	r3, #3
 8009428:	d11c      	bne.n	8009464 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800942a:	7dfa      	ldrb	r2, [r7, #23]
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	32ae      	adds	r2, #174	@ 0xae
 8009430:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009434:	695b      	ldr	r3, [r3, #20]
 8009436:	2b00      	cmp	r3, #0
 8009438:	d014      	beq.n	8009464 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800943a:	7dfa      	ldrb	r2, [r7, #23]
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8009442:	7dfa      	ldrb	r2, [r7, #23]
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	32ae      	adds	r2, #174	@ 0xae
 8009448:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800944c:	695b      	ldr	r3, [r3, #20]
 800944e:	7afa      	ldrb	r2, [r7, #11]
 8009450:	4611      	mov	r1, r2
 8009452:	68f8      	ldr	r0, [r7, #12]
 8009454:	4798      	blx	r3
 8009456:	4603      	mov	r3, r0
 8009458:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800945a:	7dbb      	ldrb	r3, [r7, #22]
 800945c:	2b00      	cmp	r3, #0
 800945e:	d001      	beq.n	8009464 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8009460:	7dbb      	ldrb	r3, [r7, #22]
 8009462:	e000      	b.n	8009466 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8009464:	2300      	movs	r3, #0
}
 8009466:	4618      	mov	r0, r3
 8009468:	3718      	adds	r7, #24
 800946a:	46bd      	mov	sp, r7
 800946c:	bd80      	pop	{r7, pc}

0800946e <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800946e:	b580      	push	{r7, lr}
 8009470:	b084      	sub	sp, #16
 8009472:	af00      	add	r7, sp, #0
 8009474:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8009476:	2300      	movs	r3, #0
 8009478:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	2201      	movs	r2, #1
 800947e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	2200      	movs	r2, #0
 8009486:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	2200      	movs	r2, #0
 800948e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	2200      	movs	r2, #0
 8009494:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	2200      	movs	r2, #0
 800949c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d014      	beq.n	80094d4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80094b0:	685b      	ldr	r3, [r3, #4]
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d00e      	beq.n	80094d4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80094bc:	685b      	ldr	r3, [r3, #4]
 80094be:	687a      	ldr	r2, [r7, #4]
 80094c0:	6852      	ldr	r2, [r2, #4]
 80094c2:	b2d2      	uxtb	r2, r2
 80094c4:	4611      	mov	r1, r2
 80094c6:	6878      	ldr	r0, [r7, #4]
 80094c8:	4798      	blx	r3
 80094ca:	4603      	mov	r3, r0
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d001      	beq.n	80094d4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80094d0:	2303      	movs	r3, #3
 80094d2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80094d4:	2340      	movs	r3, #64	@ 0x40
 80094d6:	2200      	movs	r2, #0
 80094d8:	2100      	movs	r1, #0
 80094da:	6878      	ldr	r0, [r7, #4]
 80094dc:	f001 fc35 	bl	800ad4a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	2201      	movs	r2, #1
 80094e4:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	2240      	movs	r2, #64	@ 0x40
 80094ec:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80094f0:	2340      	movs	r3, #64	@ 0x40
 80094f2:	2200      	movs	r2, #0
 80094f4:	2180      	movs	r1, #128	@ 0x80
 80094f6:	6878      	ldr	r0, [r7, #4]
 80094f8:	f001 fc27 	bl	800ad4a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	2201      	movs	r2, #1
 8009500:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	2240      	movs	r2, #64	@ 0x40
 8009506:	621a      	str	r2, [r3, #32]

  return ret;
 8009508:	7bfb      	ldrb	r3, [r7, #15]
}
 800950a:	4618      	mov	r0, r3
 800950c:	3710      	adds	r7, #16
 800950e:	46bd      	mov	sp, r7
 8009510:	bd80      	pop	{r7, pc}

08009512 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009512:	b480      	push	{r7}
 8009514:	b083      	sub	sp, #12
 8009516:	af00      	add	r7, sp, #0
 8009518:	6078      	str	r0, [r7, #4]
 800951a:	460b      	mov	r3, r1
 800951c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	78fa      	ldrb	r2, [r7, #3]
 8009522:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009524:	2300      	movs	r3, #0
}
 8009526:	4618      	mov	r0, r3
 8009528:	370c      	adds	r7, #12
 800952a:	46bd      	mov	sp, r7
 800952c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009530:	4770      	bx	lr

08009532 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009532:	b480      	push	{r7}
 8009534:	b083      	sub	sp, #12
 8009536:	af00      	add	r7, sp, #0
 8009538:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009540:	b2db      	uxtb	r3, r3
 8009542:	2b04      	cmp	r3, #4
 8009544:	d006      	beq.n	8009554 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800954c:	b2da      	uxtb	r2, r3
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	2204      	movs	r2, #4
 8009558:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800955c:	2300      	movs	r3, #0
}
 800955e:	4618      	mov	r0, r3
 8009560:	370c      	adds	r7, #12
 8009562:	46bd      	mov	sp, r7
 8009564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009568:	4770      	bx	lr

0800956a <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800956a:	b480      	push	{r7}
 800956c:	b083      	sub	sp, #12
 800956e:	af00      	add	r7, sp, #0
 8009570:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009578:	b2db      	uxtb	r3, r3
 800957a:	2b04      	cmp	r3, #4
 800957c:	d106      	bne.n	800958c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8009584:	b2da      	uxtb	r2, r3
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800958c:	2300      	movs	r3, #0
}
 800958e:	4618      	mov	r0, r3
 8009590:	370c      	adds	r7, #12
 8009592:	46bd      	mov	sp, r7
 8009594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009598:	4770      	bx	lr

0800959a <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800959a:	b580      	push	{r7, lr}
 800959c:	b082      	sub	sp, #8
 800959e:	af00      	add	r7, sp, #0
 80095a0:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80095a8:	b2db      	uxtb	r3, r3
 80095aa:	2b03      	cmp	r3, #3
 80095ac:	d110      	bne.n	80095d0 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d00b      	beq.n	80095d0 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80095be:	69db      	ldr	r3, [r3, #28]
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d005      	beq.n	80095d0 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80095ca:	69db      	ldr	r3, [r3, #28]
 80095cc:	6878      	ldr	r0, [r7, #4]
 80095ce:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80095d0:	2300      	movs	r3, #0
}
 80095d2:	4618      	mov	r0, r3
 80095d4:	3708      	adds	r7, #8
 80095d6:	46bd      	mov	sp, r7
 80095d8:	bd80      	pop	{r7, pc}

080095da <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80095da:	b580      	push	{r7, lr}
 80095dc:	b082      	sub	sp, #8
 80095de:	af00      	add	r7, sp, #0
 80095e0:	6078      	str	r0, [r7, #4]
 80095e2:	460b      	mov	r3, r1
 80095e4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	32ae      	adds	r2, #174	@ 0xae
 80095f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d101      	bne.n	80095fc <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80095f8:	2303      	movs	r3, #3
 80095fa:	e01c      	b.n	8009636 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009602:	b2db      	uxtb	r3, r3
 8009604:	2b03      	cmp	r3, #3
 8009606:	d115      	bne.n	8009634 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	32ae      	adds	r2, #174	@ 0xae
 8009612:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009616:	6a1b      	ldr	r3, [r3, #32]
 8009618:	2b00      	cmp	r3, #0
 800961a:	d00b      	beq.n	8009634 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	32ae      	adds	r2, #174	@ 0xae
 8009626:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800962a:	6a1b      	ldr	r3, [r3, #32]
 800962c:	78fa      	ldrb	r2, [r7, #3]
 800962e:	4611      	mov	r1, r2
 8009630:	6878      	ldr	r0, [r7, #4]
 8009632:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009634:	2300      	movs	r3, #0
}
 8009636:	4618      	mov	r0, r3
 8009638:	3708      	adds	r7, #8
 800963a:	46bd      	mov	sp, r7
 800963c:	bd80      	pop	{r7, pc}

0800963e <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800963e:	b580      	push	{r7, lr}
 8009640:	b082      	sub	sp, #8
 8009642:	af00      	add	r7, sp, #0
 8009644:	6078      	str	r0, [r7, #4]
 8009646:	460b      	mov	r3, r1
 8009648:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	32ae      	adds	r2, #174	@ 0xae
 8009654:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009658:	2b00      	cmp	r3, #0
 800965a:	d101      	bne.n	8009660 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800965c:	2303      	movs	r3, #3
 800965e:	e01c      	b.n	800969a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009666:	b2db      	uxtb	r3, r3
 8009668:	2b03      	cmp	r3, #3
 800966a:	d115      	bne.n	8009698 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	32ae      	adds	r2, #174	@ 0xae
 8009676:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800967a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800967c:	2b00      	cmp	r3, #0
 800967e:	d00b      	beq.n	8009698 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	32ae      	adds	r2, #174	@ 0xae
 800968a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800968e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009690:	78fa      	ldrb	r2, [r7, #3]
 8009692:	4611      	mov	r1, r2
 8009694:	6878      	ldr	r0, [r7, #4]
 8009696:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009698:	2300      	movs	r3, #0
}
 800969a:	4618      	mov	r0, r3
 800969c:	3708      	adds	r7, #8
 800969e:	46bd      	mov	sp, r7
 80096a0:	bd80      	pop	{r7, pc}

080096a2 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80096a2:	b480      	push	{r7}
 80096a4:	b083      	sub	sp, #12
 80096a6:	af00      	add	r7, sp, #0
 80096a8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80096aa:	2300      	movs	r3, #0
}
 80096ac:	4618      	mov	r0, r3
 80096ae:	370c      	adds	r7, #12
 80096b0:	46bd      	mov	sp, r7
 80096b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b6:	4770      	bx	lr

080096b8 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80096b8:	b580      	push	{r7, lr}
 80096ba:	b084      	sub	sp, #16
 80096bc:	af00      	add	r7, sp, #0
 80096be:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80096c0:	2300      	movs	r3, #0
 80096c2:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	2201      	movs	r2, #1
 80096c8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d00e      	beq.n	80096f4 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80096dc:	685b      	ldr	r3, [r3, #4]
 80096de:	687a      	ldr	r2, [r7, #4]
 80096e0:	6852      	ldr	r2, [r2, #4]
 80096e2:	b2d2      	uxtb	r2, r2
 80096e4:	4611      	mov	r1, r2
 80096e6:	6878      	ldr	r0, [r7, #4]
 80096e8:	4798      	blx	r3
 80096ea:	4603      	mov	r3, r0
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d001      	beq.n	80096f4 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80096f0:	2303      	movs	r3, #3
 80096f2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80096f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80096f6:	4618      	mov	r0, r3
 80096f8:	3710      	adds	r7, #16
 80096fa:	46bd      	mov	sp, r7
 80096fc:	bd80      	pop	{r7, pc}

080096fe <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80096fe:	b480      	push	{r7}
 8009700:	b083      	sub	sp, #12
 8009702:	af00      	add	r7, sp, #0
 8009704:	6078      	str	r0, [r7, #4]
 8009706:	460b      	mov	r3, r1
 8009708:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800970a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800970c:	4618      	mov	r0, r3
 800970e:	370c      	adds	r7, #12
 8009710:	46bd      	mov	sp, r7
 8009712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009716:	4770      	bx	lr

08009718 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009718:	b480      	push	{r7}
 800971a:	b083      	sub	sp, #12
 800971c:	af00      	add	r7, sp, #0
 800971e:	6078      	str	r0, [r7, #4]
 8009720:	460b      	mov	r3, r1
 8009722:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009724:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009726:	4618      	mov	r0, r3
 8009728:	370c      	adds	r7, #12
 800972a:	46bd      	mov	sp, r7
 800972c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009730:	4770      	bx	lr

08009732 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8009732:	b580      	push	{r7, lr}
 8009734:	b086      	sub	sp, #24
 8009736:	af00      	add	r7, sp, #0
 8009738:	6078      	str	r0, [r7, #4]
 800973a:	460b      	mov	r3, r1
 800973c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8009746:	2300      	movs	r3, #0
 8009748:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	885b      	ldrh	r3, [r3, #2]
 800974e:	b29b      	uxth	r3, r3
 8009750:	68fa      	ldr	r2, [r7, #12]
 8009752:	7812      	ldrb	r2, [r2, #0]
 8009754:	4293      	cmp	r3, r2
 8009756:	d91f      	bls.n	8009798 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	781b      	ldrb	r3, [r3, #0]
 800975c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800975e:	e013      	b.n	8009788 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8009760:	f107 030a 	add.w	r3, r7, #10
 8009764:	4619      	mov	r1, r3
 8009766:	6978      	ldr	r0, [r7, #20]
 8009768:	f000 f81b 	bl	80097a2 <USBD_GetNextDesc>
 800976c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800976e:	697b      	ldr	r3, [r7, #20]
 8009770:	785b      	ldrb	r3, [r3, #1]
 8009772:	2b05      	cmp	r3, #5
 8009774:	d108      	bne.n	8009788 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8009776:	697b      	ldr	r3, [r7, #20]
 8009778:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800977a:	693b      	ldr	r3, [r7, #16]
 800977c:	789b      	ldrb	r3, [r3, #2]
 800977e:	78fa      	ldrb	r2, [r7, #3]
 8009780:	429a      	cmp	r2, r3
 8009782:	d008      	beq.n	8009796 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8009784:	2300      	movs	r3, #0
 8009786:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	885b      	ldrh	r3, [r3, #2]
 800978c:	b29a      	uxth	r2, r3
 800978e:	897b      	ldrh	r3, [r7, #10]
 8009790:	429a      	cmp	r2, r3
 8009792:	d8e5      	bhi.n	8009760 <USBD_GetEpDesc+0x2e>
 8009794:	e000      	b.n	8009798 <USBD_GetEpDesc+0x66>
          break;
 8009796:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8009798:	693b      	ldr	r3, [r7, #16]
}
 800979a:	4618      	mov	r0, r3
 800979c:	3718      	adds	r7, #24
 800979e:	46bd      	mov	sp, r7
 80097a0:	bd80      	pop	{r7, pc}

080097a2 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80097a2:	b480      	push	{r7}
 80097a4:	b085      	sub	sp, #20
 80097a6:	af00      	add	r7, sp, #0
 80097a8:	6078      	str	r0, [r7, #4]
 80097aa:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80097b0:	683b      	ldr	r3, [r7, #0]
 80097b2:	881b      	ldrh	r3, [r3, #0]
 80097b4:	68fa      	ldr	r2, [r7, #12]
 80097b6:	7812      	ldrb	r2, [r2, #0]
 80097b8:	4413      	add	r3, r2
 80097ba:	b29a      	uxth	r2, r3
 80097bc:	683b      	ldr	r3, [r7, #0]
 80097be:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	781b      	ldrb	r3, [r3, #0]
 80097c4:	461a      	mov	r2, r3
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	4413      	add	r3, r2
 80097ca:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80097cc:	68fb      	ldr	r3, [r7, #12]
}
 80097ce:	4618      	mov	r0, r3
 80097d0:	3714      	adds	r7, #20
 80097d2:	46bd      	mov	sp, r7
 80097d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d8:	4770      	bx	lr

080097da <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80097da:	b480      	push	{r7}
 80097dc:	b087      	sub	sp, #28
 80097de:	af00      	add	r7, sp, #0
 80097e0:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80097e6:	697b      	ldr	r3, [r7, #20]
 80097e8:	781b      	ldrb	r3, [r3, #0]
 80097ea:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80097ec:	697b      	ldr	r3, [r7, #20]
 80097ee:	3301      	adds	r3, #1
 80097f0:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80097f2:	697b      	ldr	r3, [r7, #20]
 80097f4:	781b      	ldrb	r3, [r3, #0]
 80097f6:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80097f8:	8a3b      	ldrh	r3, [r7, #16]
 80097fa:	021b      	lsls	r3, r3, #8
 80097fc:	b21a      	sxth	r2, r3
 80097fe:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009802:	4313      	orrs	r3, r2
 8009804:	b21b      	sxth	r3, r3
 8009806:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8009808:	89fb      	ldrh	r3, [r7, #14]
}
 800980a:	4618      	mov	r0, r3
 800980c:	371c      	adds	r7, #28
 800980e:	46bd      	mov	sp, r7
 8009810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009814:	4770      	bx	lr
	...

08009818 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009818:	b580      	push	{r7, lr}
 800981a:	b084      	sub	sp, #16
 800981c:	af00      	add	r7, sp, #0
 800981e:	6078      	str	r0, [r7, #4]
 8009820:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009822:	2300      	movs	r3, #0
 8009824:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009826:	683b      	ldr	r3, [r7, #0]
 8009828:	781b      	ldrb	r3, [r3, #0]
 800982a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800982e:	2b40      	cmp	r3, #64	@ 0x40
 8009830:	d005      	beq.n	800983e <USBD_StdDevReq+0x26>
 8009832:	2b40      	cmp	r3, #64	@ 0x40
 8009834:	d857      	bhi.n	80098e6 <USBD_StdDevReq+0xce>
 8009836:	2b00      	cmp	r3, #0
 8009838:	d00f      	beq.n	800985a <USBD_StdDevReq+0x42>
 800983a:	2b20      	cmp	r3, #32
 800983c:	d153      	bne.n	80098e6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	32ae      	adds	r2, #174	@ 0xae
 8009848:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800984c:	689b      	ldr	r3, [r3, #8]
 800984e:	6839      	ldr	r1, [r7, #0]
 8009850:	6878      	ldr	r0, [r7, #4]
 8009852:	4798      	blx	r3
 8009854:	4603      	mov	r3, r0
 8009856:	73fb      	strb	r3, [r7, #15]
      break;
 8009858:	e04a      	b.n	80098f0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800985a:	683b      	ldr	r3, [r7, #0]
 800985c:	785b      	ldrb	r3, [r3, #1]
 800985e:	2b09      	cmp	r3, #9
 8009860:	d83b      	bhi.n	80098da <USBD_StdDevReq+0xc2>
 8009862:	a201      	add	r2, pc, #4	@ (adr r2, 8009868 <USBD_StdDevReq+0x50>)
 8009864:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009868:	080098bd 	.word	0x080098bd
 800986c:	080098d1 	.word	0x080098d1
 8009870:	080098db 	.word	0x080098db
 8009874:	080098c7 	.word	0x080098c7
 8009878:	080098db 	.word	0x080098db
 800987c:	0800989b 	.word	0x0800989b
 8009880:	08009891 	.word	0x08009891
 8009884:	080098db 	.word	0x080098db
 8009888:	080098b3 	.word	0x080098b3
 800988c:	080098a5 	.word	0x080098a5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009890:	6839      	ldr	r1, [r7, #0]
 8009892:	6878      	ldr	r0, [r7, #4]
 8009894:	f000 fa3c 	bl	8009d10 <USBD_GetDescriptor>
          break;
 8009898:	e024      	b.n	80098e4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800989a:	6839      	ldr	r1, [r7, #0]
 800989c:	6878      	ldr	r0, [r7, #4]
 800989e:	f000 fba1 	bl	8009fe4 <USBD_SetAddress>
          break;
 80098a2:	e01f      	b.n	80098e4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80098a4:	6839      	ldr	r1, [r7, #0]
 80098a6:	6878      	ldr	r0, [r7, #4]
 80098a8:	f000 fbe0 	bl	800a06c <USBD_SetConfig>
 80098ac:	4603      	mov	r3, r0
 80098ae:	73fb      	strb	r3, [r7, #15]
          break;
 80098b0:	e018      	b.n	80098e4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80098b2:	6839      	ldr	r1, [r7, #0]
 80098b4:	6878      	ldr	r0, [r7, #4]
 80098b6:	f000 fc83 	bl	800a1c0 <USBD_GetConfig>
          break;
 80098ba:	e013      	b.n	80098e4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80098bc:	6839      	ldr	r1, [r7, #0]
 80098be:	6878      	ldr	r0, [r7, #4]
 80098c0:	f000 fcb4 	bl	800a22c <USBD_GetStatus>
          break;
 80098c4:	e00e      	b.n	80098e4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80098c6:	6839      	ldr	r1, [r7, #0]
 80098c8:	6878      	ldr	r0, [r7, #4]
 80098ca:	f000 fce3 	bl	800a294 <USBD_SetFeature>
          break;
 80098ce:	e009      	b.n	80098e4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80098d0:	6839      	ldr	r1, [r7, #0]
 80098d2:	6878      	ldr	r0, [r7, #4]
 80098d4:	f000 fd07 	bl	800a2e6 <USBD_ClrFeature>
          break;
 80098d8:	e004      	b.n	80098e4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80098da:	6839      	ldr	r1, [r7, #0]
 80098dc:	6878      	ldr	r0, [r7, #4]
 80098de:	f000 fd5e 	bl	800a39e <USBD_CtlError>
          break;
 80098e2:	bf00      	nop
      }
      break;
 80098e4:	e004      	b.n	80098f0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80098e6:	6839      	ldr	r1, [r7, #0]
 80098e8:	6878      	ldr	r0, [r7, #4]
 80098ea:	f000 fd58 	bl	800a39e <USBD_CtlError>
      break;
 80098ee:	bf00      	nop
  }

  return ret;
 80098f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80098f2:	4618      	mov	r0, r3
 80098f4:	3710      	adds	r7, #16
 80098f6:	46bd      	mov	sp, r7
 80098f8:	bd80      	pop	{r7, pc}
 80098fa:	bf00      	nop

080098fc <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80098fc:	b580      	push	{r7, lr}
 80098fe:	b084      	sub	sp, #16
 8009900:	af00      	add	r7, sp, #0
 8009902:	6078      	str	r0, [r7, #4]
 8009904:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009906:	2300      	movs	r3, #0
 8009908:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800990a:	683b      	ldr	r3, [r7, #0]
 800990c:	781b      	ldrb	r3, [r3, #0]
 800990e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009912:	2b40      	cmp	r3, #64	@ 0x40
 8009914:	d005      	beq.n	8009922 <USBD_StdItfReq+0x26>
 8009916:	2b40      	cmp	r3, #64	@ 0x40
 8009918:	d852      	bhi.n	80099c0 <USBD_StdItfReq+0xc4>
 800991a:	2b00      	cmp	r3, #0
 800991c:	d001      	beq.n	8009922 <USBD_StdItfReq+0x26>
 800991e:	2b20      	cmp	r3, #32
 8009920:	d14e      	bne.n	80099c0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009928:	b2db      	uxtb	r3, r3
 800992a:	3b01      	subs	r3, #1
 800992c:	2b02      	cmp	r3, #2
 800992e:	d840      	bhi.n	80099b2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009930:	683b      	ldr	r3, [r7, #0]
 8009932:	889b      	ldrh	r3, [r3, #4]
 8009934:	b2db      	uxtb	r3, r3
 8009936:	2b01      	cmp	r3, #1
 8009938:	d836      	bhi.n	80099a8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800993a:	683b      	ldr	r3, [r7, #0]
 800993c:	889b      	ldrh	r3, [r3, #4]
 800993e:	b2db      	uxtb	r3, r3
 8009940:	4619      	mov	r1, r3
 8009942:	6878      	ldr	r0, [r7, #4]
 8009944:	f7ff fedb 	bl	80096fe <USBD_CoreFindIF>
 8009948:	4603      	mov	r3, r0
 800994a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800994c:	7bbb      	ldrb	r3, [r7, #14]
 800994e:	2bff      	cmp	r3, #255	@ 0xff
 8009950:	d01d      	beq.n	800998e <USBD_StdItfReq+0x92>
 8009952:	7bbb      	ldrb	r3, [r7, #14]
 8009954:	2b00      	cmp	r3, #0
 8009956:	d11a      	bne.n	800998e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8009958:	7bba      	ldrb	r2, [r7, #14]
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	32ae      	adds	r2, #174	@ 0xae
 800995e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009962:	689b      	ldr	r3, [r3, #8]
 8009964:	2b00      	cmp	r3, #0
 8009966:	d00f      	beq.n	8009988 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8009968:	7bba      	ldrb	r2, [r7, #14]
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009970:	7bba      	ldrb	r2, [r7, #14]
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	32ae      	adds	r2, #174	@ 0xae
 8009976:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800997a:	689b      	ldr	r3, [r3, #8]
 800997c:	6839      	ldr	r1, [r7, #0]
 800997e:	6878      	ldr	r0, [r7, #4]
 8009980:	4798      	blx	r3
 8009982:	4603      	mov	r3, r0
 8009984:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009986:	e004      	b.n	8009992 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8009988:	2303      	movs	r3, #3
 800998a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800998c:	e001      	b.n	8009992 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800998e:	2303      	movs	r3, #3
 8009990:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009992:	683b      	ldr	r3, [r7, #0]
 8009994:	88db      	ldrh	r3, [r3, #6]
 8009996:	2b00      	cmp	r3, #0
 8009998:	d110      	bne.n	80099bc <USBD_StdItfReq+0xc0>
 800999a:	7bfb      	ldrb	r3, [r7, #15]
 800999c:	2b00      	cmp	r3, #0
 800999e:	d10d      	bne.n	80099bc <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80099a0:	6878      	ldr	r0, [r7, #4]
 80099a2:	f000 fdd3 	bl	800a54c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80099a6:	e009      	b.n	80099bc <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80099a8:	6839      	ldr	r1, [r7, #0]
 80099aa:	6878      	ldr	r0, [r7, #4]
 80099ac:	f000 fcf7 	bl	800a39e <USBD_CtlError>
          break;
 80099b0:	e004      	b.n	80099bc <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80099b2:	6839      	ldr	r1, [r7, #0]
 80099b4:	6878      	ldr	r0, [r7, #4]
 80099b6:	f000 fcf2 	bl	800a39e <USBD_CtlError>
          break;
 80099ba:	e000      	b.n	80099be <USBD_StdItfReq+0xc2>
          break;
 80099bc:	bf00      	nop
      }
      break;
 80099be:	e004      	b.n	80099ca <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80099c0:	6839      	ldr	r1, [r7, #0]
 80099c2:	6878      	ldr	r0, [r7, #4]
 80099c4:	f000 fceb 	bl	800a39e <USBD_CtlError>
      break;
 80099c8:	bf00      	nop
  }

  return ret;
 80099ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80099cc:	4618      	mov	r0, r3
 80099ce:	3710      	adds	r7, #16
 80099d0:	46bd      	mov	sp, r7
 80099d2:	bd80      	pop	{r7, pc}

080099d4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80099d4:	b580      	push	{r7, lr}
 80099d6:	b084      	sub	sp, #16
 80099d8:	af00      	add	r7, sp, #0
 80099da:	6078      	str	r0, [r7, #4]
 80099dc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80099de:	2300      	movs	r3, #0
 80099e0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80099e2:	683b      	ldr	r3, [r7, #0]
 80099e4:	889b      	ldrh	r3, [r3, #4]
 80099e6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80099e8:	683b      	ldr	r3, [r7, #0]
 80099ea:	781b      	ldrb	r3, [r3, #0]
 80099ec:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80099f0:	2b40      	cmp	r3, #64	@ 0x40
 80099f2:	d007      	beq.n	8009a04 <USBD_StdEPReq+0x30>
 80099f4:	2b40      	cmp	r3, #64	@ 0x40
 80099f6:	f200 817f 	bhi.w	8009cf8 <USBD_StdEPReq+0x324>
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d02a      	beq.n	8009a54 <USBD_StdEPReq+0x80>
 80099fe:	2b20      	cmp	r3, #32
 8009a00:	f040 817a 	bne.w	8009cf8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8009a04:	7bbb      	ldrb	r3, [r7, #14]
 8009a06:	4619      	mov	r1, r3
 8009a08:	6878      	ldr	r0, [r7, #4]
 8009a0a:	f7ff fe85 	bl	8009718 <USBD_CoreFindEP>
 8009a0e:	4603      	mov	r3, r0
 8009a10:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009a12:	7b7b      	ldrb	r3, [r7, #13]
 8009a14:	2bff      	cmp	r3, #255	@ 0xff
 8009a16:	f000 8174 	beq.w	8009d02 <USBD_StdEPReq+0x32e>
 8009a1a:	7b7b      	ldrb	r3, [r7, #13]
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	f040 8170 	bne.w	8009d02 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8009a22:	7b7a      	ldrb	r2, [r7, #13]
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8009a2a:	7b7a      	ldrb	r2, [r7, #13]
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	32ae      	adds	r2, #174	@ 0xae
 8009a30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a34:	689b      	ldr	r3, [r3, #8]
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	f000 8163 	beq.w	8009d02 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8009a3c:	7b7a      	ldrb	r2, [r7, #13]
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	32ae      	adds	r2, #174	@ 0xae
 8009a42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a46:	689b      	ldr	r3, [r3, #8]
 8009a48:	6839      	ldr	r1, [r7, #0]
 8009a4a:	6878      	ldr	r0, [r7, #4]
 8009a4c:	4798      	blx	r3
 8009a4e:	4603      	mov	r3, r0
 8009a50:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8009a52:	e156      	b.n	8009d02 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009a54:	683b      	ldr	r3, [r7, #0]
 8009a56:	785b      	ldrb	r3, [r3, #1]
 8009a58:	2b03      	cmp	r3, #3
 8009a5a:	d008      	beq.n	8009a6e <USBD_StdEPReq+0x9a>
 8009a5c:	2b03      	cmp	r3, #3
 8009a5e:	f300 8145 	bgt.w	8009cec <USBD_StdEPReq+0x318>
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	f000 809b 	beq.w	8009b9e <USBD_StdEPReq+0x1ca>
 8009a68:	2b01      	cmp	r3, #1
 8009a6a:	d03c      	beq.n	8009ae6 <USBD_StdEPReq+0x112>
 8009a6c:	e13e      	b.n	8009cec <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009a74:	b2db      	uxtb	r3, r3
 8009a76:	2b02      	cmp	r3, #2
 8009a78:	d002      	beq.n	8009a80 <USBD_StdEPReq+0xac>
 8009a7a:	2b03      	cmp	r3, #3
 8009a7c:	d016      	beq.n	8009aac <USBD_StdEPReq+0xd8>
 8009a7e:	e02c      	b.n	8009ada <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009a80:	7bbb      	ldrb	r3, [r7, #14]
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d00d      	beq.n	8009aa2 <USBD_StdEPReq+0xce>
 8009a86:	7bbb      	ldrb	r3, [r7, #14]
 8009a88:	2b80      	cmp	r3, #128	@ 0x80
 8009a8a:	d00a      	beq.n	8009aa2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009a8c:	7bbb      	ldrb	r3, [r7, #14]
 8009a8e:	4619      	mov	r1, r3
 8009a90:	6878      	ldr	r0, [r7, #4]
 8009a92:	f001 f99f 	bl	800add4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009a96:	2180      	movs	r1, #128	@ 0x80
 8009a98:	6878      	ldr	r0, [r7, #4]
 8009a9a:	f001 f99b 	bl	800add4 <USBD_LL_StallEP>
 8009a9e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009aa0:	e020      	b.n	8009ae4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8009aa2:	6839      	ldr	r1, [r7, #0]
 8009aa4:	6878      	ldr	r0, [r7, #4]
 8009aa6:	f000 fc7a 	bl	800a39e <USBD_CtlError>
              break;
 8009aaa:	e01b      	b.n	8009ae4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009aac:	683b      	ldr	r3, [r7, #0]
 8009aae:	885b      	ldrh	r3, [r3, #2]
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d10e      	bne.n	8009ad2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009ab4:	7bbb      	ldrb	r3, [r7, #14]
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d00b      	beq.n	8009ad2 <USBD_StdEPReq+0xfe>
 8009aba:	7bbb      	ldrb	r3, [r7, #14]
 8009abc:	2b80      	cmp	r3, #128	@ 0x80
 8009abe:	d008      	beq.n	8009ad2 <USBD_StdEPReq+0xfe>
 8009ac0:	683b      	ldr	r3, [r7, #0]
 8009ac2:	88db      	ldrh	r3, [r3, #6]
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d104      	bne.n	8009ad2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009ac8:	7bbb      	ldrb	r3, [r7, #14]
 8009aca:	4619      	mov	r1, r3
 8009acc:	6878      	ldr	r0, [r7, #4]
 8009ace:	f001 f981 	bl	800add4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8009ad2:	6878      	ldr	r0, [r7, #4]
 8009ad4:	f000 fd3a 	bl	800a54c <USBD_CtlSendStatus>

              break;
 8009ad8:	e004      	b.n	8009ae4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8009ada:	6839      	ldr	r1, [r7, #0]
 8009adc:	6878      	ldr	r0, [r7, #4]
 8009ade:	f000 fc5e 	bl	800a39e <USBD_CtlError>
              break;
 8009ae2:	bf00      	nop
          }
          break;
 8009ae4:	e107      	b.n	8009cf6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009aec:	b2db      	uxtb	r3, r3
 8009aee:	2b02      	cmp	r3, #2
 8009af0:	d002      	beq.n	8009af8 <USBD_StdEPReq+0x124>
 8009af2:	2b03      	cmp	r3, #3
 8009af4:	d016      	beq.n	8009b24 <USBD_StdEPReq+0x150>
 8009af6:	e04b      	b.n	8009b90 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009af8:	7bbb      	ldrb	r3, [r7, #14]
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d00d      	beq.n	8009b1a <USBD_StdEPReq+0x146>
 8009afe:	7bbb      	ldrb	r3, [r7, #14]
 8009b00:	2b80      	cmp	r3, #128	@ 0x80
 8009b02:	d00a      	beq.n	8009b1a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009b04:	7bbb      	ldrb	r3, [r7, #14]
 8009b06:	4619      	mov	r1, r3
 8009b08:	6878      	ldr	r0, [r7, #4]
 8009b0a:	f001 f963 	bl	800add4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009b0e:	2180      	movs	r1, #128	@ 0x80
 8009b10:	6878      	ldr	r0, [r7, #4]
 8009b12:	f001 f95f 	bl	800add4 <USBD_LL_StallEP>
 8009b16:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009b18:	e040      	b.n	8009b9c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8009b1a:	6839      	ldr	r1, [r7, #0]
 8009b1c:	6878      	ldr	r0, [r7, #4]
 8009b1e:	f000 fc3e 	bl	800a39e <USBD_CtlError>
              break;
 8009b22:	e03b      	b.n	8009b9c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009b24:	683b      	ldr	r3, [r7, #0]
 8009b26:	885b      	ldrh	r3, [r3, #2]
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d136      	bne.n	8009b9a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009b2c:	7bbb      	ldrb	r3, [r7, #14]
 8009b2e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d004      	beq.n	8009b40 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009b36:	7bbb      	ldrb	r3, [r7, #14]
 8009b38:	4619      	mov	r1, r3
 8009b3a:	6878      	ldr	r0, [r7, #4]
 8009b3c:	f001 f969 	bl	800ae12 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009b40:	6878      	ldr	r0, [r7, #4]
 8009b42:	f000 fd03 	bl	800a54c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8009b46:	7bbb      	ldrb	r3, [r7, #14]
 8009b48:	4619      	mov	r1, r3
 8009b4a:	6878      	ldr	r0, [r7, #4]
 8009b4c:	f7ff fde4 	bl	8009718 <USBD_CoreFindEP>
 8009b50:	4603      	mov	r3, r0
 8009b52:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009b54:	7b7b      	ldrb	r3, [r7, #13]
 8009b56:	2bff      	cmp	r3, #255	@ 0xff
 8009b58:	d01f      	beq.n	8009b9a <USBD_StdEPReq+0x1c6>
 8009b5a:	7b7b      	ldrb	r3, [r7, #13]
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d11c      	bne.n	8009b9a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8009b60:	7b7a      	ldrb	r2, [r7, #13]
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8009b68:	7b7a      	ldrb	r2, [r7, #13]
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	32ae      	adds	r2, #174	@ 0xae
 8009b6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b72:	689b      	ldr	r3, [r3, #8]
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d010      	beq.n	8009b9a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009b78:	7b7a      	ldrb	r2, [r7, #13]
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	32ae      	adds	r2, #174	@ 0xae
 8009b7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b82:	689b      	ldr	r3, [r3, #8]
 8009b84:	6839      	ldr	r1, [r7, #0]
 8009b86:	6878      	ldr	r0, [r7, #4]
 8009b88:	4798      	blx	r3
 8009b8a:	4603      	mov	r3, r0
 8009b8c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8009b8e:	e004      	b.n	8009b9a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8009b90:	6839      	ldr	r1, [r7, #0]
 8009b92:	6878      	ldr	r0, [r7, #4]
 8009b94:	f000 fc03 	bl	800a39e <USBD_CtlError>
              break;
 8009b98:	e000      	b.n	8009b9c <USBD_StdEPReq+0x1c8>
              break;
 8009b9a:	bf00      	nop
          }
          break;
 8009b9c:	e0ab      	b.n	8009cf6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009ba4:	b2db      	uxtb	r3, r3
 8009ba6:	2b02      	cmp	r3, #2
 8009ba8:	d002      	beq.n	8009bb0 <USBD_StdEPReq+0x1dc>
 8009baa:	2b03      	cmp	r3, #3
 8009bac:	d032      	beq.n	8009c14 <USBD_StdEPReq+0x240>
 8009bae:	e097      	b.n	8009ce0 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009bb0:	7bbb      	ldrb	r3, [r7, #14]
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d007      	beq.n	8009bc6 <USBD_StdEPReq+0x1f2>
 8009bb6:	7bbb      	ldrb	r3, [r7, #14]
 8009bb8:	2b80      	cmp	r3, #128	@ 0x80
 8009bba:	d004      	beq.n	8009bc6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8009bbc:	6839      	ldr	r1, [r7, #0]
 8009bbe:	6878      	ldr	r0, [r7, #4]
 8009bc0:	f000 fbed 	bl	800a39e <USBD_CtlError>
                break;
 8009bc4:	e091      	b.n	8009cea <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009bc6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	da0b      	bge.n	8009be6 <USBD_StdEPReq+0x212>
 8009bce:	7bbb      	ldrb	r3, [r7, #14]
 8009bd0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009bd4:	4613      	mov	r3, r2
 8009bd6:	009b      	lsls	r3, r3, #2
 8009bd8:	4413      	add	r3, r2
 8009bda:	009b      	lsls	r3, r3, #2
 8009bdc:	3310      	adds	r3, #16
 8009bde:	687a      	ldr	r2, [r7, #4]
 8009be0:	4413      	add	r3, r2
 8009be2:	3304      	adds	r3, #4
 8009be4:	e00b      	b.n	8009bfe <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009be6:	7bbb      	ldrb	r3, [r7, #14]
 8009be8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009bec:	4613      	mov	r3, r2
 8009bee:	009b      	lsls	r3, r3, #2
 8009bf0:	4413      	add	r3, r2
 8009bf2:	009b      	lsls	r3, r3, #2
 8009bf4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009bf8:	687a      	ldr	r2, [r7, #4]
 8009bfa:	4413      	add	r3, r2
 8009bfc:	3304      	adds	r3, #4
 8009bfe:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009c00:	68bb      	ldr	r3, [r7, #8]
 8009c02:	2200      	movs	r2, #0
 8009c04:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009c06:	68bb      	ldr	r3, [r7, #8]
 8009c08:	2202      	movs	r2, #2
 8009c0a:	4619      	mov	r1, r3
 8009c0c:	6878      	ldr	r0, [r7, #4]
 8009c0e:	f000 fc43 	bl	800a498 <USBD_CtlSendData>
              break;
 8009c12:	e06a      	b.n	8009cea <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009c14:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	da11      	bge.n	8009c40 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009c1c:	7bbb      	ldrb	r3, [r7, #14]
 8009c1e:	f003 020f 	and.w	r2, r3, #15
 8009c22:	6879      	ldr	r1, [r7, #4]
 8009c24:	4613      	mov	r3, r2
 8009c26:	009b      	lsls	r3, r3, #2
 8009c28:	4413      	add	r3, r2
 8009c2a:	009b      	lsls	r3, r3, #2
 8009c2c:	440b      	add	r3, r1
 8009c2e:	3324      	adds	r3, #36	@ 0x24
 8009c30:	881b      	ldrh	r3, [r3, #0]
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d117      	bne.n	8009c66 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009c36:	6839      	ldr	r1, [r7, #0]
 8009c38:	6878      	ldr	r0, [r7, #4]
 8009c3a:	f000 fbb0 	bl	800a39e <USBD_CtlError>
                  break;
 8009c3e:	e054      	b.n	8009cea <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009c40:	7bbb      	ldrb	r3, [r7, #14]
 8009c42:	f003 020f 	and.w	r2, r3, #15
 8009c46:	6879      	ldr	r1, [r7, #4]
 8009c48:	4613      	mov	r3, r2
 8009c4a:	009b      	lsls	r3, r3, #2
 8009c4c:	4413      	add	r3, r2
 8009c4e:	009b      	lsls	r3, r3, #2
 8009c50:	440b      	add	r3, r1
 8009c52:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009c56:	881b      	ldrh	r3, [r3, #0]
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d104      	bne.n	8009c66 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009c5c:	6839      	ldr	r1, [r7, #0]
 8009c5e:	6878      	ldr	r0, [r7, #4]
 8009c60:	f000 fb9d 	bl	800a39e <USBD_CtlError>
                  break;
 8009c64:	e041      	b.n	8009cea <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009c66:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	da0b      	bge.n	8009c86 <USBD_StdEPReq+0x2b2>
 8009c6e:	7bbb      	ldrb	r3, [r7, #14]
 8009c70:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009c74:	4613      	mov	r3, r2
 8009c76:	009b      	lsls	r3, r3, #2
 8009c78:	4413      	add	r3, r2
 8009c7a:	009b      	lsls	r3, r3, #2
 8009c7c:	3310      	adds	r3, #16
 8009c7e:	687a      	ldr	r2, [r7, #4]
 8009c80:	4413      	add	r3, r2
 8009c82:	3304      	adds	r3, #4
 8009c84:	e00b      	b.n	8009c9e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009c86:	7bbb      	ldrb	r3, [r7, #14]
 8009c88:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009c8c:	4613      	mov	r3, r2
 8009c8e:	009b      	lsls	r3, r3, #2
 8009c90:	4413      	add	r3, r2
 8009c92:	009b      	lsls	r3, r3, #2
 8009c94:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009c98:	687a      	ldr	r2, [r7, #4]
 8009c9a:	4413      	add	r3, r2
 8009c9c:	3304      	adds	r3, #4
 8009c9e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009ca0:	7bbb      	ldrb	r3, [r7, #14]
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d002      	beq.n	8009cac <USBD_StdEPReq+0x2d8>
 8009ca6:	7bbb      	ldrb	r3, [r7, #14]
 8009ca8:	2b80      	cmp	r3, #128	@ 0x80
 8009caa:	d103      	bne.n	8009cb4 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8009cac:	68bb      	ldr	r3, [r7, #8]
 8009cae:	2200      	movs	r2, #0
 8009cb0:	601a      	str	r2, [r3, #0]
 8009cb2:	e00e      	b.n	8009cd2 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009cb4:	7bbb      	ldrb	r3, [r7, #14]
 8009cb6:	4619      	mov	r1, r3
 8009cb8:	6878      	ldr	r0, [r7, #4]
 8009cba:	f001 f8c9 	bl	800ae50 <USBD_LL_IsStallEP>
 8009cbe:	4603      	mov	r3, r0
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d003      	beq.n	8009ccc <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8009cc4:	68bb      	ldr	r3, [r7, #8]
 8009cc6:	2201      	movs	r2, #1
 8009cc8:	601a      	str	r2, [r3, #0]
 8009cca:	e002      	b.n	8009cd2 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8009ccc:	68bb      	ldr	r3, [r7, #8]
 8009cce:	2200      	movs	r2, #0
 8009cd0:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009cd2:	68bb      	ldr	r3, [r7, #8]
 8009cd4:	2202      	movs	r2, #2
 8009cd6:	4619      	mov	r1, r3
 8009cd8:	6878      	ldr	r0, [r7, #4]
 8009cda:	f000 fbdd 	bl	800a498 <USBD_CtlSendData>
              break;
 8009cde:	e004      	b.n	8009cea <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8009ce0:	6839      	ldr	r1, [r7, #0]
 8009ce2:	6878      	ldr	r0, [r7, #4]
 8009ce4:	f000 fb5b 	bl	800a39e <USBD_CtlError>
              break;
 8009ce8:	bf00      	nop
          }
          break;
 8009cea:	e004      	b.n	8009cf6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8009cec:	6839      	ldr	r1, [r7, #0]
 8009cee:	6878      	ldr	r0, [r7, #4]
 8009cf0:	f000 fb55 	bl	800a39e <USBD_CtlError>
          break;
 8009cf4:	bf00      	nop
      }
      break;
 8009cf6:	e005      	b.n	8009d04 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8009cf8:	6839      	ldr	r1, [r7, #0]
 8009cfa:	6878      	ldr	r0, [r7, #4]
 8009cfc:	f000 fb4f 	bl	800a39e <USBD_CtlError>
      break;
 8009d00:	e000      	b.n	8009d04 <USBD_StdEPReq+0x330>
      break;
 8009d02:	bf00      	nop
  }

  return ret;
 8009d04:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d06:	4618      	mov	r0, r3
 8009d08:	3710      	adds	r7, #16
 8009d0a:	46bd      	mov	sp, r7
 8009d0c:	bd80      	pop	{r7, pc}
	...

08009d10 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009d10:	b580      	push	{r7, lr}
 8009d12:	b084      	sub	sp, #16
 8009d14:	af00      	add	r7, sp, #0
 8009d16:	6078      	str	r0, [r7, #4]
 8009d18:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009d1a:	2300      	movs	r3, #0
 8009d1c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009d1e:	2300      	movs	r3, #0
 8009d20:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009d22:	2300      	movs	r3, #0
 8009d24:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009d26:	683b      	ldr	r3, [r7, #0]
 8009d28:	885b      	ldrh	r3, [r3, #2]
 8009d2a:	0a1b      	lsrs	r3, r3, #8
 8009d2c:	b29b      	uxth	r3, r3
 8009d2e:	3b01      	subs	r3, #1
 8009d30:	2b06      	cmp	r3, #6
 8009d32:	f200 8128 	bhi.w	8009f86 <USBD_GetDescriptor+0x276>
 8009d36:	a201      	add	r2, pc, #4	@ (adr r2, 8009d3c <USBD_GetDescriptor+0x2c>)
 8009d38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d3c:	08009d59 	.word	0x08009d59
 8009d40:	08009d71 	.word	0x08009d71
 8009d44:	08009db1 	.word	0x08009db1
 8009d48:	08009f87 	.word	0x08009f87
 8009d4c:	08009f87 	.word	0x08009f87
 8009d50:	08009f27 	.word	0x08009f27
 8009d54:	08009f53 	.word	0x08009f53
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	687a      	ldr	r2, [r7, #4]
 8009d62:	7c12      	ldrb	r2, [r2, #16]
 8009d64:	f107 0108 	add.w	r1, r7, #8
 8009d68:	4610      	mov	r0, r2
 8009d6a:	4798      	blx	r3
 8009d6c:	60f8      	str	r0, [r7, #12]
      break;
 8009d6e:	e112      	b.n	8009f96 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	7c1b      	ldrb	r3, [r3, #16]
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d10d      	bne.n	8009d94 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009d7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d80:	f107 0208 	add.w	r2, r7, #8
 8009d84:	4610      	mov	r0, r2
 8009d86:	4798      	blx	r3
 8009d88:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	3301      	adds	r3, #1
 8009d8e:	2202      	movs	r2, #2
 8009d90:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009d92:	e100      	b.n	8009f96 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009d9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d9c:	f107 0208 	add.w	r2, r7, #8
 8009da0:	4610      	mov	r0, r2
 8009da2:	4798      	blx	r3
 8009da4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	3301      	adds	r3, #1
 8009daa:	2202      	movs	r2, #2
 8009dac:	701a      	strb	r2, [r3, #0]
      break;
 8009dae:	e0f2      	b.n	8009f96 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009db0:	683b      	ldr	r3, [r7, #0]
 8009db2:	885b      	ldrh	r3, [r3, #2]
 8009db4:	b2db      	uxtb	r3, r3
 8009db6:	2b05      	cmp	r3, #5
 8009db8:	f200 80ac 	bhi.w	8009f14 <USBD_GetDescriptor+0x204>
 8009dbc:	a201      	add	r2, pc, #4	@ (adr r2, 8009dc4 <USBD_GetDescriptor+0xb4>)
 8009dbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dc2:	bf00      	nop
 8009dc4:	08009ddd 	.word	0x08009ddd
 8009dc8:	08009e11 	.word	0x08009e11
 8009dcc:	08009e45 	.word	0x08009e45
 8009dd0:	08009e79 	.word	0x08009e79
 8009dd4:	08009ead 	.word	0x08009ead
 8009dd8:	08009ee1 	.word	0x08009ee1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009de2:	685b      	ldr	r3, [r3, #4]
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d00b      	beq.n	8009e00 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009dee:	685b      	ldr	r3, [r3, #4]
 8009df0:	687a      	ldr	r2, [r7, #4]
 8009df2:	7c12      	ldrb	r2, [r2, #16]
 8009df4:	f107 0108 	add.w	r1, r7, #8
 8009df8:	4610      	mov	r0, r2
 8009dfa:	4798      	blx	r3
 8009dfc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009dfe:	e091      	b.n	8009f24 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009e00:	6839      	ldr	r1, [r7, #0]
 8009e02:	6878      	ldr	r0, [r7, #4]
 8009e04:	f000 facb 	bl	800a39e <USBD_CtlError>
            err++;
 8009e08:	7afb      	ldrb	r3, [r7, #11]
 8009e0a:	3301      	adds	r3, #1
 8009e0c:	72fb      	strb	r3, [r7, #11]
          break;
 8009e0e:	e089      	b.n	8009f24 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009e16:	689b      	ldr	r3, [r3, #8]
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d00b      	beq.n	8009e34 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009e22:	689b      	ldr	r3, [r3, #8]
 8009e24:	687a      	ldr	r2, [r7, #4]
 8009e26:	7c12      	ldrb	r2, [r2, #16]
 8009e28:	f107 0108 	add.w	r1, r7, #8
 8009e2c:	4610      	mov	r0, r2
 8009e2e:	4798      	blx	r3
 8009e30:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009e32:	e077      	b.n	8009f24 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009e34:	6839      	ldr	r1, [r7, #0]
 8009e36:	6878      	ldr	r0, [r7, #4]
 8009e38:	f000 fab1 	bl	800a39e <USBD_CtlError>
            err++;
 8009e3c:	7afb      	ldrb	r3, [r7, #11]
 8009e3e:	3301      	adds	r3, #1
 8009e40:	72fb      	strb	r3, [r7, #11]
          break;
 8009e42:	e06f      	b.n	8009f24 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009e4a:	68db      	ldr	r3, [r3, #12]
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d00b      	beq.n	8009e68 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009e56:	68db      	ldr	r3, [r3, #12]
 8009e58:	687a      	ldr	r2, [r7, #4]
 8009e5a:	7c12      	ldrb	r2, [r2, #16]
 8009e5c:	f107 0108 	add.w	r1, r7, #8
 8009e60:	4610      	mov	r0, r2
 8009e62:	4798      	blx	r3
 8009e64:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009e66:	e05d      	b.n	8009f24 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009e68:	6839      	ldr	r1, [r7, #0]
 8009e6a:	6878      	ldr	r0, [r7, #4]
 8009e6c:	f000 fa97 	bl	800a39e <USBD_CtlError>
            err++;
 8009e70:	7afb      	ldrb	r3, [r7, #11]
 8009e72:	3301      	adds	r3, #1
 8009e74:	72fb      	strb	r3, [r7, #11]
          break;
 8009e76:	e055      	b.n	8009f24 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009e7e:	691b      	ldr	r3, [r3, #16]
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d00b      	beq.n	8009e9c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009e8a:	691b      	ldr	r3, [r3, #16]
 8009e8c:	687a      	ldr	r2, [r7, #4]
 8009e8e:	7c12      	ldrb	r2, [r2, #16]
 8009e90:	f107 0108 	add.w	r1, r7, #8
 8009e94:	4610      	mov	r0, r2
 8009e96:	4798      	blx	r3
 8009e98:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009e9a:	e043      	b.n	8009f24 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009e9c:	6839      	ldr	r1, [r7, #0]
 8009e9e:	6878      	ldr	r0, [r7, #4]
 8009ea0:	f000 fa7d 	bl	800a39e <USBD_CtlError>
            err++;
 8009ea4:	7afb      	ldrb	r3, [r7, #11]
 8009ea6:	3301      	adds	r3, #1
 8009ea8:	72fb      	strb	r3, [r7, #11]
          break;
 8009eaa:	e03b      	b.n	8009f24 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009eb2:	695b      	ldr	r3, [r3, #20]
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d00b      	beq.n	8009ed0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009ebe:	695b      	ldr	r3, [r3, #20]
 8009ec0:	687a      	ldr	r2, [r7, #4]
 8009ec2:	7c12      	ldrb	r2, [r2, #16]
 8009ec4:	f107 0108 	add.w	r1, r7, #8
 8009ec8:	4610      	mov	r0, r2
 8009eca:	4798      	blx	r3
 8009ecc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009ece:	e029      	b.n	8009f24 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009ed0:	6839      	ldr	r1, [r7, #0]
 8009ed2:	6878      	ldr	r0, [r7, #4]
 8009ed4:	f000 fa63 	bl	800a39e <USBD_CtlError>
            err++;
 8009ed8:	7afb      	ldrb	r3, [r7, #11]
 8009eda:	3301      	adds	r3, #1
 8009edc:	72fb      	strb	r3, [r7, #11]
          break;
 8009ede:	e021      	b.n	8009f24 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009ee6:	699b      	ldr	r3, [r3, #24]
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d00b      	beq.n	8009f04 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009ef2:	699b      	ldr	r3, [r3, #24]
 8009ef4:	687a      	ldr	r2, [r7, #4]
 8009ef6:	7c12      	ldrb	r2, [r2, #16]
 8009ef8:	f107 0108 	add.w	r1, r7, #8
 8009efc:	4610      	mov	r0, r2
 8009efe:	4798      	blx	r3
 8009f00:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009f02:	e00f      	b.n	8009f24 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009f04:	6839      	ldr	r1, [r7, #0]
 8009f06:	6878      	ldr	r0, [r7, #4]
 8009f08:	f000 fa49 	bl	800a39e <USBD_CtlError>
            err++;
 8009f0c:	7afb      	ldrb	r3, [r7, #11]
 8009f0e:	3301      	adds	r3, #1
 8009f10:	72fb      	strb	r3, [r7, #11]
          break;
 8009f12:	e007      	b.n	8009f24 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009f14:	6839      	ldr	r1, [r7, #0]
 8009f16:	6878      	ldr	r0, [r7, #4]
 8009f18:	f000 fa41 	bl	800a39e <USBD_CtlError>
          err++;
 8009f1c:	7afb      	ldrb	r3, [r7, #11]
 8009f1e:	3301      	adds	r3, #1
 8009f20:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8009f22:	bf00      	nop
      }
      break;
 8009f24:	e037      	b.n	8009f96 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	7c1b      	ldrb	r3, [r3, #16]
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d109      	bne.n	8009f42 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009f34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009f36:	f107 0208 	add.w	r2, r7, #8
 8009f3a:	4610      	mov	r0, r2
 8009f3c:	4798      	blx	r3
 8009f3e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009f40:	e029      	b.n	8009f96 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009f42:	6839      	ldr	r1, [r7, #0]
 8009f44:	6878      	ldr	r0, [r7, #4]
 8009f46:	f000 fa2a 	bl	800a39e <USBD_CtlError>
        err++;
 8009f4a:	7afb      	ldrb	r3, [r7, #11]
 8009f4c:	3301      	adds	r3, #1
 8009f4e:	72fb      	strb	r3, [r7, #11]
      break;
 8009f50:	e021      	b.n	8009f96 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	7c1b      	ldrb	r3, [r3, #16]
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d10d      	bne.n	8009f76 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009f60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009f62:	f107 0208 	add.w	r2, r7, #8
 8009f66:	4610      	mov	r0, r2
 8009f68:	4798      	blx	r3
 8009f6a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	3301      	adds	r3, #1
 8009f70:	2207      	movs	r2, #7
 8009f72:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009f74:	e00f      	b.n	8009f96 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009f76:	6839      	ldr	r1, [r7, #0]
 8009f78:	6878      	ldr	r0, [r7, #4]
 8009f7a:	f000 fa10 	bl	800a39e <USBD_CtlError>
        err++;
 8009f7e:	7afb      	ldrb	r3, [r7, #11]
 8009f80:	3301      	adds	r3, #1
 8009f82:	72fb      	strb	r3, [r7, #11]
      break;
 8009f84:	e007      	b.n	8009f96 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009f86:	6839      	ldr	r1, [r7, #0]
 8009f88:	6878      	ldr	r0, [r7, #4]
 8009f8a:	f000 fa08 	bl	800a39e <USBD_CtlError>
      err++;
 8009f8e:	7afb      	ldrb	r3, [r7, #11]
 8009f90:	3301      	adds	r3, #1
 8009f92:	72fb      	strb	r3, [r7, #11]
      break;
 8009f94:	bf00      	nop
  }

  if (err != 0U)
 8009f96:	7afb      	ldrb	r3, [r7, #11]
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d11e      	bne.n	8009fda <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8009f9c:	683b      	ldr	r3, [r7, #0]
 8009f9e:	88db      	ldrh	r3, [r3, #6]
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d016      	beq.n	8009fd2 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8009fa4:	893b      	ldrh	r3, [r7, #8]
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d00e      	beq.n	8009fc8 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8009faa:	683b      	ldr	r3, [r7, #0]
 8009fac:	88da      	ldrh	r2, [r3, #6]
 8009fae:	893b      	ldrh	r3, [r7, #8]
 8009fb0:	4293      	cmp	r3, r2
 8009fb2:	bf28      	it	cs
 8009fb4:	4613      	movcs	r3, r2
 8009fb6:	b29b      	uxth	r3, r3
 8009fb8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009fba:	893b      	ldrh	r3, [r7, #8]
 8009fbc:	461a      	mov	r2, r3
 8009fbe:	68f9      	ldr	r1, [r7, #12]
 8009fc0:	6878      	ldr	r0, [r7, #4]
 8009fc2:	f000 fa69 	bl	800a498 <USBD_CtlSendData>
 8009fc6:	e009      	b.n	8009fdc <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009fc8:	6839      	ldr	r1, [r7, #0]
 8009fca:	6878      	ldr	r0, [r7, #4]
 8009fcc:	f000 f9e7 	bl	800a39e <USBD_CtlError>
 8009fd0:	e004      	b.n	8009fdc <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009fd2:	6878      	ldr	r0, [r7, #4]
 8009fd4:	f000 faba 	bl	800a54c <USBD_CtlSendStatus>
 8009fd8:	e000      	b.n	8009fdc <USBD_GetDescriptor+0x2cc>
    return;
 8009fda:	bf00      	nop
  }
}
 8009fdc:	3710      	adds	r7, #16
 8009fde:	46bd      	mov	sp, r7
 8009fe0:	bd80      	pop	{r7, pc}
 8009fe2:	bf00      	nop

08009fe4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009fe4:	b580      	push	{r7, lr}
 8009fe6:	b084      	sub	sp, #16
 8009fe8:	af00      	add	r7, sp, #0
 8009fea:	6078      	str	r0, [r7, #4]
 8009fec:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009fee:	683b      	ldr	r3, [r7, #0]
 8009ff0:	889b      	ldrh	r3, [r3, #4]
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d131      	bne.n	800a05a <USBD_SetAddress+0x76>
 8009ff6:	683b      	ldr	r3, [r7, #0]
 8009ff8:	88db      	ldrh	r3, [r3, #6]
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d12d      	bne.n	800a05a <USBD_SetAddress+0x76>
 8009ffe:	683b      	ldr	r3, [r7, #0]
 800a000:	885b      	ldrh	r3, [r3, #2]
 800a002:	2b7f      	cmp	r3, #127	@ 0x7f
 800a004:	d829      	bhi.n	800a05a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a006:	683b      	ldr	r3, [r7, #0]
 800a008:	885b      	ldrh	r3, [r3, #2]
 800a00a:	b2db      	uxtb	r3, r3
 800a00c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a010:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a018:	b2db      	uxtb	r3, r3
 800a01a:	2b03      	cmp	r3, #3
 800a01c:	d104      	bne.n	800a028 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800a01e:	6839      	ldr	r1, [r7, #0]
 800a020:	6878      	ldr	r0, [r7, #4]
 800a022:	f000 f9bc 	bl	800a39e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a026:	e01d      	b.n	800a064 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	7bfa      	ldrb	r2, [r7, #15]
 800a02c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a030:	7bfb      	ldrb	r3, [r7, #15]
 800a032:	4619      	mov	r1, r3
 800a034:	6878      	ldr	r0, [r7, #4]
 800a036:	f000 ff37 	bl	800aea8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a03a:	6878      	ldr	r0, [r7, #4]
 800a03c:	f000 fa86 	bl	800a54c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a040:	7bfb      	ldrb	r3, [r7, #15]
 800a042:	2b00      	cmp	r3, #0
 800a044:	d004      	beq.n	800a050 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	2202      	movs	r2, #2
 800a04a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a04e:	e009      	b.n	800a064 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	2201      	movs	r2, #1
 800a054:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a058:	e004      	b.n	800a064 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a05a:	6839      	ldr	r1, [r7, #0]
 800a05c:	6878      	ldr	r0, [r7, #4]
 800a05e:	f000 f99e 	bl	800a39e <USBD_CtlError>
  }
}
 800a062:	bf00      	nop
 800a064:	bf00      	nop
 800a066:	3710      	adds	r7, #16
 800a068:	46bd      	mov	sp, r7
 800a06a:	bd80      	pop	{r7, pc}

0800a06c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a06c:	b580      	push	{r7, lr}
 800a06e:	b084      	sub	sp, #16
 800a070:	af00      	add	r7, sp, #0
 800a072:	6078      	str	r0, [r7, #4]
 800a074:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a076:	2300      	movs	r3, #0
 800a078:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a07a:	683b      	ldr	r3, [r7, #0]
 800a07c:	885b      	ldrh	r3, [r3, #2]
 800a07e:	b2da      	uxtb	r2, r3
 800a080:	4b4e      	ldr	r3, [pc, #312]	@ (800a1bc <USBD_SetConfig+0x150>)
 800a082:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a084:	4b4d      	ldr	r3, [pc, #308]	@ (800a1bc <USBD_SetConfig+0x150>)
 800a086:	781b      	ldrb	r3, [r3, #0]
 800a088:	2b01      	cmp	r3, #1
 800a08a:	d905      	bls.n	800a098 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800a08c:	6839      	ldr	r1, [r7, #0]
 800a08e:	6878      	ldr	r0, [r7, #4]
 800a090:	f000 f985 	bl	800a39e <USBD_CtlError>
    return USBD_FAIL;
 800a094:	2303      	movs	r3, #3
 800a096:	e08c      	b.n	800a1b2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a09e:	b2db      	uxtb	r3, r3
 800a0a0:	2b02      	cmp	r3, #2
 800a0a2:	d002      	beq.n	800a0aa <USBD_SetConfig+0x3e>
 800a0a4:	2b03      	cmp	r3, #3
 800a0a6:	d029      	beq.n	800a0fc <USBD_SetConfig+0x90>
 800a0a8:	e075      	b.n	800a196 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800a0aa:	4b44      	ldr	r3, [pc, #272]	@ (800a1bc <USBD_SetConfig+0x150>)
 800a0ac:	781b      	ldrb	r3, [r3, #0]
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d020      	beq.n	800a0f4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800a0b2:	4b42      	ldr	r3, [pc, #264]	@ (800a1bc <USBD_SetConfig+0x150>)
 800a0b4:	781b      	ldrb	r3, [r3, #0]
 800a0b6:	461a      	mov	r2, r3
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a0bc:	4b3f      	ldr	r3, [pc, #252]	@ (800a1bc <USBD_SetConfig+0x150>)
 800a0be:	781b      	ldrb	r3, [r3, #0]
 800a0c0:	4619      	mov	r1, r3
 800a0c2:	6878      	ldr	r0, [r7, #4]
 800a0c4:	f7fe ffe3 	bl	800908e <USBD_SetClassConfig>
 800a0c8:	4603      	mov	r3, r0
 800a0ca:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800a0cc:	7bfb      	ldrb	r3, [r7, #15]
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d008      	beq.n	800a0e4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800a0d2:	6839      	ldr	r1, [r7, #0]
 800a0d4:	6878      	ldr	r0, [r7, #4]
 800a0d6:	f000 f962 	bl	800a39e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	2202      	movs	r2, #2
 800a0de:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a0e2:	e065      	b.n	800a1b0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a0e4:	6878      	ldr	r0, [r7, #4]
 800a0e6:	f000 fa31 	bl	800a54c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	2203      	movs	r2, #3
 800a0ee:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800a0f2:	e05d      	b.n	800a1b0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a0f4:	6878      	ldr	r0, [r7, #4]
 800a0f6:	f000 fa29 	bl	800a54c <USBD_CtlSendStatus>
      break;
 800a0fa:	e059      	b.n	800a1b0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800a0fc:	4b2f      	ldr	r3, [pc, #188]	@ (800a1bc <USBD_SetConfig+0x150>)
 800a0fe:	781b      	ldrb	r3, [r3, #0]
 800a100:	2b00      	cmp	r3, #0
 800a102:	d112      	bne.n	800a12a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	2202      	movs	r2, #2
 800a108:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800a10c:	4b2b      	ldr	r3, [pc, #172]	@ (800a1bc <USBD_SetConfig+0x150>)
 800a10e:	781b      	ldrb	r3, [r3, #0]
 800a110:	461a      	mov	r2, r3
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a116:	4b29      	ldr	r3, [pc, #164]	@ (800a1bc <USBD_SetConfig+0x150>)
 800a118:	781b      	ldrb	r3, [r3, #0]
 800a11a:	4619      	mov	r1, r3
 800a11c:	6878      	ldr	r0, [r7, #4]
 800a11e:	f7fe ffd2 	bl	80090c6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800a122:	6878      	ldr	r0, [r7, #4]
 800a124:	f000 fa12 	bl	800a54c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a128:	e042      	b.n	800a1b0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800a12a:	4b24      	ldr	r3, [pc, #144]	@ (800a1bc <USBD_SetConfig+0x150>)
 800a12c:	781b      	ldrb	r3, [r3, #0]
 800a12e:	461a      	mov	r2, r3
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	685b      	ldr	r3, [r3, #4]
 800a134:	429a      	cmp	r2, r3
 800a136:	d02a      	beq.n	800a18e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	685b      	ldr	r3, [r3, #4]
 800a13c:	b2db      	uxtb	r3, r3
 800a13e:	4619      	mov	r1, r3
 800a140:	6878      	ldr	r0, [r7, #4]
 800a142:	f7fe ffc0 	bl	80090c6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800a146:	4b1d      	ldr	r3, [pc, #116]	@ (800a1bc <USBD_SetConfig+0x150>)
 800a148:	781b      	ldrb	r3, [r3, #0]
 800a14a:	461a      	mov	r2, r3
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a150:	4b1a      	ldr	r3, [pc, #104]	@ (800a1bc <USBD_SetConfig+0x150>)
 800a152:	781b      	ldrb	r3, [r3, #0]
 800a154:	4619      	mov	r1, r3
 800a156:	6878      	ldr	r0, [r7, #4]
 800a158:	f7fe ff99 	bl	800908e <USBD_SetClassConfig>
 800a15c:	4603      	mov	r3, r0
 800a15e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800a160:	7bfb      	ldrb	r3, [r7, #15]
 800a162:	2b00      	cmp	r3, #0
 800a164:	d00f      	beq.n	800a186 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800a166:	6839      	ldr	r1, [r7, #0]
 800a168:	6878      	ldr	r0, [r7, #4]
 800a16a:	f000 f918 	bl	800a39e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	685b      	ldr	r3, [r3, #4]
 800a172:	b2db      	uxtb	r3, r3
 800a174:	4619      	mov	r1, r3
 800a176:	6878      	ldr	r0, [r7, #4]
 800a178:	f7fe ffa5 	bl	80090c6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	2202      	movs	r2, #2
 800a180:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800a184:	e014      	b.n	800a1b0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a186:	6878      	ldr	r0, [r7, #4]
 800a188:	f000 f9e0 	bl	800a54c <USBD_CtlSendStatus>
      break;
 800a18c:	e010      	b.n	800a1b0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a18e:	6878      	ldr	r0, [r7, #4]
 800a190:	f000 f9dc 	bl	800a54c <USBD_CtlSendStatus>
      break;
 800a194:	e00c      	b.n	800a1b0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800a196:	6839      	ldr	r1, [r7, #0]
 800a198:	6878      	ldr	r0, [r7, #4]
 800a19a:	f000 f900 	bl	800a39e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a19e:	4b07      	ldr	r3, [pc, #28]	@ (800a1bc <USBD_SetConfig+0x150>)
 800a1a0:	781b      	ldrb	r3, [r3, #0]
 800a1a2:	4619      	mov	r1, r3
 800a1a4:	6878      	ldr	r0, [r7, #4]
 800a1a6:	f7fe ff8e 	bl	80090c6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800a1aa:	2303      	movs	r3, #3
 800a1ac:	73fb      	strb	r3, [r7, #15]
      break;
 800a1ae:	bf00      	nop
  }

  return ret;
 800a1b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1b2:	4618      	mov	r0, r3
 800a1b4:	3710      	adds	r7, #16
 800a1b6:	46bd      	mov	sp, r7
 800a1b8:	bd80      	pop	{r7, pc}
 800a1ba:	bf00      	nop
 800a1bc:	2000e810 	.word	0x2000e810

0800a1c0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a1c0:	b580      	push	{r7, lr}
 800a1c2:	b082      	sub	sp, #8
 800a1c4:	af00      	add	r7, sp, #0
 800a1c6:	6078      	str	r0, [r7, #4]
 800a1c8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a1ca:	683b      	ldr	r3, [r7, #0]
 800a1cc:	88db      	ldrh	r3, [r3, #6]
 800a1ce:	2b01      	cmp	r3, #1
 800a1d0:	d004      	beq.n	800a1dc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a1d2:	6839      	ldr	r1, [r7, #0]
 800a1d4:	6878      	ldr	r0, [r7, #4]
 800a1d6:	f000 f8e2 	bl	800a39e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a1da:	e023      	b.n	800a224 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a1e2:	b2db      	uxtb	r3, r3
 800a1e4:	2b02      	cmp	r3, #2
 800a1e6:	dc02      	bgt.n	800a1ee <USBD_GetConfig+0x2e>
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	dc03      	bgt.n	800a1f4 <USBD_GetConfig+0x34>
 800a1ec:	e015      	b.n	800a21a <USBD_GetConfig+0x5a>
 800a1ee:	2b03      	cmp	r3, #3
 800a1f0:	d00b      	beq.n	800a20a <USBD_GetConfig+0x4a>
 800a1f2:	e012      	b.n	800a21a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	2200      	movs	r2, #0
 800a1f8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	3308      	adds	r3, #8
 800a1fe:	2201      	movs	r2, #1
 800a200:	4619      	mov	r1, r3
 800a202:	6878      	ldr	r0, [r7, #4]
 800a204:	f000 f948 	bl	800a498 <USBD_CtlSendData>
        break;
 800a208:	e00c      	b.n	800a224 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	3304      	adds	r3, #4
 800a20e:	2201      	movs	r2, #1
 800a210:	4619      	mov	r1, r3
 800a212:	6878      	ldr	r0, [r7, #4]
 800a214:	f000 f940 	bl	800a498 <USBD_CtlSendData>
        break;
 800a218:	e004      	b.n	800a224 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800a21a:	6839      	ldr	r1, [r7, #0]
 800a21c:	6878      	ldr	r0, [r7, #4]
 800a21e:	f000 f8be 	bl	800a39e <USBD_CtlError>
        break;
 800a222:	bf00      	nop
}
 800a224:	bf00      	nop
 800a226:	3708      	adds	r7, #8
 800a228:	46bd      	mov	sp, r7
 800a22a:	bd80      	pop	{r7, pc}

0800a22c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a22c:	b580      	push	{r7, lr}
 800a22e:	b082      	sub	sp, #8
 800a230:	af00      	add	r7, sp, #0
 800a232:	6078      	str	r0, [r7, #4]
 800a234:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a23c:	b2db      	uxtb	r3, r3
 800a23e:	3b01      	subs	r3, #1
 800a240:	2b02      	cmp	r3, #2
 800a242:	d81e      	bhi.n	800a282 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a244:	683b      	ldr	r3, [r7, #0]
 800a246:	88db      	ldrh	r3, [r3, #6]
 800a248:	2b02      	cmp	r3, #2
 800a24a:	d004      	beq.n	800a256 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800a24c:	6839      	ldr	r1, [r7, #0]
 800a24e:	6878      	ldr	r0, [r7, #4]
 800a250:	f000 f8a5 	bl	800a39e <USBD_CtlError>
        break;
 800a254:	e01a      	b.n	800a28c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	2201      	movs	r2, #1
 800a25a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800a262:	2b00      	cmp	r3, #0
 800a264:	d005      	beq.n	800a272 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	68db      	ldr	r3, [r3, #12]
 800a26a:	f043 0202 	orr.w	r2, r3, #2
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	330c      	adds	r3, #12
 800a276:	2202      	movs	r2, #2
 800a278:	4619      	mov	r1, r3
 800a27a:	6878      	ldr	r0, [r7, #4]
 800a27c:	f000 f90c 	bl	800a498 <USBD_CtlSendData>
      break;
 800a280:	e004      	b.n	800a28c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800a282:	6839      	ldr	r1, [r7, #0]
 800a284:	6878      	ldr	r0, [r7, #4]
 800a286:	f000 f88a 	bl	800a39e <USBD_CtlError>
      break;
 800a28a:	bf00      	nop
  }
}
 800a28c:	bf00      	nop
 800a28e:	3708      	adds	r7, #8
 800a290:	46bd      	mov	sp, r7
 800a292:	bd80      	pop	{r7, pc}

0800a294 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a294:	b580      	push	{r7, lr}
 800a296:	b082      	sub	sp, #8
 800a298:	af00      	add	r7, sp, #0
 800a29a:	6078      	str	r0, [r7, #4]
 800a29c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a29e:	683b      	ldr	r3, [r7, #0]
 800a2a0:	885b      	ldrh	r3, [r3, #2]
 800a2a2:	2b01      	cmp	r3, #1
 800a2a4:	d107      	bne.n	800a2b6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	2201      	movs	r2, #1
 800a2aa:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a2ae:	6878      	ldr	r0, [r7, #4]
 800a2b0:	f000 f94c 	bl	800a54c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800a2b4:	e013      	b.n	800a2de <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800a2b6:	683b      	ldr	r3, [r7, #0]
 800a2b8:	885b      	ldrh	r3, [r3, #2]
 800a2ba:	2b02      	cmp	r3, #2
 800a2bc:	d10b      	bne.n	800a2d6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800a2be:	683b      	ldr	r3, [r7, #0]
 800a2c0:	889b      	ldrh	r3, [r3, #4]
 800a2c2:	0a1b      	lsrs	r3, r3, #8
 800a2c4:	b29b      	uxth	r3, r3
 800a2c6:	b2da      	uxtb	r2, r3
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800a2ce:	6878      	ldr	r0, [r7, #4]
 800a2d0:	f000 f93c 	bl	800a54c <USBD_CtlSendStatus>
}
 800a2d4:	e003      	b.n	800a2de <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800a2d6:	6839      	ldr	r1, [r7, #0]
 800a2d8:	6878      	ldr	r0, [r7, #4]
 800a2da:	f000 f860 	bl	800a39e <USBD_CtlError>
}
 800a2de:	bf00      	nop
 800a2e0:	3708      	adds	r7, #8
 800a2e2:	46bd      	mov	sp, r7
 800a2e4:	bd80      	pop	{r7, pc}

0800a2e6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a2e6:	b580      	push	{r7, lr}
 800a2e8:	b082      	sub	sp, #8
 800a2ea:	af00      	add	r7, sp, #0
 800a2ec:	6078      	str	r0, [r7, #4]
 800a2ee:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a2f6:	b2db      	uxtb	r3, r3
 800a2f8:	3b01      	subs	r3, #1
 800a2fa:	2b02      	cmp	r3, #2
 800a2fc:	d80b      	bhi.n	800a316 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a2fe:	683b      	ldr	r3, [r7, #0]
 800a300:	885b      	ldrh	r3, [r3, #2]
 800a302:	2b01      	cmp	r3, #1
 800a304:	d10c      	bne.n	800a320 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	2200      	movs	r2, #0
 800a30a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a30e:	6878      	ldr	r0, [r7, #4]
 800a310:	f000 f91c 	bl	800a54c <USBD_CtlSendStatus>
      }
      break;
 800a314:	e004      	b.n	800a320 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800a316:	6839      	ldr	r1, [r7, #0]
 800a318:	6878      	ldr	r0, [r7, #4]
 800a31a:	f000 f840 	bl	800a39e <USBD_CtlError>
      break;
 800a31e:	e000      	b.n	800a322 <USBD_ClrFeature+0x3c>
      break;
 800a320:	bf00      	nop
  }
}
 800a322:	bf00      	nop
 800a324:	3708      	adds	r7, #8
 800a326:	46bd      	mov	sp, r7
 800a328:	bd80      	pop	{r7, pc}

0800a32a <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a32a:	b580      	push	{r7, lr}
 800a32c:	b084      	sub	sp, #16
 800a32e:	af00      	add	r7, sp, #0
 800a330:	6078      	str	r0, [r7, #4]
 800a332:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a334:	683b      	ldr	r3, [r7, #0]
 800a336:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	781a      	ldrb	r2, [r3, #0]
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	3301      	adds	r3, #1
 800a344:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	781a      	ldrb	r2, [r3, #0]
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	3301      	adds	r3, #1
 800a352:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a354:	68f8      	ldr	r0, [r7, #12]
 800a356:	f7ff fa40 	bl	80097da <SWAPBYTE>
 800a35a:	4603      	mov	r3, r0
 800a35c:	461a      	mov	r2, r3
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	3301      	adds	r3, #1
 800a366:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	3301      	adds	r3, #1
 800a36c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a36e:	68f8      	ldr	r0, [r7, #12]
 800a370:	f7ff fa33 	bl	80097da <SWAPBYTE>
 800a374:	4603      	mov	r3, r0
 800a376:	461a      	mov	r2, r3
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	3301      	adds	r3, #1
 800a380:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	3301      	adds	r3, #1
 800a386:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a388:	68f8      	ldr	r0, [r7, #12]
 800a38a:	f7ff fa26 	bl	80097da <SWAPBYTE>
 800a38e:	4603      	mov	r3, r0
 800a390:	461a      	mov	r2, r3
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	80da      	strh	r2, [r3, #6]
}
 800a396:	bf00      	nop
 800a398:	3710      	adds	r7, #16
 800a39a:	46bd      	mov	sp, r7
 800a39c:	bd80      	pop	{r7, pc}

0800a39e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a39e:	b580      	push	{r7, lr}
 800a3a0:	b082      	sub	sp, #8
 800a3a2:	af00      	add	r7, sp, #0
 800a3a4:	6078      	str	r0, [r7, #4]
 800a3a6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a3a8:	2180      	movs	r1, #128	@ 0x80
 800a3aa:	6878      	ldr	r0, [r7, #4]
 800a3ac:	f000 fd12 	bl	800add4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a3b0:	2100      	movs	r1, #0
 800a3b2:	6878      	ldr	r0, [r7, #4]
 800a3b4:	f000 fd0e 	bl	800add4 <USBD_LL_StallEP>
}
 800a3b8:	bf00      	nop
 800a3ba:	3708      	adds	r7, #8
 800a3bc:	46bd      	mov	sp, r7
 800a3be:	bd80      	pop	{r7, pc}

0800a3c0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a3c0:	b580      	push	{r7, lr}
 800a3c2:	b086      	sub	sp, #24
 800a3c4:	af00      	add	r7, sp, #0
 800a3c6:	60f8      	str	r0, [r7, #12]
 800a3c8:	60b9      	str	r1, [r7, #8]
 800a3ca:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a3cc:	2300      	movs	r3, #0
 800a3ce:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d042      	beq.n	800a45c <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800a3da:	6938      	ldr	r0, [r7, #16]
 800a3dc:	f000 f842 	bl	800a464 <USBD_GetLen>
 800a3e0:	4603      	mov	r3, r0
 800a3e2:	3301      	adds	r3, #1
 800a3e4:	005b      	lsls	r3, r3, #1
 800a3e6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a3ea:	d808      	bhi.n	800a3fe <USBD_GetString+0x3e>
 800a3ec:	6938      	ldr	r0, [r7, #16]
 800a3ee:	f000 f839 	bl	800a464 <USBD_GetLen>
 800a3f2:	4603      	mov	r3, r0
 800a3f4:	3301      	adds	r3, #1
 800a3f6:	b29b      	uxth	r3, r3
 800a3f8:	005b      	lsls	r3, r3, #1
 800a3fa:	b29a      	uxth	r2, r3
 800a3fc:	e001      	b.n	800a402 <USBD_GetString+0x42>
 800a3fe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a406:	7dfb      	ldrb	r3, [r7, #23]
 800a408:	68ba      	ldr	r2, [r7, #8]
 800a40a:	4413      	add	r3, r2
 800a40c:	687a      	ldr	r2, [r7, #4]
 800a40e:	7812      	ldrb	r2, [r2, #0]
 800a410:	701a      	strb	r2, [r3, #0]
  idx++;
 800a412:	7dfb      	ldrb	r3, [r7, #23]
 800a414:	3301      	adds	r3, #1
 800a416:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a418:	7dfb      	ldrb	r3, [r7, #23]
 800a41a:	68ba      	ldr	r2, [r7, #8]
 800a41c:	4413      	add	r3, r2
 800a41e:	2203      	movs	r2, #3
 800a420:	701a      	strb	r2, [r3, #0]
  idx++;
 800a422:	7dfb      	ldrb	r3, [r7, #23]
 800a424:	3301      	adds	r3, #1
 800a426:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a428:	e013      	b.n	800a452 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800a42a:	7dfb      	ldrb	r3, [r7, #23]
 800a42c:	68ba      	ldr	r2, [r7, #8]
 800a42e:	4413      	add	r3, r2
 800a430:	693a      	ldr	r2, [r7, #16]
 800a432:	7812      	ldrb	r2, [r2, #0]
 800a434:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a436:	693b      	ldr	r3, [r7, #16]
 800a438:	3301      	adds	r3, #1
 800a43a:	613b      	str	r3, [r7, #16]
    idx++;
 800a43c:	7dfb      	ldrb	r3, [r7, #23]
 800a43e:	3301      	adds	r3, #1
 800a440:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a442:	7dfb      	ldrb	r3, [r7, #23]
 800a444:	68ba      	ldr	r2, [r7, #8]
 800a446:	4413      	add	r3, r2
 800a448:	2200      	movs	r2, #0
 800a44a:	701a      	strb	r2, [r3, #0]
    idx++;
 800a44c:	7dfb      	ldrb	r3, [r7, #23]
 800a44e:	3301      	adds	r3, #1
 800a450:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a452:	693b      	ldr	r3, [r7, #16]
 800a454:	781b      	ldrb	r3, [r3, #0]
 800a456:	2b00      	cmp	r3, #0
 800a458:	d1e7      	bne.n	800a42a <USBD_GetString+0x6a>
 800a45a:	e000      	b.n	800a45e <USBD_GetString+0x9e>
    return;
 800a45c:	bf00      	nop
  }
}
 800a45e:	3718      	adds	r7, #24
 800a460:	46bd      	mov	sp, r7
 800a462:	bd80      	pop	{r7, pc}

0800a464 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a464:	b480      	push	{r7}
 800a466:	b085      	sub	sp, #20
 800a468:	af00      	add	r7, sp, #0
 800a46a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a46c:	2300      	movs	r3, #0
 800a46e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a474:	e005      	b.n	800a482 <USBD_GetLen+0x1e>
  {
    len++;
 800a476:	7bfb      	ldrb	r3, [r7, #15]
 800a478:	3301      	adds	r3, #1
 800a47a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a47c:	68bb      	ldr	r3, [r7, #8]
 800a47e:	3301      	adds	r3, #1
 800a480:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a482:	68bb      	ldr	r3, [r7, #8]
 800a484:	781b      	ldrb	r3, [r3, #0]
 800a486:	2b00      	cmp	r3, #0
 800a488:	d1f5      	bne.n	800a476 <USBD_GetLen+0x12>
  }

  return len;
 800a48a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a48c:	4618      	mov	r0, r3
 800a48e:	3714      	adds	r7, #20
 800a490:	46bd      	mov	sp, r7
 800a492:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a496:	4770      	bx	lr

0800a498 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a498:	b580      	push	{r7, lr}
 800a49a:	b084      	sub	sp, #16
 800a49c:	af00      	add	r7, sp, #0
 800a49e:	60f8      	str	r0, [r7, #12]
 800a4a0:	60b9      	str	r1, [r7, #8]
 800a4a2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	2202      	movs	r2, #2
 800a4a8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	687a      	ldr	r2, [r7, #4]
 800a4b0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	687a      	ldr	r2, [r7, #4]
 800a4b6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	68ba      	ldr	r2, [r7, #8]
 800a4bc:	2100      	movs	r1, #0
 800a4be:	68f8      	ldr	r0, [r7, #12]
 800a4c0:	f000 fd11 	bl	800aee6 <USBD_LL_Transmit>

  return USBD_OK;
 800a4c4:	2300      	movs	r3, #0
}
 800a4c6:	4618      	mov	r0, r3
 800a4c8:	3710      	adds	r7, #16
 800a4ca:	46bd      	mov	sp, r7
 800a4cc:	bd80      	pop	{r7, pc}

0800a4ce <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a4ce:	b580      	push	{r7, lr}
 800a4d0:	b084      	sub	sp, #16
 800a4d2:	af00      	add	r7, sp, #0
 800a4d4:	60f8      	str	r0, [r7, #12]
 800a4d6:	60b9      	str	r1, [r7, #8]
 800a4d8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	68ba      	ldr	r2, [r7, #8]
 800a4de:	2100      	movs	r1, #0
 800a4e0:	68f8      	ldr	r0, [r7, #12]
 800a4e2:	f000 fd00 	bl	800aee6 <USBD_LL_Transmit>

  return USBD_OK;
 800a4e6:	2300      	movs	r3, #0
}
 800a4e8:	4618      	mov	r0, r3
 800a4ea:	3710      	adds	r7, #16
 800a4ec:	46bd      	mov	sp, r7
 800a4ee:	bd80      	pop	{r7, pc}

0800a4f0 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a4f0:	b580      	push	{r7, lr}
 800a4f2:	b084      	sub	sp, #16
 800a4f4:	af00      	add	r7, sp, #0
 800a4f6:	60f8      	str	r0, [r7, #12]
 800a4f8:	60b9      	str	r1, [r7, #8]
 800a4fa:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	2203      	movs	r2, #3
 800a500:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	687a      	ldr	r2, [r7, #4]
 800a508:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	687a      	ldr	r2, [r7, #4]
 800a510:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	68ba      	ldr	r2, [r7, #8]
 800a518:	2100      	movs	r1, #0
 800a51a:	68f8      	ldr	r0, [r7, #12]
 800a51c:	f000 fd04 	bl	800af28 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a520:	2300      	movs	r3, #0
}
 800a522:	4618      	mov	r0, r3
 800a524:	3710      	adds	r7, #16
 800a526:	46bd      	mov	sp, r7
 800a528:	bd80      	pop	{r7, pc}

0800a52a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a52a:	b580      	push	{r7, lr}
 800a52c:	b084      	sub	sp, #16
 800a52e:	af00      	add	r7, sp, #0
 800a530:	60f8      	str	r0, [r7, #12]
 800a532:	60b9      	str	r1, [r7, #8]
 800a534:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	68ba      	ldr	r2, [r7, #8]
 800a53a:	2100      	movs	r1, #0
 800a53c:	68f8      	ldr	r0, [r7, #12]
 800a53e:	f000 fcf3 	bl	800af28 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a542:	2300      	movs	r3, #0
}
 800a544:	4618      	mov	r0, r3
 800a546:	3710      	adds	r7, #16
 800a548:	46bd      	mov	sp, r7
 800a54a:	bd80      	pop	{r7, pc}

0800a54c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a54c:	b580      	push	{r7, lr}
 800a54e:	b082      	sub	sp, #8
 800a550:	af00      	add	r7, sp, #0
 800a552:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	2204      	movs	r2, #4
 800a558:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a55c:	2300      	movs	r3, #0
 800a55e:	2200      	movs	r2, #0
 800a560:	2100      	movs	r1, #0
 800a562:	6878      	ldr	r0, [r7, #4]
 800a564:	f000 fcbf 	bl	800aee6 <USBD_LL_Transmit>

  return USBD_OK;
 800a568:	2300      	movs	r3, #0
}
 800a56a:	4618      	mov	r0, r3
 800a56c:	3708      	adds	r7, #8
 800a56e:	46bd      	mov	sp, r7
 800a570:	bd80      	pop	{r7, pc}

0800a572 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a572:	b580      	push	{r7, lr}
 800a574:	b082      	sub	sp, #8
 800a576:	af00      	add	r7, sp, #0
 800a578:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	2205      	movs	r2, #5
 800a57e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a582:	2300      	movs	r3, #0
 800a584:	2200      	movs	r2, #0
 800a586:	2100      	movs	r1, #0
 800a588:	6878      	ldr	r0, [r7, #4]
 800a58a:	f000 fccd 	bl	800af28 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a58e:	2300      	movs	r3, #0
}
 800a590:	4618      	mov	r0, r3
 800a592:	3708      	adds	r7, #8
 800a594:	46bd      	mov	sp, r7
 800a596:	bd80      	pop	{r7, pc}

0800a598 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a598:	b580      	push	{r7, lr}
 800a59a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a59c:	2200      	movs	r2, #0
 800a59e:	4912      	ldr	r1, [pc, #72]	@ (800a5e8 <MX_USB_DEVICE_Init+0x50>)
 800a5a0:	4812      	ldr	r0, [pc, #72]	@ (800a5ec <MX_USB_DEVICE_Init+0x54>)
 800a5a2:	f7fe fcf7 	bl	8008f94 <USBD_Init>
 800a5a6:	4603      	mov	r3, r0
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d001      	beq.n	800a5b0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a5ac:	f7f6 faca 	bl	8000b44 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a5b0:	490f      	ldr	r1, [pc, #60]	@ (800a5f0 <MX_USB_DEVICE_Init+0x58>)
 800a5b2:	480e      	ldr	r0, [pc, #56]	@ (800a5ec <MX_USB_DEVICE_Init+0x54>)
 800a5b4:	f7fe fd1e 	bl	8008ff4 <USBD_RegisterClass>
 800a5b8:	4603      	mov	r3, r0
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d001      	beq.n	800a5c2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a5be:	f7f6 fac1 	bl	8000b44 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a5c2:	490c      	ldr	r1, [pc, #48]	@ (800a5f4 <MX_USB_DEVICE_Init+0x5c>)
 800a5c4:	4809      	ldr	r0, [pc, #36]	@ (800a5ec <MX_USB_DEVICE_Init+0x54>)
 800a5c6:	f7fe fc15 	bl	8008df4 <USBD_CDC_RegisterInterface>
 800a5ca:	4603      	mov	r3, r0
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d001      	beq.n	800a5d4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a5d0:	f7f6 fab8 	bl	8000b44 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a5d4:	4805      	ldr	r0, [pc, #20]	@ (800a5ec <MX_USB_DEVICE_Init+0x54>)
 800a5d6:	f7fe fd43 	bl	8009060 <USBD_Start>
 800a5da:	4603      	mov	r3, r0
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d001      	beq.n	800a5e4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a5e0:	f7f6 fab0 	bl	8000b44 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a5e4:	bf00      	nop
 800a5e6:	bd80      	pop	{r7, pc}
 800a5e8:	200000bc 	.word	0x200000bc
 800a5ec:	2000e814 	.word	0x2000e814
 800a5f0:	20000028 	.word	0x20000028
 800a5f4:	200000a8 	.word	0x200000a8

0800a5f8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a5f8:	b580      	push	{r7, lr}
 800a5fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a5fc:	2200      	movs	r2, #0
 800a5fe:	4905      	ldr	r1, [pc, #20]	@ (800a614 <CDC_Init_FS+0x1c>)
 800a600:	4805      	ldr	r0, [pc, #20]	@ (800a618 <CDC_Init_FS+0x20>)
 800a602:	f7fe fc11 	bl	8008e28 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a606:	4905      	ldr	r1, [pc, #20]	@ (800a61c <CDC_Init_FS+0x24>)
 800a608:	4803      	ldr	r0, [pc, #12]	@ (800a618 <CDC_Init_FS+0x20>)
 800a60a:	f7fe fc2f 	bl	8008e6c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a60e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a610:	4618      	mov	r0, r3
 800a612:	bd80      	pop	{r7, pc}
 800a614:	2000f2f0 	.word	0x2000f2f0
 800a618:	2000e814 	.word	0x2000e814
 800a61c:	2000eaf0 	.word	0x2000eaf0

0800a620 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a620:	b480      	push	{r7}
 800a622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a624:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a626:	4618      	mov	r0, r3
 800a628:	46bd      	mov	sp, r7
 800a62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a62e:	4770      	bx	lr

0800a630 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a630:	b480      	push	{r7}
 800a632:	b083      	sub	sp, #12
 800a634:	af00      	add	r7, sp, #0
 800a636:	4603      	mov	r3, r0
 800a638:	6039      	str	r1, [r7, #0]
 800a63a:	71fb      	strb	r3, [r7, #7]
 800a63c:	4613      	mov	r3, r2
 800a63e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a640:	79fb      	ldrb	r3, [r7, #7]
 800a642:	2b23      	cmp	r3, #35	@ 0x23
 800a644:	d84a      	bhi.n	800a6dc <CDC_Control_FS+0xac>
 800a646:	a201      	add	r2, pc, #4	@ (adr r2, 800a64c <CDC_Control_FS+0x1c>)
 800a648:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a64c:	0800a6dd 	.word	0x0800a6dd
 800a650:	0800a6dd 	.word	0x0800a6dd
 800a654:	0800a6dd 	.word	0x0800a6dd
 800a658:	0800a6dd 	.word	0x0800a6dd
 800a65c:	0800a6dd 	.word	0x0800a6dd
 800a660:	0800a6dd 	.word	0x0800a6dd
 800a664:	0800a6dd 	.word	0x0800a6dd
 800a668:	0800a6dd 	.word	0x0800a6dd
 800a66c:	0800a6dd 	.word	0x0800a6dd
 800a670:	0800a6dd 	.word	0x0800a6dd
 800a674:	0800a6dd 	.word	0x0800a6dd
 800a678:	0800a6dd 	.word	0x0800a6dd
 800a67c:	0800a6dd 	.word	0x0800a6dd
 800a680:	0800a6dd 	.word	0x0800a6dd
 800a684:	0800a6dd 	.word	0x0800a6dd
 800a688:	0800a6dd 	.word	0x0800a6dd
 800a68c:	0800a6dd 	.word	0x0800a6dd
 800a690:	0800a6dd 	.word	0x0800a6dd
 800a694:	0800a6dd 	.word	0x0800a6dd
 800a698:	0800a6dd 	.word	0x0800a6dd
 800a69c:	0800a6dd 	.word	0x0800a6dd
 800a6a0:	0800a6dd 	.word	0x0800a6dd
 800a6a4:	0800a6dd 	.word	0x0800a6dd
 800a6a8:	0800a6dd 	.word	0x0800a6dd
 800a6ac:	0800a6dd 	.word	0x0800a6dd
 800a6b0:	0800a6dd 	.word	0x0800a6dd
 800a6b4:	0800a6dd 	.word	0x0800a6dd
 800a6b8:	0800a6dd 	.word	0x0800a6dd
 800a6bc:	0800a6dd 	.word	0x0800a6dd
 800a6c0:	0800a6dd 	.word	0x0800a6dd
 800a6c4:	0800a6dd 	.word	0x0800a6dd
 800a6c8:	0800a6dd 	.word	0x0800a6dd
 800a6cc:	0800a6dd 	.word	0x0800a6dd
 800a6d0:	0800a6dd 	.word	0x0800a6dd
 800a6d4:	0800a6dd 	.word	0x0800a6dd
 800a6d8:	0800a6dd 	.word	0x0800a6dd
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a6dc:	bf00      	nop
  }

  return (USBD_OK);
 800a6de:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a6e0:	4618      	mov	r0, r3
 800a6e2:	370c      	adds	r7, #12
 800a6e4:	46bd      	mov	sp, r7
 800a6e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ea:	4770      	bx	lr

0800a6ec <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a6ec:	b580      	push	{r7, lr}
 800a6ee:	b082      	sub	sp, #8
 800a6f0:	af00      	add	r7, sp, #0
 800a6f2:	6078      	str	r0, [r7, #4]
 800a6f4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a6f6:	6879      	ldr	r1, [r7, #4]
 800a6f8:	4805      	ldr	r0, [pc, #20]	@ (800a710 <CDC_Receive_FS+0x24>)
 800a6fa:	f7fe fbb7 	bl	8008e6c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a6fe:	4804      	ldr	r0, [pc, #16]	@ (800a710 <CDC_Receive_FS+0x24>)
 800a700:	f7fe fc12 	bl	8008f28 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800a704:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a706:	4618      	mov	r0, r3
 800a708:	3708      	adds	r7, #8
 800a70a:	46bd      	mov	sp, r7
 800a70c:	bd80      	pop	{r7, pc}
 800a70e:	bf00      	nop
 800a710:	2000e814 	.word	0x2000e814

0800a714 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800a714:	b580      	push	{r7, lr}
 800a716:	b084      	sub	sp, #16
 800a718:	af00      	add	r7, sp, #0
 800a71a:	6078      	str	r0, [r7, #4]
 800a71c:	460b      	mov	r3, r1
 800a71e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800a720:	2300      	movs	r3, #0
 800a722:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800a724:	4b0d      	ldr	r3, [pc, #52]	@ (800a75c <CDC_Transmit_FS+0x48>)
 800a726:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a72a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800a72c:	68bb      	ldr	r3, [r7, #8]
 800a72e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800a732:	2b00      	cmp	r3, #0
 800a734:	d001      	beq.n	800a73a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800a736:	2301      	movs	r3, #1
 800a738:	e00b      	b.n	800a752 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800a73a:	887b      	ldrh	r3, [r7, #2]
 800a73c:	461a      	mov	r2, r3
 800a73e:	6879      	ldr	r1, [r7, #4]
 800a740:	4806      	ldr	r0, [pc, #24]	@ (800a75c <CDC_Transmit_FS+0x48>)
 800a742:	f7fe fb71 	bl	8008e28 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800a746:	4805      	ldr	r0, [pc, #20]	@ (800a75c <CDC_Transmit_FS+0x48>)
 800a748:	f7fe fbae 	bl	8008ea8 <USBD_CDC_TransmitPacket>
 800a74c:	4603      	mov	r3, r0
 800a74e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800a750:	7bfb      	ldrb	r3, [r7, #15]
}
 800a752:	4618      	mov	r0, r3
 800a754:	3710      	adds	r7, #16
 800a756:	46bd      	mov	sp, r7
 800a758:	bd80      	pop	{r7, pc}
 800a75a:	bf00      	nop
 800a75c:	2000e814 	.word	0x2000e814

0800a760 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800a760:	b480      	push	{r7}
 800a762:	b087      	sub	sp, #28
 800a764:	af00      	add	r7, sp, #0
 800a766:	60f8      	str	r0, [r7, #12]
 800a768:	60b9      	str	r1, [r7, #8]
 800a76a:	4613      	mov	r3, r2
 800a76c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800a76e:	2300      	movs	r3, #0
 800a770:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800a772:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a776:	4618      	mov	r0, r3
 800a778:	371c      	adds	r7, #28
 800a77a:	46bd      	mov	sp, r7
 800a77c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a780:	4770      	bx	lr
	...

0800a784 <CDC_Transmit_Is_Busy>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
uint8_t CDC_Transmit_Is_Busy(void){
 800a784:	b480      	push	{r7}
 800a786:	b083      	sub	sp, #12
 800a788:	af00      	add	r7, sp, #0
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800a78a:	4b09      	ldr	r3, [pc, #36]	@ (800a7b0 <CDC_Transmit_Is_Busy+0x2c>)
 800a78c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a790:	607b      	str	r3, [r7, #4]
  if (hcdc->TxState != 0)
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d001      	beq.n	800a7a0 <CDC_Transmit_Is_Busy+0x1c>
    return USBD_BUSY;
 800a79c:	2301      	movs	r3, #1
 800a79e:	e000      	b.n	800a7a2 <CDC_Transmit_Is_Busy+0x1e>
  else
    return USBD_OK;
 800a7a0:	2300      	movs	r3, #0
}
 800a7a2:	4618      	mov	r0, r3
 800a7a4:	370c      	adds	r7, #12
 800a7a6:	46bd      	mov	sp, r7
 800a7a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ac:	4770      	bx	lr
 800a7ae:	bf00      	nop
 800a7b0:	2000e814 	.word	0x2000e814

0800a7b4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a7b4:	b480      	push	{r7}
 800a7b6:	b083      	sub	sp, #12
 800a7b8:	af00      	add	r7, sp, #0
 800a7ba:	4603      	mov	r3, r0
 800a7bc:	6039      	str	r1, [r7, #0]
 800a7be:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a7c0:	683b      	ldr	r3, [r7, #0]
 800a7c2:	2212      	movs	r2, #18
 800a7c4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a7c6:	4b03      	ldr	r3, [pc, #12]	@ (800a7d4 <USBD_FS_DeviceDescriptor+0x20>)
}
 800a7c8:	4618      	mov	r0, r3
 800a7ca:	370c      	adds	r7, #12
 800a7cc:	46bd      	mov	sp, r7
 800a7ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d2:	4770      	bx	lr
 800a7d4:	200000d8 	.word	0x200000d8

0800a7d8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a7d8:	b480      	push	{r7}
 800a7da:	b083      	sub	sp, #12
 800a7dc:	af00      	add	r7, sp, #0
 800a7de:	4603      	mov	r3, r0
 800a7e0:	6039      	str	r1, [r7, #0]
 800a7e2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a7e4:	683b      	ldr	r3, [r7, #0]
 800a7e6:	2204      	movs	r2, #4
 800a7e8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a7ea:	4b03      	ldr	r3, [pc, #12]	@ (800a7f8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a7ec:	4618      	mov	r0, r3
 800a7ee:	370c      	adds	r7, #12
 800a7f0:	46bd      	mov	sp, r7
 800a7f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f6:	4770      	bx	lr
 800a7f8:	200000ec 	.word	0x200000ec

0800a7fc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a7fc:	b580      	push	{r7, lr}
 800a7fe:	b082      	sub	sp, #8
 800a800:	af00      	add	r7, sp, #0
 800a802:	4603      	mov	r3, r0
 800a804:	6039      	str	r1, [r7, #0]
 800a806:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a808:	79fb      	ldrb	r3, [r7, #7]
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d105      	bne.n	800a81a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a80e:	683a      	ldr	r2, [r7, #0]
 800a810:	4907      	ldr	r1, [pc, #28]	@ (800a830 <USBD_FS_ProductStrDescriptor+0x34>)
 800a812:	4808      	ldr	r0, [pc, #32]	@ (800a834 <USBD_FS_ProductStrDescriptor+0x38>)
 800a814:	f7ff fdd4 	bl	800a3c0 <USBD_GetString>
 800a818:	e004      	b.n	800a824 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a81a:	683a      	ldr	r2, [r7, #0]
 800a81c:	4904      	ldr	r1, [pc, #16]	@ (800a830 <USBD_FS_ProductStrDescriptor+0x34>)
 800a81e:	4805      	ldr	r0, [pc, #20]	@ (800a834 <USBD_FS_ProductStrDescriptor+0x38>)
 800a820:	f7ff fdce 	bl	800a3c0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a824:	4b02      	ldr	r3, [pc, #8]	@ (800a830 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a826:	4618      	mov	r0, r3
 800a828:	3708      	adds	r7, #8
 800a82a:	46bd      	mov	sp, r7
 800a82c:	bd80      	pop	{r7, pc}
 800a82e:	bf00      	nop
 800a830:	2000faf0 	.word	0x2000faf0
 800a834:	0800c090 	.word	0x0800c090

0800a838 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a838:	b580      	push	{r7, lr}
 800a83a:	b082      	sub	sp, #8
 800a83c:	af00      	add	r7, sp, #0
 800a83e:	4603      	mov	r3, r0
 800a840:	6039      	str	r1, [r7, #0]
 800a842:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a844:	683a      	ldr	r2, [r7, #0]
 800a846:	4904      	ldr	r1, [pc, #16]	@ (800a858 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a848:	4804      	ldr	r0, [pc, #16]	@ (800a85c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a84a:	f7ff fdb9 	bl	800a3c0 <USBD_GetString>
  return USBD_StrDesc;
 800a84e:	4b02      	ldr	r3, [pc, #8]	@ (800a858 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a850:	4618      	mov	r0, r3
 800a852:	3708      	adds	r7, #8
 800a854:	46bd      	mov	sp, r7
 800a856:	bd80      	pop	{r7, pc}
 800a858:	2000faf0 	.word	0x2000faf0
 800a85c:	0800c0a8 	.word	0x0800c0a8

0800a860 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a860:	b580      	push	{r7, lr}
 800a862:	b082      	sub	sp, #8
 800a864:	af00      	add	r7, sp, #0
 800a866:	4603      	mov	r3, r0
 800a868:	6039      	str	r1, [r7, #0]
 800a86a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a86c:	683b      	ldr	r3, [r7, #0]
 800a86e:	221a      	movs	r2, #26
 800a870:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a872:	f000 f843 	bl	800a8fc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a876:	4b02      	ldr	r3, [pc, #8]	@ (800a880 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a878:	4618      	mov	r0, r3
 800a87a:	3708      	adds	r7, #8
 800a87c:	46bd      	mov	sp, r7
 800a87e:	bd80      	pop	{r7, pc}
 800a880:	200000f0 	.word	0x200000f0

0800a884 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a884:	b580      	push	{r7, lr}
 800a886:	b082      	sub	sp, #8
 800a888:	af00      	add	r7, sp, #0
 800a88a:	4603      	mov	r3, r0
 800a88c:	6039      	str	r1, [r7, #0]
 800a88e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a890:	79fb      	ldrb	r3, [r7, #7]
 800a892:	2b00      	cmp	r3, #0
 800a894:	d105      	bne.n	800a8a2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a896:	683a      	ldr	r2, [r7, #0]
 800a898:	4907      	ldr	r1, [pc, #28]	@ (800a8b8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a89a:	4808      	ldr	r0, [pc, #32]	@ (800a8bc <USBD_FS_ConfigStrDescriptor+0x38>)
 800a89c:	f7ff fd90 	bl	800a3c0 <USBD_GetString>
 800a8a0:	e004      	b.n	800a8ac <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a8a2:	683a      	ldr	r2, [r7, #0]
 800a8a4:	4904      	ldr	r1, [pc, #16]	@ (800a8b8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a8a6:	4805      	ldr	r0, [pc, #20]	@ (800a8bc <USBD_FS_ConfigStrDescriptor+0x38>)
 800a8a8:	f7ff fd8a 	bl	800a3c0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a8ac:	4b02      	ldr	r3, [pc, #8]	@ (800a8b8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a8ae:	4618      	mov	r0, r3
 800a8b0:	3708      	adds	r7, #8
 800a8b2:	46bd      	mov	sp, r7
 800a8b4:	bd80      	pop	{r7, pc}
 800a8b6:	bf00      	nop
 800a8b8:	2000faf0 	.word	0x2000faf0
 800a8bc:	0800c0bc 	.word	0x0800c0bc

0800a8c0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a8c0:	b580      	push	{r7, lr}
 800a8c2:	b082      	sub	sp, #8
 800a8c4:	af00      	add	r7, sp, #0
 800a8c6:	4603      	mov	r3, r0
 800a8c8:	6039      	str	r1, [r7, #0]
 800a8ca:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a8cc:	79fb      	ldrb	r3, [r7, #7]
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d105      	bne.n	800a8de <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a8d2:	683a      	ldr	r2, [r7, #0]
 800a8d4:	4907      	ldr	r1, [pc, #28]	@ (800a8f4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a8d6:	4808      	ldr	r0, [pc, #32]	@ (800a8f8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a8d8:	f7ff fd72 	bl	800a3c0 <USBD_GetString>
 800a8dc:	e004      	b.n	800a8e8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a8de:	683a      	ldr	r2, [r7, #0]
 800a8e0:	4904      	ldr	r1, [pc, #16]	@ (800a8f4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a8e2:	4805      	ldr	r0, [pc, #20]	@ (800a8f8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a8e4:	f7ff fd6c 	bl	800a3c0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a8e8:	4b02      	ldr	r3, [pc, #8]	@ (800a8f4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a8ea:	4618      	mov	r0, r3
 800a8ec:	3708      	adds	r7, #8
 800a8ee:	46bd      	mov	sp, r7
 800a8f0:	bd80      	pop	{r7, pc}
 800a8f2:	bf00      	nop
 800a8f4:	2000faf0 	.word	0x2000faf0
 800a8f8:	0800c0c8 	.word	0x0800c0c8

0800a8fc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a8fc:	b580      	push	{r7, lr}
 800a8fe:	b084      	sub	sp, #16
 800a900:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a902:	4b0f      	ldr	r3, [pc, #60]	@ (800a940 <Get_SerialNum+0x44>)
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a908:	4b0e      	ldr	r3, [pc, #56]	@ (800a944 <Get_SerialNum+0x48>)
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a90e:	4b0e      	ldr	r3, [pc, #56]	@ (800a948 <Get_SerialNum+0x4c>)
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a914:	68fa      	ldr	r2, [r7, #12]
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	4413      	add	r3, r2
 800a91a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d009      	beq.n	800a936 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a922:	2208      	movs	r2, #8
 800a924:	4909      	ldr	r1, [pc, #36]	@ (800a94c <Get_SerialNum+0x50>)
 800a926:	68f8      	ldr	r0, [r7, #12]
 800a928:	f000 f814 	bl	800a954 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a92c:	2204      	movs	r2, #4
 800a92e:	4908      	ldr	r1, [pc, #32]	@ (800a950 <Get_SerialNum+0x54>)
 800a930:	68b8      	ldr	r0, [r7, #8]
 800a932:	f000 f80f 	bl	800a954 <IntToUnicode>
  }
}
 800a936:	bf00      	nop
 800a938:	3710      	adds	r7, #16
 800a93a:	46bd      	mov	sp, r7
 800a93c:	bd80      	pop	{r7, pc}
 800a93e:	bf00      	nop
 800a940:	1fff7a10 	.word	0x1fff7a10
 800a944:	1fff7a14 	.word	0x1fff7a14
 800a948:	1fff7a18 	.word	0x1fff7a18
 800a94c:	200000f2 	.word	0x200000f2
 800a950:	20000102 	.word	0x20000102

0800a954 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a954:	b480      	push	{r7}
 800a956:	b087      	sub	sp, #28
 800a958:	af00      	add	r7, sp, #0
 800a95a:	60f8      	str	r0, [r7, #12]
 800a95c:	60b9      	str	r1, [r7, #8]
 800a95e:	4613      	mov	r3, r2
 800a960:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a962:	2300      	movs	r3, #0
 800a964:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a966:	2300      	movs	r3, #0
 800a968:	75fb      	strb	r3, [r7, #23]
 800a96a:	e027      	b.n	800a9bc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	0f1b      	lsrs	r3, r3, #28
 800a970:	2b09      	cmp	r3, #9
 800a972:	d80b      	bhi.n	800a98c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	0f1b      	lsrs	r3, r3, #28
 800a978:	b2da      	uxtb	r2, r3
 800a97a:	7dfb      	ldrb	r3, [r7, #23]
 800a97c:	005b      	lsls	r3, r3, #1
 800a97e:	4619      	mov	r1, r3
 800a980:	68bb      	ldr	r3, [r7, #8]
 800a982:	440b      	add	r3, r1
 800a984:	3230      	adds	r2, #48	@ 0x30
 800a986:	b2d2      	uxtb	r2, r2
 800a988:	701a      	strb	r2, [r3, #0]
 800a98a:	e00a      	b.n	800a9a2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	0f1b      	lsrs	r3, r3, #28
 800a990:	b2da      	uxtb	r2, r3
 800a992:	7dfb      	ldrb	r3, [r7, #23]
 800a994:	005b      	lsls	r3, r3, #1
 800a996:	4619      	mov	r1, r3
 800a998:	68bb      	ldr	r3, [r7, #8]
 800a99a:	440b      	add	r3, r1
 800a99c:	3237      	adds	r2, #55	@ 0x37
 800a99e:	b2d2      	uxtb	r2, r2
 800a9a0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	011b      	lsls	r3, r3, #4
 800a9a6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a9a8:	7dfb      	ldrb	r3, [r7, #23]
 800a9aa:	005b      	lsls	r3, r3, #1
 800a9ac:	3301      	adds	r3, #1
 800a9ae:	68ba      	ldr	r2, [r7, #8]
 800a9b0:	4413      	add	r3, r2
 800a9b2:	2200      	movs	r2, #0
 800a9b4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a9b6:	7dfb      	ldrb	r3, [r7, #23]
 800a9b8:	3301      	adds	r3, #1
 800a9ba:	75fb      	strb	r3, [r7, #23]
 800a9bc:	7dfa      	ldrb	r2, [r7, #23]
 800a9be:	79fb      	ldrb	r3, [r7, #7]
 800a9c0:	429a      	cmp	r2, r3
 800a9c2:	d3d3      	bcc.n	800a96c <IntToUnicode+0x18>
  }
}
 800a9c4:	bf00      	nop
 800a9c6:	bf00      	nop
 800a9c8:	371c      	adds	r7, #28
 800a9ca:	46bd      	mov	sp, r7
 800a9cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d0:	4770      	bx	lr
	...

0800a9d4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a9d4:	b580      	push	{r7, lr}
 800a9d6:	b08a      	sub	sp, #40	@ 0x28
 800a9d8:	af00      	add	r7, sp, #0
 800a9da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a9dc:	f107 0314 	add.w	r3, r7, #20
 800a9e0:	2200      	movs	r2, #0
 800a9e2:	601a      	str	r2, [r3, #0]
 800a9e4:	605a      	str	r2, [r3, #4]
 800a9e6:	609a      	str	r2, [r3, #8]
 800a9e8:	60da      	str	r2, [r3, #12]
 800a9ea:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a9f4:	d147      	bne.n	800aa86 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a9f6:	2300      	movs	r3, #0
 800a9f8:	613b      	str	r3, [r7, #16]
 800a9fa:	4b25      	ldr	r3, [pc, #148]	@ (800aa90 <HAL_PCD_MspInit+0xbc>)
 800a9fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a9fe:	4a24      	ldr	r2, [pc, #144]	@ (800aa90 <HAL_PCD_MspInit+0xbc>)
 800aa00:	f043 0301 	orr.w	r3, r3, #1
 800aa04:	6313      	str	r3, [r2, #48]	@ 0x30
 800aa06:	4b22      	ldr	r3, [pc, #136]	@ (800aa90 <HAL_PCD_MspInit+0xbc>)
 800aa08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aa0a:	f003 0301 	and.w	r3, r3, #1
 800aa0e:	613b      	str	r3, [r7, #16]
 800aa10:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800aa12:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 800aa16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800aa18:	2302      	movs	r3, #2
 800aa1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aa1c:	2300      	movs	r3, #0
 800aa1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800aa20:	2303      	movs	r3, #3
 800aa22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800aa24:	230a      	movs	r3, #10
 800aa26:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800aa28:	f107 0314 	add.w	r3, r7, #20
 800aa2c:	4619      	mov	r1, r3
 800aa2e:	4819      	ldr	r0, [pc, #100]	@ (800aa94 <HAL_PCD_MspInit+0xc0>)
 800aa30:	f7f8 fbac 	bl	800318c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800aa34:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800aa38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800aa3a:	2300      	movs	r3, #0
 800aa3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aa3e:	2300      	movs	r3, #0
 800aa40:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800aa42:	f107 0314 	add.w	r3, r7, #20
 800aa46:	4619      	mov	r1, r3
 800aa48:	4812      	ldr	r0, [pc, #72]	@ (800aa94 <HAL_PCD_MspInit+0xc0>)
 800aa4a:	f7f8 fb9f 	bl	800318c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800aa4e:	4b10      	ldr	r3, [pc, #64]	@ (800aa90 <HAL_PCD_MspInit+0xbc>)
 800aa50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aa52:	4a0f      	ldr	r2, [pc, #60]	@ (800aa90 <HAL_PCD_MspInit+0xbc>)
 800aa54:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aa58:	6353      	str	r3, [r2, #52]	@ 0x34
 800aa5a:	2300      	movs	r3, #0
 800aa5c:	60fb      	str	r3, [r7, #12]
 800aa5e:	4b0c      	ldr	r3, [pc, #48]	@ (800aa90 <HAL_PCD_MspInit+0xbc>)
 800aa60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aa62:	4a0b      	ldr	r2, [pc, #44]	@ (800aa90 <HAL_PCD_MspInit+0xbc>)
 800aa64:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800aa68:	6453      	str	r3, [r2, #68]	@ 0x44
 800aa6a:	4b09      	ldr	r3, [pc, #36]	@ (800aa90 <HAL_PCD_MspInit+0xbc>)
 800aa6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aa6e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800aa72:	60fb      	str	r3, [r7, #12]
 800aa74:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800aa76:	2200      	movs	r2, #0
 800aa78:	2100      	movs	r1, #0
 800aa7a:	2043      	movs	r0, #67	@ 0x43
 800aa7c:	f7f7 fbfd 	bl	800227a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800aa80:	2043      	movs	r0, #67	@ 0x43
 800aa82:	f7f7 fc16 	bl	80022b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800aa86:	bf00      	nop
 800aa88:	3728      	adds	r7, #40	@ 0x28
 800aa8a:	46bd      	mov	sp, r7
 800aa8c:	bd80      	pop	{r7, pc}
 800aa8e:	bf00      	nop
 800aa90:	40023800 	.word	0x40023800
 800aa94:	40020000 	.word	0x40020000

0800aa98 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa98:	b580      	push	{r7, lr}
 800aa9a:	b082      	sub	sp, #8
 800aa9c:	af00      	add	r7, sp, #0
 800aa9e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800aaac:	4619      	mov	r1, r3
 800aaae:	4610      	mov	r0, r2
 800aab0:	f7fe fb23 	bl	80090fa <USBD_LL_SetupStage>
}
 800aab4:	bf00      	nop
 800aab6:	3708      	adds	r7, #8
 800aab8:	46bd      	mov	sp, r7
 800aaba:	bd80      	pop	{r7, pc}

0800aabc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aabc:	b580      	push	{r7, lr}
 800aabe:	b082      	sub	sp, #8
 800aac0:	af00      	add	r7, sp, #0
 800aac2:	6078      	str	r0, [r7, #4]
 800aac4:	460b      	mov	r3, r1
 800aac6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800aace:	78fa      	ldrb	r2, [r7, #3]
 800aad0:	6879      	ldr	r1, [r7, #4]
 800aad2:	4613      	mov	r3, r2
 800aad4:	00db      	lsls	r3, r3, #3
 800aad6:	4413      	add	r3, r2
 800aad8:	009b      	lsls	r3, r3, #2
 800aada:	440b      	add	r3, r1
 800aadc:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800aae0:	681a      	ldr	r2, [r3, #0]
 800aae2:	78fb      	ldrb	r3, [r7, #3]
 800aae4:	4619      	mov	r1, r3
 800aae6:	f7fe fb5d 	bl	80091a4 <USBD_LL_DataOutStage>
}
 800aaea:	bf00      	nop
 800aaec:	3708      	adds	r7, #8
 800aaee:	46bd      	mov	sp, r7
 800aaf0:	bd80      	pop	{r7, pc}

0800aaf2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aaf2:	b580      	push	{r7, lr}
 800aaf4:	b082      	sub	sp, #8
 800aaf6:	af00      	add	r7, sp, #0
 800aaf8:	6078      	str	r0, [r7, #4]
 800aafa:	460b      	mov	r3, r1
 800aafc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800ab04:	78fa      	ldrb	r2, [r7, #3]
 800ab06:	6879      	ldr	r1, [r7, #4]
 800ab08:	4613      	mov	r3, r2
 800ab0a:	00db      	lsls	r3, r3, #3
 800ab0c:	4413      	add	r3, r2
 800ab0e:	009b      	lsls	r3, r3, #2
 800ab10:	440b      	add	r3, r1
 800ab12:	3320      	adds	r3, #32
 800ab14:	681a      	ldr	r2, [r3, #0]
 800ab16:	78fb      	ldrb	r3, [r7, #3]
 800ab18:	4619      	mov	r1, r3
 800ab1a:	f7fe fbf6 	bl	800930a <USBD_LL_DataInStage>
}
 800ab1e:	bf00      	nop
 800ab20:	3708      	adds	r7, #8
 800ab22:	46bd      	mov	sp, r7
 800ab24:	bd80      	pop	{r7, pc}

0800ab26 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ab26:	b580      	push	{r7, lr}
 800ab28:	b082      	sub	sp, #8
 800ab2a:	af00      	add	r7, sp, #0
 800ab2c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ab34:	4618      	mov	r0, r3
 800ab36:	f7fe fd30 	bl	800959a <USBD_LL_SOF>
}
 800ab3a:	bf00      	nop
 800ab3c:	3708      	adds	r7, #8
 800ab3e:	46bd      	mov	sp, r7
 800ab40:	bd80      	pop	{r7, pc}

0800ab42 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ab42:	b580      	push	{r7, lr}
 800ab44:	b084      	sub	sp, #16
 800ab46:	af00      	add	r7, sp, #0
 800ab48:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ab4a:	2301      	movs	r3, #1
 800ab4c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	79db      	ldrb	r3, [r3, #7]
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d102      	bne.n	800ab5c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800ab56:	2300      	movs	r3, #0
 800ab58:	73fb      	strb	r3, [r7, #15]
 800ab5a:	e008      	b.n	800ab6e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	79db      	ldrb	r3, [r3, #7]
 800ab60:	2b02      	cmp	r3, #2
 800ab62:	d102      	bne.n	800ab6a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800ab64:	2301      	movs	r3, #1
 800ab66:	73fb      	strb	r3, [r7, #15]
 800ab68:	e001      	b.n	800ab6e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800ab6a:	f7f5 ffeb 	bl	8000b44 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ab74:	7bfa      	ldrb	r2, [r7, #15]
 800ab76:	4611      	mov	r1, r2
 800ab78:	4618      	mov	r0, r3
 800ab7a:	f7fe fcca 	bl	8009512 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ab84:	4618      	mov	r0, r3
 800ab86:	f7fe fc72 	bl	800946e <USBD_LL_Reset>
}
 800ab8a:	bf00      	nop
 800ab8c:	3710      	adds	r7, #16
 800ab8e:	46bd      	mov	sp, r7
 800ab90:	bd80      	pop	{r7, pc}
	...

0800ab94 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ab94:	b580      	push	{r7, lr}
 800ab96:	b082      	sub	sp, #8
 800ab98:	af00      	add	r7, sp, #0
 800ab9a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800aba2:	4618      	mov	r0, r3
 800aba4:	f7fe fcc5 	bl	8009532 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	687a      	ldr	r2, [r7, #4]
 800abb4:	6812      	ldr	r2, [r2, #0]
 800abb6:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800abba:	f043 0301 	orr.w	r3, r3, #1
 800abbe:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	7adb      	ldrb	r3, [r3, #11]
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d005      	beq.n	800abd4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800abc8:	4b04      	ldr	r3, [pc, #16]	@ (800abdc <HAL_PCD_SuspendCallback+0x48>)
 800abca:	691b      	ldr	r3, [r3, #16]
 800abcc:	4a03      	ldr	r2, [pc, #12]	@ (800abdc <HAL_PCD_SuspendCallback+0x48>)
 800abce:	f043 0306 	orr.w	r3, r3, #6
 800abd2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800abd4:	bf00      	nop
 800abd6:	3708      	adds	r7, #8
 800abd8:	46bd      	mov	sp, r7
 800abda:	bd80      	pop	{r7, pc}
 800abdc:	e000ed00 	.word	0xe000ed00

0800abe0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800abe0:	b580      	push	{r7, lr}
 800abe2:	b082      	sub	sp, #8
 800abe4:	af00      	add	r7, sp, #0
 800abe6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800abee:	4618      	mov	r0, r3
 800abf0:	f7fe fcbb 	bl	800956a <USBD_LL_Resume>
}
 800abf4:	bf00      	nop
 800abf6:	3708      	adds	r7, #8
 800abf8:	46bd      	mov	sp, r7
 800abfa:	bd80      	pop	{r7, pc}

0800abfc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800abfc:	b580      	push	{r7, lr}
 800abfe:	b082      	sub	sp, #8
 800ac00:	af00      	add	r7, sp, #0
 800ac02:	6078      	str	r0, [r7, #4]
 800ac04:	460b      	mov	r3, r1
 800ac06:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ac0e:	78fa      	ldrb	r2, [r7, #3]
 800ac10:	4611      	mov	r1, r2
 800ac12:	4618      	mov	r0, r3
 800ac14:	f7fe fd13 	bl	800963e <USBD_LL_IsoOUTIncomplete>
}
 800ac18:	bf00      	nop
 800ac1a:	3708      	adds	r7, #8
 800ac1c:	46bd      	mov	sp, r7
 800ac1e:	bd80      	pop	{r7, pc}

0800ac20 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ac20:	b580      	push	{r7, lr}
 800ac22:	b082      	sub	sp, #8
 800ac24:	af00      	add	r7, sp, #0
 800ac26:	6078      	str	r0, [r7, #4]
 800ac28:	460b      	mov	r3, r1
 800ac2a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ac32:	78fa      	ldrb	r2, [r7, #3]
 800ac34:	4611      	mov	r1, r2
 800ac36:	4618      	mov	r0, r3
 800ac38:	f7fe fccf 	bl	80095da <USBD_LL_IsoINIncomplete>
}
 800ac3c:	bf00      	nop
 800ac3e:	3708      	adds	r7, #8
 800ac40:	46bd      	mov	sp, r7
 800ac42:	bd80      	pop	{r7, pc}

0800ac44 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ac44:	b580      	push	{r7, lr}
 800ac46:	b082      	sub	sp, #8
 800ac48:	af00      	add	r7, sp, #0
 800ac4a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ac52:	4618      	mov	r0, r3
 800ac54:	f7fe fd25 	bl	80096a2 <USBD_LL_DevConnected>
}
 800ac58:	bf00      	nop
 800ac5a:	3708      	adds	r7, #8
 800ac5c:	46bd      	mov	sp, r7
 800ac5e:	bd80      	pop	{r7, pc}

0800ac60 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ac60:	b580      	push	{r7, lr}
 800ac62:	b082      	sub	sp, #8
 800ac64:	af00      	add	r7, sp, #0
 800ac66:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ac6e:	4618      	mov	r0, r3
 800ac70:	f7fe fd22 	bl	80096b8 <USBD_LL_DevDisconnected>
}
 800ac74:	bf00      	nop
 800ac76:	3708      	adds	r7, #8
 800ac78:	46bd      	mov	sp, r7
 800ac7a:	bd80      	pop	{r7, pc}

0800ac7c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ac7c:	b580      	push	{r7, lr}
 800ac7e:	b082      	sub	sp, #8
 800ac80:	af00      	add	r7, sp, #0
 800ac82:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	781b      	ldrb	r3, [r3, #0]
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d13c      	bne.n	800ad06 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800ac8c:	4a20      	ldr	r2, [pc, #128]	@ (800ad10 <USBD_LL_Init+0x94>)
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	4a1e      	ldr	r2, [pc, #120]	@ (800ad10 <USBD_LL_Init+0x94>)
 800ac98:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800ac9c:	4b1c      	ldr	r3, [pc, #112]	@ (800ad10 <USBD_LL_Init+0x94>)
 800ac9e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800aca2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800aca4:	4b1a      	ldr	r3, [pc, #104]	@ (800ad10 <USBD_LL_Init+0x94>)
 800aca6:	2204      	movs	r2, #4
 800aca8:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800acaa:	4b19      	ldr	r3, [pc, #100]	@ (800ad10 <USBD_LL_Init+0x94>)
 800acac:	2202      	movs	r2, #2
 800acae:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800acb0:	4b17      	ldr	r3, [pc, #92]	@ (800ad10 <USBD_LL_Init+0x94>)
 800acb2:	2200      	movs	r2, #0
 800acb4:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800acb6:	4b16      	ldr	r3, [pc, #88]	@ (800ad10 <USBD_LL_Init+0x94>)
 800acb8:	2202      	movs	r2, #2
 800acba:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800acbc:	4b14      	ldr	r3, [pc, #80]	@ (800ad10 <USBD_LL_Init+0x94>)
 800acbe:	2201      	movs	r2, #1
 800acc0:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800acc2:	4b13      	ldr	r3, [pc, #76]	@ (800ad10 <USBD_LL_Init+0x94>)
 800acc4:	2200      	movs	r2, #0
 800acc6:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800acc8:	4b11      	ldr	r3, [pc, #68]	@ (800ad10 <USBD_LL_Init+0x94>)
 800acca:	2200      	movs	r2, #0
 800accc:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800acce:	4b10      	ldr	r3, [pc, #64]	@ (800ad10 <USBD_LL_Init+0x94>)
 800acd0:	2201      	movs	r2, #1
 800acd2:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800acd4:	4b0e      	ldr	r3, [pc, #56]	@ (800ad10 <USBD_LL_Init+0x94>)
 800acd6:	2200      	movs	r2, #0
 800acd8:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800acda:	480d      	ldr	r0, [pc, #52]	@ (800ad10 <USBD_LL_Init+0x94>)
 800acdc:	f7f8 fc34 	bl	8003548 <HAL_PCD_Init>
 800ace0:	4603      	mov	r3, r0
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d001      	beq.n	800acea <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800ace6:	f7f5 ff2d 	bl	8000b44 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800acea:	2180      	movs	r1, #128	@ 0x80
 800acec:	4808      	ldr	r0, [pc, #32]	@ (800ad10 <USBD_LL_Init+0x94>)
 800acee:	f7f9 fe60 	bl	80049b2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800acf2:	2240      	movs	r2, #64	@ 0x40
 800acf4:	2100      	movs	r1, #0
 800acf6:	4806      	ldr	r0, [pc, #24]	@ (800ad10 <USBD_LL_Init+0x94>)
 800acf8:	f7f9 fe14 	bl	8004924 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800acfc:	2280      	movs	r2, #128	@ 0x80
 800acfe:	2101      	movs	r1, #1
 800ad00:	4803      	ldr	r0, [pc, #12]	@ (800ad10 <USBD_LL_Init+0x94>)
 800ad02:	f7f9 fe0f 	bl	8004924 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800ad06:	2300      	movs	r3, #0
}
 800ad08:	4618      	mov	r0, r3
 800ad0a:	3708      	adds	r7, #8
 800ad0c:	46bd      	mov	sp, r7
 800ad0e:	bd80      	pop	{r7, pc}
 800ad10:	2000fcf0 	.word	0x2000fcf0

0800ad14 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800ad14:	b580      	push	{r7, lr}
 800ad16:	b084      	sub	sp, #16
 800ad18:	af00      	add	r7, sp, #0
 800ad1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad1c:	2300      	movs	r3, #0
 800ad1e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ad20:	2300      	movs	r3, #0
 800ad22:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ad2a:	4618      	mov	r0, r3
 800ad2c:	f7f8 fd1b 	bl	8003766 <HAL_PCD_Start>
 800ad30:	4603      	mov	r3, r0
 800ad32:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ad34:	7bfb      	ldrb	r3, [r7, #15]
 800ad36:	4618      	mov	r0, r3
 800ad38:	f000 f942 	bl	800afc0 <USBD_Get_USB_Status>
 800ad3c:	4603      	mov	r3, r0
 800ad3e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ad40:	7bbb      	ldrb	r3, [r7, #14]
}
 800ad42:	4618      	mov	r0, r3
 800ad44:	3710      	adds	r7, #16
 800ad46:	46bd      	mov	sp, r7
 800ad48:	bd80      	pop	{r7, pc}

0800ad4a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ad4a:	b580      	push	{r7, lr}
 800ad4c:	b084      	sub	sp, #16
 800ad4e:	af00      	add	r7, sp, #0
 800ad50:	6078      	str	r0, [r7, #4]
 800ad52:	4608      	mov	r0, r1
 800ad54:	4611      	mov	r1, r2
 800ad56:	461a      	mov	r2, r3
 800ad58:	4603      	mov	r3, r0
 800ad5a:	70fb      	strb	r3, [r7, #3]
 800ad5c:	460b      	mov	r3, r1
 800ad5e:	70bb      	strb	r3, [r7, #2]
 800ad60:	4613      	mov	r3, r2
 800ad62:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad64:	2300      	movs	r3, #0
 800ad66:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ad68:	2300      	movs	r3, #0
 800ad6a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800ad72:	78bb      	ldrb	r3, [r7, #2]
 800ad74:	883a      	ldrh	r2, [r7, #0]
 800ad76:	78f9      	ldrb	r1, [r7, #3]
 800ad78:	f7f9 f9ef 	bl	800415a <HAL_PCD_EP_Open>
 800ad7c:	4603      	mov	r3, r0
 800ad7e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ad80:	7bfb      	ldrb	r3, [r7, #15]
 800ad82:	4618      	mov	r0, r3
 800ad84:	f000 f91c 	bl	800afc0 <USBD_Get_USB_Status>
 800ad88:	4603      	mov	r3, r0
 800ad8a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ad8c:	7bbb      	ldrb	r3, [r7, #14]
}
 800ad8e:	4618      	mov	r0, r3
 800ad90:	3710      	adds	r7, #16
 800ad92:	46bd      	mov	sp, r7
 800ad94:	bd80      	pop	{r7, pc}

0800ad96 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ad96:	b580      	push	{r7, lr}
 800ad98:	b084      	sub	sp, #16
 800ad9a:	af00      	add	r7, sp, #0
 800ad9c:	6078      	str	r0, [r7, #4]
 800ad9e:	460b      	mov	r3, r1
 800ada0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ada2:	2300      	movs	r3, #0
 800ada4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ada6:	2300      	movs	r3, #0
 800ada8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800adb0:	78fa      	ldrb	r2, [r7, #3]
 800adb2:	4611      	mov	r1, r2
 800adb4:	4618      	mov	r0, r3
 800adb6:	f7f9 fa3a 	bl	800422e <HAL_PCD_EP_Close>
 800adba:	4603      	mov	r3, r0
 800adbc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800adbe:	7bfb      	ldrb	r3, [r7, #15]
 800adc0:	4618      	mov	r0, r3
 800adc2:	f000 f8fd 	bl	800afc0 <USBD_Get_USB_Status>
 800adc6:	4603      	mov	r3, r0
 800adc8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800adca:	7bbb      	ldrb	r3, [r7, #14]
}
 800adcc:	4618      	mov	r0, r3
 800adce:	3710      	adds	r7, #16
 800add0:	46bd      	mov	sp, r7
 800add2:	bd80      	pop	{r7, pc}

0800add4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800add4:	b580      	push	{r7, lr}
 800add6:	b084      	sub	sp, #16
 800add8:	af00      	add	r7, sp, #0
 800adda:	6078      	str	r0, [r7, #4]
 800addc:	460b      	mov	r3, r1
 800adde:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ade0:	2300      	movs	r3, #0
 800ade2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ade4:	2300      	movs	r3, #0
 800ade6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800adee:	78fa      	ldrb	r2, [r7, #3]
 800adf0:	4611      	mov	r1, r2
 800adf2:	4618      	mov	r0, r3
 800adf4:	f7f9 faf2 	bl	80043dc <HAL_PCD_EP_SetStall>
 800adf8:	4603      	mov	r3, r0
 800adfa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800adfc:	7bfb      	ldrb	r3, [r7, #15]
 800adfe:	4618      	mov	r0, r3
 800ae00:	f000 f8de 	bl	800afc0 <USBD_Get_USB_Status>
 800ae04:	4603      	mov	r3, r0
 800ae06:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ae08:	7bbb      	ldrb	r3, [r7, #14]
}
 800ae0a:	4618      	mov	r0, r3
 800ae0c:	3710      	adds	r7, #16
 800ae0e:	46bd      	mov	sp, r7
 800ae10:	bd80      	pop	{r7, pc}

0800ae12 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ae12:	b580      	push	{r7, lr}
 800ae14:	b084      	sub	sp, #16
 800ae16:	af00      	add	r7, sp, #0
 800ae18:	6078      	str	r0, [r7, #4]
 800ae1a:	460b      	mov	r3, r1
 800ae1c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ae1e:	2300      	movs	r3, #0
 800ae20:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ae22:	2300      	movs	r3, #0
 800ae24:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ae2c:	78fa      	ldrb	r2, [r7, #3]
 800ae2e:	4611      	mov	r1, r2
 800ae30:	4618      	mov	r0, r3
 800ae32:	f7f9 fb36 	bl	80044a2 <HAL_PCD_EP_ClrStall>
 800ae36:	4603      	mov	r3, r0
 800ae38:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ae3a:	7bfb      	ldrb	r3, [r7, #15]
 800ae3c:	4618      	mov	r0, r3
 800ae3e:	f000 f8bf 	bl	800afc0 <USBD_Get_USB_Status>
 800ae42:	4603      	mov	r3, r0
 800ae44:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ae46:	7bbb      	ldrb	r3, [r7, #14]
}
 800ae48:	4618      	mov	r0, r3
 800ae4a:	3710      	adds	r7, #16
 800ae4c:	46bd      	mov	sp, r7
 800ae4e:	bd80      	pop	{r7, pc}

0800ae50 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ae50:	b480      	push	{r7}
 800ae52:	b085      	sub	sp, #20
 800ae54:	af00      	add	r7, sp, #0
 800ae56:	6078      	str	r0, [r7, #4]
 800ae58:	460b      	mov	r3, r1
 800ae5a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ae62:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800ae64:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	da0b      	bge.n	800ae84 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800ae6c:	78fb      	ldrb	r3, [r7, #3]
 800ae6e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ae72:	68f9      	ldr	r1, [r7, #12]
 800ae74:	4613      	mov	r3, r2
 800ae76:	00db      	lsls	r3, r3, #3
 800ae78:	4413      	add	r3, r2
 800ae7a:	009b      	lsls	r3, r3, #2
 800ae7c:	440b      	add	r3, r1
 800ae7e:	3316      	adds	r3, #22
 800ae80:	781b      	ldrb	r3, [r3, #0]
 800ae82:	e00b      	b.n	800ae9c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800ae84:	78fb      	ldrb	r3, [r7, #3]
 800ae86:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ae8a:	68f9      	ldr	r1, [r7, #12]
 800ae8c:	4613      	mov	r3, r2
 800ae8e:	00db      	lsls	r3, r3, #3
 800ae90:	4413      	add	r3, r2
 800ae92:	009b      	lsls	r3, r3, #2
 800ae94:	440b      	add	r3, r1
 800ae96:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800ae9a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ae9c:	4618      	mov	r0, r3
 800ae9e:	3714      	adds	r7, #20
 800aea0:	46bd      	mov	sp, r7
 800aea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aea6:	4770      	bx	lr

0800aea8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800aea8:	b580      	push	{r7, lr}
 800aeaa:	b084      	sub	sp, #16
 800aeac:	af00      	add	r7, sp, #0
 800aeae:	6078      	str	r0, [r7, #4]
 800aeb0:	460b      	mov	r3, r1
 800aeb2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aeb4:	2300      	movs	r3, #0
 800aeb6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aeb8:	2300      	movs	r3, #0
 800aeba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800aec2:	78fa      	ldrb	r2, [r7, #3]
 800aec4:	4611      	mov	r1, r2
 800aec6:	4618      	mov	r0, r3
 800aec8:	f7f9 f923 	bl	8004112 <HAL_PCD_SetAddress>
 800aecc:	4603      	mov	r3, r0
 800aece:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aed0:	7bfb      	ldrb	r3, [r7, #15]
 800aed2:	4618      	mov	r0, r3
 800aed4:	f000 f874 	bl	800afc0 <USBD_Get_USB_Status>
 800aed8:	4603      	mov	r3, r0
 800aeda:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aedc:	7bbb      	ldrb	r3, [r7, #14]
}
 800aede:	4618      	mov	r0, r3
 800aee0:	3710      	adds	r7, #16
 800aee2:	46bd      	mov	sp, r7
 800aee4:	bd80      	pop	{r7, pc}

0800aee6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800aee6:	b580      	push	{r7, lr}
 800aee8:	b086      	sub	sp, #24
 800aeea:	af00      	add	r7, sp, #0
 800aeec:	60f8      	str	r0, [r7, #12]
 800aeee:	607a      	str	r2, [r7, #4]
 800aef0:	603b      	str	r3, [r7, #0]
 800aef2:	460b      	mov	r3, r1
 800aef4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aef6:	2300      	movs	r3, #0
 800aef8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aefa:	2300      	movs	r3, #0
 800aefc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800af04:	7af9      	ldrb	r1, [r7, #11]
 800af06:	683b      	ldr	r3, [r7, #0]
 800af08:	687a      	ldr	r2, [r7, #4]
 800af0a:	f7f9 fa2d 	bl	8004368 <HAL_PCD_EP_Transmit>
 800af0e:	4603      	mov	r3, r0
 800af10:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800af12:	7dfb      	ldrb	r3, [r7, #23]
 800af14:	4618      	mov	r0, r3
 800af16:	f000 f853 	bl	800afc0 <USBD_Get_USB_Status>
 800af1a:	4603      	mov	r3, r0
 800af1c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800af1e:	7dbb      	ldrb	r3, [r7, #22]
}
 800af20:	4618      	mov	r0, r3
 800af22:	3718      	adds	r7, #24
 800af24:	46bd      	mov	sp, r7
 800af26:	bd80      	pop	{r7, pc}

0800af28 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800af28:	b580      	push	{r7, lr}
 800af2a:	b086      	sub	sp, #24
 800af2c:	af00      	add	r7, sp, #0
 800af2e:	60f8      	str	r0, [r7, #12]
 800af30:	607a      	str	r2, [r7, #4]
 800af32:	603b      	str	r3, [r7, #0]
 800af34:	460b      	mov	r3, r1
 800af36:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800af38:	2300      	movs	r3, #0
 800af3a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800af3c:	2300      	movs	r3, #0
 800af3e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800af46:	7af9      	ldrb	r1, [r7, #11]
 800af48:	683b      	ldr	r3, [r7, #0]
 800af4a:	687a      	ldr	r2, [r7, #4]
 800af4c:	f7f9 f9b9 	bl	80042c2 <HAL_PCD_EP_Receive>
 800af50:	4603      	mov	r3, r0
 800af52:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800af54:	7dfb      	ldrb	r3, [r7, #23]
 800af56:	4618      	mov	r0, r3
 800af58:	f000 f832 	bl	800afc0 <USBD_Get_USB_Status>
 800af5c:	4603      	mov	r3, r0
 800af5e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800af60:	7dbb      	ldrb	r3, [r7, #22]
}
 800af62:	4618      	mov	r0, r3
 800af64:	3718      	adds	r7, #24
 800af66:	46bd      	mov	sp, r7
 800af68:	bd80      	pop	{r7, pc}

0800af6a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800af6a:	b580      	push	{r7, lr}
 800af6c:	b082      	sub	sp, #8
 800af6e:	af00      	add	r7, sp, #0
 800af70:	6078      	str	r0, [r7, #4]
 800af72:	460b      	mov	r3, r1
 800af74:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800af7c:	78fa      	ldrb	r2, [r7, #3]
 800af7e:	4611      	mov	r1, r2
 800af80:	4618      	mov	r0, r3
 800af82:	f7f9 f9d9 	bl	8004338 <HAL_PCD_EP_GetRxCount>
 800af86:	4603      	mov	r3, r0
}
 800af88:	4618      	mov	r0, r3
 800af8a:	3708      	adds	r7, #8
 800af8c:	46bd      	mov	sp, r7
 800af8e:	bd80      	pop	{r7, pc}

0800af90 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800af90:	b480      	push	{r7}
 800af92:	b083      	sub	sp, #12
 800af94:	af00      	add	r7, sp, #0
 800af96:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800af98:	4b03      	ldr	r3, [pc, #12]	@ (800afa8 <USBD_static_malloc+0x18>)
}
 800af9a:	4618      	mov	r0, r3
 800af9c:	370c      	adds	r7, #12
 800af9e:	46bd      	mov	sp, r7
 800afa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afa4:	4770      	bx	lr
 800afa6:	bf00      	nop
 800afa8:	200101d4 	.word	0x200101d4

0800afac <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800afac:	b480      	push	{r7}
 800afae:	b083      	sub	sp, #12
 800afb0:	af00      	add	r7, sp, #0
 800afb2:	6078      	str	r0, [r7, #4]

}
 800afb4:	bf00      	nop
 800afb6:	370c      	adds	r7, #12
 800afb8:	46bd      	mov	sp, r7
 800afba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afbe:	4770      	bx	lr

0800afc0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800afc0:	b480      	push	{r7}
 800afc2:	b085      	sub	sp, #20
 800afc4:	af00      	add	r7, sp, #0
 800afc6:	4603      	mov	r3, r0
 800afc8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800afca:	2300      	movs	r3, #0
 800afcc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800afce:	79fb      	ldrb	r3, [r7, #7]
 800afd0:	2b03      	cmp	r3, #3
 800afd2:	d817      	bhi.n	800b004 <USBD_Get_USB_Status+0x44>
 800afd4:	a201      	add	r2, pc, #4	@ (adr r2, 800afdc <USBD_Get_USB_Status+0x1c>)
 800afd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afda:	bf00      	nop
 800afdc:	0800afed 	.word	0x0800afed
 800afe0:	0800aff3 	.word	0x0800aff3
 800afe4:	0800aff9 	.word	0x0800aff9
 800afe8:	0800afff 	.word	0x0800afff
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800afec:	2300      	movs	r3, #0
 800afee:	73fb      	strb	r3, [r7, #15]
    break;
 800aff0:	e00b      	b.n	800b00a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800aff2:	2303      	movs	r3, #3
 800aff4:	73fb      	strb	r3, [r7, #15]
    break;
 800aff6:	e008      	b.n	800b00a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800aff8:	2301      	movs	r3, #1
 800affa:	73fb      	strb	r3, [r7, #15]
    break;
 800affc:	e005      	b.n	800b00a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800affe:	2303      	movs	r3, #3
 800b000:	73fb      	strb	r3, [r7, #15]
    break;
 800b002:	e002      	b.n	800b00a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b004:	2303      	movs	r3, #3
 800b006:	73fb      	strb	r3, [r7, #15]
    break;
 800b008:	bf00      	nop
  }
  return usb_status;
 800b00a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b00c:	4618      	mov	r0, r3
 800b00e:	3714      	adds	r7, #20
 800b010:	46bd      	mov	sp, r7
 800b012:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b016:	4770      	bx	lr

0800b018 <std>:
 800b018:	2300      	movs	r3, #0
 800b01a:	b510      	push	{r4, lr}
 800b01c:	4604      	mov	r4, r0
 800b01e:	e9c0 3300 	strd	r3, r3, [r0]
 800b022:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b026:	6083      	str	r3, [r0, #8]
 800b028:	8181      	strh	r1, [r0, #12]
 800b02a:	6643      	str	r3, [r0, #100]	@ 0x64
 800b02c:	81c2      	strh	r2, [r0, #14]
 800b02e:	6183      	str	r3, [r0, #24]
 800b030:	4619      	mov	r1, r3
 800b032:	2208      	movs	r2, #8
 800b034:	305c      	adds	r0, #92	@ 0x5c
 800b036:	f000 f9f9 	bl	800b42c <memset>
 800b03a:	4b0d      	ldr	r3, [pc, #52]	@ (800b070 <std+0x58>)
 800b03c:	6263      	str	r3, [r4, #36]	@ 0x24
 800b03e:	4b0d      	ldr	r3, [pc, #52]	@ (800b074 <std+0x5c>)
 800b040:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b042:	4b0d      	ldr	r3, [pc, #52]	@ (800b078 <std+0x60>)
 800b044:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b046:	4b0d      	ldr	r3, [pc, #52]	@ (800b07c <std+0x64>)
 800b048:	6323      	str	r3, [r4, #48]	@ 0x30
 800b04a:	4b0d      	ldr	r3, [pc, #52]	@ (800b080 <std+0x68>)
 800b04c:	6224      	str	r4, [r4, #32]
 800b04e:	429c      	cmp	r4, r3
 800b050:	d006      	beq.n	800b060 <std+0x48>
 800b052:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b056:	4294      	cmp	r4, r2
 800b058:	d002      	beq.n	800b060 <std+0x48>
 800b05a:	33d0      	adds	r3, #208	@ 0xd0
 800b05c:	429c      	cmp	r4, r3
 800b05e:	d105      	bne.n	800b06c <std+0x54>
 800b060:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b064:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b068:	f000 ba58 	b.w	800b51c <__retarget_lock_init_recursive>
 800b06c:	bd10      	pop	{r4, pc}
 800b06e:	bf00      	nop
 800b070:	0800b27d 	.word	0x0800b27d
 800b074:	0800b29f 	.word	0x0800b29f
 800b078:	0800b2d7 	.word	0x0800b2d7
 800b07c:	0800b2fb 	.word	0x0800b2fb
 800b080:	200103f4 	.word	0x200103f4

0800b084 <stdio_exit_handler>:
 800b084:	4a02      	ldr	r2, [pc, #8]	@ (800b090 <stdio_exit_handler+0xc>)
 800b086:	4903      	ldr	r1, [pc, #12]	@ (800b094 <stdio_exit_handler+0x10>)
 800b088:	4803      	ldr	r0, [pc, #12]	@ (800b098 <stdio_exit_handler+0x14>)
 800b08a:	f000 b869 	b.w	800b160 <_fwalk_sglue>
 800b08e:	bf00      	nop
 800b090:	2000010c 	.word	0x2000010c
 800b094:	0800bdd9 	.word	0x0800bdd9
 800b098:	2000011c 	.word	0x2000011c

0800b09c <cleanup_stdio>:
 800b09c:	6841      	ldr	r1, [r0, #4]
 800b09e:	4b0c      	ldr	r3, [pc, #48]	@ (800b0d0 <cleanup_stdio+0x34>)
 800b0a0:	4299      	cmp	r1, r3
 800b0a2:	b510      	push	{r4, lr}
 800b0a4:	4604      	mov	r4, r0
 800b0a6:	d001      	beq.n	800b0ac <cleanup_stdio+0x10>
 800b0a8:	f000 fe96 	bl	800bdd8 <_fflush_r>
 800b0ac:	68a1      	ldr	r1, [r4, #8]
 800b0ae:	4b09      	ldr	r3, [pc, #36]	@ (800b0d4 <cleanup_stdio+0x38>)
 800b0b0:	4299      	cmp	r1, r3
 800b0b2:	d002      	beq.n	800b0ba <cleanup_stdio+0x1e>
 800b0b4:	4620      	mov	r0, r4
 800b0b6:	f000 fe8f 	bl	800bdd8 <_fflush_r>
 800b0ba:	68e1      	ldr	r1, [r4, #12]
 800b0bc:	4b06      	ldr	r3, [pc, #24]	@ (800b0d8 <cleanup_stdio+0x3c>)
 800b0be:	4299      	cmp	r1, r3
 800b0c0:	d004      	beq.n	800b0cc <cleanup_stdio+0x30>
 800b0c2:	4620      	mov	r0, r4
 800b0c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b0c8:	f000 be86 	b.w	800bdd8 <_fflush_r>
 800b0cc:	bd10      	pop	{r4, pc}
 800b0ce:	bf00      	nop
 800b0d0:	200103f4 	.word	0x200103f4
 800b0d4:	2001045c 	.word	0x2001045c
 800b0d8:	200104c4 	.word	0x200104c4

0800b0dc <global_stdio_init.part.0>:
 800b0dc:	b510      	push	{r4, lr}
 800b0de:	4b0b      	ldr	r3, [pc, #44]	@ (800b10c <global_stdio_init.part.0+0x30>)
 800b0e0:	4c0b      	ldr	r4, [pc, #44]	@ (800b110 <global_stdio_init.part.0+0x34>)
 800b0e2:	4a0c      	ldr	r2, [pc, #48]	@ (800b114 <global_stdio_init.part.0+0x38>)
 800b0e4:	601a      	str	r2, [r3, #0]
 800b0e6:	4620      	mov	r0, r4
 800b0e8:	2200      	movs	r2, #0
 800b0ea:	2104      	movs	r1, #4
 800b0ec:	f7ff ff94 	bl	800b018 <std>
 800b0f0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b0f4:	2201      	movs	r2, #1
 800b0f6:	2109      	movs	r1, #9
 800b0f8:	f7ff ff8e 	bl	800b018 <std>
 800b0fc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b100:	2202      	movs	r2, #2
 800b102:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b106:	2112      	movs	r1, #18
 800b108:	f7ff bf86 	b.w	800b018 <std>
 800b10c:	2001052c 	.word	0x2001052c
 800b110:	200103f4 	.word	0x200103f4
 800b114:	0800b085 	.word	0x0800b085

0800b118 <__sfp_lock_acquire>:
 800b118:	4801      	ldr	r0, [pc, #4]	@ (800b120 <__sfp_lock_acquire+0x8>)
 800b11a:	f000 ba00 	b.w	800b51e <__retarget_lock_acquire_recursive>
 800b11e:	bf00      	nop
 800b120:	20010535 	.word	0x20010535

0800b124 <__sfp_lock_release>:
 800b124:	4801      	ldr	r0, [pc, #4]	@ (800b12c <__sfp_lock_release+0x8>)
 800b126:	f000 b9fb 	b.w	800b520 <__retarget_lock_release_recursive>
 800b12a:	bf00      	nop
 800b12c:	20010535 	.word	0x20010535

0800b130 <__sinit>:
 800b130:	b510      	push	{r4, lr}
 800b132:	4604      	mov	r4, r0
 800b134:	f7ff fff0 	bl	800b118 <__sfp_lock_acquire>
 800b138:	6a23      	ldr	r3, [r4, #32]
 800b13a:	b11b      	cbz	r3, 800b144 <__sinit+0x14>
 800b13c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b140:	f7ff bff0 	b.w	800b124 <__sfp_lock_release>
 800b144:	4b04      	ldr	r3, [pc, #16]	@ (800b158 <__sinit+0x28>)
 800b146:	6223      	str	r3, [r4, #32]
 800b148:	4b04      	ldr	r3, [pc, #16]	@ (800b15c <__sinit+0x2c>)
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d1f5      	bne.n	800b13c <__sinit+0xc>
 800b150:	f7ff ffc4 	bl	800b0dc <global_stdio_init.part.0>
 800b154:	e7f2      	b.n	800b13c <__sinit+0xc>
 800b156:	bf00      	nop
 800b158:	0800b09d 	.word	0x0800b09d
 800b15c:	2001052c 	.word	0x2001052c

0800b160 <_fwalk_sglue>:
 800b160:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b164:	4607      	mov	r7, r0
 800b166:	4688      	mov	r8, r1
 800b168:	4614      	mov	r4, r2
 800b16a:	2600      	movs	r6, #0
 800b16c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b170:	f1b9 0901 	subs.w	r9, r9, #1
 800b174:	d505      	bpl.n	800b182 <_fwalk_sglue+0x22>
 800b176:	6824      	ldr	r4, [r4, #0]
 800b178:	2c00      	cmp	r4, #0
 800b17a:	d1f7      	bne.n	800b16c <_fwalk_sglue+0xc>
 800b17c:	4630      	mov	r0, r6
 800b17e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b182:	89ab      	ldrh	r3, [r5, #12]
 800b184:	2b01      	cmp	r3, #1
 800b186:	d907      	bls.n	800b198 <_fwalk_sglue+0x38>
 800b188:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b18c:	3301      	adds	r3, #1
 800b18e:	d003      	beq.n	800b198 <_fwalk_sglue+0x38>
 800b190:	4629      	mov	r1, r5
 800b192:	4638      	mov	r0, r7
 800b194:	47c0      	blx	r8
 800b196:	4306      	orrs	r6, r0
 800b198:	3568      	adds	r5, #104	@ 0x68
 800b19a:	e7e9      	b.n	800b170 <_fwalk_sglue+0x10>

0800b19c <iprintf>:
 800b19c:	b40f      	push	{r0, r1, r2, r3}
 800b19e:	b507      	push	{r0, r1, r2, lr}
 800b1a0:	4906      	ldr	r1, [pc, #24]	@ (800b1bc <iprintf+0x20>)
 800b1a2:	ab04      	add	r3, sp, #16
 800b1a4:	6808      	ldr	r0, [r1, #0]
 800b1a6:	f853 2b04 	ldr.w	r2, [r3], #4
 800b1aa:	6881      	ldr	r1, [r0, #8]
 800b1ac:	9301      	str	r3, [sp, #4]
 800b1ae:	f000 fae9 	bl	800b784 <_vfiprintf_r>
 800b1b2:	b003      	add	sp, #12
 800b1b4:	f85d eb04 	ldr.w	lr, [sp], #4
 800b1b8:	b004      	add	sp, #16
 800b1ba:	4770      	bx	lr
 800b1bc:	20000118 	.word	0x20000118

0800b1c0 <_puts_r>:
 800b1c0:	6a03      	ldr	r3, [r0, #32]
 800b1c2:	b570      	push	{r4, r5, r6, lr}
 800b1c4:	6884      	ldr	r4, [r0, #8]
 800b1c6:	4605      	mov	r5, r0
 800b1c8:	460e      	mov	r6, r1
 800b1ca:	b90b      	cbnz	r3, 800b1d0 <_puts_r+0x10>
 800b1cc:	f7ff ffb0 	bl	800b130 <__sinit>
 800b1d0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b1d2:	07db      	lsls	r3, r3, #31
 800b1d4:	d405      	bmi.n	800b1e2 <_puts_r+0x22>
 800b1d6:	89a3      	ldrh	r3, [r4, #12]
 800b1d8:	0598      	lsls	r0, r3, #22
 800b1da:	d402      	bmi.n	800b1e2 <_puts_r+0x22>
 800b1dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b1de:	f000 f99e 	bl	800b51e <__retarget_lock_acquire_recursive>
 800b1e2:	89a3      	ldrh	r3, [r4, #12]
 800b1e4:	0719      	lsls	r1, r3, #28
 800b1e6:	d502      	bpl.n	800b1ee <_puts_r+0x2e>
 800b1e8:	6923      	ldr	r3, [r4, #16]
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d135      	bne.n	800b25a <_puts_r+0x9a>
 800b1ee:	4621      	mov	r1, r4
 800b1f0:	4628      	mov	r0, r5
 800b1f2:	f000 f8c5 	bl	800b380 <__swsetup_r>
 800b1f6:	b380      	cbz	r0, 800b25a <_puts_r+0x9a>
 800b1f8:	f04f 35ff 	mov.w	r5, #4294967295
 800b1fc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b1fe:	07da      	lsls	r2, r3, #31
 800b200:	d405      	bmi.n	800b20e <_puts_r+0x4e>
 800b202:	89a3      	ldrh	r3, [r4, #12]
 800b204:	059b      	lsls	r3, r3, #22
 800b206:	d402      	bmi.n	800b20e <_puts_r+0x4e>
 800b208:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b20a:	f000 f989 	bl	800b520 <__retarget_lock_release_recursive>
 800b20e:	4628      	mov	r0, r5
 800b210:	bd70      	pop	{r4, r5, r6, pc}
 800b212:	2b00      	cmp	r3, #0
 800b214:	da04      	bge.n	800b220 <_puts_r+0x60>
 800b216:	69a2      	ldr	r2, [r4, #24]
 800b218:	429a      	cmp	r2, r3
 800b21a:	dc17      	bgt.n	800b24c <_puts_r+0x8c>
 800b21c:	290a      	cmp	r1, #10
 800b21e:	d015      	beq.n	800b24c <_puts_r+0x8c>
 800b220:	6823      	ldr	r3, [r4, #0]
 800b222:	1c5a      	adds	r2, r3, #1
 800b224:	6022      	str	r2, [r4, #0]
 800b226:	7019      	strb	r1, [r3, #0]
 800b228:	68a3      	ldr	r3, [r4, #8]
 800b22a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b22e:	3b01      	subs	r3, #1
 800b230:	60a3      	str	r3, [r4, #8]
 800b232:	2900      	cmp	r1, #0
 800b234:	d1ed      	bne.n	800b212 <_puts_r+0x52>
 800b236:	2b00      	cmp	r3, #0
 800b238:	da11      	bge.n	800b25e <_puts_r+0x9e>
 800b23a:	4622      	mov	r2, r4
 800b23c:	210a      	movs	r1, #10
 800b23e:	4628      	mov	r0, r5
 800b240:	f000 f85f 	bl	800b302 <__swbuf_r>
 800b244:	3001      	adds	r0, #1
 800b246:	d0d7      	beq.n	800b1f8 <_puts_r+0x38>
 800b248:	250a      	movs	r5, #10
 800b24a:	e7d7      	b.n	800b1fc <_puts_r+0x3c>
 800b24c:	4622      	mov	r2, r4
 800b24e:	4628      	mov	r0, r5
 800b250:	f000 f857 	bl	800b302 <__swbuf_r>
 800b254:	3001      	adds	r0, #1
 800b256:	d1e7      	bne.n	800b228 <_puts_r+0x68>
 800b258:	e7ce      	b.n	800b1f8 <_puts_r+0x38>
 800b25a:	3e01      	subs	r6, #1
 800b25c:	e7e4      	b.n	800b228 <_puts_r+0x68>
 800b25e:	6823      	ldr	r3, [r4, #0]
 800b260:	1c5a      	adds	r2, r3, #1
 800b262:	6022      	str	r2, [r4, #0]
 800b264:	220a      	movs	r2, #10
 800b266:	701a      	strb	r2, [r3, #0]
 800b268:	e7ee      	b.n	800b248 <_puts_r+0x88>
	...

0800b26c <puts>:
 800b26c:	4b02      	ldr	r3, [pc, #8]	@ (800b278 <puts+0xc>)
 800b26e:	4601      	mov	r1, r0
 800b270:	6818      	ldr	r0, [r3, #0]
 800b272:	f7ff bfa5 	b.w	800b1c0 <_puts_r>
 800b276:	bf00      	nop
 800b278:	20000118 	.word	0x20000118

0800b27c <__sread>:
 800b27c:	b510      	push	{r4, lr}
 800b27e:	460c      	mov	r4, r1
 800b280:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b284:	f000 f8fc 	bl	800b480 <_read_r>
 800b288:	2800      	cmp	r0, #0
 800b28a:	bfab      	itete	ge
 800b28c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b28e:	89a3      	ldrhlt	r3, [r4, #12]
 800b290:	181b      	addge	r3, r3, r0
 800b292:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b296:	bfac      	ite	ge
 800b298:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b29a:	81a3      	strhlt	r3, [r4, #12]
 800b29c:	bd10      	pop	{r4, pc}

0800b29e <__swrite>:
 800b29e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b2a2:	461f      	mov	r7, r3
 800b2a4:	898b      	ldrh	r3, [r1, #12]
 800b2a6:	05db      	lsls	r3, r3, #23
 800b2a8:	4605      	mov	r5, r0
 800b2aa:	460c      	mov	r4, r1
 800b2ac:	4616      	mov	r6, r2
 800b2ae:	d505      	bpl.n	800b2bc <__swrite+0x1e>
 800b2b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b2b4:	2302      	movs	r3, #2
 800b2b6:	2200      	movs	r2, #0
 800b2b8:	f000 f8d0 	bl	800b45c <_lseek_r>
 800b2bc:	89a3      	ldrh	r3, [r4, #12]
 800b2be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b2c2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b2c6:	81a3      	strh	r3, [r4, #12]
 800b2c8:	4632      	mov	r2, r6
 800b2ca:	463b      	mov	r3, r7
 800b2cc:	4628      	mov	r0, r5
 800b2ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b2d2:	f000 b8e7 	b.w	800b4a4 <_write_r>

0800b2d6 <__sseek>:
 800b2d6:	b510      	push	{r4, lr}
 800b2d8:	460c      	mov	r4, r1
 800b2da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b2de:	f000 f8bd 	bl	800b45c <_lseek_r>
 800b2e2:	1c43      	adds	r3, r0, #1
 800b2e4:	89a3      	ldrh	r3, [r4, #12]
 800b2e6:	bf15      	itete	ne
 800b2e8:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b2ea:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b2ee:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b2f2:	81a3      	strheq	r3, [r4, #12]
 800b2f4:	bf18      	it	ne
 800b2f6:	81a3      	strhne	r3, [r4, #12]
 800b2f8:	bd10      	pop	{r4, pc}

0800b2fa <__sclose>:
 800b2fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b2fe:	f000 b89d 	b.w	800b43c <_close_r>

0800b302 <__swbuf_r>:
 800b302:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b304:	460e      	mov	r6, r1
 800b306:	4614      	mov	r4, r2
 800b308:	4605      	mov	r5, r0
 800b30a:	b118      	cbz	r0, 800b314 <__swbuf_r+0x12>
 800b30c:	6a03      	ldr	r3, [r0, #32]
 800b30e:	b90b      	cbnz	r3, 800b314 <__swbuf_r+0x12>
 800b310:	f7ff ff0e 	bl	800b130 <__sinit>
 800b314:	69a3      	ldr	r3, [r4, #24]
 800b316:	60a3      	str	r3, [r4, #8]
 800b318:	89a3      	ldrh	r3, [r4, #12]
 800b31a:	071a      	lsls	r2, r3, #28
 800b31c:	d501      	bpl.n	800b322 <__swbuf_r+0x20>
 800b31e:	6923      	ldr	r3, [r4, #16]
 800b320:	b943      	cbnz	r3, 800b334 <__swbuf_r+0x32>
 800b322:	4621      	mov	r1, r4
 800b324:	4628      	mov	r0, r5
 800b326:	f000 f82b 	bl	800b380 <__swsetup_r>
 800b32a:	b118      	cbz	r0, 800b334 <__swbuf_r+0x32>
 800b32c:	f04f 37ff 	mov.w	r7, #4294967295
 800b330:	4638      	mov	r0, r7
 800b332:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b334:	6823      	ldr	r3, [r4, #0]
 800b336:	6922      	ldr	r2, [r4, #16]
 800b338:	1a98      	subs	r0, r3, r2
 800b33a:	6963      	ldr	r3, [r4, #20]
 800b33c:	b2f6      	uxtb	r6, r6
 800b33e:	4283      	cmp	r3, r0
 800b340:	4637      	mov	r7, r6
 800b342:	dc05      	bgt.n	800b350 <__swbuf_r+0x4e>
 800b344:	4621      	mov	r1, r4
 800b346:	4628      	mov	r0, r5
 800b348:	f000 fd46 	bl	800bdd8 <_fflush_r>
 800b34c:	2800      	cmp	r0, #0
 800b34e:	d1ed      	bne.n	800b32c <__swbuf_r+0x2a>
 800b350:	68a3      	ldr	r3, [r4, #8]
 800b352:	3b01      	subs	r3, #1
 800b354:	60a3      	str	r3, [r4, #8]
 800b356:	6823      	ldr	r3, [r4, #0]
 800b358:	1c5a      	adds	r2, r3, #1
 800b35a:	6022      	str	r2, [r4, #0]
 800b35c:	701e      	strb	r6, [r3, #0]
 800b35e:	6962      	ldr	r2, [r4, #20]
 800b360:	1c43      	adds	r3, r0, #1
 800b362:	429a      	cmp	r2, r3
 800b364:	d004      	beq.n	800b370 <__swbuf_r+0x6e>
 800b366:	89a3      	ldrh	r3, [r4, #12]
 800b368:	07db      	lsls	r3, r3, #31
 800b36a:	d5e1      	bpl.n	800b330 <__swbuf_r+0x2e>
 800b36c:	2e0a      	cmp	r6, #10
 800b36e:	d1df      	bne.n	800b330 <__swbuf_r+0x2e>
 800b370:	4621      	mov	r1, r4
 800b372:	4628      	mov	r0, r5
 800b374:	f000 fd30 	bl	800bdd8 <_fflush_r>
 800b378:	2800      	cmp	r0, #0
 800b37a:	d0d9      	beq.n	800b330 <__swbuf_r+0x2e>
 800b37c:	e7d6      	b.n	800b32c <__swbuf_r+0x2a>
	...

0800b380 <__swsetup_r>:
 800b380:	b538      	push	{r3, r4, r5, lr}
 800b382:	4b29      	ldr	r3, [pc, #164]	@ (800b428 <__swsetup_r+0xa8>)
 800b384:	4605      	mov	r5, r0
 800b386:	6818      	ldr	r0, [r3, #0]
 800b388:	460c      	mov	r4, r1
 800b38a:	b118      	cbz	r0, 800b394 <__swsetup_r+0x14>
 800b38c:	6a03      	ldr	r3, [r0, #32]
 800b38e:	b90b      	cbnz	r3, 800b394 <__swsetup_r+0x14>
 800b390:	f7ff fece 	bl	800b130 <__sinit>
 800b394:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b398:	0719      	lsls	r1, r3, #28
 800b39a:	d422      	bmi.n	800b3e2 <__swsetup_r+0x62>
 800b39c:	06da      	lsls	r2, r3, #27
 800b39e:	d407      	bmi.n	800b3b0 <__swsetup_r+0x30>
 800b3a0:	2209      	movs	r2, #9
 800b3a2:	602a      	str	r2, [r5, #0]
 800b3a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b3a8:	81a3      	strh	r3, [r4, #12]
 800b3aa:	f04f 30ff 	mov.w	r0, #4294967295
 800b3ae:	e033      	b.n	800b418 <__swsetup_r+0x98>
 800b3b0:	0758      	lsls	r0, r3, #29
 800b3b2:	d512      	bpl.n	800b3da <__swsetup_r+0x5a>
 800b3b4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b3b6:	b141      	cbz	r1, 800b3ca <__swsetup_r+0x4a>
 800b3b8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b3bc:	4299      	cmp	r1, r3
 800b3be:	d002      	beq.n	800b3c6 <__swsetup_r+0x46>
 800b3c0:	4628      	mov	r0, r5
 800b3c2:	f000 f8bd 	bl	800b540 <_free_r>
 800b3c6:	2300      	movs	r3, #0
 800b3c8:	6363      	str	r3, [r4, #52]	@ 0x34
 800b3ca:	89a3      	ldrh	r3, [r4, #12]
 800b3cc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b3d0:	81a3      	strh	r3, [r4, #12]
 800b3d2:	2300      	movs	r3, #0
 800b3d4:	6063      	str	r3, [r4, #4]
 800b3d6:	6923      	ldr	r3, [r4, #16]
 800b3d8:	6023      	str	r3, [r4, #0]
 800b3da:	89a3      	ldrh	r3, [r4, #12]
 800b3dc:	f043 0308 	orr.w	r3, r3, #8
 800b3e0:	81a3      	strh	r3, [r4, #12]
 800b3e2:	6923      	ldr	r3, [r4, #16]
 800b3e4:	b94b      	cbnz	r3, 800b3fa <__swsetup_r+0x7a>
 800b3e6:	89a3      	ldrh	r3, [r4, #12]
 800b3e8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b3ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b3f0:	d003      	beq.n	800b3fa <__swsetup_r+0x7a>
 800b3f2:	4621      	mov	r1, r4
 800b3f4:	4628      	mov	r0, r5
 800b3f6:	f000 fd3d 	bl	800be74 <__smakebuf_r>
 800b3fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b3fe:	f013 0201 	ands.w	r2, r3, #1
 800b402:	d00a      	beq.n	800b41a <__swsetup_r+0x9a>
 800b404:	2200      	movs	r2, #0
 800b406:	60a2      	str	r2, [r4, #8]
 800b408:	6962      	ldr	r2, [r4, #20]
 800b40a:	4252      	negs	r2, r2
 800b40c:	61a2      	str	r2, [r4, #24]
 800b40e:	6922      	ldr	r2, [r4, #16]
 800b410:	b942      	cbnz	r2, 800b424 <__swsetup_r+0xa4>
 800b412:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b416:	d1c5      	bne.n	800b3a4 <__swsetup_r+0x24>
 800b418:	bd38      	pop	{r3, r4, r5, pc}
 800b41a:	0799      	lsls	r1, r3, #30
 800b41c:	bf58      	it	pl
 800b41e:	6962      	ldrpl	r2, [r4, #20]
 800b420:	60a2      	str	r2, [r4, #8]
 800b422:	e7f4      	b.n	800b40e <__swsetup_r+0x8e>
 800b424:	2000      	movs	r0, #0
 800b426:	e7f7      	b.n	800b418 <__swsetup_r+0x98>
 800b428:	20000118 	.word	0x20000118

0800b42c <memset>:
 800b42c:	4402      	add	r2, r0
 800b42e:	4603      	mov	r3, r0
 800b430:	4293      	cmp	r3, r2
 800b432:	d100      	bne.n	800b436 <memset+0xa>
 800b434:	4770      	bx	lr
 800b436:	f803 1b01 	strb.w	r1, [r3], #1
 800b43a:	e7f9      	b.n	800b430 <memset+0x4>

0800b43c <_close_r>:
 800b43c:	b538      	push	{r3, r4, r5, lr}
 800b43e:	4d06      	ldr	r5, [pc, #24]	@ (800b458 <_close_r+0x1c>)
 800b440:	2300      	movs	r3, #0
 800b442:	4604      	mov	r4, r0
 800b444:	4608      	mov	r0, r1
 800b446:	602b      	str	r3, [r5, #0]
 800b448:	f7f5 fe6d 	bl	8001126 <_close>
 800b44c:	1c43      	adds	r3, r0, #1
 800b44e:	d102      	bne.n	800b456 <_close_r+0x1a>
 800b450:	682b      	ldr	r3, [r5, #0]
 800b452:	b103      	cbz	r3, 800b456 <_close_r+0x1a>
 800b454:	6023      	str	r3, [r4, #0]
 800b456:	bd38      	pop	{r3, r4, r5, pc}
 800b458:	20010530 	.word	0x20010530

0800b45c <_lseek_r>:
 800b45c:	b538      	push	{r3, r4, r5, lr}
 800b45e:	4d07      	ldr	r5, [pc, #28]	@ (800b47c <_lseek_r+0x20>)
 800b460:	4604      	mov	r4, r0
 800b462:	4608      	mov	r0, r1
 800b464:	4611      	mov	r1, r2
 800b466:	2200      	movs	r2, #0
 800b468:	602a      	str	r2, [r5, #0]
 800b46a:	461a      	mov	r2, r3
 800b46c:	f7f5 fe82 	bl	8001174 <_lseek>
 800b470:	1c43      	adds	r3, r0, #1
 800b472:	d102      	bne.n	800b47a <_lseek_r+0x1e>
 800b474:	682b      	ldr	r3, [r5, #0]
 800b476:	b103      	cbz	r3, 800b47a <_lseek_r+0x1e>
 800b478:	6023      	str	r3, [r4, #0]
 800b47a:	bd38      	pop	{r3, r4, r5, pc}
 800b47c:	20010530 	.word	0x20010530

0800b480 <_read_r>:
 800b480:	b538      	push	{r3, r4, r5, lr}
 800b482:	4d07      	ldr	r5, [pc, #28]	@ (800b4a0 <_read_r+0x20>)
 800b484:	4604      	mov	r4, r0
 800b486:	4608      	mov	r0, r1
 800b488:	4611      	mov	r1, r2
 800b48a:	2200      	movs	r2, #0
 800b48c:	602a      	str	r2, [r5, #0]
 800b48e:	461a      	mov	r2, r3
 800b490:	f7f5 fe2c 	bl	80010ec <_read>
 800b494:	1c43      	adds	r3, r0, #1
 800b496:	d102      	bne.n	800b49e <_read_r+0x1e>
 800b498:	682b      	ldr	r3, [r5, #0]
 800b49a:	b103      	cbz	r3, 800b49e <_read_r+0x1e>
 800b49c:	6023      	str	r3, [r4, #0]
 800b49e:	bd38      	pop	{r3, r4, r5, pc}
 800b4a0:	20010530 	.word	0x20010530

0800b4a4 <_write_r>:
 800b4a4:	b538      	push	{r3, r4, r5, lr}
 800b4a6:	4d07      	ldr	r5, [pc, #28]	@ (800b4c4 <_write_r+0x20>)
 800b4a8:	4604      	mov	r4, r0
 800b4aa:	4608      	mov	r0, r1
 800b4ac:	4611      	mov	r1, r2
 800b4ae:	2200      	movs	r2, #0
 800b4b0:	602a      	str	r2, [r5, #0]
 800b4b2:	461a      	mov	r2, r3
 800b4b4:	f7f5 fa76 	bl	80009a4 <_write>
 800b4b8:	1c43      	adds	r3, r0, #1
 800b4ba:	d102      	bne.n	800b4c2 <_write_r+0x1e>
 800b4bc:	682b      	ldr	r3, [r5, #0]
 800b4be:	b103      	cbz	r3, 800b4c2 <_write_r+0x1e>
 800b4c0:	6023      	str	r3, [r4, #0]
 800b4c2:	bd38      	pop	{r3, r4, r5, pc}
 800b4c4:	20010530 	.word	0x20010530

0800b4c8 <__errno>:
 800b4c8:	4b01      	ldr	r3, [pc, #4]	@ (800b4d0 <__errno+0x8>)
 800b4ca:	6818      	ldr	r0, [r3, #0]
 800b4cc:	4770      	bx	lr
 800b4ce:	bf00      	nop
 800b4d0:	20000118 	.word	0x20000118

0800b4d4 <__libc_init_array>:
 800b4d4:	b570      	push	{r4, r5, r6, lr}
 800b4d6:	4d0d      	ldr	r5, [pc, #52]	@ (800b50c <__libc_init_array+0x38>)
 800b4d8:	4c0d      	ldr	r4, [pc, #52]	@ (800b510 <__libc_init_array+0x3c>)
 800b4da:	1b64      	subs	r4, r4, r5
 800b4dc:	10a4      	asrs	r4, r4, #2
 800b4de:	2600      	movs	r6, #0
 800b4e0:	42a6      	cmp	r6, r4
 800b4e2:	d109      	bne.n	800b4f8 <__libc_init_array+0x24>
 800b4e4:	4d0b      	ldr	r5, [pc, #44]	@ (800b514 <__libc_init_array+0x40>)
 800b4e6:	4c0c      	ldr	r4, [pc, #48]	@ (800b518 <__libc_init_array+0x44>)
 800b4e8:	f000 fd32 	bl	800bf50 <_init>
 800b4ec:	1b64      	subs	r4, r4, r5
 800b4ee:	10a4      	asrs	r4, r4, #2
 800b4f0:	2600      	movs	r6, #0
 800b4f2:	42a6      	cmp	r6, r4
 800b4f4:	d105      	bne.n	800b502 <__libc_init_array+0x2e>
 800b4f6:	bd70      	pop	{r4, r5, r6, pc}
 800b4f8:	f855 3b04 	ldr.w	r3, [r5], #4
 800b4fc:	4798      	blx	r3
 800b4fe:	3601      	adds	r6, #1
 800b500:	e7ee      	b.n	800b4e0 <__libc_init_array+0xc>
 800b502:	f855 3b04 	ldr.w	r3, [r5], #4
 800b506:	4798      	blx	r3
 800b508:	3601      	adds	r6, #1
 800b50a:	e7f2      	b.n	800b4f2 <__libc_init_array+0x1e>
 800b50c:	0800c134 	.word	0x0800c134
 800b510:	0800c134 	.word	0x0800c134
 800b514:	0800c134 	.word	0x0800c134
 800b518:	0800c138 	.word	0x0800c138

0800b51c <__retarget_lock_init_recursive>:
 800b51c:	4770      	bx	lr

0800b51e <__retarget_lock_acquire_recursive>:
 800b51e:	4770      	bx	lr

0800b520 <__retarget_lock_release_recursive>:
 800b520:	4770      	bx	lr

0800b522 <memcpy>:
 800b522:	440a      	add	r2, r1
 800b524:	4291      	cmp	r1, r2
 800b526:	f100 33ff 	add.w	r3, r0, #4294967295
 800b52a:	d100      	bne.n	800b52e <memcpy+0xc>
 800b52c:	4770      	bx	lr
 800b52e:	b510      	push	{r4, lr}
 800b530:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b534:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b538:	4291      	cmp	r1, r2
 800b53a:	d1f9      	bne.n	800b530 <memcpy+0xe>
 800b53c:	bd10      	pop	{r4, pc}
	...

0800b540 <_free_r>:
 800b540:	b538      	push	{r3, r4, r5, lr}
 800b542:	4605      	mov	r5, r0
 800b544:	2900      	cmp	r1, #0
 800b546:	d041      	beq.n	800b5cc <_free_r+0x8c>
 800b548:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b54c:	1f0c      	subs	r4, r1, #4
 800b54e:	2b00      	cmp	r3, #0
 800b550:	bfb8      	it	lt
 800b552:	18e4      	addlt	r4, r4, r3
 800b554:	f000 f8e0 	bl	800b718 <__malloc_lock>
 800b558:	4a1d      	ldr	r2, [pc, #116]	@ (800b5d0 <_free_r+0x90>)
 800b55a:	6813      	ldr	r3, [r2, #0]
 800b55c:	b933      	cbnz	r3, 800b56c <_free_r+0x2c>
 800b55e:	6063      	str	r3, [r4, #4]
 800b560:	6014      	str	r4, [r2, #0]
 800b562:	4628      	mov	r0, r5
 800b564:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b568:	f000 b8dc 	b.w	800b724 <__malloc_unlock>
 800b56c:	42a3      	cmp	r3, r4
 800b56e:	d908      	bls.n	800b582 <_free_r+0x42>
 800b570:	6820      	ldr	r0, [r4, #0]
 800b572:	1821      	adds	r1, r4, r0
 800b574:	428b      	cmp	r3, r1
 800b576:	bf01      	itttt	eq
 800b578:	6819      	ldreq	r1, [r3, #0]
 800b57a:	685b      	ldreq	r3, [r3, #4]
 800b57c:	1809      	addeq	r1, r1, r0
 800b57e:	6021      	streq	r1, [r4, #0]
 800b580:	e7ed      	b.n	800b55e <_free_r+0x1e>
 800b582:	461a      	mov	r2, r3
 800b584:	685b      	ldr	r3, [r3, #4]
 800b586:	b10b      	cbz	r3, 800b58c <_free_r+0x4c>
 800b588:	42a3      	cmp	r3, r4
 800b58a:	d9fa      	bls.n	800b582 <_free_r+0x42>
 800b58c:	6811      	ldr	r1, [r2, #0]
 800b58e:	1850      	adds	r0, r2, r1
 800b590:	42a0      	cmp	r0, r4
 800b592:	d10b      	bne.n	800b5ac <_free_r+0x6c>
 800b594:	6820      	ldr	r0, [r4, #0]
 800b596:	4401      	add	r1, r0
 800b598:	1850      	adds	r0, r2, r1
 800b59a:	4283      	cmp	r3, r0
 800b59c:	6011      	str	r1, [r2, #0]
 800b59e:	d1e0      	bne.n	800b562 <_free_r+0x22>
 800b5a0:	6818      	ldr	r0, [r3, #0]
 800b5a2:	685b      	ldr	r3, [r3, #4]
 800b5a4:	6053      	str	r3, [r2, #4]
 800b5a6:	4408      	add	r0, r1
 800b5a8:	6010      	str	r0, [r2, #0]
 800b5aa:	e7da      	b.n	800b562 <_free_r+0x22>
 800b5ac:	d902      	bls.n	800b5b4 <_free_r+0x74>
 800b5ae:	230c      	movs	r3, #12
 800b5b0:	602b      	str	r3, [r5, #0]
 800b5b2:	e7d6      	b.n	800b562 <_free_r+0x22>
 800b5b4:	6820      	ldr	r0, [r4, #0]
 800b5b6:	1821      	adds	r1, r4, r0
 800b5b8:	428b      	cmp	r3, r1
 800b5ba:	bf04      	itt	eq
 800b5bc:	6819      	ldreq	r1, [r3, #0]
 800b5be:	685b      	ldreq	r3, [r3, #4]
 800b5c0:	6063      	str	r3, [r4, #4]
 800b5c2:	bf04      	itt	eq
 800b5c4:	1809      	addeq	r1, r1, r0
 800b5c6:	6021      	streq	r1, [r4, #0]
 800b5c8:	6054      	str	r4, [r2, #4]
 800b5ca:	e7ca      	b.n	800b562 <_free_r+0x22>
 800b5cc:	bd38      	pop	{r3, r4, r5, pc}
 800b5ce:	bf00      	nop
 800b5d0:	2001053c 	.word	0x2001053c

0800b5d4 <sbrk_aligned>:
 800b5d4:	b570      	push	{r4, r5, r6, lr}
 800b5d6:	4e0f      	ldr	r6, [pc, #60]	@ (800b614 <sbrk_aligned+0x40>)
 800b5d8:	460c      	mov	r4, r1
 800b5da:	6831      	ldr	r1, [r6, #0]
 800b5dc:	4605      	mov	r5, r0
 800b5de:	b911      	cbnz	r1, 800b5e6 <sbrk_aligned+0x12>
 800b5e0:	f000 fca6 	bl	800bf30 <_sbrk_r>
 800b5e4:	6030      	str	r0, [r6, #0]
 800b5e6:	4621      	mov	r1, r4
 800b5e8:	4628      	mov	r0, r5
 800b5ea:	f000 fca1 	bl	800bf30 <_sbrk_r>
 800b5ee:	1c43      	adds	r3, r0, #1
 800b5f0:	d103      	bne.n	800b5fa <sbrk_aligned+0x26>
 800b5f2:	f04f 34ff 	mov.w	r4, #4294967295
 800b5f6:	4620      	mov	r0, r4
 800b5f8:	bd70      	pop	{r4, r5, r6, pc}
 800b5fa:	1cc4      	adds	r4, r0, #3
 800b5fc:	f024 0403 	bic.w	r4, r4, #3
 800b600:	42a0      	cmp	r0, r4
 800b602:	d0f8      	beq.n	800b5f6 <sbrk_aligned+0x22>
 800b604:	1a21      	subs	r1, r4, r0
 800b606:	4628      	mov	r0, r5
 800b608:	f000 fc92 	bl	800bf30 <_sbrk_r>
 800b60c:	3001      	adds	r0, #1
 800b60e:	d1f2      	bne.n	800b5f6 <sbrk_aligned+0x22>
 800b610:	e7ef      	b.n	800b5f2 <sbrk_aligned+0x1e>
 800b612:	bf00      	nop
 800b614:	20010538 	.word	0x20010538

0800b618 <_malloc_r>:
 800b618:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b61c:	1ccd      	adds	r5, r1, #3
 800b61e:	f025 0503 	bic.w	r5, r5, #3
 800b622:	3508      	adds	r5, #8
 800b624:	2d0c      	cmp	r5, #12
 800b626:	bf38      	it	cc
 800b628:	250c      	movcc	r5, #12
 800b62a:	2d00      	cmp	r5, #0
 800b62c:	4606      	mov	r6, r0
 800b62e:	db01      	blt.n	800b634 <_malloc_r+0x1c>
 800b630:	42a9      	cmp	r1, r5
 800b632:	d904      	bls.n	800b63e <_malloc_r+0x26>
 800b634:	230c      	movs	r3, #12
 800b636:	6033      	str	r3, [r6, #0]
 800b638:	2000      	movs	r0, #0
 800b63a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b63e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b714 <_malloc_r+0xfc>
 800b642:	f000 f869 	bl	800b718 <__malloc_lock>
 800b646:	f8d8 3000 	ldr.w	r3, [r8]
 800b64a:	461c      	mov	r4, r3
 800b64c:	bb44      	cbnz	r4, 800b6a0 <_malloc_r+0x88>
 800b64e:	4629      	mov	r1, r5
 800b650:	4630      	mov	r0, r6
 800b652:	f7ff ffbf 	bl	800b5d4 <sbrk_aligned>
 800b656:	1c43      	adds	r3, r0, #1
 800b658:	4604      	mov	r4, r0
 800b65a:	d158      	bne.n	800b70e <_malloc_r+0xf6>
 800b65c:	f8d8 4000 	ldr.w	r4, [r8]
 800b660:	4627      	mov	r7, r4
 800b662:	2f00      	cmp	r7, #0
 800b664:	d143      	bne.n	800b6ee <_malloc_r+0xd6>
 800b666:	2c00      	cmp	r4, #0
 800b668:	d04b      	beq.n	800b702 <_malloc_r+0xea>
 800b66a:	6823      	ldr	r3, [r4, #0]
 800b66c:	4639      	mov	r1, r7
 800b66e:	4630      	mov	r0, r6
 800b670:	eb04 0903 	add.w	r9, r4, r3
 800b674:	f000 fc5c 	bl	800bf30 <_sbrk_r>
 800b678:	4581      	cmp	r9, r0
 800b67a:	d142      	bne.n	800b702 <_malloc_r+0xea>
 800b67c:	6821      	ldr	r1, [r4, #0]
 800b67e:	1a6d      	subs	r5, r5, r1
 800b680:	4629      	mov	r1, r5
 800b682:	4630      	mov	r0, r6
 800b684:	f7ff ffa6 	bl	800b5d4 <sbrk_aligned>
 800b688:	3001      	adds	r0, #1
 800b68a:	d03a      	beq.n	800b702 <_malloc_r+0xea>
 800b68c:	6823      	ldr	r3, [r4, #0]
 800b68e:	442b      	add	r3, r5
 800b690:	6023      	str	r3, [r4, #0]
 800b692:	f8d8 3000 	ldr.w	r3, [r8]
 800b696:	685a      	ldr	r2, [r3, #4]
 800b698:	bb62      	cbnz	r2, 800b6f4 <_malloc_r+0xdc>
 800b69a:	f8c8 7000 	str.w	r7, [r8]
 800b69e:	e00f      	b.n	800b6c0 <_malloc_r+0xa8>
 800b6a0:	6822      	ldr	r2, [r4, #0]
 800b6a2:	1b52      	subs	r2, r2, r5
 800b6a4:	d420      	bmi.n	800b6e8 <_malloc_r+0xd0>
 800b6a6:	2a0b      	cmp	r2, #11
 800b6a8:	d917      	bls.n	800b6da <_malloc_r+0xc2>
 800b6aa:	1961      	adds	r1, r4, r5
 800b6ac:	42a3      	cmp	r3, r4
 800b6ae:	6025      	str	r5, [r4, #0]
 800b6b0:	bf18      	it	ne
 800b6b2:	6059      	strne	r1, [r3, #4]
 800b6b4:	6863      	ldr	r3, [r4, #4]
 800b6b6:	bf08      	it	eq
 800b6b8:	f8c8 1000 	streq.w	r1, [r8]
 800b6bc:	5162      	str	r2, [r4, r5]
 800b6be:	604b      	str	r3, [r1, #4]
 800b6c0:	4630      	mov	r0, r6
 800b6c2:	f000 f82f 	bl	800b724 <__malloc_unlock>
 800b6c6:	f104 000b 	add.w	r0, r4, #11
 800b6ca:	1d23      	adds	r3, r4, #4
 800b6cc:	f020 0007 	bic.w	r0, r0, #7
 800b6d0:	1ac2      	subs	r2, r0, r3
 800b6d2:	bf1c      	itt	ne
 800b6d4:	1a1b      	subne	r3, r3, r0
 800b6d6:	50a3      	strne	r3, [r4, r2]
 800b6d8:	e7af      	b.n	800b63a <_malloc_r+0x22>
 800b6da:	6862      	ldr	r2, [r4, #4]
 800b6dc:	42a3      	cmp	r3, r4
 800b6de:	bf0c      	ite	eq
 800b6e0:	f8c8 2000 	streq.w	r2, [r8]
 800b6e4:	605a      	strne	r2, [r3, #4]
 800b6e6:	e7eb      	b.n	800b6c0 <_malloc_r+0xa8>
 800b6e8:	4623      	mov	r3, r4
 800b6ea:	6864      	ldr	r4, [r4, #4]
 800b6ec:	e7ae      	b.n	800b64c <_malloc_r+0x34>
 800b6ee:	463c      	mov	r4, r7
 800b6f0:	687f      	ldr	r7, [r7, #4]
 800b6f2:	e7b6      	b.n	800b662 <_malloc_r+0x4a>
 800b6f4:	461a      	mov	r2, r3
 800b6f6:	685b      	ldr	r3, [r3, #4]
 800b6f8:	42a3      	cmp	r3, r4
 800b6fa:	d1fb      	bne.n	800b6f4 <_malloc_r+0xdc>
 800b6fc:	2300      	movs	r3, #0
 800b6fe:	6053      	str	r3, [r2, #4]
 800b700:	e7de      	b.n	800b6c0 <_malloc_r+0xa8>
 800b702:	230c      	movs	r3, #12
 800b704:	6033      	str	r3, [r6, #0]
 800b706:	4630      	mov	r0, r6
 800b708:	f000 f80c 	bl	800b724 <__malloc_unlock>
 800b70c:	e794      	b.n	800b638 <_malloc_r+0x20>
 800b70e:	6005      	str	r5, [r0, #0]
 800b710:	e7d6      	b.n	800b6c0 <_malloc_r+0xa8>
 800b712:	bf00      	nop
 800b714:	2001053c 	.word	0x2001053c

0800b718 <__malloc_lock>:
 800b718:	4801      	ldr	r0, [pc, #4]	@ (800b720 <__malloc_lock+0x8>)
 800b71a:	f7ff bf00 	b.w	800b51e <__retarget_lock_acquire_recursive>
 800b71e:	bf00      	nop
 800b720:	20010534 	.word	0x20010534

0800b724 <__malloc_unlock>:
 800b724:	4801      	ldr	r0, [pc, #4]	@ (800b72c <__malloc_unlock+0x8>)
 800b726:	f7ff befb 	b.w	800b520 <__retarget_lock_release_recursive>
 800b72a:	bf00      	nop
 800b72c:	20010534 	.word	0x20010534

0800b730 <__sfputc_r>:
 800b730:	6893      	ldr	r3, [r2, #8]
 800b732:	3b01      	subs	r3, #1
 800b734:	2b00      	cmp	r3, #0
 800b736:	b410      	push	{r4}
 800b738:	6093      	str	r3, [r2, #8]
 800b73a:	da08      	bge.n	800b74e <__sfputc_r+0x1e>
 800b73c:	6994      	ldr	r4, [r2, #24]
 800b73e:	42a3      	cmp	r3, r4
 800b740:	db01      	blt.n	800b746 <__sfputc_r+0x16>
 800b742:	290a      	cmp	r1, #10
 800b744:	d103      	bne.n	800b74e <__sfputc_r+0x1e>
 800b746:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b74a:	f7ff bdda 	b.w	800b302 <__swbuf_r>
 800b74e:	6813      	ldr	r3, [r2, #0]
 800b750:	1c58      	adds	r0, r3, #1
 800b752:	6010      	str	r0, [r2, #0]
 800b754:	7019      	strb	r1, [r3, #0]
 800b756:	4608      	mov	r0, r1
 800b758:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b75c:	4770      	bx	lr

0800b75e <__sfputs_r>:
 800b75e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b760:	4606      	mov	r6, r0
 800b762:	460f      	mov	r7, r1
 800b764:	4614      	mov	r4, r2
 800b766:	18d5      	adds	r5, r2, r3
 800b768:	42ac      	cmp	r4, r5
 800b76a:	d101      	bne.n	800b770 <__sfputs_r+0x12>
 800b76c:	2000      	movs	r0, #0
 800b76e:	e007      	b.n	800b780 <__sfputs_r+0x22>
 800b770:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b774:	463a      	mov	r2, r7
 800b776:	4630      	mov	r0, r6
 800b778:	f7ff ffda 	bl	800b730 <__sfputc_r>
 800b77c:	1c43      	adds	r3, r0, #1
 800b77e:	d1f3      	bne.n	800b768 <__sfputs_r+0xa>
 800b780:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b784 <_vfiprintf_r>:
 800b784:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b788:	460d      	mov	r5, r1
 800b78a:	b09d      	sub	sp, #116	@ 0x74
 800b78c:	4614      	mov	r4, r2
 800b78e:	4698      	mov	r8, r3
 800b790:	4606      	mov	r6, r0
 800b792:	b118      	cbz	r0, 800b79c <_vfiprintf_r+0x18>
 800b794:	6a03      	ldr	r3, [r0, #32]
 800b796:	b90b      	cbnz	r3, 800b79c <_vfiprintf_r+0x18>
 800b798:	f7ff fcca 	bl	800b130 <__sinit>
 800b79c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b79e:	07d9      	lsls	r1, r3, #31
 800b7a0:	d405      	bmi.n	800b7ae <_vfiprintf_r+0x2a>
 800b7a2:	89ab      	ldrh	r3, [r5, #12]
 800b7a4:	059a      	lsls	r2, r3, #22
 800b7a6:	d402      	bmi.n	800b7ae <_vfiprintf_r+0x2a>
 800b7a8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b7aa:	f7ff feb8 	bl	800b51e <__retarget_lock_acquire_recursive>
 800b7ae:	89ab      	ldrh	r3, [r5, #12]
 800b7b0:	071b      	lsls	r3, r3, #28
 800b7b2:	d501      	bpl.n	800b7b8 <_vfiprintf_r+0x34>
 800b7b4:	692b      	ldr	r3, [r5, #16]
 800b7b6:	b99b      	cbnz	r3, 800b7e0 <_vfiprintf_r+0x5c>
 800b7b8:	4629      	mov	r1, r5
 800b7ba:	4630      	mov	r0, r6
 800b7bc:	f7ff fde0 	bl	800b380 <__swsetup_r>
 800b7c0:	b170      	cbz	r0, 800b7e0 <_vfiprintf_r+0x5c>
 800b7c2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b7c4:	07dc      	lsls	r4, r3, #31
 800b7c6:	d504      	bpl.n	800b7d2 <_vfiprintf_r+0x4e>
 800b7c8:	f04f 30ff 	mov.w	r0, #4294967295
 800b7cc:	b01d      	add	sp, #116	@ 0x74
 800b7ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7d2:	89ab      	ldrh	r3, [r5, #12]
 800b7d4:	0598      	lsls	r0, r3, #22
 800b7d6:	d4f7      	bmi.n	800b7c8 <_vfiprintf_r+0x44>
 800b7d8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b7da:	f7ff fea1 	bl	800b520 <__retarget_lock_release_recursive>
 800b7de:	e7f3      	b.n	800b7c8 <_vfiprintf_r+0x44>
 800b7e0:	2300      	movs	r3, #0
 800b7e2:	9309      	str	r3, [sp, #36]	@ 0x24
 800b7e4:	2320      	movs	r3, #32
 800b7e6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b7ea:	f8cd 800c 	str.w	r8, [sp, #12]
 800b7ee:	2330      	movs	r3, #48	@ 0x30
 800b7f0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b9a0 <_vfiprintf_r+0x21c>
 800b7f4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b7f8:	f04f 0901 	mov.w	r9, #1
 800b7fc:	4623      	mov	r3, r4
 800b7fe:	469a      	mov	sl, r3
 800b800:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b804:	b10a      	cbz	r2, 800b80a <_vfiprintf_r+0x86>
 800b806:	2a25      	cmp	r2, #37	@ 0x25
 800b808:	d1f9      	bne.n	800b7fe <_vfiprintf_r+0x7a>
 800b80a:	ebba 0b04 	subs.w	fp, sl, r4
 800b80e:	d00b      	beq.n	800b828 <_vfiprintf_r+0xa4>
 800b810:	465b      	mov	r3, fp
 800b812:	4622      	mov	r2, r4
 800b814:	4629      	mov	r1, r5
 800b816:	4630      	mov	r0, r6
 800b818:	f7ff ffa1 	bl	800b75e <__sfputs_r>
 800b81c:	3001      	adds	r0, #1
 800b81e:	f000 80a7 	beq.w	800b970 <_vfiprintf_r+0x1ec>
 800b822:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b824:	445a      	add	r2, fp
 800b826:	9209      	str	r2, [sp, #36]	@ 0x24
 800b828:	f89a 3000 	ldrb.w	r3, [sl]
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	f000 809f 	beq.w	800b970 <_vfiprintf_r+0x1ec>
 800b832:	2300      	movs	r3, #0
 800b834:	f04f 32ff 	mov.w	r2, #4294967295
 800b838:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b83c:	f10a 0a01 	add.w	sl, sl, #1
 800b840:	9304      	str	r3, [sp, #16]
 800b842:	9307      	str	r3, [sp, #28]
 800b844:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b848:	931a      	str	r3, [sp, #104]	@ 0x68
 800b84a:	4654      	mov	r4, sl
 800b84c:	2205      	movs	r2, #5
 800b84e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b852:	4853      	ldr	r0, [pc, #332]	@ (800b9a0 <_vfiprintf_r+0x21c>)
 800b854:	f7f4 fccc 	bl	80001f0 <memchr>
 800b858:	9a04      	ldr	r2, [sp, #16]
 800b85a:	b9d8      	cbnz	r0, 800b894 <_vfiprintf_r+0x110>
 800b85c:	06d1      	lsls	r1, r2, #27
 800b85e:	bf44      	itt	mi
 800b860:	2320      	movmi	r3, #32
 800b862:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b866:	0713      	lsls	r3, r2, #28
 800b868:	bf44      	itt	mi
 800b86a:	232b      	movmi	r3, #43	@ 0x2b
 800b86c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b870:	f89a 3000 	ldrb.w	r3, [sl]
 800b874:	2b2a      	cmp	r3, #42	@ 0x2a
 800b876:	d015      	beq.n	800b8a4 <_vfiprintf_r+0x120>
 800b878:	9a07      	ldr	r2, [sp, #28]
 800b87a:	4654      	mov	r4, sl
 800b87c:	2000      	movs	r0, #0
 800b87e:	f04f 0c0a 	mov.w	ip, #10
 800b882:	4621      	mov	r1, r4
 800b884:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b888:	3b30      	subs	r3, #48	@ 0x30
 800b88a:	2b09      	cmp	r3, #9
 800b88c:	d94b      	bls.n	800b926 <_vfiprintf_r+0x1a2>
 800b88e:	b1b0      	cbz	r0, 800b8be <_vfiprintf_r+0x13a>
 800b890:	9207      	str	r2, [sp, #28]
 800b892:	e014      	b.n	800b8be <_vfiprintf_r+0x13a>
 800b894:	eba0 0308 	sub.w	r3, r0, r8
 800b898:	fa09 f303 	lsl.w	r3, r9, r3
 800b89c:	4313      	orrs	r3, r2
 800b89e:	9304      	str	r3, [sp, #16]
 800b8a0:	46a2      	mov	sl, r4
 800b8a2:	e7d2      	b.n	800b84a <_vfiprintf_r+0xc6>
 800b8a4:	9b03      	ldr	r3, [sp, #12]
 800b8a6:	1d19      	adds	r1, r3, #4
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	9103      	str	r1, [sp, #12]
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	bfbb      	ittet	lt
 800b8b0:	425b      	neglt	r3, r3
 800b8b2:	f042 0202 	orrlt.w	r2, r2, #2
 800b8b6:	9307      	strge	r3, [sp, #28]
 800b8b8:	9307      	strlt	r3, [sp, #28]
 800b8ba:	bfb8      	it	lt
 800b8bc:	9204      	strlt	r2, [sp, #16]
 800b8be:	7823      	ldrb	r3, [r4, #0]
 800b8c0:	2b2e      	cmp	r3, #46	@ 0x2e
 800b8c2:	d10a      	bne.n	800b8da <_vfiprintf_r+0x156>
 800b8c4:	7863      	ldrb	r3, [r4, #1]
 800b8c6:	2b2a      	cmp	r3, #42	@ 0x2a
 800b8c8:	d132      	bne.n	800b930 <_vfiprintf_r+0x1ac>
 800b8ca:	9b03      	ldr	r3, [sp, #12]
 800b8cc:	1d1a      	adds	r2, r3, #4
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	9203      	str	r2, [sp, #12]
 800b8d2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b8d6:	3402      	adds	r4, #2
 800b8d8:	9305      	str	r3, [sp, #20]
 800b8da:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b9b0 <_vfiprintf_r+0x22c>
 800b8de:	7821      	ldrb	r1, [r4, #0]
 800b8e0:	2203      	movs	r2, #3
 800b8e2:	4650      	mov	r0, sl
 800b8e4:	f7f4 fc84 	bl	80001f0 <memchr>
 800b8e8:	b138      	cbz	r0, 800b8fa <_vfiprintf_r+0x176>
 800b8ea:	9b04      	ldr	r3, [sp, #16]
 800b8ec:	eba0 000a 	sub.w	r0, r0, sl
 800b8f0:	2240      	movs	r2, #64	@ 0x40
 800b8f2:	4082      	lsls	r2, r0
 800b8f4:	4313      	orrs	r3, r2
 800b8f6:	3401      	adds	r4, #1
 800b8f8:	9304      	str	r3, [sp, #16]
 800b8fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b8fe:	4829      	ldr	r0, [pc, #164]	@ (800b9a4 <_vfiprintf_r+0x220>)
 800b900:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b904:	2206      	movs	r2, #6
 800b906:	f7f4 fc73 	bl	80001f0 <memchr>
 800b90a:	2800      	cmp	r0, #0
 800b90c:	d03f      	beq.n	800b98e <_vfiprintf_r+0x20a>
 800b90e:	4b26      	ldr	r3, [pc, #152]	@ (800b9a8 <_vfiprintf_r+0x224>)
 800b910:	bb1b      	cbnz	r3, 800b95a <_vfiprintf_r+0x1d6>
 800b912:	9b03      	ldr	r3, [sp, #12]
 800b914:	3307      	adds	r3, #7
 800b916:	f023 0307 	bic.w	r3, r3, #7
 800b91a:	3308      	adds	r3, #8
 800b91c:	9303      	str	r3, [sp, #12]
 800b91e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b920:	443b      	add	r3, r7
 800b922:	9309      	str	r3, [sp, #36]	@ 0x24
 800b924:	e76a      	b.n	800b7fc <_vfiprintf_r+0x78>
 800b926:	fb0c 3202 	mla	r2, ip, r2, r3
 800b92a:	460c      	mov	r4, r1
 800b92c:	2001      	movs	r0, #1
 800b92e:	e7a8      	b.n	800b882 <_vfiprintf_r+0xfe>
 800b930:	2300      	movs	r3, #0
 800b932:	3401      	adds	r4, #1
 800b934:	9305      	str	r3, [sp, #20]
 800b936:	4619      	mov	r1, r3
 800b938:	f04f 0c0a 	mov.w	ip, #10
 800b93c:	4620      	mov	r0, r4
 800b93e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b942:	3a30      	subs	r2, #48	@ 0x30
 800b944:	2a09      	cmp	r2, #9
 800b946:	d903      	bls.n	800b950 <_vfiprintf_r+0x1cc>
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d0c6      	beq.n	800b8da <_vfiprintf_r+0x156>
 800b94c:	9105      	str	r1, [sp, #20]
 800b94e:	e7c4      	b.n	800b8da <_vfiprintf_r+0x156>
 800b950:	fb0c 2101 	mla	r1, ip, r1, r2
 800b954:	4604      	mov	r4, r0
 800b956:	2301      	movs	r3, #1
 800b958:	e7f0      	b.n	800b93c <_vfiprintf_r+0x1b8>
 800b95a:	ab03      	add	r3, sp, #12
 800b95c:	9300      	str	r3, [sp, #0]
 800b95e:	462a      	mov	r2, r5
 800b960:	4b12      	ldr	r3, [pc, #72]	@ (800b9ac <_vfiprintf_r+0x228>)
 800b962:	a904      	add	r1, sp, #16
 800b964:	4630      	mov	r0, r6
 800b966:	f3af 8000 	nop.w
 800b96a:	4607      	mov	r7, r0
 800b96c:	1c78      	adds	r0, r7, #1
 800b96e:	d1d6      	bne.n	800b91e <_vfiprintf_r+0x19a>
 800b970:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b972:	07d9      	lsls	r1, r3, #31
 800b974:	d405      	bmi.n	800b982 <_vfiprintf_r+0x1fe>
 800b976:	89ab      	ldrh	r3, [r5, #12]
 800b978:	059a      	lsls	r2, r3, #22
 800b97a:	d402      	bmi.n	800b982 <_vfiprintf_r+0x1fe>
 800b97c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b97e:	f7ff fdcf 	bl	800b520 <__retarget_lock_release_recursive>
 800b982:	89ab      	ldrh	r3, [r5, #12]
 800b984:	065b      	lsls	r3, r3, #25
 800b986:	f53f af1f 	bmi.w	800b7c8 <_vfiprintf_r+0x44>
 800b98a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b98c:	e71e      	b.n	800b7cc <_vfiprintf_r+0x48>
 800b98e:	ab03      	add	r3, sp, #12
 800b990:	9300      	str	r3, [sp, #0]
 800b992:	462a      	mov	r2, r5
 800b994:	4b05      	ldr	r3, [pc, #20]	@ (800b9ac <_vfiprintf_r+0x228>)
 800b996:	a904      	add	r1, sp, #16
 800b998:	4630      	mov	r0, r6
 800b99a:	f000 f879 	bl	800ba90 <_printf_i>
 800b99e:	e7e4      	b.n	800b96a <_vfiprintf_r+0x1e6>
 800b9a0:	0800c0f8 	.word	0x0800c0f8
 800b9a4:	0800c102 	.word	0x0800c102
 800b9a8:	00000000 	.word	0x00000000
 800b9ac:	0800b75f 	.word	0x0800b75f
 800b9b0:	0800c0fe 	.word	0x0800c0fe

0800b9b4 <_printf_common>:
 800b9b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b9b8:	4616      	mov	r6, r2
 800b9ba:	4698      	mov	r8, r3
 800b9bc:	688a      	ldr	r2, [r1, #8]
 800b9be:	690b      	ldr	r3, [r1, #16]
 800b9c0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b9c4:	4293      	cmp	r3, r2
 800b9c6:	bfb8      	it	lt
 800b9c8:	4613      	movlt	r3, r2
 800b9ca:	6033      	str	r3, [r6, #0]
 800b9cc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b9d0:	4607      	mov	r7, r0
 800b9d2:	460c      	mov	r4, r1
 800b9d4:	b10a      	cbz	r2, 800b9da <_printf_common+0x26>
 800b9d6:	3301      	adds	r3, #1
 800b9d8:	6033      	str	r3, [r6, #0]
 800b9da:	6823      	ldr	r3, [r4, #0]
 800b9dc:	0699      	lsls	r1, r3, #26
 800b9de:	bf42      	ittt	mi
 800b9e0:	6833      	ldrmi	r3, [r6, #0]
 800b9e2:	3302      	addmi	r3, #2
 800b9e4:	6033      	strmi	r3, [r6, #0]
 800b9e6:	6825      	ldr	r5, [r4, #0]
 800b9e8:	f015 0506 	ands.w	r5, r5, #6
 800b9ec:	d106      	bne.n	800b9fc <_printf_common+0x48>
 800b9ee:	f104 0a19 	add.w	sl, r4, #25
 800b9f2:	68e3      	ldr	r3, [r4, #12]
 800b9f4:	6832      	ldr	r2, [r6, #0]
 800b9f6:	1a9b      	subs	r3, r3, r2
 800b9f8:	42ab      	cmp	r3, r5
 800b9fa:	dc26      	bgt.n	800ba4a <_printf_common+0x96>
 800b9fc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ba00:	6822      	ldr	r2, [r4, #0]
 800ba02:	3b00      	subs	r3, #0
 800ba04:	bf18      	it	ne
 800ba06:	2301      	movne	r3, #1
 800ba08:	0692      	lsls	r2, r2, #26
 800ba0a:	d42b      	bmi.n	800ba64 <_printf_common+0xb0>
 800ba0c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ba10:	4641      	mov	r1, r8
 800ba12:	4638      	mov	r0, r7
 800ba14:	47c8      	blx	r9
 800ba16:	3001      	adds	r0, #1
 800ba18:	d01e      	beq.n	800ba58 <_printf_common+0xa4>
 800ba1a:	6823      	ldr	r3, [r4, #0]
 800ba1c:	6922      	ldr	r2, [r4, #16]
 800ba1e:	f003 0306 	and.w	r3, r3, #6
 800ba22:	2b04      	cmp	r3, #4
 800ba24:	bf02      	ittt	eq
 800ba26:	68e5      	ldreq	r5, [r4, #12]
 800ba28:	6833      	ldreq	r3, [r6, #0]
 800ba2a:	1aed      	subeq	r5, r5, r3
 800ba2c:	68a3      	ldr	r3, [r4, #8]
 800ba2e:	bf0c      	ite	eq
 800ba30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ba34:	2500      	movne	r5, #0
 800ba36:	4293      	cmp	r3, r2
 800ba38:	bfc4      	itt	gt
 800ba3a:	1a9b      	subgt	r3, r3, r2
 800ba3c:	18ed      	addgt	r5, r5, r3
 800ba3e:	2600      	movs	r6, #0
 800ba40:	341a      	adds	r4, #26
 800ba42:	42b5      	cmp	r5, r6
 800ba44:	d11a      	bne.n	800ba7c <_printf_common+0xc8>
 800ba46:	2000      	movs	r0, #0
 800ba48:	e008      	b.n	800ba5c <_printf_common+0xa8>
 800ba4a:	2301      	movs	r3, #1
 800ba4c:	4652      	mov	r2, sl
 800ba4e:	4641      	mov	r1, r8
 800ba50:	4638      	mov	r0, r7
 800ba52:	47c8      	blx	r9
 800ba54:	3001      	adds	r0, #1
 800ba56:	d103      	bne.n	800ba60 <_printf_common+0xac>
 800ba58:	f04f 30ff 	mov.w	r0, #4294967295
 800ba5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba60:	3501      	adds	r5, #1
 800ba62:	e7c6      	b.n	800b9f2 <_printf_common+0x3e>
 800ba64:	18e1      	adds	r1, r4, r3
 800ba66:	1c5a      	adds	r2, r3, #1
 800ba68:	2030      	movs	r0, #48	@ 0x30
 800ba6a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ba6e:	4422      	add	r2, r4
 800ba70:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ba74:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ba78:	3302      	adds	r3, #2
 800ba7a:	e7c7      	b.n	800ba0c <_printf_common+0x58>
 800ba7c:	2301      	movs	r3, #1
 800ba7e:	4622      	mov	r2, r4
 800ba80:	4641      	mov	r1, r8
 800ba82:	4638      	mov	r0, r7
 800ba84:	47c8      	blx	r9
 800ba86:	3001      	adds	r0, #1
 800ba88:	d0e6      	beq.n	800ba58 <_printf_common+0xa4>
 800ba8a:	3601      	adds	r6, #1
 800ba8c:	e7d9      	b.n	800ba42 <_printf_common+0x8e>
	...

0800ba90 <_printf_i>:
 800ba90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ba94:	7e0f      	ldrb	r7, [r1, #24]
 800ba96:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ba98:	2f78      	cmp	r7, #120	@ 0x78
 800ba9a:	4691      	mov	r9, r2
 800ba9c:	4680      	mov	r8, r0
 800ba9e:	460c      	mov	r4, r1
 800baa0:	469a      	mov	sl, r3
 800baa2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800baa6:	d807      	bhi.n	800bab8 <_printf_i+0x28>
 800baa8:	2f62      	cmp	r7, #98	@ 0x62
 800baaa:	d80a      	bhi.n	800bac2 <_printf_i+0x32>
 800baac:	2f00      	cmp	r7, #0
 800baae:	f000 80d2 	beq.w	800bc56 <_printf_i+0x1c6>
 800bab2:	2f58      	cmp	r7, #88	@ 0x58
 800bab4:	f000 80b9 	beq.w	800bc2a <_printf_i+0x19a>
 800bab8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800babc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800bac0:	e03a      	b.n	800bb38 <_printf_i+0xa8>
 800bac2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800bac6:	2b15      	cmp	r3, #21
 800bac8:	d8f6      	bhi.n	800bab8 <_printf_i+0x28>
 800baca:	a101      	add	r1, pc, #4	@ (adr r1, 800bad0 <_printf_i+0x40>)
 800bacc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bad0:	0800bb29 	.word	0x0800bb29
 800bad4:	0800bb3d 	.word	0x0800bb3d
 800bad8:	0800bab9 	.word	0x0800bab9
 800badc:	0800bab9 	.word	0x0800bab9
 800bae0:	0800bab9 	.word	0x0800bab9
 800bae4:	0800bab9 	.word	0x0800bab9
 800bae8:	0800bb3d 	.word	0x0800bb3d
 800baec:	0800bab9 	.word	0x0800bab9
 800baf0:	0800bab9 	.word	0x0800bab9
 800baf4:	0800bab9 	.word	0x0800bab9
 800baf8:	0800bab9 	.word	0x0800bab9
 800bafc:	0800bc3d 	.word	0x0800bc3d
 800bb00:	0800bb67 	.word	0x0800bb67
 800bb04:	0800bbf7 	.word	0x0800bbf7
 800bb08:	0800bab9 	.word	0x0800bab9
 800bb0c:	0800bab9 	.word	0x0800bab9
 800bb10:	0800bc5f 	.word	0x0800bc5f
 800bb14:	0800bab9 	.word	0x0800bab9
 800bb18:	0800bb67 	.word	0x0800bb67
 800bb1c:	0800bab9 	.word	0x0800bab9
 800bb20:	0800bab9 	.word	0x0800bab9
 800bb24:	0800bbff 	.word	0x0800bbff
 800bb28:	6833      	ldr	r3, [r6, #0]
 800bb2a:	1d1a      	adds	r2, r3, #4
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	6032      	str	r2, [r6, #0]
 800bb30:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bb34:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800bb38:	2301      	movs	r3, #1
 800bb3a:	e09d      	b.n	800bc78 <_printf_i+0x1e8>
 800bb3c:	6833      	ldr	r3, [r6, #0]
 800bb3e:	6820      	ldr	r0, [r4, #0]
 800bb40:	1d19      	adds	r1, r3, #4
 800bb42:	6031      	str	r1, [r6, #0]
 800bb44:	0606      	lsls	r6, r0, #24
 800bb46:	d501      	bpl.n	800bb4c <_printf_i+0xbc>
 800bb48:	681d      	ldr	r5, [r3, #0]
 800bb4a:	e003      	b.n	800bb54 <_printf_i+0xc4>
 800bb4c:	0645      	lsls	r5, r0, #25
 800bb4e:	d5fb      	bpl.n	800bb48 <_printf_i+0xb8>
 800bb50:	f9b3 5000 	ldrsh.w	r5, [r3]
 800bb54:	2d00      	cmp	r5, #0
 800bb56:	da03      	bge.n	800bb60 <_printf_i+0xd0>
 800bb58:	232d      	movs	r3, #45	@ 0x2d
 800bb5a:	426d      	negs	r5, r5
 800bb5c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bb60:	4859      	ldr	r0, [pc, #356]	@ (800bcc8 <_printf_i+0x238>)
 800bb62:	230a      	movs	r3, #10
 800bb64:	e011      	b.n	800bb8a <_printf_i+0xfa>
 800bb66:	6821      	ldr	r1, [r4, #0]
 800bb68:	6833      	ldr	r3, [r6, #0]
 800bb6a:	0608      	lsls	r0, r1, #24
 800bb6c:	f853 5b04 	ldr.w	r5, [r3], #4
 800bb70:	d402      	bmi.n	800bb78 <_printf_i+0xe8>
 800bb72:	0649      	lsls	r1, r1, #25
 800bb74:	bf48      	it	mi
 800bb76:	b2ad      	uxthmi	r5, r5
 800bb78:	2f6f      	cmp	r7, #111	@ 0x6f
 800bb7a:	4853      	ldr	r0, [pc, #332]	@ (800bcc8 <_printf_i+0x238>)
 800bb7c:	6033      	str	r3, [r6, #0]
 800bb7e:	bf14      	ite	ne
 800bb80:	230a      	movne	r3, #10
 800bb82:	2308      	moveq	r3, #8
 800bb84:	2100      	movs	r1, #0
 800bb86:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800bb8a:	6866      	ldr	r6, [r4, #4]
 800bb8c:	60a6      	str	r6, [r4, #8]
 800bb8e:	2e00      	cmp	r6, #0
 800bb90:	bfa2      	ittt	ge
 800bb92:	6821      	ldrge	r1, [r4, #0]
 800bb94:	f021 0104 	bicge.w	r1, r1, #4
 800bb98:	6021      	strge	r1, [r4, #0]
 800bb9a:	b90d      	cbnz	r5, 800bba0 <_printf_i+0x110>
 800bb9c:	2e00      	cmp	r6, #0
 800bb9e:	d04b      	beq.n	800bc38 <_printf_i+0x1a8>
 800bba0:	4616      	mov	r6, r2
 800bba2:	fbb5 f1f3 	udiv	r1, r5, r3
 800bba6:	fb03 5711 	mls	r7, r3, r1, r5
 800bbaa:	5dc7      	ldrb	r7, [r0, r7]
 800bbac:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800bbb0:	462f      	mov	r7, r5
 800bbb2:	42bb      	cmp	r3, r7
 800bbb4:	460d      	mov	r5, r1
 800bbb6:	d9f4      	bls.n	800bba2 <_printf_i+0x112>
 800bbb8:	2b08      	cmp	r3, #8
 800bbba:	d10b      	bne.n	800bbd4 <_printf_i+0x144>
 800bbbc:	6823      	ldr	r3, [r4, #0]
 800bbbe:	07df      	lsls	r7, r3, #31
 800bbc0:	d508      	bpl.n	800bbd4 <_printf_i+0x144>
 800bbc2:	6923      	ldr	r3, [r4, #16]
 800bbc4:	6861      	ldr	r1, [r4, #4]
 800bbc6:	4299      	cmp	r1, r3
 800bbc8:	bfde      	ittt	le
 800bbca:	2330      	movle	r3, #48	@ 0x30
 800bbcc:	f806 3c01 	strble.w	r3, [r6, #-1]
 800bbd0:	f106 36ff 	addle.w	r6, r6, #4294967295
 800bbd4:	1b92      	subs	r2, r2, r6
 800bbd6:	6122      	str	r2, [r4, #16]
 800bbd8:	f8cd a000 	str.w	sl, [sp]
 800bbdc:	464b      	mov	r3, r9
 800bbde:	aa03      	add	r2, sp, #12
 800bbe0:	4621      	mov	r1, r4
 800bbe2:	4640      	mov	r0, r8
 800bbe4:	f7ff fee6 	bl	800b9b4 <_printf_common>
 800bbe8:	3001      	adds	r0, #1
 800bbea:	d14a      	bne.n	800bc82 <_printf_i+0x1f2>
 800bbec:	f04f 30ff 	mov.w	r0, #4294967295
 800bbf0:	b004      	add	sp, #16
 800bbf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bbf6:	6823      	ldr	r3, [r4, #0]
 800bbf8:	f043 0320 	orr.w	r3, r3, #32
 800bbfc:	6023      	str	r3, [r4, #0]
 800bbfe:	4833      	ldr	r0, [pc, #204]	@ (800bccc <_printf_i+0x23c>)
 800bc00:	2778      	movs	r7, #120	@ 0x78
 800bc02:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800bc06:	6823      	ldr	r3, [r4, #0]
 800bc08:	6831      	ldr	r1, [r6, #0]
 800bc0a:	061f      	lsls	r7, r3, #24
 800bc0c:	f851 5b04 	ldr.w	r5, [r1], #4
 800bc10:	d402      	bmi.n	800bc18 <_printf_i+0x188>
 800bc12:	065f      	lsls	r7, r3, #25
 800bc14:	bf48      	it	mi
 800bc16:	b2ad      	uxthmi	r5, r5
 800bc18:	6031      	str	r1, [r6, #0]
 800bc1a:	07d9      	lsls	r1, r3, #31
 800bc1c:	bf44      	itt	mi
 800bc1e:	f043 0320 	orrmi.w	r3, r3, #32
 800bc22:	6023      	strmi	r3, [r4, #0]
 800bc24:	b11d      	cbz	r5, 800bc2e <_printf_i+0x19e>
 800bc26:	2310      	movs	r3, #16
 800bc28:	e7ac      	b.n	800bb84 <_printf_i+0xf4>
 800bc2a:	4827      	ldr	r0, [pc, #156]	@ (800bcc8 <_printf_i+0x238>)
 800bc2c:	e7e9      	b.n	800bc02 <_printf_i+0x172>
 800bc2e:	6823      	ldr	r3, [r4, #0]
 800bc30:	f023 0320 	bic.w	r3, r3, #32
 800bc34:	6023      	str	r3, [r4, #0]
 800bc36:	e7f6      	b.n	800bc26 <_printf_i+0x196>
 800bc38:	4616      	mov	r6, r2
 800bc3a:	e7bd      	b.n	800bbb8 <_printf_i+0x128>
 800bc3c:	6833      	ldr	r3, [r6, #0]
 800bc3e:	6825      	ldr	r5, [r4, #0]
 800bc40:	6961      	ldr	r1, [r4, #20]
 800bc42:	1d18      	adds	r0, r3, #4
 800bc44:	6030      	str	r0, [r6, #0]
 800bc46:	062e      	lsls	r6, r5, #24
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	d501      	bpl.n	800bc50 <_printf_i+0x1c0>
 800bc4c:	6019      	str	r1, [r3, #0]
 800bc4e:	e002      	b.n	800bc56 <_printf_i+0x1c6>
 800bc50:	0668      	lsls	r0, r5, #25
 800bc52:	d5fb      	bpl.n	800bc4c <_printf_i+0x1bc>
 800bc54:	8019      	strh	r1, [r3, #0]
 800bc56:	2300      	movs	r3, #0
 800bc58:	6123      	str	r3, [r4, #16]
 800bc5a:	4616      	mov	r6, r2
 800bc5c:	e7bc      	b.n	800bbd8 <_printf_i+0x148>
 800bc5e:	6833      	ldr	r3, [r6, #0]
 800bc60:	1d1a      	adds	r2, r3, #4
 800bc62:	6032      	str	r2, [r6, #0]
 800bc64:	681e      	ldr	r6, [r3, #0]
 800bc66:	6862      	ldr	r2, [r4, #4]
 800bc68:	2100      	movs	r1, #0
 800bc6a:	4630      	mov	r0, r6
 800bc6c:	f7f4 fac0 	bl	80001f0 <memchr>
 800bc70:	b108      	cbz	r0, 800bc76 <_printf_i+0x1e6>
 800bc72:	1b80      	subs	r0, r0, r6
 800bc74:	6060      	str	r0, [r4, #4]
 800bc76:	6863      	ldr	r3, [r4, #4]
 800bc78:	6123      	str	r3, [r4, #16]
 800bc7a:	2300      	movs	r3, #0
 800bc7c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bc80:	e7aa      	b.n	800bbd8 <_printf_i+0x148>
 800bc82:	6923      	ldr	r3, [r4, #16]
 800bc84:	4632      	mov	r2, r6
 800bc86:	4649      	mov	r1, r9
 800bc88:	4640      	mov	r0, r8
 800bc8a:	47d0      	blx	sl
 800bc8c:	3001      	adds	r0, #1
 800bc8e:	d0ad      	beq.n	800bbec <_printf_i+0x15c>
 800bc90:	6823      	ldr	r3, [r4, #0]
 800bc92:	079b      	lsls	r3, r3, #30
 800bc94:	d413      	bmi.n	800bcbe <_printf_i+0x22e>
 800bc96:	68e0      	ldr	r0, [r4, #12]
 800bc98:	9b03      	ldr	r3, [sp, #12]
 800bc9a:	4298      	cmp	r0, r3
 800bc9c:	bfb8      	it	lt
 800bc9e:	4618      	movlt	r0, r3
 800bca0:	e7a6      	b.n	800bbf0 <_printf_i+0x160>
 800bca2:	2301      	movs	r3, #1
 800bca4:	4632      	mov	r2, r6
 800bca6:	4649      	mov	r1, r9
 800bca8:	4640      	mov	r0, r8
 800bcaa:	47d0      	blx	sl
 800bcac:	3001      	adds	r0, #1
 800bcae:	d09d      	beq.n	800bbec <_printf_i+0x15c>
 800bcb0:	3501      	adds	r5, #1
 800bcb2:	68e3      	ldr	r3, [r4, #12]
 800bcb4:	9903      	ldr	r1, [sp, #12]
 800bcb6:	1a5b      	subs	r3, r3, r1
 800bcb8:	42ab      	cmp	r3, r5
 800bcba:	dcf2      	bgt.n	800bca2 <_printf_i+0x212>
 800bcbc:	e7eb      	b.n	800bc96 <_printf_i+0x206>
 800bcbe:	2500      	movs	r5, #0
 800bcc0:	f104 0619 	add.w	r6, r4, #25
 800bcc4:	e7f5      	b.n	800bcb2 <_printf_i+0x222>
 800bcc6:	bf00      	nop
 800bcc8:	0800c109 	.word	0x0800c109
 800bccc:	0800c11a 	.word	0x0800c11a

0800bcd0 <__sflush_r>:
 800bcd0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bcd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bcd8:	0716      	lsls	r6, r2, #28
 800bcda:	4605      	mov	r5, r0
 800bcdc:	460c      	mov	r4, r1
 800bcde:	d454      	bmi.n	800bd8a <__sflush_r+0xba>
 800bce0:	684b      	ldr	r3, [r1, #4]
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	dc02      	bgt.n	800bcec <__sflush_r+0x1c>
 800bce6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	dd48      	ble.n	800bd7e <__sflush_r+0xae>
 800bcec:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bcee:	2e00      	cmp	r6, #0
 800bcf0:	d045      	beq.n	800bd7e <__sflush_r+0xae>
 800bcf2:	2300      	movs	r3, #0
 800bcf4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800bcf8:	682f      	ldr	r7, [r5, #0]
 800bcfa:	6a21      	ldr	r1, [r4, #32]
 800bcfc:	602b      	str	r3, [r5, #0]
 800bcfe:	d030      	beq.n	800bd62 <__sflush_r+0x92>
 800bd00:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800bd02:	89a3      	ldrh	r3, [r4, #12]
 800bd04:	0759      	lsls	r1, r3, #29
 800bd06:	d505      	bpl.n	800bd14 <__sflush_r+0x44>
 800bd08:	6863      	ldr	r3, [r4, #4]
 800bd0a:	1ad2      	subs	r2, r2, r3
 800bd0c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800bd0e:	b10b      	cbz	r3, 800bd14 <__sflush_r+0x44>
 800bd10:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800bd12:	1ad2      	subs	r2, r2, r3
 800bd14:	2300      	movs	r3, #0
 800bd16:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bd18:	6a21      	ldr	r1, [r4, #32]
 800bd1a:	4628      	mov	r0, r5
 800bd1c:	47b0      	blx	r6
 800bd1e:	1c43      	adds	r3, r0, #1
 800bd20:	89a3      	ldrh	r3, [r4, #12]
 800bd22:	d106      	bne.n	800bd32 <__sflush_r+0x62>
 800bd24:	6829      	ldr	r1, [r5, #0]
 800bd26:	291d      	cmp	r1, #29
 800bd28:	d82b      	bhi.n	800bd82 <__sflush_r+0xb2>
 800bd2a:	4a2a      	ldr	r2, [pc, #168]	@ (800bdd4 <__sflush_r+0x104>)
 800bd2c:	410a      	asrs	r2, r1
 800bd2e:	07d6      	lsls	r6, r2, #31
 800bd30:	d427      	bmi.n	800bd82 <__sflush_r+0xb2>
 800bd32:	2200      	movs	r2, #0
 800bd34:	6062      	str	r2, [r4, #4]
 800bd36:	04d9      	lsls	r1, r3, #19
 800bd38:	6922      	ldr	r2, [r4, #16]
 800bd3a:	6022      	str	r2, [r4, #0]
 800bd3c:	d504      	bpl.n	800bd48 <__sflush_r+0x78>
 800bd3e:	1c42      	adds	r2, r0, #1
 800bd40:	d101      	bne.n	800bd46 <__sflush_r+0x76>
 800bd42:	682b      	ldr	r3, [r5, #0]
 800bd44:	b903      	cbnz	r3, 800bd48 <__sflush_r+0x78>
 800bd46:	6560      	str	r0, [r4, #84]	@ 0x54
 800bd48:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bd4a:	602f      	str	r7, [r5, #0]
 800bd4c:	b1b9      	cbz	r1, 800bd7e <__sflush_r+0xae>
 800bd4e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bd52:	4299      	cmp	r1, r3
 800bd54:	d002      	beq.n	800bd5c <__sflush_r+0x8c>
 800bd56:	4628      	mov	r0, r5
 800bd58:	f7ff fbf2 	bl	800b540 <_free_r>
 800bd5c:	2300      	movs	r3, #0
 800bd5e:	6363      	str	r3, [r4, #52]	@ 0x34
 800bd60:	e00d      	b.n	800bd7e <__sflush_r+0xae>
 800bd62:	2301      	movs	r3, #1
 800bd64:	4628      	mov	r0, r5
 800bd66:	47b0      	blx	r6
 800bd68:	4602      	mov	r2, r0
 800bd6a:	1c50      	adds	r0, r2, #1
 800bd6c:	d1c9      	bne.n	800bd02 <__sflush_r+0x32>
 800bd6e:	682b      	ldr	r3, [r5, #0]
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	d0c6      	beq.n	800bd02 <__sflush_r+0x32>
 800bd74:	2b1d      	cmp	r3, #29
 800bd76:	d001      	beq.n	800bd7c <__sflush_r+0xac>
 800bd78:	2b16      	cmp	r3, #22
 800bd7a:	d11e      	bne.n	800bdba <__sflush_r+0xea>
 800bd7c:	602f      	str	r7, [r5, #0]
 800bd7e:	2000      	movs	r0, #0
 800bd80:	e022      	b.n	800bdc8 <__sflush_r+0xf8>
 800bd82:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bd86:	b21b      	sxth	r3, r3
 800bd88:	e01b      	b.n	800bdc2 <__sflush_r+0xf2>
 800bd8a:	690f      	ldr	r7, [r1, #16]
 800bd8c:	2f00      	cmp	r7, #0
 800bd8e:	d0f6      	beq.n	800bd7e <__sflush_r+0xae>
 800bd90:	0793      	lsls	r3, r2, #30
 800bd92:	680e      	ldr	r6, [r1, #0]
 800bd94:	bf08      	it	eq
 800bd96:	694b      	ldreq	r3, [r1, #20]
 800bd98:	600f      	str	r7, [r1, #0]
 800bd9a:	bf18      	it	ne
 800bd9c:	2300      	movne	r3, #0
 800bd9e:	eba6 0807 	sub.w	r8, r6, r7
 800bda2:	608b      	str	r3, [r1, #8]
 800bda4:	f1b8 0f00 	cmp.w	r8, #0
 800bda8:	dde9      	ble.n	800bd7e <__sflush_r+0xae>
 800bdaa:	6a21      	ldr	r1, [r4, #32]
 800bdac:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800bdae:	4643      	mov	r3, r8
 800bdb0:	463a      	mov	r2, r7
 800bdb2:	4628      	mov	r0, r5
 800bdb4:	47b0      	blx	r6
 800bdb6:	2800      	cmp	r0, #0
 800bdb8:	dc08      	bgt.n	800bdcc <__sflush_r+0xfc>
 800bdba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bdbe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bdc2:	81a3      	strh	r3, [r4, #12]
 800bdc4:	f04f 30ff 	mov.w	r0, #4294967295
 800bdc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bdcc:	4407      	add	r7, r0
 800bdce:	eba8 0800 	sub.w	r8, r8, r0
 800bdd2:	e7e7      	b.n	800bda4 <__sflush_r+0xd4>
 800bdd4:	dfbffffe 	.word	0xdfbffffe

0800bdd8 <_fflush_r>:
 800bdd8:	b538      	push	{r3, r4, r5, lr}
 800bdda:	690b      	ldr	r3, [r1, #16]
 800bddc:	4605      	mov	r5, r0
 800bdde:	460c      	mov	r4, r1
 800bde0:	b913      	cbnz	r3, 800bde8 <_fflush_r+0x10>
 800bde2:	2500      	movs	r5, #0
 800bde4:	4628      	mov	r0, r5
 800bde6:	bd38      	pop	{r3, r4, r5, pc}
 800bde8:	b118      	cbz	r0, 800bdf2 <_fflush_r+0x1a>
 800bdea:	6a03      	ldr	r3, [r0, #32]
 800bdec:	b90b      	cbnz	r3, 800bdf2 <_fflush_r+0x1a>
 800bdee:	f7ff f99f 	bl	800b130 <__sinit>
 800bdf2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	d0f3      	beq.n	800bde2 <_fflush_r+0xa>
 800bdfa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800bdfc:	07d0      	lsls	r0, r2, #31
 800bdfe:	d404      	bmi.n	800be0a <_fflush_r+0x32>
 800be00:	0599      	lsls	r1, r3, #22
 800be02:	d402      	bmi.n	800be0a <_fflush_r+0x32>
 800be04:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800be06:	f7ff fb8a 	bl	800b51e <__retarget_lock_acquire_recursive>
 800be0a:	4628      	mov	r0, r5
 800be0c:	4621      	mov	r1, r4
 800be0e:	f7ff ff5f 	bl	800bcd0 <__sflush_r>
 800be12:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800be14:	07da      	lsls	r2, r3, #31
 800be16:	4605      	mov	r5, r0
 800be18:	d4e4      	bmi.n	800bde4 <_fflush_r+0xc>
 800be1a:	89a3      	ldrh	r3, [r4, #12]
 800be1c:	059b      	lsls	r3, r3, #22
 800be1e:	d4e1      	bmi.n	800bde4 <_fflush_r+0xc>
 800be20:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800be22:	f7ff fb7d 	bl	800b520 <__retarget_lock_release_recursive>
 800be26:	e7dd      	b.n	800bde4 <_fflush_r+0xc>

0800be28 <__swhatbuf_r>:
 800be28:	b570      	push	{r4, r5, r6, lr}
 800be2a:	460c      	mov	r4, r1
 800be2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800be30:	2900      	cmp	r1, #0
 800be32:	b096      	sub	sp, #88	@ 0x58
 800be34:	4615      	mov	r5, r2
 800be36:	461e      	mov	r6, r3
 800be38:	da0d      	bge.n	800be56 <__swhatbuf_r+0x2e>
 800be3a:	89a3      	ldrh	r3, [r4, #12]
 800be3c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800be40:	f04f 0100 	mov.w	r1, #0
 800be44:	bf14      	ite	ne
 800be46:	2340      	movne	r3, #64	@ 0x40
 800be48:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800be4c:	2000      	movs	r0, #0
 800be4e:	6031      	str	r1, [r6, #0]
 800be50:	602b      	str	r3, [r5, #0]
 800be52:	b016      	add	sp, #88	@ 0x58
 800be54:	bd70      	pop	{r4, r5, r6, pc}
 800be56:	466a      	mov	r2, sp
 800be58:	f000 f848 	bl	800beec <_fstat_r>
 800be5c:	2800      	cmp	r0, #0
 800be5e:	dbec      	blt.n	800be3a <__swhatbuf_r+0x12>
 800be60:	9901      	ldr	r1, [sp, #4]
 800be62:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800be66:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800be6a:	4259      	negs	r1, r3
 800be6c:	4159      	adcs	r1, r3
 800be6e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800be72:	e7eb      	b.n	800be4c <__swhatbuf_r+0x24>

0800be74 <__smakebuf_r>:
 800be74:	898b      	ldrh	r3, [r1, #12]
 800be76:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800be78:	079d      	lsls	r5, r3, #30
 800be7a:	4606      	mov	r6, r0
 800be7c:	460c      	mov	r4, r1
 800be7e:	d507      	bpl.n	800be90 <__smakebuf_r+0x1c>
 800be80:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800be84:	6023      	str	r3, [r4, #0]
 800be86:	6123      	str	r3, [r4, #16]
 800be88:	2301      	movs	r3, #1
 800be8a:	6163      	str	r3, [r4, #20]
 800be8c:	b003      	add	sp, #12
 800be8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800be90:	ab01      	add	r3, sp, #4
 800be92:	466a      	mov	r2, sp
 800be94:	f7ff ffc8 	bl	800be28 <__swhatbuf_r>
 800be98:	9f00      	ldr	r7, [sp, #0]
 800be9a:	4605      	mov	r5, r0
 800be9c:	4639      	mov	r1, r7
 800be9e:	4630      	mov	r0, r6
 800bea0:	f7ff fbba 	bl	800b618 <_malloc_r>
 800bea4:	b948      	cbnz	r0, 800beba <__smakebuf_r+0x46>
 800bea6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800beaa:	059a      	lsls	r2, r3, #22
 800beac:	d4ee      	bmi.n	800be8c <__smakebuf_r+0x18>
 800beae:	f023 0303 	bic.w	r3, r3, #3
 800beb2:	f043 0302 	orr.w	r3, r3, #2
 800beb6:	81a3      	strh	r3, [r4, #12]
 800beb8:	e7e2      	b.n	800be80 <__smakebuf_r+0xc>
 800beba:	89a3      	ldrh	r3, [r4, #12]
 800bebc:	6020      	str	r0, [r4, #0]
 800bebe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bec2:	81a3      	strh	r3, [r4, #12]
 800bec4:	9b01      	ldr	r3, [sp, #4]
 800bec6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800beca:	b15b      	cbz	r3, 800bee4 <__smakebuf_r+0x70>
 800becc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bed0:	4630      	mov	r0, r6
 800bed2:	f000 f81d 	bl	800bf10 <_isatty_r>
 800bed6:	b128      	cbz	r0, 800bee4 <__smakebuf_r+0x70>
 800bed8:	89a3      	ldrh	r3, [r4, #12]
 800beda:	f023 0303 	bic.w	r3, r3, #3
 800bede:	f043 0301 	orr.w	r3, r3, #1
 800bee2:	81a3      	strh	r3, [r4, #12]
 800bee4:	89a3      	ldrh	r3, [r4, #12]
 800bee6:	431d      	orrs	r5, r3
 800bee8:	81a5      	strh	r5, [r4, #12]
 800beea:	e7cf      	b.n	800be8c <__smakebuf_r+0x18>

0800beec <_fstat_r>:
 800beec:	b538      	push	{r3, r4, r5, lr}
 800beee:	4d07      	ldr	r5, [pc, #28]	@ (800bf0c <_fstat_r+0x20>)
 800bef0:	2300      	movs	r3, #0
 800bef2:	4604      	mov	r4, r0
 800bef4:	4608      	mov	r0, r1
 800bef6:	4611      	mov	r1, r2
 800bef8:	602b      	str	r3, [r5, #0]
 800befa:	f7f5 f920 	bl	800113e <_fstat>
 800befe:	1c43      	adds	r3, r0, #1
 800bf00:	d102      	bne.n	800bf08 <_fstat_r+0x1c>
 800bf02:	682b      	ldr	r3, [r5, #0]
 800bf04:	b103      	cbz	r3, 800bf08 <_fstat_r+0x1c>
 800bf06:	6023      	str	r3, [r4, #0]
 800bf08:	bd38      	pop	{r3, r4, r5, pc}
 800bf0a:	bf00      	nop
 800bf0c:	20010530 	.word	0x20010530

0800bf10 <_isatty_r>:
 800bf10:	b538      	push	{r3, r4, r5, lr}
 800bf12:	4d06      	ldr	r5, [pc, #24]	@ (800bf2c <_isatty_r+0x1c>)
 800bf14:	2300      	movs	r3, #0
 800bf16:	4604      	mov	r4, r0
 800bf18:	4608      	mov	r0, r1
 800bf1a:	602b      	str	r3, [r5, #0]
 800bf1c:	f7f5 f91f 	bl	800115e <_isatty>
 800bf20:	1c43      	adds	r3, r0, #1
 800bf22:	d102      	bne.n	800bf2a <_isatty_r+0x1a>
 800bf24:	682b      	ldr	r3, [r5, #0]
 800bf26:	b103      	cbz	r3, 800bf2a <_isatty_r+0x1a>
 800bf28:	6023      	str	r3, [r4, #0]
 800bf2a:	bd38      	pop	{r3, r4, r5, pc}
 800bf2c:	20010530 	.word	0x20010530

0800bf30 <_sbrk_r>:
 800bf30:	b538      	push	{r3, r4, r5, lr}
 800bf32:	4d06      	ldr	r5, [pc, #24]	@ (800bf4c <_sbrk_r+0x1c>)
 800bf34:	2300      	movs	r3, #0
 800bf36:	4604      	mov	r4, r0
 800bf38:	4608      	mov	r0, r1
 800bf3a:	602b      	str	r3, [r5, #0]
 800bf3c:	f7f5 f928 	bl	8001190 <_sbrk>
 800bf40:	1c43      	adds	r3, r0, #1
 800bf42:	d102      	bne.n	800bf4a <_sbrk_r+0x1a>
 800bf44:	682b      	ldr	r3, [r5, #0]
 800bf46:	b103      	cbz	r3, 800bf4a <_sbrk_r+0x1a>
 800bf48:	6023      	str	r3, [r4, #0]
 800bf4a:	bd38      	pop	{r3, r4, r5, pc}
 800bf4c:	20010530 	.word	0x20010530

0800bf50 <_init>:
 800bf50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf52:	bf00      	nop
 800bf54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bf56:	bc08      	pop	{r3}
 800bf58:	469e      	mov	lr, r3
 800bf5a:	4770      	bx	lr

0800bf5c <_fini>:
 800bf5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf5e:	bf00      	nop
 800bf60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bf62:	bc08      	pop	{r3}
 800bf64:	469e      	mov	lr, r3
 800bf66:	4770      	bx	lr
