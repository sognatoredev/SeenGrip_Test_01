
STM32F429ZI_Test_01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ada8  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000134  0800af58  0800af58  0000bf58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b08c  0800b08c  0000d158  2**0
                  CONTENTS
  4 .ARM          00000008  0800b08c  0800b08c  0000c08c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b094  0800b094  0000d158  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b094  0800b094  0000c094  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b098  0800b098  0000c098  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000158  20000000  0800b09c  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000d158  2**0
                  CONTENTS
 10 .bss          0000b0ec  20000158  20000158  0000d158  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000b244  2000b244  0000d158  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000d158  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a478  00000000  00000000  0000d188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004713  00000000  00000000  00027600  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001640  00000000  00000000  0002bd18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000010f0  00000000  00000000  0002d358  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00029757  00000000  00000000  0002e448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f9d2  00000000  00000000  00057b9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e0bf1  00000000  00000000  00077571  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00158162  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006404  00000000  00000000  001581a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006d  00000000  00000000  0015e5ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000158 	.word	0x20000158
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800af40 	.word	0x0800af40

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000015c 	.word	0x2000015c
 80001ec:	0800af40 	.word	0x0800af40

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b96a 	b.w	800058c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	460c      	mov	r4, r1
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d14e      	bne.n	800037a <__udivmoddi4+0xaa>
 80002dc:	4694      	mov	ip, r2
 80002de:	458c      	cmp	ip, r1
 80002e0:	4686      	mov	lr, r0
 80002e2:	fab2 f282 	clz	r2, r2
 80002e6:	d962      	bls.n	80003ae <__udivmoddi4+0xde>
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0320 	rsb	r3, r2, #32
 80002ee:	4091      	lsls	r1, r2
 80002f0:	fa20 f303 	lsr.w	r3, r0, r3
 80002f4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002f8:	4319      	orrs	r1, r3
 80002fa:	fa00 fe02 	lsl.w	lr, r0, r2
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f f68c 	uxth.w	r6, ip
 8000306:	fbb1 f4f7 	udiv	r4, r1, r7
 800030a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030e:	fb07 1114 	mls	r1, r7, r4, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb04 f106 	mul.w	r1, r4, r6
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f104 30ff 	add.w	r0, r4, #4294967295
 8000326:	f080 8112 	bcs.w	800054e <__udivmoddi4+0x27e>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 810f 	bls.w	800054e <__udivmoddi4+0x27e>
 8000330:	3c02      	subs	r4, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	fa1f f38e 	uxth.w	r3, lr
 800033a:	fbb1 f0f7 	udiv	r0, r1, r7
 800033e:	fb07 1110 	mls	r1, r7, r0, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb00 f606 	mul.w	r6, r0, r6
 800034a:	429e      	cmp	r6, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x94>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f100 31ff 	add.w	r1, r0, #4294967295
 8000356:	f080 80fc 	bcs.w	8000552 <__udivmoddi4+0x282>
 800035a:	429e      	cmp	r6, r3
 800035c:	f240 80f9 	bls.w	8000552 <__udivmoddi4+0x282>
 8000360:	4463      	add	r3, ip
 8000362:	3802      	subs	r0, #2
 8000364:	1b9b      	subs	r3, r3, r6
 8000366:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800036a:	2100      	movs	r1, #0
 800036c:	b11d      	cbz	r5, 8000376 <__udivmoddi4+0xa6>
 800036e:	40d3      	lsrs	r3, r2
 8000370:	2200      	movs	r2, #0
 8000372:	e9c5 3200 	strd	r3, r2, [r5]
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d905      	bls.n	800038a <__udivmoddi4+0xba>
 800037e:	b10d      	cbz	r5, 8000384 <__udivmoddi4+0xb4>
 8000380:	e9c5 0100 	strd	r0, r1, [r5]
 8000384:	2100      	movs	r1, #0
 8000386:	4608      	mov	r0, r1
 8000388:	e7f5      	b.n	8000376 <__udivmoddi4+0xa6>
 800038a:	fab3 f183 	clz	r1, r3
 800038e:	2900      	cmp	r1, #0
 8000390:	d146      	bne.n	8000420 <__udivmoddi4+0x150>
 8000392:	42a3      	cmp	r3, r4
 8000394:	d302      	bcc.n	800039c <__udivmoddi4+0xcc>
 8000396:	4290      	cmp	r0, r2
 8000398:	f0c0 80f0 	bcc.w	800057c <__udivmoddi4+0x2ac>
 800039c:	1a86      	subs	r6, r0, r2
 800039e:	eb64 0303 	sbc.w	r3, r4, r3
 80003a2:	2001      	movs	r0, #1
 80003a4:	2d00      	cmp	r5, #0
 80003a6:	d0e6      	beq.n	8000376 <__udivmoddi4+0xa6>
 80003a8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ac:	e7e3      	b.n	8000376 <__udivmoddi4+0xa6>
 80003ae:	2a00      	cmp	r2, #0
 80003b0:	f040 8090 	bne.w	80004d4 <__udivmoddi4+0x204>
 80003b4:	eba1 040c 	sub.w	r4, r1, ip
 80003b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003bc:	fa1f f78c 	uxth.w	r7, ip
 80003c0:	2101      	movs	r1, #1
 80003c2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003c6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ca:	fb08 4416 	mls	r4, r8, r6, r4
 80003ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003d2:	fb07 f006 	mul.w	r0, r7, r6
 80003d6:	4298      	cmp	r0, r3
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x11c>
 80003da:	eb1c 0303 	adds.w	r3, ip, r3
 80003de:	f106 34ff 	add.w	r4, r6, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x11a>
 80003e4:	4298      	cmp	r0, r3
 80003e6:	f200 80cd 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003ea:	4626      	mov	r6, r4
 80003ec:	1a1c      	subs	r4, r3, r0
 80003ee:	fa1f f38e 	uxth.w	r3, lr
 80003f2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003f6:	fb08 4410 	mls	r4, r8, r0, r4
 80003fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003fe:	fb00 f707 	mul.w	r7, r0, r7
 8000402:	429f      	cmp	r7, r3
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x148>
 8000406:	eb1c 0303 	adds.w	r3, ip, r3
 800040a:	f100 34ff 	add.w	r4, r0, #4294967295
 800040e:	d202      	bcs.n	8000416 <__udivmoddi4+0x146>
 8000410:	429f      	cmp	r7, r3
 8000412:	f200 80b0 	bhi.w	8000576 <__udivmoddi4+0x2a6>
 8000416:	4620      	mov	r0, r4
 8000418:	1bdb      	subs	r3, r3, r7
 800041a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800041e:	e7a5      	b.n	800036c <__udivmoddi4+0x9c>
 8000420:	f1c1 0620 	rsb	r6, r1, #32
 8000424:	408b      	lsls	r3, r1
 8000426:	fa22 f706 	lsr.w	r7, r2, r6
 800042a:	431f      	orrs	r7, r3
 800042c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000430:	fa04 f301 	lsl.w	r3, r4, r1
 8000434:	ea43 030c 	orr.w	r3, r3, ip
 8000438:	40f4      	lsrs	r4, r6
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	0c38      	lsrs	r0, r7, #16
 8000440:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000444:	fbb4 fef0 	udiv	lr, r4, r0
 8000448:	fa1f fc87 	uxth.w	ip, r7
 800044c:	fb00 441e 	mls	r4, r0, lr, r4
 8000450:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000454:	fb0e f90c 	mul.w	r9, lr, ip
 8000458:	45a1      	cmp	r9, r4
 800045a:	fa02 f201 	lsl.w	r2, r2, r1
 800045e:	d90a      	bls.n	8000476 <__udivmoddi4+0x1a6>
 8000460:	193c      	adds	r4, r7, r4
 8000462:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000466:	f080 8084 	bcs.w	8000572 <__udivmoddi4+0x2a2>
 800046a:	45a1      	cmp	r9, r4
 800046c:	f240 8081 	bls.w	8000572 <__udivmoddi4+0x2a2>
 8000470:	f1ae 0e02 	sub.w	lr, lr, #2
 8000474:	443c      	add	r4, r7
 8000476:	eba4 0409 	sub.w	r4, r4, r9
 800047a:	fa1f f983 	uxth.w	r9, r3
 800047e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000482:	fb00 4413 	mls	r4, r0, r3, r4
 8000486:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048a:	fb03 fc0c 	mul.w	ip, r3, ip
 800048e:	45a4      	cmp	ip, r4
 8000490:	d907      	bls.n	80004a2 <__udivmoddi4+0x1d2>
 8000492:	193c      	adds	r4, r7, r4
 8000494:	f103 30ff 	add.w	r0, r3, #4294967295
 8000498:	d267      	bcs.n	800056a <__udivmoddi4+0x29a>
 800049a:	45a4      	cmp	ip, r4
 800049c:	d965      	bls.n	800056a <__udivmoddi4+0x29a>
 800049e:	3b02      	subs	r3, #2
 80004a0:	443c      	add	r4, r7
 80004a2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004a6:	fba0 9302 	umull	r9, r3, r0, r2
 80004aa:	eba4 040c 	sub.w	r4, r4, ip
 80004ae:	429c      	cmp	r4, r3
 80004b0:	46ce      	mov	lr, r9
 80004b2:	469c      	mov	ip, r3
 80004b4:	d351      	bcc.n	800055a <__udivmoddi4+0x28a>
 80004b6:	d04e      	beq.n	8000556 <__udivmoddi4+0x286>
 80004b8:	b155      	cbz	r5, 80004d0 <__udivmoddi4+0x200>
 80004ba:	ebb8 030e 	subs.w	r3, r8, lr
 80004be:	eb64 040c 	sbc.w	r4, r4, ip
 80004c2:	fa04 f606 	lsl.w	r6, r4, r6
 80004c6:	40cb      	lsrs	r3, r1
 80004c8:	431e      	orrs	r6, r3
 80004ca:	40cc      	lsrs	r4, r1
 80004cc:	e9c5 6400 	strd	r6, r4, [r5]
 80004d0:	2100      	movs	r1, #0
 80004d2:	e750      	b.n	8000376 <__udivmoddi4+0xa6>
 80004d4:	f1c2 0320 	rsb	r3, r2, #32
 80004d8:	fa20 f103 	lsr.w	r1, r0, r3
 80004dc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e0:	fa24 f303 	lsr.w	r3, r4, r3
 80004e4:	4094      	lsls	r4, r2
 80004e6:	430c      	orrs	r4, r1
 80004e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ec:	fa00 fe02 	lsl.w	lr, r0, r2
 80004f0:	fa1f f78c 	uxth.w	r7, ip
 80004f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004f8:	fb08 3110 	mls	r1, r8, r0, r3
 80004fc:	0c23      	lsrs	r3, r4, #16
 80004fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000502:	fb00 f107 	mul.w	r1, r0, r7
 8000506:	4299      	cmp	r1, r3
 8000508:	d908      	bls.n	800051c <__udivmoddi4+0x24c>
 800050a:	eb1c 0303 	adds.w	r3, ip, r3
 800050e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000512:	d22c      	bcs.n	800056e <__udivmoddi4+0x29e>
 8000514:	4299      	cmp	r1, r3
 8000516:	d92a      	bls.n	800056e <__udivmoddi4+0x29e>
 8000518:	3802      	subs	r0, #2
 800051a:	4463      	add	r3, ip
 800051c:	1a5b      	subs	r3, r3, r1
 800051e:	b2a4      	uxth	r4, r4
 8000520:	fbb3 f1f8 	udiv	r1, r3, r8
 8000524:	fb08 3311 	mls	r3, r8, r1, r3
 8000528:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800052c:	fb01 f307 	mul.w	r3, r1, r7
 8000530:	42a3      	cmp	r3, r4
 8000532:	d908      	bls.n	8000546 <__udivmoddi4+0x276>
 8000534:	eb1c 0404 	adds.w	r4, ip, r4
 8000538:	f101 36ff 	add.w	r6, r1, #4294967295
 800053c:	d213      	bcs.n	8000566 <__udivmoddi4+0x296>
 800053e:	42a3      	cmp	r3, r4
 8000540:	d911      	bls.n	8000566 <__udivmoddi4+0x296>
 8000542:	3902      	subs	r1, #2
 8000544:	4464      	add	r4, ip
 8000546:	1ae4      	subs	r4, r4, r3
 8000548:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800054c:	e739      	b.n	80003c2 <__udivmoddi4+0xf2>
 800054e:	4604      	mov	r4, r0
 8000550:	e6f0      	b.n	8000334 <__udivmoddi4+0x64>
 8000552:	4608      	mov	r0, r1
 8000554:	e706      	b.n	8000364 <__udivmoddi4+0x94>
 8000556:	45c8      	cmp	r8, r9
 8000558:	d2ae      	bcs.n	80004b8 <__udivmoddi4+0x1e8>
 800055a:	ebb9 0e02 	subs.w	lr, r9, r2
 800055e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000562:	3801      	subs	r0, #1
 8000564:	e7a8      	b.n	80004b8 <__udivmoddi4+0x1e8>
 8000566:	4631      	mov	r1, r6
 8000568:	e7ed      	b.n	8000546 <__udivmoddi4+0x276>
 800056a:	4603      	mov	r3, r0
 800056c:	e799      	b.n	80004a2 <__udivmoddi4+0x1d2>
 800056e:	4630      	mov	r0, r6
 8000570:	e7d4      	b.n	800051c <__udivmoddi4+0x24c>
 8000572:	46d6      	mov	lr, sl
 8000574:	e77f      	b.n	8000476 <__udivmoddi4+0x1a6>
 8000576:	4463      	add	r3, ip
 8000578:	3802      	subs	r0, #2
 800057a:	e74d      	b.n	8000418 <__udivmoddi4+0x148>
 800057c:	4606      	mov	r6, r0
 800057e:	4623      	mov	r3, r4
 8000580:	4608      	mov	r0, r1
 8000582:	e70f      	b.n	80003a4 <__udivmoddi4+0xd4>
 8000584:	3e02      	subs	r6, #2
 8000586:	4463      	add	r3, ip
 8000588:	e730      	b.n	80003ec <__udivmoddi4+0x11c>
 800058a:	bf00      	nop

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b082      	sub	sp, #8
 8000594:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000596:	2300      	movs	r3, #0
 8000598:	607b      	str	r3, [r7, #4]
 800059a:	4b10      	ldr	r3, [pc, #64]	@ (80005dc <MX_DMA_Init+0x4c>)
 800059c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800059e:	4a0f      	ldr	r2, [pc, #60]	@ (80005dc <MX_DMA_Init+0x4c>)
 80005a0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80005a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80005a6:	4b0d      	ldr	r3, [pc, #52]	@ (80005dc <MX_DMA_Init+0x4c>)
 80005a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005aa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80005ae:	607b      	str	r3, [r7, #4]
 80005b0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80005b2:	2200      	movs	r2, #0
 80005b4:	2100      	movs	r1, #0
 80005b6:	200c      	movs	r0, #12
 80005b8:	f001 fb6b 	bl	8001c92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80005bc:	200c      	movs	r0, #12
 80005be:	f001 fb84 	bl	8001cca <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80005c2:	2200      	movs	r2, #0
 80005c4:	2100      	movs	r1, #0
 80005c6:	2010      	movs	r0, #16
 80005c8:	f001 fb63 	bl	8001c92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80005cc:	2010      	movs	r0, #16
 80005ce:	f001 fb7c 	bl	8001cca <HAL_NVIC_EnableIRQ>

}
 80005d2:	bf00      	nop
 80005d4:	3708      	adds	r7, #8
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	bf00      	nop
 80005dc:	40023800 	.word	0x40023800

080005e0 <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PC9   ------> RCC_MCO_2
*/
void MX_GPIO_Init(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b08a      	sub	sp, #40	@ 0x28
 80005e4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005e6:	f107 0314 	add.w	r3, r7, #20
 80005ea:	2200      	movs	r2, #0
 80005ec:	601a      	str	r2, [r3, #0]
 80005ee:	605a      	str	r2, [r3, #4]
 80005f0:	609a      	str	r2, [r3, #8]
 80005f2:	60da      	str	r2, [r3, #12]
 80005f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005f6:	2300      	movs	r3, #0
 80005f8:	613b      	str	r3, [r7, #16]
 80005fa:	4b56      	ldr	r3, [pc, #344]	@ (8000754 <MX_GPIO_Init+0x174>)
 80005fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005fe:	4a55      	ldr	r2, [pc, #340]	@ (8000754 <MX_GPIO_Init+0x174>)
 8000600:	f043 0304 	orr.w	r3, r3, #4
 8000604:	6313      	str	r3, [r2, #48]	@ 0x30
 8000606:	4b53      	ldr	r3, [pc, #332]	@ (8000754 <MX_GPIO_Init+0x174>)
 8000608:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800060a:	f003 0304 	and.w	r3, r3, #4
 800060e:	613b      	str	r3, [r7, #16]
 8000610:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000612:	2300      	movs	r3, #0
 8000614:	60fb      	str	r3, [r7, #12]
 8000616:	4b4f      	ldr	r3, [pc, #316]	@ (8000754 <MX_GPIO_Init+0x174>)
 8000618:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800061a:	4a4e      	ldr	r2, [pc, #312]	@ (8000754 <MX_GPIO_Init+0x174>)
 800061c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000620:	6313      	str	r3, [r2, #48]	@ 0x30
 8000622:	4b4c      	ldr	r3, [pc, #304]	@ (8000754 <MX_GPIO_Init+0x174>)
 8000624:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000626:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800062a:	60fb      	str	r3, [r7, #12]
 800062c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800062e:	2300      	movs	r3, #0
 8000630:	60bb      	str	r3, [r7, #8]
 8000632:	4b48      	ldr	r3, [pc, #288]	@ (8000754 <MX_GPIO_Init+0x174>)
 8000634:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000636:	4a47      	ldr	r2, [pc, #284]	@ (8000754 <MX_GPIO_Init+0x174>)
 8000638:	f043 0301 	orr.w	r3, r3, #1
 800063c:	6313      	str	r3, [r2, #48]	@ 0x30
 800063e:	4b45      	ldr	r3, [pc, #276]	@ (8000754 <MX_GPIO_Init+0x174>)
 8000640:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000642:	f003 0301 	and.w	r3, r3, #1
 8000646:	60bb      	str	r3, [r7, #8]
 8000648:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800064a:	2300      	movs	r3, #0
 800064c:	607b      	str	r3, [r7, #4]
 800064e:	4b41      	ldr	r3, [pc, #260]	@ (8000754 <MX_GPIO_Init+0x174>)
 8000650:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000652:	4a40      	ldr	r2, [pc, #256]	@ (8000754 <MX_GPIO_Init+0x174>)
 8000654:	f043 0302 	orr.w	r3, r3, #2
 8000658:	6313      	str	r3, [r2, #48]	@ 0x30
 800065a:	4b3e      	ldr	r3, [pc, #248]	@ (8000754 <MX_GPIO_Init+0x174>)
 800065c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800065e:	f003 0302 	and.w	r3, r3, #2
 8000662:	607b      	str	r3, [r7, #4]
 8000664:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000666:	2300      	movs	r3, #0
 8000668:	603b      	str	r3, [r7, #0]
 800066a:	4b3a      	ldr	r3, [pc, #232]	@ (8000754 <MX_GPIO_Init+0x174>)
 800066c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800066e:	4a39      	ldr	r2, [pc, #228]	@ (8000754 <MX_GPIO_Init+0x174>)
 8000670:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000674:	6313      	str	r3, [r2, #48]	@ 0x30
 8000676:	4b37      	ldr	r3, [pc, #220]	@ (8000754 <MX_GPIO_Init+0x174>)
 8000678:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800067a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800067e:	603b      	str	r3, [r7, #0]
 8000680:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_7, GPIO_PIN_RESET);
 8000682:	2200      	movs	r2, #0
 8000684:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000688:	4833      	ldr	r0, [pc, #204]	@ (8000758 <MX_GPIO_Init+0x178>)
 800068a:	f002 f8c9 	bl	8002820 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 800068e:	2200      	movs	r2, #0
 8000690:	2160      	movs	r1, #96	@ 0x60
 8000692:	4832      	ldr	r0, [pc, #200]	@ (800075c <MX_GPIO_Init+0x17c>)
 8000694:	f002 f8c4 	bl	8002820 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000698:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800069c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800069e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80006a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a4:	2300      	movs	r3, #0
 80006a6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006a8:	f107 0314 	add.w	r3, r7, #20
 80006ac:	4619      	mov	r1, r3
 80006ae:	482c      	ldr	r0, [pc, #176]	@ (8000760 <MX_GPIO_Init+0x180>)
 80006b0:	f001 ff0a 	bl	80024c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB14 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_7;
 80006b4:	f244 0381 	movw	r3, #16513	@ 0x4081
 80006b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ba:	2301      	movs	r3, #1
 80006bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006be:	2300      	movs	r3, #0
 80006c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006c2:	2300      	movs	r3, #0
 80006c4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006c6:	f107 0314 	add.w	r3, r7, #20
 80006ca:	4619      	mov	r1, r3
 80006cc:	4822      	ldr	r0, [pc, #136]	@ (8000758 <MX_GPIO_Init+0x178>)
 80006ce:	f001 fefb 	bl	80024c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG5 PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80006d2:	2360      	movs	r3, #96	@ 0x60
 80006d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006d6:	2301      	movs	r3, #1
 80006d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006da:	2300      	movs	r3, #0
 80006dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006de:	2303      	movs	r3, #3
 80006e0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80006e2:	f107 0314 	add.w	r3, r7, #20
 80006e6:	4619      	mov	r1, r3
 80006e8:	481c      	ldr	r0, [pc, #112]	@ (800075c <MX_GPIO_Init+0x17c>)
 80006ea:	f001 feed 	bl	80024c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80006ee:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80006f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006f4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80006f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fa:	2300      	movs	r3, #0
 80006fc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80006fe:	f107 0314 	add.w	r3, r7, #20
 8000702:	4619      	mov	r1, r3
 8000704:	4815      	ldr	r0, [pc, #84]	@ (800075c <MX_GPIO_Init+0x17c>)
 8000706:	f001 fedf 	bl	80024c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800070a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800070e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000710:	2302      	movs	r3, #2
 8000712:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000714:	2300      	movs	r3, #0
 8000716:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000718:	2300      	movs	r3, #0
 800071a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800071c:	2300      	movs	r3, #0
 800071e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000720:	f107 0314 	add.w	r3, r7, #20
 8000724:	4619      	mov	r1, r3
 8000726:	480e      	ldr	r0, [pc, #56]	@ (8000760 <MX_GPIO_Init+0x180>)
 8000728:	f001 fece 	bl	80024c8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800072c:	2200      	movs	r2, #0
 800072e:	2100      	movs	r1, #0
 8000730:	2017      	movs	r0, #23
 8000732:	f001 faae 	bl	8001c92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000736:	2017      	movs	r0, #23
 8000738:	f001 fac7 	bl	8001cca <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800073c:	2200      	movs	r2, #0
 800073e:	2100      	movs	r1, #0
 8000740:	2028      	movs	r0, #40	@ 0x28
 8000742:	f001 faa6 	bl	8001c92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000746:	2028      	movs	r0, #40	@ 0x28
 8000748:	f001 fabf 	bl	8001cca <HAL_NVIC_EnableIRQ>

}
 800074c:	bf00      	nop
 800074e:	3728      	adds	r7, #40	@ 0x28
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}
 8000754:	40023800 	.word	0x40023800
 8000758:	40020400 	.word	0x40020400
 800075c:	40021800 	.word	0x40021800
 8000760:	40020800 	.word	0x40020800

08000764 <_write>:

/* USER CODE BEGIN PV */

extern uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len);

int _write(int file, char *ptr, int len){
 8000764:	b580      	push	{r7, lr}
 8000766:	b084      	sub	sp, #16
 8000768:	af00      	add	r7, sp, #0
 800076a:	60f8      	str	r0, [r7, #12]
 800076c:	60b9      	str	r1, [r7, #8]
 800076e:	607a      	str	r2, [r7, #4]
    // CDC_Transmit_FS(ptr, len);
    Q_Write(&USB_TX_Q, ptr, len);
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	b29b      	uxth	r3, r3
 8000774:	461a      	mov	r2, r3
 8000776:	68b9      	ldr	r1, [r7, #8]
 8000778:	4803      	ldr	r0, [pc, #12]	@ (8000788 <_write+0x24>)
 800077a:	f000 f8e0 	bl	800093e <Q_Write>
    // User_CDC_Transmit_FS(ptr, len);
    return (len);
 800077e:	687b      	ldr	r3, [r7, #4]
}
 8000780:	4618      	mov	r0, r3
 8000782:	3710      	adds	r7, #16
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}
 8000788:	20000ad4 	.word	0x20000ad4

0800078c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000790:	f001 f8f8 	bl	8001984 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000794:	f000 f83e 	bl	8000814 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000798:	f7ff ff22 	bl	80005e0 <MX_GPIO_Init>
  MX_DMA_Init();
 800079c:	f7ff fef8 	bl	8000590 <MX_DMA_Init>
  MX_TIM1_Init();
 80007a0:	f000 fc52 	bl	8001048 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 80007a4:	f000 fcc8 	bl	8001138 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80007a8:	f000 fcf2 	bl	8001190 <MX_USART3_UART_Init>
  MX_USB_DEVICE_Init();
 80007ac:	f008 fcf4 	bl	8009198 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  debug_buf_init();
 80007b0:	f000 fe28 	bl	8001404 <debug_buf_init>
  Q_Init(&USB_TX_Q, (uint8_t *) USB_TX_Data, 2400);
 80007b4:	f44f 6216 	mov.w	r2, #2400	@ 0x960
 80007b8:	490f      	ldr	r1, [pc, #60]	@ (80007f8 <main+0x6c>)
 80007ba:	4810      	ldr	r0, [pc, #64]	@ (80007fc <main+0x70>)
 80007bc:	f000 f8a0 	bl	8000900 <Q_Init>
  

  HAL_Delay(500);
 80007c0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80007c4:	f001 f950 	bl	8001a68 <HAL_Delay>
  // BootMessagePrint();
  // GetClockSourcePrint();

  HAL_TIM_Base_Start_IT(&htim1);
 80007c8:	480d      	ldr	r0, [pc, #52]	@ (8000800 <main+0x74>)
 80007ca:	f004 f815 	bl	80047f8 <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_DMA(&huart2, (uint8_t *) uart2_rx_buf, UART_RXDATA_MAX);
 80007ce:	2201      	movs	r2, #1
 80007d0:	490c      	ldr	r1, [pc, #48]	@ (8000804 <main+0x78>)
 80007d2:	480d      	ldr	r0, [pc, #52]	@ (8000808 <main+0x7c>)
 80007d4:	f004 fc86 	bl	80050e4 <HAL_UART_Receive_DMA>
  HAL_UART_Receive_DMA(&huart3, (uint8_t *) uart3_rx_buf, UART_RXDATA_MAX);
 80007d8:	2201      	movs	r2, #1
 80007da:	490c      	ldr	r1, [pc, #48]	@ (800080c <main+0x80>)
 80007dc:	480c      	ldr	r0, [pc, #48]	@ (8000810 <main+0x84>)
 80007de:	f004 fc81 	bl	80050e4 <HAL_UART_Receive_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    GPIO_Proc();
 80007e2:	f000 fe09 	bl	80013f8 <GPIO_Proc>
    USB_CDC_Proc();
 80007e6:	f001 f82b 	bl	8001840 <USB_CDC_Proc>
    USB_CDC_RX_Proc();
 80007ea:	f001 f831 	bl	8001850 <USB_CDC_RX_Proc>
    UART_RX_Proc();
 80007ee:	f000 ffdf 	bl	80017b0 <UART_RX_Proc>
  {
 80007f2:	bf00      	nop
 80007f4:	e7f5      	b.n	80007e2 <main+0x56>
 80007f6:	bf00      	nop
 80007f8:	20000174 	.word	0x20000174
 80007fc:	20000ad4 	.word	0x20000ad4
 8000800:	2000144c 	.word	0x2000144c
 8000804:	200017f8 	.word	0x200017f8
 8000808:	20001494 	.word	0x20001494
 800080c:	200017fc 	.word	0x200017fc
 8000810:	200014dc 	.word	0x200014dc

08000814 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b094      	sub	sp, #80	@ 0x50
 8000818:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800081a:	f107 0320 	add.w	r3, r7, #32
 800081e:	2230      	movs	r2, #48	@ 0x30
 8000820:	2100      	movs	r1, #0
 8000822:	4618      	mov	r0, r3
 8000824:	f009 fc2c 	bl	800a080 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000828:	f107 030c 	add.w	r3, r7, #12
 800082c:	2200      	movs	r2, #0
 800082e:	601a      	str	r2, [r3, #0]
 8000830:	605a      	str	r2, [r3, #4]
 8000832:	609a      	str	r2, [r3, #8]
 8000834:	60da      	str	r2, [r3, #12]
 8000836:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000838:	2300      	movs	r3, #0
 800083a:	60bb      	str	r3, [r7, #8]
 800083c:	4b2b      	ldr	r3, [pc, #172]	@ (80008ec <SystemClock_Config+0xd8>)
 800083e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000840:	4a2a      	ldr	r2, [pc, #168]	@ (80008ec <SystemClock_Config+0xd8>)
 8000842:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000846:	6413      	str	r3, [r2, #64]	@ 0x40
 8000848:	4b28      	ldr	r3, [pc, #160]	@ (80008ec <SystemClock_Config+0xd8>)
 800084a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800084c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000850:	60bb      	str	r3, [r7, #8]
 8000852:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000854:	2300      	movs	r3, #0
 8000856:	607b      	str	r3, [r7, #4]
 8000858:	4b25      	ldr	r3, [pc, #148]	@ (80008f0 <SystemClock_Config+0xdc>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	4a24      	ldr	r2, [pc, #144]	@ (80008f0 <SystemClock_Config+0xdc>)
 800085e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000862:	6013      	str	r3, [r2, #0]
 8000864:	4b22      	ldr	r3, [pc, #136]	@ (80008f0 <SystemClock_Config+0xdc>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800086c:	607b      	str	r3, [r7, #4]
 800086e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000870:	2301      	movs	r3, #1
 8000872:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000874:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000878:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800087a:	2302      	movs	r3, #2
 800087c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800087e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000882:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000884:	2304      	movs	r3, #4
 8000886:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000888:	23a8      	movs	r3, #168	@ 0xa8
 800088a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800088c:	2302      	movs	r3, #2
 800088e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000890:	2307      	movs	r3, #7
 8000892:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000894:	f107 0320 	add.w	r3, r7, #32
 8000898:	4618      	mov	r0, r3
 800089a:	f003 fa5d 	bl	8003d58 <HAL_RCC_OscConfig>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80008a4:	f000 f826 	bl	80008f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008a8:	230f      	movs	r3, #15
 80008aa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008ac:	2302      	movs	r3, #2
 80008ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008b0:	2300      	movs	r3, #0
 80008b2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80008b4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80008b8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80008ba:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008be:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80008c0:	f107 030c 	add.w	r3, r7, #12
 80008c4:	2105      	movs	r1, #5
 80008c6:	4618      	mov	r0, r3
 80008c8:	f003 fcbe 	bl	8004248 <HAL_RCC_ClockConfig>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80008d2:	f000 f80f 	bl	80008f4 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO2, RCC_MCO2SOURCE_HSE, RCC_MCODIV_1);
 80008d6:	2200      	movs	r2, #0
 80008d8:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80008dc:	2001      	movs	r0, #1
 80008de:	f003 fd99 	bl	8004414 <HAL_RCC_MCOConfig>
}
 80008e2:	bf00      	nop
 80008e4:	3750      	adds	r7, #80	@ 0x50
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	40023800 	.word	0x40023800
 80008f0:	40007000 	.word	0x40007000

080008f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008f8:	b672      	cpsid	i
}
 80008fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008fc:	bf00      	nop
 80008fe:	e7fd      	b.n	80008fc <Error_Handler+0x8>

08000900 <Q_Init>:
#include "queue.h"

void Q_Init(Q_queue_t *queue, uint8_t *data, uint16_t len){
 8000900:	b480      	push	{r7}
 8000902:	b085      	sub	sp, #20
 8000904:	af00      	add	r7, sp, #0
 8000906:	60f8      	str	r0, [r7, #12]
 8000908:	60b9      	str	r1, [r7, #8]
 800090a:	4613      	mov	r3, r2
 800090c:	80fb      	strh	r3, [r7, #6]
    queue->idx_read = 0;
 800090e:	68fb      	ldr	r3, [r7, #12]
 8000910:	2200      	movs	r2, #0
 8000912:	809a      	strh	r2, [r3, #4]
    queue->idx_write = 0;
 8000914:	68fb      	ldr	r3, [r7, #12]
 8000916:	2200      	movs	r2, #0
 8000918:	805a      	strh	r2, [r3, #2]
    queue->count_full = 0;
 800091a:	68fb      	ldr	r3, [r7, #12]
 800091c:	2200      	movs	r2, #0
 800091e:	80da      	strh	r2, [r3, #6]
    queue->count_empty = 0;
 8000920:	68fb      	ldr	r3, [r7, #12]
 8000922:	2200      	movs	r2, #0
 8000924:	811a      	strh	r2, [r3, #8]
    queue->size = len;
 8000926:	68fb      	ldr	r3, [r7, #12]
 8000928:	88fa      	ldrh	r2, [r7, #6]
 800092a:	801a      	strh	r2, [r3, #0]
    queue->data = data;
 800092c:	68fb      	ldr	r3, [r7, #12]
 800092e:	68ba      	ldr	r2, [r7, #8]
 8000930:	60da      	str	r2, [r3, #12]
}
 8000932:	bf00      	nop
 8000934:	3714      	adds	r7, #20
 8000936:	46bd      	mov	sp, r7
 8000938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093c:	4770      	bx	lr

0800093e <Q_Write>:

void Q_Clear(Q_queue_t *queue){
    queue->idx_write = queue->idx_read;
}

bool Q_Write(Q_queue_t *queue, uint8_t *data, uint16_t len){
 800093e:	b580      	push	{r7, lr}
 8000940:	b088      	sub	sp, #32
 8000942:	af00      	add	r7, sp, #0
 8000944:	60f8      	str	r0, [r7, #12]
 8000946:	60b9      	str	r1, [r7, #8]
 8000948:	4613      	mov	r3, r2
 800094a:	80fb      	strh	r3, [r7, #6]
    int empty_bytes;
    uint16_t next_idx;
    uint16_t num_first;
    bool ret = false;
 800094c:	2300      	movs	r3, #0
 800094e:	77fb      	strb	r3, [r7, #31]
    
    empty_bytes = Q_NumEmptyBytes(queue);  
 8000950:	68f8      	ldr	r0, [r7, #12]
 8000952:	f000 f8ea 	bl	8000b2a <Q_NumEmptyBytes>
 8000956:	4603      	mov	r3, r0
 8000958:	61bb      	str	r3, [r7, #24]
    if(empty_bytes >= len){
 800095a:	88fb      	ldrh	r3, [r7, #6]
 800095c:	69ba      	ldr	r2, [r7, #24]
 800095e:	429a      	cmp	r2, r3
 8000960:	db44      	blt.n	80009ec <Q_Write+0xae>
        next_idx = queue->idx_write + len;
 8000962:	68fb      	ldr	r3, [r7, #12]
 8000964:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000968:	b29a      	uxth	r2, r3
 800096a:	88fb      	ldrh	r3, [r7, #6]
 800096c:	4413      	add	r3, r2
 800096e:	82fb      	strh	r3, [r7, #22]
        if(next_idx < queue->size){
 8000970:	68fb      	ldr	r3, [r7, #12]
 8000972:	881b      	ldrh	r3, [r3, #0]
 8000974:	8afa      	ldrh	r2, [r7, #22]
 8000976:	429a      	cmp	r2, r3
 8000978:	d20b      	bcs.n	8000992 <Q_Write+0x54>
            memcpy(&(queue->data[queue->idx_write]),data,len);  //memcpy(dest,source,num)
 800097a:	68fb      	ldr	r3, [r7, #12]
 800097c:	68db      	ldr	r3, [r3, #12]
 800097e:	68fa      	ldr	r2, [r7, #12]
 8000980:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8000984:	4413      	add	r3, r2
 8000986:	88fa      	ldrh	r2, [r7, #6]
 8000988:	68b9      	ldr	r1, [r7, #8]
 800098a:	4618      	mov	r0, r3
 800098c:	f009 fc19 	bl	800a1c2 <memcpy>
 8000990:	e01d      	b.n	80009ce <Q_Write+0x90>
        }
        else{
            num_first = queue->size-queue->idx_write;
 8000992:	68fb      	ldr	r3, [r7, #12]
 8000994:	881a      	ldrh	r2, [r3, #0]
 8000996:	68fb      	ldr	r3, [r7, #12]
 8000998:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800099c:	b29b      	uxth	r3, r3
 800099e:	1ad3      	subs	r3, r2, r3
 80009a0:	82bb      	strh	r3, [r7, #20]
            memcpy(&(queue->data[queue->idx_write]),data,num_first);
 80009a2:	68fb      	ldr	r3, [r7, #12]
 80009a4:	68db      	ldr	r3, [r3, #12]
 80009a6:	68fa      	ldr	r2, [r7, #12]
 80009a8:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 80009ac:	4413      	add	r3, r2
 80009ae:	8aba      	ldrh	r2, [r7, #20]
 80009b0:	68b9      	ldr	r1, [r7, #8]
 80009b2:	4618      	mov	r0, r3
 80009b4:	f009 fc05 	bl	800a1c2 <memcpy>
            memcpy(&(queue->data[0]),&(data[num_first]),len-num_first);
 80009b8:	68fb      	ldr	r3, [r7, #12]
 80009ba:	68d8      	ldr	r0, [r3, #12]
 80009bc:	8abb      	ldrh	r3, [r7, #20]
 80009be:	68ba      	ldr	r2, [r7, #8]
 80009c0:	18d1      	adds	r1, r2, r3
 80009c2:	88fa      	ldrh	r2, [r7, #6]
 80009c4:	8abb      	ldrh	r3, [r7, #20]
 80009c6:	1ad3      	subs	r3, r2, r3
 80009c8:	461a      	mov	r2, r3
 80009ca:	f009 fbfa 	bl	800a1c2 <memcpy>
        }        
        queue->idx_write = next_idx % queue->size;
 80009ce:	68fb      	ldr	r3, [r7, #12]
 80009d0:	881a      	ldrh	r2, [r3, #0]
 80009d2:	8afb      	ldrh	r3, [r7, #22]
 80009d4:	fbb3 f1f2 	udiv	r1, r3, r2
 80009d8:	fb01 f202 	mul.w	r2, r1, r2
 80009dc:	1a9b      	subs	r3, r3, r2
 80009de:	b29b      	uxth	r3, r3
 80009e0:	b21a      	sxth	r2, r3
 80009e2:	68fb      	ldr	r3, [r7, #12]
 80009e4:	805a      	strh	r2, [r3, #2]
        ret = true;        
 80009e6:	2301      	movs	r3, #1
 80009e8:	77fb      	strb	r3, [r7, #31]
 80009ea:	e00e      	b.n	8000a0a <Q_Write+0xcc>
    }
    else    queue->count_full = _upperlimit(queue->count_full+1,0xFFFF);      
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	88db      	ldrh	r3, [r3, #6]
 80009f0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80009f4:	4293      	cmp	r3, r2
 80009f6:	d004      	beq.n	8000a02 <Q_Write+0xc4>
 80009f8:	68fb      	ldr	r3, [r7, #12]
 80009fa:	88db      	ldrh	r3, [r3, #6]
 80009fc:	3301      	adds	r3, #1
 80009fe:	b29a      	uxth	r2, r3
 8000a00:	e001      	b.n	8000a06 <Q_Write+0xc8>
 8000a02:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000a06:	68fb      	ldr	r3, [r7, #12]
 8000a08:	80da      	strh	r2, [r3, #6]
    return ret;    
 8000a0a:	7ffb      	ldrb	r3, [r7, #31]
}
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	3720      	adds	r7, #32
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}

08000a14 <Q_Read>:
    }
    else    queue->count_full = _upperlimit(queue->count_full+1,0xFFFF);
    return ret;    
}

bool Q_Read(Q_queue_t *queue, uint8_t *data, uint16_t len){
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b086      	sub	sp, #24
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	60f8      	str	r0, [r7, #12]
 8000a1c:	60b9      	str	r1, [r7, #8]
 8000a1e:	4613      	mov	r3, r2
 8000a20:	80fb      	strh	r3, [r7, #6]
    bool ret;
    uint16_t next_idx;
    uint16_t num_first;

    if(Q_NumContents(queue) >= len){
 8000a22:	68f8      	ldr	r0, [r7, #12]
 8000a24:	f000 f864 	bl	8000af0 <Q_NumContents>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	461a      	mov	r2, r3
 8000a2c:	88fb      	ldrh	r3, [r7, #6]
 8000a2e:	4293      	cmp	r3, r2
 8000a30:	d848      	bhi.n	8000ac4 <Q_Read+0xb0>
        next_idx = queue->idx_read + len;
 8000a32:	68fb      	ldr	r3, [r7, #12]
 8000a34:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000a38:	b29a      	uxth	r2, r3
 8000a3a:	88fb      	ldrh	r3, [r7, #6]
 8000a3c:	4413      	add	r3, r2
 8000a3e:	82bb      	strh	r3, [r7, #20]
        if(next_idx < queue->size){
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	881b      	ldrh	r3, [r3, #0]
 8000a44:	8aba      	ldrh	r2, [r7, #20]
 8000a46:	429a      	cmp	r2, r3
 8000a48:	d20b      	bcs.n	8000a62 <Q_Read+0x4e>
            memcpy(data,&(queue->data[queue->idx_read]),len);  //memcpy(dest,source,num)
 8000a4a:	68fb      	ldr	r3, [r7, #12]
 8000a4c:	68db      	ldr	r3, [r3, #12]
 8000a4e:	68fa      	ldr	r2, [r7, #12]
 8000a50:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8000a54:	4413      	add	r3, r2
 8000a56:	88fa      	ldrh	r2, [r7, #6]
 8000a58:	4619      	mov	r1, r3
 8000a5a:	68b8      	ldr	r0, [r7, #8]
 8000a5c:	f009 fbb1 	bl	800a1c2 <memcpy>
 8000a60:	e01d      	b.n	8000a9e <Q_Read+0x8a>
        }
        else{
            num_first = queue->size-queue->idx_read;
 8000a62:	68fb      	ldr	r3, [r7, #12]
 8000a64:	881a      	ldrh	r2, [r3, #0]
 8000a66:	68fb      	ldr	r3, [r7, #12]
 8000a68:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000a6c:	b29b      	uxth	r3, r3
 8000a6e:	1ad3      	subs	r3, r2, r3
 8000a70:	827b      	strh	r3, [r7, #18]
            memcpy(data,&(queue->data[queue->idx_read]),num_first);  //memcpy(dest,source,num)
 8000a72:	68fb      	ldr	r3, [r7, #12]
 8000a74:	68db      	ldr	r3, [r3, #12]
 8000a76:	68fa      	ldr	r2, [r7, #12]
 8000a78:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8000a7c:	4413      	add	r3, r2
 8000a7e:	8a7a      	ldrh	r2, [r7, #18]
 8000a80:	4619      	mov	r1, r3
 8000a82:	68b8      	ldr	r0, [r7, #8]
 8000a84:	f009 fb9d 	bl	800a1c2 <memcpy>
            memcpy(&(data[num_first]),&(queue->data[0]),len-num_first);
 8000a88:	8a7b      	ldrh	r3, [r7, #18]
 8000a8a:	68ba      	ldr	r2, [r7, #8]
 8000a8c:	18d0      	adds	r0, r2, r3
 8000a8e:	68fb      	ldr	r3, [r7, #12]
 8000a90:	68d9      	ldr	r1, [r3, #12]
 8000a92:	88fa      	ldrh	r2, [r7, #6]
 8000a94:	8a7b      	ldrh	r3, [r7, #18]
 8000a96:	1ad3      	subs	r3, r2, r3
 8000a98:	461a      	mov	r2, r3
 8000a9a:	f009 fb92 	bl	800a1c2 <memcpy>
        }        
        queue->idx_read = (queue->idx_read+len)%queue->size;
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000aa4:	461a      	mov	r2, r3
 8000aa6:	88fb      	ldrh	r3, [r7, #6]
 8000aa8:	4413      	add	r3, r2
 8000aaa:	68fa      	ldr	r2, [r7, #12]
 8000aac:	8812      	ldrh	r2, [r2, #0]
 8000aae:	fb93 f1f2 	sdiv	r1, r3, r2
 8000ab2:	fb01 f202 	mul.w	r2, r1, r2
 8000ab6:	1a9b      	subs	r3, r3, r2
 8000ab8:	b21a      	sxth	r2, r3
 8000aba:	68fb      	ldr	r3, [r7, #12]
 8000abc:	809a      	strh	r2, [r3, #4]
        ret = true;
 8000abe:	2301      	movs	r3, #1
 8000ac0:	75fb      	strb	r3, [r7, #23]
 8000ac2:	e010      	b.n	8000ae6 <Q_Read+0xd2>
    }
    else{
        queue->count_empty = _upperlimit(queue->count_empty+1,0xFFFF);
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	891b      	ldrh	r3, [r3, #8]
 8000ac8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000acc:	4293      	cmp	r3, r2
 8000ace:	d004      	beq.n	8000ada <Q_Read+0xc6>
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	891b      	ldrh	r3, [r3, #8]
 8000ad4:	3301      	adds	r3, #1
 8000ad6:	b29a      	uxth	r2, r3
 8000ad8:	e001      	b.n	8000ade <Q_Read+0xca>
 8000ada:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000ade:	68fb      	ldr	r3, [r7, #12]
 8000ae0:	811a      	strh	r2, [r3, #8]
        ret = false;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	75fb      	strb	r3, [r7, #23]
    }
    return ret;
 8000ae6:	7dfb      	ldrb	r3, [r7, #23]
}
 8000ae8:	4618      	mov	r0, r3
 8000aea:	3718      	adds	r7, #24
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}

08000af0 <Q_NumContents>:
    else    queue->count_empty = _upperlimit(queue->count_empty+1,0xFFFF);
    return ret;
}


uint16_t Q_NumContents(Q_queue_t *queue){
 8000af0:	b480      	push	{r7}
 8000af2:	b083      	sub	sp, #12
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
    return (uint16_t)((queue->size + queue->idx_write - queue->idx_read)%(queue->size));    
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	881b      	ldrh	r3, [r3, #0]
 8000afc:	461a      	mov	r2, r3
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000b04:	4413      	add	r3, r2
 8000b06:	687a      	ldr	r2, [r7, #4]
 8000b08:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8000b0c:	1a9b      	subs	r3, r3, r2
 8000b0e:	687a      	ldr	r2, [r7, #4]
 8000b10:	8812      	ldrh	r2, [r2, #0]
 8000b12:	fb93 f1f2 	sdiv	r1, r3, r2
 8000b16:	fb01 f202 	mul.w	r2, r1, r2
 8000b1a:	1a9b      	subs	r3, r3, r2
 8000b1c:	b29b      	uxth	r3, r3
}
 8000b1e:	4618      	mov	r0, r3
 8000b20:	370c      	adds	r7, #12
 8000b22:	46bd      	mov	sp, r7
 8000b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b28:	4770      	bx	lr

08000b2a <Q_NumEmptyBytes>:

uint16_t Q_NumEmptyBytes(Q_queue_t *queue){
 8000b2a:	b590      	push	{r4, r7, lr}
 8000b2c:	b083      	sub	sp, #12
 8000b2e:	af00      	add	r7, sp, #0
 8000b30:	6078      	str	r0, [r7, #4]
    return queue->size - (int)Q_NumContents(queue) - 1;
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	881c      	ldrh	r4, [r3, #0]
 8000b36:	6878      	ldr	r0, [r7, #4]
 8000b38:	f7ff ffda 	bl	8000af0 <Q_NumContents>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	1ae3      	subs	r3, r4, r3
 8000b40:	b29b      	uxth	r3, r3
 8000b42:	3b01      	subs	r3, #1
 8000b44:	b29b      	uxth	r3, r3
}
 8000b46:	4618      	mov	r0, r3
 8000b48:	370c      	adds	r7, #12
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd90      	pop	{r4, r7, pc}
	...

08000b50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	b083      	sub	sp, #12
 8000b54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b56:	2300      	movs	r3, #0
 8000b58:	607b      	str	r3, [r7, #4]
 8000b5a:	4b10      	ldr	r3, [pc, #64]	@ (8000b9c <HAL_MspInit+0x4c>)
 8000b5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b5e:	4a0f      	ldr	r2, [pc, #60]	@ (8000b9c <HAL_MspInit+0x4c>)
 8000b60:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b64:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b66:	4b0d      	ldr	r3, [pc, #52]	@ (8000b9c <HAL_MspInit+0x4c>)
 8000b68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b6a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b6e:	607b      	str	r3, [r7, #4]
 8000b70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b72:	2300      	movs	r3, #0
 8000b74:	603b      	str	r3, [r7, #0]
 8000b76:	4b09      	ldr	r3, [pc, #36]	@ (8000b9c <HAL_MspInit+0x4c>)
 8000b78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b7a:	4a08      	ldr	r2, [pc, #32]	@ (8000b9c <HAL_MspInit+0x4c>)
 8000b7c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b80:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b82:	4b06      	ldr	r3, [pc, #24]	@ (8000b9c <HAL_MspInit+0x4c>)
 8000b84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b8a:	603b      	str	r3, [r7, #0]
 8000b8c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b8e:	bf00      	nop
 8000b90:	370c      	adds	r7, #12
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop
 8000b9c:	40023800 	.word	0x40023800

08000ba0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ba4:	bf00      	nop
 8000ba6:	e7fd      	b.n	8000ba4 <NMI_Handler+0x4>

08000ba8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bac:	bf00      	nop
 8000bae:	e7fd      	b.n	8000bac <HardFault_Handler+0x4>

08000bb0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bb4:	bf00      	nop
 8000bb6:	e7fd      	b.n	8000bb4 <MemManage_Handler+0x4>

08000bb8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bbc:	bf00      	nop
 8000bbe:	e7fd      	b.n	8000bbc <BusFault_Handler+0x4>

08000bc0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bc4:	bf00      	nop
 8000bc6:	e7fd      	b.n	8000bc4 <UsageFault_Handler+0x4>

08000bc8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bcc:	bf00      	nop
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr

08000bd6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bd6:	b480      	push	{r7}
 8000bd8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bda:	bf00      	nop
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be2:	4770      	bx	lr

08000be4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000be8:	bf00      	nop
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr

08000bf2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bf2:	b580      	push	{r7, lr}
 8000bf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bf6:	f000 ff17 	bl	8001a28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bfa:	bf00      	nop
 8000bfc:	bd80      	pop	{r7, pc}
	...

08000c00 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8000c04:	4802      	ldr	r0, [pc, #8]	@ (8000c10 <DMA1_Stream1_IRQHandler+0x10>)
 8000c06:	f001 f9f5 	bl	8001ff4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8000c0a:	bf00      	nop
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	20001584 	.word	0x20001584

08000c14 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000c18:	4802      	ldr	r0, [pc, #8]	@ (8000c24 <DMA1_Stream5_IRQHandler+0x10>)
 8000c1a:	f001 f9eb 	bl	8001ff4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000c1e:	bf00      	nop
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	20001524 	.word	0x20001524

08000c28 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8000c2c:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8000c30:	f001 fe2a 	bl	8002888 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000c34:	bf00      	nop
 8000c36:	bd80      	pop	{r7, pc}

08000c38 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000c3c:	4802      	ldr	r0, [pc, #8]	@ (8000c48 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000c3e:	f003 fe4b 	bl	80048d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000c42:	bf00      	nop
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	2000144c 	.word	0x2000144c

08000c4c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000c50:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000c54:	f001 fe18 	bl	8002888 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000c58:	bf00      	nop
 8000c5a:	bd80      	pop	{r7, pc}

08000c5c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000c60:	4802      	ldr	r0, [pc, #8]	@ (8000c6c <OTG_FS_IRQHandler+0x10>)
 8000c62:	f001 ff6d 	bl	8002b40 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000c66:	bf00      	nop
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	2000a9f4 	.word	0x2000a9f4

08000c70 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b084      	sub	sp, #16
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  uint16_t num = 0;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	81fb      	strh	r3, [r7, #14]
  
  if ((num = Q_NumContents(&USB_TX_Q)) > 0 )
 8000c7c:	4818      	ldr	r0, [pc, #96]	@ (8000ce0 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000c7e:	f7ff ff37 	bl	8000af0 <Q_NumContents>
 8000c82:	4603      	mov	r3, r0
 8000c84:	81fb      	strh	r3, [r7, #14]
 8000c86:	89fb      	ldrh	r3, [r7, #14]
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d016      	beq.n	8000cba <HAL_TIM_PeriodElapsedCallback+0x4a>
  {
    if (CDC_Transmit_Is_Busy() != USBD_BUSY)
 8000c8c:	f008 fb92 	bl	80093b4 <CDC_Transmit_Is_Busy>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b01      	cmp	r3, #1
 8000c94:	d011      	beq.n	8000cba <HAL_TIM_PeriodElapsedCallback+0x4a>
    {
      queDataNum += num;
 8000c96:	4b13      	ldr	r3, [pc, #76]	@ (8000ce4 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000c98:	881a      	ldrh	r2, [r3, #0]
 8000c9a:	89fb      	ldrh	r3, [r7, #14]
 8000c9c:	4413      	add	r3, r2
 8000c9e:	b29a      	uxth	r2, r3
 8000ca0:	4b10      	ldr	r3, [pc, #64]	@ (8000ce4 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000ca2:	801a      	strh	r2, [r3, #0]

      Q_Read(&USB_TX_Q, (uint8_t *)queData, num);
 8000ca4:	89fb      	ldrh	r3, [r7, #14]
 8000ca6:	461a      	mov	r2, r3
 8000ca8:	490f      	ldr	r1, [pc, #60]	@ (8000ce8 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000caa:	480d      	ldr	r0, [pc, #52]	@ (8000ce0 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000cac:	f7ff feb2 	bl	8000a14 <Q_Read>

      CDC_Transmit_FS(queData, num);
 8000cb0:	89fb      	ldrh	r3, [r7, #14]
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	480c      	ldr	r0, [pc, #48]	@ (8000ce8 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000cb6:	f008 fb3b 	bl	8009330 <CDC_Transmit_FS>
    }
  }

  TIM1_CNT_1++; // LED 점멸 
 8000cba:	4b0c      	ldr	r3, [pc, #48]	@ (8000cec <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	3301      	adds	r3, #1
 8000cc0:	4a0a      	ldr	r2, [pc, #40]	@ (8000cec <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000cc2:	6013      	str	r3, [r2, #0]
  TIM1_CNT_2++; //
 8000cc4:	4b0a      	ldr	r3, [pc, #40]	@ (8000cf0 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	3301      	adds	r3, #1
 8000cca:	4a09      	ldr	r2, [pc, #36]	@ (8000cf0 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000ccc:	6013      	str	r3, [r2, #0]
  TIM1_CNT_3++; //
 8000cce:	4b09      	ldr	r3, [pc, #36]	@ (8000cf4 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	3301      	adds	r3, #1
 8000cd4:	4a07      	ldr	r2, [pc, #28]	@ (8000cf4 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000cd6:	6013      	str	r3, [r2, #0]
}
 8000cd8:	bf00      	nop
 8000cda:	3710      	adds	r7, #16
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	20000ad4 	.word	0x20000ad4
 8000ce4:	20001444 	.word	0x20001444
 8000ce8:	20000ae4 	.word	0x20000ae4
 8000cec:	200015e4 	.word	0x200015e4
 8000cf0:	200015e8 	.word	0x200015e8
 8000cf4:	200015ec 	.word	0x200015ec

08000cf8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b086      	sub	sp, #24
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  uart_rx_cnt_total++;
 8000d00:	4b43      	ldr	r3, [pc, #268]	@ (8000e10 <HAL_UART_RxCpltCallback+0x118>)
 8000d02:	881b      	ldrh	r3, [r3, #0]
 8000d04:	3301      	adds	r3, #1
 8000d06:	b29a      	uxth	r2, r3
 8000d08:	4b41      	ldr	r3, [pc, #260]	@ (8000e10 <HAL_UART_RxCpltCallback+0x118>)
 8000d0a:	801a      	strh	r2, [r3, #0]
  //   Rx_Start_flag = 1;
  //   debug_buf_init();
  // }

  /* Prevent unused argument(s) compilation warning */
  if (huart->Instance == USART2)
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4a40      	ldr	r2, [pc, #256]	@ (8000e14 <HAL_UART_RxCpltCallback+0x11c>)
 8000d12:	4293      	cmp	r3, r2
 8000d14:	d113      	bne.n	8000d3e <HAL_UART_RxCpltCallback+0x46>
  {
    #if 1
    uart2_rx_ready = 1;
 8000d16:	4b40      	ldr	r3, [pc, #256]	@ (8000e18 <HAL_UART_RxCpltCallback+0x120>)
 8000d18:	2201      	movs	r2, #1
 8000d1a:	701a      	strb	r2, [r3, #0]

    // uart2_rxcpltcallback_cnt++;

    // HAL_GPIO_TogglePin(UART_TIME_PORT, UART_RX_BUFWR_PIN);

    debug_buf_write(1, USART2->DR);
 8000d1c:	4b3d      	ldr	r3, [pc, #244]	@ (8000e14 <HAL_UART_RxCpltCallback+0x11c>)
 8000d1e:	685b      	ldr	r3, [r3, #4]
 8000d20:	b2db      	uxtb	r3, r3
 8000d22:	4619      	mov	r1, r3
 8000d24:	2001      	movs	r0, #1
 8000d26:	f000 fb87 	bl	8001438 <debug_buf_write>
    // detect_continuous_data();
    // uart2_rx_flag = 1;

    // uart2_rx_index = (UART_RXDATA_MAX - hdma_usart2_rx.Instance->NDTR);

    HAL_UART_Receive_DMA(&huart2, uart2_rx_buf, UART_RXDATA_MAX);
 8000d2a:	2201      	movs	r2, #1
 8000d2c:	493b      	ldr	r1, [pc, #236]	@ (8000e1c <HAL_UART_RxCpltCallback+0x124>)
 8000d2e:	483c      	ldr	r0, [pc, #240]	@ (8000e20 <HAL_UART_RxCpltCallback+0x128>)
 8000d30:	f004 f9d8 	bl	80050e4 <HAL_UART_Receive_DMA>

    #ifdef DEBUG
    HAL_GPIO_TogglePin(UART_TIME_PORT, UART_RX_BUFWR_PIN);
 8000d34:	2120      	movs	r1, #32
 8000d36:	483b      	ldr	r0, [pc, #236]	@ (8000e24 <HAL_UART_RxCpltCallback+0x12c>)
 8000d38:	f001 fd8b 	bl	8002852 <HAL_GPIO_TogglePin>
 8000d3c:	e017      	b.n	8000d6e <HAL_UART_RxCpltCallback+0x76>
      
      // HAL_UART_Receive_DMA(&huart2, uart2_rx_buf, UART_RXDATA_MAX);

    #endif
  }
  else if (huart->Instance == USART3)
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	4a39      	ldr	r2, [pc, #228]	@ (8000e28 <HAL_UART_RxCpltCallback+0x130>)
 8000d44:	4293      	cmp	r3, r2
 8000d46:	d112      	bne.n	8000d6e <HAL_UART_RxCpltCallback+0x76>
  {
    uart3_rx_ready = 1;
 8000d48:	4b38      	ldr	r3, [pc, #224]	@ (8000e2c <HAL_UART_RxCpltCallback+0x134>)
 8000d4a:	2201      	movs	r2, #1
 8000d4c:	701a      	strb	r2, [r3, #0]
    // uart3_rx_flag = 1;
    // uart2_rxcpltcallback_cnt++;
    debug_buf_write(2, USART3->DR);
 8000d4e:	4b36      	ldr	r3, [pc, #216]	@ (8000e28 <HAL_UART_RxCpltCallback+0x130>)
 8000d50:	685b      	ldr	r3, [r3, #4]
 8000d52:	b2db      	uxtb	r3, r3
 8000d54:	4619      	mov	r1, r3
 8000d56:	2002      	movs	r0, #2
 8000d58:	f000 fb6e 	bl	8001438 <debug_buf_write>
    // detect_continuous_data();
    // uart2_rx_flag = 1;

    // uart3_rx_index = (UART_RXDATA_MAX - hdma_usart3_rx.Instance->NDTR);
    
    HAL_UART_Receive_DMA(&huart3, uart3_rx_buf, UART_RXDATA_MAX);
 8000d5c:	2201      	movs	r2, #1
 8000d5e:	4934      	ldr	r1, [pc, #208]	@ (8000e30 <HAL_UART_RxCpltCallback+0x138>)
 8000d60:	4834      	ldr	r0, [pc, #208]	@ (8000e34 <HAL_UART_RxCpltCallback+0x13c>)
 8000d62:	f004 f9bf 	bl	80050e4 <HAL_UART_Receive_DMA>
    
    #ifdef DEBUG
    HAL_GPIO_TogglePin(UART_TIME_PORT, UART_TX_CPLT_TIME_PIN); // DEBUG
 8000d66:	2140      	movs	r1, #64	@ 0x40
 8000d68:	482e      	ldr	r0, [pc, #184]	@ (8000e24 <HAL_UART_RxCpltCallback+0x12c>)
 8000d6a:	f001 fd72 	bl	8002852 <HAL_GPIO_TogglePin>
    #endif
  }
  detect_continuous_data();
 8000d6e:	f000 fca3 	bl	80016b8 <detect_continuous_data>

  // detect_continuous_data();

  if (__HAL_UART_GET_FLAG(&huart2, UART_FLAG_ORE))
 8000d72:	4b2b      	ldr	r3, [pc, #172]	@ (8000e20 <HAL_UART_RxCpltCallback+0x128>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	f003 0308 	and.w	r3, r3, #8
 8000d7c:	2b08      	cmp	r3, #8
 8000d7e:	d10b      	bne.n	8000d98 <HAL_UART_RxCpltCallback+0xa0>
  {
    __HAL_UART_CLEAR_OREFLAG(&huart2);
 8000d80:	2300      	movs	r3, #0
 8000d82:	617b      	str	r3, [r7, #20]
 8000d84:	4b26      	ldr	r3, [pc, #152]	@ (8000e20 <HAL_UART_RxCpltCallback+0x128>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	617b      	str	r3, [r7, #20]
 8000d8c:	4b24      	ldr	r3, [pc, #144]	@ (8000e20 <HAL_UART_RxCpltCallback+0x128>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	685b      	ldr	r3, [r3, #4]
 8000d92:	617b      	str	r3, [r7, #20]
 8000d94:	697b      	ldr	r3, [r7, #20]
  }
  else if (__HAL_UART_GET_FLAG(&huart3, UART_FLAG_FE))
  {
    __HAL_UART_CLEAR_FEFLAG(&huart3);
  }
}
 8000d96:	e037      	b.n	8000e08 <HAL_UART_RxCpltCallback+0x110>
  else if (__HAL_UART_GET_FLAG(&huart3, UART_FLAG_ORE))
 8000d98:	4b26      	ldr	r3, [pc, #152]	@ (8000e34 <HAL_UART_RxCpltCallback+0x13c>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	f003 0308 	and.w	r3, r3, #8
 8000da2:	2b08      	cmp	r3, #8
 8000da4:	d10b      	bne.n	8000dbe <HAL_UART_RxCpltCallback+0xc6>
    __HAL_UART_CLEAR_OREFLAG(&huart3);
 8000da6:	2300      	movs	r3, #0
 8000da8:	613b      	str	r3, [r7, #16]
 8000daa:	4b22      	ldr	r3, [pc, #136]	@ (8000e34 <HAL_UART_RxCpltCallback+0x13c>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	613b      	str	r3, [r7, #16]
 8000db2:	4b20      	ldr	r3, [pc, #128]	@ (8000e34 <HAL_UART_RxCpltCallback+0x13c>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	685b      	ldr	r3, [r3, #4]
 8000db8:	613b      	str	r3, [r7, #16]
 8000dba:	693b      	ldr	r3, [r7, #16]
}
 8000dbc:	e024      	b.n	8000e08 <HAL_UART_RxCpltCallback+0x110>
  else if (__HAL_UART_GET_FLAG(&huart2, UART_FLAG_FE))
 8000dbe:	4b18      	ldr	r3, [pc, #96]	@ (8000e20 <HAL_UART_RxCpltCallback+0x128>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	f003 0302 	and.w	r3, r3, #2
 8000dc8:	2b02      	cmp	r3, #2
 8000dca:	d10b      	bne.n	8000de4 <HAL_UART_RxCpltCallback+0xec>
    __HAL_UART_CLEAR_FEFLAG(&huart2);
 8000dcc:	2300      	movs	r3, #0
 8000dce:	60fb      	str	r3, [r7, #12]
 8000dd0:	4b13      	ldr	r3, [pc, #76]	@ (8000e20 <HAL_UART_RxCpltCallback+0x128>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	60fb      	str	r3, [r7, #12]
 8000dd8:	4b11      	ldr	r3, [pc, #68]	@ (8000e20 <HAL_UART_RxCpltCallback+0x128>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	685b      	ldr	r3, [r3, #4]
 8000dde:	60fb      	str	r3, [r7, #12]
 8000de0:	68fb      	ldr	r3, [r7, #12]
}
 8000de2:	e011      	b.n	8000e08 <HAL_UART_RxCpltCallback+0x110>
  else if (__HAL_UART_GET_FLAG(&huart3, UART_FLAG_FE))
 8000de4:	4b13      	ldr	r3, [pc, #76]	@ (8000e34 <HAL_UART_RxCpltCallback+0x13c>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	f003 0302 	and.w	r3, r3, #2
 8000dee:	2b02      	cmp	r3, #2
 8000df0:	d10a      	bne.n	8000e08 <HAL_UART_RxCpltCallback+0x110>
    __HAL_UART_CLEAR_FEFLAG(&huart3);
 8000df2:	2300      	movs	r3, #0
 8000df4:	60bb      	str	r3, [r7, #8]
 8000df6:	4b0f      	ldr	r3, [pc, #60]	@ (8000e34 <HAL_UART_RxCpltCallback+0x13c>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	60bb      	str	r3, [r7, #8]
 8000dfe:	4b0d      	ldr	r3, [pc, #52]	@ (8000e34 <HAL_UART_RxCpltCallback+0x13c>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	685b      	ldr	r3, [r3, #4]
 8000e04:	60bb      	str	r3, [r7, #8]
 8000e06:	68bb      	ldr	r3, [r7, #8]
}
 8000e08:	bf00      	nop
 8000e0a:	3718      	adds	r7, #24
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	200017fe 	.word	0x200017fe
 8000e14:	40004400 	.word	0x40004400
 8000e18:	20001800 	.word	0x20001800
 8000e1c:	200017f8 	.word	0x200017f8
 8000e20:	20001494 	.word	0x20001494
 8000e24:	40021800 	.word	0x40021800
 8000e28:	40004800 	.word	0x40004800
 8000e2c:	20001801 	.word	0x20001801
 8000e30:	200017fc 	.word	0x200017fc
 8000e34:	200014dc 	.word	0x200014dc

08000e38 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b087      	sub	sp, #28
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  if (__HAL_UART_GET_FLAG(&huart2, UART_FLAG_ORE))
 8000e40:	4b28      	ldr	r3, [pc, #160]	@ (8000ee4 <HAL_UART_ErrorCallback+0xac>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	f003 0308 	and.w	r3, r3, #8
 8000e4a:	2b08      	cmp	r3, #8
 8000e4c:	d10b      	bne.n	8000e66 <HAL_UART_ErrorCallback+0x2e>
  {
    __HAL_UART_CLEAR_OREFLAG(&huart2);
 8000e4e:	2300      	movs	r3, #0
 8000e50:	617b      	str	r3, [r7, #20]
 8000e52:	4b24      	ldr	r3, [pc, #144]	@ (8000ee4 <HAL_UART_ErrorCallback+0xac>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	617b      	str	r3, [r7, #20]
 8000e5a:	4b22      	ldr	r3, [pc, #136]	@ (8000ee4 <HAL_UART_ErrorCallback+0xac>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	685b      	ldr	r3, [r3, #4]
 8000e60:	617b      	str	r3, [r7, #20]
 8000e62:	697b      	ldr	r3, [r7, #20]
  }
  else if (__HAL_UART_GET_FLAG(&huart3, UART_FLAG_FE))
  {
    __HAL_UART_CLEAR_FEFLAG(&huart3);
  }
}
 8000e64:	e037      	b.n	8000ed6 <HAL_UART_ErrorCallback+0x9e>
  else if (__HAL_UART_GET_FLAG(&huart3, UART_FLAG_ORE))
 8000e66:	4b20      	ldr	r3, [pc, #128]	@ (8000ee8 <HAL_UART_ErrorCallback+0xb0>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	f003 0308 	and.w	r3, r3, #8
 8000e70:	2b08      	cmp	r3, #8
 8000e72:	d10b      	bne.n	8000e8c <HAL_UART_ErrorCallback+0x54>
    __HAL_UART_CLEAR_OREFLAG(&huart3);
 8000e74:	2300      	movs	r3, #0
 8000e76:	613b      	str	r3, [r7, #16]
 8000e78:	4b1b      	ldr	r3, [pc, #108]	@ (8000ee8 <HAL_UART_ErrorCallback+0xb0>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	613b      	str	r3, [r7, #16]
 8000e80:	4b19      	ldr	r3, [pc, #100]	@ (8000ee8 <HAL_UART_ErrorCallback+0xb0>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	685b      	ldr	r3, [r3, #4]
 8000e86:	613b      	str	r3, [r7, #16]
 8000e88:	693b      	ldr	r3, [r7, #16]
}
 8000e8a:	e024      	b.n	8000ed6 <HAL_UART_ErrorCallback+0x9e>
  else if (__HAL_UART_GET_FLAG(&huart2, UART_FLAG_FE))
 8000e8c:	4b15      	ldr	r3, [pc, #84]	@ (8000ee4 <HAL_UART_ErrorCallback+0xac>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	f003 0302 	and.w	r3, r3, #2
 8000e96:	2b02      	cmp	r3, #2
 8000e98:	d10b      	bne.n	8000eb2 <HAL_UART_ErrorCallback+0x7a>
    __HAL_UART_CLEAR_FEFLAG(&huart2);
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	60fb      	str	r3, [r7, #12]
 8000e9e:	4b11      	ldr	r3, [pc, #68]	@ (8000ee4 <HAL_UART_ErrorCallback+0xac>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	60fb      	str	r3, [r7, #12]
 8000ea6:	4b0f      	ldr	r3, [pc, #60]	@ (8000ee4 <HAL_UART_ErrorCallback+0xac>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	685b      	ldr	r3, [r3, #4]
 8000eac:	60fb      	str	r3, [r7, #12]
 8000eae:	68fb      	ldr	r3, [r7, #12]
}
 8000eb0:	e011      	b.n	8000ed6 <HAL_UART_ErrorCallback+0x9e>
  else if (__HAL_UART_GET_FLAG(&huart3, UART_FLAG_FE))
 8000eb2:	4b0d      	ldr	r3, [pc, #52]	@ (8000ee8 <HAL_UART_ErrorCallback+0xb0>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	f003 0302 	and.w	r3, r3, #2
 8000ebc:	2b02      	cmp	r3, #2
 8000ebe:	d10a      	bne.n	8000ed6 <HAL_UART_ErrorCallback+0x9e>
    __HAL_UART_CLEAR_FEFLAG(&huart3);
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	60bb      	str	r3, [r7, #8]
 8000ec4:	4b08      	ldr	r3, [pc, #32]	@ (8000ee8 <HAL_UART_ErrorCallback+0xb0>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	60bb      	str	r3, [r7, #8]
 8000ecc:	4b06      	ldr	r3, [pc, #24]	@ (8000ee8 <HAL_UART_ErrorCallback+0xb0>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	685b      	ldr	r3, [r3, #4]
 8000ed2:	60bb      	str	r3, [r7, #8]
 8000ed4:	68bb      	ldr	r3, [r7, #8]
}
 8000ed6:	bf00      	nop
 8000ed8:	371c      	adds	r7, #28
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop
 8000ee4:	20001494 	.word	0x20001494
 8000ee8:	200014dc 	.word	0x200014dc

08000eec <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b083      	sub	sp, #12
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == GPIO_PIN_13)
 8000ef6:	88fb      	ldrh	r3, [r7, #6]
 8000ef8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000efc:	d102      	bne.n	8000f04 <HAL_GPIO_EXTI_Callback+0x18>
  {
    UserButton_Flag = 1;
 8000efe:	4b04      	ldr	r3, [pc, #16]	@ (8000f10 <HAL_GPIO_EXTI_Callback+0x24>)
 8000f00:	2201      	movs	r2, #1
 8000f02:	701a      	strb	r2, [r3, #0]
  }
}
 8000f04:	bf00      	nop
 8000f06:	370c      	adds	r7, #12
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr
 8000f10:	200015f0 	.word	0x200015f0

08000f14 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b086      	sub	sp, #24
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	60f8      	str	r0, [r7, #12]
 8000f1c:	60b9      	str	r1, [r7, #8]
 8000f1e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f20:	2300      	movs	r3, #0
 8000f22:	617b      	str	r3, [r7, #20]
 8000f24:	e00a      	b.n	8000f3c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000f26:	f3af 8000 	nop.w
 8000f2a:	4601      	mov	r1, r0
 8000f2c:	68bb      	ldr	r3, [r7, #8]
 8000f2e:	1c5a      	adds	r2, r3, #1
 8000f30:	60ba      	str	r2, [r7, #8]
 8000f32:	b2ca      	uxtb	r2, r1
 8000f34:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f36:	697b      	ldr	r3, [r7, #20]
 8000f38:	3301      	adds	r3, #1
 8000f3a:	617b      	str	r3, [r7, #20]
 8000f3c:	697a      	ldr	r2, [r7, #20]
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	429a      	cmp	r2, r3
 8000f42:	dbf0      	blt.n	8000f26 <_read+0x12>
  }

  return len;
 8000f44:	687b      	ldr	r3, [r7, #4]
}
 8000f46:	4618      	mov	r0, r3
 8000f48:	3718      	adds	r7, #24
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}

08000f4e <_close>:
  }
  return len;
}

int _close(int file)
{
 8000f4e:	b480      	push	{r7}
 8000f50:	b083      	sub	sp, #12
 8000f52:	af00      	add	r7, sp, #0
 8000f54:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000f56:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	370c      	adds	r7, #12
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr

08000f66 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f66:	b480      	push	{r7}
 8000f68:	b083      	sub	sp, #12
 8000f6a:	af00      	add	r7, sp, #0
 8000f6c:	6078      	str	r0, [r7, #4]
 8000f6e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000f76:	605a      	str	r2, [r3, #4]
  return 0;
 8000f78:	2300      	movs	r3, #0
}
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	370c      	adds	r7, #12
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr

08000f86 <_isatty>:

int _isatty(int file)
{
 8000f86:	b480      	push	{r7}
 8000f88:	b083      	sub	sp, #12
 8000f8a:	af00      	add	r7, sp, #0
 8000f8c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000f8e:	2301      	movs	r3, #1
}
 8000f90:	4618      	mov	r0, r3
 8000f92:	370c      	adds	r7, #12
 8000f94:	46bd      	mov	sp, r7
 8000f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9a:	4770      	bx	lr

08000f9c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b085      	sub	sp, #20
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	60f8      	str	r0, [r7, #12]
 8000fa4:	60b9      	str	r1, [r7, #8]
 8000fa6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000fa8:	2300      	movs	r3, #0
}
 8000faa:	4618      	mov	r0, r3
 8000fac:	3714      	adds	r7, #20
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr
	...

08000fb8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b086      	sub	sp, #24
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fc0:	4a14      	ldr	r2, [pc, #80]	@ (8001014 <_sbrk+0x5c>)
 8000fc2:	4b15      	ldr	r3, [pc, #84]	@ (8001018 <_sbrk+0x60>)
 8000fc4:	1ad3      	subs	r3, r2, r3
 8000fc6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fc8:	697b      	ldr	r3, [r7, #20]
 8000fca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fcc:	4b13      	ldr	r3, [pc, #76]	@ (800101c <_sbrk+0x64>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d102      	bne.n	8000fda <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fd4:	4b11      	ldr	r3, [pc, #68]	@ (800101c <_sbrk+0x64>)
 8000fd6:	4a12      	ldr	r2, [pc, #72]	@ (8001020 <_sbrk+0x68>)
 8000fd8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fda:	4b10      	ldr	r3, [pc, #64]	@ (800101c <_sbrk+0x64>)
 8000fdc:	681a      	ldr	r2, [r3, #0]
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	4413      	add	r3, r2
 8000fe2:	693a      	ldr	r2, [r7, #16]
 8000fe4:	429a      	cmp	r2, r3
 8000fe6:	d207      	bcs.n	8000ff8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fe8:	f009 f8be 	bl	800a168 <__errno>
 8000fec:	4603      	mov	r3, r0
 8000fee:	220c      	movs	r2, #12
 8000ff0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ff2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ff6:	e009      	b.n	800100c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ff8:	4b08      	ldr	r3, [pc, #32]	@ (800101c <_sbrk+0x64>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ffe:	4b07      	ldr	r3, [pc, #28]	@ (800101c <_sbrk+0x64>)
 8001000:	681a      	ldr	r2, [r3, #0]
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	4413      	add	r3, r2
 8001006:	4a05      	ldr	r2, [pc, #20]	@ (800101c <_sbrk+0x64>)
 8001008:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800100a:	68fb      	ldr	r3, [r7, #12]
}
 800100c:	4618      	mov	r0, r3
 800100e:	3718      	adds	r7, #24
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	20030000 	.word	0x20030000
 8001018:	00000400 	.word	0x00000400
 800101c:	20001448 	.word	0x20001448
 8001020:	2000b248 	.word	0x2000b248

08001024 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001028:	4b06      	ldr	r3, [pc, #24]	@ (8001044 <SystemInit+0x20>)
 800102a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800102e:	4a05      	ldr	r2, [pc, #20]	@ (8001044 <SystemInit+0x20>)
 8001030:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001034:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001038:	bf00      	nop
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop
 8001044:	e000ed00 	.word	0xe000ed00

08001048 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b086      	sub	sp, #24
 800104c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800104e:	f107 0308 	add.w	r3, r7, #8
 8001052:	2200      	movs	r2, #0
 8001054:	601a      	str	r2, [r3, #0]
 8001056:	605a      	str	r2, [r3, #4]
 8001058:	609a      	str	r2, [r3, #8]
 800105a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800105c:	463b      	mov	r3, r7
 800105e:	2200      	movs	r2, #0
 8001060:	601a      	str	r2, [r3, #0]
 8001062:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001064:	4b1e      	ldr	r3, [pc, #120]	@ (80010e0 <MX_TIM1_Init+0x98>)
 8001066:	4a1f      	ldr	r2, [pc, #124]	@ (80010e4 <MX_TIM1_Init+0x9c>)
 8001068:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 999;
 800106a:	4b1d      	ldr	r3, [pc, #116]	@ (80010e0 <MX_TIM1_Init+0x98>)
 800106c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001070:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001072:	4b1b      	ldr	r3, [pc, #108]	@ (80010e0 <MX_TIM1_Init+0x98>)
 8001074:	2200      	movs	r2, #0
 8001076:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 168-1;
 8001078:	4b19      	ldr	r3, [pc, #100]	@ (80010e0 <MX_TIM1_Init+0x98>)
 800107a:	22a7      	movs	r2, #167	@ 0xa7
 800107c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800107e:	4b18      	ldr	r3, [pc, #96]	@ (80010e0 <MX_TIM1_Init+0x98>)
 8001080:	2200      	movs	r2, #0
 8001082:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001084:	4b16      	ldr	r3, [pc, #88]	@ (80010e0 <MX_TIM1_Init+0x98>)
 8001086:	2200      	movs	r2, #0
 8001088:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800108a:	4b15      	ldr	r3, [pc, #84]	@ (80010e0 <MX_TIM1_Init+0x98>)
 800108c:	2200      	movs	r2, #0
 800108e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001090:	4813      	ldr	r0, [pc, #76]	@ (80010e0 <MX_TIM1_Init+0x98>)
 8001092:	f003 fb61 	bl	8004758 <HAL_TIM_Base_Init>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d001      	beq.n	80010a0 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 800109c:	f7ff fc2a 	bl	80008f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010a0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010a4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80010a6:	f107 0308 	add.w	r3, r7, #8
 80010aa:	4619      	mov	r1, r3
 80010ac:	480c      	ldr	r0, [pc, #48]	@ (80010e0 <MX_TIM1_Init+0x98>)
 80010ae:	f003 fd03 	bl	8004ab8 <HAL_TIM_ConfigClockSource>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d001      	beq.n	80010bc <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80010b8:	f7ff fc1c 	bl	80008f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010bc:	2300      	movs	r3, #0
 80010be:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010c0:	2300      	movs	r3, #0
 80010c2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80010c4:	463b      	mov	r3, r7
 80010c6:	4619      	mov	r1, r3
 80010c8:	4805      	ldr	r0, [pc, #20]	@ (80010e0 <MX_TIM1_Init+0x98>)
 80010ca:	f003 ff2b 	bl	8004f24 <HAL_TIMEx_MasterConfigSynchronization>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d001      	beq.n	80010d8 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80010d4:	f7ff fc0e 	bl	80008f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80010d8:	bf00      	nop
 80010da:	3718      	adds	r7, #24
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	2000144c 	.word	0x2000144c
 80010e4:	40010000 	.word	0x40010000

080010e8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b084      	sub	sp, #16
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4a0e      	ldr	r2, [pc, #56]	@ (8001130 <HAL_TIM_Base_MspInit+0x48>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d115      	bne.n	8001126 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80010fa:	2300      	movs	r3, #0
 80010fc:	60fb      	str	r3, [r7, #12]
 80010fe:	4b0d      	ldr	r3, [pc, #52]	@ (8001134 <HAL_TIM_Base_MspInit+0x4c>)
 8001100:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001102:	4a0c      	ldr	r2, [pc, #48]	@ (8001134 <HAL_TIM_Base_MspInit+0x4c>)
 8001104:	f043 0301 	orr.w	r3, r3, #1
 8001108:	6453      	str	r3, [r2, #68]	@ 0x44
 800110a:	4b0a      	ldr	r3, [pc, #40]	@ (8001134 <HAL_TIM_Base_MspInit+0x4c>)
 800110c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800110e:	f003 0301 	and.w	r3, r3, #1
 8001112:	60fb      	str	r3, [r7, #12]
 8001114:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001116:	2200      	movs	r2, #0
 8001118:	2100      	movs	r1, #0
 800111a:	2019      	movs	r0, #25
 800111c:	f000 fdb9 	bl	8001c92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001120:	2019      	movs	r0, #25
 8001122:	f000 fdd2 	bl	8001cca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001126:	bf00      	nop
 8001128:	3710      	adds	r7, #16
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	40010000 	.word	0x40010000
 8001134:	40023800 	.word	0x40023800

08001138 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart3_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800113c:	4b12      	ldr	r3, [pc, #72]	@ (8001188 <MX_USART2_UART_Init+0x50>)
 800113e:	4a13      	ldr	r2, [pc, #76]	@ (800118c <MX_USART2_UART_Init+0x54>)
 8001140:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 230400;
 8001142:	4b11      	ldr	r3, [pc, #68]	@ (8001188 <MX_USART2_UART_Init+0x50>)
 8001144:	f44f 3261 	mov.w	r2, #230400	@ 0x38400
 8001148:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 800114a:	4b0f      	ldr	r3, [pc, #60]	@ (8001188 <MX_USART2_UART_Init+0x50>)
 800114c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001150:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001152:	4b0d      	ldr	r3, [pc, #52]	@ (8001188 <MX_USART2_UART_Init+0x50>)
 8001154:	2200      	movs	r2, #0
 8001156:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8001158:	4b0b      	ldr	r3, [pc, #44]	@ (8001188 <MX_USART2_UART_Init+0x50>)
 800115a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800115e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001160:	4b09      	ldr	r3, [pc, #36]	@ (8001188 <MX_USART2_UART_Init+0x50>)
 8001162:	220c      	movs	r2, #12
 8001164:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001166:	4b08      	ldr	r3, [pc, #32]	@ (8001188 <MX_USART2_UART_Init+0x50>)
 8001168:	2200      	movs	r2, #0
 800116a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800116c:	4b06      	ldr	r3, [pc, #24]	@ (8001188 <MX_USART2_UART_Init+0x50>)
 800116e:	2200      	movs	r2, #0
 8001170:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001172:	4805      	ldr	r0, [pc, #20]	@ (8001188 <MX_USART2_UART_Init+0x50>)
 8001174:	f003 ff66 	bl	8005044 <HAL_UART_Init>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d001      	beq.n	8001182 <MX_USART2_UART_Init+0x4a>
  {
    Error_Handler();
 800117e:	f7ff fbb9 	bl	80008f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001182:	bf00      	nop
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	20001494 	.word	0x20001494
 800118c:	40004400 	.word	0x40004400

08001190 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001194:	4b12      	ldr	r3, [pc, #72]	@ (80011e0 <MX_USART3_UART_Init+0x50>)
 8001196:	4a13      	ldr	r2, [pc, #76]	@ (80011e4 <MX_USART3_UART_Init+0x54>)
 8001198:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 230400;
 800119a:	4b11      	ldr	r3, [pc, #68]	@ (80011e0 <MX_USART3_UART_Init+0x50>)
 800119c:	f44f 3261 	mov.w	r2, #230400	@ 0x38400
 80011a0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_9B;
 80011a2:	4b0f      	ldr	r3, [pc, #60]	@ (80011e0 <MX_USART3_UART_Init+0x50>)
 80011a4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80011a8:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80011aa:	4b0d      	ldr	r3, [pc, #52]	@ (80011e0 <MX_USART3_UART_Init+0x50>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_EVEN;
 80011b0:	4b0b      	ldr	r3, [pc, #44]	@ (80011e0 <MX_USART3_UART_Init+0x50>)
 80011b2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80011b6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80011b8:	4b09      	ldr	r3, [pc, #36]	@ (80011e0 <MX_USART3_UART_Init+0x50>)
 80011ba:	220c      	movs	r2, #12
 80011bc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011be:	4b08      	ldr	r3, [pc, #32]	@ (80011e0 <MX_USART3_UART_Init+0x50>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80011c4:	4b06      	ldr	r3, [pc, #24]	@ (80011e0 <MX_USART3_UART_Init+0x50>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80011ca:	4805      	ldr	r0, [pc, #20]	@ (80011e0 <MX_USART3_UART_Init+0x50>)
 80011cc:	f003 ff3a 	bl	8005044 <HAL_UART_Init>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <MX_USART3_UART_Init+0x4a>
  {
    Error_Handler();
 80011d6:	f7ff fb8d 	bl	80008f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80011da:	bf00      	nop
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	200014dc 	.word	0x200014dc
 80011e4:	40004800 	.word	0x40004800

080011e8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b08c      	sub	sp, #48	@ 0x30
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f0:	f107 031c 	add.w	r3, r7, #28
 80011f4:	2200      	movs	r2, #0
 80011f6:	601a      	str	r2, [r3, #0]
 80011f8:	605a      	str	r2, [r3, #4]
 80011fa:	609a      	str	r2, [r3, #8]
 80011fc:	60da      	str	r2, [r3, #12]
 80011fe:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4a60      	ldr	r2, [pc, #384]	@ (8001388 <HAL_UART_MspInit+0x1a0>)
 8001206:	4293      	cmp	r3, r2
 8001208:	d15a      	bne.n	80012c0 <HAL_UART_MspInit+0xd8>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800120a:	2300      	movs	r3, #0
 800120c:	61bb      	str	r3, [r7, #24]
 800120e:	4b5f      	ldr	r3, [pc, #380]	@ (800138c <HAL_UART_MspInit+0x1a4>)
 8001210:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001212:	4a5e      	ldr	r2, [pc, #376]	@ (800138c <HAL_UART_MspInit+0x1a4>)
 8001214:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001218:	6413      	str	r3, [r2, #64]	@ 0x40
 800121a:	4b5c      	ldr	r3, [pc, #368]	@ (800138c <HAL_UART_MspInit+0x1a4>)
 800121c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800121e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001222:	61bb      	str	r3, [r7, #24]
 8001224:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001226:	2300      	movs	r3, #0
 8001228:	617b      	str	r3, [r7, #20]
 800122a:	4b58      	ldr	r3, [pc, #352]	@ (800138c <HAL_UART_MspInit+0x1a4>)
 800122c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800122e:	4a57      	ldr	r2, [pc, #348]	@ (800138c <HAL_UART_MspInit+0x1a4>)
 8001230:	f043 0301 	orr.w	r3, r3, #1
 8001234:	6313      	str	r3, [r2, #48]	@ 0x30
 8001236:	4b55      	ldr	r3, [pc, #340]	@ (800138c <HAL_UART_MspInit+0x1a4>)
 8001238:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800123a:	f003 0301 	and.w	r3, r3, #1
 800123e:	617b      	str	r3, [r7, #20]
 8001240:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001242:	230c      	movs	r3, #12
 8001244:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001246:	2302      	movs	r3, #2
 8001248:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124a:	2300      	movs	r3, #0
 800124c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800124e:	2303      	movs	r3, #3
 8001250:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001252:	2307      	movs	r3, #7
 8001254:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001256:	f107 031c 	add.w	r3, r7, #28
 800125a:	4619      	mov	r1, r3
 800125c:	484c      	ldr	r0, [pc, #304]	@ (8001390 <HAL_UART_MspInit+0x1a8>)
 800125e:	f001 f933 	bl	80024c8 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8001262:	4b4c      	ldr	r3, [pc, #304]	@ (8001394 <HAL_UART_MspInit+0x1ac>)
 8001264:	4a4c      	ldr	r2, [pc, #304]	@ (8001398 <HAL_UART_MspInit+0x1b0>)
 8001266:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8001268:	4b4a      	ldr	r3, [pc, #296]	@ (8001394 <HAL_UART_MspInit+0x1ac>)
 800126a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800126e:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001270:	4b48      	ldr	r3, [pc, #288]	@ (8001394 <HAL_UART_MspInit+0x1ac>)
 8001272:	2200      	movs	r2, #0
 8001274:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001276:	4b47      	ldr	r3, [pc, #284]	@ (8001394 <HAL_UART_MspInit+0x1ac>)
 8001278:	2200      	movs	r2, #0
 800127a:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800127c:	4b45      	ldr	r3, [pc, #276]	@ (8001394 <HAL_UART_MspInit+0x1ac>)
 800127e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001282:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001284:	4b43      	ldr	r3, [pc, #268]	@ (8001394 <HAL_UART_MspInit+0x1ac>)
 8001286:	2200      	movs	r2, #0
 8001288:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800128a:	4b42      	ldr	r3, [pc, #264]	@ (8001394 <HAL_UART_MspInit+0x1ac>)
 800128c:	2200      	movs	r2, #0
 800128e:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001290:	4b40      	ldr	r3, [pc, #256]	@ (8001394 <HAL_UART_MspInit+0x1ac>)
 8001292:	2200      	movs	r2, #0
 8001294:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001296:	4b3f      	ldr	r3, [pc, #252]	@ (8001394 <HAL_UART_MspInit+0x1ac>)
 8001298:	2200      	movs	r2, #0
 800129a:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800129c:	4b3d      	ldr	r3, [pc, #244]	@ (8001394 <HAL_UART_MspInit+0x1ac>)
 800129e:	2200      	movs	r2, #0
 80012a0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80012a2:	483c      	ldr	r0, [pc, #240]	@ (8001394 <HAL_UART_MspInit+0x1ac>)
 80012a4:	f000 fd30 	bl	8001d08 <HAL_DMA_Init>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d001      	beq.n	80012b2 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 80012ae:	f7ff fb21 	bl	80008f4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	4a37      	ldr	r2, [pc, #220]	@ (8001394 <HAL_UART_MspInit+0x1ac>)
 80012b6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80012b8:	4a36      	ldr	r2, [pc, #216]	@ (8001394 <HAL_UART_MspInit+0x1ac>)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80012be:	e05f      	b.n	8001380 <HAL_UART_MspInit+0x198>
  else if(uartHandle->Instance==USART3)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a35      	ldr	r2, [pc, #212]	@ (800139c <HAL_UART_MspInit+0x1b4>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d15a      	bne.n	8001380 <HAL_UART_MspInit+0x198>
    __HAL_RCC_USART3_CLK_ENABLE();
 80012ca:	2300      	movs	r3, #0
 80012cc:	613b      	str	r3, [r7, #16]
 80012ce:	4b2f      	ldr	r3, [pc, #188]	@ (800138c <HAL_UART_MspInit+0x1a4>)
 80012d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012d2:	4a2e      	ldr	r2, [pc, #184]	@ (800138c <HAL_UART_MspInit+0x1a4>)
 80012d4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80012d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80012da:	4b2c      	ldr	r3, [pc, #176]	@ (800138c <HAL_UART_MspInit+0x1a4>)
 80012dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012de:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80012e2:	613b      	str	r3, [r7, #16]
 80012e4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012e6:	2300      	movs	r3, #0
 80012e8:	60fb      	str	r3, [r7, #12]
 80012ea:	4b28      	ldr	r3, [pc, #160]	@ (800138c <HAL_UART_MspInit+0x1a4>)
 80012ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ee:	4a27      	ldr	r2, [pc, #156]	@ (800138c <HAL_UART_MspInit+0x1a4>)
 80012f0:	f043 0302 	orr.w	r3, r3, #2
 80012f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80012f6:	4b25      	ldr	r3, [pc, #148]	@ (800138c <HAL_UART_MspInit+0x1a4>)
 80012f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012fa:	f003 0302 	and.w	r3, r3, #2
 80012fe:	60fb      	str	r3, [r7, #12]
 8001300:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001302:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001306:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001308:	2302      	movs	r3, #2
 800130a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130c:	2300      	movs	r3, #0
 800130e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001310:	2303      	movs	r3, #3
 8001312:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001314:	2307      	movs	r3, #7
 8001316:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001318:	f107 031c 	add.w	r3, r7, #28
 800131c:	4619      	mov	r1, r3
 800131e:	4820      	ldr	r0, [pc, #128]	@ (80013a0 <HAL_UART_MspInit+0x1b8>)
 8001320:	f001 f8d2 	bl	80024c8 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8001324:	4b1f      	ldr	r3, [pc, #124]	@ (80013a4 <HAL_UART_MspInit+0x1bc>)
 8001326:	4a20      	ldr	r2, [pc, #128]	@ (80013a8 <HAL_UART_MspInit+0x1c0>)
 8001328:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 800132a:	4b1e      	ldr	r3, [pc, #120]	@ (80013a4 <HAL_UART_MspInit+0x1bc>)
 800132c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001330:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001332:	4b1c      	ldr	r3, [pc, #112]	@ (80013a4 <HAL_UART_MspInit+0x1bc>)
 8001334:	2200      	movs	r2, #0
 8001336:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001338:	4b1a      	ldr	r3, [pc, #104]	@ (80013a4 <HAL_UART_MspInit+0x1bc>)
 800133a:	2200      	movs	r2, #0
 800133c:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800133e:	4b19      	ldr	r3, [pc, #100]	@ (80013a4 <HAL_UART_MspInit+0x1bc>)
 8001340:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001344:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001346:	4b17      	ldr	r3, [pc, #92]	@ (80013a4 <HAL_UART_MspInit+0x1bc>)
 8001348:	2200      	movs	r2, #0
 800134a:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800134c:	4b15      	ldr	r3, [pc, #84]	@ (80013a4 <HAL_UART_MspInit+0x1bc>)
 800134e:	2200      	movs	r2, #0
 8001350:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8001352:	4b14      	ldr	r3, [pc, #80]	@ (80013a4 <HAL_UART_MspInit+0x1bc>)
 8001354:	2200      	movs	r2, #0
 8001356:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001358:	4b12      	ldr	r3, [pc, #72]	@ (80013a4 <HAL_UART_MspInit+0x1bc>)
 800135a:	2200      	movs	r2, #0
 800135c:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800135e:	4b11      	ldr	r3, [pc, #68]	@ (80013a4 <HAL_UART_MspInit+0x1bc>)
 8001360:	2200      	movs	r2, #0
 8001362:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8001364:	480f      	ldr	r0, [pc, #60]	@ (80013a4 <HAL_UART_MspInit+0x1bc>)
 8001366:	f000 fccf 	bl	8001d08 <HAL_DMA_Init>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d001      	beq.n	8001374 <HAL_UART_MspInit+0x18c>
      Error_Handler();
 8001370:	f7ff fac0 	bl	80008f4 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	4a0b      	ldr	r2, [pc, #44]	@ (80013a4 <HAL_UART_MspInit+0x1bc>)
 8001378:	63da      	str	r2, [r3, #60]	@ 0x3c
 800137a:	4a0a      	ldr	r2, [pc, #40]	@ (80013a4 <HAL_UART_MspInit+0x1bc>)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8001380:	bf00      	nop
 8001382:	3730      	adds	r7, #48	@ 0x30
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}
 8001388:	40004400 	.word	0x40004400
 800138c:	40023800 	.word	0x40023800
 8001390:	40020000 	.word	0x40020000
 8001394:	20001524 	.word	0x20001524
 8001398:	40026088 	.word	0x40026088
 800139c:	40004800 	.word	0x40004800
 80013a0:	40020400 	.word	0x40020400
 80013a4:	20001584 	.word	0x20001584
 80013a8:	40026028 	.word	0x40026028

080013ac <User_CDC_Transmit_FS>:
    sprintf(USB_CdcTxBuffer_FS, "-------------------------------------------\r\n" );
    User_CDC_Transmit_FS((uint8_t *) USB_CdcTxBuffer_FS, strlen(USB_CdcTxBuffer_FS));
}

void User_CDC_Transmit_FS(uint8_t * pdata, uint16_t datalength)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b082      	sub	sp, #8
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
 80013b4:	460b      	mov	r3, r1
 80013b6:	807b      	strh	r3, [r7, #2]
    // while(CDC_Transmit_FS((uint8_t *) pdata, datalength) == USBD_BUSY);
    CDC_Transmit_FS((uint8_t *) pdata, datalength);
 80013b8:	887b      	ldrh	r3, [r7, #2]
 80013ba:	4619      	mov	r1, r3
 80013bc:	6878      	ldr	r0, [r7, #4]
 80013be:	f007 ffb7 	bl	8009330 <CDC_Transmit_FS>
    
}
 80013c2:	bf00      	nop
 80013c4:	3708      	adds	r7, #8
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
	...

080013cc <LED_Proc>:
    LED_RED_PIN         GPIO_PIN_14
    LED_GREEN_PIN       GPIO_PIN_0
    LED_BLUE_PIN        GPIO_PIN_7
*/
static void LED_Proc (void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	af00      	add	r7, sp, #0
    if(TIM1_CNT_1 >= 500)
 80013d0:	4b07      	ldr	r3, [pc, #28]	@ (80013f0 <LED_Proc+0x24>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80013d8:	d307      	bcc.n	80013ea <LED_Proc+0x1e>
    {
        TIM1_CNT_1 = 0;
 80013da:	4b05      	ldr	r3, [pc, #20]	@ (80013f0 <LED_Proc+0x24>)
 80013dc:	2200      	movs	r2, #0
 80013de:	601a      	str	r2, [r3, #0]
        
        HAL_GPIO_TogglePin(LED_ALL_PORT, LED_ALL_PIN);
 80013e0:	f244 0181 	movw	r1, #16513	@ 0x4081
 80013e4:	4803      	ldr	r0, [pc, #12]	@ (80013f4 <LED_Proc+0x28>)
 80013e6:	f001 fa34 	bl	8002852 <HAL_GPIO_TogglePin>
    }    
}
 80013ea:	bf00      	nop
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	200015e4 	.word	0x200015e4
 80013f4:	40020400 	.word	0x40020400

080013f8 <GPIO_Proc>:

void GPIO_Proc (void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	af00      	add	r7, sp, #0
    LED_Proc();
 80013fc:	f7ff ffe6 	bl	80013cc <LED_Proc>
}
 8001400:	bf00      	nop
 8001402:	bd80      	pop	{r7, pc}

08001404 <debug_buf_init>:
static uint8_t cnt1, cnt2;
static uint16_t seq;
static bool flag_end;

void debug_buf_init(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	af00      	add	r7, sp, #0
	seq = 0;
 8001408:	4b07      	ldr	r3, [pc, #28]	@ (8001428 <debug_buf_init+0x24>)
 800140a:	2200      	movs	r2, #0
 800140c:	801a      	strh	r2, [r3, #0]
	cnt1 = 0;
 800140e:	4b07      	ldr	r3, [pc, #28]	@ (800142c <debug_buf_init+0x28>)
 8001410:	2200      	movs	r2, #0
 8001412:	701a      	strb	r2, [r3, #0]
	cnt2 = 0;
 8001414:	4b06      	ldr	r3, [pc, #24]	@ (8001430 <debug_buf_init+0x2c>)
 8001416:	2200      	movs	r2, #0
 8001418:	701a      	strb	r2, [r3, #0]
	flag_end = false;
 800141a:	4b06      	ldr	r3, [pc, #24]	@ (8001434 <debug_buf_init+0x30>)
 800141c:	2200      	movs	r2, #0
 800141e:	701a      	strb	r2, [r3, #0]

    mseq_init();
 8001420:	f000 f896 	bl	8001550 <mseq_init>
}
 8001424:	bf00      	nop
 8001426:	bd80      	pop	{r7, pc}
 8001428:	2000950a 	.word	0x2000950a
 800142c:	20009508 	.word	0x20009508
 8001430:	20009509 	.word	0x20009509
 8001434:	2000950c 	.word	0x2000950c

08001438 <debug_buf_write>:

void debug_buf_write(int8_t ch, uint8_t data)
{
 8001438:	b480      	push	{r7}
 800143a:	b085      	sub	sp, #20
 800143c:	af00      	add	r7, sp, #0
 800143e:	4603      	mov	r3, r0
 8001440:	460a      	mov	r2, r1
 8001442:	71fb      	strb	r3, [r7, #7]
 8001444:	4613      	mov	r3, r2
 8001446:	71bb      	strb	r3, [r7, #6]
	uint8_t head;

	if(ch==1){
 8001448:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800144c:	2b01      	cmp	r3, #1
 800144e:	d10d      	bne.n	800146c <debug_buf_write+0x34>
		head = 0x80+(cnt1&0x7F);
 8001450:	4b20      	ldr	r3, [pc, #128]	@ (80014d4 <debug_buf_write+0x9c>)
 8001452:	781b      	ldrb	r3, [r3, #0]
 8001454:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001458:	b2db      	uxtb	r3, r3
 800145a:	3b80      	subs	r3, #128	@ 0x80
 800145c:	73fb      	strb	r3, [r7, #15]
		// head = 0x80;
		cnt1 = cnt1 + 1;			
 800145e:	4b1d      	ldr	r3, [pc, #116]	@ (80014d4 <debug_buf_write+0x9c>)
 8001460:	781b      	ldrb	r3, [r3, #0]
 8001462:	3301      	adds	r3, #1
 8001464:	b2da      	uxtb	r2, r3
 8001466:	4b1b      	ldr	r3, [pc, #108]	@ (80014d4 <debug_buf_write+0x9c>)
 8001468:	701a      	strb	r2, [r3, #0]
 800146a:	e00a      	b.n	8001482 <debug_buf_write+0x4a>
	}
	else{
        head= (cnt2&0x7F);
 800146c:	4b1a      	ldr	r3, [pc, #104]	@ (80014d8 <debug_buf_write+0xa0>)
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001474:	73fb      	strb	r3, [r7, #15]
		// head = 0x82;
		cnt2 = cnt2 + 1;			
 8001476:	4b18      	ldr	r3, [pc, #96]	@ (80014d8 <debug_buf_write+0xa0>)
 8001478:	781b      	ldrb	r3, [r3, #0]
 800147a:	3301      	adds	r3, #1
 800147c:	b2da      	uxtb	r2, r3
 800147e:	4b16      	ldr	r3, [pc, #88]	@ (80014d8 <debug_buf_write+0xa0>)
 8001480:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001482:	b672      	cpsid	i
}
 8001484:	bf00      	nop
	}

	__disable_irq();
	if(seq<debug_buf_size){
 8001486:	4b15      	ldr	r3, [pc, #84]	@ (80014dc <debug_buf_write+0xa4>)
 8001488:	881b      	ldrh	r3, [r3, #0]
 800148a:	f242 720f 	movw	r2, #9999	@ 0x270f
 800148e:	4293      	cmp	r3, r2
 8001490:	d814      	bhi.n	80014bc <debug_buf_write+0x84>
		debug_buf[seq][0] = head;
 8001492:	4b12      	ldr	r3, [pc, #72]	@ (80014dc <debug_buf_write+0xa4>)
 8001494:	881b      	ldrh	r3, [r3, #0]
 8001496:	4619      	mov	r1, r3
 8001498:	4a11      	ldr	r2, [pc, #68]	@ (80014e0 <debug_buf_write+0xa8>)
 800149a:	7bfb      	ldrb	r3, [r7, #15]
 800149c:	f802 3011 	strb.w	r3, [r2, r1, lsl #1]
		debug_buf[seq][1] = data;
 80014a0:	4b0e      	ldr	r3, [pc, #56]	@ (80014dc <debug_buf_write+0xa4>)
 80014a2:	881b      	ldrh	r3, [r3, #0]
 80014a4:	4a0e      	ldr	r2, [pc, #56]	@ (80014e0 <debug_buf_write+0xa8>)
 80014a6:	005b      	lsls	r3, r3, #1
 80014a8:	4413      	add	r3, r2
 80014aa:	79ba      	ldrb	r2, [r7, #6]
 80014ac:	705a      	strb	r2, [r3, #1]
		// seq += seq;
        
		seq++;
 80014ae:	4b0b      	ldr	r3, [pc, #44]	@ (80014dc <debug_buf_write+0xa4>)
 80014b0:	881b      	ldrh	r3, [r3, #0]
 80014b2:	3301      	adds	r3, #1
 80014b4:	b29a      	uxth	r2, r3
 80014b6:	4b09      	ldr	r3, [pc, #36]	@ (80014dc <debug_buf_write+0xa4>)
 80014b8:	801a      	strh	r2, [r3, #0]
 80014ba:	e002      	b.n	80014c2 <debug_buf_write+0x8a>
	}
	else{
		flag_end = true;
 80014bc:	4b09      	ldr	r3, [pc, #36]	@ (80014e4 <debug_buf_write+0xac>)
 80014be:	2201      	movs	r2, #1
 80014c0:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80014c2:	b662      	cpsie	i
}
 80014c4:	bf00      	nop
	}	
	__enable_irq();
}
 80014c6:	bf00      	nop
 80014c8:	3714      	adds	r7, #20
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr
 80014d2:	bf00      	nop
 80014d4:	20009508 	.word	0x20009508
 80014d8:	20009509 	.word	0x20009509
 80014dc:	2000950a 	.word	0x2000950a
 80014e0:	200046e8 	.word	0x200046e8
 80014e4:	2000950c 	.word	0x2000950c

080014e8 <debug_buf_read>:


bool debug_buf_read(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b082      	sub	sp, #8
 80014ec:	af00      	add	r7, sp, #0
	int8_t buf[4];
	if(flag_end)
 80014ee:	4b14      	ldr	r3, [pc, #80]	@ (8001540 <debug_buf_read+0x58>)
 80014f0:	781b      	ldrb	r3, [r3, #0]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d01d      	beq.n	8001532 <debug_buf_read+0x4a>
    {
        // #ifdef DEBUG
        // HAL_GPIO_TogglePin(UART_TIME_PORT, UART_TX_CPLT_TIME_PIN); // DEBUG
        // #endif

		for(int i=0;i<debug_buf_size;++i){
 80014f6:	2300      	movs	r3, #0
 80014f8:	607b      	str	r3, [r7, #4]
 80014fa:	e010      	b.n	800151e <debug_buf_read+0x36>
			printf("%02X%02X\r\n",debug_buf[i][0],debug_buf[i][1]);
 80014fc:	4a11      	ldr	r2, [pc, #68]	@ (8001544 <debug_buf_read+0x5c>)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8001504:	4619      	mov	r1, r3
 8001506:	4a0f      	ldr	r2, [pc, #60]	@ (8001544 <debug_buf_read+0x5c>)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	005b      	lsls	r3, r3, #1
 800150c:	4413      	add	r3, r2
 800150e:	785b      	ldrb	r3, [r3, #1]
 8001510:	461a      	mov	r2, r3
 8001512:	480d      	ldr	r0, [pc, #52]	@ (8001548 <debug_buf_read+0x60>)
 8001514:	f008 fc4c 	bl	8009db0 <iprintf>
		for(int i=0;i<debug_buf_size;++i){
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	3301      	adds	r3, #1
 800151c:	607b      	str	r3, [r7, #4]
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001524:	4293      	cmp	r3, r2
 8001526:	dde9      	ble.n	80014fc <debug_buf_read+0x14>
		}

        mseq_display();
 8001528:	f000 f886 	bl	8001638 <mseq_display>
        
        seq = 0;
 800152c:	4b07      	ldr	r3, [pc, #28]	@ (800154c <debug_buf_read+0x64>)
 800152e:	2200      	movs	r2, #0
 8001530:	801a      	strh	r2, [r3, #0]
        // #endif
	}

    
	
    return flag_end;
 8001532:	4b03      	ldr	r3, [pc, #12]	@ (8001540 <debug_buf_read+0x58>)
 8001534:	781b      	ldrb	r3, [r3, #0]
}
 8001536:	4618      	mov	r0, r3
 8001538:	3708      	adds	r7, #8
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	2000950c 	.word	0x2000950c
 8001544:	200046e8 	.word	0x200046e8
 8001548:	0800af58 	.word	0x0800af58
 800154c:	2000950a 	.word	0x2000950a

08001550 <mseq_init>:

void mseq_init (void)
{
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0
    mseq_cnt = 0;
 8001554:	4b03      	ldr	r3, [pc, #12]	@ (8001564 <mseq_init+0x14>)
 8001556:	2200      	movs	r2, #0
 8001558:	801a      	strh	r2, [r3, #0]
}
 800155a:	bf00      	nop
 800155c:	46bd      	mov	sp, r7
 800155e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001562:	4770      	bx	lr
 8001564:	20001806 	.word	0x20001806

08001568 <mseq_upload_master>:

void mseq_upload_master (void)
{
 8001568:	b480      	push	{r7}
 800156a:	b083      	sub	sp, #12
 800156c:	af00      	add	r7, sp, #0
    uint16_t seq_cnt = 0;
 800156e:	2300      	movs	r3, #0
 8001570:	80fb      	strh	r3, [r7, #6]
    seq_cnt = (uint16_t) seq;
 8001572:	4b16      	ldr	r3, [pc, #88]	@ (80015cc <mseq_upload_master+0x64>)
 8001574:	881b      	ldrh	r3, [r3, #0]
 8001576:	80fb      	strh	r3, [r7, #6]

    mseq[mseq_cnt].MC = debug_buf[seq_cnt - 1][1];
 8001578:	88fb      	ldrh	r3, [r7, #6]
 800157a:	3b01      	subs	r3, #1
 800157c:	4a14      	ldr	r2, [pc, #80]	@ (80015d0 <mseq_upload_master+0x68>)
 800157e:	8812      	ldrh	r2, [r2, #0]
 8001580:	4611      	mov	r1, r2
 8001582:	4a14      	ldr	r2, [pc, #80]	@ (80015d4 <mseq_upload_master+0x6c>)
 8001584:	005b      	lsls	r3, r3, #1
 8001586:	4413      	add	r3, r2
 8001588:	7858      	ldrb	r0, [r3, #1]
 800158a:	4a13      	ldr	r2, [pc, #76]	@ (80015d8 <mseq_upload_master+0x70>)
 800158c:	460b      	mov	r3, r1
 800158e:	005b      	lsls	r3, r3, #1
 8001590:	440b      	add	r3, r1
 8001592:	009b      	lsls	r3, r3, #2
 8001594:	4413      	add	r3, r2
 8001596:	3301      	adds	r3, #1
 8001598:	4602      	mov	r2, r0
 800159a:	701a      	strb	r2, [r3, #0]
    mseq[mseq_cnt].CKT = debug_buf[seq_cnt][1];
 800159c:	88fb      	ldrh	r3, [r7, #6]
 800159e:	4a0c      	ldr	r2, [pc, #48]	@ (80015d0 <mseq_upload_master+0x68>)
 80015a0:	8812      	ldrh	r2, [r2, #0]
 80015a2:	4611      	mov	r1, r2
 80015a4:	4a0b      	ldr	r2, [pc, #44]	@ (80015d4 <mseq_upload_master+0x6c>)
 80015a6:	005b      	lsls	r3, r3, #1
 80015a8:	4413      	add	r3, r2
 80015aa:	7858      	ldrb	r0, [r3, #1]
 80015ac:	4a0a      	ldr	r2, [pc, #40]	@ (80015d8 <mseq_upload_master+0x70>)
 80015ae:	460b      	mov	r3, r1
 80015b0:	005b      	lsls	r3, r3, #1
 80015b2:	440b      	add	r3, r1
 80015b4:	009b      	lsls	r3, r3, #2
 80015b6:	4413      	add	r3, r2
 80015b8:	3302      	adds	r3, #2
 80015ba:	4602      	mov	r2, r0
 80015bc:	701a      	strb	r2, [r3, #0]
}
 80015be:	bf00      	nop
 80015c0:	370c      	adds	r7, #12
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr
 80015ca:	bf00      	nop
 80015cc:	2000950a 	.word	0x2000950a
 80015d0:	20001806 	.word	0x20001806
 80015d4:	200046e8 	.word	0x200046e8
 80015d8:	20001808 	.word	0x20001808

080015dc <mseq_upload_device>:

void mseq_upload_device (void)
{
 80015dc:	b480      	push	{r7}
 80015de:	b083      	sub	sp, #12
 80015e0:	af00      	add	r7, sp, #0
    uint16_t seq_cnt = 0;
 80015e2:	2300      	movs	r3, #0
 80015e4:	80fb      	strh	r3, [r7, #6]
    seq_cnt = (uint16_t) seq;
 80015e6:	4b10      	ldr	r3, [pc, #64]	@ (8001628 <mseq_upload_device+0x4c>)
 80015e8:	881b      	ldrh	r3, [r3, #0]
 80015ea:	80fb      	strh	r3, [r7, #6]

    mseq[mseq_cnt].CKS = debug_buf[seq_cnt - 2][1];
 80015ec:	88fb      	ldrh	r3, [r7, #6]
 80015ee:	3b02      	subs	r3, #2
 80015f0:	4a0e      	ldr	r2, [pc, #56]	@ (800162c <mseq_upload_device+0x50>)
 80015f2:	8812      	ldrh	r2, [r2, #0]
 80015f4:	4611      	mov	r1, r2
 80015f6:	4a0e      	ldr	r2, [pc, #56]	@ (8001630 <mseq_upload_device+0x54>)
 80015f8:	005b      	lsls	r3, r3, #1
 80015fa:	4413      	add	r3, r2
 80015fc:	7858      	ldrb	r0, [r3, #1]
 80015fe:	4a0d      	ldr	r2, [pc, #52]	@ (8001634 <mseq_upload_device+0x58>)
 8001600:	460b      	mov	r3, r1
 8001602:	005b      	lsls	r3, r3, #1
 8001604:	440b      	add	r3, r1
 8001606:	009b      	lsls	r3, r3, #2
 8001608:	4413      	add	r3, r2
 800160a:	3303      	adds	r3, #3
 800160c:	4602      	mov	r2, r0
 800160e:	701a      	strb	r2, [r3, #0]

    mseq_cnt++;
 8001610:	4b06      	ldr	r3, [pc, #24]	@ (800162c <mseq_upload_device+0x50>)
 8001612:	881b      	ldrh	r3, [r3, #0]
 8001614:	3301      	adds	r3, #1
 8001616:	b29a      	uxth	r2, r3
 8001618:	4b04      	ldr	r3, [pc, #16]	@ (800162c <mseq_upload_device+0x50>)
 800161a:	801a      	strh	r2, [r3, #0]
}
 800161c:	bf00      	nop
 800161e:	370c      	adds	r7, #12
 8001620:	46bd      	mov	sp, r7
 8001622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001626:	4770      	bx	lr
 8001628:	2000950a 	.word	0x2000950a
 800162c:	20001806 	.word	0x20001806
 8001630:	200046e8 	.word	0x200046e8
 8001634:	20001808 	.word	0x20001808

08001638 <mseq_display>:

void mseq_display (void)
{
 8001638:	b5b0      	push	{r4, r5, r7, lr}
 800163a:	b084      	sub	sp, #16
 800163c:	af02      	add	r7, sp, #8
    uint16_t i = 0;
 800163e:	2300      	movs	r3, #0
 8001640:	80fb      	strh	r3, [r7, #6]

    for (i = 0; i < mseq_cnt; ++i)
 8001642:	2300      	movs	r3, #0
 8001644:	80fb      	strh	r3, [r7, #6]
 8001646:	e026      	b.n	8001696 <mseq_display+0x5e>
    {
        printf("%d,%d,%d,%d\r\n", i, mseq[i].MC, mseq[i].CKT, mseq[i].CKS);
 8001648:	88f9      	ldrh	r1, [r7, #6]
 800164a:	88fa      	ldrh	r2, [r7, #6]
 800164c:	4817      	ldr	r0, [pc, #92]	@ (80016ac <mseq_display+0x74>)
 800164e:	4613      	mov	r3, r2
 8001650:	005b      	lsls	r3, r3, #1
 8001652:	4413      	add	r3, r2
 8001654:	009b      	lsls	r3, r3, #2
 8001656:	4403      	add	r3, r0
 8001658:	3301      	adds	r3, #1
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	461c      	mov	r4, r3
 800165e:	88fa      	ldrh	r2, [r7, #6]
 8001660:	4812      	ldr	r0, [pc, #72]	@ (80016ac <mseq_display+0x74>)
 8001662:	4613      	mov	r3, r2
 8001664:	005b      	lsls	r3, r3, #1
 8001666:	4413      	add	r3, r2
 8001668:	009b      	lsls	r3, r3, #2
 800166a:	4403      	add	r3, r0
 800166c:	3302      	adds	r3, #2
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	461d      	mov	r5, r3
 8001672:	88fa      	ldrh	r2, [r7, #6]
 8001674:	480d      	ldr	r0, [pc, #52]	@ (80016ac <mseq_display+0x74>)
 8001676:	4613      	mov	r3, r2
 8001678:	005b      	lsls	r3, r3, #1
 800167a:	4413      	add	r3, r2
 800167c:	009b      	lsls	r3, r3, #2
 800167e:	4403      	add	r3, r0
 8001680:	3303      	adds	r3, #3
 8001682:	781b      	ldrb	r3, [r3, #0]
 8001684:	9300      	str	r3, [sp, #0]
 8001686:	462b      	mov	r3, r5
 8001688:	4622      	mov	r2, r4
 800168a:	4809      	ldr	r0, [pc, #36]	@ (80016b0 <mseq_display+0x78>)
 800168c:	f008 fb90 	bl	8009db0 <iprintf>
    for (i = 0; i < mseq_cnt; ++i)
 8001690:	88fb      	ldrh	r3, [r7, #6]
 8001692:	3301      	adds	r3, #1
 8001694:	80fb      	strh	r3, [r7, #6]
 8001696:	4b07      	ldr	r3, [pc, #28]	@ (80016b4 <mseq_display+0x7c>)
 8001698:	881b      	ldrh	r3, [r3, #0]
 800169a:	88fa      	ldrh	r2, [r7, #6]
 800169c:	429a      	cmp	r2, r3
 800169e:	d3d3      	bcc.n	8001648 <mseq_display+0x10>
        // HAL_Delay(1);
    }
}
 80016a0:	bf00      	nop
 80016a2:	bf00      	nop
 80016a4:	3708      	adds	r7, #8
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bdb0      	pop	{r4, r5, r7, pc}
 80016aa:	bf00      	nop
 80016ac:	20001808 	.word	0x20001808
 80016b0:	0800af64 	.word	0x0800af64
 80016b4:	20001806 	.word	0x20001806

080016b8 <detect_continuous_data>:

void detect_continuous_data (void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	af00      	add	r7, sp, #0
    if (uart2_rx_ready)
 80016bc:	4b20      	ldr	r3, [pc, #128]	@ (8001740 <detect_continuous_data+0x88>)
 80016be:	781b      	ldrb	r3, [r3, #0]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d006      	beq.n	80016d2 <detect_continuous_data+0x1a>
    {
        uart2_rx_ready = 0;
 80016c4:	4b1e      	ldr	r3, [pc, #120]	@ (8001740 <detect_continuous_data+0x88>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	701a      	strb	r2, [r3, #0]
        current_uart_source = 1;
 80016ca:	4b1e      	ldr	r3, [pc, #120]	@ (8001744 <detect_continuous_data+0x8c>)
 80016cc:	2201      	movs	r2, #1
 80016ce:	701a      	strb	r2, [r3, #0]
 80016d0:	e009      	b.n	80016e6 <detect_continuous_data+0x2e>
    }
    else if (uart3_rx_ready)
 80016d2:	4b1d      	ldr	r3, [pc, #116]	@ (8001748 <detect_continuous_data+0x90>)
 80016d4:	781b      	ldrb	r3, [r3, #0]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d005      	beq.n	80016e6 <detect_continuous_data+0x2e>
    {
        uart3_rx_ready = 0;
 80016da:	4b1b      	ldr	r3, [pc, #108]	@ (8001748 <detect_continuous_data+0x90>)
 80016dc:	2200      	movs	r2, #0
 80016de:	701a      	strb	r2, [r3, #0]
        current_uart_source = 2;
 80016e0:	4b18      	ldr	r3, [pc, #96]	@ (8001744 <detect_continuous_data+0x8c>)
 80016e2:	2202      	movs	r2, #2
 80016e4:	701a      	strb	r2, [r3, #0]
    }

    if (uart_rx_cnt_total > 8 )
 80016e6:	4b19      	ldr	r3, [pc, #100]	@ (800174c <detect_continuous_data+0x94>)
 80016e8:	881b      	ldrh	r3, [r3, #0]
 80016ea:	2b08      	cmp	r3, #8
 80016ec:	d921      	bls.n	8001732 <detect_continuous_data+0x7a>
    {
        if (current_uart_source != 0 && current_uart_source == last_uart_source)
 80016ee:	4b15      	ldr	r3, [pc, #84]	@ (8001744 <detect_continuous_data+0x8c>)
 80016f0:	781b      	ldrb	r3, [r3, #0]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d014      	beq.n	8001720 <detect_continuous_data+0x68>
 80016f6:	4b13      	ldr	r3, [pc, #76]	@ (8001744 <detect_continuous_data+0x8c>)
 80016f8:	781a      	ldrb	r2, [r3, #0]
 80016fa:	4b15      	ldr	r3, [pc, #84]	@ (8001750 <detect_continuous_data+0x98>)
 80016fc:	781b      	ldrb	r3, [r3, #0]
 80016fe:	429a      	cmp	r2, r3
 8001700:	d10e      	bne.n	8001720 <detect_continuous_data+0x68>
        {
            if (!continuous_data_flag)
 8001702:	4b14      	ldr	r3, [pc, #80]	@ (8001754 <detect_continuous_data+0x9c>)
 8001704:	781b      	ldrb	r3, [r3, #0]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d113      	bne.n	8001732 <detect_continuous_data+0x7a>
            {
                mseq_upload_device();
 800170a:	f7ff ff67 	bl	80015dc <mseq_upload_device>
                mseq_upload_master();
 800170e:	f7ff ff2b 	bl	8001568 <mseq_upload_master>

                continuous_data_flag++;
 8001712:	4b10      	ldr	r3, [pc, #64]	@ (8001754 <detect_continuous_data+0x9c>)
 8001714:	781b      	ldrb	r3, [r3, #0]
 8001716:	3301      	adds	r3, #1
 8001718:	b2da      	uxtb	r2, r3
 800171a:	4b0e      	ldr	r3, [pc, #56]	@ (8001754 <detect_continuous_data+0x9c>)
 800171c:	701a      	strb	r2, [r3, #0]
            if (!continuous_data_flag)
 800171e:	e008      	b.n	8001732 <detect_continuous_data+0x7a>
            // else if (current_uart_source == 2)
            // {
            //     mseq_upload_device(rxdata);
            // }
        }
        else if (current_uart_source != last_uart_source)
 8001720:	4b08      	ldr	r3, [pc, #32]	@ (8001744 <detect_continuous_data+0x8c>)
 8001722:	781a      	ldrb	r2, [r3, #0]
 8001724:	4b0a      	ldr	r3, [pc, #40]	@ (8001750 <detect_continuous_data+0x98>)
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	429a      	cmp	r2, r3
 800172a:	d002      	beq.n	8001732 <detect_continuous_data+0x7a>
        {
            continuous_data_flag = 0;
 800172c:	4b09      	ldr	r3, [pc, #36]	@ (8001754 <detect_continuous_data+0x9c>)
 800172e:	2200      	movs	r2, #0
 8001730:	701a      	strb	r2, [r3, #0]
        }
        // uart_rx_cnt_total = 0;
    }
    last_uart_source = current_uart_source;
 8001732:	4b04      	ldr	r3, [pc, #16]	@ (8001744 <detect_continuous_data+0x8c>)
 8001734:	781a      	ldrb	r2, [r3, #0]
 8001736:	4b06      	ldr	r3, [pc, #24]	@ (8001750 <detect_continuous_data+0x98>)
 8001738:	701a      	strb	r2, [r3, #0]
}
 800173a:	bf00      	nop
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	20001800 	.word	0x20001800
 8001744:	20001803 	.word	0x20001803
 8001748:	20001801 	.word	0x20001801
 800174c:	200017fe 	.word	0x200017fe
 8001750:	20001802 	.word	0x20001802
 8001754:	20001804 	.word	0x20001804

08001758 <UserButton_BufferClear>:

static uint8_t UserButton_BufferClear (void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b082      	sub	sp, #8
 800175c:	af00      	add	r7, sp, #0
    uint8_t buttonstatus = 0;
 800175e:	2300      	movs	r3, #0
 8001760:	71fb      	strb	r3, [r7, #7]

    if (TIM1_CNT_2 >= 100)
 8001762:	4b10      	ldr	r3, [pc, #64]	@ (80017a4 <UserButton_BufferClear+0x4c>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	2b63      	cmp	r3, #99	@ 0x63
 8001768:	d912      	bls.n	8001790 <UserButton_BufferClear+0x38>
    {
        TIM1_CNT_2 = 0;
 800176a:	4b0e      	ldr	r3, [pc, #56]	@ (80017a4 <UserButton_BufferClear+0x4c>)
 800176c:	2200      	movs	r2, #0
 800176e:	601a      	str	r2, [r3, #0]

        if (UserButton_Flag == 1)
 8001770:	4b0d      	ldr	r3, [pc, #52]	@ (80017a8 <UserButton_BufferClear+0x50>)
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	2b01      	cmp	r3, #1
 8001776:	d10b      	bne.n	8001790 <UserButton_BufferClear+0x38>
        {
            buttonstatus = UserButton_Flag;
 8001778:	4b0b      	ldr	r3, [pc, #44]	@ (80017a8 <UserButton_BufferClear+0x50>)
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	71fb      	strb	r3, [r7, #7]

            UserButton_Flag = 0;
 800177e:	4b0a      	ldr	r3, [pc, #40]	@ (80017a8 <UserButton_BufferClear+0x50>)
 8001780:	2200      	movs	r2, #0
 8001782:	701a      	strb	r2, [r3, #0]

            memset(debug_buf, 0, sizeof(debug_buf));
 8001784:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8001788:	2100      	movs	r1, #0
 800178a:	4808      	ldr	r0, [pc, #32]	@ (80017ac <UserButton_BufferClear+0x54>)
 800178c:	f008 fc78 	bl	800a080 <memset>
        }
        
    }
    return !buttonstatus;
 8001790:	79fb      	ldrb	r3, [r7, #7]
 8001792:	2b00      	cmp	r3, #0
 8001794:	bf0c      	ite	eq
 8001796:	2301      	moveq	r3, #1
 8001798:	2300      	movne	r3, #0
 800179a:	b2db      	uxtb	r3, r3
}
 800179c:	4618      	mov	r0, r3
 800179e:	3708      	adds	r7, #8
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	200015e8 	.word	0x200015e8
 80017a8:	200015f0 	.word	0x200015f0
 80017ac:	200046e8 	.word	0x200046e8

080017b0 <UART_RX_Proc>:

#if 1
void UART_RX_Proc (void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b082      	sub	sp, #8
 80017b4:	af00      	add	r7, sp, #0
    uint32_t i,j,k = 0;
 80017b6:	2300      	movs	r3, #0
 80017b8:	607b      	str	r3, [r7, #4]

    #if 1
    // if (uart2_rx_flag != 0)
    if (uart2_rx_flag == 0)
 80017ba:	4b18      	ldr	r3, [pc, #96]	@ (800181c <UART_RX_Proc+0x6c>)
 80017bc:	781b      	ldrb	r3, [r3, #0]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d128      	bne.n	8001814 <UART_RX_Proc+0x64>
    {
        uart2_rx_flag = 0;
 80017c2:	4b16      	ldr	r3, [pc, #88]	@ (800181c <UART_RX_Proc+0x6c>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	701a      	strb	r2, [r3, #0]
        // for (i = 0; i < UART_RXDATA_MAX; i++)
        // {
        //     debug_buf_write(1, uart2_rx_buf[i]);
        // }

        if (debug_buf_read())
 80017c8:	f7ff fe8e 	bl	80014e8 <debug_buf_read>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d008      	beq.n	80017e4 <UART_RX_Proc+0x34>
        {
            flag_end = false;
 80017d2:	4b13      	ldr	r3, [pc, #76]	@ (8001820 <UART_RX_Proc+0x70>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	701a      	strb	r2, [r3, #0]

            HAL_UART_DMAStop(&huart2);
 80017d8:	4812      	ldr	r0, [pc, #72]	@ (8001824 <UART_RX_Proc+0x74>)
 80017da:	f003 fca8 	bl	800512e <HAL_UART_DMAStop>
            HAL_UART_DMAStop(&huart3);
 80017de:	4812      	ldr	r0, [pc, #72]	@ (8001828 <UART_RX_Proc+0x78>)
 80017e0:	f003 fca5 	bl	800512e <HAL_UART_DMAStop>
        }

        if(UserButton_BufferClear() == HAL_OK)
 80017e4:	f7ff ffb8 	bl	8001758 <UserButton_BufferClear>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d112      	bne.n	8001814 <UART_RX_Proc+0x64>
        {
            printf("\r\nUART RX Buffer Clear.\r\n\n");
 80017ee:	480f      	ldr	r0, [pc, #60]	@ (800182c <UART_RX_Proc+0x7c>)
 80017f0:	f008 fb46 	bl	8009e80 <puts>
            
            seq = 0;
 80017f4:	4b0e      	ldr	r3, [pc, #56]	@ (8001830 <UART_RX_Proc+0x80>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	801a      	strh	r2, [r3, #0]
            uart_rx_cnt_total = 0;
 80017fa:	4b0e      	ldr	r3, [pc, #56]	@ (8001834 <UART_RX_Proc+0x84>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	801a      	strh	r2, [r3, #0]

            HAL_UART_Receive_DMA(&huart2, uart2_rx_buf, UART_RXDATA_MAX);
 8001800:	2201      	movs	r2, #1
 8001802:	490d      	ldr	r1, [pc, #52]	@ (8001838 <UART_RX_Proc+0x88>)
 8001804:	4807      	ldr	r0, [pc, #28]	@ (8001824 <UART_RX_Proc+0x74>)
 8001806:	f003 fc6d 	bl	80050e4 <HAL_UART_Receive_DMA>
            HAL_UART_Receive_DMA(&huart3, uart3_rx_buf, UART_RXDATA_MAX);
 800180a:	2201      	movs	r2, #1
 800180c:	490b      	ldr	r1, [pc, #44]	@ (800183c <UART_RX_Proc+0x8c>)
 800180e:	4806      	ldr	r0, [pc, #24]	@ (8001828 <UART_RX_Proc+0x78>)
 8001810:	f003 fc68 	bl	80050e4 <HAL_UART_Receive_DMA>
        // hdma_usart2_rx.Instance->NDTR = UART_RXDATA_MAX;
        // __HAL_DMA_ENABLE(&hdma_usart2_rx);

        
    }
}
 8001814:	bf00      	nop
 8001816:	3708      	adds	r7, #8
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}
 800181c:	200017fd 	.word	0x200017fd
 8001820:	2000950c 	.word	0x2000950c
 8001824:	20001494 	.word	0x20001494
 8001828:	200014dc 	.word	0x200014dc
 800182c:	0800af74 	.word	0x0800af74
 8001830:	2000950a 	.word	0x2000950a
 8001834:	200017fe 	.word	0x200017fe
 8001838:	200017f8 	.word	0x200017f8
 800183c:	200017fc 	.word	0x200017fc

08001840 <USB_CDC_Proc>:
/*----------------------------------------------------------------------------*/
static uint16_t count = 0;

/* USER CODE BEGIN 1 */
void USB_CDC_Proc (void)
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0

    //     sprintf(USB_CdcTxBuffer_FS, "-------------------------------------------\r\n" );
    //     CDC_Transmit_FS(USB_CdcTxBuffer_FS, strlen(USB_CdcTxBuffer_FS));
    // }
    // #endif
}
 8001844:	bf00      	nop
 8001846:	46bd      	mov	sp, r7
 8001848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184c:	4770      	bx	lr
	...

08001850 <USB_CDC_RX_Proc>:

void USB_CDC_RX_Proc(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	af00      	add	r7, sp, #0
    if (USB_CdcRxBuffer_FS_cnt != NULL)
 8001854:	4b2d      	ldr	r3, [pc, #180]	@ (800190c <USB_CDC_RX_Proc+0xbc>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d055      	beq.n	8001908 <USB_CDC_RX_Proc+0xb8>
    {
        if (!strncmp("RXBUF ALL PRINT", USB_CdcRxBuffer_FS, USB_CDC_RX_CNT))
 800185c:	4b2b      	ldr	r3, [pc, #172]	@ (800190c <USB_CDC_RX_Proc+0xbc>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	3b02      	subs	r3, #2
 8001862:	461a      	mov	r2, r3
 8001864:	492a      	ldr	r1, [pc, #168]	@ (8001910 <USB_CDC_RX_Proc+0xc0>)
 8001866:	482b      	ldr	r0, [pc, #172]	@ (8001914 <USB_CDC_RX_Proc+0xc4>)
 8001868:	f008 fc12 	bl	800a090 <strncmp>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d10d      	bne.n	800188e <USB_CDC_RX_Proc+0x3e>
        {
            sprintf(USB_CdcTxBuffer_FS, "USB ALL\r\n");
 8001872:	4929      	ldr	r1, [pc, #164]	@ (8001918 <USB_CDC_RX_Proc+0xc8>)
 8001874:	4829      	ldr	r0, [pc, #164]	@ (800191c <USB_CDC_RX_Proc+0xcc>)
 8001876:	f008 fb0b 	bl	8009e90 <siprintf>
            User_CDC_Transmit_FS((uint8_t *) USB_CdcTxBuffer_FS, strlen(USB_CdcTxBuffer_FS));
 800187a:	4828      	ldr	r0, [pc, #160]	@ (800191c <USB_CDC_RX_Proc+0xcc>)
 800187c:	f7fe fcb8 	bl	80001f0 <strlen>
 8001880:	4603      	mov	r3, r0
 8001882:	b29b      	uxth	r3, r3
 8001884:	4619      	mov	r1, r3
 8001886:	4825      	ldr	r0, [pc, #148]	@ (800191c <USB_CDC_RX_Proc+0xcc>)
 8001888:	f7ff fd90 	bl	80013ac <User_CDC_Transmit_FS>
 800188c:	e032      	b.n	80018f4 <USB_CDC_RX_Proc+0xa4>
        }
        else if (!strncmp("RXBUF CLEAR", USB_CdcRxBuffer_FS, USB_CDC_RX_CNT))
 800188e:	4b1f      	ldr	r3, [pc, #124]	@ (800190c <USB_CDC_RX_Proc+0xbc>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	3b02      	subs	r3, #2
 8001894:	461a      	mov	r2, r3
 8001896:	491e      	ldr	r1, [pc, #120]	@ (8001910 <USB_CDC_RX_Proc+0xc0>)
 8001898:	4821      	ldr	r0, [pc, #132]	@ (8001920 <USB_CDC_RX_Proc+0xd0>)
 800189a:	f008 fbf9 	bl	800a090 <strncmp>
 800189e:	4603      	mov	r3, r0
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d10d      	bne.n	80018c0 <USB_CDC_RX_Proc+0x70>
        {
            sprintf(USB_CdcTxBuffer_FS, "USB RX Buffer Clear\r\n");
 80018a4:	491f      	ldr	r1, [pc, #124]	@ (8001924 <USB_CDC_RX_Proc+0xd4>)
 80018a6:	481d      	ldr	r0, [pc, #116]	@ (800191c <USB_CDC_RX_Proc+0xcc>)
 80018a8:	f008 faf2 	bl	8009e90 <siprintf>
            User_CDC_Transmit_FS((uint8_t *) USB_CdcTxBuffer_FS, strlen(USB_CdcTxBuffer_FS));
 80018ac:	481b      	ldr	r0, [pc, #108]	@ (800191c <USB_CDC_RX_Proc+0xcc>)
 80018ae:	f7fe fc9f 	bl	80001f0 <strlen>
 80018b2:	4603      	mov	r3, r0
 80018b4:	b29b      	uxth	r3, r3
 80018b6:	4619      	mov	r1, r3
 80018b8:	4818      	ldr	r0, [pc, #96]	@ (800191c <USB_CDC_RX_Proc+0xcc>)
 80018ba:	f7ff fd77 	bl	80013ac <User_CDC_Transmit_FS>
 80018be:	e019      	b.n	80018f4 <USB_CDC_RX_Proc+0xa4>
        }
        else if (!strncmp("SYSTEM RESET", USB_CdcRxBuffer_FS, USB_CDC_RX_CNT))
 80018c0:	4b12      	ldr	r3, [pc, #72]	@ (800190c <USB_CDC_RX_Proc+0xbc>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	3b02      	subs	r3, #2
 80018c6:	461a      	mov	r2, r3
 80018c8:	4911      	ldr	r1, [pc, #68]	@ (8001910 <USB_CDC_RX_Proc+0xc0>)
 80018ca:	4817      	ldr	r0, [pc, #92]	@ (8001928 <USB_CDC_RX_Proc+0xd8>)
 80018cc:	f008 fbe0 	bl	800a090 <strncmp>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d10e      	bne.n	80018f4 <USB_CDC_RX_Proc+0xa4>
        {
            sprintf(USB_CdcTxBuffer_FS, "SYSTEM RESET\r\n");
 80018d6:	4915      	ldr	r1, [pc, #84]	@ (800192c <USB_CDC_RX_Proc+0xdc>)
 80018d8:	4810      	ldr	r0, [pc, #64]	@ (800191c <USB_CDC_RX_Proc+0xcc>)
 80018da:	f008 fad9 	bl	8009e90 <siprintf>
            User_CDC_Transmit_FS((uint8_t *) USB_CdcTxBuffer_FS, strlen(USB_CdcTxBuffer_FS));
 80018de:	480f      	ldr	r0, [pc, #60]	@ (800191c <USB_CDC_RX_Proc+0xcc>)
 80018e0:	f7fe fc86 	bl	80001f0 <strlen>
 80018e4:	4603      	mov	r3, r0
 80018e6:	b29b      	uxth	r3, r3
 80018e8:	4619      	mov	r1, r3
 80018ea:	480c      	ldr	r0, [pc, #48]	@ (800191c <USB_CDC_RX_Proc+0xcc>)
 80018ec:	f7ff fd5e 	bl	80013ac <User_CDC_Transmit_FS>
            HAL_NVIC_SystemReset();
 80018f0:	f000 f9f9 	bl	8001ce6 <HAL_NVIC_SystemReset>
        }

        memset(USB_CdcRxBuffer_FS, 0, USB_CdcRxBuffer_FS_cnt);
 80018f4:	4b05      	ldr	r3, [pc, #20]	@ (800190c <USB_CDC_RX_Proc+0xbc>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	461a      	mov	r2, r3
 80018fa:	2100      	movs	r1, #0
 80018fc:	4804      	ldr	r0, [pc, #16]	@ (8001910 <USB_CDC_RX_Proc+0xc0>)
 80018fe:	f008 fbbf 	bl	800a080 <memset>
        USB_CdcRxBuffer_FS_cnt = 0;
 8001902:	4b02      	ldr	r3, [pc, #8]	@ (800190c <USB_CDC_RX_Proc+0xbc>)
 8001904:	2200      	movs	r2, #0
 8001906:	601a      	str	r2, [r3, #0]
    }
}
 8001908:	bf00      	nop
 800190a:	bd80      	pop	{r7, pc}
 800190c:	200017f4 	.word	0x200017f4
 8001910:	200015f4 	.word	0x200015f4
 8001914:	0800af90 	.word	0x0800af90
 8001918:	0800afa0 	.word	0x0800afa0
 800191c:	200016f4 	.word	0x200016f4
 8001920:	0800afac 	.word	0x0800afac
 8001924:	0800afb8 	.word	0x0800afb8
 8001928:	0800afd0 	.word	0x0800afd0
 800192c:	0800afe0 	.word	0x0800afe0

08001930 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001930:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001968 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001934:	f7ff fb76 	bl	8001024 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001938:	480c      	ldr	r0, [pc, #48]	@ (800196c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800193a:	490d      	ldr	r1, [pc, #52]	@ (8001970 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800193c:	4a0d      	ldr	r2, [pc, #52]	@ (8001974 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800193e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001940:	e002      	b.n	8001948 <LoopCopyDataInit>

08001942 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001942:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001944:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001946:	3304      	adds	r3, #4

08001948 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001948:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800194a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800194c:	d3f9      	bcc.n	8001942 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800194e:	4a0a      	ldr	r2, [pc, #40]	@ (8001978 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001950:	4c0a      	ldr	r4, [pc, #40]	@ (800197c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001952:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001954:	e001      	b.n	800195a <LoopFillZerobss>

08001956 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001956:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001958:	3204      	adds	r2, #4

0800195a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800195a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800195c:	d3fb      	bcc.n	8001956 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800195e:	f008 fc09 	bl	800a174 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001962:	f7fe ff13 	bl	800078c <main>
  bx  lr    
 8001966:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001968:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800196c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001970:	20000158 	.word	0x20000158
  ldr r2, =_sidata
 8001974:	0800b09c 	.word	0x0800b09c
  ldr r2, =_sbss
 8001978:	20000158 	.word	0x20000158
  ldr r4, =_ebss
 800197c:	2000b244 	.word	0x2000b244

08001980 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001980:	e7fe      	b.n	8001980 <ADC_IRQHandler>
	...

08001984 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001988:	4b0e      	ldr	r3, [pc, #56]	@ (80019c4 <HAL_Init+0x40>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a0d      	ldr	r2, [pc, #52]	@ (80019c4 <HAL_Init+0x40>)
 800198e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001992:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001994:	4b0b      	ldr	r3, [pc, #44]	@ (80019c4 <HAL_Init+0x40>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a0a      	ldr	r2, [pc, #40]	@ (80019c4 <HAL_Init+0x40>)
 800199a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800199e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019a0:	4b08      	ldr	r3, [pc, #32]	@ (80019c4 <HAL_Init+0x40>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a07      	ldr	r2, [pc, #28]	@ (80019c4 <HAL_Init+0x40>)
 80019a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019ac:	2003      	movs	r0, #3
 80019ae:	f000 f965 	bl	8001c7c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019b2:	200f      	movs	r0, #15
 80019b4:	f000 f808 	bl	80019c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019b8:	f7ff f8ca 	bl	8000b50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019bc:	2300      	movs	r3, #0
}
 80019be:	4618      	mov	r0, r3
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	40023c00 	.word	0x40023c00

080019c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b082      	sub	sp, #8
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019d0:	4b12      	ldr	r3, [pc, #72]	@ (8001a1c <HAL_InitTick+0x54>)
 80019d2:	681a      	ldr	r2, [r3, #0]
 80019d4:	4b12      	ldr	r3, [pc, #72]	@ (8001a20 <HAL_InitTick+0x58>)
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	4619      	mov	r1, r3
 80019da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80019de:	fbb3 f3f1 	udiv	r3, r3, r1
 80019e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80019e6:	4618      	mov	r0, r3
 80019e8:	f000 f981 	bl	8001cee <HAL_SYSTICK_Config>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d001      	beq.n	80019f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019f2:	2301      	movs	r3, #1
 80019f4:	e00e      	b.n	8001a14 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2b0f      	cmp	r3, #15
 80019fa:	d80a      	bhi.n	8001a12 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019fc:	2200      	movs	r2, #0
 80019fe:	6879      	ldr	r1, [r7, #4]
 8001a00:	f04f 30ff 	mov.w	r0, #4294967295
 8001a04:	f000 f945 	bl	8001c92 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a08:	4a06      	ldr	r2, [pc, #24]	@ (8001a24 <HAL_InitTick+0x5c>)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	e000      	b.n	8001a14 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	3708      	adds	r7, #8
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}
 8001a1c:	20000000 	.word	0x20000000
 8001a20:	20000008 	.word	0x20000008
 8001a24:	20000004 	.word	0x20000004

08001a28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a2c:	4b06      	ldr	r3, [pc, #24]	@ (8001a48 <HAL_IncTick+0x20>)
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	461a      	mov	r2, r3
 8001a32:	4b06      	ldr	r3, [pc, #24]	@ (8001a4c <HAL_IncTick+0x24>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4413      	add	r3, r2
 8001a38:	4a04      	ldr	r2, [pc, #16]	@ (8001a4c <HAL_IncTick+0x24>)
 8001a3a:	6013      	str	r3, [r2, #0]
}
 8001a3c:	bf00      	nop
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	4770      	bx	lr
 8001a46:	bf00      	nop
 8001a48:	20000008 	.word	0x20000008
 8001a4c:	20009510 	.word	0x20009510

08001a50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a50:	b480      	push	{r7}
 8001a52:	af00      	add	r7, sp, #0
  return uwTick;
 8001a54:	4b03      	ldr	r3, [pc, #12]	@ (8001a64 <HAL_GetTick+0x14>)
 8001a56:	681b      	ldr	r3, [r3, #0]
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr
 8001a62:	bf00      	nop
 8001a64:	20009510 	.word	0x20009510

08001a68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b084      	sub	sp, #16
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a70:	f7ff ffee 	bl	8001a50 <HAL_GetTick>
 8001a74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a80:	d005      	beq.n	8001a8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a82:	4b0a      	ldr	r3, [pc, #40]	@ (8001aac <HAL_Delay+0x44>)
 8001a84:	781b      	ldrb	r3, [r3, #0]
 8001a86:	461a      	mov	r2, r3
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	4413      	add	r3, r2
 8001a8c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001a8e:	bf00      	nop
 8001a90:	f7ff ffde 	bl	8001a50 <HAL_GetTick>
 8001a94:	4602      	mov	r2, r0
 8001a96:	68bb      	ldr	r3, [r7, #8]
 8001a98:	1ad3      	subs	r3, r2, r3
 8001a9a:	68fa      	ldr	r2, [r7, #12]
 8001a9c:	429a      	cmp	r2, r3
 8001a9e:	d8f7      	bhi.n	8001a90 <HAL_Delay+0x28>
  {
  }
}
 8001aa0:	bf00      	nop
 8001aa2:	bf00      	nop
 8001aa4:	3710      	adds	r7, #16
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	20000008 	.word	0x20000008

08001ab0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b085      	sub	sp, #20
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	f003 0307 	and.w	r3, r3, #7
 8001abe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ac0:	4b0c      	ldr	r3, [pc, #48]	@ (8001af4 <__NVIC_SetPriorityGrouping+0x44>)
 8001ac2:	68db      	ldr	r3, [r3, #12]
 8001ac4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ac6:	68ba      	ldr	r2, [r7, #8]
 8001ac8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001acc:	4013      	ands	r3, r2
 8001ace:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ad4:	68bb      	ldr	r3, [r7, #8]
 8001ad6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ad8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001adc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ae0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ae2:	4a04      	ldr	r2, [pc, #16]	@ (8001af4 <__NVIC_SetPriorityGrouping+0x44>)
 8001ae4:	68bb      	ldr	r3, [r7, #8]
 8001ae6:	60d3      	str	r3, [r2, #12]
}
 8001ae8:	bf00      	nop
 8001aea:	3714      	adds	r7, #20
 8001aec:	46bd      	mov	sp, r7
 8001aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af2:	4770      	bx	lr
 8001af4:	e000ed00 	.word	0xe000ed00

08001af8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001afc:	4b04      	ldr	r3, [pc, #16]	@ (8001b10 <__NVIC_GetPriorityGrouping+0x18>)
 8001afe:	68db      	ldr	r3, [r3, #12]
 8001b00:	0a1b      	lsrs	r3, r3, #8
 8001b02:	f003 0307 	and.w	r3, r3, #7
}
 8001b06:	4618      	mov	r0, r3
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0e:	4770      	bx	lr
 8001b10:	e000ed00 	.word	0xe000ed00

08001b14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b083      	sub	sp, #12
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	db0b      	blt.n	8001b3e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b26:	79fb      	ldrb	r3, [r7, #7]
 8001b28:	f003 021f 	and.w	r2, r3, #31
 8001b2c:	4907      	ldr	r1, [pc, #28]	@ (8001b4c <__NVIC_EnableIRQ+0x38>)
 8001b2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b32:	095b      	lsrs	r3, r3, #5
 8001b34:	2001      	movs	r0, #1
 8001b36:	fa00 f202 	lsl.w	r2, r0, r2
 8001b3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001b3e:	bf00      	nop
 8001b40:	370c      	adds	r7, #12
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr
 8001b4a:	bf00      	nop
 8001b4c:	e000e100 	.word	0xe000e100

08001b50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b083      	sub	sp, #12
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	4603      	mov	r3, r0
 8001b58:	6039      	str	r1, [r7, #0]
 8001b5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	db0a      	blt.n	8001b7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	b2da      	uxtb	r2, r3
 8001b68:	490c      	ldr	r1, [pc, #48]	@ (8001b9c <__NVIC_SetPriority+0x4c>)
 8001b6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b6e:	0112      	lsls	r2, r2, #4
 8001b70:	b2d2      	uxtb	r2, r2
 8001b72:	440b      	add	r3, r1
 8001b74:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b78:	e00a      	b.n	8001b90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	b2da      	uxtb	r2, r3
 8001b7e:	4908      	ldr	r1, [pc, #32]	@ (8001ba0 <__NVIC_SetPriority+0x50>)
 8001b80:	79fb      	ldrb	r3, [r7, #7]
 8001b82:	f003 030f 	and.w	r3, r3, #15
 8001b86:	3b04      	subs	r3, #4
 8001b88:	0112      	lsls	r2, r2, #4
 8001b8a:	b2d2      	uxtb	r2, r2
 8001b8c:	440b      	add	r3, r1
 8001b8e:	761a      	strb	r2, [r3, #24]
}
 8001b90:	bf00      	nop
 8001b92:	370c      	adds	r7, #12
 8001b94:	46bd      	mov	sp, r7
 8001b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9a:	4770      	bx	lr
 8001b9c:	e000e100 	.word	0xe000e100
 8001ba0:	e000ed00 	.word	0xe000ed00

08001ba4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b089      	sub	sp, #36	@ 0x24
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	60f8      	str	r0, [r7, #12]
 8001bac:	60b9      	str	r1, [r7, #8]
 8001bae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	f003 0307 	and.w	r3, r3, #7
 8001bb6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bb8:	69fb      	ldr	r3, [r7, #28]
 8001bba:	f1c3 0307 	rsb	r3, r3, #7
 8001bbe:	2b04      	cmp	r3, #4
 8001bc0:	bf28      	it	cs
 8001bc2:	2304      	movcs	r3, #4
 8001bc4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bc6:	69fb      	ldr	r3, [r7, #28]
 8001bc8:	3304      	adds	r3, #4
 8001bca:	2b06      	cmp	r3, #6
 8001bcc:	d902      	bls.n	8001bd4 <NVIC_EncodePriority+0x30>
 8001bce:	69fb      	ldr	r3, [r7, #28]
 8001bd0:	3b03      	subs	r3, #3
 8001bd2:	e000      	b.n	8001bd6 <NVIC_EncodePriority+0x32>
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bd8:	f04f 32ff 	mov.w	r2, #4294967295
 8001bdc:	69bb      	ldr	r3, [r7, #24]
 8001bde:	fa02 f303 	lsl.w	r3, r2, r3
 8001be2:	43da      	mvns	r2, r3
 8001be4:	68bb      	ldr	r3, [r7, #8]
 8001be6:	401a      	ands	r2, r3
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bec:	f04f 31ff 	mov.w	r1, #4294967295
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	fa01 f303 	lsl.w	r3, r1, r3
 8001bf6:	43d9      	mvns	r1, r3
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bfc:	4313      	orrs	r3, r2
         );
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	3724      	adds	r7, #36	@ 0x24
 8001c02:	46bd      	mov	sp, r7
 8001c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c08:	4770      	bx	lr
	...

08001c0c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8001c10:	f3bf 8f4f 	dsb	sy
}
 8001c14:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001c16:	4b06      	ldr	r3, [pc, #24]	@ (8001c30 <__NVIC_SystemReset+0x24>)
 8001c18:	68db      	ldr	r3, [r3, #12]
 8001c1a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001c1e:	4904      	ldr	r1, [pc, #16]	@ (8001c30 <__NVIC_SystemReset+0x24>)
 8001c20:	4b04      	ldr	r3, [pc, #16]	@ (8001c34 <__NVIC_SystemReset+0x28>)
 8001c22:	4313      	orrs	r3, r2
 8001c24:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001c26:	f3bf 8f4f 	dsb	sy
}
 8001c2a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001c2c:	bf00      	nop
 8001c2e:	e7fd      	b.n	8001c2c <__NVIC_SystemReset+0x20>
 8001c30:	e000ed00 	.word	0xe000ed00
 8001c34:	05fa0004 	.word	0x05fa0004

08001c38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b082      	sub	sp, #8
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	3b01      	subs	r3, #1
 8001c44:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001c48:	d301      	bcc.n	8001c4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e00f      	b.n	8001c6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c4e:	4a0a      	ldr	r2, [pc, #40]	@ (8001c78 <SysTick_Config+0x40>)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	3b01      	subs	r3, #1
 8001c54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c56:	210f      	movs	r1, #15
 8001c58:	f04f 30ff 	mov.w	r0, #4294967295
 8001c5c:	f7ff ff78 	bl	8001b50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c60:	4b05      	ldr	r3, [pc, #20]	@ (8001c78 <SysTick_Config+0x40>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c66:	4b04      	ldr	r3, [pc, #16]	@ (8001c78 <SysTick_Config+0x40>)
 8001c68:	2207      	movs	r2, #7
 8001c6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c6c:	2300      	movs	r3, #0
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	3708      	adds	r7, #8
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	e000e010 	.word	0xe000e010

08001c7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b082      	sub	sp, #8
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c84:	6878      	ldr	r0, [r7, #4]
 8001c86:	f7ff ff13 	bl	8001ab0 <__NVIC_SetPriorityGrouping>
}
 8001c8a:	bf00      	nop
 8001c8c:	3708      	adds	r7, #8
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}

08001c92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c92:	b580      	push	{r7, lr}
 8001c94:	b086      	sub	sp, #24
 8001c96:	af00      	add	r7, sp, #0
 8001c98:	4603      	mov	r3, r0
 8001c9a:	60b9      	str	r1, [r7, #8]
 8001c9c:	607a      	str	r2, [r7, #4]
 8001c9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ca4:	f7ff ff28 	bl	8001af8 <__NVIC_GetPriorityGrouping>
 8001ca8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001caa:	687a      	ldr	r2, [r7, #4]
 8001cac:	68b9      	ldr	r1, [r7, #8]
 8001cae:	6978      	ldr	r0, [r7, #20]
 8001cb0:	f7ff ff78 	bl	8001ba4 <NVIC_EncodePriority>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cba:	4611      	mov	r1, r2
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f7ff ff47 	bl	8001b50 <__NVIC_SetPriority>
}
 8001cc2:	bf00      	nop
 8001cc4:	3718      	adds	r7, #24
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}

08001cca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cca:	b580      	push	{r7, lr}
 8001ccc:	b082      	sub	sp, #8
 8001cce:	af00      	add	r7, sp, #0
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f7ff ff1b 	bl	8001b14 <__NVIC_EnableIRQ>
}
 8001cde:	bf00      	nop
 8001ce0:	3708      	adds	r7, #8
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}

08001ce6 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8001ce6:	b580      	push	{r7, lr}
 8001ce8:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8001cea:	f7ff ff8f 	bl	8001c0c <__NVIC_SystemReset>

08001cee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cee:	b580      	push	{r7, lr}
 8001cf0:	b082      	sub	sp, #8
 8001cf2:	af00      	add	r7, sp, #0
 8001cf4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cf6:	6878      	ldr	r0, [r7, #4]
 8001cf8:	f7ff ff9e 	bl	8001c38 <SysTick_Config>
 8001cfc:	4603      	mov	r3, r0
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	3708      	adds	r7, #8
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}
	...

08001d08 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b086      	sub	sp, #24
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001d10:	2300      	movs	r3, #0
 8001d12:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001d14:	f7ff fe9c 	bl	8001a50 <HAL_GetTick>
 8001d18:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d101      	bne.n	8001d24 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001d20:	2301      	movs	r3, #1
 8001d22:	e099      	b.n	8001e58 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2202      	movs	r2, #2
 8001d28:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2200      	movs	r2, #0
 8001d30:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	681a      	ldr	r2, [r3, #0]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f022 0201 	bic.w	r2, r2, #1
 8001d42:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d44:	e00f      	b.n	8001d66 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001d46:	f7ff fe83 	bl	8001a50 <HAL_GetTick>
 8001d4a:	4602      	mov	r2, r0
 8001d4c:	693b      	ldr	r3, [r7, #16]
 8001d4e:	1ad3      	subs	r3, r2, r3
 8001d50:	2b05      	cmp	r3, #5
 8001d52:	d908      	bls.n	8001d66 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2220      	movs	r2, #32
 8001d58:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2203      	movs	r2, #3
 8001d5e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001d62:	2303      	movs	r3, #3
 8001d64:	e078      	b.n	8001e58 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f003 0301 	and.w	r3, r3, #1
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d1e8      	bne.n	8001d46 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001d7c:	697a      	ldr	r2, [r7, #20]
 8001d7e:	4b38      	ldr	r3, [pc, #224]	@ (8001e60 <HAL_DMA_Init+0x158>)
 8001d80:	4013      	ands	r3, r2
 8001d82:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	685a      	ldr	r2, [r3, #4]
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	689b      	ldr	r3, [r3, #8]
 8001d8c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d92:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	691b      	ldr	r3, [r3, #16]
 8001d98:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d9e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	699b      	ldr	r3, [r3, #24]
 8001da4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001daa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6a1b      	ldr	r3, [r3, #32]
 8001db0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001db2:	697a      	ldr	r2, [r7, #20]
 8001db4:	4313      	orrs	r3, r2
 8001db6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dbc:	2b04      	cmp	r3, #4
 8001dbe:	d107      	bne.n	8001dd0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	697a      	ldr	r2, [r7, #20]
 8001dcc:	4313      	orrs	r3, r2
 8001dce:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	697a      	ldr	r2, [r7, #20]
 8001dd6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	695b      	ldr	r3, [r3, #20]
 8001dde:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	f023 0307 	bic.w	r3, r3, #7
 8001de6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dec:	697a      	ldr	r2, [r7, #20]
 8001dee:	4313      	orrs	r3, r2
 8001df0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001df6:	2b04      	cmp	r3, #4
 8001df8:	d117      	bne.n	8001e2a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dfe:	697a      	ldr	r2, [r7, #20]
 8001e00:	4313      	orrs	r3, r2
 8001e02:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d00e      	beq.n	8001e2a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001e0c:	6878      	ldr	r0, [r7, #4]
 8001e0e:	f000 fadf 	bl	80023d0 <DMA_CheckFifoParam>
 8001e12:	4603      	mov	r3, r0
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d008      	beq.n	8001e2a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2240      	movs	r2, #64	@ 0x40
 8001e1c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2201      	movs	r2, #1
 8001e22:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001e26:	2301      	movs	r3, #1
 8001e28:	e016      	b.n	8001e58 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	697a      	ldr	r2, [r7, #20]
 8001e30:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001e32:	6878      	ldr	r0, [r7, #4]
 8001e34:	f000 fa96 	bl	8002364 <DMA_CalcBaseAndBitshift>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e40:	223f      	movs	r2, #63	@ 0x3f
 8001e42:	409a      	lsls	r2, r3
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2201      	movs	r2, #1
 8001e52:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001e56:	2300      	movs	r3, #0
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	3718      	adds	r7, #24
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}
 8001e60:	f010803f 	.word	0xf010803f

08001e64 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b086      	sub	sp, #24
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	60f8      	str	r0, [r7, #12]
 8001e6c:	60b9      	str	r1, [r7, #8]
 8001e6e:	607a      	str	r2, [r7, #4]
 8001e70:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001e72:	2300      	movs	r3, #0
 8001e74:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e7a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001e82:	2b01      	cmp	r3, #1
 8001e84:	d101      	bne.n	8001e8a <HAL_DMA_Start_IT+0x26>
 8001e86:	2302      	movs	r3, #2
 8001e88:	e040      	b.n	8001f0c <HAL_DMA_Start_IT+0xa8>
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001e98:	b2db      	uxtb	r3, r3
 8001e9a:	2b01      	cmp	r3, #1
 8001e9c:	d12f      	bne.n	8001efe <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	2202      	movs	r2, #2
 8001ea2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	687a      	ldr	r2, [r7, #4]
 8001eb0:	68b9      	ldr	r1, [r7, #8]
 8001eb2:	68f8      	ldr	r0, [r7, #12]
 8001eb4:	f000 fa28 	bl	8002308 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ebc:	223f      	movs	r2, #63	@ 0x3f
 8001ebe:	409a      	lsls	r2, r3
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	681a      	ldr	r2, [r3, #0]
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f042 0216 	orr.w	r2, r2, #22
 8001ed2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d007      	beq.n	8001eec <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	681a      	ldr	r2, [r3, #0]
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f042 0208 	orr.w	r2, r2, #8
 8001eea:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	681a      	ldr	r2, [r3, #0]
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f042 0201 	orr.w	r2, r2, #1
 8001efa:	601a      	str	r2, [r3, #0]
 8001efc:	e005      	b.n	8001f0a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	2200      	movs	r2, #0
 8001f02:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001f06:	2302      	movs	r3, #2
 8001f08:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001f0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	3718      	adds	r7, #24
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}

08001f14 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b084      	sub	sp, #16
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f20:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001f22:	f7ff fd95 	bl	8001a50 <HAL_GetTick>
 8001f26:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001f2e:	b2db      	uxtb	r3, r3
 8001f30:	2b02      	cmp	r3, #2
 8001f32:	d008      	beq.n	8001f46 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2280      	movs	r2, #128	@ 0x80
 8001f38:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001f42:	2301      	movs	r3, #1
 8001f44:	e052      	b.n	8001fec <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	681a      	ldr	r2, [r3, #0]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f022 0216 	bic.w	r2, r2, #22
 8001f54:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	695a      	ldr	r2, [r3, #20]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001f64:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d103      	bne.n	8001f76 <HAL_DMA_Abort+0x62>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d007      	beq.n	8001f86 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	681a      	ldr	r2, [r3, #0]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f022 0208 	bic.w	r2, r2, #8
 8001f84:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f022 0201 	bic.w	r2, r2, #1
 8001f94:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f96:	e013      	b.n	8001fc0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001f98:	f7ff fd5a 	bl	8001a50 <HAL_GetTick>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	68bb      	ldr	r3, [r7, #8]
 8001fa0:	1ad3      	subs	r3, r2, r3
 8001fa2:	2b05      	cmp	r3, #5
 8001fa4:	d90c      	bls.n	8001fc0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2220      	movs	r2, #32
 8001faa:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2203      	movs	r2, #3
 8001fb0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001fbc:	2303      	movs	r3, #3
 8001fbe:	e015      	b.n	8001fec <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f003 0301 	and.w	r3, r3, #1
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d1e4      	bne.n	8001f98 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fd2:	223f      	movs	r2, #63	@ 0x3f
 8001fd4:	409a      	lsls	r2, r3
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2201      	movs	r2, #1
 8001fde:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001fea:	2300      	movs	r3, #0
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	3710      	adds	r7, #16
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}

08001ff4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b086      	sub	sp, #24
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002000:	4b8e      	ldr	r3, [pc, #568]	@ (800223c <HAL_DMA_IRQHandler+0x248>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a8e      	ldr	r2, [pc, #568]	@ (8002240 <HAL_DMA_IRQHandler+0x24c>)
 8002006:	fba2 2303 	umull	r2, r3, r2, r3
 800200a:	0a9b      	lsrs	r3, r3, #10
 800200c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002012:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002014:	693b      	ldr	r3, [r7, #16]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800201e:	2208      	movs	r2, #8
 8002020:	409a      	lsls	r2, r3
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	4013      	ands	r3, r2
 8002026:	2b00      	cmp	r3, #0
 8002028:	d01a      	beq.n	8002060 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f003 0304 	and.w	r3, r3, #4
 8002034:	2b00      	cmp	r3, #0
 8002036:	d013      	beq.n	8002060 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	681a      	ldr	r2, [r3, #0]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f022 0204 	bic.w	r2, r2, #4
 8002046:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800204c:	2208      	movs	r2, #8
 800204e:	409a      	lsls	r2, r3
 8002050:	693b      	ldr	r3, [r7, #16]
 8002052:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002058:	f043 0201 	orr.w	r2, r3, #1
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002064:	2201      	movs	r2, #1
 8002066:	409a      	lsls	r2, r3
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	4013      	ands	r3, r2
 800206c:	2b00      	cmp	r3, #0
 800206e:	d012      	beq.n	8002096 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	695b      	ldr	r3, [r3, #20]
 8002076:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800207a:	2b00      	cmp	r3, #0
 800207c:	d00b      	beq.n	8002096 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002082:	2201      	movs	r2, #1
 8002084:	409a      	lsls	r2, r3
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800208e:	f043 0202 	orr.w	r2, r3, #2
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800209a:	2204      	movs	r2, #4
 800209c:	409a      	lsls	r2, r3
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	4013      	ands	r3, r2
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d012      	beq.n	80020cc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f003 0302 	and.w	r3, r3, #2
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d00b      	beq.n	80020cc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020b8:	2204      	movs	r2, #4
 80020ba:	409a      	lsls	r2, r3
 80020bc:	693b      	ldr	r3, [r7, #16]
 80020be:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020c4:	f043 0204 	orr.w	r2, r3, #4
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020d0:	2210      	movs	r2, #16
 80020d2:	409a      	lsls	r2, r3
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	4013      	ands	r3, r2
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d043      	beq.n	8002164 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f003 0308 	and.w	r3, r3, #8
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d03c      	beq.n	8002164 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020ee:	2210      	movs	r2, #16
 80020f0:	409a      	lsls	r2, r3
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002100:	2b00      	cmp	r3, #0
 8002102:	d018      	beq.n	8002136 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800210e:	2b00      	cmp	r3, #0
 8002110:	d108      	bne.n	8002124 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002116:	2b00      	cmp	r3, #0
 8002118:	d024      	beq.n	8002164 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800211e:	6878      	ldr	r0, [r7, #4]
 8002120:	4798      	blx	r3
 8002122:	e01f      	b.n	8002164 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002128:	2b00      	cmp	r3, #0
 800212a:	d01b      	beq.n	8002164 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002130:	6878      	ldr	r0, [r7, #4]
 8002132:	4798      	blx	r3
 8002134:	e016      	b.n	8002164 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002140:	2b00      	cmp	r3, #0
 8002142:	d107      	bne.n	8002154 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	681a      	ldr	r2, [r3, #0]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f022 0208 	bic.w	r2, r2, #8
 8002152:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002158:	2b00      	cmp	r3, #0
 800215a:	d003      	beq.n	8002164 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002160:	6878      	ldr	r0, [r7, #4]
 8002162:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002168:	2220      	movs	r2, #32
 800216a:	409a      	lsls	r2, r3
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	4013      	ands	r3, r2
 8002170:	2b00      	cmp	r3, #0
 8002172:	f000 808f 	beq.w	8002294 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f003 0310 	and.w	r3, r3, #16
 8002180:	2b00      	cmp	r3, #0
 8002182:	f000 8087 	beq.w	8002294 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800218a:	2220      	movs	r2, #32
 800218c:	409a      	lsls	r2, r3
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002198:	b2db      	uxtb	r3, r3
 800219a:	2b05      	cmp	r3, #5
 800219c:	d136      	bne.n	800220c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f022 0216 	bic.w	r2, r2, #22
 80021ac:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	695a      	ldr	r2, [r3, #20]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80021bc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d103      	bne.n	80021ce <HAL_DMA_IRQHandler+0x1da>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d007      	beq.n	80021de <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	681a      	ldr	r2, [r3, #0]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f022 0208 	bic.w	r2, r2, #8
 80021dc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021e2:	223f      	movs	r2, #63	@ 0x3f
 80021e4:	409a      	lsls	r2, r3
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2201      	movs	r2, #1
 80021ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2200      	movs	r2, #0
 80021f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d07e      	beq.n	8002300 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002206:	6878      	ldr	r0, [r7, #4]
 8002208:	4798      	blx	r3
        }
        return;
 800220a:	e079      	b.n	8002300 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002216:	2b00      	cmp	r3, #0
 8002218:	d01d      	beq.n	8002256 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002224:	2b00      	cmp	r3, #0
 8002226:	d10d      	bne.n	8002244 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800222c:	2b00      	cmp	r3, #0
 800222e:	d031      	beq.n	8002294 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002234:	6878      	ldr	r0, [r7, #4]
 8002236:	4798      	blx	r3
 8002238:	e02c      	b.n	8002294 <HAL_DMA_IRQHandler+0x2a0>
 800223a:	bf00      	nop
 800223c:	20000000 	.word	0x20000000
 8002240:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002248:	2b00      	cmp	r3, #0
 800224a:	d023      	beq.n	8002294 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002250:	6878      	ldr	r0, [r7, #4]
 8002252:	4798      	blx	r3
 8002254:	e01e      	b.n	8002294 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002260:	2b00      	cmp	r3, #0
 8002262:	d10f      	bne.n	8002284 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	681a      	ldr	r2, [r3, #0]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f022 0210 	bic.w	r2, r2, #16
 8002272:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2201      	movs	r2, #1
 8002278:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2200      	movs	r2, #0
 8002280:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002288:	2b00      	cmp	r3, #0
 800228a:	d003      	beq.n	8002294 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002290:	6878      	ldr	r0, [r7, #4]
 8002292:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002298:	2b00      	cmp	r3, #0
 800229a:	d032      	beq.n	8002302 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022a0:	f003 0301 	and.w	r3, r3, #1
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d022      	beq.n	80022ee <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2205      	movs	r2, #5
 80022ac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	681a      	ldr	r2, [r3, #0]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f022 0201 	bic.w	r2, r2, #1
 80022be:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	3301      	adds	r3, #1
 80022c4:	60bb      	str	r3, [r7, #8]
 80022c6:	697a      	ldr	r2, [r7, #20]
 80022c8:	429a      	cmp	r2, r3
 80022ca:	d307      	bcc.n	80022dc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f003 0301 	and.w	r3, r3, #1
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d1f2      	bne.n	80022c0 <HAL_DMA_IRQHandler+0x2cc>
 80022da:	e000      	b.n	80022de <HAL_DMA_IRQHandler+0x2ea>
          break;
 80022dc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2201      	movs	r2, #1
 80022e2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2200      	movs	r2, #0
 80022ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d005      	beq.n	8002302 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022fa:	6878      	ldr	r0, [r7, #4]
 80022fc:	4798      	blx	r3
 80022fe:	e000      	b.n	8002302 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002300:	bf00      	nop
    }
  }
}
 8002302:	3718      	adds	r7, #24
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}

08002308 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002308:	b480      	push	{r7}
 800230a:	b085      	sub	sp, #20
 800230c:	af00      	add	r7, sp, #0
 800230e:	60f8      	str	r0, [r7, #12]
 8002310:	60b9      	str	r1, [r7, #8]
 8002312:	607a      	str	r2, [r7, #4]
 8002314:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	681a      	ldr	r2, [r3, #0]
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002324:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	683a      	ldr	r2, [r7, #0]
 800232c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	689b      	ldr	r3, [r3, #8]
 8002332:	2b40      	cmp	r3, #64	@ 0x40
 8002334:	d108      	bne.n	8002348 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	687a      	ldr	r2, [r7, #4]
 800233c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	68ba      	ldr	r2, [r7, #8]
 8002344:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002346:	e007      	b.n	8002358 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	68ba      	ldr	r2, [r7, #8]
 800234e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	687a      	ldr	r2, [r7, #4]
 8002356:	60da      	str	r2, [r3, #12]
}
 8002358:	bf00      	nop
 800235a:	3714      	adds	r7, #20
 800235c:	46bd      	mov	sp, r7
 800235e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002362:	4770      	bx	lr

08002364 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002364:	b480      	push	{r7}
 8002366:	b085      	sub	sp, #20
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	b2db      	uxtb	r3, r3
 8002372:	3b10      	subs	r3, #16
 8002374:	4a14      	ldr	r2, [pc, #80]	@ (80023c8 <DMA_CalcBaseAndBitshift+0x64>)
 8002376:	fba2 2303 	umull	r2, r3, r2, r3
 800237a:	091b      	lsrs	r3, r3, #4
 800237c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800237e:	4a13      	ldr	r2, [pc, #76]	@ (80023cc <DMA_CalcBaseAndBitshift+0x68>)
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	4413      	add	r3, r2
 8002384:	781b      	ldrb	r3, [r3, #0]
 8002386:	461a      	mov	r2, r3
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	2b03      	cmp	r3, #3
 8002390:	d909      	bls.n	80023a6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800239a:	f023 0303 	bic.w	r3, r3, #3
 800239e:	1d1a      	adds	r2, r3, #4
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	659a      	str	r2, [r3, #88]	@ 0x58
 80023a4:	e007      	b.n	80023b6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80023ae:	f023 0303 	bic.w	r3, r3, #3
 80023b2:	687a      	ldr	r2, [r7, #4]
 80023b4:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	3714      	adds	r7, #20
 80023be:	46bd      	mov	sp, r7
 80023c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c4:	4770      	bx	lr
 80023c6:	bf00      	nop
 80023c8:	aaaaaaab 	.word	0xaaaaaaab
 80023cc:	0800b050 	.word	0x0800b050

080023d0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b085      	sub	sp, #20
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80023d8:	2300      	movs	r3, #0
 80023da:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023e0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	699b      	ldr	r3, [r3, #24]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d11f      	bne.n	800242a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80023ea:	68bb      	ldr	r3, [r7, #8]
 80023ec:	2b03      	cmp	r3, #3
 80023ee:	d856      	bhi.n	800249e <DMA_CheckFifoParam+0xce>
 80023f0:	a201      	add	r2, pc, #4	@ (adr r2, 80023f8 <DMA_CheckFifoParam+0x28>)
 80023f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023f6:	bf00      	nop
 80023f8:	08002409 	.word	0x08002409
 80023fc:	0800241b 	.word	0x0800241b
 8002400:	08002409 	.word	0x08002409
 8002404:	0800249f 	.word	0x0800249f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800240c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002410:	2b00      	cmp	r3, #0
 8002412:	d046      	beq.n	80024a2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002414:	2301      	movs	r3, #1
 8002416:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002418:	e043      	b.n	80024a2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800241e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002422:	d140      	bne.n	80024a6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002424:	2301      	movs	r3, #1
 8002426:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002428:	e03d      	b.n	80024a6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	699b      	ldr	r3, [r3, #24]
 800242e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002432:	d121      	bne.n	8002478 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	2b03      	cmp	r3, #3
 8002438:	d837      	bhi.n	80024aa <DMA_CheckFifoParam+0xda>
 800243a:	a201      	add	r2, pc, #4	@ (adr r2, 8002440 <DMA_CheckFifoParam+0x70>)
 800243c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002440:	08002451 	.word	0x08002451
 8002444:	08002457 	.word	0x08002457
 8002448:	08002451 	.word	0x08002451
 800244c:	08002469 	.word	0x08002469
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002450:	2301      	movs	r3, #1
 8002452:	73fb      	strb	r3, [r7, #15]
      break;
 8002454:	e030      	b.n	80024b8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800245a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800245e:	2b00      	cmp	r3, #0
 8002460:	d025      	beq.n	80024ae <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002462:	2301      	movs	r3, #1
 8002464:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002466:	e022      	b.n	80024ae <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800246c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002470:	d11f      	bne.n	80024b2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002472:	2301      	movs	r3, #1
 8002474:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002476:	e01c      	b.n	80024b2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002478:	68bb      	ldr	r3, [r7, #8]
 800247a:	2b02      	cmp	r3, #2
 800247c:	d903      	bls.n	8002486 <DMA_CheckFifoParam+0xb6>
 800247e:	68bb      	ldr	r3, [r7, #8]
 8002480:	2b03      	cmp	r3, #3
 8002482:	d003      	beq.n	800248c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002484:	e018      	b.n	80024b8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002486:	2301      	movs	r3, #1
 8002488:	73fb      	strb	r3, [r7, #15]
      break;
 800248a:	e015      	b.n	80024b8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002490:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002494:	2b00      	cmp	r3, #0
 8002496:	d00e      	beq.n	80024b6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002498:	2301      	movs	r3, #1
 800249a:	73fb      	strb	r3, [r7, #15]
      break;
 800249c:	e00b      	b.n	80024b6 <DMA_CheckFifoParam+0xe6>
      break;
 800249e:	bf00      	nop
 80024a0:	e00a      	b.n	80024b8 <DMA_CheckFifoParam+0xe8>
      break;
 80024a2:	bf00      	nop
 80024a4:	e008      	b.n	80024b8 <DMA_CheckFifoParam+0xe8>
      break;
 80024a6:	bf00      	nop
 80024a8:	e006      	b.n	80024b8 <DMA_CheckFifoParam+0xe8>
      break;
 80024aa:	bf00      	nop
 80024ac:	e004      	b.n	80024b8 <DMA_CheckFifoParam+0xe8>
      break;
 80024ae:	bf00      	nop
 80024b0:	e002      	b.n	80024b8 <DMA_CheckFifoParam+0xe8>
      break;   
 80024b2:	bf00      	nop
 80024b4:	e000      	b.n	80024b8 <DMA_CheckFifoParam+0xe8>
      break;
 80024b6:	bf00      	nop
    }
  } 
  
  return status; 
 80024b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	3714      	adds	r7, #20
 80024be:	46bd      	mov	sp, r7
 80024c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c4:	4770      	bx	lr
 80024c6:	bf00      	nop

080024c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b089      	sub	sp, #36	@ 0x24
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
 80024d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80024d2:	2300      	movs	r3, #0
 80024d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80024d6:	2300      	movs	r3, #0
 80024d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80024da:	2300      	movs	r3, #0
 80024dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024de:	2300      	movs	r3, #0
 80024e0:	61fb      	str	r3, [r7, #28]
 80024e2:	e177      	b.n	80027d4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80024e4:	2201      	movs	r2, #1
 80024e6:	69fb      	ldr	r3, [r7, #28]
 80024e8:	fa02 f303 	lsl.w	r3, r2, r3
 80024ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	697a      	ldr	r2, [r7, #20]
 80024f4:	4013      	ands	r3, r2
 80024f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80024f8:	693a      	ldr	r2, [r7, #16]
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	429a      	cmp	r2, r3
 80024fe:	f040 8166 	bne.w	80027ce <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	f003 0303 	and.w	r3, r3, #3
 800250a:	2b01      	cmp	r3, #1
 800250c:	d005      	beq.n	800251a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002516:	2b02      	cmp	r3, #2
 8002518:	d130      	bne.n	800257c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	689b      	ldr	r3, [r3, #8]
 800251e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002520:	69fb      	ldr	r3, [r7, #28]
 8002522:	005b      	lsls	r3, r3, #1
 8002524:	2203      	movs	r2, #3
 8002526:	fa02 f303 	lsl.w	r3, r2, r3
 800252a:	43db      	mvns	r3, r3
 800252c:	69ba      	ldr	r2, [r7, #24]
 800252e:	4013      	ands	r3, r2
 8002530:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	68da      	ldr	r2, [r3, #12]
 8002536:	69fb      	ldr	r3, [r7, #28]
 8002538:	005b      	lsls	r3, r3, #1
 800253a:	fa02 f303 	lsl.w	r3, r2, r3
 800253e:	69ba      	ldr	r2, [r7, #24]
 8002540:	4313      	orrs	r3, r2
 8002542:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	69ba      	ldr	r2, [r7, #24]
 8002548:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002550:	2201      	movs	r2, #1
 8002552:	69fb      	ldr	r3, [r7, #28]
 8002554:	fa02 f303 	lsl.w	r3, r2, r3
 8002558:	43db      	mvns	r3, r3
 800255a:	69ba      	ldr	r2, [r7, #24]
 800255c:	4013      	ands	r3, r2
 800255e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	091b      	lsrs	r3, r3, #4
 8002566:	f003 0201 	and.w	r2, r3, #1
 800256a:	69fb      	ldr	r3, [r7, #28]
 800256c:	fa02 f303 	lsl.w	r3, r2, r3
 8002570:	69ba      	ldr	r2, [r7, #24]
 8002572:	4313      	orrs	r3, r2
 8002574:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	69ba      	ldr	r2, [r7, #24]
 800257a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	f003 0303 	and.w	r3, r3, #3
 8002584:	2b03      	cmp	r3, #3
 8002586:	d017      	beq.n	80025b8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	68db      	ldr	r3, [r3, #12]
 800258c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800258e:	69fb      	ldr	r3, [r7, #28]
 8002590:	005b      	lsls	r3, r3, #1
 8002592:	2203      	movs	r2, #3
 8002594:	fa02 f303 	lsl.w	r3, r2, r3
 8002598:	43db      	mvns	r3, r3
 800259a:	69ba      	ldr	r2, [r7, #24]
 800259c:	4013      	ands	r3, r2
 800259e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	689a      	ldr	r2, [r3, #8]
 80025a4:	69fb      	ldr	r3, [r7, #28]
 80025a6:	005b      	lsls	r3, r3, #1
 80025a8:	fa02 f303 	lsl.w	r3, r2, r3
 80025ac:	69ba      	ldr	r2, [r7, #24]
 80025ae:	4313      	orrs	r3, r2
 80025b0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	69ba      	ldr	r2, [r7, #24]
 80025b6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	f003 0303 	and.w	r3, r3, #3
 80025c0:	2b02      	cmp	r3, #2
 80025c2:	d123      	bne.n	800260c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80025c4:	69fb      	ldr	r3, [r7, #28]
 80025c6:	08da      	lsrs	r2, r3, #3
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	3208      	adds	r2, #8
 80025cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80025d2:	69fb      	ldr	r3, [r7, #28]
 80025d4:	f003 0307 	and.w	r3, r3, #7
 80025d8:	009b      	lsls	r3, r3, #2
 80025da:	220f      	movs	r2, #15
 80025dc:	fa02 f303 	lsl.w	r3, r2, r3
 80025e0:	43db      	mvns	r3, r3
 80025e2:	69ba      	ldr	r2, [r7, #24]
 80025e4:	4013      	ands	r3, r2
 80025e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	691a      	ldr	r2, [r3, #16]
 80025ec:	69fb      	ldr	r3, [r7, #28]
 80025ee:	f003 0307 	and.w	r3, r3, #7
 80025f2:	009b      	lsls	r3, r3, #2
 80025f4:	fa02 f303 	lsl.w	r3, r2, r3
 80025f8:	69ba      	ldr	r2, [r7, #24]
 80025fa:	4313      	orrs	r3, r2
 80025fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80025fe:	69fb      	ldr	r3, [r7, #28]
 8002600:	08da      	lsrs	r2, r3, #3
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	3208      	adds	r2, #8
 8002606:	69b9      	ldr	r1, [r7, #24]
 8002608:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002612:	69fb      	ldr	r3, [r7, #28]
 8002614:	005b      	lsls	r3, r3, #1
 8002616:	2203      	movs	r2, #3
 8002618:	fa02 f303 	lsl.w	r3, r2, r3
 800261c:	43db      	mvns	r3, r3
 800261e:	69ba      	ldr	r2, [r7, #24]
 8002620:	4013      	ands	r3, r2
 8002622:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	f003 0203 	and.w	r2, r3, #3
 800262c:	69fb      	ldr	r3, [r7, #28]
 800262e:	005b      	lsls	r3, r3, #1
 8002630:	fa02 f303 	lsl.w	r3, r2, r3
 8002634:	69ba      	ldr	r2, [r7, #24]
 8002636:	4313      	orrs	r3, r2
 8002638:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	69ba      	ldr	r2, [r7, #24]
 800263e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002648:	2b00      	cmp	r3, #0
 800264a:	f000 80c0 	beq.w	80027ce <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800264e:	2300      	movs	r3, #0
 8002650:	60fb      	str	r3, [r7, #12]
 8002652:	4b66      	ldr	r3, [pc, #408]	@ (80027ec <HAL_GPIO_Init+0x324>)
 8002654:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002656:	4a65      	ldr	r2, [pc, #404]	@ (80027ec <HAL_GPIO_Init+0x324>)
 8002658:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800265c:	6453      	str	r3, [r2, #68]	@ 0x44
 800265e:	4b63      	ldr	r3, [pc, #396]	@ (80027ec <HAL_GPIO_Init+0x324>)
 8002660:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002662:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002666:	60fb      	str	r3, [r7, #12]
 8002668:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800266a:	4a61      	ldr	r2, [pc, #388]	@ (80027f0 <HAL_GPIO_Init+0x328>)
 800266c:	69fb      	ldr	r3, [r7, #28]
 800266e:	089b      	lsrs	r3, r3, #2
 8002670:	3302      	adds	r3, #2
 8002672:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002676:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002678:	69fb      	ldr	r3, [r7, #28]
 800267a:	f003 0303 	and.w	r3, r3, #3
 800267e:	009b      	lsls	r3, r3, #2
 8002680:	220f      	movs	r2, #15
 8002682:	fa02 f303 	lsl.w	r3, r2, r3
 8002686:	43db      	mvns	r3, r3
 8002688:	69ba      	ldr	r2, [r7, #24]
 800268a:	4013      	ands	r3, r2
 800268c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	4a58      	ldr	r2, [pc, #352]	@ (80027f4 <HAL_GPIO_Init+0x32c>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d037      	beq.n	8002706 <HAL_GPIO_Init+0x23e>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	4a57      	ldr	r2, [pc, #348]	@ (80027f8 <HAL_GPIO_Init+0x330>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d031      	beq.n	8002702 <HAL_GPIO_Init+0x23a>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	4a56      	ldr	r2, [pc, #344]	@ (80027fc <HAL_GPIO_Init+0x334>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d02b      	beq.n	80026fe <HAL_GPIO_Init+0x236>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	4a55      	ldr	r2, [pc, #340]	@ (8002800 <HAL_GPIO_Init+0x338>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d025      	beq.n	80026fa <HAL_GPIO_Init+0x232>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	4a54      	ldr	r2, [pc, #336]	@ (8002804 <HAL_GPIO_Init+0x33c>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d01f      	beq.n	80026f6 <HAL_GPIO_Init+0x22e>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	4a53      	ldr	r2, [pc, #332]	@ (8002808 <HAL_GPIO_Init+0x340>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d019      	beq.n	80026f2 <HAL_GPIO_Init+0x22a>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	4a52      	ldr	r2, [pc, #328]	@ (800280c <HAL_GPIO_Init+0x344>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d013      	beq.n	80026ee <HAL_GPIO_Init+0x226>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	4a51      	ldr	r2, [pc, #324]	@ (8002810 <HAL_GPIO_Init+0x348>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d00d      	beq.n	80026ea <HAL_GPIO_Init+0x222>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	4a50      	ldr	r2, [pc, #320]	@ (8002814 <HAL_GPIO_Init+0x34c>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d007      	beq.n	80026e6 <HAL_GPIO_Init+0x21e>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	4a4f      	ldr	r2, [pc, #316]	@ (8002818 <HAL_GPIO_Init+0x350>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d101      	bne.n	80026e2 <HAL_GPIO_Init+0x21a>
 80026de:	2309      	movs	r3, #9
 80026e0:	e012      	b.n	8002708 <HAL_GPIO_Init+0x240>
 80026e2:	230a      	movs	r3, #10
 80026e4:	e010      	b.n	8002708 <HAL_GPIO_Init+0x240>
 80026e6:	2308      	movs	r3, #8
 80026e8:	e00e      	b.n	8002708 <HAL_GPIO_Init+0x240>
 80026ea:	2307      	movs	r3, #7
 80026ec:	e00c      	b.n	8002708 <HAL_GPIO_Init+0x240>
 80026ee:	2306      	movs	r3, #6
 80026f0:	e00a      	b.n	8002708 <HAL_GPIO_Init+0x240>
 80026f2:	2305      	movs	r3, #5
 80026f4:	e008      	b.n	8002708 <HAL_GPIO_Init+0x240>
 80026f6:	2304      	movs	r3, #4
 80026f8:	e006      	b.n	8002708 <HAL_GPIO_Init+0x240>
 80026fa:	2303      	movs	r3, #3
 80026fc:	e004      	b.n	8002708 <HAL_GPIO_Init+0x240>
 80026fe:	2302      	movs	r3, #2
 8002700:	e002      	b.n	8002708 <HAL_GPIO_Init+0x240>
 8002702:	2301      	movs	r3, #1
 8002704:	e000      	b.n	8002708 <HAL_GPIO_Init+0x240>
 8002706:	2300      	movs	r3, #0
 8002708:	69fa      	ldr	r2, [r7, #28]
 800270a:	f002 0203 	and.w	r2, r2, #3
 800270e:	0092      	lsls	r2, r2, #2
 8002710:	4093      	lsls	r3, r2
 8002712:	69ba      	ldr	r2, [r7, #24]
 8002714:	4313      	orrs	r3, r2
 8002716:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002718:	4935      	ldr	r1, [pc, #212]	@ (80027f0 <HAL_GPIO_Init+0x328>)
 800271a:	69fb      	ldr	r3, [r7, #28]
 800271c:	089b      	lsrs	r3, r3, #2
 800271e:	3302      	adds	r3, #2
 8002720:	69ba      	ldr	r2, [r7, #24]
 8002722:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002726:	4b3d      	ldr	r3, [pc, #244]	@ (800281c <HAL_GPIO_Init+0x354>)
 8002728:	689b      	ldr	r3, [r3, #8]
 800272a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800272c:	693b      	ldr	r3, [r7, #16]
 800272e:	43db      	mvns	r3, r3
 8002730:	69ba      	ldr	r2, [r7, #24]
 8002732:	4013      	ands	r3, r2
 8002734:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800273e:	2b00      	cmp	r3, #0
 8002740:	d003      	beq.n	800274a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002742:	69ba      	ldr	r2, [r7, #24]
 8002744:	693b      	ldr	r3, [r7, #16]
 8002746:	4313      	orrs	r3, r2
 8002748:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800274a:	4a34      	ldr	r2, [pc, #208]	@ (800281c <HAL_GPIO_Init+0x354>)
 800274c:	69bb      	ldr	r3, [r7, #24]
 800274e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002750:	4b32      	ldr	r3, [pc, #200]	@ (800281c <HAL_GPIO_Init+0x354>)
 8002752:	68db      	ldr	r3, [r3, #12]
 8002754:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002756:	693b      	ldr	r3, [r7, #16]
 8002758:	43db      	mvns	r3, r3
 800275a:	69ba      	ldr	r2, [r7, #24]
 800275c:	4013      	ands	r3, r2
 800275e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002768:	2b00      	cmp	r3, #0
 800276a:	d003      	beq.n	8002774 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800276c:	69ba      	ldr	r2, [r7, #24]
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	4313      	orrs	r3, r2
 8002772:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002774:	4a29      	ldr	r2, [pc, #164]	@ (800281c <HAL_GPIO_Init+0x354>)
 8002776:	69bb      	ldr	r3, [r7, #24]
 8002778:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800277a:	4b28      	ldr	r3, [pc, #160]	@ (800281c <HAL_GPIO_Init+0x354>)
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002780:	693b      	ldr	r3, [r7, #16]
 8002782:	43db      	mvns	r3, r3
 8002784:	69ba      	ldr	r2, [r7, #24]
 8002786:	4013      	ands	r3, r2
 8002788:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002792:	2b00      	cmp	r3, #0
 8002794:	d003      	beq.n	800279e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002796:	69ba      	ldr	r2, [r7, #24]
 8002798:	693b      	ldr	r3, [r7, #16]
 800279a:	4313      	orrs	r3, r2
 800279c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800279e:	4a1f      	ldr	r2, [pc, #124]	@ (800281c <HAL_GPIO_Init+0x354>)
 80027a0:	69bb      	ldr	r3, [r7, #24]
 80027a2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80027a4:	4b1d      	ldr	r3, [pc, #116]	@ (800281c <HAL_GPIO_Init+0x354>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027aa:	693b      	ldr	r3, [r7, #16]
 80027ac:	43db      	mvns	r3, r3
 80027ae:	69ba      	ldr	r2, [r7, #24]
 80027b0:	4013      	ands	r3, r2
 80027b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d003      	beq.n	80027c8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80027c0:	69ba      	ldr	r2, [r7, #24]
 80027c2:	693b      	ldr	r3, [r7, #16]
 80027c4:	4313      	orrs	r3, r2
 80027c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80027c8:	4a14      	ldr	r2, [pc, #80]	@ (800281c <HAL_GPIO_Init+0x354>)
 80027ca:	69bb      	ldr	r3, [r7, #24]
 80027cc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027ce:	69fb      	ldr	r3, [r7, #28]
 80027d0:	3301      	adds	r3, #1
 80027d2:	61fb      	str	r3, [r7, #28]
 80027d4:	69fb      	ldr	r3, [r7, #28]
 80027d6:	2b0f      	cmp	r3, #15
 80027d8:	f67f ae84 	bls.w	80024e4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80027dc:	bf00      	nop
 80027de:	bf00      	nop
 80027e0:	3724      	adds	r7, #36	@ 0x24
 80027e2:	46bd      	mov	sp, r7
 80027e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e8:	4770      	bx	lr
 80027ea:	bf00      	nop
 80027ec:	40023800 	.word	0x40023800
 80027f0:	40013800 	.word	0x40013800
 80027f4:	40020000 	.word	0x40020000
 80027f8:	40020400 	.word	0x40020400
 80027fc:	40020800 	.word	0x40020800
 8002800:	40020c00 	.word	0x40020c00
 8002804:	40021000 	.word	0x40021000
 8002808:	40021400 	.word	0x40021400
 800280c:	40021800 	.word	0x40021800
 8002810:	40021c00 	.word	0x40021c00
 8002814:	40022000 	.word	0x40022000
 8002818:	40022400 	.word	0x40022400
 800281c:	40013c00 	.word	0x40013c00

08002820 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002820:	b480      	push	{r7}
 8002822:	b083      	sub	sp, #12
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
 8002828:	460b      	mov	r3, r1
 800282a:	807b      	strh	r3, [r7, #2]
 800282c:	4613      	mov	r3, r2
 800282e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002830:	787b      	ldrb	r3, [r7, #1]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d003      	beq.n	800283e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002836:	887a      	ldrh	r2, [r7, #2]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800283c:	e003      	b.n	8002846 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800283e:	887b      	ldrh	r3, [r7, #2]
 8002840:	041a      	lsls	r2, r3, #16
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	619a      	str	r2, [r3, #24]
}
 8002846:	bf00      	nop
 8002848:	370c      	adds	r7, #12
 800284a:	46bd      	mov	sp, r7
 800284c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002850:	4770      	bx	lr

08002852 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002852:	b480      	push	{r7}
 8002854:	b085      	sub	sp, #20
 8002856:	af00      	add	r7, sp, #0
 8002858:	6078      	str	r0, [r7, #4]
 800285a:	460b      	mov	r3, r1
 800285c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	695b      	ldr	r3, [r3, #20]
 8002862:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002864:	887a      	ldrh	r2, [r7, #2]
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	4013      	ands	r3, r2
 800286a:	041a      	lsls	r2, r3, #16
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	43d9      	mvns	r1, r3
 8002870:	887b      	ldrh	r3, [r7, #2]
 8002872:	400b      	ands	r3, r1
 8002874:	431a      	orrs	r2, r3
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	619a      	str	r2, [r3, #24]
}
 800287a:	bf00      	nop
 800287c:	3714      	adds	r7, #20
 800287e:	46bd      	mov	sp, r7
 8002880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002884:	4770      	bx	lr
	...

08002888 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b082      	sub	sp, #8
 800288c:	af00      	add	r7, sp, #0
 800288e:	4603      	mov	r3, r0
 8002890:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002892:	4b08      	ldr	r3, [pc, #32]	@ (80028b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002894:	695a      	ldr	r2, [r3, #20]
 8002896:	88fb      	ldrh	r3, [r7, #6]
 8002898:	4013      	ands	r3, r2
 800289a:	2b00      	cmp	r3, #0
 800289c:	d006      	beq.n	80028ac <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800289e:	4a05      	ldr	r2, [pc, #20]	@ (80028b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80028a0:	88fb      	ldrh	r3, [r7, #6]
 80028a2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80028a4:	88fb      	ldrh	r3, [r7, #6]
 80028a6:	4618      	mov	r0, r3
 80028a8:	f7fe fb20 	bl	8000eec <HAL_GPIO_EXTI_Callback>
  }
}
 80028ac:	bf00      	nop
 80028ae:	3708      	adds	r7, #8
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}
 80028b4:	40013c00 	.word	0x40013c00

080028b8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b086      	sub	sp, #24
 80028bc:	af02      	add	r7, sp, #8
 80028be:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d101      	bne.n	80028ca <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
 80028c8:	e101      	b.n	8002ace <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80028d6:	b2db      	uxtb	r3, r3
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d106      	bne.n	80028ea <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2200      	movs	r2, #0
 80028e0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80028e4:	6878      	ldr	r0, [r7, #4]
 80028e6:	f006 fe8d 	bl	8009604 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2203      	movs	r2, #3
 80028ee:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80028f8:	d102      	bne.n	8002900 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2200      	movs	r2, #0
 80028fe:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4618      	mov	r0, r3
 8002906:	f003 fa56 	bl	8005db6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6818      	ldr	r0, [r3, #0]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	7c1a      	ldrb	r2, [r3, #16]
 8002912:	f88d 2000 	strb.w	r2, [sp]
 8002916:	3304      	adds	r3, #4
 8002918:	cb0e      	ldmia	r3, {r1, r2, r3}
 800291a:	f003 f935 	bl	8005b88 <USB_CoreInit>
 800291e:	4603      	mov	r3, r0
 8002920:	2b00      	cmp	r3, #0
 8002922:	d005      	beq.n	8002930 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2202      	movs	r2, #2
 8002928:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800292c:	2301      	movs	r3, #1
 800292e:	e0ce      	b.n	8002ace <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	2100      	movs	r1, #0
 8002936:	4618      	mov	r0, r3
 8002938:	f003 fa4e 	bl	8005dd8 <USB_SetCurrentMode>
 800293c:	4603      	mov	r3, r0
 800293e:	2b00      	cmp	r3, #0
 8002940:	d005      	beq.n	800294e <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2202      	movs	r2, #2
 8002946:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	e0bf      	b.n	8002ace <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800294e:	2300      	movs	r3, #0
 8002950:	73fb      	strb	r3, [r7, #15]
 8002952:	e04a      	b.n	80029ea <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002954:	7bfa      	ldrb	r2, [r7, #15]
 8002956:	6879      	ldr	r1, [r7, #4]
 8002958:	4613      	mov	r3, r2
 800295a:	00db      	lsls	r3, r3, #3
 800295c:	4413      	add	r3, r2
 800295e:	009b      	lsls	r3, r3, #2
 8002960:	440b      	add	r3, r1
 8002962:	3315      	adds	r3, #21
 8002964:	2201      	movs	r2, #1
 8002966:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002968:	7bfa      	ldrb	r2, [r7, #15]
 800296a:	6879      	ldr	r1, [r7, #4]
 800296c:	4613      	mov	r3, r2
 800296e:	00db      	lsls	r3, r3, #3
 8002970:	4413      	add	r3, r2
 8002972:	009b      	lsls	r3, r3, #2
 8002974:	440b      	add	r3, r1
 8002976:	3314      	adds	r3, #20
 8002978:	7bfa      	ldrb	r2, [r7, #15]
 800297a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800297c:	7bfa      	ldrb	r2, [r7, #15]
 800297e:	7bfb      	ldrb	r3, [r7, #15]
 8002980:	b298      	uxth	r0, r3
 8002982:	6879      	ldr	r1, [r7, #4]
 8002984:	4613      	mov	r3, r2
 8002986:	00db      	lsls	r3, r3, #3
 8002988:	4413      	add	r3, r2
 800298a:	009b      	lsls	r3, r3, #2
 800298c:	440b      	add	r3, r1
 800298e:	332e      	adds	r3, #46	@ 0x2e
 8002990:	4602      	mov	r2, r0
 8002992:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002994:	7bfa      	ldrb	r2, [r7, #15]
 8002996:	6879      	ldr	r1, [r7, #4]
 8002998:	4613      	mov	r3, r2
 800299a:	00db      	lsls	r3, r3, #3
 800299c:	4413      	add	r3, r2
 800299e:	009b      	lsls	r3, r3, #2
 80029a0:	440b      	add	r3, r1
 80029a2:	3318      	adds	r3, #24
 80029a4:	2200      	movs	r2, #0
 80029a6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80029a8:	7bfa      	ldrb	r2, [r7, #15]
 80029aa:	6879      	ldr	r1, [r7, #4]
 80029ac:	4613      	mov	r3, r2
 80029ae:	00db      	lsls	r3, r3, #3
 80029b0:	4413      	add	r3, r2
 80029b2:	009b      	lsls	r3, r3, #2
 80029b4:	440b      	add	r3, r1
 80029b6:	331c      	adds	r3, #28
 80029b8:	2200      	movs	r2, #0
 80029ba:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80029bc:	7bfa      	ldrb	r2, [r7, #15]
 80029be:	6879      	ldr	r1, [r7, #4]
 80029c0:	4613      	mov	r3, r2
 80029c2:	00db      	lsls	r3, r3, #3
 80029c4:	4413      	add	r3, r2
 80029c6:	009b      	lsls	r3, r3, #2
 80029c8:	440b      	add	r3, r1
 80029ca:	3320      	adds	r3, #32
 80029cc:	2200      	movs	r2, #0
 80029ce:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80029d0:	7bfa      	ldrb	r2, [r7, #15]
 80029d2:	6879      	ldr	r1, [r7, #4]
 80029d4:	4613      	mov	r3, r2
 80029d6:	00db      	lsls	r3, r3, #3
 80029d8:	4413      	add	r3, r2
 80029da:	009b      	lsls	r3, r3, #2
 80029dc:	440b      	add	r3, r1
 80029de:	3324      	adds	r3, #36	@ 0x24
 80029e0:	2200      	movs	r2, #0
 80029e2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029e4:	7bfb      	ldrb	r3, [r7, #15]
 80029e6:	3301      	adds	r3, #1
 80029e8:	73fb      	strb	r3, [r7, #15]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	791b      	ldrb	r3, [r3, #4]
 80029ee:	7bfa      	ldrb	r2, [r7, #15]
 80029f0:	429a      	cmp	r2, r3
 80029f2:	d3af      	bcc.n	8002954 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029f4:	2300      	movs	r3, #0
 80029f6:	73fb      	strb	r3, [r7, #15]
 80029f8:	e044      	b.n	8002a84 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80029fa:	7bfa      	ldrb	r2, [r7, #15]
 80029fc:	6879      	ldr	r1, [r7, #4]
 80029fe:	4613      	mov	r3, r2
 8002a00:	00db      	lsls	r3, r3, #3
 8002a02:	4413      	add	r3, r2
 8002a04:	009b      	lsls	r3, r3, #2
 8002a06:	440b      	add	r3, r1
 8002a08:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002a10:	7bfa      	ldrb	r2, [r7, #15]
 8002a12:	6879      	ldr	r1, [r7, #4]
 8002a14:	4613      	mov	r3, r2
 8002a16:	00db      	lsls	r3, r3, #3
 8002a18:	4413      	add	r3, r2
 8002a1a:	009b      	lsls	r3, r3, #2
 8002a1c:	440b      	add	r3, r1
 8002a1e:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002a22:	7bfa      	ldrb	r2, [r7, #15]
 8002a24:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002a26:	7bfa      	ldrb	r2, [r7, #15]
 8002a28:	6879      	ldr	r1, [r7, #4]
 8002a2a:	4613      	mov	r3, r2
 8002a2c:	00db      	lsls	r3, r3, #3
 8002a2e:	4413      	add	r3, r2
 8002a30:	009b      	lsls	r3, r3, #2
 8002a32:	440b      	add	r3, r1
 8002a34:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002a38:	2200      	movs	r2, #0
 8002a3a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002a3c:	7bfa      	ldrb	r2, [r7, #15]
 8002a3e:	6879      	ldr	r1, [r7, #4]
 8002a40:	4613      	mov	r3, r2
 8002a42:	00db      	lsls	r3, r3, #3
 8002a44:	4413      	add	r3, r2
 8002a46:	009b      	lsls	r3, r3, #2
 8002a48:	440b      	add	r3, r1
 8002a4a:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002a4e:	2200      	movs	r2, #0
 8002a50:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002a52:	7bfa      	ldrb	r2, [r7, #15]
 8002a54:	6879      	ldr	r1, [r7, #4]
 8002a56:	4613      	mov	r3, r2
 8002a58:	00db      	lsls	r3, r3, #3
 8002a5a:	4413      	add	r3, r2
 8002a5c:	009b      	lsls	r3, r3, #2
 8002a5e:	440b      	add	r3, r1
 8002a60:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002a64:	2200      	movs	r2, #0
 8002a66:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002a68:	7bfa      	ldrb	r2, [r7, #15]
 8002a6a:	6879      	ldr	r1, [r7, #4]
 8002a6c:	4613      	mov	r3, r2
 8002a6e:	00db      	lsls	r3, r3, #3
 8002a70:	4413      	add	r3, r2
 8002a72:	009b      	lsls	r3, r3, #2
 8002a74:	440b      	add	r3, r1
 8002a76:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a7e:	7bfb      	ldrb	r3, [r7, #15]
 8002a80:	3301      	adds	r3, #1
 8002a82:	73fb      	strb	r3, [r7, #15]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	791b      	ldrb	r3, [r3, #4]
 8002a88:	7bfa      	ldrb	r2, [r7, #15]
 8002a8a:	429a      	cmp	r2, r3
 8002a8c:	d3b5      	bcc.n	80029fa <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6818      	ldr	r0, [r3, #0]
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	7c1a      	ldrb	r2, [r3, #16]
 8002a96:	f88d 2000 	strb.w	r2, [sp]
 8002a9a:	3304      	adds	r3, #4
 8002a9c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a9e:	f003 f9e7 	bl	8005e70 <USB_DevInit>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d005      	beq.n	8002ab4 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2202      	movs	r2, #2
 8002aac:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	e00c      	b.n	8002ace <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2201      	movs	r2, #1
 8002abe:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f004 fa2b 	bl	8006f22 <USB_DevDisconnect>

  return HAL_OK;
 8002acc:	2300      	movs	r3, #0
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	3710      	adds	r7, #16
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}

08002ad6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002ad6:	b580      	push	{r7, lr}
 8002ad8:	b084      	sub	sp, #16
 8002ada:	af00      	add	r7, sp, #0
 8002adc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002aea:	2b01      	cmp	r3, #1
 8002aec:	d101      	bne.n	8002af2 <HAL_PCD_Start+0x1c>
 8002aee:	2302      	movs	r3, #2
 8002af0:	e022      	b.n	8002b38 <HAL_PCD_Start+0x62>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2201      	movs	r2, #1
 8002af6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	68db      	ldr	r3, [r3, #12]
 8002afe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d009      	beq.n	8002b1a <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002b0a:	2b01      	cmp	r3, #1
 8002b0c:	d105      	bne.n	8002b1a <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b12:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f003 f938 	bl	8005d94 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f004 f9d9 	bl	8006ee0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2200      	movs	r2, #0
 8002b32:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002b36:	2300      	movs	r3, #0
}
 8002b38:	4618      	mov	r0, r3
 8002b3a:	3710      	adds	r7, #16
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bd80      	pop	{r7, pc}

08002b40 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002b40:	b590      	push	{r4, r7, lr}
 8002b42:	b08d      	sub	sp, #52	@ 0x34
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b4e:	6a3b      	ldr	r3, [r7, #32]
 8002b50:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4618      	mov	r0, r3
 8002b58:	f004 fa97 	bl	800708a <USB_GetMode>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	f040 848c 	bne.w	800347c <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f004 f9fb 	bl	8006f64 <USB_ReadInterrupts>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	f000 8482 	beq.w	800347a <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002b76:	69fb      	ldr	r3, [r7, #28]
 8002b78:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002b7c:	689b      	ldr	r3, [r3, #8]
 8002b7e:	0a1b      	lsrs	r3, r3, #8
 8002b80:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f004 f9e8 	bl	8006f64 <USB_ReadInterrupts>
 8002b94:	4603      	mov	r3, r0
 8002b96:	f003 0302 	and.w	r3, r3, #2
 8002b9a:	2b02      	cmp	r3, #2
 8002b9c:	d107      	bne.n	8002bae <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	695a      	ldr	r2, [r3, #20]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f002 0202 	and.w	r2, r2, #2
 8002bac:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f004 f9d6 	bl	8006f64 <USB_ReadInterrupts>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	f003 0310 	and.w	r3, r3, #16
 8002bbe:	2b10      	cmp	r3, #16
 8002bc0:	d161      	bne.n	8002c86 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	699a      	ldr	r2, [r3, #24]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f022 0210 	bic.w	r2, r2, #16
 8002bd0:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002bd2:	6a3b      	ldr	r3, [r7, #32]
 8002bd4:	6a1b      	ldr	r3, [r3, #32]
 8002bd6:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002bd8:	69bb      	ldr	r3, [r7, #24]
 8002bda:	f003 020f 	and.w	r2, r3, #15
 8002bde:	4613      	mov	r3, r2
 8002be0:	00db      	lsls	r3, r3, #3
 8002be2:	4413      	add	r3, r2
 8002be4:	009b      	lsls	r3, r3, #2
 8002be6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002bea:	687a      	ldr	r2, [r7, #4]
 8002bec:	4413      	add	r3, r2
 8002bee:	3304      	adds	r3, #4
 8002bf0:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002bf2:	69bb      	ldr	r3, [r7, #24]
 8002bf4:	0c5b      	lsrs	r3, r3, #17
 8002bf6:	f003 030f 	and.w	r3, r3, #15
 8002bfa:	2b02      	cmp	r3, #2
 8002bfc:	d124      	bne.n	8002c48 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002bfe:	69ba      	ldr	r2, [r7, #24]
 8002c00:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8002c04:	4013      	ands	r3, r2
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d035      	beq.n	8002c76 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002c0a:	697b      	ldr	r3, [r7, #20]
 8002c0c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002c0e:	69bb      	ldr	r3, [r7, #24]
 8002c10:	091b      	lsrs	r3, r3, #4
 8002c12:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002c14:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002c18:	b29b      	uxth	r3, r3
 8002c1a:	461a      	mov	r2, r3
 8002c1c:	6a38      	ldr	r0, [r7, #32]
 8002c1e:	f004 f80d 	bl	8006c3c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002c22:	697b      	ldr	r3, [r7, #20]
 8002c24:	68da      	ldr	r2, [r3, #12]
 8002c26:	69bb      	ldr	r3, [r7, #24]
 8002c28:	091b      	lsrs	r3, r3, #4
 8002c2a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002c2e:	441a      	add	r2, r3
 8002c30:	697b      	ldr	r3, [r7, #20]
 8002c32:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002c34:	697b      	ldr	r3, [r7, #20]
 8002c36:	695a      	ldr	r2, [r3, #20]
 8002c38:	69bb      	ldr	r3, [r7, #24]
 8002c3a:	091b      	lsrs	r3, r3, #4
 8002c3c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002c40:	441a      	add	r2, r3
 8002c42:	697b      	ldr	r3, [r7, #20]
 8002c44:	615a      	str	r2, [r3, #20]
 8002c46:	e016      	b.n	8002c76 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002c48:	69bb      	ldr	r3, [r7, #24]
 8002c4a:	0c5b      	lsrs	r3, r3, #17
 8002c4c:	f003 030f 	and.w	r3, r3, #15
 8002c50:	2b06      	cmp	r3, #6
 8002c52:	d110      	bne.n	8002c76 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002c5a:	2208      	movs	r2, #8
 8002c5c:	4619      	mov	r1, r3
 8002c5e:	6a38      	ldr	r0, [r7, #32]
 8002c60:	f003 ffec 	bl	8006c3c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002c64:	697b      	ldr	r3, [r7, #20]
 8002c66:	695a      	ldr	r2, [r3, #20]
 8002c68:	69bb      	ldr	r3, [r7, #24]
 8002c6a:	091b      	lsrs	r3, r3, #4
 8002c6c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002c70:	441a      	add	r2, r3
 8002c72:	697b      	ldr	r3, [r7, #20]
 8002c74:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	699a      	ldr	r2, [r3, #24]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f042 0210 	orr.w	r2, r2, #16
 8002c84:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f004 f96a 	bl	8006f64 <USB_ReadInterrupts>
 8002c90:	4603      	mov	r3, r0
 8002c92:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002c96:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002c9a:	f040 80a7 	bne.w	8002dec <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f004 f96f 	bl	8006f8a <USB_ReadDevAllOutEpInterrupt>
 8002cac:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8002cae:	e099      	b.n	8002de4 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002cb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cb2:	f003 0301 	and.w	r3, r3, #1
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	f000 808e 	beq.w	8002dd8 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002cc2:	b2d2      	uxtb	r2, r2
 8002cc4:	4611      	mov	r1, r2
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f004 f993 	bl	8006ff2 <USB_ReadDevOutEPInterrupt>
 8002ccc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	f003 0301 	and.w	r3, r3, #1
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d00c      	beq.n	8002cf2 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002cd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cda:	015a      	lsls	r2, r3, #5
 8002cdc:	69fb      	ldr	r3, [r7, #28]
 8002cde:	4413      	add	r3, r2
 8002ce0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002ce4:	461a      	mov	r2, r3
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002cea:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002cec:	6878      	ldr	r0, [r7, #4]
 8002cee:	f000 fea1 	bl	8003a34 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	f003 0308 	and.w	r3, r3, #8
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d00c      	beq.n	8002d16 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002cfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cfe:	015a      	lsls	r2, r3, #5
 8002d00:	69fb      	ldr	r3, [r7, #28]
 8002d02:	4413      	add	r3, r2
 8002d04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002d08:	461a      	mov	r2, r3
 8002d0a:	2308      	movs	r3, #8
 8002d0c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002d0e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002d10:	6878      	ldr	r0, [r7, #4]
 8002d12:	f000 ff77 	bl	8003c04 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	f003 0310 	and.w	r3, r3, #16
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d008      	beq.n	8002d32 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002d20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d22:	015a      	lsls	r2, r3, #5
 8002d24:	69fb      	ldr	r3, [r7, #28]
 8002d26:	4413      	add	r3, r2
 8002d28:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002d2c:	461a      	mov	r2, r3
 8002d2e:	2310      	movs	r3, #16
 8002d30:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	f003 0302 	and.w	r3, r3, #2
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d030      	beq.n	8002d9e <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002d3c:	6a3b      	ldr	r3, [r7, #32]
 8002d3e:	695b      	ldr	r3, [r3, #20]
 8002d40:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d44:	2b80      	cmp	r3, #128	@ 0x80
 8002d46:	d109      	bne.n	8002d5c <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002d48:	69fb      	ldr	r3, [r7, #28]
 8002d4a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	69fa      	ldr	r2, [r7, #28]
 8002d52:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002d56:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002d5a:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002d5c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d5e:	4613      	mov	r3, r2
 8002d60:	00db      	lsls	r3, r3, #3
 8002d62:	4413      	add	r3, r2
 8002d64:	009b      	lsls	r3, r3, #2
 8002d66:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002d6a:	687a      	ldr	r2, [r7, #4]
 8002d6c:	4413      	add	r3, r2
 8002d6e:	3304      	adds	r3, #4
 8002d70:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002d72:	697b      	ldr	r3, [r7, #20]
 8002d74:	78db      	ldrb	r3, [r3, #3]
 8002d76:	2b01      	cmp	r3, #1
 8002d78:	d108      	bne.n	8002d8c <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002d7a:	697b      	ldr	r3, [r7, #20]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002d80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d82:	b2db      	uxtb	r3, r3
 8002d84:	4619      	mov	r1, r3
 8002d86:	6878      	ldr	r0, [r7, #4]
 8002d88:	f006 fd42 	bl	8009810 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002d8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d8e:	015a      	lsls	r2, r3, #5
 8002d90:	69fb      	ldr	r3, [r7, #28]
 8002d92:	4413      	add	r3, r2
 8002d94:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002d98:	461a      	mov	r2, r3
 8002d9a:	2302      	movs	r3, #2
 8002d9c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	f003 0320 	and.w	r3, r3, #32
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d008      	beq.n	8002dba <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002da8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002daa:	015a      	lsls	r2, r3, #5
 8002dac:	69fb      	ldr	r3, [r7, #28]
 8002dae:	4413      	add	r3, r2
 8002db0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002db4:	461a      	mov	r2, r3
 8002db6:	2320      	movs	r3, #32
 8002db8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002dba:	693b      	ldr	r3, [r7, #16]
 8002dbc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d009      	beq.n	8002dd8 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002dc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dc6:	015a      	lsls	r2, r3, #5
 8002dc8:	69fb      	ldr	r3, [r7, #28]
 8002dca:	4413      	add	r3, r2
 8002dcc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002dd0:	461a      	mov	r2, r3
 8002dd2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002dd6:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002dd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dda:	3301      	adds	r3, #1
 8002ddc:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002dde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002de0:	085b      	lsrs	r3, r3, #1
 8002de2:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002de4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	f47f af62 	bne.w	8002cb0 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4618      	mov	r0, r3
 8002df2:	f004 f8b7 	bl	8006f64 <USB_ReadInterrupts>
 8002df6:	4603      	mov	r3, r0
 8002df8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002dfc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002e00:	f040 80db 	bne.w	8002fba <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f004 f8d8 	bl	8006fbe <USB_ReadDevAllInEpInterrupt>
 8002e0e:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8002e10:	2300      	movs	r3, #0
 8002e12:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8002e14:	e0cd      	b.n	8002fb2 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002e16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e18:	f003 0301 	and.w	r3, r3, #1
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	f000 80c2 	beq.w	8002fa6 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e28:	b2d2      	uxtb	r2, r2
 8002e2a:	4611      	mov	r1, r2
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f004 f8fe 	bl	800702e <USB_ReadDevInEPInterrupt>
 8002e32:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002e34:	693b      	ldr	r3, [r7, #16]
 8002e36:	f003 0301 	and.w	r3, r3, #1
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d057      	beq.n	8002eee <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002e3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e40:	f003 030f 	and.w	r3, r3, #15
 8002e44:	2201      	movs	r2, #1
 8002e46:	fa02 f303 	lsl.w	r3, r2, r3
 8002e4a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002e4c:	69fb      	ldr	r3, [r7, #28]
 8002e4e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002e52:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	43db      	mvns	r3, r3
 8002e58:	69f9      	ldr	r1, [r7, #28]
 8002e5a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002e5e:	4013      	ands	r3, r2
 8002e60:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002e62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e64:	015a      	lsls	r2, r3, #5
 8002e66:	69fb      	ldr	r3, [r7, #28]
 8002e68:	4413      	add	r3, r2
 8002e6a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002e6e:	461a      	mov	r2, r3
 8002e70:	2301      	movs	r3, #1
 8002e72:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	799b      	ldrb	r3, [r3, #6]
 8002e78:	2b01      	cmp	r3, #1
 8002e7a:	d132      	bne.n	8002ee2 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002e7c:	6879      	ldr	r1, [r7, #4]
 8002e7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e80:	4613      	mov	r3, r2
 8002e82:	00db      	lsls	r3, r3, #3
 8002e84:	4413      	add	r3, r2
 8002e86:	009b      	lsls	r3, r3, #2
 8002e88:	440b      	add	r3, r1
 8002e8a:	3320      	adds	r3, #32
 8002e8c:	6819      	ldr	r1, [r3, #0]
 8002e8e:	6878      	ldr	r0, [r7, #4]
 8002e90:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e92:	4613      	mov	r3, r2
 8002e94:	00db      	lsls	r3, r3, #3
 8002e96:	4413      	add	r3, r2
 8002e98:	009b      	lsls	r3, r3, #2
 8002e9a:	4403      	add	r3, r0
 8002e9c:	331c      	adds	r3, #28
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4419      	add	r1, r3
 8002ea2:	6878      	ldr	r0, [r7, #4]
 8002ea4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ea6:	4613      	mov	r3, r2
 8002ea8:	00db      	lsls	r3, r3, #3
 8002eaa:	4413      	add	r3, r2
 8002eac:	009b      	lsls	r3, r3, #2
 8002eae:	4403      	add	r3, r0
 8002eb0:	3320      	adds	r3, #32
 8002eb2:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002eb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d113      	bne.n	8002ee2 <HAL_PCD_IRQHandler+0x3a2>
 8002eba:	6879      	ldr	r1, [r7, #4]
 8002ebc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ebe:	4613      	mov	r3, r2
 8002ec0:	00db      	lsls	r3, r3, #3
 8002ec2:	4413      	add	r3, r2
 8002ec4:	009b      	lsls	r3, r3, #2
 8002ec6:	440b      	add	r3, r1
 8002ec8:	3324      	adds	r3, #36	@ 0x24
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d108      	bne.n	8002ee2 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6818      	ldr	r0, [r3, #0]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002eda:	461a      	mov	r2, r3
 8002edc:	2101      	movs	r1, #1
 8002ede:	f004 f905 	bl	80070ec <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002ee2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ee4:	b2db      	uxtb	r3, r3
 8002ee6:	4619      	mov	r1, r3
 8002ee8:	6878      	ldr	r0, [r7, #4]
 8002eea:	f006 fc0c 	bl	8009706 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002eee:	693b      	ldr	r3, [r7, #16]
 8002ef0:	f003 0308 	and.w	r3, r3, #8
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d008      	beq.n	8002f0a <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002ef8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002efa:	015a      	lsls	r2, r3, #5
 8002efc:	69fb      	ldr	r3, [r7, #28]
 8002efe:	4413      	add	r3, r2
 8002f00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002f04:	461a      	mov	r2, r3
 8002f06:	2308      	movs	r3, #8
 8002f08:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	f003 0310 	and.w	r3, r3, #16
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d008      	beq.n	8002f26 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002f14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f16:	015a      	lsls	r2, r3, #5
 8002f18:	69fb      	ldr	r3, [r7, #28]
 8002f1a:	4413      	add	r3, r2
 8002f1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002f20:	461a      	mov	r2, r3
 8002f22:	2310      	movs	r3, #16
 8002f24:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002f26:	693b      	ldr	r3, [r7, #16]
 8002f28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d008      	beq.n	8002f42 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002f30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f32:	015a      	lsls	r2, r3, #5
 8002f34:	69fb      	ldr	r3, [r7, #28]
 8002f36:	4413      	add	r3, r2
 8002f38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002f3c:	461a      	mov	r2, r3
 8002f3e:	2340      	movs	r3, #64	@ 0x40
 8002f40:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	f003 0302 	and.w	r3, r3, #2
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d023      	beq.n	8002f94 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002f4c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002f4e:	6a38      	ldr	r0, [r7, #32]
 8002f50:	f003 f8f2 	bl	8006138 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002f54:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f56:	4613      	mov	r3, r2
 8002f58:	00db      	lsls	r3, r3, #3
 8002f5a:	4413      	add	r3, r2
 8002f5c:	009b      	lsls	r3, r3, #2
 8002f5e:	3310      	adds	r3, #16
 8002f60:	687a      	ldr	r2, [r7, #4]
 8002f62:	4413      	add	r3, r2
 8002f64:	3304      	adds	r3, #4
 8002f66:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	78db      	ldrb	r3, [r3, #3]
 8002f6c:	2b01      	cmp	r3, #1
 8002f6e:	d108      	bne.n	8002f82 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002f70:	697b      	ldr	r3, [r7, #20]
 8002f72:	2200      	movs	r2, #0
 8002f74:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002f76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f78:	b2db      	uxtb	r3, r3
 8002f7a:	4619      	mov	r1, r3
 8002f7c:	6878      	ldr	r0, [r7, #4]
 8002f7e:	f006 fc59 	bl	8009834 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002f82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f84:	015a      	lsls	r2, r3, #5
 8002f86:	69fb      	ldr	r3, [r7, #28]
 8002f88:	4413      	add	r3, r2
 8002f8a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002f8e:	461a      	mov	r2, r3
 8002f90:	2302      	movs	r3, #2
 8002f92:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002f94:	693b      	ldr	r3, [r7, #16]
 8002f96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d003      	beq.n	8002fa6 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002f9e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002fa0:	6878      	ldr	r0, [r7, #4]
 8002fa2:	f000 fcbb 	bl	800391c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002fa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fa8:	3301      	adds	r3, #1
 8002faa:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002fac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fae:	085b      	lsrs	r3, r3, #1
 8002fb0:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002fb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	f47f af2e 	bne.w	8002e16 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f003 ffd0 	bl	8006f64 <USB_ReadInterrupts>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002fca:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002fce:	d122      	bne.n	8003016 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002fd0:	69fb      	ldr	r3, [r7, #28]
 8002fd2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	69fa      	ldr	r2, [r7, #28]
 8002fda:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002fde:	f023 0301 	bic.w	r3, r3, #1
 8002fe2:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8002fea:	2b01      	cmp	r3, #1
 8002fec:	d108      	bne.n	8003000 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002ff6:	2100      	movs	r1, #0
 8002ff8:	6878      	ldr	r0, [r7, #4]
 8002ffa:	f000 fea1 	bl	8003d40 <HAL_PCDEx_LPM_Callback>
 8002ffe:	e002      	b.n	8003006 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003000:	6878      	ldr	r0, [r7, #4]
 8003002:	f006 fbf7 	bl	80097f4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	695a      	ldr	r2, [r3, #20]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8003014:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4618      	mov	r0, r3
 800301c:	f003 ffa2 	bl	8006f64 <USB_ReadInterrupts>
 8003020:	4603      	mov	r3, r0
 8003022:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003026:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800302a:	d112      	bne.n	8003052 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800302c:	69fb      	ldr	r3, [r7, #28]
 800302e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003032:	689b      	ldr	r3, [r3, #8]
 8003034:	f003 0301 	and.w	r3, r3, #1
 8003038:	2b01      	cmp	r3, #1
 800303a:	d102      	bne.n	8003042 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800303c:	6878      	ldr	r0, [r7, #4]
 800303e:	f006 fbb3 	bl	80097a8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	695a      	ldr	r2, [r3, #20]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8003050:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4618      	mov	r0, r3
 8003058:	f003 ff84 	bl	8006f64 <USB_ReadInterrupts>
 800305c:	4603      	mov	r3, r0
 800305e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003062:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003066:	f040 80b7 	bne.w	80031d8 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800306a:	69fb      	ldr	r3, [r7, #28]
 800306c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	69fa      	ldr	r2, [r7, #28]
 8003074:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003078:	f023 0301 	bic.w	r3, r3, #1
 800307c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	2110      	movs	r1, #16
 8003084:	4618      	mov	r0, r3
 8003086:	f003 f857 	bl	8006138 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800308a:	2300      	movs	r3, #0
 800308c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800308e:	e046      	b.n	800311e <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003090:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003092:	015a      	lsls	r2, r3, #5
 8003094:	69fb      	ldr	r3, [r7, #28]
 8003096:	4413      	add	r3, r2
 8003098:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800309c:	461a      	mov	r2, r3
 800309e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80030a2:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80030a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030a6:	015a      	lsls	r2, r3, #5
 80030a8:	69fb      	ldr	r3, [r7, #28]
 80030aa:	4413      	add	r3, r2
 80030ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80030b4:	0151      	lsls	r1, r2, #5
 80030b6:	69fa      	ldr	r2, [r7, #28]
 80030b8:	440a      	add	r2, r1
 80030ba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80030be:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80030c2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80030c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030c6:	015a      	lsls	r2, r3, #5
 80030c8:	69fb      	ldr	r3, [r7, #28]
 80030ca:	4413      	add	r3, r2
 80030cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80030d0:	461a      	mov	r2, r3
 80030d2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80030d6:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80030d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030da:	015a      	lsls	r2, r3, #5
 80030dc:	69fb      	ldr	r3, [r7, #28]
 80030de:	4413      	add	r3, r2
 80030e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80030e8:	0151      	lsls	r1, r2, #5
 80030ea:	69fa      	ldr	r2, [r7, #28]
 80030ec:	440a      	add	r2, r1
 80030ee:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80030f2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80030f6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80030f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030fa:	015a      	lsls	r2, r3, #5
 80030fc:	69fb      	ldr	r3, [r7, #28]
 80030fe:	4413      	add	r3, r2
 8003100:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003108:	0151      	lsls	r1, r2, #5
 800310a:	69fa      	ldr	r2, [r7, #28]
 800310c:	440a      	add	r2, r1
 800310e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003112:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003116:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003118:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800311a:	3301      	adds	r3, #1
 800311c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	791b      	ldrb	r3, [r3, #4]
 8003122:	461a      	mov	r2, r3
 8003124:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003126:	4293      	cmp	r3, r2
 8003128:	d3b2      	bcc.n	8003090 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800312a:	69fb      	ldr	r3, [r7, #28]
 800312c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003130:	69db      	ldr	r3, [r3, #28]
 8003132:	69fa      	ldr	r2, [r7, #28]
 8003134:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003138:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 800313c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	7bdb      	ldrb	r3, [r3, #15]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d016      	beq.n	8003174 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003146:	69fb      	ldr	r3, [r7, #28]
 8003148:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800314c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003150:	69fa      	ldr	r2, [r7, #28]
 8003152:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003156:	f043 030b 	orr.w	r3, r3, #11
 800315a:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800315e:	69fb      	ldr	r3, [r7, #28]
 8003160:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003164:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003166:	69fa      	ldr	r2, [r7, #28]
 8003168:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800316c:	f043 030b 	orr.w	r3, r3, #11
 8003170:	6453      	str	r3, [r2, #68]	@ 0x44
 8003172:	e015      	b.n	80031a0 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003174:	69fb      	ldr	r3, [r7, #28]
 8003176:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800317a:	695b      	ldr	r3, [r3, #20]
 800317c:	69fa      	ldr	r2, [r7, #28]
 800317e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003182:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003186:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 800318a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800318c:	69fb      	ldr	r3, [r7, #28]
 800318e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003192:	691b      	ldr	r3, [r3, #16]
 8003194:	69fa      	ldr	r2, [r7, #28]
 8003196:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800319a:	f043 030b 	orr.w	r3, r3, #11
 800319e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80031a0:	69fb      	ldr	r3, [r7, #28]
 80031a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	69fa      	ldr	r2, [r7, #28]
 80031aa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80031ae:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80031b2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6818      	ldr	r0, [r3, #0]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80031c2:	461a      	mov	r2, r3
 80031c4:	f003 ff92 	bl	80070ec <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	695a      	ldr	r2, [r3, #20]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80031d6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4618      	mov	r0, r3
 80031de:	f003 fec1 	bl	8006f64 <USB_ReadInterrupts>
 80031e2:	4603      	mov	r3, r0
 80031e4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80031e8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80031ec:	d123      	bne.n	8003236 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4618      	mov	r0, r3
 80031f4:	f003 ff57 	bl	80070a6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4618      	mov	r0, r3
 80031fe:	f003 f814 	bl	800622a <USB_GetDevSpeed>
 8003202:	4603      	mov	r3, r0
 8003204:	461a      	mov	r2, r3
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681c      	ldr	r4, [r3, #0]
 800320e:	f001 fa6f 	bl	80046f0 <HAL_RCC_GetHCLKFreq>
 8003212:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003218:	461a      	mov	r2, r3
 800321a:	4620      	mov	r0, r4
 800321c:	f002 fd18 	bl	8005c50 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003220:	6878      	ldr	r0, [r7, #4]
 8003222:	f006 fa98 	bl	8009756 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	695a      	ldr	r2, [r3, #20]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8003234:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4618      	mov	r0, r3
 800323c:	f003 fe92 	bl	8006f64 <USB_ReadInterrupts>
 8003240:	4603      	mov	r3, r0
 8003242:	f003 0308 	and.w	r3, r3, #8
 8003246:	2b08      	cmp	r3, #8
 8003248:	d10a      	bne.n	8003260 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800324a:	6878      	ldr	r0, [r7, #4]
 800324c:	f006 fa75 	bl	800973a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	695a      	ldr	r2, [r3, #20]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f002 0208 	and.w	r2, r2, #8
 800325e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4618      	mov	r0, r3
 8003266:	f003 fe7d 	bl	8006f64 <USB_ReadInterrupts>
 800326a:	4603      	mov	r3, r0
 800326c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003270:	2b80      	cmp	r3, #128	@ 0x80
 8003272:	d123      	bne.n	80032bc <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003274:	6a3b      	ldr	r3, [r7, #32]
 8003276:	699b      	ldr	r3, [r3, #24]
 8003278:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800327c:	6a3b      	ldr	r3, [r7, #32]
 800327e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003280:	2301      	movs	r3, #1
 8003282:	627b      	str	r3, [r7, #36]	@ 0x24
 8003284:	e014      	b.n	80032b0 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003286:	6879      	ldr	r1, [r7, #4]
 8003288:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800328a:	4613      	mov	r3, r2
 800328c:	00db      	lsls	r3, r3, #3
 800328e:	4413      	add	r3, r2
 8003290:	009b      	lsls	r3, r3, #2
 8003292:	440b      	add	r3, r1
 8003294:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003298:	781b      	ldrb	r3, [r3, #0]
 800329a:	2b01      	cmp	r3, #1
 800329c:	d105      	bne.n	80032aa <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800329e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032a0:	b2db      	uxtb	r3, r3
 80032a2:	4619      	mov	r1, r3
 80032a4:	6878      	ldr	r0, [r7, #4]
 80032a6:	f000 fb08 	bl	80038ba <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80032aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032ac:	3301      	adds	r3, #1
 80032ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	791b      	ldrb	r3, [r3, #4]
 80032b4:	461a      	mov	r2, r3
 80032b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d3e4      	bcc.n	8003286 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4618      	mov	r0, r3
 80032c2:	f003 fe4f 	bl	8006f64 <USB_ReadInterrupts>
 80032c6:	4603      	mov	r3, r0
 80032c8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80032cc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80032d0:	d13c      	bne.n	800334c <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80032d2:	2301      	movs	r3, #1
 80032d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80032d6:	e02b      	b.n	8003330 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80032d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032da:	015a      	lsls	r2, r3, #5
 80032dc:	69fb      	ldr	r3, [r7, #28]
 80032de:	4413      	add	r3, r2
 80032e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80032e8:	6879      	ldr	r1, [r7, #4]
 80032ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80032ec:	4613      	mov	r3, r2
 80032ee:	00db      	lsls	r3, r3, #3
 80032f0:	4413      	add	r3, r2
 80032f2:	009b      	lsls	r3, r3, #2
 80032f4:	440b      	add	r3, r1
 80032f6:	3318      	adds	r3, #24
 80032f8:	781b      	ldrb	r3, [r3, #0]
 80032fa:	2b01      	cmp	r3, #1
 80032fc:	d115      	bne.n	800332a <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80032fe:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003300:	2b00      	cmp	r3, #0
 8003302:	da12      	bge.n	800332a <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003304:	6879      	ldr	r1, [r7, #4]
 8003306:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003308:	4613      	mov	r3, r2
 800330a:	00db      	lsls	r3, r3, #3
 800330c:	4413      	add	r3, r2
 800330e:	009b      	lsls	r3, r3, #2
 8003310:	440b      	add	r3, r1
 8003312:	3317      	adds	r3, #23
 8003314:	2201      	movs	r2, #1
 8003316:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003318:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800331a:	b2db      	uxtb	r3, r3
 800331c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003320:	b2db      	uxtb	r3, r3
 8003322:	4619      	mov	r1, r3
 8003324:	6878      	ldr	r0, [r7, #4]
 8003326:	f000 fac8 	bl	80038ba <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800332a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800332c:	3301      	adds	r3, #1
 800332e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	791b      	ldrb	r3, [r3, #4]
 8003334:	461a      	mov	r2, r3
 8003336:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003338:	4293      	cmp	r3, r2
 800333a:	d3cd      	bcc.n	80032d8 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	695a      	ldr	r2, [r3, #20]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800334a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4618      	mov	r0, r3
 8003352:	f003 fe07 	bl	8006f64 <USB_ReadInterrupts>
 8003356:	4603      	mov	r3, r0
 8003358:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800335c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003360:	d156      	bne.n	8003410 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003362:	2301      	movs	r3, #1
 8003364:	627b      	str	r3, [r7, #36]	@ 0x24
 8003366:	e045      	b.n	80033f4 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003368:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800336a:	015a      	lsls	r2, r3, #5
 800336c:	69fb      	ldr	r3, [r7, #28]
 800336e:	4413      	add	r3, r2
 8003370:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003378:	6879      	ldr	r1, [r7, #4]
 800337a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800337c:	4613      	mov	r3, r2
 800337e:	00db      	lsls	r3, r3, #3
 8003380:	4413      	add	r3, r2
 8003382:	009b      	lsls	r3, r3, #2
 8003384:	440b      	add	r3, r1
 8003386:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800338a:	781b      	ldrb	r3, [r3, #0]
 800338c:	2b01      	cmp	r3, #1
 800338e:	d12e      	bne.n	80033ee <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003390:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003392:	2b00      	cmp	r3, #0
 8003394:	da2b      	bge.n	80033ee <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003396:	69bb      	ldr	r3, [r7, #24]
 8003398:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80033a2:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80033a6:	429a      	cmp	r2, r3
 80033a8:	d121      	bne.n	80033ee <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80033aa:	6879      	ldr	r1, [r7, #4]
 80033ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80033ae:	4613      	mov	r3, r2
 80033b0:	00db      	lsls	r3, r3, #3
 80033b2:	4413      	add	r3, r2
 80033b4:	009b      	lsls	r3, r3, #2
 80033b6:	440b      	add	r3, r1
 80033b8:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80033bc:	2201      	movs	r2, #1
 80033be:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80033c0:	6a3b      	ldr	r3, [r7, #32]
 80033c2:	699b      	ldr	r3, [r3, #24]
 80033c4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80033c8:	6a3b      	ldr	r3, [r7, #32]
 80033ca:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80033cc:	6a3b      	ldr	r3, [r7, #32]
 80033ce:	695b      	ldr	r3, [r3, #20]
 80033d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d10a      	bne.n	80033ee <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80033d8:	69fb      	ldr	r3, [r7, #28]
 80033da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	69fa      	ldr	r2, [r7, #28]
 80033e2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80033e6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80033ea:	6053      	str	r3, [r2, #4]
            break;
 80033ec:	e008      	b.n	8003400 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80033ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033f0:	3301      	adds	r3, #1
 80033f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	791b      	ldrb	r3, [r3, #4]
 80033f8:	461a      	mov	r2, r3
 80033fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d3b3      	bcc.n	8003368 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	695a      	ldr	r2, [r3, #20]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 800340e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4618      	mov	r0, r3
 8003416:	f003 fda5 	bl	8006f64 <USB_ReadInterrupts>
 800341a:	4603      	mov	r3, r0
 800341c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003420:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003424:	d10a      	bne.n	800343c <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003426:	6878      	ldr	r0, [r7, #4]
 8003428:	f006 fa16 	bl	8009858 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	695a      	ldr	r2, [r3, #20]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800343a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4618      	mov	r0, r3
 8003442:	f003 fd8f 	bl	8006f64 <USB_ReadInterrupts>
 8003446:	4603      	mov	r3, r0
 8003448:	f003 0304 	and.w	r3, r3, #4
 800344c:	2b04      	cmp	r3, #4
 800344e:	d115      	bne.n	800347c <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003458:	69bb      	ldr	r3, [r7, #24]
 800345a:	f003 0304 	and.w	r3, r3, #4
 800345e:	2b00      	cmp	r3, #0
 8003460:	d002      	beq.n	8003468 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003462:	6878      	ldr	r0, [r7, #4]
 8003464:	f006 fa06 	bl	8009874 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	6859      	ldr	r1, [r3, #4]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	69ba      	ldr	r2, [r7, #24]
 8003474:	430a      	orrs	r2, r1
 8003476:	605a      	str	r2, [r3, #4]
 8003478:	e000      	b.n	800347c <HAL_PCD_IRQHandler+0x93c>
      return;
 800347a:	bf00      	nop
    }
  }
}
 800347c:	3734      	adds	r7, #52	@ 0x34
 800347e:	46bd      	mov	sp, r7
 8003480:	bd90      	pop	{r4, r7, pc}

08003482 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003482:	b580      	push	{r7, lr}
 8003484:	b082      	sub	sp, #8
 8003486:	af00      	add	r7, sp, #0
 8003488:	6078      	str	r0, [r7, #4]
 800348a:	460b      	mov	r3, r1
 800348c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003494:	2b01      	cmp	r3, #1
 8003496:	d101      	bne.n	800349c <HAL_PCD_SetAddress+0x1a>
 8003498:	2302      	movs	r3, #2
 800349a:	e012      	b.n	80034c2 <HAL_PCD_SetAddress+0x40>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2201      	movs	r2, #1
 80034a0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	78fa      	ldrb	r2, [r7, #3]
 80034a8:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	78fa      	ldrb	r2, [r7, #3]
 80034b0:	4611      	mov	r1, r2
 80034b2:	4618      	mov	r0, r3
 80034b4:	f003 fcee 	bl	8006e94 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2200      	movs	r2, #0
 80034bc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80034c0:	2300      	movs	r3, #0
}
 80034c2:	4618      	mov	r0, r3
 80034c4:	3708      	adds	r7, #8
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}

080034ca <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80034ca:	b580      	push	{r7, lr}
 80034cc:	b084      	sub	sp, #16
 80034ce:	af00      	add	r7, sp, #0
 80034d0:	6078      	str	r0, [r7, #4]
 80034d2:	4608      	mov	r0, r1
 80034d4:	4611      	mov	r1, r2
 80034d6:	461a      	mov	r2, r3
 80034d8:	4603      	mov	r3, r0
 80034da:	70fb      	strb	r3, [r7, #3]
 80034dc:	460b      	mov	r3, r1
 80034de:	803b      	strh	r3, [r7, #0]
 80034e0:	4613      	mov	r3, r2
 80034e2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80034e4:	2300      	movs	r3, #0
 80034e6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80034e8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	da0f      	bge.n	8003510 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80034f0:	78fb      	ldrb	r3, [r7, #3]
 80034f2:	f003 020f 	and.w	r2, r3, #15
 80034f6:	4613      	mov	r3, r2
 80034f8:	00db      	lsls	r3, r3, #3
 80034fa:	4413      	add	r3, r2
 80034fc:	009b      	lsls	r3, r3, #2
 80034fe:	3310      	adds	r3, #16
 8003500:	687a      	ldr	r2, [r7, #4]
 8003502:	4413      	add	r3, r2
 8003504:	3304      	adds	r3, #4
 8003506:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	2201      	movs	r2, #1
 800350c:	705a      	strb	r2, [r3, #1]
 800350e:	e00f      	b.n	8003530 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003510:	78fb      	ldrb	r3, [r7, #3]
 8003512:	f003 020f 	and.w	r2, r3, #15
 8003516:	4613      	mov	r3, r2
 8003518:	00db      	lsls	r3, r3, #3
 800351a:	4413      	add	r3, r2
 800351c:	009b      	lsls	r3, r3, #2
 800351e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003522:	687a      	ldr	r2, [r7, #4]
 8003524:	4413      	add	r3, r2
 8003526:	3304      	adds	r3, #4
 8003528:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	2200      	movs	r2, #0
 800352e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003530:	78fb      	ldrb	r3, [r7, #3]
 8003532:	f003 030f 	and.w	r3, r3, #15
 8003536:	b2da      	uxtb	r2, r3
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800353c:	883a      	ldrh	r2, [r7, #0]
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	78ba      	ldrb	r2, [r7, #2]
 8003546:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	785b      	ldrb	r3, [r3, #1]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d004      	beq.n	800355a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	781b      	ldrb	r3, [r3, #0]
 8003554:	461a      	mov	r2, r3
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800355a:	78bb      	ldrb	r3, [r7, #2]
 800355c:	2b02      	cmp	r3, #2
 800355e:	d102      	bne.n	8003566 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	2200      	movs	r2, #0
 8003564:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800356c:	2b01      	cmp	r3, #1
 800356e:	d101      	bne.n	8003574 <HAL_PCD_EP_Open+0xaa>
 8003570:	2302      	movs	r3, #2
 8003572:	e00e      	b.n	8003592 <HAL_PCD_EP_Open+0xc8>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2201      	movs	r2, #1
 8003578:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	68f9      	ldr	r1, [r7, #12]
 8003582:	4618      	mov	r0, r3
 8003584:	f002 fe76 	bl	8006274 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2200      	movs	r2, #0
 800358c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8003590:	7afb      	ldrb	r3, [r7, #11]
}
 8003592:	4618      	mov	r0, r3
 8003594:	3710      	adds	r7, #16
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}

0800359a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800359a:	b580      	push	{r7, lr}
 800359c:	b084      	sub	sp, #16
 800359e:	af00      	add	r7, sp, #0
 80035a0:	6078      	str	r0, [r7, #4]
 80035a2:	460b      	mov	r3, r1
 80035a4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80035a6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	da0f      	bge.n	80035ce <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80035ae:	78fb      	ldrb	r3, [r7, #3]
 80035b0:	f003 020f 	and.w	r2, r3, #15
 80035b4:	4613      	mov	r3, r2
 80035b6:	00db      	lsls	r3, r3, #3
 80035b8:	4413      	add	r3, r2
 80035ba:	009b      	lsls	r3, r3, #2
 80035bc:	3310      	adds	r3, #16
 80035be:	687a      	ldr	r2, [r7, #4]
 80035c0:	4413      	add	r3, r2
 80035c2:	3304      	adds	r3, #4
 80035c4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	2201      	movs	r2, #1
 80035ca:	705a      	strb	r2, [r3, #1]
 80035cc:	e00f      	b.n	80035ee <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80035ce:	78fb      	ldrb	r3, [r7, #3]
 80035d0:	f003 020f 	and.w	r2, r3, #15
 80035d4:	4613      	mov	r3, r2
 80035d6:	00db      	lsls	r3, r3, #3
 80035d8:	4413      	add	r3, r2
 80035da:	009b      	lsls	r3, r3, #2
 80035dc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80035e0:	687a      	ldr	r2, [r7, #4]
 80035e2:	4413      	add	r3, r2
 80035e4:	3304      	adds	r3, #4
 80035e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	2200      	movs	r2, #0
 80035ec:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80035ee:	78fb      	ldrb	r3, [r7, #3]
 80035f0:	f003 030f 	and.w	r3, r3, #15
 80035f4:	b2da      	uxtb	r2, r3
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003600:	2b01      	cmp	r3, #1
 8003602:	d101      	bne.n	8003608 <HAL_PCD_EP_Close+0x6e>
 8003604:	2302      	movs	r3, #2
 8003606:	e00e      	b.n	8003626 <HAL_PCD_EP_Close+0x8c>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2201      	movs	r2, #1
 800360c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	68f9      	ldr	r1, [r7, #12]
 8003616:	4618      	mov	r0, r3
 8003618:	f002 feb4 	bl	8006384 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2200      	movs	r2, #0
 8003620:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8003624:	2300      	movs	r3, #0
}
 8003626:	4618      	mov	r0, r3
 8003628:	3710      	adds	r7, #16
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}

0800362e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800362e:	b580      	push	{r7, lr}
 8003630:	b086      	sub	sp, #24
 8003632:	af00      	add	r7, sp, #0
 8003634:	60f8      	str	r0, [r7, #12]
 8003636:	607a      	str	r2, [r7, #4]
 8003638:	603b      	str	r3, [r7, #0]
 800363a:	460b      	mov	r3, r1
 800363c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800363e:	7afb      	ldrb	r3, [r7, #11]
 8003640:	f003 020f 	and.w	r2, r3, #15
 8003644:	4613      	mov	r3, r2
 8003646:	00db      	lsls	r3, r3, #3
 8003648:	4413      	add	r3, r2
 800364a:	009b      	lsls	r3, r3, #2
 800364c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003650:	68fa      	ldr	r2, [r7, #12]
 8003652:	4413      	add	r3, r2
 8003654:	3304      	adds	r3, #4
 8003656:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003658:	697b      	ldr	r3, [r7, #20]
 800365a:	687a      	ldr	r2, [r7, #4]
 800365c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800365e:	697b      	ldr	r3, [r7, #20]
 8003660:	683a      	ldr	r2, [r7, #0]
 8003662:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003664:	697b      	ldr	r3, [r7, #20]
 8003666:	2200      	movs	r2, #0
 8003668:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	2200      	movs	r2, #0
 800366e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003670:	7afb      	ldrb	r3, [r7, #11]
 8003672:	f003 030f 	and.w	r3, r3, #15
 8003676:	b2da      	uxtb	r2, r3
 8003678:	697b      	ldr	r3, [r7, #20]
 800367a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	799b      	ldrb	r3, [r3, #6]
 8003680:	2b01      	cmp	r3, #1
 8003682:	d102      	bne.n	800368a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003684:	687a      	ldr	r2, [r7, #4]
 8003686:	697b      	ldr	r3, [r7, #20]
 8003688:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	6818      	ldr	r0, [r3, #0]
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	799b      	ldrb	r3, [r3, #6]
 8003692:	461a      	mov	r2, r3
 8003694:	6979      	ldr	r1, [r7, #20]
 8003696:	f002 ff51 	bl	800653c <USB_EPStartXfer>

  return HAL_OK;
 800369a:	2300      	movs	r3, #0
}
 800369c:	4618      	mov	r0, r3
 800369e:	3718      	adds	r7, #24
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bd80      	pop	{r7, pc}

080036a4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80036a4:	b480      	push	{r7}
 80036a6:	b083      	sub	sp, #12
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
 80036ac:	460b      	mov	r3, r1
 80036ae:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80036b0:	78fb      	ldrb	r3, [r7, #3]
 80036b2:	f003 020f 	and.w	r2, r3, #15
 80036b6:	6879      	ldr	r1, [r7, #4]
 80036b8:	4613      	mov	r3, r2
 80036ba:	00db      	lsls	r3, r3, #3
 80036bc:	4413      	add	r3, r2
 80036be:	009b      	lsls	r3, r3, #2
 80036c0:	440b      	add	r3, r1
 80036c2:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 80036c6:	681b      	ldr	r3, [r3, #0]
}
 80036c8:	4618      	mov	r0, r3
 80036ca:	370c      	adds	r7, #12
 80036cc:	46bd      	mov	sp, r7
 80036ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d2:	4770      	bx	lr

080036d4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b086      	sub	sp, #24
 80036d8:	af00      	add	r7, sp, #0
 80036da:	60f8      	str	r0, [r7, #12]
 80036dc:	607a      	str	r2, [r7, #4]
 80036de:	603b      	str	r3, [r7, #0]
 80036e0:	460b      	mov	r3, r1
 80036e2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80036e4:	7afb      	ldrb	r3, [r7, #11]
 80036e6:	f003 020f 	and.w	r2, r3, #15
 80036ea:	4613      	mov	r3, r2
 80036ec:	00db      	lsls	r3, r3, #3
 80036ee:	4413      	add	r3, r2
 80036f0:	009b      	lsls	r3, r3, #2
 80036f2:	3310      	adds	r3, #16
 80036f4:	68fa      	ldr	r2, [r7, #12]
 80036f6:	4413      	add	r3, r2
 80036f8:	3304      	adds	r3, #4
 80036fa:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80036fc:	697b      	ldr	r3, [r7, #20]
 80036fe:	687a      	ldr	r2, [r7, #4]
 8003700:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003702:	697b      	ldr	r3, [r7, #20]
 8003704:	683a      	ldr	r2, [r7, #0]
 8003706:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003708:	697b      	ldr	r3, [r7, #20]
 800370a:	2200      	movs	r2, #0
 800370c:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800370e:	697b      	ldr	r3, [r7, #20]
 8003710:	2201      	movs	r2, #1
 8003712:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003714:	7afb      	ldrb	r3, [r7, #11]
 8003716:	f003 030f 	and.w	r3, r3, #15
 800371a:	b2da      	uxtb	r2, r3
 800371c:	697b      	ldr	r3, [r7, #20]
 800371e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	799b      	ldrb	r3, [r3, #6]
 8003724:	2b01      	cmp	r3, #1
 8003726:	d102      	bne.n	800372e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003728:	687a      	ldr	r2, [r7, #4]
 800372a:	697b      	ldr	r3, [r7, #20]
 800372c:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	6818      	ldr	r0, [r3, #0]
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	799b      	ldrb	r3, [r3, #6]
 8003736:	461a      	mov	r2, r3
 8003738:	6979      	ldr	r1, [r7, #20]
 800373a:	f002 feff 	bl	800653c <USB_EPStartXfer>

  return HAL_OK;
 800373e:	2300      	movs	r3, #0
}
 8003740:	4618      	mov	r0, r3
 8003742:	3718      	adds	r7, #24
 8003744:	46bd      	mov	sp, r7
 8003746:	bd80      	pop	{r7, pc}

08003748 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b084      	sub	sp, #16
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
 8003750:	460b      	mov	r3, r1
 8003752:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003754:	78fb      	ldrb	r3, [r7, #3]
 8003756:	f003 030f 	and.w	r3, r3, #15
 800375a:	687a      	ldr	r2, [r7, #4]
 800375c:	7912      	ldrb	r2, [r2, #4]
 800375e:	4293      	cmp	r3, r2
 8003760:	d901      	bls.n	8003766 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003762:	2301      	movs	r3, #1
 8003764:	e04f      	b.n	8003806 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003766:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800376a:	2b00      	cmp	r3, #0
 800376c:	da0f      	bge.n	800378e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800376e:	78fb      	ldrb	r3, [r7, #3]
 8003770:	f003 020f 	and.w	r2, r3, #15
 8003774:	4613      	mov	r3, r2
 8003776:	00db      	lsls	r3, r3, #3
 8003778:	4413      	add	r3, r2
 800377a:	009b      	lsls	r3, r3, #2
 800377c:	3310      	adds	r3, #16
 800377e:	687a      	ldr	r2, [r7, #4]
 8003780:	4413      	add	r3, r2
 8003782:	3304      	adds	r3, #4
 8003784:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	2201      	movs	r2, #1
 800378a:	705a      	strb	r2, [r3, #1]
 800378c:	e00d      	b.n	80037aa <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800378e:	78fa      	ldrb	r2, [r7, #3]
 8003790:	4613      	mov	r3, r2
 8003792:	00db      	lsls	r3, r3, #3
 8003794:	4413      	add	r3, r2
 8003796:	009b      	lsls	r3, r3, #2
 8003798:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800379c:	687a      	ldr	r2, [r7, #4]
 800379e:	4413      	add	r3, r2
 80037a0:	3304      	adds	r3, #4
 80037a2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	2200      	movs	r2, #0
 80037a8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	2201      	movs	r2, #1
 80037ae:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80037b0:	78fb      	ldrb	r3, [r7, #3]
 80037b2:	f003 030f 	and.w	r3, r3, #15
 80037b6:	b2da      	uxtb	r2, r3
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80037c2:	2b01      	cmp	r3, #1
 80037c4:	d101      	bne.n	80037ca <HAL_PCD_EP_SetStall+0x82>
 80037c6:	2302      	movs	r3, #2
 80037c8:	e01d      	b.n	8003806 <HAL_PCD_EP_SetStall+0xbe>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2201      	movs	r2, #1
 80037ce:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	68f9      	ldr	r1, [r7, #12]
 80037d8:	4618      	mov	r0, r3
 80037da:	f003 fa87 	bl	8006cec <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80037de:	78fb      	ldrb	r3, [r7, #3]
 80037e0:	f003 030f 	and.w	r3, r3, #15
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d109      	bne.n	80037fc <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6818      	ldr	r0, [r3, #0]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	7999      	ldrb	r1, [r3, #6]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80037f6:	461a      	mov	r2, r3
 80037f8:	f003 fc78 	bl	80070ec <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2200      	movs	r2, #0
 8003800:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003804:	2300      	movs	r3, #0
}
 8003806:	4618      	mov	r0, r3
 8003808:	3710      	adds	r7, #16
 800380a:	46bd      	mov	sp, r7
 800380c:	bd80      	pop	{r7, pc}

0800380e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800380e:	b580      	push	{r7, lr}
 8003810:	b084      	sub	sp, #16
 8003812:	af00      	add	r7, sp, #0
 8003814:	6078      	str	r0, [r7, #4]
 8003816:	460b      	mov	r3, r1
 8003818:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800381a:	78fb      	ldrb	r3, [r7, #3]
 800381c:	f003 030f 	and.w	r3, r3, #15
 8003820:	687a      	ldr	r2, [r7, #4]
 8003822:	7912      	ldrb	r2, [r2, #4]
 8003824:	4293      	cmp	r3, r2
 8003826:	d901      	bls.n	800382c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003828:	2301      	movs	r3, #1
 800382a:	e042      	b.n	80038b2 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800382c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003830:	2b00      	cmp	r3, #0
 8003832:	da0f      	bge.n	8003854 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003834:	78fb      	ldrb	r3, [r7, #3]
 8003836:	f003 020f 	and.w	r2, r3, #15
 800383a:	4613      	mov	r3, r2
 800383c:	00db      	lsls	r3, r3, #3
 800383e:	4413      	add	r3, r2
 8003840:	009b      	lsls	r3, r3, #2
 8003842:	3310      	adds	r3, #16
 8003844:	687a      	ldr	r2, [r7, #4]
 8003846:	4413      	add	r3, r2
 8003848:	3304      	adds	r3, #4
 800384a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	2201      	movs	r2, #1
 8003850:	705a      	strb	r2, [r3, #1]
 8003852:	e00f      	b.n	8003874 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003854:	78fb      	ldrb	r3, [r7, #3]
 8003856:	f003 020f 	and.w	r2, r3, #15
 800385a:	4613      	mov	r3, r2
 800385c:	00db      	lsls	r3, r3, #3
 800385e:	4413      	add	r3, r2
 8003860:	009b      	lsls	r3, r3, #2
 8003862:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003866:	687a      	ldr	r2, [r7, #4]
 8003868:	4413      	add	r3, r2
 800386a:	3304      	adds	r3, #4
 800386c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	2200      	movs	r2, #0
 8003872:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	2200      	movs	r2, #0
 8003878:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800387a:	78fb      	ldrb	r3, [r7, #3]
 800387c:	f003 030f 	and.w	r3, r3, #15
 8003880:	b2da      	uxtb	r2, r3
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800388c:	2b01      	cmp	r3, #1
 800388e:	d101      	bne.n	8003894 <HAL_PCD_EP_ClrStall+0x86>
 8003890:	2302      	movs	r3, #2
 8003892:	e00e      	b.n	80038b2 <HAL_PCD_EP_ClrStall+0xa4>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2201      	movs	r2, #1
 8003898:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	68f9      	ldr	r1, [r7, #12]
 80038a2:	4618      	mov	r0, r3
 80038a4:	f003 fa90 	bl	8006dc8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2200      	movs	r2, #0
 80038ac:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80038b0:	2300      	movs	r3, #0
}
 80038b2:	4618      	mov	r0, r3
 80038b4:	3710      	adds	r7, #16
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd80      	pop	{r7, pc}

080038ba <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80038ba:	b580      	push	{r7, lr}
 80038bc:	b084      	sub	sp, #16
 80038be:	af00      	add	r7, sp, #0
 80038c0:	6078      	str	r0, [r7, #4]
 80038c2:	460b      	mov	r3, r1
 80038c4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80038c6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	da0c      	bge.n	80038e8 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80038ce:	78fb      	ldrb	r3, [r7, #3]
 80038d0:	f003 020f 	and.w	r2, r3, #15
 80038d4:	4613      	mov	r3, r2
 80038d6:	00db      	lsls	r3, r3, #3
 80038d8:	4413      	add	r3, r2
 80038da:	009b      	lsls	r3, r3, #2
 80038dc:	3310      	adds	r3, #16
 80038de:	687a      	ldr	r2, [r7, #4]
 80038e0:	4413      	add	r3, r2
 80038e2:	3304      	adds	r3, #4
 80038e4:	60fb      	str	r3, [r7, #12]
 80038e6:	e00c      	b.n	8003902 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80038e8:	78fb      	ldrb	r3, [r7, #3]
 80038ea:	f003 020f 	and.w	r2, r3, #15
 80038ee:	4613      	mov	r3, r2
 80038f0:	00db      	lsls	r3, r3, #3
 80038f2:	4413      	add	r3, r2
 80038f4:	009b      	lsls	r3, r3, #2
 80038f6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80038fa:	687a      	ldr	r2, [r7, #4]
 80038fc:	4413      	add	r3, r2
 80038fe:	3304      	adds	r3, #4
 8003900:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	68f9      	ldr	r1, [r7, #12]
 8003908:	4618      	mov	r0, r3
 800390a:	f003 f8af 	bl	8006a6c <USB_EPStopXfer>
 800390e:	4603      	mov	r3, r0
 8003910:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003912:	7afb      	ldrb	r3, [r7, #11]
}
 8003914:	4618      	mov	r0, r3
 8003916:	3710      	adds	r7, #16
 8003918:	46bd      	mov	sp, r7
 800391a:	bd80      	pop	{r7, pc}

0800391c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b08a      	sub	sp, #40	@ 0x28
 8003920:	af02      	add	r7, sp, #8
 8003922:	6078      	str	r0, [r7, #4]
 8003924:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800392c:	697b      	ldr	r3, [r7, #20]
 800392e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003930:	683a      	ldr	r2, [r7, #0]
 8003932:	4613      	mov	r3, r2
 8003934:	00db      	lsls	r3, r3, #3
 8003936:	4413      	add	r3, r2
 8003938:	009b      	lsls	r3, r3, #2
 800393a:	3310      	adds	r3, #16
 800393c:	687a      	ldr	r2, [r7, #4]
 800393e:	4413      	add	r3, r2
 8003940:	3304      	adds	r3, #4
 8003942:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	695a      	ldr	r2, [r3, #20]
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	691b      	ldr	r3, [r3, #16]
 800394c:	429a      	cmp	r2, r3
 800394e:	d901      	bls.n	8003954 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003950:	2301      	movs	r3, #1
 8003952:	e06b      	b.n	8003a2c <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	691a      	ldr	r2, [r3, #16]
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	695b      	ldr	r3, [r3, #20]
 800395c:	1ad3      	subs	r3, r2, r3
 800395e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	689b      	ldr	r3, [r3, #8]
 8003964:	69fa      	ldr	r2, [r7, #28]
 8003966:	429a      	cmp	r2, r3
 8003968:	d902      	bls.n	8003970 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	689b      	ldr	r3, [r3, #8]
 800396e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003970:	69fb      	ldr	r3, [r7, #28]
 8003972:	3303      	adds	r3, #3
 8003974:	089b      	lsrs	r3, r3, #2
 8003976:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003978:	e02a      	b.n	80039d0 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	691a      	ldr	r2, [r3, #16]
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	695b      	ldr	r3, [r3, #20]
 8003982:	1ad3      	subs	r3, r2, r3
 8003984:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	689b      	ldr	r3, [r3, #8]
 800398a:	69fa      	ldr	r2, [r7, #28]
 800398c:	429a      	cmp	r2, r3
 800398e:	d902      	bls.n	8003996 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	689b      	ldr	r3, [r3, #8]
 8003994:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003996:	69fb      	ldr	r3, [r7, #28]
 8003998:	3303      	adds	r3, #3
 800399a:	089b      	lsrs	r3, r3, #2
 800399c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	68d9      	ldr	r1, [r3, #12]
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	b2da      	uxtb	r2, r3
 80039a6:	69fb      	ldr	r3, [r7, #28]
 80039a8:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80039ae:	9300      	str	r3, [sp, #0]
 80039b0:	4603      	mov	r3, r0
 80039b2:	6978      	ldr	r0, [r7, #20]
 80039b4:	f003 f904 	bl	8006bc0 <USB_WritePacket>

    ep->xfer_buff  += len;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	68da      	ldr	r2, [r3, #12]
 80039bc:	69fb      	ldr	r3, [r7, #28]
 80039be:	441a      	add	r2, r3
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	695a      	ldr	r2, [r3, #20]
 80039c8:	69fb      	ldr	r3, [r7, #28]
 80039ca:	441a      	add	r2, r3
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	015a      	lsls	r2, r3, #5
 80039d4:	693b      	ldr	r3, [r7, #16]
 80039d6:	4413      	add	r3, r2
 80039d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80039dc:	699b      	ldr	r3, [r3, #24]
 80039de:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80039e0:	69ba      	ldr	r2, [r7, #24]
 80039e2:	429a      	cmp	r2, r3
 80039e4:	d809      	bhi.n	80039fa <PCD_WriteEmptyTxFifo+0xde>
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	695a      	ldr	r2, [r3, #20]
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80039ee:	429a      	cmp	r2, r3
 80039f0:	d203      	bcs.n	80039fa <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	691b      	ldr	r3, [r3, #16]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d1bf      	bne.n	800397a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	691a      	ldr	r2, [r3, #16]
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	695b      	ldr	r3, [r3, #20]
 8003a02:	429a      	cmp	r2, r3
 8003a04:	d811      	bhi.n	8003a2a <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	f003 030f 	and.w	r3, r3, #15
 8003a0c:	2201      	movs	r2, #1
 8003a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a12:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003a14:	693b      	ldr	r3, [r7, #16]
 8003a16:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003a1a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	43db      	mvns	r3, r3
 8003a20:	6939      	ldr	r1, [r7, #16]
 8003a22:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003a26:	4013      	ands	r3, r2
 8003a28:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8003a2a:	2300      	movs	r3, #0
}
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	3720      	adds	r7, #32
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bd80      	pop	{r7, pc}

08003a34 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b088      	sub	sp, #32
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
 8003a3c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a44:	69fb      	ldr	r3, [r7, #28]
 8003a46:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003a48:	69fb      	ldr	r3, [r7, #28]
 8003a4a:	333c      	adds	r3, #60	@ 0x3c
 8003a4c:	3304      	adds	r3, #4
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	015a      	lsls	r2, r3, #5
 8003a56:	69bb      	ldr	r3, [r7, #24]
 8003a58:	4413      	add	r3, r2
 8003a5a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a5e:	689b      	ldr	r3, [r3, #8]
 8003a60:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	799b      	ldrb	r3, [r3, #6]
 8003a66:	2b01      	cmp	r3, #1
 8003a68:	d17b      	bne.n	8003b62 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	f003 0308 	and.w	r3, r3, #8
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d015      	beq.n	8003aa0 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003a74:	697b      	ldr	r3, [r7, #20]
 8003a76:	4a61      	ldr	r2, [pc, #388]	@ (8003bfc <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	f240 80b9 	bls.w	8003bf0 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003a7e:	693b      	ldr	r3, [r7, #16]
 8003a80:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	f000 80b3 	beq.w	8003bf0 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	015a      	lsls	r2, r3, #5
 8003a8e:	69bb      	ldr	r3, [r7, #24]
 8003a90:	4413      	add	r3, r2
 8003a92:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a96:	461a      	mov	r2, r3
 8003a98:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003a9c:	6093      	str	r3, [r2, #8]
 8003a9e:	e0a7      	b.n	8003bf0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003aa0:	693b      	ldr	r3, [r7, #16]
 8003aa2:	f003 0320 	and.w	r3, r3, #32
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d009      	beq.n	8003abe <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	015a      	lsls	r2, r3, #5
 8003aae:	69bb      	ldr	r3, [r7, #24]
 8003ab0:	4413      	add	r3, r2
 8003ab2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ab6:	461a      	mov	r2, r3
 8003ab8:	2320      	movs	r3, #32
 8003aba:	6093      	str	r3, [r2, #8]
 8003abc:	e098      	b.n	8003bf0 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003abe:	693b      	ldr	r3, [r7, #16]
 8003ac0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	f040 8093 	bne.w	8003bf0 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	4a4b      	ldr	r2, [pc, #300]	@ (8003bfc <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d90f      	bls.n	8003af2 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d00a      	beq.n	8003af2 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	015a      	lsls	r2, r3, #5
 8003ae0:	69bb      	ldr	r3, [r7, #24]
 8003ae2:	4413      	add	r3, r2
 8003ae4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ae8:	461a      	mov	r2, r3
 8003aea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003aee:	6093      	str	r3, [r2, #8]
 8003af0:	e07e      	b.n	8003bf0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003af2:	683a      	ldr	r2, [r7, #0]
 8003af4:	4613      	mov	r3, r2
 8003af6:	00db      	lsls	r3, r3, #3
 8003af8:	4413      	add	r3, r2
 8003afa:	009b      	lsls	r3, r3, #2
 8003afc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003b00:	687a      	ldr	r2, [r7, #4]
 8003b02:	4413      	add	r3, r2
 8003b04:	3304      	adds	r3, #4
 8003b06:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	6a1a      	ldr	r2, [r3, #32]
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	0159      	lsls	r1, r3, #5
 8003b10:	69bb      	ldr	r3, [r7, #24]
 8003b12:	440b      	add	r3, r1
 8003b14:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b18:	691b      	ldr	r3, [r3, #16]
 8003b1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b1e:	1ad2      	subs	r2, r2, r3
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d114      	bne.n	8003b54 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	691b      	ldr	r3, [r3, #16]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d109      	bne.n	8003b46 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6818      	ldr	r0, [r3, #0]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003b3c:	461a      	mov	r2, r3
 8003b3e:	2101      	movs	r1, #1
 8003b40:	f003 fad4 	bl	80070ec <USB_EP0_OutStart>
 8003b44:	e006      	b.n	8003b54 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	68da      	ldr	r2, [r3, #12]
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	695b      	ldr	r3, [r3, #20]
 8003b4e:	441a      	add	r2, r3
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	b2db      	uxtb	r3, r3
 8003b58:	4619      	mov	r1, r3
 8003b5a:	6878      	ldr	r0, [r7, #4]
 8003b5c:	f005 fdb8 	bl	80096d0 <HAL_PCD_DataOutStageCallback>
 8003b60:	e046      	b.n	8003bf0 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003b62:	697b      	ldr	r3, [r7, #20]
 8003b64:	4a26      	ldr	r2, [pc, #152]	@ (8003c00 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d124      	bne.n	8003bb4 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003b6a:	693b      	ldr	r3, [r7, #16]
 8003b6c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d00a      	beq.n	8003b8a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	015a      	lsls	r2, r3, #5
 8003b78:	69bb      	ldr	r3, [r7, #24]
 8003b7a:	4413      	add	r3, r2
 8003b7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b80:	461a      	mov	r2, r3
 8003b82:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003b86:	6093      	str	r3, [r2, #8]
 8003b88:	e032      	b.n	8003bf0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003b8a:	693b      	ldr	r3, [r7, #16]
 8003b8c:	f003 0320 	and.w	r3, r3, #32
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d008      	beq.n	8003ba6 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	015a      	lsls	r2, r3, #5
 8003b98:	69bb      	ldr	r3, [r7, #24]
 8003b9a:	4413      	add	r3, r2
 8003b9c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ba0:	461a      	mov	r2, r3
 8003ba2:	2320      	movs	r3, #32
 8003ba4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	b2db      	uxtb	r3, r3
 8003baa:	4619      	mov	r1, r3
 8003bac:	6878      	ldr	r0, [r7, #4]
 8003bae:	f005 fd8f 	bl	80096d0 <HAL_PCD_DataOutStageCallback>
 8003bb2:	e01d      	b.n	8003bf0 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d114      	bne.n	8003be4 <PCD_EP_OutXfrComplete_int+0x1b0>
 8003bba:	6879      	ldr	r1, [r7, #4]
 8003bbc:	683a      	ldr	r2, [r7, #0]
 8003bbe:	4613      	mov	r3, r2
 8003bc0:	00db      	lsls	r3, r3, #3
 8003bc2:	4413      	add	r3, r2
 8003bc4:	009b      	lsls	r3, r3, #2
 8003bc6:	440b      	add	r3, r1
 8003bc8:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d108      	bne.n	8003be4 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6818      	ldr	r0, [r3, #0]
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003bdc:	461a      	mov	r2, r3
 8003bde:	2100      	movs	r1, #0
 8003be0:	f003 fa84 	bl	80070ec <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	b2db      	uxtb	r3, r3
 8003be8:	4619      	mov	r1, r3
 8003bea:	6878      	ldr	r0, [r7, #4]
 8003bec:	f005 fd70 	bl	80096d0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003bf0:	2300      	movs	r3, #0
}
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	3720      	adds	r7, #32
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd80      	pop	{r7, pc}
 8003bfa:	bf00      	nop
 8003bfc:	4f54300a 	.word	0x4f54300a
 8003c00:	4f54310a 	.word	0x4f54310a

08003c04 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b086      	sub	sp, #24
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
 8003c0c:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c14:	697b      	ldr	r3, [r7, #20]
 8003c16:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	333c      	adds	r3, #60	@ 0x3c
 8003c1c:	3304      	adds	r3, #4
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	015a      	lsls	r2, r3, #5
 8003c26:	693b      	ldr	r3, [r7, #16]
 8003c28:	4413      	add	r3, r2
 8003c2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c2e:	689b      	ldr	r3, [r3, #8]
 8003c30:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	4a15      	ldr	r2, [pc, #84]	@ (8003c8c <PCD_EP_OutSetupPacket_int+0x88>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d90e      	bls.n	8003c58 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003c3a:	68bb      	ldr	r3, [r7, #8]
 8003c3c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d009      	beq.n	8003c58 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	015a      	lsls	r2, r3, #5
 8003c48:	693b      	ldr	r3, [r7, #16]
 8003c4a:	4413      	add	r3, r2
 8003c4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c50:	461a      	mov	r2, r3
 8003c52:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003c56:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003c58:	6878      	ldr	r0, [r7, #4]
 8003c5a:	f005 fd27 	bl	80096ac <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	4a0a      	ldr	r2, [pc, #40]	@ (8003c8c <PCD_EP_OutSetupPacket_int+0x88>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d90c      	bls.n	8003c80 <PCD_EP_OutSetupPacket_int+0x7c>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	799b      	ldrb	r3, [r3, #6]
 8003c6a:	2b01      	cmp	r3, #1
 8003c6c:	d108      	bne.n	8003c80 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6818      	ldr	r0, [r3, #0]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003c78:	461a      	mov	r2, r3
 8003c7a:	2101      	movs	r1, #1
 8003c7c:	f003 fa36 	bl	80070ec <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003c80:	2300      	movs	r3, #0
}
 8003c82:	4618      	mov	r0, r3
 8003c84:	3718      	adds	r7, #24
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bd80      	pop	{r7, pc}
 8003c8a:	bf00      	nop
 8003c8c:	4f54300a 	.word	0x4f54300a

08003c90 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003c90:	b480      	push	{r7}
 8003c92:	b085      	sub	sp, #20
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
 8003c98:	460b      	mov	r3, r1
 8003c9a:	70fb      	strb	r3, [r7, #3]
 8003c9c:	4613      	mov	r3, r2
 8003c9e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ca6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003ca8:	78fb      	ldrb	r3, [r7, #3]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d107      	bne.n	8003cbe <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003cae:	883b      	ldrh	r3, [r7, #0]
 8003cb0:	0419      	lsls	r1, r3, #16
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	68ba      	ldr	r2, [r7, #8]
 8003cb8:	430a      	orrs	r2, r1
 8003cba:	629a      	str	r2, [r3, #40]	@ 0x28
 8003cbc:	e028      	b.n	8003d10 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cc4:	0c1b      	lsrs	r3, r3, #16
 8003cc6:	68ba      	ldr	r2, [r7, #8]
 8003cc8:	4413      	add	r3, r2
 8003cca:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003ccc:	2300      	movs	r3, #0
 8003cce:	73fb      	strb	r3, [r7, #15]
 8003cd0:	e00d      	b.n	8003cee <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681a      	ldr	r2, [r3, #0]
 8003cd6:	7bfb      	ldrb	r3, [r7, #15]
 8003cd8:	3340      	adds	r3, #64	@ 0x40
 8003cda:	009b      	lsls	r3, r3, #2
 8003cdc:	4413      	add	r3, r2
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	0c1b      	lsrs	r3, r3, #16
 8003ce2:	68ba      	ldr	r2, [r7, #8]
 8003ce4:	4413      	add	r3, r2
 8003ce6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003ce8:	7bfb      	ldrb	r3, [r7, #15]
 8003cea:	3301      	adds	r3, #1
 8003cec:	73fb      	strb	r3, [r7, #15]
 8003cee:	7bfa      	ldrb	r2, [r7, #15]
 8003cf0:	78fb      	ldrb	r3, [r7, #3]
 8003cf2:	3b01      	subs	r3, #1
 8003cf4:	429a      	cmp	r2, r3
 8003cf6:	d3ec      	bcc.n	8003cd2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003cf8:	883b      	ldrh	r3, [r7, #0]
 8003cfa:	0418      	lsls	r0, r3, #16
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6819      	ldr	r1, [r3, #0]
 8003d00:	78fb      	ldrb	r3, [r7, #3]
 8003d02:	3b01      	subs	r3, #1
 8003d04:	68ba      	ldr	r2, [r7, #8]
 8003d06:	4302      	orrs	r2, r0
 8003d08:	3340      	adds	r3, #64	@ 0x40
 8003d0a:	009b      	lsls	r3, r3, #2
 8003d0c:	440b      	add	r3, r1
 8003d0e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003d10:	2300      	movs	r3, #0
}
 8003d12:	4618      	mov	r0, r3
 8003d14:	3714      	adds	r7, #20
 8003d16:	46bd      	mov	sp, r7
 8003d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1c:	4770      	bx	lr

08003d1e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003d1e:	b480      	push	{r7}
 8003d20:	b083      	sub	sp, #12
 8003d22:	af00      	add	r7, sp, #0
 8003d24:	6078      	str	r0, [r7, #4]
 8003d26:	460b      	mov	r3, r1
 8003d28:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	887a      	ldrh	r2, [r7, #2]
 8003d30:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003d32:	2300      	movs	r3, #0
}
 8003d34:	4618      	mov	r0, r3
 8003d36:	370c      	adds	r7, #12
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3e:	4770      	bx	lr

08003d40 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003d40:	b480      	push	{r7}
 8003d42:	b083      	sub	sp, #12
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
 8003d48:	460b      	mov	r3, r1
 8003d4a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003d4c:	bf00      	nop
 8003d4e:	370c      	adds	r7, #12
 8003d50:	46bd      	mov	sp, r7
 8003d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d56:	4770      	bx	lr

08003d58 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b086      	sub	sp, #24
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d101      	bne.n	8003d6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d66:	2301      	movs	r3, #1
 8003d68:	e267      	b.n	800423a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f003 0301 	and.w	r3, r3, #1
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d075      	beq.n	8003e62 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003d76:	4b88      	ldr	r3, [pc, #544]	@ (8003f98 <HAL_RCC_OscConfig+0x240>)
 8003d78:	689b      	ldr	r3, [r3, #8]
 8003d7a:	f003 030c 	and.w	r3, r3, #12
 8003d7e:	2b04      	cmp	r3, #4
 8003d80:	d00c      	beq.n	8003d9c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d82:	4b85      	ldr	r3, [pc, #532]	@ (8003f98 <HAL_RCC_OscConfig+0x240>)
 8003d84:	689b      	ldr	r3, [r3, #8]
 8003d86:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003d8a:	2b08      	cmp	r3, #8
 8003d8c:	d112      	bne.n	8003db4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d8e:	4b82      	ldr	r3, [pc, #520]	@ (8003f98 <HAL_RCC_OscConfig+0x240>)
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d96:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003d9a:	d10b      	bne.n	8003db4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d9c:	4b7e      	ldr	r3, [pc, #504]	@ (8003f98 <HAL_RCC_OscConfig+0x240>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d05b      	beq.n	8003e60 <HAL_RCC_OscConfig+0x108>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d157      	bne.n	8003e60 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003db0:	2301      	movs	r3, #1
 8003db2:	e242      	b.n	800423a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003dbc:	d106      	bne.n	8003dcc <HAL_RCC_OscConfig+0x74>
 8003dbe:	4b76      	ldr	r3, [pc, #472]	@ (8003f98 <HAL_RCC_OscConfig+0x240>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a75      	ldr	r2, [pc, #468]	@ (8003f98 <HAL_RCC_OscConfig+0x240>)
 8003dc4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003dc8:	6013      	str	r3, [r2, #0]
 8003dca:	e01d      	b.n	8003e08 <HAL_RCC_OscConfig+0xb0>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003dd4:	d10c      	bne.n	8003df0 <HAL_RCC_OscConfig+0x98>
 8003dd6:	4b70      	ldr	r3, [pc, #448]	@ (8003f98 <HAL_RCC_OscConfig+0x240>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a6f      	ldr	r2, [pc, #444]	@ (8003f98 <HAL_RCC_OscConfig+0x240>)
 8003ddc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003de0:	6013      	str	r3, [r2, #0]
 8003de2:	4b6d      	ldr	r3, [pc, #436]	@ (8003f98 <HAL_RCC_OscConfig+0x240>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a6c      	ldr	r2, [pc, #432]	@ (8003f98 <HAL_RCC_OscConfig+0x240>)
 8003de8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003dec:	6013      	str	r3, [r2, #0]
 8003dee:	e00b      	b.n	8003e08 <HAL_RCC_OscConfig+0xb0>
 8003df0:	4b69      	ldr	r3, [pc, #420]	@ (8003f98 <HAL_RCC_OscConfig+0x240>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4a68      	ldr	r2, [pc, #416]	@ (8003f98 <HAL_RCC_OscConfig+0x240>)
 8003df6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003dfa:	6013      	str	r3, [r2, #0]
 8003dfc:	4b66      	ldr	r3, [pc, #408]	@ (8003f98 <HAL_RCC_OscConfig+0x240>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a65      	ldr	r2, [pc, #404]	@ (8003f98 <HAL_RCC_OscConfig+0x240>)
 8003e02:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003e06:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d013      	beq.n	8003e38 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e10:	f7fd fe1e 	bl	8001a50 <HAL_GetTick>
 8003e14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e16:	e008      	b.n	8003e2a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e18:	f7fd fe1a 	bl	8001a50 <HAL_GetTick>
 8003e1c:	4602      	mov	r2, r0
 8003e1e:	693b      	ldr	r3, [r7, #16]
 8003e20:	1ad3      	subs	r3, r2, r3
 8003e22:	2b64      	cmp	r3, #100	@ 0x64
 8003e24:	d901      	bls.n	8003e2a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003e26:	2303      	movs	r3, #3
 8003e28:	e207      	b.n	800423a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e2a:	4b5b      	ldr	r3, [pc, #364]	@ (8003f98 <HAL_RCC_OscConfig+0x240>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d0f0      	beq.n	8003e18 <HAL_RCC_OscConfig+0xc0>
 8003e36:	e014      	b.n	8003e62 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e38:	f7fd fe0a 	bl	8001a50 <HAL_GetTick>
 8003e3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e3e:	e008      	b.n	8003e52 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e40:	f7fd fe06 	bl	8001a50 <HAL_GetTick>
 8003e44:	4602      	mov	r2, r0
 8003e46:	693b      	ldr	r3, [r7, #16]
 8003e48:	1ad3      	subs	r3, r2, r3
 8003e4a:	2b64      	cmp	r3, #100	@ 0x64
 8003e4c:	d901      	bls.n	8003e52 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003e4e:	2303      	movs	r3, #3
 8003e50:	e1f3      	b.n	800423a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e52:	4b51      	ldr	r3, [pc, #324]	@ (8003f98 <HAL_RCC_OscConfig+0x240>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d1f0      	bne.n	8003e40 <HAL_RCC_OscConfig+0xe8>
 8003e5e:	e000      	b.n	8003e62 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f003 0302 	and.w	r3, r3, #2
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d063      	beq.n	8003f36 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003e6e:	4b4a      	ldr	r3, [pc, #296]	@ (8003f98 <HAL_RCC_OscConfig+0x240>)
 8003e70:	689b      	ldr	r3, [r3, #8]
 8003e72:	f003 030c 	and.w	r3, r3, #12
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d00b      	beq.n	8003e92 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e7a:	4b47      	ldr	r3, [pc, #284]	@ (8003f98 <HAL_RCC_OscConfig+0x240>)
 8003e7c:	689b      	ldr	r3, [r3, #8]
 8003e7e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003e82:	2b08      	cmp	r3, #8
 8003e84:	d11c      	bne.n	8003ec0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e86:	4b44      	ldr	r3, [pc, #272]	@ (8003f98 <HAL_RCC_OscConfig+0x240>)
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d116      	bne.n	8003ec0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e92:	4b41      	ldr	r3, [pc, #260]	@ (8003f98 <HAL_RCC_OscConfig+0x240>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f003 0302 	and.w	r3, r3, #2
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d005      	beq.n	8003eaa <HAL_RCC_OscConfig+0x152>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	68db      	ldr	r3, [r3, #12]
 8003ea2:	2b01      	cmp	r3, #1
 8003ea4:	d001      	beq.n	8003eaa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	e1c7      	b.n	800423a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003eaa:	4b3b      	ldr	r3, [pc, #236]	@ (8003f98 <HAL_RCC_OscConfig+0x240>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	691b      	ldr	r3, [r3, #16]
 8003eb6:	00db      	lsls	r3, r3, #3
 8003eb8:	4937      	ldr	r1, [pc, #220]	@ (8003f98 <HAL_RCC_OscConfig+0x240>)
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ebe:	e03a      	b.n	8003f36 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	68db      	ldr	r3, [r3, #12]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d020      	beq.n	8003f0a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ec8:	4b34      	ldr	r3, [pc, #208]	@ (8003f9c <HAL_RCC_OscConfig+0x244>)
 8003eca:	2201      	movs	r2, #1
 8003ecc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ece:	f7fd fdbf 	bl	8001a50 <HAL_GetTick>
 8003ed2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ed4:	e008      	b.n	8003ee8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ed6:	f7fd fdbb 	bl	8001a50 <HAL_GetTick>
 8003eda:	4602      	mov	r2, r0
 8003edc:	693b      	ldr	r3, [r7, #16]
 8003ede:	1ad3      	subs	r3, r2, r3
 8003ee0:	2b02      	cmp	r3, #2
 8003ee2:	d901      	bls.n	8003ee8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003ee4:	2303      	movs	r3, #3
 8003ee6:	e1a8      	b.n	800423a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ee8:	4b2b      	ldr	r3, [pc, #172]	@ (8003f98 <HAL_RCC_OscConfig+0x240>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f003 0302 	and.w	r3, r3, #2
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d0f0      	beq.n	8003ed6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ef4:	4b28      	ldr	r3, [pc, #160]	@ (8003f98 <HAL_RCC_OscConfig+0x240>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	691b      	ldr	r3, [r3, #16]
 8003f00:	00db      	lsls	r3, r3, #3
 8003f02:	4925      	ldr	r1, [pc, #148]	@ (8003f98 <HAL_RCC_OscConfig+0x240>)
 8003f04:	4313      	orrs	r3, r2
 8003f06:	600b      	str	r3, [r1, #0]
 8003f08:	e015      	b.n	8003f36 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f0a:	4b24      	ldr	r3, [pc, #144]	@ (8003f9c <HAL_RCC_OscConfig+0x244>)
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f10:	f7fd fd9e 	bl	8001a50 <HAL_GetTick>
 8003f14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f16:	e008      	b.n	8003f2a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f18:	f7fd fd9a 	bl	8001a50 <HAL_GetTick>
 8003f1c:	4602      	mov	r2, r0
 8003f1e:	693b      	ldr	r3, [r7, #16]
 8003f20:	1ad3      	subs	r3, r2, r3
 8003f22:	2b02      	cmp	r3, #2
 8003f24:	d901      	bls.n	8003f2a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003f26:	2303      	movs	r3, #3
 8003f28:	e187      	b.n	800423a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f2a:	4b1b      	ldr	r3, [pc, #108]	@ (8003f98 <HAL_RCC_OscConfig+0x240>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f003 0302 	and.w	r3, r3, #2
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d1f0      	bne.n	8003f18 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f003 0308 	and.w	r3, r3, #8
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d036      	beq.n	8003fb0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	695b      	ldr	r3, [r3, #20]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d016      	beq.n	8003f78 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f4a:	4b15      	ldr	r3, [pc, #84]	@ (8003fa0 <HAL_RCC_OscConfig+0x248>)
 8003f4c:	2201      	movs	r2, #1
 8003f4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f50:	f7fd fd7e 	bl	8001a50 <HAL_GetTick>
 8003f54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f56:	e008      	b.n	8003f6a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f58:	f7fd fd7a 	bl	8001a50 <HAL_GetTick>
 8003f5c:	4602      	mov	r2, r0
 8003f5e:	693b      	ldr	r3, [r7, #16]
 8003f60:	1ad3      	subs	r3, r2, r3
 8003f62:	2b02      	cmp	r3, #2
 8003f64:	d901      	bls.n	8003f6a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003f66:	2303      	movs	r3, #3
 8003f68:	e167      	b.n	800423a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f6a:	4b0b      	ldr	r3, [pc, #44]	@ (8003f98 <HAL_RCC_OscConfig+0x240>)
 8003f6c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f6e:	f003 0302 	and.w	r3, r3, #2
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d0f0      	beq.n	8003f58 <HAL_RCC_OscConfig+0x200>
 8003f76:	e01b      	b.n	8003fb0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f78:	4b09      	ldr	r3, [pc, #36]	@ (8003fa0 <HAL_RCC_OscConfig+0x248>)
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f7e:	f7fd fd67 	bl	8001a50 <HAL_GetTick>
 8003f82:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f84:	e00e      	b.n	8003fa4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f86:	f7fd fd63 	bl	8001a50 <HAL_GetTick>
 8003f8a:	4602      	mov	r2, r0
 8003f8c:	693b      	ldr	r3, [r7, #16]
 8003f8e:	1ad3      	subs	r3, r2, r3
 8003f90:	2b02      	cmp	r3, #2
 8003f92:	d907      	bls.n	8003fa4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003f94:	2303      	movs	r3, #3
 8003f96:	e150      	b.n	800423a <HAL_RCC_OscConfig+0x4e2>
 8003f98:	40023800 	.word	0x40023800
 8003f9c:	42470000 	.word	0x42470000
 8003fa0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fa4:	4b88      	ldr	r3, [pc, #544]	@ (80041c8 <HAL_RCC_OscConfig+0x470>)
 8003fa6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003fa8:	f003 0302 	and.w	r3, r3, #2
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d1ea      	bne.n	8003f86 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f003 0304 	and.w	r3, r3, #4
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	f000 8097 	beq.w	80040ec <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003fc2:	4b81      	ldr	r3, [pc, #516]	@ (80041c8 <HAL_RCC_OscConfig+0x470>)
 8003fc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fc6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d10f      	bne.n	8003fee <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fce:	2300      	movs	r3, #0
 8003fd0:	60bb      	str	r3, [r7, #8]
 8003fd2:	4b7d      	ldr	r3, [pc, #500]	@ (80041c8 <HAL_RCC_OscConfig+0x470>)
 8003fd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fd6:	4a7c      	ldr	r2, [pc, #496]	@ (80041c8 <HAL_RCC_OscConfig+0x470>)
 8003fd8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003fdc:	6413      	str	r3, [r2, #64]	@ 0x40
 8003fde:	4b7a      	ldr	r3, [pc, #488]	@ (80041c8 <HAL_RCC_OscConfig+0x470>)
 8003fe0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fe2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003fe6:	60bb      	str	r3, [r7, #8]
 8003fe8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003fea:	2301      	movs	r3, #1
 8003fec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fee:	4b77      	ldr	r3, [pc, #476]	@ (80041cc <HAL_RCC_OscConfig+0x474>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d118      	bne.n	800402c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ffa:	4b74      	ldr	r3, [pc, #464]	@ (80041cc <HAL_RCC_OscConfig+0x474>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a73      	ldr	r2, [pc, #460]	@ (80041cc <HAL_RCC_OscConfig+0x474>)
 8004000:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004004:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004006:	f7fd fd23 	bl	8001a50 <HAL_GetTick>
 800400a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800400c:	e008      	b.n	8004020 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800400e:	f7fd fd1f 	bl	8001a50 <HAL_GetTick>
 8004012:	4602      	mov	r2, r0
 8004014:	693b      	ldr	r3, [r7, #16]
 8004016:	1ad3      	subs	r3, r2, r3
 8004018:	2b02      	cmp	r3, #2
 800401a:	d901      	bls.n	8004020 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800401c:	2303      	movs	r3, #3
 800401e:	e10c      	b.n	800423a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004020:	4b6a      	ldr	r3, [pc, #424]	@ (80041cc <HAL_RCC_OscConfig+0x474>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004028:	2b00      	cmp	r3, #0
 800402a:	d0f0      	beq.n	800400e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	689b      	ldr	r3, [r3, #8]
 8004030:	2b01      	cmp	r3, #1
 8004032:	d106      	bne.n	8004042 <HAL_RCC_OscConfig+0x2ea>
 8004034:	4b64      	ldr	r3, [pc, #400]	@ (80041c8 <HAL_RCC_OscConfig+0x470>)
 8004036:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004038:	4a63      	ldr	r2, [pc, #396]	@ (80041c8 <HAL_RCC_OscConfig+0x470>)
 800403a:	f043 0301 	orr.w	r3, r3, #1
 800403e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004040:	e01c      	b.n	800407c <HAL_RCC_OscConfig+0x324>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	689b      	ldr	r3, [r3, #8]
 8004046:	2b05      	cmp	r3, #5
 8004048:	d10c      	bne.n	8004064 <HAL_RCC_OscConfig+0x30c>
 800404a:	4b5f      	ldr	r3, [pc, #380]	@ (80041c8 <HAL_RCC_OscConfig+0x470>)
 800404c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800404e:	4a5e      	ldr	r2, [pc, #376]	@ (80041c8 <HAL_RCC_OscConfig+0x470>)
 8004050:	f043 0304 	orr.w	r3, r3, #4
 8004054:	6713      	str	r3, [r2, #112]	@ 0x70
 8004056:	4b5c      	ldr	r3, [pc, #368]	@ (80041c8 <HAL_RCC_OscConfig+0x470>)
 8004058:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800405a:	4a5b      	ldr	r2, [pc, #364]	@ (80041c8 <HAL_RCC_OscConfig+0x470>)
 800405c:	f043 0301 	orr.w	r3, r3, #1
 8004060:	6713      	str	r3, [r2, #112]	@ 0x70
 8004062:	e00b      	b.n	800407c <HAL_RCC_OscConfig+0x324>
 8004064:	4b58      	ldr	r3, [pc, #352]	@ (80041c8 <HAL_RCC_OscConfig+0x470>)
 8004066:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004068:	4a57      	ldr	r2, [pc, #348]	@ (80041c8 <HAL_RCC_OscConfig+0x470>)
 800406a:	f023 0301 	bic.w	r3, r3, #1
 800406e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004070:	4b55      	ldr	r3, [pc, #340]	@ (80041c8 <HAL_RCC_OscConfig+0x470>)
 8004072:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004074:	4a54      	ldr	r2, [pc, #336]	@ (80041c8 <HAL_RCC_OscConfig+0x470>)
 8004076:	f023 0304 	bic.w	r3, r3, #4
 800407a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	689b      	ldr	r3, [r3, #8]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d015      	beq.n	80040b0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004084:	f7fd fce4 	bl	8001a50 <HAL_GetTick>
 8004088:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800408a:	e00a      	b.n	80040a2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800408c:	f7fd fce0 	bl	8001a50 <HAL_GetTick>
 8004090:	4602      	mov	r2, r0
 8004092:	693b      	ldr	r3, [r7, #16]
 8004094:	1ad3      	subs	r3, r2, r3
 8004096:	f241 3288 	movw	r2, #5000	@ 0x1388
 800409a:	4293      	cmp	r3, r2
 800409c:	d901      	bls.n	80040a2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800409e:	2303      	movs	r3, #3
 80040a0:	e0cb      	b.n	800423a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040a2:	4b49      	ldr	r3, [pc, #292]	@ (80041c8 <HAL_RCC_OscConfig+0x470>)
 80040a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040a6:	f003 0302 	and.w	r3, r3, #2
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d0ee      	beq.n	800408c <HAL_RCC_OscConfig+0x334>
 80040ae:	e014      	b.n	80040da <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040b0:	f7fd fcce 	bl	8001a50 <HAL_GetTick>
 80040b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040b6:	e00a      	b.n	80040ce <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80040b8:	f7fd fcca 	bl	8001a50 <HAL_GetTick>
 80040bc:	4602      	mov	r2, r0
 80040be:	693b      	ldr	r3, [r7, #16]
 80040c0:	1ad3      	subs	r3, r2, r3
 80040c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d901      	bls.n	80040ce <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80040ca:	2303      	movs	r3, #3
 80040cc:	e0b5      	b.n	800423a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040ce:	4b3e      	ldr	r3, [pc, #248]	@ (80041c8 <HAL_RCC_OscConfig+0x470>)
 80040d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040d2:	f003 0302 	and.w	r3, r3, #2
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d1ee      	bne.n	80040b8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80040da:	7dfb      	ldrb	r3, [r7, #23]
 80040dc:	2b01      	cmp	r3, #1
 80040de:	d105      	bne.n	80040ec <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040e0:	4b39      	ldr	r3, [pc, #228]	@ (80041c8 <HAL_RCC_OscConfig+0x470>)
 80040e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040e4:	4a38      	ldr	r2, [pc, #224]	@ (80041c8 <HAL_RCC_OscConfig+0x470>)
 80040e6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80040ea:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	699b      	ldr	r3, [r3, #24]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	f000 80a1 	beq.w	8004238 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80040f6:	4b34      	ldr	r3, [pc, #208]	@ (80041c8 <HAL_RCC_OscConfig+0x470>)
 80040f8:	689b      	ldr	r3, [r3, #8]
 80040fa:	f003 030c 	and.w	r3, r3, #12
 80040fe:	2b08      	cmp	r3, #8
 8004100:	d05c      	beq.n	80041bc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	699b      	ldr	r3, [r3, #24]
 8004106:	2b02      	cmp	r3, #2
 8004108:	d141      	bne.n	800418e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800410a:	4b31      	ldr	r3, [pc, #196]	@ (80041d0 <HAL_RCC_OscConfig+0x478>)
 800410c:	2200      	movs	r2, #0
 800410e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004110:	f7fd fc9e 	bl	8001a50 <HAL_GetTick>
 8004114:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004116:	e008      	b.n	800412a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004118:	f7fd fc9a 	bl	8001a50 <HAL_GetTick>
 800411c:	4602      	mov	r2, r0
 800411e:	693b      	ldr	r3, [r7, #16]
 8004120:	1ad3      	subs	r3, r2, r3
 8004122:	2b02      	cmp	r3, #2
 8004124:	d901      	bls.n	800412a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004126:	2303      	movs	r3, #3
 8004128:	e087      	b.n	800423a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800412a:	4b27      	ldr	r3, [pc, #156]	@ (80041c8 <HAL_RCC_OscConfig+0x470>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004132:	2b00      	cmp	r3, #0
 8004134:	d1f0      	bne.n	8004118 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	69da      	ldr	r2, [r3, #28]
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6a1b      	ldr	r3, [r3, #32]
 800413e:	431a      	orrs	r2, r3
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004144:	019b      	lsls	r3, r3, #6
 8004146:	431a      	orrs	r2, r3
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800414c:	085b      	lsrs	r3, r3, #1
 800414e:	3b01      	subs	r3, #1
 8004150:	041b      	lsls	r3, r3, #16
 8004152:	431a      	orrs	r2, r3
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004158:	061b      	lsls	r3, r3, #24
 800415a:	491b      	ldr	r1, [pc, #108]	@ (80041c8 <HAL_RCC_OscConfig+0x470>)
 800415c:	4313      	orrs	r3, r2
 800415e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004160:	4b1b      	ldr	r3, [pc, #108]	@ (80041d0 <HAL_RCC_OscConfig+0x478>)
 8004162:	2201      	movs	r2, #1
 8004164:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004166:	f7fd fc73 	bl	8001a50 <HAL_GetTick>
 800416a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800416c:	e008      	b.n	8004180 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800416e:	f7fd fc6f 	bl	8001a50 <HAL_GetTick>
 8004172:	4602      	mov	r2, r0
 8004174:	693b      	ldr	r3, [r7, #16]
 8004176:	1ad3      	subs	r3, r2, r3
 8004178:	2b02      	cmp	r3, #2
 800417a:	d901      	bls.n	8004180 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800417c:	2303      	movs	r3, #3
 800417e:	e05c      	b.n	800423a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004180:	4b11      	ldr	r3, [pc, #68]	@ (80041c8 <HAL_RCC_OscConfig+0x470>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004188:	2b00      	cmp	r3, #0
 800418a:	d0f0      	beq.n	800416e <HAL_RCC_OscConfig+0x416>
 800418c:	e054      	b.n	8004238 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800418e:	4b10      	ldr	r3, [pc, #64]	@ (80041d0 <HAL_RCC_OscConfig+0x478>)
 8004190:	2200      	movs	r2, #0
 8004192:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004194:	f7fd fc5c 	bl	8001a50 <HAL_GetTick>
 8004198:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800419a:	e008      	b.n	80041ae <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800419c:	f7fd fc58 	bl	8001a50 <HAL_GetTick>
 80041a0:	4602      	mov	r2, r0
 80041a2:	693b      	ldr	r3, [r7, #16]
 80041a4:	1ad3      	subs	r3, r2, r3
 80041a6:	2b02      	cmp	r3, #2
 80041a8:	d901      	bls.n	80041ae <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80041aa:	2303      	movs	r3, #3
 80041ac:	e045      	b.n	800423a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041ae:	4b06      	ldr	r3, [pc, #24]	@ (80041c8 <HAL_RCC_OscConfig+0x470>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d1f0      	bne.n	800419c <HAL_RCC_OscConfig+0x444>
 80041ba:	e03d      	b.n	8004238 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	699b      	ldr	r3, [r3, #24]
 80041c0:	2b01      	cmp	r3, #1
 80041c2:	d107      	bne.n	80041d4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80041c4:	2301      	movs	r3, #1
 80041c6:	e038      	b.n	800423a <HAL_RCC_OscConfig+0x4e2>
 80041c8:	40023800 	.word	0x40023800
 80041cc:	40007000 	.word	0x40007000
 80041d0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80041d4:	4b1b      	ldr	r3, [pc, #108]	@ (8004244 <HAL_RCC_OscConfig+0x4ec>)
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	699b      	ldr	r3, [r3, #24]
 80041de:	2b01      	cmp	r3, #1
 80041e0:	d028      	beq.n	8004234 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041ec:	429a      	cmp	r2, r3
 80041ee:	d121      	bne.n	8004234 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041fa:	429a      	cmp	r2, r3
 80041fc:	d11a      	bne.n	8004234 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80041fe:	68fa      	ldr	r2, [r7, #12]
 8004200:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004204:	4013      	ands	r3, r2
 8004206:	687a      	ldr	r2, [r7, #4]
 8004208:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800420a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800420c:	4293      	cmp	r3, r2
 800420e:	d111      	bne.n	8004234 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800421a:	085b      	lsrs	r3, r3, #1
 800421c:	3b01      	subs	r3, #1
 800421e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004220:	429a      	cmp	r2, r3
 8004222:	d107      	bne.n	8004234 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800422e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004230:	429a      	cmp	r2, r3
 8004232:	d001      	beq.n	8004238 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004234:	2301      	movs	r3, #1
 8004236:	e000      	b.n	800423a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004238:	2300      	movs	r3, #0
}
 800423a:	4618      	mov	r0, r3
 800423c:	3718      	adds	r7, #24
 800423e:	46bd      	mov	sp, r7
 8004240:	bd80      	pop	{r7, pc}
 8004242:	bf00      	nop
 8004244:	40023800 	.word	0x40023800

08004248 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b084      	sub	sp, #16
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
 8004250:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d101      	bne.n	800425c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004258:	2301      	movs	r3, #1
 800425a:	e0cc      	b.n	80043f6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800425c:	4b68      	ldr	r3, [pc, #416]	@ (8004400 <HAL_RCC_ClockConfig+0x1b8>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f003 030f 	and.w	r3, r3, #15
 8004264:	683a      	ldr	r2, [r7, #0]
 8004266:	429a      	cmp	r2, r3
 8004268:	d90c      	bls.n	8004284 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800426a:	4b65      	ldr	r3, [pc, #404]	@ (8004400 <HAL_RCC_ClockConfig+0x1b8>)
 800426c:	683a      	ldr	r2, [r7, #0]
 800426e:	b2d2      	uxtb	r2, r2
 8004270:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004272:	4b63      	ldr	r3, [pc, #396]	@ (8004400 <HAL_RCC_ClockConfig+0x1b8>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f003 030f 	and.w	r3, r3, #15
 800427a:	683a      	ldr	r2, [r7, #0]
 800427c:	429a      	cmp	r2, r3
 800427e:	d001      	beq.n	8004284 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004280:	2301      	movs	r3, #1
 8004282:	e0b8      	b.n	80043f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f003 0302 	and.w	r3, r3, #2
 800428c:	2b00      	cmp	r3, #0
 800428e:	d020      	beq.n	80042d2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f003 0304 	and.w	r3, r3, #4
 8004298:	2b00      	cmp	r3, #0
 800429a:	d005      	beq.n	80042a8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800429c:	4b59      	ldr	r3, [pc, #356]	@ (8004404 <HAL_RCC_ClockConfig+0x1bc>)
 800429e:	689b      	ldr	r3, [r3, #8]
 80042a0:	4a58      	ldr	r2, [pc, #352]	@ (8004404 <HAL_RCC_ClockConfig+0x1bc>)
 80042a2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80042a6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f003 0308 	and.w	r3, r3, #8
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d005      	beq.n	80042c0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80042b4:	4b53      	ldr	r3, [pc, #332]	@ (8004404 <HAL_RCC_ClockConfig+0x1bc>)
 80042b6:	689b      	ldr	r3, [r3, #8]
 80042b8:	4a52      	ldr	r2, [pc, #328]	@ (8004404 <HAL_RCC_ClockConfig+0x1bc>)
 80042ba:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80042be:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042c0:	4b50      	ldr	r3, [pc, #320]	@ (8004404 <HAL_RCC_ClockConfig+0x1bc>)
 80042c2:	689b      	ldr	r3, [r3, #8]
 80042c4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	689b      	ldr	r3, [r3, #8]
 80042cc:	494d      	ldr	r1, [pc, #308]	@ (8004404 <HAL_RCC_ClockConfig+0x1bc>)
 80042ce:	4313      	orrs	r3, r2
 80042d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f003 0301 	and.w	r3, r3, #1
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d044      	beq.n	8004368 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	2b01      	cmp	r3, #1
 80042e4:	d107      	bne.n	80042f6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042e6:	4b47      	ldr	r3, [pc, #284]	@ (8004404 <HAL_RCC_ClockConfig+0x1bc>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d119      	bne.n	8004326 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042f2:	2301      	movs	r3, #1
 80042f4:	e07f      	b.n	80043f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	2b02      	cmp	r3, #2
 80042fc:	d003      	beq.n	8004306 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004302:	2b03      	cmp	r3, #3
 8004304:	d107      	bne.n	8004316 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004306:	4b3f      	ldr	r3, [pc, #252]	@ (8004404 <HAL_RCC_ClockConfig+0x1bc>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800430e:	2b00      	cmp	r3, #0
 8004310:	d109      	bne.n	8004326 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004312:	2301      	movs	r3, #1
 8004314:	e06f      	b.n	80043f6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004316:	4b3b      	ldr	r3, [pc, #236]	@ (8004404 <HAL_RCC_ClockConfig+0x1bc>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f003 0302 	and.w	r3, r3, #2
 800431e:	2b00      	cmp	r3, #0
 8004320:	d101      	bne.n	8004326 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004322:	2301      	movs	r3, #1
 8004324:	e067      	b.n	80043f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004326:	4b37      	ldr	r3, [pc, #220]	@ (8004404 <HAL_RCC_ClockConfig+0x1bc>)
 8004328:	689b      	ldr	r3, [r3, #8]
 800432a:	f023 0203 	bic.w	r2, r3, #3
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	4934      	ldr	r1, [pc, #208]	@ (8004404 <HAL_RCC_ClockConfig+0x1bc>)
 8004334:	4313      	orrs	r3, r2
 8004336:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004338:	f7fd fb8a 	bl	8001a50 <HAL_GetTick>
 800433c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800433e:	e00a      	b.n	8004356 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004340:	f7fd fb86 	bl	8001a50 <HAL_GetTick>
 8004344:	4602      	mov	r2, r0
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	1ad3      	subs	r3, r2, r3
 800434a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800434e:	4293      	cmp	r3, r2
 8004350:	d901      	bls.n	8004356 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004352:	2303      	movs	r3, #3
 8004354:	e04f      	b.n	80043f6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004356:	4b2b      	ldr	r3, [pc, #172]	@ (8004404 <HAL_RCC_ClockConfig+0x1bc>)
 8004358:	689b      	ldr	r3, [r3, #8]
 800435a:	f003 020c 	and.w	r2, r3, #12
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	009b      	lsls	r3, r3, #2
 8004364:	429a      	cmp	r2, r3
 8004366:	d1eb      	bne.n	8004340 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004368:	4b25      	ldr	r3, [pc, #148]	@ (8004400 <HAL_RCC_ClockConfig+0x1b8>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f003 030f 	and.w	r3, r3, #15
 8004370:	683a      	ldr	r2, [r7, #0]
 8004372:	429a      	cmp	r2, r3
 8004374:	d20c      	bcs.n	8004390 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004376:	4b22      	ldr	r3, [pc, #136]	@ (8004400 <HAL_RCC_ClockConfig+0x1b8>)
 8004378:	683a      	ldr	r2, [r7, #0]
 800437a:	b2d2      	uxtb	r2, r2
 800437c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800437e:	4b20      	ldr	r3, [pc, #128]	@ (8004400 <HAL_RCC_ClockConfig+0x1b8>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f003 030f 	and.w	r3, r3, #15
 8004386:	683a      	ldr	r2, [r7, #0]
 8004388:	429a      	cmp	r2, r3
 800438a:	d001      	beq.n	8004390 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800438c:	2301      	movs	r3, #1
 800438e:	e032      	b.n	80043f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f003 0304 	and.w	r3, r3, #4
 8004398:	2b00      	cmp	r3, #0
 800439a:	d008      	beq.n	80043ae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800439c:	4b19      	ldr	r3, [pc, #100]	@ (8004404 <HAL_RCC_ClockConfig+0x1bc>)
 800439e:	689b      	ldr	r3, [r3, #8]
 80043a0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	68db      	ldr	r3, [r3, #12]
 80043a8:	4916      	ldr	r1, [pc, #88]	@ (8004404 <HAL_RCC_ClockConfig+0x1bc>)
 80043aa:	4313      	orrs	r3, r2
 80043ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f003 0308 	and.w	r3, r3, #8
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d009      	beq.n	80043ce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80043ba:	4b12      	ldr	r3, [pc, #72]	@ (8004404 <HAL_RCC_ClockConfig+0x1bc>)
 80043bc:	689b      	ldr	r3, [r3, #8]
 80043be:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	691b      	ldr	r3, [r3, #16]
 80043c6:	00db      	lsls	r3, r3, #3
 80043c8:	490e      	ldr	r1, [pc, #56]	@ (8004404 <HAL_RCC_ClockConfig+0x1bc>)
 80043ca:	4313      	orrs	r3, r2
 80043cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80043ce:	f000 f889 	bl	80044e4 <HAL_RCC_GetSysClockFreq>
 80043d2:	4602      	mov	r2, r0
 80043d4:	4b0b      	ldr	r3, [pc, #44]	@ (8004404 <HAL_RCC_ClockConfig+0x1bc>)
 80043d6:	689b      	ldr	r3, [r3, #8]
 80043d8:	091b      	lsrs	r3, r3, #4
 80043da:	f003 030f 	and.w	r3, r3, #15
 80043de:	490a      	ldr	r1, [pc, #40]	@ (8004408 <HAL_RCC_ClockConfig+0x1c0>)
 80043e0:	5ccb      	ldrb	r3, [r1, r3]
 80043e2:	fa22 f303 	lsr.w	r3, r2, r3
 80043e6:	4a09      	ldr	r2, [pc, #36]	@ (800440c <HAL_RCC_ClockConfig+0x1c4>)
 80043e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80043ea:	4b09      	ldr	r3, [pc, #36]	@ (8004410 <HAL_RCC_ClockConfig+0x1c8>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4618      	mov	r0, r3
 80043f0:	f7fd faea 	bl	80019c8 <HAL_InitTick>

  return HAL_OK;
 80043f4:	2300      	movs	r3, #0
}
 80043f6:	4618      	mov	r0, r3
 80043f8:	3710      	adds	r7, #16
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bd80      	pop	{r7, pc}
 80043fe:	bf00      	nop
 8004400:	40023c00 	.word	0x40023c00
 8004404:	40023800 	.word	0x40023800
 8004408:	0800b038 	.word	0x0800b038
 800440c:	20000000 	.word	0x20000000
 8004410:	20000004 	.word	0x20000004

08004414 <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b08c      	sub	sp, #48	@ 0x30
 8004418:	af00      	add	r7, sp, #0
 800441a:	60f8      	str	r0, [r7, #12]
 800441c:	60b9      	str	r1, [r7, #8]
 800441e:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d129      	bne.n	800447a <HAL_RCC_MCOConfig+0x66>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 8004426:	2300      	movs	r3, #0
 8004428:	61bb      	str	r3, [r7, #24]
 800442a:	4b2b      	ldr	r3, [pc, #172]	@ (80044d8 <HAL_RCC_MCOConfig+0xc4>)
 800442c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800442e:	4a2a      	ldr	r2, [pc, #168]	@ (80044d8 <HAL_RCC_MCOConfig+0xc4>)
 8004430:	f043 0301 	orr.w	r3, r3, #1
 8004434:	6313      	str	r3, [r2, #48]	@ 0x30
 8004436:	4b28      	ldr	r3, [pc, #160]	@ (80044d8 <HAL_RCC_MCOConfig+0xc4>)
 8004438:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800443a:	f003 0301 	and.w	r3, r3, #1
 800443e:	61bb      	str	r3, [r7, #24]
 8004440:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8004442:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004446:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004448:	2302      	movs	r3, #2
 800444a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800444c:	2303      	movs	r3, #3
 800444e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004450:	2300      	movs	r3, #0
 8004452:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8004454:	2300      	movs	r3, #0
 8004456:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8004458:	f107 031c 	add.w	r3, r7, #28
 800445c:	4619      	mov	r1, r3
 800445e:	481f      	ldr	r0, [pc, #124]	@ (80044dc <HAL_RCC_MCOConfig+0xc8>)
 8004460:	f7fe f832 	bl	80024c8 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8004464:	4b1c      	ldr	r3, [pc, #112]	@ (80044d8 <HAL_RCC_MCOConfig+0xc4>)
 8004466:	689b      	ldr	r3, [r3, #8]
 8004468:	f023 62ec 	bic.w	r2, r3, #123731968	@ 0x7600000
 800446c:	68b9      	ldr	r1, [r7, #8]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	430b      	orrs	r3, r1
 8004472:	4919      	ldr	r1, [pc, #100]	@ (80044d8 <HAL_RCC_MCOConfig+0xc4>)
 8004474:	4313      	orrs	r3, r2
 8004476:	608b      	str	r3, [r1, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 8004478:	e029      	b.n	80044ce <HAL_RCC_MCOConfig+0xba>
    __MCO2_CLK_ENABLE();
 800447a:	2300      	movs	r3, #0
 800447c:	617b      	str	r3, [r7, #20]
 800447e:	4b16      	ldr	r3, [pc, #88]	@ (80044d8 <HAL_RCC_MCOConfig+0xc4>)
 8004480:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004482:	4a15      	ldr	r2, [pc, #84]	@ (80044d8 <HAL_RCC_MCOConfig+0xc4>)
 8004484:	f043 0304 	orr.w	r3, r3, #4
 8004488:	6313      	str	r3, [r2, #48]	@ 0x30
 800448a:	4b13      	ldr	r3, [pc, #76]	@ (80044d8 <HAL_RCC_MCOConfig+0xc4>)
 800448c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800448e:	f003 0304 	and.w	r3, r3, #4
 8004492:	617b      	str	r3, [r7, #20]
 8004494:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8004496:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800449a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800449c:	2302      	movs	r3, #2
 800449e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80044a0:	2303      	movs	r3, #3
 80044a2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044a4:	2300      	movs	r3, #0
 80044a6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80044a8:	2300      	movs	r3, #0
 80044aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 80044ac:	f107 031c 	add.w	r3, r7, #28
 80044b0:	4619      	mov	r1, r3
 80044b2:	480b      	ldr	r0, [pc, #44]	@ (80044e0 <HAL_RCC_MCOConfig+0xcc>)
 80044b4:	f7fe f808 	bl	80024c8 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 80044b8:	4b07      	ldr	r3, [pc, #28]	@ (80044d8 <HAL_RCC_MCOConfig+0xc4>)
 80044ba:	689b      	ldr	r3, [r3, #8]
 80044bc:	f023 4278 	bic.w	r2, r3, #4160749568	@ 0xf8000000
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	00d9      	lsls	r1, r3, #3
 80044c4:	68bb      	ldr	r3, [r7, #8]
 80044c6:	430b      	orrs	r3, r1
 80044c8:	4903      	ldr	r1, [pc, #12]	@ (80044d8 <HAL_RCC_MCOConfig+0xc4>)
 80044ca:	4313      	orrs	r3, r2
 80044cc:	608b      	str	r3, [r1, #8]
}
 80044ce:	bf00      	nop
 80044d0:	3730      	adds	r7, #48	@ 0x30
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bd80      	pop	{r7, pc}
 80044d6:	bf00      	nop
 80044d8:	40023800 	.word	0x40023800
 80044dc:	40020000 	.word	0x40020000
 80044e0:	40020800 	.word	0x40020800

080044e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80044e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80044e8:	b094      	sub	sp, #80	@ 0x50
 80044ea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80044ec:	2300      	movs	r3, #0
 80044ee:	647b      	str	r3, [r7, #68]	@ 0x44
 80044f0:	2300      	movs	r3, #0
 80044f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80044f4:	2300      	movs	r3, #0
 80044f6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80044f8:	2300      	movs	r3, #0
 80044fa:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80044fc:	4b79      	ldr	r3, [pc, #484]	@ (80046e4 <HAL_RCC_GetSysClockFreq+0x200>)
 80044fe:	689b      	ldr	r3, [r3, #8]
 8004500:	f003 030c 	and.w	r3, r3, #12
 8004504:	2b08      	cmp	r3, #8
 8004506:	d00d      	beq.n	8004524 <HAL_RCC_GetSysClockFreq+0x40>
 8004508:	2b08      	cmp	r3, #8
 800450a:	f200 80e1 	bhi.w	80046d0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800450e:	2b00      	cmp	r3, #0
 8004510:	d002      	beq.n	8004518 <HAL_RCC_GetSysClockFreq+0x34>
 8004512:	2b04      	cmp	r3, #4
 8004514:	d003      	beq.n	800451e <HAL_RCC_GetSysClockFreq+0x3a>
 8004516:	e0db      	b.n	80046d0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004518:	4b73      	ldr	r3, [pc, #460]	@ (80046e8 <HAL_RCC_GetSysClockFreq+0x204>)
 800451a:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 800451c:	e0db      	b.n	80046d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800451e:	4b73      	ldr	r3, [pc, #460]	@ (80046ec <HAL_RCC_GetSysClockFreq+0x208>)
 8004520:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004522:	e0d8      	b.n	80046d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004524:	4b6f      	ldr	r3, [pc, #444]	@ (80046e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800452c:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800452e:	4b6d      	ldr	r3, [pc, #436]	@ (80046e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004536:	2b00      	cmp	r3, #0
 8004538:	d063      	beq.n	8004602 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800453a:	4b6a      	ldr	r3, [pc, #424]	@ (80046e4 <HAL_RCC_GetSysClockFreq+0x200>)
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	099b      	lsrs	r3, r3, #6
 8004540:	2200      	movs	r2, #0
 8004542:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004544:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004546:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004548:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800454c:	633b      	str	r3, [r7, #48]	@ 0x30
 800454e:	2300      	movs	r3, #0
 8004550:	637b      	str	r3, [r7, #52]	@ 0x34
 8004552:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004556:	4622      	mov	r2, r4
 8004558:	462b      	mov	r3, r5
 800455a:	f04f 0000 	mov.w	r0, #0
 800455e:	f04f 0100 	mov.w	r1, #0
 8004562:	0159      	lsls	r1, r3, #5
 8004564:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004568:	0150      	lsls	r0, r2, #5
 800456a:	4602      	mov	r2, r0
 800456c:	460b      	mov	r3, r1
 800456e:	4621      	mov	r1, r4
 8004570:	1a51      	subs	r1, r2, r1
 8004572:	6139      	str	r1, [r7, #16]
 8004574:	4629      	mov	r1, r5
 8004576:	eb63 0301 	sbc.w	r3, r3, r1
 800457a:	617b      	str	r3, [r7, #20]
 800457c:	f04f 0200 	mov.w	r2, #0
 8004580:	f04f 0300 	mov.w	r3, #0
 8004584:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004588:	4659      	mov	r1, fp
 800458a:	018b      	lsls	r3, r1, #6
 800458c:	4651      	mov	r1, sl
 800458e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004592:	4651      	mov	r1, sl
 8004594:	018a      	lsls	r2, r1, #6
 8004596:	4651      	mov	r1, sl
 8004598:	ebb2 0801 	subs.w	r8, r2, r1
 800459c:	4659      	mov	r1, fp
 800459e:	eb63 0901 	sbc.w	r9, r3, r1
 80045a2:	f04f 0200 	mov.w	r2, #0
 80045a6:	f04f 0300 	mov.w	r3, #0
 80045aa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80045ae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80045b2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80045b6:	4690      	mov	r8, r2
 80045b8:	4699      	mov	r9, r3
 80045ba:	4623      	mov	r3, r4
 80045bc:	eb18 0303 	adds.w	r3, r8, r3
 80045c0:	60bb      	str	r3, [r7, #8]
 80045c2:	462b      	mov	r3, r5
 80045c4:	eb49 0303 	adc.w	r3, r9, r3
 80045c8:	60fb      	str	r3, [r7, #12]
 80045ca:	f04f 0200 	mov.w	r2, #0
 80045ce:	f04f 0300 	mov.w	r3, #0
 80045d2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80045d6:	4629      	mov	r1, r5
 80045d8:	024b      	lsls	r3, r1, #9
 80045da:	4621      	mov	r1, r4
 80045dc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80045e0:	4621      	mov	r1, r4
 80045e2:	024a      	lsls	r2, r1, #9
 80045e4:	4610      	mov	r0, r2
 80045e6:	4619      	mov	r1, r3
 80045e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80045ea:	2200      	movs	r2, #0
 80045ec:	62bb      	str	r3, [r7, #40]	@ 0x28
 80045ee:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80045f0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80045f4:	f7fb fe54 	bl	80002a0 <__aeabi_uldivmod>
 80045f8:	4602      	mov	r2, r0
 80045fa:	460b      	mov	r3, r1
 80045fc:	4613      	mov	r3, r2
 80045fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004600:	e058      	b.n	80046b4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004602:	4b38      	ldr	r3, [pc, #224]	@ (80046e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	099b      	lsrs	r3, r3, #6
 8004608:	2200      	movs	r2, #0
 800460a:	4618      	mov	r0, r3
 800460c:	4611      	mov	r1, r2
 800460e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004612:	623b      	str	r3, [r7, #32]
 8004614:	2300      	movs	r3, #0
 8004616:	627b      	str	r3, [r7, #36]	@ 0x24
 8004618:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800461c:	4642      	mov	r2, r8
 800461e:	464b      	mov	r3, r9
 8004620:	f04f 0000 	mov.w	r0, #0
 8004624:	f04f 0100 	mov.w	r1, #0
 8004628:	0159      	lsls	r1, r3, #5
 800462a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800462e:	0150      	lsls	r0, r2, #5
 8004630:	4602      	mov	r2, r0
 8004632:	460b      	mov	r3, r1
 8004634:	4641      	mov	r1, r8
 8004636:	ebb2 0a01 	subs.w	sl, r2, r1
 800463a:	4649      	mov	r1, r9
 800463c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004640:	f04f 0200 	mov.w	r2, #0
 8004644:	f04f 0300 	mov.w	r3, #0
 8004648:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800464c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004650:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004654:	ebb2 040a 	subs.w	r4, r2, sl
 8004658:	eb63 050b 	sbc.w	r5, r3, fp
 800465c:	f04f 0200 	mov.w	r2, #0
 8004660:	f04f 0300 	mov.w	r3, #0
 8004664:	00eb      	lsls	r3, r5, #3
 8004666:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800466a:	00e2      	lsls	r2, r4, #3
 800466c:	4614      	mov	r4, r2
 800466e:	461d      	mov	r5, r3
 8004670:	4643      	mov	r3, r8
 8004672:	18e3      	adds	r3, r4, r3
 8004674:	603b      	str	r3, [r7, #0]
 8004676:	464b      	mov	r3, r9
 8004678:	eb45 0303 	adc.w	r3, r5, r3
 800467c:	607b      	str	r3, [r7, #4]
 800467e:	f04f 0200 	mov.w	r2, #0
 8004682:	f04f 0300 	mov.w	r3, #0
 8004686:	e9d7 4500 	ldrd	r4, r5, [r7]
 800468a:	4629      	mov	r1, r5
 800468c:	028b      	lsls	r3, r1, #10
 800468e:	4621      	mov	r1, r4
 8004690:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004694:	4621      	mov	r1, r4
 8004696:	028a      	lsls	r2, r1, #10
 8004698:	4610      	mov	r0, r2
 800469a:	4619      	mov	r1, r3
 800469c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800469e:	2200      	movs	r2, #0
 80046a0:	61bb      	str	r3, [r7, #24]
 80046a2:	61fa      	str	r2, [r7, #28]
 80046a4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80046a8:	f7fb fdfa 	bl	80002a0 <__aeabi_uldivmod>
 80046ac:	4602      	mov	r2, r0
 80046ae:	460b      	mov	r3, r1
 80046b0:	4613      	mov	r3, r2
 80046b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80046b4:	4b0b      	ldr	r3, [pc, #44]	@ (80046e4 <HAL_RCC_GetSysClockFreq+0x200>)
 80046b6:	685b      	ldr	r3, [r3, #4]
 80046b8:	0c1b      	lsrs	r3, r3, #16
 80046ba:	f003 0303 	and.w	r3, r3, #3
 80046be:	3301      	adds	r3, #1
 80046c0:	005b      	lsls	r3, r3, #1
 80046c2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 80046c4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80046c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80046c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80046cc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80046ce:	e002      	b.n	80046d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80046d0:	4b05      	ldr	r3, [pc, #20]	@ (80046e8 <HAL_RCC_GetSysClockFreq+0x204>)
 80046d2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80046d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80046d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80046d8:	4618      	mov	r0, r3
 80046da:	3750      	adds	r7, #80	@ 0x50
 80046dc:	46bd      	mov	sp, r7
 80046de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80046e2:	bf00      	nop
 80046e4:	40023800 	.word	0x40023800
 80046e8:	00f42400 	.word	0x00f42400
 80046ec:	007a1200 	.word	0x007a1200

080046f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80046f0:	b480      	push	{r7}
 80046f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80046f4:	4b03      	ldr	r3, [pc, #12]	@ (8004704 <HAL_RCC_GetHCLKFreq+0x14>)
 80046f6:	681b      	ldr	r3, [r3, #0]
}
 80046f8:	4618      	mov	r0, r3
 80046fa:	46bd      	mov	sp, r7
 80046fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004700:	4770      	bx	lr
 8004702:	bf00      	nop
 8004704:	20000000 	.word	0x20000000

08004708 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800470c:	f7ff fff0 	bl	80046f0 <HAL_RCC_GetHCLKFreq>
 8004710:	4602      	mov	r2, r0
 8004712:	4b05      	ldr	r3, [pc, #20]	@ (8004728 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004714:	689b      	ldr	r3, [r3, #8]
 8004716:	0a9b      	lsrs	r3, r3, #10
 8004718:	f003 0307 	and.w	r3, r3, #7
 800471c:	4903      	ldr	r1, [pc, #12]	@ (800472c <HAL_RCC_GetPCLK1Freq+0x24>)
 800471e:	5ccb      	ldrb	r3, [r1, r3]
 8004720:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004724:	4618      	mov	r0, r3
 8004726:	bd80      	pop	{r7, pc}
 8004728:	40023800 	.word	0x40023800
 800472c:	0800b048 	.word	0x0800b048

08004730 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004734:	f7ff ffdc 	bl	80046f0 <HAL_RCC_GetHCLKFreq>
 8004738:	4602      	mov	r2, r0
 800473a:	4b05      	ldr	r3, [pc, #20]	@ (8004750 <HAL_RCC_GetPCLK2Freq+0x20>)
 800473c:	689b      	ldr	r3, [r3, #8]
 800473e:	0b5b      	lsrs	r3, r3, #13
 8004740:	f003 0307 	and.w	r3, r3, #7
 8004744:	4903      	ldr	r1, [pc, #12]	@ (8004754 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004746:	5ccb      	ldrb	r3, [r1, r3]
 8004748:	fa22 f303 	lsr.w	r3, r2, r3
}
 800474c:	4618      	mov	r0, r3
 800474e:	bd80      	pop	{r7, pc}
 8004750:	40023800 	.word	0x40023800
 8004754:	0800b048 	.word	0x0800b048

08004758 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b082      	sub	sp, #8
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d101      	bne.n	800476a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004766:	2301      	movs	r3, #1
 8004768:	e041      	b.n	80047ee <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004770:	b2db      	uxtb	r3, r3
 8004772:	2b00      	cmp	r3, #0
 8004774:	d106      	bne.n	8004784 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2200      	movs	r2, #0
 800477a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800477e:	6878      	ldr	r0, [r7, #4]
 8004780:	f7fc fcb2 	bl	80010e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2202      	movs	r2, #2
 8004788:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681a      	ldr	r2, [r3, #0]
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	3304      	adds	r3, #4
 8004794:	4619      	mov	r1, r3
 8004796:	4610      	mov	r0, r2
 8004798:	f000 fa7e 	bl	8004c98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2201      	movs	r2, #1
 80047a0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2201      	movs	r2, #1
 80047a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2201      	movs	r2, #1
 80047b0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2201      	movs	r2, #1
 80047b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2201      	movs	r2, #1
 80047c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2201      	movs	r2, #1
 80047c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2201      	movs	r2, #1
 80047d0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2201      	movs	r2, #1
 80047d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2201      	movs	r2, #1
 80047e0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2201      	movs	r2, #1
 80047e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80047ec:	2300      	movs	r3, #0
}
 80047ee:	4618      	mov	r0, r3
 80047f0:	3708      	adds	r7, #8
 80047f2:	46bd      	mov	sp, r7
 80047f4:	bd80      	pop	{r7, pc}
	...

080047f8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80047f8:	b480      	push	{r7}
 80047fa:	b085      	sub	sp, #20
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004806:	b2db      	uxtb	r3, r3
 8004808:	2b01      	cmp	r3, #1
 800480a:	d001      	beq.n	8004810 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800480c:	2301      	movs	r3, #1
 800480e:	e04e      	b.n	80048ae <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2202      	movs	r2, #2
 8004814:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	68da      	ldr	r2, [r3, #12]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f042 0201 	orr.w	r2, r2, #1
 8004826:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4a23      	ldr	r2, [pc, #140]	@ (80048bc <HAL_TIM_Base_Start_IT+0xc4>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d022      	beq.n	8004878 <HAL_TIM_Base_Start_IT+0x80>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800483a:	d01d      	beq.n	8004878 <HAL_TIM_Base_Start_IT+0x80>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4a1f      	ldr	r2, [pc, #124]	@ (80048c0 <HAL_TIM_Base_Start_IT+0xc8>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d018      	beq.n	8004878 <HAL_TIM_Base_Start_IT+0x80>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4a1e      	ldr	r2, [pc, #120]	@ (80048c4 <HAL_TIM_Base_Start_IT+0xcc>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d013      	beq.n	8004878 <HAL_TIM_Base_Start_IT+0x80>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a1c      	ldr	r2, [pc, #112]	@ (80048c8 <HAL_TIM_Base_Start_IT+0xd0>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d00e      	beq.n	8004878 <HAL_TIM_Base_Start_IT+0x80>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a1b      	ldr	r2, [pc, #108]	@ (80048cc <HAL_TIM_Base_Start_IT+0xd4>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d009      	beq.n	8004878 <HAL_TIM_Base_Start_IT+0x80>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4a19      	ldr	r2, [pc, #100]	@ (80048d0 <HAL_TIM_Base_Start_IT+0xd8>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d004      	beq.n	8004878 <HAL_TIM_Base_Start_IT+0x80>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4a18      	ldr	r2, [pc, #96]	@ (80048d4 <HAL_TIM_Base_Start_IT+0xdc>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d111      	bne.n	800489c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	689b      	ldr	r3, [r3, #8]
 800487e:	f003 0307 	and.w	r3, r3, #7
 8004882:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	2b06      	cmp	r3, #6
 8004888:	d010      	beq.n	80048ac <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	681a      	ldr	r2, [r3, #0]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f042 0201 	orr.w	r2, r2, #1
 8004898:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800489a:	e007      	b.n	80048ac <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	681a      	ldr	r2, [r3, #0]
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f042 0201 	orr.w	r2, r2, #1
 80048aa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80048ac:	2300      	movs	r3, #0
}
 80048ae:	4618      	mov	r0, r3
 80048b0:	3714      	adds	r7, #20
 80048b2:	46bd      	mov	sp, r7
 80048b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b8:	4770      	bx	lr
 80048ba:	bf00      	nop
 80048bc:	40010000 	.word	0x40010000
 80048c0:	40000400 	.word	0x40000400
 80048c4:	40000800 	.word	0x40000800
 80048c8:	40000c00 	.word	0x40000c00
 80048cc:	40010400 	.word	0x40010400
 80048d0:	40014000 	.word	0x40014000
 80048d4:	40001800 	.word	0x40001800

080048d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b084      	sub	sp, #16
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	68db      	ldr	r3, [r3, #12]
 80048e6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	691b      	ldr	r3, [r3, #16]
 80048ee:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	f003 0302 	and.w	r3, r3, #2
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d020      	beq.n	800493c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	f003 0302 	and.w	r3, r3, #2
 8004900:	2b00      	cmp	r3, #0
 8004902:	d01b      	beq.n	800493c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f06f 0202 	mvn.w	r2, #2
 800490c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2201      	movs	r2, #1
 8004912:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	699b      	ldr	r3, [r3, #24]
 800491a:	f003 0303 	and.w	r3, r3, #3
 800491e:	2b00      	cmp	r3, #0
 8004920:	d003      	beq.n	800492a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004922:	6878      	ldr	r0, [r7, #4]
 8004924:	f000 f999 	bl	8004c5a <HAL_TIM_IC_CaptureCallback>
 8004928:	e005      	b.n	8004936 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800492a:	6878      	ldr	r0, [r7, #4]
 800492c:	f000 f98b 	bl	8004c46 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004930:	6878      	ldr	r0, [r7, #4]
 8004932:	f000 f99c 	bl	8004c6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2200      	movs	r2, #0
 800493a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800493c:	68bb      	ldr	r3, [r7, #8]
 800493e:	f003 0304 	and.w	r3, r3, #4
 8004942:	2b00      	cmp	r3, #0
 8004944:	d020      	beq.n	8004988 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	f003 0304 	and.w	r3, r3, #4
 800494c:	2b00      	cmp	r3, #0
 800494e:	d01b      	beq.n	8004988 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f06f 0204 	mvn.w	r2, #4
 8004958:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2202      	movs	r2, #2
 800495e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	699b      	ldr	r3, [r3, #24]
 8004966:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800496a:	2b00      	cmp	r3, #0
 800496c:	d003      	beq.n	8004976 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800496e:	6878      	ldr	r0, [r7, #4]
 8004970:	f000 f973 	bl	8004c5a <HAL_TIM_IC_CaptureCallback>
 8004974:	e005      	b.n	8004982 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004976:	6878      	ldr	r0, [r7, #4]
 8004978:	f000 f965 	bl	8004c46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800497c:	6878      	ldr	r0, [r7, #4]
 800497e:	f000 f976 	bl	8004c6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2200      	movs	r2, #0
 8004986:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	f003 0308 	and.w	r3, r3, #8
 800498e:	2b00      	cmp	r3, #0
 8004990:	d020      	beq.n	80049d4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	f003 0308 	and.w	r3, r3, #8
 8004998:	2b00      	cmp	r3, #0
 800499a:	d01b      	beq.n	80049d4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f06f 0208 	mvn.w	r2, #8
 80049a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2204      	movs	r2, #4
 80049aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	69db      	ldr	r3, [r3, #28]
 80049b2:	f003 0303 	and.w	r3, r3, #3
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d003      	beq.n	80049c2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049ba:	6878      	ldr	r0, [r7, #4]
 80049bc:	f000 f94d 	bl	8004c5a <HAL_TIM_IC_CaptureCallback>
 80049c0:	e005      	b.n	80049ce <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049c2:	6878      	ldr	r0, [r7, #4]
 80049c4:	f000 f93f 	bl	8004c46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049c8:	6878      	ldr	r0, [r7, #4]
 80049ca:	f000 f950 	bl	8004c6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2200      	movs	r2, #0
 80049d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80049d4:	68bb      	ldr	r3, [r7, #8]
 80049d6:	f003 0310 	and.w	r3, r3, #16
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d020      	beq.n	8004a20 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	f003 0310 	and.w	r3, r3, #16
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d01b      	beq.n	8004a20 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f06f 0210 	mvn.w	r2, #16
 80049f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2208      	movs	r2, #8
 80049f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	69db      	ldr	r3, [r3, #28]
 80049fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d003      	beq.n	8004a0e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a06:	6878      	ldr	r0, [r7, #4]
 8004a08:	f000 f927 	bl	8004c5a <HAL_TIM_IC_CaptureCallback>
 8004a0c:	e005      	b.n	8004a1a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a0e:	6878      	ldr	r0, [r7, #4]
 8004a10:	f000 f919 	bl	8004c46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a14:	6878      	ldr	r0, [r7, #4]
 8004a16:	f000 f92a 	bl	8004c6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	f003 0301 	and.w	r3, r3, #1
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d00c      	beq.n	8004a44 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	f003 0301 	and.w	r3, r3, #1
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d007      	beq.n	8004a44 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f06f 0201 	mvn.w	r2, #1
 8004a3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004a3e:	6878      	ldr	r0, [r7, #4]
 8004a40:	f7fc f916 	bl	8000c70 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004a44:	68bb      	ldr	r3, [r7, #8]
 8004a46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d00c      	beq.n	8004a68 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d007      	beq.n	8004a68 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004a60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004a62:	6878      	ldr	r0, [r7, #4]
 8004a64:	f000 fae4 	bl	8005030 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004a68:	68bb      	ldr	r3, [r7, #8]
 8004a6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d00c      	beq.n	8004a8c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d007      	beq.n	8004a8c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004a84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004a86:	6878      	ldr	r0, [r7, #4]
 8004a88:	f000 f8fb 	bl	8004c82 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004a8c:	68bb      	ldr	r3, [r7, #8]
 8004a8e:	f003 0320 	and.w	r3, r3, #32
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d00c      	beq.n	8004ab0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	f003 0320 	and.w	r3, r3, #32
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d007      	beq.n	8004ab0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f06f 0220 	mvn.w	r2, #32
 8004aa8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004aaa:	6878      	ldr	r0, [r7, #4]
 8004aac:	f000 fab6 	bl	800501c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004ab0:	bf00      	nop
 8004ab2:	3710      	adds	r7, #16
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	bd80      	pop	{r7, pc}

08004ab8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b084      	sub	sp, #16
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
 8004ac0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004acc:	2b01      	cmp	r3, #1
 8004ace:	d101      	bne.n	8004ad4 <HAL_TIM_ConfigClockSource+0x1c>
 8004ad0:	2302      	movs	r3, #2
 8004ad2:	e0b4      	b.n	8004c3e <HAL_TIM_ConfigClockSource+0x186>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2201      	movs	r2, #1
 8004ad8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2202      	movs	r2, #2
 8004ae0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	689b      	ldr	r3, [r3, #8]
 8004aea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004af2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004af4:	68bb      	ldr	r3, [r7, #8]
 8004af6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004afa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	68ba      	ldr	r2, [r7, #8]
 8004b02:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b0c:	d03e      	beq.n	8004b8c <HAL_TIM_ConfigClockSource+0xd4>
 8004b0e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b12:	f200 8087 	bhi.w	8004c24 <HAL_TIM_ConfigClockSource+0x16c>
 8004b16:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b1a:	f000 8086 	beq.w	8004c2a <HAL_TIM_ConfigClockSource+0x172>
 8004b1e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b22:	d87f      	bhi.n	8004c24 <HAL_TIM_ConfigClockSource+0x16c>
 8004b24:	2b70      	cmp	r3, #112	@ 0x70
 8004b26:	d01a      	beq.n	8004b5e <HAL_TIM_ConfigClockSource+0xa6>
 8004b28:	2b70      	cmp	r3, #112	@ 0x70
 8004b2a:	d87b      	bhi.n	8004c24 <HAL_TIM_ConfigClockSource+0x16c>
 8004b2c:	2b60      	cmp	r3, #96	@ 0x60
 8004b2e:	d050      	beq.n	8004bd2 <HAL_TIM_ConfigClockSource+0x11a>
 8004b30:	2b60      	cmp	r3, #96	@ 0x60
 8004b32:	d877      	bhi.n	8004c24 <HAL_TIM_ConfigClockSource+0x16c>
 8004b34:	2b50      	cmp	r3, #80	@ 0x50
 8004b36:	d03c      	beq.n	8004bb2 <HAL_TIM_ConfigClockSource+0xfa>
 8004b38:	2b50      	cmp	r3, #80	@ 0x50
 8004b3a:	d873      	bhi.n	8004c24 <HAL_TIM_ConfigClockSource+0x16c>
 8004b3c:	2b40      	cmp	r3, #64	@ 0x40
 8004b3e:	d058      	beq.n	8004bf2 <HAL_TIM_ConfigClockSource+0x13a>
 8004b40:	2b40      	cmp	r3, #64	@ 0x40
 8004b42:	d86f      	bhi.n	8004c24 <HAL_TIM_ConfigClockSource+0x16c>
 8004b44:	2b30      	cmp	r3, #48	@ 0x30
 8004b46:	d064      	beq.n	8004c12 <HAL_TIM_ConfigClockSource+0x15a>
 8004b48:	2b30      	cmp	r3, #48	@ 0x30
 8004b4a:	d86b      	bhi.n	8004c24 <HAL_TIM_ConfigClockSource+0x16c>
 8004b4c:	2b20      	cmp	r3, #32
 8004b4e:	d060      	beq.n	8004c12 <HAL_TIM_ConfigClockSource+0x15a>
 8004b50:	2b20      	cmp	r3, #32
 8004b52:	d867      	bhi.n	8004c24 <HAL_TIM_ConfigClockSource+0x16c>
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d05c      	beq.n	8004c12 <HAL_TIM_ConfigClockSource+0x15a>
 8004b58:	2b10      	cmp	r3, #16
 8004b5a:	d05a      	beq.n	8004c12 <HAL_TIM_ConfigClockSource+0x15a>
 8004b5c:	e062      	b.n	8004c24 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004b6e:	f000 f9b9 	bl	8004ee4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	689b      	ldr	r3, [r3, #8]
 8004b78:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004b7a:	68bb      	ldr	r3, [r7, #8]
 8004b7c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004b80:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	68ba      	ldr	r2, [r7, #8]
 8004b88:	609a      	str	r2, [r3, #8]
      break;
 8004b8a:	e04f      	b.n	8004c2c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004b9c:	f000 f9a2 	bl	8004ee4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	689a      	ldr	r2, [r3, #8]
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004bae:	609a      	str	r2, [r3, #8]
      break;
 8004bb0:	e03c      	b.n	8004c2c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004bbe:	461a      	mov	r2, r3
 8004bc0:	f000 f916 	bl	8004df0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	2150      	movs	r1, #80	@ 0x50
 8004bca:	4618      	mov	r0, r3
 8004bcc:	f000 f96f 	bl	8004eae <TIM_ITRx_SetConfig>
      break;
 8004bd0:	e02c      	b.n	8004c2c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004bde:	461a      	mov	r2, r3
 8004be0:	f000 f935 	bl	8004e4e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	2160      	movs	r1, #96	@ 0x60
 8004bea:	4618      	mov	r0, r3
 8004bec:	f000 f95f 	bl	8004eae <TIM_ITRx_SetConfig>
      break;
 8004bf0:	e01c      	b.n	8004c2c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004bfe:	461a      	mov	r2, r3
 8004c00:	f000 f8f6 	bl	8004df0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	2140      	movs	r1, #64	@ 0x40
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	f000 f94f 	bl	8004eae <TIM_ITRx_SetConfig>
      break;
 8004c10:	e00c      	b.n	8004c2c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681a      	ldr	r2, [r3, #0]
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4619      	mov	r1, r3
 8004c1c:	4610      	mov	r0, r2
 8004c1e:	f000 f946 	bl	8004eae <TIM_ITRx_SetConfig>
      break;
 8004c22:	e003      	b.n	8004c2c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004c24:	2301      	movs	r3, #1
 8004c26:	73fb      	strb	r3, [r7, #15]
      break;
 8004c28:	e000      	b.n	8004c2c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004c2a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2201      	movs	r2, #1
 8004c30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2200      	movs	r2, #0
 8004c38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004c3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c3e:	4618      	mov	r0, r3
 8004c40:	3710      	adds	r7, #16
 8004c42:	46bd      	mov	sp, r7
 8004c44:	bd80      	pop	{r7, pc}

08004c46 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c46:	b480      	push	{r7}
 8004c48:	b083      	sub	sp, #12
 8004c4a:	af00      	add	r7, sp, #0
 8004c4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004c4e:	bf00      	nop
 8004c50:	370c      	adds	r7, #12
 8004c52:	46bd      	mov	sp, r7
 8004c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c58:	4770      	bx	lr

08004c5a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004c5a:	b480      	push	{r7}
 8004c5c:	b083      	sub	sp, #12
 8004c5e:	af00      	add	r7, sp, #0
 8004c60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004c62:	bf00      	nop
 8004c64:	370c      	adds	r7, #12
 8004c66:	46bd      	mov	sp, r7
 8004c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6c:	4770      	bx	lr

08004c6e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004c6e:	b480      	push	{r7}
 8004c70:	b083      	sub	sp, #12
 8004c72:	af00      	add	r7, sp, #0
 8004c74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004c76:	bf00      	nop
 8004c78:	370c      	adds	r7, #12
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c80:	4770      	bx	lr

08004c82 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004c82:	b480      	push	{r7}
 8004c84:	b083      	sub	sp, #12
 8004c86:	af00      	add	r7, sp, #0
 8004c88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004c8a:	bf00      	nop
 8004c8c:	370c      	adds	r7, #12
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c94:	4770      	bx	lr
	...

08004c98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004c98:	b480      	push	{r7}
 8004c9a:	b085      	sub	sp, #20
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
 8004ca0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	4a46      	ldr	r2, [pc, #280]	@ (8004dc4 <TIM_Base_SetConfig+0x12c>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d013      	beq.n	8004cd8 <TIM_Base_SetConfig+0x40>
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004cb6:	d00f      	beq.n	8004cd8 <TIM_Base_SetConfig+0x40>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	4a43      	ldr	r2, [pc, #268]	@ (8004dc8 <TIM_Base_SetConfig+0x130>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d00b      	beq.n	8004cd8 <TIM_Base_SetConfig+0x40>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	4a42      	ldr	r2, [pc, #264]	@ (8004dcc <TIM_Base_SetConfig+0x134>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d007      	beq.n	8004cd8 <TIM_Base_SetConfig+0x40>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	4a41      	ldr	r2, [pc, #260]	@ (8004dd0 <TIM_Base_SetConfig+0x138>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d003      	beq.n	8004cd8 <TIM_Base_SetConfig+0x40>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	4a40      	ldr	r2, [pc, #256]	@ (8004dd4 <TIM_Base_SetConfig+0x13c>)
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d108      	bne.n	8004cea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004cde:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	685b      	ldr	r3, [r3, #4]
 8004ce4:	68fa      	ldr	r2, [r7, #12]
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	4a35      	ldr	r2, [pc, #212]	@ (8004dc4 <TIM_Base_SetConfig+0x12c>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d02b      	beq.n	8004d4a <TIM_Base_SetConfig+0xb2>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004cf8:	d027      	beq.n	8004d4a <TIM_Base_SetConfig+0xb2>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	4a32      	ldr	r2, [pc, #200]	@ (8004dc8 <TIM_Base_SetConfig+0x130>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d023      	beq.n	8004d4a <TIM_Base_SetConfig+0xb2>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	4a31      	ldr	r2, [pc, #196]	@ (8004dcc <TIM_Base_SetConfig+0x134>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d01f      	beq.n	8004d4a <TIM_Base_SetConfig+0xb2>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	4a30      	ldr	r2, [pc, #192]	@ (8004dd0 <TIM_Base_SetConfig+0x138>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d01b      	beq.n	8004d4a <TIM_Base_SetConfig+0xb2>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	4a2f      	ldr	r2, [pc, #188]	@ (8004dd4 <TIM_Base_SetConfig+0x13c>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d017      	beq.n	8004d4a <TIM_Base_SetConfig+0xb2>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	4a2e      	ldr	r2, [pc, #184]	@ (8004dd8 <TIM_Base_SetConfig+0x140>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d013      	beq.n	8004d4a <TIM_Base_SetConfig+0xb2>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	4a2d      	ldr	r2, [pc, #180]	@ (8004ddc <TIM_Base_SetConfig+0x144>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d00f      	beq.n	8004d4a <TIM_Base_SetConfig+0xb2>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	4a2c      	ldr	r2, [pc, #176]	@ (8004de0 <TIM_Base_SetConfig+0x148>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d00b      	beq.n	8004d4a <TIM_Base_SetConfig+0xb2>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	4a2b      	ldr	r2, [pc, #172]	@ (8004de4 <TIM_Base_SetConfig+0x14c>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d007      	beq.n	8004d4a <TIM_Base_SetConfig+0xb2>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	4a2a      	ldr	r2, [pc, #168]	@ (8004de8 <TIM_Base_SetConfig+0x150>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d003      	beq.n	8004d4a <TIM_Base_SetConfig+0xb2>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	4a29      	ldr	r2, [pc, #164]	@ (8004dec <TIM_Base_SetConfig+0x154>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d108      	bne.n	8004d5c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	68db      	ldr	r3, [r3, #12]
 8004d56:	68fa      	ldr	r2, [r7, #12]
 8004d58:	4313      	orrs	r3, r2
 8004d5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	695b      	ldr	r3, [r3, #20]
 8004d66:	4313      	orrs	r3, r2
 8004d68:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	68fa      	ldr	r2, [r7, #12]
 8004d6e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	689a      	ldr	r2, [r3, #8]
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	681a      	ldr	r2, [r3, #0]
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	4a10      	ldr	r2, [pc, #64]	@ (8004dc4 <TIM_Base_SetConfig+0x12c>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d003      	beq.n	8004d90 <TIM_Base_SetConfig+0xf8>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	4a12      	ldr	r2, [pc, #72]	@ (8004dd4 <TIM_Base_SetConfig+0x13c>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d103      	bne.n	8004d98 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	691a      	ldr	r2, [r3, #16]
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2201      	movs	r2, #1
 8004d9c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	691b      	ldr	r3, [r3, #16]
 8004da2:	f003 0301 	and.w	r3, r3, #1
 8004da6:	2b01      	cmp	r3, #1
 8004da8:	d105      	bne.n	8004db6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	691b      	ldr	r3, [r3, #16]
 8004dae:	f023 0201 	bic.w	r2, r3, #1
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	611a      	str	r2, [r3, #16]
  }
}
 8004db6:	bf00      	nop
 8004db8:	3714      	adds	r7, #20
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc0:	4770      	bx	lr
 8004dc2:	bf00      	nop
 8004dc4:	40010000 	.word	0x40010000
 8004dc8:	40000400 	.word	0x40000400
 8004dcc:	40000800 	.word	0x40000800
 8004dd0:	40000c00 	.word	0x40000c00
 8004dd4:	40010400 	.word	0x40010400
 8004dd8:	40014000 	.word	0x40014000
 8004ddc:	40014400 	.word	0x40014400
 8004de0:	40014800 	.word	0x40014800
 8004de4:	40001800 	.word	0x40001800
 8004de8:	40001c00 	.word	0x40001c00
 8004dec:	40002000 	.word	0x40002000

08004df0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004df0:	b480      	push	{r7}
 8004df2:	b087      	sub	sp, #28
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	60f8      	str	r0, [r7, #12]
 8004df8:	60b9      	str	r1, [r7, #8]
 8004dfa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	6a1b      	ldr	r3, [r3, #32]
 8004e00:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	6a1b      	ldr	r3, [r3, #32]
 8004e06:	f023 0201 	bic.w	r2, r3, #1
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	699b      	ldr	r3, [r3, #24]
 8004e12:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004e14:	693b      	ldr	r3, [r7, #16]
 8004e16:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004e1a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	011b      	lsls	r3, r3, #4
 8004e20:	693a      	ldr	r2, [r7, #16]
 8004e22:	4313      	orrs	r3, r2
 8004e24:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004e26:	697b      	ldr	r3, [r7, #20]
 8004e28:	f023 030a 	bic.w	r3, r3, #10
 8004e2c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004e2e:	697a      	ldr	r2, [r7, #20]
 8004e30:	68bb      	ldr	r3, [r7, #8]
 8004e32:	4313      	orrs	r3, r2
 8004e34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	693a      	ldr	r2, [r7, #16]
 8004e3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	697a      	ldr	r2, [r7, #20]
 8004e40:	621a      	str	r2, [r3, #32]
}
 8004e42:	bf00      	nop
 8004e44:	371c      	adds	r7, #28
 8004e46:	46bd      	mov	sp, r7
 8004e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4c:	4770      	bx	lr

08004e4e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e4e:	b480      	push	{r7}
 8004e50:	b087      	sub	sp, #28
 8004e52:	af00      	add	r7, sp, #0
 8004e54:	60f8      	str	r0, [r7, #12]
 8004e56:	60b9      	str	r1, [r7, #8]
 8004e58:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	6a1b      	ldr	r3, [r3, #32]
 8004e5e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	6a1b      	ldr	r3, [r3, #32]
 8004e64:	f023 0210 	bic.w	r2, r3, #16
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	699b      	ldr	r3, [r3, #24]
 8004e70:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004e72:	693b      	ldr	r3, [r7, #16]
 8004e74:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004e78:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	031b      	lsls	r3, r3, #12
 8004e7e:	693a      	ldr	r2, [r7, #16]
 8004e80:	4313      	orrs	r3, r2
 8004e82:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004e84:	697b      	ldr	r3, [r7, #20]
 8004e86:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004e8a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004e8c:	68bb      	ldr	r3, [r7, #8]
 8004e8e:	011b      	lsls	r3, r3, #4
 8004e90:	697a      	ldr	r2, [r7, #20]
 8004e92:	4313      	orrs	r3, r2
 8004e94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	693a      	ldr	r2, [r7, #16]
 8004e9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	697a      	ldr	r2, [r7, #20]
 8004ea0:	621a      	str	r2, [r3, #32]
}
 8004ea2:	bf00      	nop
 8004ea4:	371c      	adds	r7, #28
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eac:	4770      	bx	lr

08004eae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004eae:	b480      	push	{r7}
 8004eb0:	b085      	sub	sp, #20
 8004eb2:	af00      	add	r7, sp, #0
 8004eb4:	6078      	str	r0, [r7, #4]
 8004eb6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	689b      	ldr	r3, [r3, #8]
 8004ebc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ec4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004ec6:	683a      	ldr	r2, [r7, #0]
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	4313      	orrs	r3, r2
 8004ecc:	f043 0307 	orr.w	r3, r3, #7
 8004ed0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	68fa      	ldr	r2, [r7, #12]
 8004ed6:	609a      	str	r2, [r3, #8]
}
 8004ed8:	bf00      	nop
 8004eda:	3714      	adds	r7, #20
 8004edc:	46bd      	mov	sp, r7
 8004ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee2:	4770      	bx	lr

08004ee4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	b087      	sub	sp, #28
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	60f8      	str	r0, [r7, #12]
 8004eec:	60b9      	str	r1, [r7, #8]
 8004eee:	607a      	str	r2, [r7, #4]
 8004ef0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	689b      	ldr	r3, [r3, #8]
 8004ef6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ef8:	697b      	ldr	r3, [r7, #20]
 8004efa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004efe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	021a      	lsls	r2, r3, #8
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	431a      	orrs	r2, r3
 8004f08:	68bb      	ldr	r3, [r7, #8]
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	697a      	ldr	r2, [r7, #20]
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	697a      	ldr	r2, [r7, #20]
 8004f16:	609a      	str	r2, [r3, #8]
}
 8004f18:	bf00      	nop
 8004f1a:	371c      	adds	r7, #28
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f22:	4770      	bx	lr

08004f24 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004f24:	b480      	push	{r7}
 8004f26:	b085      	sub	sp, #20
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
 8004f2c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004f34:	2b01      	cmp	r3, #1
 8004f36:	d101      	bne.n	8004f3c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004f38:	2302      	movs	r3, #2
 8004f3a:	e05a      	b.n	8004ff2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2201      	movs	r2, #1
 8004f40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2202      	movs	r2, #2
 8004f48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	685b      	ldr	r3, [r3, #4]
 8004f52:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	689b      	ldr	r3, [r3, #8]
 8004f5a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f62:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	68fa      	ldr	r2, [r7, #12]
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	68fa      	ldr	r2, [r7, #12]
 8004f74:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4a21      	ldr	r2, [pc, #132]	@ (8005000 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d022      	beq.n	8004fc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f88:	d01d      	beq.n	8004fc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	4a1d      	ldr	r2, [pc, #116]	@ (8005004 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d018      	beq.n	8004fc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4a1b      	ldr	r2, [pc, #108]	@ (8005008 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d013      	beq.n	8004fc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4a1a      	ldr	r2, [pc, #104]	@ (800500c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d00e      	beq.n	8004fc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4a18      	ldr	r2, [pc, #96]	@ (8005010 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d009      	beq.n	8004fc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4a17      	ldr	r2, [pc, #92]	@ (8005014 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d004      	beq.n	8004fc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4a15      	ldr	r2, [pc, #84]	@ (8005018 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d10c      	bne.n	8004fe0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004fc6:	68bb      	ldr	r3, [r7, #8]
 8004fc8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004fcc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	685b      	ldr	r3, [r3, #4]
 8004fd2:	68ba      	ldr	r2, [r7, #8]
 8004fd4:	4313      	orrs	r3, r2
 8004fd6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	68ba      	ldr	r2, [r7, #8]
 8004fde:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2201      	movs	r2, #1
 8004fe4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2200      	movs	r2, #0
 8004fec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004ff0:	2300      	movs	r3, #0
}
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	3714      	adds	r7, #20
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffc:	4770      	bx	lr
 8004ffe:	bf00      	nop
 8005000:	40010000 	.word	0x40010000
 8005004:	40000400 	.word	0x40000400
 8005008:	40000800 	.word	0x40000800
 800500c:	40000c00 	.word	0x40000c00
 8005010:	40010400 	.word	0x40010400
 8005014:	40014000 	.word	0x40014000
 8005018:	40001800 	.word	0x40001800

0800501c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800501c:	b480      	push	{r7}
 800501e:	b083      	sub	sp, #12
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005024:	bf00      	nop
 8005026:	370c      	adds	r7, #12
 8005028:	46bd      	mov	sp, r7
 800502a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502e:	4770      	bx	lr

08005030 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005030:	b480      	push	{r7}
 8005032:	b083      	sub	sp, #12
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005038:	bf00      	nop
 800503a:	370c      	adds	r7, #12
 800503c:	46bd      	mov	sp, r7
 800503e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005042:	4770      	bx	lr

08005044 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b082      	sub	sp, #8
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d101      	bne.n	8005056 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005052:	2301      	movs	r3, #1
 8005054:	e042      	b.n	80050dc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800505c:	b2db      	uxtb	r3, r3
 800505e:	2b00      	cmp	r3, #0
 8005060:	d106      	bne.n	8005070 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2200      	movs	r2, #0
 8005066:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800506a:	6878      	ldr	r0, [r7, #4]
 800506c:	f7fc f8bc 	bl	80011e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2224      	movs	r2, #36	@ 0x24
 8005074:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	68da      	ldr	r2, [r3, #12]
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005086:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005088:	6878      	ldr	r0, [r7, #4]
 800508a:	f000 fb09 	bl	80056a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	691a      	ldr	r2, [r3, #16]
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800509c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	695a      	ldr	r2, [r3, #20]
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80050ac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	68da      	ldr	r2, [r3, #12]
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80050bc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2200      	movs	r2, #0
 80050c2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2220      	movs	r2, #32
 80050c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2220      	movs	r2, #32
 80050d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2200      	movs	r2, #0
 80050d8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80050da:	2300      	movs	r3, #0
}
 80050dc:	4618      	mov	r0, r3
 80050de:	3708      	adds	r7, #8
 80050e0:	46bd      	mov	sp, r7
 80050e2:	bd80      	pop	{r7, pc}

080050e4 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b084      	sub	sp, #16
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	60f8      	str	r0, [r7, #12]
 80050ec:	60b9      	str	r1, [r7, #8]
 80050ee:	4613      	mov	r3, r2
 80050f0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80050f8:	b2db      	uxtb	r3, r3
 80050fa:	2b20      	cmp	r3, #32
 80050fc:	d112      	bne.n	8005124 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80050fe:	68bb      	ldr	r3, [r7, #8]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d002      	beq.n	800510a <HAL_UART_Receive_DMA+0x26>
 8005104:	88fb      	ldrh	r3, [r7, #6]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d101      	bne.n	800510e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800510a:	2301      	movs	r3, #1
 800510c:	e00b      	b.n	8005126 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	2200      	movs	r2, #0
 8005112:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8005114:	88fb      	ldrh	r3, [r7, #6]
 8005116:	461a      	mov	r2, r3
 8005118:	68b9      	ldr	r1, [r7, #8]
 800511a:	68f8      	ldr	r0, [r7, #12]
 800511c:	f000 f99a 	bl	8005454 <UART_Start_Receive_DMA>
 8005120:	4603      	mov	r3, r0
 8005122:	e000      	b.n	8005126 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8005124:	2302      	movs	r3, #2
  }
}
 8005126:	4618      	mov	r0, r3
 8005128:	3710      	adds	r7, #16
 800512a:	46bd      	mov	sp, r7
 800512c:	bd80      	pop	{r7, pc}

0800512e <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800512e:	b580      	push	{r7, lr}
 8005130:	b090      	sub	sp, #64	@ 0x40
 8005132:	af00      	add	r7, sp, #0
 8005134:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005136:	2300      	movs	r3, #0
 8005138:	63fb      	str	r3, [r7, #60]	@ 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	695b      	ldr	r3, [r3, #20]
 8005140:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005144:	2b80      	cmp	r3, #128	@ 0x80
 8005146:	bf0c      	ite	eq
 8005148:	2301      	moveq	r3, #1
 800514a:	2300      	movne	r3, #0
 800514c:	b2db      	uxtb	r3, r3
 800514e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005156:	b2db      	uxtb	r3, r3
 8005158:	2b21      	cmp	r3, #33	@ 0x21
 800515a:	d128      	bne.n	80051ae <HAL_UART_DMAStop+0x80>
 800515c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800515e:	2b00      	cmp	r3, #0
 8005160:	d025      	beq.n	80051ae <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	3314      	adds	r3, #20
 8005168:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800516a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800516c:	e853 3f00 	ldrex	r3, [r3]
 8005170:	623b      	str	r3, [r7, #32]
   return(result);
 8005172:	6a3b      	ldr	r3, [r7, #32]
 8005174:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005178:	63bb      	str	r3, [r7, #56]	@ 0x38
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	3314      	adds	r3, #20
 8005180:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005182:	633a      	str	r2, [r7, #48]	@ 0x30
 8005184:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005186:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005188:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800518a:	e841 2300 	strex	r3, r2, [r1]
 800518e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005190:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005192:	2b00      	cmp	r3, #0
 8005194:	d1e5      	bne.n	8005162 <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800519a:	2b00      	cmp	r3, #0
 800519c:	d004      	beq.n	80051a8 <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051a2:	4618      	mov	r0, r3
 80051a4:	f7fc feb6 	bl	8001f14 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 80051a8:	6878      	ldr	r0, [r7, #4]
 80051aa:	f000 f9ed 	bl	8005588 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	695b      	ldr	r3, [r3, #20]
 80051b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051b8:	2b40      	cmp	r3, #64	@ 0x40
 80051ba:	bf0c      	ite	eq
 80051bc:	2301      	moveq	r3, #1
 80051be:	2300      	movne	r3, #0
 80051c0:	b2db      	uxtb	r3, r3
 80051c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80051ca:	b2db      	uxtb	r3, r3
 80051cc:	2b22      	cmp	r3, #34	@ 0x22
 80051ce:	d128      	bne.n	8005222 <HAL_UART_DMAStop+0xf4>
 80051d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d025      	beq.n	8005222 <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	3314      	adds	r3, #20
 80051dc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051de:	693b      	ldr	r3, [r7, #16]
 80051e0:	e853 3f00 	ldrex	r3, [r3]
 80051e4:	60fb      	str	r3, [r7, #12]
   return(result);
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80051ec:	637b      	str	r3, [r7, #52]	@ 0x34
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	3314      	adds	r3, #20
 80051f4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80051f6:	61fa      	str	r2, [r7, #28]
 80051f8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051fa:	69b9      	ldr	r1, [r7, #24]
 80051fc:	69fa      	ldr	r2, [r7, #28]
 80051fe:	e841 2300 	strex	r3, r2, [r1]
 8005202:	617b      	str	r3, [r7, #20]
   return(result);
 8005204:	697b      	ldr	r3, [r7, #20]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d1e5      	bne.n	80051d6 <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800520e:	2b00      	cmp	r3, #0
 8005210:	d004      	beq.n	800521c <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005216:	4618      	mov	r0, r3
 8005218:	f7fc fe7c 	bl	8001f14 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 800521c:	6878      	ldr	r0, [r7, #4]
 800521e:	f000 f9db 	bl	80055d8 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8005222:	2300      	movs	r3, #0
}
 8005224:	4618      	mov	r0, r3
 8005226:	3740      	adds	r7, #64	@ 0x40
 8005228:	46bd      	mov	sp, r7
 800522a:	bd80      	pop	{r7, pc}

0800522c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800522c:	b480      	push	{r7}
 800522e:	b083      	sub	sp, #12
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005234:	bf00      	nop
 8005236:	370c      	adds	r7, #12
 8005238:	46bd      	mov	sp, r7
 800523a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523e:	4770      	bx	lr

08005240 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005240:	b480      	push	{r7}
 8005242:	b083      	sub	sp, #12
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
 8005248:	460b      	mov	r3, r1
 800524a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800524c:	bf00      	nop
 800524e:	370c      	adds	r7, #12
 8005250:	46bd      	mov	sp, r7
 8005252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005256:	4770      	bx	lr

08005258 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b09c      	sub	sp, #112	@ 0x70
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005264:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005270:	2b00      	cmp	r3, #0
 8005272:	d172      	bne.n	800535a <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8005274:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005276:	2200      	movs	r2, #0
 8005278:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800527a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	330c      	adds	r3, #12
 8005280:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005282:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005284:	e853 3f00 	ldrex	r3, [r3]
 8005288:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800528a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800528c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005290:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005292:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	330c      	adds	r3, #12
 8005298:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800529a:	65ba      	str	r2, [r7, #88]	@ 0x58
 800529c:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800529e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80052a0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80052a2:	e841 2300 	strex	r3, r2, [r1]
 80052a6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80052a8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d1e5      	bne.n	800527a <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052ae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	3314      	adds	r3, #20
 80052b4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052b8:	e853 3f00 	ldrex	r3, [r3]
 80052bc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80052be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052c0:	f023 0301 	bic.w	r3, r3, #1
 80052c4:	667b      	str	r3, [r7, #100]	@ 0x64
 80052c6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	3314      	adds	r3, #20
 80052cc:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80052ce:	647a      	str	r2, [r7, #68]	@ 0x44
 80052d0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052d2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80052d4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80052d6:	e841 2300 	strex	r3, r2, [r1]
 80052da:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80052dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d1e5      	bne.n	80052ae <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80052e2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	3314      	adds	r3, #20
 80052e8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052ec:	e853 3f00 	ldrex	r3, [r3]
 80052f0:	623b      	str	r3, [r7, #32]
   return(result);
 80052f2:	6a3b      	ldr	r3, [r7, #32]
 80052f4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80052f8:	663b      	str	r3, [r7, #96]	@ 0x60
 80052fa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	3314      	adds	r3, #20
 8005300:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005302:	633a      	str	r2, [r7, #48]	@ 0x30
 8005304:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005306:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005308:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800530a:	e841 2300 	strex	r3, r2, [r1]
 800530e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005310:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005312:	2b00      	cmp	r3, #0
 8005314:	d1e5      	bne.n	80052e2 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005316:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005318:	2220      	movs	r2, #32
 800531a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800531e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005320:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005322:	2b01      	cmp	r3, #1
 8005324:	d119      	bne.n	800535a <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005326:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	330c      	adds	r3, #12
 800532c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800532e:	693b      	ldr	r3, [r7, #16]
 8005330:	e853 3f00 	ldrex	r3, [r3]
 8005334:	60fb      	str	r3, [r7, #12]
   return(result);
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	f023 0310 	bic.w	r3, r3, #16
 800533c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800533e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	330c      	adds	r3, #12
 8005344:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8005346:	61fa      	str	r2, [r7, #28]
 8005348:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800534a:	69b9      	ldr	r1, [r7, #24]
 800534c:	69fa      	ldr	r2, [r7, #28]
 800534e:	e841 2300 	strex	r3, r2, [r1]
 8005352:	617b      	str	r3, [r7, #20]
   return(result);
 8005354:	697b      	ldr	r3, [r7, #20]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d1e5      	bne.n	8005326 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800535a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800535c:	2200      	movs	r2, #0
 800535e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005360:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005362:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005364:	2b01      	cmp	r3, #1
 8005366:	d106      	bne.n	8005376 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005368:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800536a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800536c:	4619      	mov	r1, r3
 800536e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005370:	f7ff ff66 	bl	8005240 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005374:	e002      	b.n	800537c <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8005376:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005378:	f7fb fcbe 	bl	8000cf8 <HAL_UART_RxCpltCallback>
}
 800537c:	bf00      	nop
 800537e:	3770      	adds	r7, #112	@ 0x70
 8005380:	46bd      	mov	sp, r7
 8005382:	bd80      	pop	{r7, pc}

08005384 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005384:	b580      	push	{r7, lr}
 8005386:	b084      	sub	sp, #16
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005390:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	2201      	movs	r2, #1
 8005396:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800539c:	2b01      	cmp	r3, #1
 800539e:	d108      	bne.n	80053b2 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80053a4:	085b      	lsrs	r3, r3, #1
 80053a6:	b29b      	uxth	r3, r3
 80053a8:	4619      	mov	r1, r3
 80053aa:	68f8      	ldr	r0, [r7, #12]
 80053ac:	f7ff ff48 	bl	8005240 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80053b0:	e002      	b.n	80053b8 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 80053b2:	68f8      	ldr	r0, [r7, #12]
 80053b4:	f7ff ff3a 	bl	800522c <HAL_UART_RxHalfCpltCallback>
}
 80053b8:	bf00      	nop
 80053ba:	3710      	adds	r7, #16
 80053bc:	46bd      	mov	sp, r7
 80053be:	bd80      	pop	{r7, pc}

080053c0 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b084      	sub	sp, #16
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80053c8:	2300      	movs	r3, #0
 80053ca:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053d0:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80053d2:	68bb      	ldr	r3, [r7, #8]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	695b      	ldr	r3, [r3, #20]
 80053d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053dc:	2b80      	cmp	r3, #128	@ 0x80
 80053de:	bf0c      	ite	eq
 80053e0:	2301      	moveq	r3, #1
 80053e2:	2300      	movne	r3, #0
 80053e4:	b2db      	uxtb	r3, r3
 80053e6:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80053e8:	68bb      	ldr	r3, [r7, #8]
 80053ea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80053ee:	b2db      	uxtb	r3, r3
 80053f0:	2b21      	cmp	r3, #33	@ 0x21
 80053f2:	d108      	bne.n	8005406 <UART_DMAError+0x46>
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d005      	beq.n	8005406 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80053fa:	68bb      	ldr	r3, [r7, #8]
 80053fc:	2200      	movs	r2, #0
 80053fe:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8005400:	68b8      	ldr	r0, [r7, #8]
 8005402:	f000 f8c1 	bl	8005588 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005406:	68bb      	ldr	r3, [r7, #8]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	695b      	ldr	r3, [r3, #20]
 800540c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005410:	2b40      	cmp	r3, #64	@ 0x40
 8005412:	bf0c      	ite	eq
 8005414:	2301      	moveq	r3, #1
 8005416:	2300      	movne	r3, #0
 8005418:	b2db      	uxtb	r3, r3
 800541a:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800541c:	68bb      	ldr	r3, [r7, #8]
 800541e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005422:	b2db      	uxtb	r3, r3
 8005424:	2b22      	cmp	r3, #34	@ 0x22
 8005426:	d108      	bne.n	800543a <UART_DMAError+0x7a>
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d005      	beq.n	800543a <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800542e:	68bb      	ldr	r3, [r7, #8]
 8005430:	2200      	movs	r2, #0
 8005432:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8005434:	68b8      	ldr	r0, [r7, #8]
 8005436:	f000 f8cf 	bl	80055d8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800543a:	68bb      	ldr	r3, [r7, #8]
 800543c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800543e:	f043 0210 	orr.w	r2, r3, #16
 8005442:	68bb      	ldr	r3, [r7, #8]
 8005444:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005446:	68b8      	ldr	r0, [r7, #8]
 8005448:	f7fb fcf6 	bl	8000e38 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800544c:	bf00      	nop
 800544e:	3710      	adds	r7, #16
 8005450:	46bd      	mov	sp, r7
 8005452:	bd80      	pop	{r7, pc}

08005454 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005454:	b580      	push	{r7, lr}
 8005456:	b098      	sub	sp, #96	@ 0x60
 8005458:	af00      	add	r7, sp, #0
 800545a:	60f8      	str	r0, [r7, #12]
 800545c:	60b9      	str	r1, [r7, #8]
 800545e:	4613      	mov	r3, r2
 8005460:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8005462:	68ba      	ldr	r2, [r7, #8]
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	88fa      	ldrh	r2, [r7, #6]
 800546c:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	2200      	movs	r2, #0
 8005472:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	2222      	movs	r2, #34	@ 0x22
 8005478:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005480:	4a3e      	ldr	r2, [pc, #248]	@ (800557c <UART_Start_Receive_DMA+0x128>)
 8005482:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005488:	4a3d      	ldr	r2, [pc, #244]	@ (8005580 <UART_Start_Receive_DMA+0x12c>)
 800548a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005490:	4a3c      	ldr	r2, [pc, #240]	@ (8005584 <UART_Start_Receive_DMA+0x130>)
 8005492:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005498:	2200      	movs	r2, #0
 800549a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800549c:	f107 0308 	add.w	r3, r7, #8
 80054a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	3304      	adds	r3, #4
 80054ac:	4619      	mov	r1, r3
 80054ae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80054b0:	681a      	ldr	r2, [r3, #0]
 80054b2:	88fb      	ldrh	r3, [r7, #6]
 80054b4:	f7fc fcd6 	bl	8001e64 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80054b8:	2300      	movs	r3, #0
 80054ba:	613b      	str	r3, [r7, #16]
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	613b      	str	r3, [r7, #16]
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	685b      	ldr	r3, [r3, #4]
 80054ca:	613b      	str	r3, [r7, #16]
 80054cc:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	691b      	ldr	r3, [r3, #16]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d019      	beq.n	800550a <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	330c      	adds	r3, #12
 80054dc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80054e0:	e853 3f00 	ldrex	r3, [r3]
 80054e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80054e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80054e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80054ec:	65bb      	str	r3, [r7, #88]	@ 0x58
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	330c      	adds	r3, #12
 80054f4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80054f6:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80054f8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054fa:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80054fc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80054fe:	e841 2300 	strex	r3, r2, [r1]
 8005502:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8005504:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005506:	2b00      	cmp	r3, #0
 8005508:	d1e5      	bne.n	80054d6 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	3314      	adds	r3, #20
 8005510:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005512:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005514:	e853 3f00 	ldrex	r3, [r3]
 8005518:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800551a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800551c:	f043 0301 	orr.w	r3, r3, #1
 8005520:	657b      	str	r3, [r7, #84]	@ 0x54
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	3314      	adds	r3, #20
 8005528:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800552a:	63ba      	str	r2, [r7, #56]	@ 0x38
 800552c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800552e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8005530:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005532:	e841 2300 	strex	r3, r2, [r1]
 8005536:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005538:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800553a:	2b00      	cmp	r3, #0
 800553c:	d1e5      	bne.n	800550a <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	3314      	adds	r3, #20
 8005544:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005546:	69bb      	ldr	r3, [r7, #24]
 8005548:	e853 3f00 	ldrex	r3, [r3]
 800554c:	617b      	str	r3, [r7, #20]
   return(result);
 800554e:	697b      	ldr	r3, [r7, #20]
 8005550:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005554:	653b      	str	r3, [r7, #80]	@ 0x50
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	3314      	adds	r3, #20
 800555c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800555e:	627a      	str	r2, [r7, #36]	@ 0x24
 8005560:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005562:	6a39      	ldr	r1, [r7, #32]
 8005564:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005566:	e841 2300 	strex	r3, r2, [r1]
 800556a:	61fb      	str	r3, [r7, #28]
   return(result);
 800556c:	69fb      	ldr	r3, [r7, #28]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d1e5      	bne.n	800553e <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8005572:	2300      	movs	r3, #0
}
 8005574:	4618      	mov	r0, r3
 8005576:	3760      	adds	r7, #96	@ 0x60
 8005578:	46bd      	mov	sp, r7
 800557a:	bd80      	pop	{r7, pc}
 800557c:	08005259 	.word	0x08005259
 8005580:	08005385 	.word	0x08005385
 8005584:	080053c1 	.word	0x080053c1

08005588 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005588:	b480      	push	{r7}
 800558a:	b089      	sub	sp, #36	@ 0x24
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	330c      	adds	r3, #12
 8005596:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	e853 3f00 	ldrex	r3, [r3]
 800559e:	60bb      	str	r3, [r7, #8]
   return(result);
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80055a6:	61fb      	str	r3, [r7, #28]
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	330c      	adds	r3, #12
 80055ae:	69fa      	ldr	r2, [r7, #28]
 80055b0:	61ba      	str	r2, [r7, #24]
 80055b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055b4:	6979      	ldr	r1, [r7, #20]
 80055b6:	69ba      	ldr	r2, [r7, #24]
 80055b8:	e841 2300 	strex	r3, r2, [r1]
 80055bc:	613b      	str	r3, [r7, #16]
   return(result);
 80055be:	693b      	ldr	r3, [r7, #16]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d1e5      	bne.n	8005590 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2220      	movs	r2, #32
 80055c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 80055cc:	bf00      	nop
 80055ce:	3724      	adds	r7, #36	@ 0x24
 80055d0:	46bd      	mov	sp, r7
 80055d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d6:	4770      	bx	lr

080055d8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80055d8:	b480      	push	{r7}
 80055da:	b095      	sub	sp, #84	@ 0x54
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	330c      	adds	r3, #12
 80055e6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055ea:	e853 3f00 	ldrex	r3, [r3]
 80055ee:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80055f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055f2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80055f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	330c      	adds	r3, #12
 80055fe:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005600:	643a      	str	r2, [r7, #64]	@ 0x40
 8005602:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005604:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005606:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005608:	e841 2300 	strex	r3, r2, [r1]
 800560c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800560e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005610:	2b00      	cmp	r3, #0
 8005612:	d1e5      	bne.n	80055e0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	3314      	adds	r3, #20
 800561a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800561c:	6a3b      	ldr	r3, [r7, #32]
 800561e:	e853 3f00 	ldrex	r3, [r3]
 8005622:	61fb      	str	r3, [r7, #28]
   return(result);
 8005624:	69fb      	ldr	r3, [r7, #28]
 8005626:	f023 0301 	bic.w	r3, r3, #1
 800562a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	3314      	adds	r3, #20
 8005632:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005634:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005636:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005638:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800563a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800563c:	e841 2300 	strex	r3, r2, [r1]
 8005640:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005644:	2b00      	cmp	r3, #0
 8005646:	d1e5      	bne.n	8005614 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800564c:	2b01      	cmp	r3, #1
 800564e:	d119      	bne.n	8005684 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	330c      	adds	r3, #12
 8005656:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	e853 3f00 	ldrex	r3, [r3]
 800565e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005660:	68bb      	ldr	r3, [r7, #8]
 8005662:	f023 0310 	bic.w	r3, r3, #16
 8005666:	647b      	str	r3, [r7, #68]	@ 0x44
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	330c      	adds	r3, #12
 800566e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005670:	61ba      	str	r2, [r7, #24]
 8005672:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005674:	6979      	ldr	r1, [r7, #20]
 8005676:	69ba      	ldr	r2, [r7, #24]
 8005678:	e841 2300 	strex	r3, r2, [r1]
 800567c:	613b      	str	r3, [r7, #16]
   return(result);
 800567e:	693b      	ldr	r3, [r7, #16]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d1e5      	bne.n	8005650 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2220      	movs	r2, #32
 8005688:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2200      	movs	r2, #0
 8005690:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005692:	bf00      	nop
 8005694:	3754      	adds	r7, #84	@ 0x54
 8005696:	46bd      	mov	sp, r7
 8005698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569c:	4770      	bx	lr
	...

080056a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80056a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80056a4:	b0c0      	sub	sp, #256	@ 0x100
 80056a6:	af00      	add	r7, sp, #0
 80056a8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80056ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	691b      	ldr	r3, [r3, #16]
 80056b4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80056b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056bc:	68d9      	ldr	r1, [r3, #12]
 80056be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056c2:	681a      	ldr	r2, [r3, #0]
 80056c4:	ea40 0301 	orr.w	r3, r0, r1
 80056c8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80056ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056ce:	689a      	ldr	r2, [r3, #8]
 80056d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056d4:	691b      	ldr	r3, [r3, #16]
 80056d6:	431a      	orrs	r2, r3
 80056d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056dc:	695b      	ldr	r3, [r3, #20]
 80056de:	431a      	orrs	r2, r3
 80056e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056e4:	69db      	ldr	r3, [r3, #28]
 80056e6:	4313      	orrs	r3, r2
 80056e8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80056ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	68db      	ldr	r3, [r3, #12]
 80056f4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80056f8:	f021 010c 	bic.w	r1, r1, #12
 80056fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005700:	681a      	ldr	r2, [r3, #0]
 8005702:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005706:	430b      	orrs	r3, r1
 8005708:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800570a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	695b      	ldr	r3, [r3, #20]
 8005712:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005716:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800571a:	6999      	ldr	r1, [r3, #24]
 800571c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005720:	681a      	ldr	r2, [r3, #0]
 8005722:	ea40 0301 	orr.w	r3, r0, r1
 8005726:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005728:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800572c:	681a      	ldr	r2, [r3, #0]
 800572e:	4b8f      	ldr	r3, [pc, #572]	@ (800596c <UART_SetConfig+0x2cc>)
 8005730:	429a      	cmp	r2, r3
 8005732:	d005      	beq.n	8005740 <UART_SetConfig+0xa0>
 8005734:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005738:	681a      	ldr	r2, [r3, #0]
 800573a:	4b8d      	ldr	r3, [pc, #564]	@ (8005970 <UART_SetConfig+0x2d0>)
 800573c:	429a      	cmp	r2, r3
 800573e:	d104      	bne.n	800574a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005740:	f7fe fff6 	bl	8004730 <HAL_RCC_GetPCLK2Freq>
 8005744:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005748:	e003      	b.n	8005752 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800574a:	f7fe ffdd 	bl	8004708 <HAL_RCC_GetPCLK1Freq>
 800574e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005752:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005756:	69db      	ldr	r3, [r3, #28]
 8005758:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800575c:	f040 810c 	bne.w	8005978 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005760:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005764:	2200      	movs	r2, #0
 8005766:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800576a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800576e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005772:	4622      	mov	r2, r4
 8005774:	462b      	mov	r3, r5
 8005776:	1891      	adds	r1, r2, r2
 8005778:	65b9      	str	r1, [r7, #88]	@ 0x58
 800577a:	415b      	adcs	r3, r3
 800577c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800577e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005782:	4621      	mov	r1, r4
 8005784:	eb12 0801 	adds.w	r8, r2, r1
 8005788:	4629      	mov	r1, r5
 800578a:	eb43 0901 	adc.w	r9, r3, r1
 800578e:	f04f 0200 	mov.w	r2, #0
 8005792:	f04f 0300 	mov.w	r3, #0
 8005796:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800579a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800579e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80057a2:	4690      	mov	r8, r2
 80057a4:	4699      	mov	r9, r3
 80057a6:	4623      	mov	r3, r4
 80057a8:	eb18 0303 	adds.w	r3, r8, r3
 80057ac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80057b0:	462b      	mov	r3, r5
 80057b2:	eb49 0303 	adc.w	r3, r9, r3
 80057b6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80057ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057be:	685b      	ldr	r3, [r3, #4]
 80057c0:	2200      	movs	r2, #0
 80057c2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80057c6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80057ca:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80057ce:	460b      	mov	r3, r1
 80057d0:	18db      	adds	r3, r3, r3
 80057d2:	653b      	str	r3, [r7, #80]	@ 0x50
 80057d4:	4613      	mov	r3, r2
 80057d6:	eb42 0303 	adc.w	r3, r2, r3
 80057da:	657b      	str	r3, [r7, #84]	@ 0x54
 80057dc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80057e0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80057e4:	f7fa fd5c 	bl	80002a0 <__aeabi_uldivmod>
 80057e8:	4602      	mov	r2, r0
 80057ea:	460b      	mov	r3, r1
 80057ec:	4b61      	ldr	r3, [pc, #388]	@ (8005974 <UART_SetConfig+0x2d4>)
 80057ee:	fba3 2302 	umull	r2, r3, r3, r2
 80057f2:	095b      	lsrs	r3, r3, #5
 80057f4:	011c      	lsls	r4, r3, #4
 80057f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80057fa:	2200      	movs	r2, #0
 80057fc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005800:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005804:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005808:	4642      	mov	r2, r8
 800580a:	464b      	mov	r3, r9
 800580c:	1891      	adds	r1, r2, r2
 800580e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005810:	415b      	adcs	r3, r3
 8005812:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005814:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005818:	4641      	mov	r1, r8
 800581a:	eb12 0a01 	adds.w	sl, r2, r1
 800581e:	4649      	mov	r1, r9
 8005820:	eb43 0b01 	adc.w	fp, r3, r1
 8005824:	f04f 0200 	mov.w	r2, #0
 8005828:	f04f 0300 	mov.w	r3, #0
 800582c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005830:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005834:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005838:	4692      	mov	sl, r2
 800583a:	469b      	mov	fp, r3
 800583c:	4643      	mov	r3, r8
 800583e:	eb1a 0303 	adds.w	r3, sl, r3
 8005842:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005846:	464b      	mov	r3, r9
 8005848:	eb4b 0303 	adc.w	r3, fp, r3
 800584c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005850:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005854:	685b      	ldr	r3, [r3, #4]
 8005856:	2200      	movs	r2, #0
 8005858:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800585c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005860:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005864:	460b      	mov	r3, r1
 8005866:	18db      	adds	r3, r3, r3
 8005868:	643b      	str	r3, [r7, #64]	@ 0x40
 800586a:	4613      	mov	r3, r2
 800586c:	eb42 0303 	adc.w	r3, r2, r3
 8005870:	647b      	str	r3, [r7, #68]	@ 0x44
 8005872:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005876:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800587a:	f7fa fd11 	bl	80002a0 <__aeabi_uldivmod>
 800587e:	4602      	mov	r2, r0
 8005880:	460b      	mov	r3, r1
 8005882:	4611      	mov	r1, r2
 8005884:	4b3b      	ldr	r3, [pc, #236]	@ (8005974 <UART_SetConfig+0x2d4>)
 8005886:	fba3 2301 	umull	r2, r3, r3, r1
 800588a:	095b      	lsrs	r3, r3, #5
 800588c:	2264      	movs	r2, #100	@ 0x64
 800588e:	fb02 f303 	mul.w	r3, r2, r3
 8005892:	1acb      	subs	r3, r1, r3
 8005894:	00db      	lsls	r3, r3, #3
 8005896:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800589a:	4b36      	ldr	r3, [pc, #216]	@ (8005974 <UART_SetConfig+0x2d4>)
 800589c:	fba3 2302 	umull	r2, r3, r3, r2
 80058a0:	095b      	lsrs	r3, r3, #5
 80058a2:	005b      	lsls	r3, r3, #1
 80058a4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80058a8:	441c      	add	r4, r3
 80058aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80058ae:	2200      	movs	r2, #0
 80058b0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80058b4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80058b8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80058bc:	4642      	mov	r2, r8
 80058be:	464b      	mov	r3, r9
 80058c0:	1891      	adds	r1, r2, r2
 80058c2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80058c4:	415b      	adcs	r3, r3
 80058c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80058c8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80058cc:	4641      	mov	r1, r8
 80058ce:	1851      	adds	r1, r2, r1
 80058d0:	6339      	str	r1, [r7, #48]	@ 0x30
 80058d2:	4649      	mov	r1, r9
 80058d4:	414b      	adcs	r3, r1
 80058d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80058d8:	f04f 0200 	mov.w	r2, #0
 80058dc:	f04f 0300 	mov.w	r3, #0
 80058e0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80058e4:	4659      	mov	r1, fp
 80058e6:	00cb      	lsls	r3, r1, #3
 80058e8:	4651      	mov	r1, sl
 80058ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80058ee:	4651      	mov	r1, sl
 80058f0:	00ca      	lsls	r2, r1, #3
 80058f2:	4610      	mov	r0, r2
 80058f4:	4619      	mov	r1, r3
 80058f6:	4603      	mov	r3, r0
 80058f8:	4642      	mov	r2, r8
 80058fa:	189b      	adds	r3, r3, r2
 80058fc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005900:	464b      	mov	r3, r9
 8005902:	460a      	mov	r2, r1
 8005904:	eb42 0303 	adc.w	r3, r2, r3
 8005908:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800590c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005910:	685b      	ldr	r3, [r3, #4]
 8005912:	2200      	movs	r2, #0
 8005914:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005918:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800591c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005920:	460b      	mov	r3, r1
 8005922:	18db      	adds	r3, r3, r3
 8005924:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005926:	4613      	mov	r3, r2
 8005928:	eb42 0303 	adc.w	r3, r2, r3
 800592c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800592e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005932:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005936:	f7fa fcb3 	bl	80002a0 <__aeabi_uldivmod>
 800593a:	4602      	mov	r2, r0
 800593c:	460b      	mov	r3, r1
 800593e:	4b0d      	ldr	r3, [pc, #52]	@ (8005974 <UART_SetConfig+0x2d4>)
 8005940:	fba3 1302 	umull	r1, r3, r3, r2
 8005944:	095b      	lsrs	r3, r3, #5
 8005946:	2164      	movs	r1, #100	@ 0x64
 8005948:	fb01 f303 	mul.w	r3, r1, r3
 800594c:	1ad3      	subs	r3, r2, r3
 800594e:	00db      	lsls	r3, r3, #3
 8005950:	3332      	adds	r3, #50	@ 0x32
 8005952:	4a08      	ldr	r2, [pc, #32]	@ (8005974 <UART_SetConfig+0x2d4>)
 8005954:	fba2 2303 	umull	r2, r3, r2, r3
 8005958:	095b      	lsrs	r3, r3, #5
 800595a:	f003 0207 	and.w	r2, r3, #7
 800595e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	4422      	add	r2, r4
 8005966:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005968:	e106      	b.n	8005b78 <UART_SetConfig+0x4d8>
 800596a:	bf00      	nop
 800596c:	40011000 	.word	0x40011000
 8005970:	40011400 	.word	0x40011400
 8005974:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005978:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800597c:	2200      	movs	r2, #0
 800597e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005982:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005986:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800598a:	4642      	mov	r2, r8
 800598c:	464b      	mov	r3, r9
 800598e:	1891      	adds	r1, r2, r2
 8005990:	6239      	str	r1, [r7, #32]
 8005992:	415b      	adcs	r3, r3
 8005994:	627b      	str	r3, [r7, #36]	@ 0x24
 8005996:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800599a:	4641      	mov	r1, r8
 800599c:	1854      	adds	r4, r2, r1
 800599e:	4649      	mov	r1, r9
 80059a0:	eb43 0501 	adc.w	r5, r3, r1
 80059a4:	f04f 0200 	mov.w	r2, #0
 80059a8:	f04f 0300 	mov.w	r3, #0
 80059ac:	00eb      	lsls	r3, r5, #3
 80059ae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80059b2:	00e2      	lsls	r2, r4, #3
 80059b4:	4614      	mov	r4, r2
 80059b6:	461d      	mov	r5, r3
 80059b8:	4643      	mov	r3, r8
 80059ba:	18e3      	adds	r3, r4, r3
 80059bc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80059c0:	464b      	mov	r3, r9
 80059c2:	eb45 0303 	adc.w	r3, r5, r3
 80059c6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80059ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059ce:	685b      	ldr	r3, [r3, #4]
 80059d0:	2200      	movs	r2, #0
 80059d2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80059d6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80059da:	f04f 0200 	mov.w	r2, #0
 80059de:	f04f 0300 	mov.w	r3, #0
 80059e2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80059e6:	4629      	mov	r1, r5
 80059e8:	008b      	lsls	r3, r1, #2
 80059ea:	4621      	mov	r1, r4
 80059ec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80059f0:	4621      	mov	r1, r4
 80059f2:	008a      	lsls	r2, r1, #2
 80059f4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80059f8:	f7fa fc52 	bl	80002a0 <__aeabi_uldivmod>
 80059fc:	4602      	mov	r2, r0
 80059fe:	460b      	mov	r3, r1
 8005a00:	4b60      	ldr	r3, [pc, #384]	@ (8005b84 <UART_SetConfig+0x4e4>)
 8005a02:	fba3 2302 	umull	r2, r3, r3, r2
 8005a06:	095b      	lsrs	r3, r3, #5
 8005a08:	011c      	lsls	r4, r3, #4
 8005a0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005a0e:	2200      	movs	r2, #0
 8005a10:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005a14:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005a18:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005a1c:	4642      	mov	r2, r8
 8005a1e:	464b      	mov	r3, r9
 8005a20:	1891      	adds	r1, r2, r2
 8005a22:	61b9      	str	r1, [r7, #24]
 8005a24:	415b      	adcs	r3, r3
 8005a26:	61fb      	str	r3, [r7, #28]
 8005a28:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005a2c:	4641      	mov	r1, r8
 8005a2e:	1851      	adds	r1, r2, r1
 8005a30:	6139      	str	r1, [r7, #16]
 8005a32:	4649      	mov	r1, r9
 8005a34:	414b      	adcs	r3, r1
 8005a36:	617b      	str	r3, [r7, #20]
 8005a38:	f04f 0200 	mov.w	r2, #0
 8005a3c:	f04f 0300 	mov.w	r3, #0
 8005a40:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005a44:	4659      	mov	r1, fp
 8005a46:	00cb      	lsls	r3, r1, #3
 8005a48:	4651      	mov	r1, sl
 8005a4a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005a4e:	4651      	mov	r1, sl
 8005a50:	00ca      	lsls	r2, r1, #3
 8005a52:	4610      	mov	r0, r2
 8005a54:	4619      	mov	r1, r3
 8005a56:	4603      	mov	r3, r0
 8005a58:	4642      	mov	r2, r8
 8005a5a:	189b      	adds	r3, r3, r2
 8005a5c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005a60:	464b      	mov	r3, r9
 8005a62:	460a      	mov	r2, r1
 8005a64:	eb42 0303 	adc.w	r3, r2, r3
 8005a68:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005a6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a70:	685b      	ldr	r3, [r3, #4]
 8005a72:	2200      	movs	r2, #0
 8005a74:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005a76:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005a78:	f04f 0200 	mov.w	r2, #0
 8005a7c:	f04f 0300 	mov.w	r3, #0
 8005a80:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005a84:	4649      	mov	r1, r9
 8005a86:	008b      	lsls	r3, r1, #2
 8005a88:	4641      	mov	r1, r8
 8005a8a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005a8e:	4641      	mov	r1, r8
 8005a90:	008a      	lsls	r2, r1, #2
 8005a92:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005a96:	f7fa fc03 	bl	80002a0 <__aeabi_uldivmod>
 8005a9a:	4602      	mov	r2, r0
 8005a9c:	460b      	mov	r3, r1
 8005a9e:	4611      	mov	r1, r2
 8005aa0:	4b38      	ldr	r3, [pc, #224]	@ (8005b84 <UART_SetConfig+0x4e4>)
 8005aa2:	fba3 2301 	umull	r2, r3, r3, r1
 8005aa6:	095b      	lsrs	r3, r3, #5
 8005aa8:	2264      	movs	r2, #100	@ 0x64
 8005aaa:	fb02 f303 	mul.w	r3, r2, r3
 8005aae:	1acb      	subs	r3, r1, r3
 8005ab0:	011b      	lsls	r3, r3, #4
 8005ab2:	3332      	adds	r3, #50	@ 0x32
 8005ab4:	4a33      	ldr	r2, [pc, #204]	@ (8005b84 <UART_SetConfig+0x4e4>)
 8005ab6:	fba2 2303 	umull	r2, r3, r2, r3
 8005aba:	095b      	lsrs	r3, r3, #5
 8005abc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005ac0:	441c      	add	r4, r3
 8005ac2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	673b      	str	r3, [r7, #112]	@ 0x70
 8005aca:	677a      	str	r2, [r7, #116]	@ 0x74
 8005acc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005ad0:	4642      	mov	r2, r8
 8005ad2:	464b      	mov	r3, r9
 8005ad4:	1891      	adds	r1, r2, r2
 8005ad6:	60b9      	str	r1, [r7, #8]
 8005ad8:	415b      	adcs	r3, r3
 8005ada:	60fb      	str	r3, [r7, #12]
 8005adc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005ae0:	4641      	mov	r1, r8
 8005ae2:	1851      	adds	r1, r2, r1
 8005ae4:	6039      	str	r1, [r7, #0]
 8005ae6:	4649      	mov	r1, r9
 8005ae8:	414b      	adcs	r3, r1
 8005aea:	607b      	str	r3, [r7, #4]
 8005aec:	f04f 0200 	mov.w	r2, #0
 8005af0:	f04f 0300 	mov.w	r3, #0
 8005af4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005af8:	4659      	mov	r1, fp
 8005afa:	00cb      	lsls	r3, r1, #3
 8005afc:	4651      	mov	r1, sl
 8005afe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005b02:	4651      	mov	r1, sl
 8005b04:	00ca      	lsls	r2, r1, #3
 8005b06:	4610      	mov	r0, r2
 8005b08:	4619      	mov	r1, r3
 8005b0a:	4603      	mov	r3, r0
 8005b0c:	4642      	mov	r2, r8
 8005b0e:	189b      	adds	r3, r3, r2
 8005b10:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005b12:	464b      	mov	r3, r9
 8005b14:	460a      	mov	r2, r1
 8005b16:	eb42 0303 	adc.w	r3, r2, r3
 8005b1a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005b1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b20:	685b      	ldr	r3, [r3, #4]
 8005b22:	2200      	movs	r2, #0
 8005b24:	663b      	str	r3, [r7, #96]	@ 0x60
 8005b26:	667a      	str	r2, [r7, #100]	@ 0x64
 8005b28:	f04f 0200 	mov.w	r2, #0
 8005b2c:	f04f 0300 	mov.w	r3, #0
 8005b30:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005b34:	4649      	mov	r1, r9
 8005b36:	008b      	lsls	r3, r1, #2
 8005b38:	4641      	mov	r1, r8
 8005b3a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005b3e:	4641      	mov	r1, r8
 8005b40:	008a      	lsls	r2, r1, #2
 8005b42:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005b46:	f7fa fbab 	bl	80002a0 <__aeabi_uldivmod>
 8005b4a:	4602      	mov	r2, r0
 8005b4c:	460b      	mov	r3, r1
 8005b4e:	4b0d      	ldr	r3, [pc, #52]	@ (8005b84 <UART_SetConfig+0x4e4>)
 8005b50:	fba3 1302 	umull	r1, r3, r3, r2
 8005b54:	095b      	lsrs	r3, r3, #5
 8005b56:	2164      	movs	r1, #100	@ 0x64
 8005b58:	fb01 f303 	mul.w	r3, r1, r3
 8005b5c:	1ad3      	subs	r3, r2, r3
 8005b5e:	011b      	lsls	r3, r3, #4
 8005b60:	3332      	adds	r3, #50	@ 0x32
 8005b62:	4a08      	ldr	r2, [pc, #32]	@ (8005b84 <UART_SetConfig+0x4e4>)
 8005b64:	fba2 2303 	umull	r2, r3, r2, r3
 8005b68:	095b      	lsrs	r3, r3, #5
 8005b6a:	f003 020f 	and.w	r2, r3, #15
 8005b6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	4422      	add	r2, r4
 8005b76:	609a      	str	r2, [r3, #8]
}
 8005b78:	bf00      	nop
 8005b7a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005b84:	51eb851f 	.word	0x51eb851f

08005b88 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005b88:	b084      	sub	sp, #16
 8005b8a:	b580      	push	{r7, lr}
 8005b8c:	b084      	sub	sp, #16
 8005b8e:	af00      	add	r7, sp, #0
 8005b90:	6078      	str	r0, [r7, #4]
 8005b92:	f107 001c 	add.w	r0, r7, #28
 8005b96:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005b9a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8005b9e:	2b01      	cmp	r3, #1
 8005ba0:	d123      	bne.n	8005bea <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ba6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	68db      	ldr	r3, [r3, #12]
 8005bb2:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8005bb6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005bba:	687a      	ldr	r2, [r7, #4]
 8005bbc:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	68db      	ldr	r3, [r3, #12]
 8005bc2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005bca:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005bce:	2b01      	cmp	r3, #1
 8005bd0:	d105      	bne.n	8005bde <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	68db      	ldr	r3, [r3, #12]
 8005bd6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005bde:	6878      	ldr	r0, [r7, #4]
 8005be0:	f001 fae2 	bl	80071a8 <USB_CoreReset>
 8005be4:	4603      	mov	r3, r0
 8005be6:	73fb      	strb	r3, [r7, #15]
 8005be8:	e01b      	b.n	8005c22 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	68db      	ldr	r3, [r3, #12]
 8005bee:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005bf6:	6878      	ldr	r0, [r7, #4]
 8005bf8:	f001 fad6 	bl	80071a8 <USB_CoreReset>
 8005bfc:	4603      	mov	r3, r0
 8005bfe:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005c00:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d106      	bne.n	8005c16 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c0c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	639a      	str	r2, [r3, #56]	@ 0x38
 8005c14:	e005      	b.n	8005c22 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c1a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005c22:	7fbb      	ldrb	r3, [r7, #30]
 8005c24:	2b01      	cmp	r3, #1
 8005c26:	d10b      	bne.n	8005c40 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	689b      	ldr	r3, [r3, #8]
 8005c2c:	f043 0206 	orr.w	r2, r3, #6
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	689b      	ldr	r3, [r3, #8]
 8005c38:	f043 0220 	orr.w	r2, r3, #32
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005c40:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c42:	4618      	mov	r0, r3
 8005c44:	3710      	adds	r7, #16
 8005c46:	46bd      	mov	sp, r7
 8005c48:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005c4c:	b004      	add	sp, #16
 8005c4e:	4770      	bx	lr

08005c50 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005c50:	b480      	push	{r7}
 8005c52:	b087      	sub	sp, #28
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	60f8      	str	r0, [r7, #12]
 8005c58:	60b9      	str	r1, [r7, #8]
 8005c5a:	4613      	mov	r3, r2
 8005c5c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005c5e:	79fb      	ldrb	r3, [r7, #7]
 8005c60:	2b02      	cmp	r3, #2
 8005c62:	d165      	bne.n	8005d30 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005c64:	68bb      	ldr	r3, [r7, #8]
 8005c66:	4a41      	ldr	r2, [pc, #260]	@ (8005d6c <USB_SetTurnaroundTime+0x11c>)
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d906      	bls.n	8005c7a <USB_SetTurnaroundTime+0x2a>
 8005c6c:	68bb      	ldr	r3, [r7, #8]
 8005c6e:	4a40      	ldr	r2, [pc, #256]	@ (8005d70 <USB_SetTurnaroundTime+0x120>)
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d202      	bcs.n	8005c7a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005c74:	230f      	movs	r3, #15
 8005c76:	617b      	str	r3, [r7, #20]
 8005c78:	e062      	b.n	8005d40 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005c7a:	68bb      	ldr	r3, [r7, #8]
 8005c7c:	4a3c      	ldr	r2, [pc, #240]	@ (8005d70 <USB_SetTurnaroundTime+0x120>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d306      	bcc.n	8005c90 <USB_SetTurnaroundTime+0x40>
 8005c82:	68bb      	ldr	r3, [r7, #8]
 8005c84:	4a3b      	ldr	r2, [pc, #236]	@ (8005d74 <USB_SetTurnaroundTime+0x124>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d202      	bcs.n	8005c90 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005c8a:	230e      	movs	r3, #14
 8005c8c:	617b      	str	r3, [r7, #20]
 8005c8e:	e057      	b.n	8005d40 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005c90:	68bb      	ldr	r3, [r7, #8]
 8005c92:	4a38      	ldr	r2, [pc, #224]	@ (8005d74 <USB_SetTurnaroundTime+0x124>)
 8005c94:	4293      	cmp	r3, r2
 8005c96:	d306      	bcc.n	8005ca6 <USB_SetTurnaroundTime+0x56>
 8005c98:	68bb      	ldr	r3, [r7, #8]
 8005c9a:	4a37      	ldr	r2, [pc, #220]	@ (8005d78 <USB_SetTurnaroundTime+0x128>)
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	d202      	bcs.n	8005ca6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005ca0:	230d      	movs	r3, #13
 8005ca2:	617b      	str	r3, [r7, #20]
 8005ca4:	e04c      	b.n	8005d40 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005ca6:	68bb      	ldr	r3, [r7, #8]
 8005ca8:	4a33      	ldr	r2, [pc, #204]	@ (8005d78 <USB_SetTurnaroundTime+0x128>)
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d306      	bcc.n	8005cbc <USB_SetTurnaroundTime+0x6c>
 8005cae:	68bb      	ldr	r3, [r7, #8]
 8005cb0:	4a32      	ldr	r2, [pc, #200]	@ (8005d7c <USB_SetTurnaroundTime+0x12c>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d802      	bhi.n	8005cbc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005cb6:	230c      	movs	r3, #12
 8005cb8:	617b      	str	r3, [r7, #20]
 8005cba:	e041      	b.n	8005d40 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	4a2f      	ldr	r2, [pc, #188]	@ (8005d7c <USB_SetTurnaroundTime+0x12c>)
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d906      	bls.n	8005cd2 <USB_SetTurnaroundTime+0x82>
 8005cc4:	68bb      	ldr	r3, [r7, #8]
 8005cc6:	4a2e      	ldr	r2, [pc, #184]	@ (8005d80 <USB_SetTurnaroundTime+0x130>)
 8005cc8:	4293      	cmp	r3, r2
 8005cca:	d802      	bhi.n	8005cd2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005ccc:	230b      	movs	r3, #11
 8005cce:	617b      	str	r3, [r7, #20]
 8005cd0:	e036      	b.n	8005d40 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005cd2:	68bb      	ldr	r3, [r7, #8]
 8005cd4:	4a2a      	ldr	r2, [pc, #168]	@ (8005d80 <USB_SetTurnaroundTime+0x130>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d906      	bls.n	8005ce8 <USB_SetTurnaroundTime+0x98>
 8005cda:	68bb      	ldr	r3, [r7, #8]
 8005cdc:	4a29      	ldr	r2, [pc, #164]	@ (8005d84 <USB_SetTurnaroundTime+0x134>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d802      	bhi.n	8005ce8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005ce2:	230a      	movs	r3, #10
 8005ce4:	617b      	str	r3, [r7, #20]
 8005ce6:	e02b      	b.n	8005d40 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005ce8:	68bb      	ldr	r3, [r7, #8]
 8005cea:	4a26      	ldr	r2, [pc, #152]	@ (8005d84 <USB_SetTurnaroundTime+0x134>)
 8005cec:	4293      	cmp	r3, r2
 8005cee:	d906      	bls.n	8005cfe <USB_SetTurnaroundTime+0xae>
 8005cf0:	68bb      	ldr	r3, [r7, #8]
 8005cf2:	4a25      	ldr	r2, [pc, #148]	@ (8005d88 <USB_SetTurnaroundTime+0x138>)
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	d202      	bcs.n	8005cfe <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005cf8:	2309      	movs	r3, #9
 8005cfa:	617b      	str	r3, [r7, #20]
 8005cfc:	e020      	b.n	8005d40 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005cfe:	68bb      	ldr	r3, [r7, #8]
 8005d00:	4a21      	ldr	r2, [pc, #132]	@ (8005d88 <USB_SetTurnaroundTime+0x138>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d306      	bcc.n	8005d14 <USB_SetTurnaroundTime+0xc4>
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	4a20      	ldr	r2, [pc, #128]	@ (8005d8c <USB_SetTurnaroundTime+0x13c>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d802      	bhi.n	8005d14 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005d0e:	2308      	movs	r3, #8
 8005d10:	617b      	str	r3, [r7, #20]
 8005d12:	e015      	b.n	8005d40 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005d14:	68bb      	ldr	r3, [r7, #8]
 8005d16:	4a1d      	ldr	r2, [pc, #116]	@ (8005d8c <USB_SetTurnaroundTime+0x13c>)
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d906      	bls.n	8005d2a <USB_SetTurnaroundTime+0xda>
 8005d1c:	68bb      	ldr	r3, [r7, #8]
 8005d1e:	4a1c      	ldr	r2, [pc, #112]	@ (8005d90 <USB_SetTurnaroundTime+0x140>)
 8005d20:	4293      	cmp	r3, r2
 8005d22:	d202      	bcs.n	8005d2a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005d24:	2307      	movs	r3, #7
 8005d26:	617b      	str	r3, [r7, #20]
 8005d28:	e00a      	b.n	8005d40 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005d2a:	2306      	movs	r3, #6
 8005d2c:	617b      	str	r3, [r7, #20]
 8005d2e:	e007      	b.n	8005d40 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005d30:	79fb      	ldrb	r3, [r7, #7]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d102      	bne.n	8005d3c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005d36:	2309      	movs	r3, #9
 8005d38:	617b      	str	r3, [r7, #20]
 8005d3a:	e001      	b.n	8005d40 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005d3c:	2309      	movs	r3, #9
 8005d3e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	68db      	ldr	r3, [r3, #12]
 8005d44:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	68da      	ldr	r2, [r3, #12]
 8005d50:	697b      	ldr	r3, [r7, #20]
 8005d52:	029b      	lsls	r3, r3, #10
 8005d54:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8005d58:	431a      	orrs	r2, r3
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005d5e:	2300      	movs	r3, #0
}
 8005d60:	4618      	mov	r0, r3
 8005d62:	371c      	adds	r7, #28
 8005d64:	46bd      	mov	sp, r7
 8005d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6a:	4770      	bx	lr
 8005d6c:	00d8acbf 	.word	0x00d8acbf
 8005d70:	00e4e1c0 	.word	0x00e4e1c0
 8005d74:	00f42400 	.word	0x00f42400
 8005d78:	01067380 	.word	0x01067380
 8005d7c:	011a499f 	.word	0x011a499f
 8005d80:	01312cff 	.word	0x01312cff
 8005d84:	014ca43f 	.word	0x014ca43f
 8005d88:	016e3600 	.word	0x016e3600
 8005d8c:	01a6ab1f 	.word	0x01a6ab1f
 8005d90:	01e84800 	.word	0x01e84800

08005d94 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005d94:	b480      	push	{r7}
 8005d96:	b083      	sub	sp, #12
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	689b      	ldr	r3, [r3, #8]
 8005da0:	f043 0201 	orr.w	r2, r3, #1
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005da8:	2300      	movs	r3, #0
}
 8005daa:	4618      	mov	r0, r3
 8005dac:	370c      	adds	r7, #12
 8005dae:	46bd      	mov	sp, r7
 8005db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db4:	4770      	bx	lr

08005db6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005db6:	b480      	push	{r7}
 8005db8:	b083      	sub	sp, #12
 8005dba:	af00      	add	r7, sp, #0
 8005dbc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	689b      	ldr	r3, [r3, #8]
 8005dc2:	f023 0201 	bic.w	r2, r3, #1
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005dca:	2300      	movs	r3, #0
}
 8005dcc:	4618      	mov	r0, r3
 8005dce:	370c      	adds	r7, #12
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd6:	4770      	bx	lr

08005dd8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b084      	sub	sp, #16
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
 8005de0:	460b      	mov	r3, r1
 8005de2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005de4:	2300      	movs	r3, #0
 8005de6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	68db      	ldr	r3, [r3, #12]
 8005dec:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005df4:	78fb      	ldrb	r3, [r7, #3]
 8005df6:	2b01      	cmp	r3, #1
 8005df8:	d115      	bne.n	8005e26 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	68db      	ldr	r3, [r3, #12]
 8005dfe:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005e06:	200a      	movs	r0, #10
 8005e08:	f7fb fe2e 	bl	8001a68 <HAL_Delay>
      ms += 10U;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	330a      	adds	r3, #10
 8005e10:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005e12:	6878      	ldr	r0, [r7, #4]
 8005e14:	f001 f939 	bl	800708a <USB_GetMode>
 8005e18:	4603      	mov	r3, r0
 8005e1a:	2b01      	cmp	r3, #1
 8005e1c:	d01e      	beq.n	8005e5c <USB_SetCurrentMode+0x84>
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	2bc7      	cmp	r3, #199	@ 0xc7
 8005e22:	d9f0      	bls.n	8005e06 <USB_SetCurrentMode+0x2e>
 8005e24:	e01a      	b.n	8005e5c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005e26:	78fb      	ldrb	r3, [r7, #3]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d115      	bne.n	8005e58 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	68db      	ldr	r3, [r3, #12]
 8005e30:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005e38:	200a      	movs	r0, #10
 8005e3a:	f7fb fe15 	bl	8001a68 <HAL_Delay>
      ms += 10U;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	330a      	adds	r3, #10
 8005e42:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005e44:	6878      	ldr	r0, [r7, #4]
 8005e46:	f001 f920 	bl	800708a <USB_GetMode>
 8005e4a:	4603      	mov	r3, r0
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d005      	beq.n	8005e5c <USB_SetCurrentMode+0x84>
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	2bc7      	cmp	r3, #199	@ 0xc7
 8005e54:	d9f0      	bls.n	8005e38 <USB_SetCurrentMode+0x60>
 8005e56:	e001      	b.n	8005e5c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005e58:	2301      	movs	r3, #1
 8005e5a:	e005      	b.n	8005e68 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	2bc8      	cmp	r3, #200	@ 0xc8
 8005e60:	d101      	bne.n	8005e66 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005e62:	2301      	movs	r3, #1
 8005e64:	e000      	b.n	8005e68 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005e66:	2300      	movs	r3, #0
}
 8005e68:	4618      	mov	r0, r3
 8005e6a:	3710      	adds	r7, #16
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	bd80      	pop	{r7, pc}

08005e70 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005e70:	b084      	sub	sp, #16
 8005e72:	b580      	push	{r7, lr}
 8005e74:	b086      	sub	sp, #24
 8005e76:	af00      	add	r7, sp, #0
 8005e78:	6078      	str	r0, [r7, #4]
 8005e7a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8005e7e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005e82:	2300      	movs	r3, #0
 8005e84:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	613b      	str	r3, [r7, #16]
 8005e8e:	e009      	b.n	8005ea4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005e90:	687a      	ldr	r2, [r7, #4]
 8005e92:	693b      	ldr	r3, [r7, #16]
 8005e94:	3340      	adds	r3, #64	@ 0x40
 8005e96:	009b      	lsls	r3, r3, #2
 8005e98:	4413      	add	r3, r2
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005e9e:	693b      	ldr	r3, [r7, #16]
 8005ea0:	3301      	adds	r3, #1
 8005ea2:	613b      	str	r3, [r7, #16]
 8005ea4:	693b      	ldr	r3, [r7, #16]
 8005ea6:	2b0e      	cmp	r3, #14
 8005ea8:	d9f2      	bls.n	8005e90 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005eaa:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d11c      	bne.n	8005eec <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005eb8:	685b      	ldr	r3, [r3, #4]
 8005eba:	68fa      	ldr	r2, [r7, #12]
 8005ebc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005ec0:	f043 0302 	orr.w	r3, r3, #2
 8005ec4:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005eca:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ed6:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ee2:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	639a      	str	r2, [r3, #56]	@ 0x38
 8005eea:	e00b      	b.n	8005f04 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ef0:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005efc:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005f0a:	461a      	mov	r2, r3
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005f10:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8005f14:	2b01      	cmp	r3, #1
 8005f16:	d10d      	bne.n	8005f34 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005f18:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d104      	bne.n	8005f2a <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005f20:	2100      	movs	r1, #0
 8005f22:	6878      	ldr	r0, [r7, #4]
 8005f24:	f000 f968 	bl	80061f8 <USB_SetDevSpeed>
 8005f28:	e008      	b.n	8005f3c <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005f2a:	2101      	movs	r1, #1
 8005f2c:	6878      	ldr	r0, [r7, #4]
 8005f2e:	f000 f963 	bl	80061f8 <USB_SetDevSpeed>
 8005f32:	e003      	b.n	8005f3c <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005f34:	2103      	movs	r1, #3
 8005f36:	6878      	ldr	r0, [r7, #4]
 8005f38:	f000 f95e 	bl	80061f8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005f3c:	2110      	movs	r1, #16
 8005f3e:	6878      	ldr	r0, [r7, #4]
 8005f40:	f000 f8fa 	bl	8006138 <USB_FlushTxFifo>
 8005f44:	4603      	mov	r3, r0
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d001      	beq.n	8005f4e <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8005f4a:	2301      	movs	r3, #1
 8005f4c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005f4e:	6878      	ldr	r0, [r7, #4]
 8005f50:	f000 f924 	bl	800619c <USB_FlushRxFifo>
 8005f54:	4603      	mov	r3, r0
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d001      	beq.n	8005f5e <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8005f5a:	2301      	movs	r3, #1
 8005f5c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f64:	461a      	mov	r2, r3
 8005f66:	2300      	movs	r3, #0
 8005f68:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f70:	461a      	mov	r2, r3
 8005f72:	2300      	movs	r3, #0
 8005f74:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f7c:	461a      	mov	r2, r3
 8005f7e:	2300      	movs	r3, #0
 8005f80:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005f82:	2300      	movs	r3, #0
 8005f84:	613b      	str	r3, [r7, #16]
 8005f86:	e043      	b.n	8006010 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005f88:	693b      	ldr	r3, [r7, #16]
 8005f8a:	015a      	lsls	r2, r3, #5
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	4413      	add	r3, r2
 8005f90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005f9a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005f9e:	d118      	bne.n	8005fd2 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8005fa0:	693b      	ldr	r3, [r7, #16]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d10a      	bne.n	8005fbc <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005fa6:	693b      	ldr	r3, [r7, #16]
 8005fa8:	015a      	lsls	r2, r3, #5
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	4413      	add	r3, r2
 8005fae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005fb2:	461a      	mov	r2, r3
 8005fb4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005fb8:	6013      	str	r3, [r2, #0]
 8005fba:	e013      	b.n	8005fe4 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005fbc:	693b      	ldr	r3, [r7, #16]
 8005fbe:	015a      	lsls	r2, r3, #5
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	4413      	add	r3, r2
 8005fc4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005fc8:	461a      	mov	r2, r3
 8005fca:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005fce:	6013      	str	r3, [r2, #0]
 8005fd0:	e008      	b.n	8005fe4 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005fd2:	693b      	ldr	r3, [r7, #16]
 8005fd4:	015a      	lsls	r2, r3, #5
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	4413      	add	r3, r2
 8005fda:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005fde:	461a      	mov	r2, r3
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005fe4:	693b      	ldr	r3, [r7, #16]
 8005fe6:	015a      	lsls	r2, r3, #5
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	4413      	add	r3, r2
 8005fec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ff0:	461a      	mov	r2, r3
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005ff6:	693b      	ldr	r3, [r7, #16]
 8005ff8:	015a      	lsls	r2, r3, #5
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	4413      	add	r3, r2
 8005ffe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006002:	461a      	mov	r2, r3
 8006004:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006008:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800600a:	693b      	ldr	r3, [r7, #16]
 800600c:	3301      	adds	r3, #1
 800600e:	613b      	str	r3, [r7, #16]
 8006010:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006014:	461a      	mov	r2, r3
 8006016:	693b      	ldr	r3, [r7, #16]
 8006018:	4293      	cmp	r3, r2
 800601a:	d3b5      	bcc.n	8005f88 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800601c:	2300      	movs	r3, #0
 800601e:	613b      	str	r3, [r7, #16]
 8006020:	e043      	b.n	80060aa <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006022:	693b      	ldr	r3, [r7, #16]
 8006024:	015a      	lsls	r2, r3, #5
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	4413      	add	r3, r2
 800602a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006034:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006038:	d118      	bne.n	800606c <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800603a:	693b      	ldr	r3, [r7, #16]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d10a      	bne.n	8006056 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006040:	693b      	ldr	r3, [r7, #16]
 8006042:	015a      	lsls	r2, r3, #5
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	4413      	add	r3, r2
 8006048:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800604c:	461a      	mov	r2, r3
 800604e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006052:	6013      	str	r3, [r2, #0]
 8006054:	e013      	b.n	800607e <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006056:	693b      	ldr	r3, [r7, #16]
 8006058:	015a      	lsls	r2, r3, #5
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	4413      	add	r3, r2
 800605e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006062:	461a      	mov	r2, r3
 8006064:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006068:	6013      	str	r3, [r2, #0]
 800606a:	e008      	b.n	800607e <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800606c:	693b      	ldr	r3, [r7, #16]
 800606e:	015a      	lsls	r2, r3, #5
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	4413      	add	r3, r2
 8006074:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006078:	461a      	mov	r2, r3
 800607a:	2300      	movs	r3, #0
 800607c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800607e:	693b      	ldr	r3, [r7, #16]
 8006080:	015a      	lsls	r2, r3, #5
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	4413      	add	r3, r2
 8006086:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800608a:	461a      	mov	r2, r3
 800608c:	2300      	movs	r3, #0
 800608e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006090:	693b      	ldr	r3, [r7, #16]
 8006092:	015a      	lsls	r2, r3, #5
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	4413      	add	r3, r2
 8006098:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800609c:	461a      	mov	r2, r3
 800609e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80060a2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80060a4:	693b      	ldr	r3, [r7, #16]
 80060a6:	3301      	adds	r3, #1
 80060a8:	613b      	str	r3, [r7, #16]
 80060aa:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80060ae:	461a      	mov	r2, r3
 80060b0:	693b      	ldr	r3, [r7, #16]
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d3b5      	bcc.n	8006022 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80060bc:	691b      	ldr	r3, [r3, #16]
 80060be:	68fa      	ldr	r2, [r7, #12]
 80060c0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80060c4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80060c8:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	2200      	movs	r2, #0
 80060ce:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80060d6:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80060d8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d105      	bne.n	80060ec <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	699b      	ldr	r3, [r3, #24]
 80060e4:	f043 0210 	orr.w	r2, r3, #16
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	699a      	ldr	r2, [r3, #24]
 80060f0:	4b10      	ldr	r3, [pc, #64]	@ (8006134 <USB_DevInit+0x2c4>)
 80060f2:	4313      	orrs	r3, r2
 80060f4:	687a      	ldr	r2, [r7, #4]
 80060f6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80060f8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d005      	beq.n	800610c <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	699b      	ldr	r3, [r3, #24]
 8006104:	f043 0208 	orr.w	r2, r3, #8
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800610c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006110:	2b01      	cmp	r3, #1
 8006112:	d107      	bne.n	8006124 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	699b      	ldr	r3, [r3, #24]
 8006118:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800611c:	f043 0304 	orr.w	r3, r3, #4
 8006120:	687a      	ldr	r2, [r7, #4]
 8006122:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006124:	7dfb      	ldrb	r3, [r7, #23]
}
 8006126:	4618      	mov	r0, r3
 8006128:	3718      	adds	r7, #24
 800612a:	46bd      	mov	sp, r7
 800612c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006130:	b004      	add	sp, #16
 8006132:	4770      	bx	lr
 8006134:	803c3800 	.word	0x803c3800

08006138 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006138:	b480      	push	{r7}
 800613a:	b085      	sub	sp, #20
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
 8006140:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006142:	2300      	movs	r3, #0
 8006144:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	3301      	adds	r3, #1
 800614a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006152:	d901      	bls.n	8006158 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006154:	2303      	movs	r3, #3
 8006156:	e01b      	b.n	8006190 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	691b      	ldr	r3, [r3, #16]
 800615c:	2b00      	cmp	r3, #0
 800615e:	daf2      	bge.n	8006146 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006160:	2300      	movs	r3, #0
 8006162:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	019b      	lsls	r3, r3, #6
 8006168:	f043 0220 	orr.w	r2, r3, #32
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	3301      	adds	r3, #1
 8006174:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800617c:	d901      	bls.n	8006182 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800617e:	2303      	movs	r3, #3
 8006180:	e006      	b.n	8006190 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	691b      	ldr	r3, [r3, #16]
 8006186:	f003 0320 	and.w	r3, r3, #32
 800618a:	2b20      	cmp	r3, #32
 800618c:	d0f0      	beq.n	8006170 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800618e:	2300      	movs	r3, #0
}
 8006190:	4618      	mov	r0, r3
 8006192:	3714      	adds	r7, #20
 8006194:	46bd      	mov	sp, r7
 8006196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619a:	4770      	bx	lr

0800619c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800619c:	b480      	push	{r7}
 800619e:	b085      	sub	sp, #20
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80061a4:	2300      	movs	r3, #0
 80061a6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	3301      	adds	r3, #1
 80061ac:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80061b4:	d901      	bls.n	80061ba <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80061b6:	2303      	movs	r3, #3
 80061b8:	e018      	b.n	80061ec <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	691b      	ldr	r3, [r3, #16]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	daf2      	bge.n	80061a8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80061c2:	2300      	movs	r3, #0
 80061c4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2210      	movs	r2, #16
 80061ca:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	3301      	adds	r3, #1
 80061d0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80061d8:	d901      	bls.n	80061de <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80061da:	2303      	movs	r3, #3
 80061dc:	e006      	b.n	80061ec <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	691b      	ldr	r3, [r3, #16]
 80061e2:	f003 0310 	and.w	r3, r3, #16
 80061e6:	2b10      	cmp	r3, #16
 80061e8:	d0f0      	beq.n	80061cc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80061ea:	2300      	movs	r3, #0
}
 80061ec:	4618      	mov	r0, r3
 80061ee:	3714      	adds	r7, #20
 80061f0:	46bd      	mov	sp, r7
 80061f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f6:	4770      	bx	lr

080061f8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80061f8:	b480      	push	{r7}
 80061fa:	b085      	sub	sp, #20
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
 8006200:	460b      	mov	r3, r1
 8006202:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800620e:	681a      	ldr	r2, [r3, #0]
 8006210:	78fb      	ldrb	r3, [r7, #3]
 8006212:	68f9      	ldr	r1, [r7, #12]
 8006214:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006218:	4313      	orrs	r3, r2
 800621a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800621c:	2300      	movs	r3, #0
}
 800621e:	4618      	mov	r0, r3
 8006220:	3714      	adds	r7, #20
 8006222:	46bd      	mov	sp, r7
 8006224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006228:	4770      	bx	lr

0800622a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800622a:	b480      	push	{r7}
 800622c:	b087      	sub	sp, #28
 800622e:	af00      	add	r7, sp, #0
 8006230:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006236:	693b      	ldr	r3, [r7, #16]
 8006238:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800623c:	689b      	ldr	r3, [r3, #8]
 800623e:	f003 0306 	and.w	r3, r3, #6
 8006242:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d102      	bne.n	8006250 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800624a:	2300      	movs	r3, #0
 800624c:	75fb      	strb	r3, [r7, #23]
 800624e:	e00a      	b.n	8006266 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	2b02      	cmp	r3, #2
 8006254:	d002      	beq.n	800625c <USB_GetDevSpeed+0x32>
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	2b06      	cmp	r3, #6
 800625a:	d102      	bne.n	8006262 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800625c:	2302      	movs	r3, #2
 800625e:	75fb      	strb	r3, [r7, #23]
 8006260:	e001      	b.n	8006266 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8006262:	230f      	movs	r3, #15
 8006264:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006266:	7dfb      	ldrb	r3, [r7, #23]
}
 8006268:	4618      	mov	r0, r3
 800626a:	371c      	adds	r7, #28
 800626c:	46bd      	mov	sp, r7
 800626e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006272:	4770      	bx	lr

08006274 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006274:	b480      	push	{r7}
 8006276:	b085      	sub	sp, #20
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
 800627c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	781b      	ldrb	r3, [r3, #0]
 8006286:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	785b      	ldrb	r3, [r3, #1]
 800628c:	2b01      	cmp	r3, #1
 800628e:	d13a      	bne.n	8006306 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006296:	69da      	ldr	r2, [r3, #28]
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	781b      	ldrb	r3, [r3, #0]
 800629c:	f003 030f 	and.w	r3, r3, #15
 80062a0:	2101      	movs	r1, #1
 80062a2:	fa01 f303 	lsl.w	r3, r1, r3
 80062a6:	b29b      	uxth	r3, r3
 80062a8:	68f9      	ldr	r1, [r7, #12]
 80062aa:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80062ae:	4313      	orrs	r3, r2
 80062b0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80062b2:	68bb      	ldr	r3, [r7, #8]
 80062b4:	015a      	lsls	r2, r3, #5
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	4413      	add	r3, r2
 80062ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d155      	bne.n	8006374 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80062c8:	68bb      	ldr	r3, [r7, #8]
 80062ca:	015a      	lsls	r2, r3, #5
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	4413      	add	r3, r2
 80062d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80062d4:	681a      	ldr	r2, [r3, #0]
 80062d6:	683b      	ldr	r3, [r7, #0]
 80062d8:	689b      	ldr	r3, [r3, #8]
 80062da:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	791b      	ldrb	r3, [r3, #4]
 80062e2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80062e4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80062e6:	68bb      	ldr	r3, [r7, #8]
 80062e8:	059b      	lsls	r3, r3, #22
 80062ea:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80062ec:	4313      	orrs	r3, r2
 80062ee:	68ba      	ldr	r2, [r7, #8]
 80062f0:	0151      	lsls	r1, r2, #5
 80062f2:	68fa      	ldr	r2, [r7, #12]
 80062f4:	440a      	add	r2, r1
 80062f6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80062fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80062fe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006302:	6013      	str	r3, [r2, #0]
 8006304:	e036      	b.n	8006374 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800630c:	69da      	ldr	r2, [r3, #28]
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	781b      	ldrb	r3, [r3, #0]
 8006312:	f003 030f 	and.w	r3, r3, #15
 8006316:	2101      	movs	r1, #1
 8006318:	fa01 f303 	lsl.w	r3, r1, r3
 800631c:	041b      	lsls	r3, r3, #16
 800631e:	68f9      	ldr	r1, [r7, #12]
 8006320:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006324:	4313      	orrs	r3, r2
 8006326:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006328:	68bb      	ldr	r3, [r7, #8]
 800632a:	015a      	lsls	r2, r3, #5
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	4413      	add	r3, r2
 8006330:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800633a:	2b00      	cmp	r3, #0
 800633c:	d11a      	bne.n	8006374 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800633e:	68bb      	ldr	r3, [r7, #8]
 8006340:	015a      	lsls	r2, r3, #5
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	4413      	add	r3, r2
 8006346:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800634a:	681a      	ldr	r2, [r3, #0]
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	689b      	ldr	r3, [r3, #8]
 8006350:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	791b      	ldrb	r3, [r3, #4]
 8006358:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800635a:	430b      	orrs	r3, r1
 800635c:	4313      	orrs	r3, r2
 800635e:	68ba      	ldr	r2, [r7, #8]
 8006360:	0151      	lsls	r1, r2, #5
 8006362:	68fa      	ldr	r2, [r7, #12]
 8006364:	440a      	add	r2, r1
 8006366:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800636a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800636e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006372:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006374:	2300      	movs	r3, #0
}
 8006376:	4618      	mov	r0, r3
 8006378:	3714      	adds	r7, #20
 800637a:	46bd      	mov	sp, r7
 800637c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006380:	4770      	bx	lr
	...

08006384 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006384:	b480      	push	{r7}
 8006386:	b085      	sub	sp, #20
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
 800638c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006392:	683b      	ldr	r3, [r7, #0]
 8006394:	781b      	ldrb	r3, [r3, #0]
 8006396:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	785b      	ldrb	r3, [r3, #1]
 800639c:	2b01      	cmp	r3, #1
 800639e:	d161      	bne.n	8006464 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80063a0:	68bb      	ldr	r3, [r7, #8]
 80063a2:	015a      	lsls	r2, r3, #5
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	4413      	add	r3, r2
 80063a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80063b2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80063b6:	d11f      	bne.n	80063f8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80063b8:	68bb      	ldr	r3, [r7, #8]
 80063ba:	015a      	lsls	r2, r3, #5
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	4413      	add	r3, r2
 80063c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	68ba      	ldr	r2, [r7, #8]
 80063c8:	0151      	lsls	r1, r2, #5
 80063ca:	68fa      	ldr	r2, [r7, #12]
 80063cc:	440a      	add	r2, r1
 80063ce:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80063d2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80063d6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80063d8:	68bb      	ldr	r3, [r7, #8]
 80063da:	015a      	lsls	r2, r3, #5
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	4413      	add	r3, r2
 80063e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	68ba      	ldr	r2, [r7, #8]
 80063e8:	0151      	lsls	r1, r2, #5
 80063ea:	68fa      	ldr	r2, [r7, #12]
 80063ec:	440a      	add	r2, r1
 80063ee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80063f2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80063f6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80063fe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	781b      	ldrb	r3, [r3, #0]
 8006404:	f003 030f 	and.w	r3, r3, #15
 8006408:	2101      	movs	r1, #1
 800640a:	fa01 f303 	lsl.w	r3, r1, r3
 800640e:	b29b      	uxth	r3, r3
 8006410:	43db      	mvns	r3, r3
 8006412:	68f9      	ldr	r1, [r7, #12]
 8006414:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006418:	4013      	ands	r3, r2
 800641a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006422:	69da      	ldr	r2, [r3, #28]
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	781b      	ldrb	r3, [r3, #0]
 8006428:	f003 030f 	and.w	r3, r3, #15
 800642c:	2101      	movs	r1, #1
 800642e:	fa01 f303 	lsl.w	r3, r1, r3
 8006432:	b29b      	uxth	r3, r3
 8006434:	43db      	mvns	r3, r3
 8006436:	68f9      	ldr	r1, [r7, #12]
 8006438:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800643c:	4013      	ands	r3, r2
 800643e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006440:	68bb      	ldr	r3, [r7, #8]
 8006442:	015a      	lsls	r2, r3, #5
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	4413      	add	r3, r2
 8006448:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800644c:	681a      	ldr	r2, [r3, #0]
 800644e:	68bb      	ldr	r3, [r7, #8]
 8006450:	0159      	lsls	r1, r3, #5
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	440b      	add	r3, r1
 8006456:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800645a:	4619      	mov	r1, r3
 800645c:	4b35      	ldr	r3, [pc, #212]	@ (8006534 <USB_DeactivateEndpoint+0x1b0>)
 800645e:	4013      	ands	r3, r2
 8006460:	600b      	str	r3, [r1, #0]
 8006462:	e060      	b.n	8006526 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006464:	68bb      	ldr	r3, [r7, #8]
 8006466:	015a      	lsls	r2, r3, #5
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	4413      	add	r3, r2
 800646c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006476:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800647a:	d11f      	bne.n	80064bc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800647c:	68bb      	ldr	r3, [r7, #8]
 800647e:	015a      	lsls	r2, r3, #5
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	4413      	add	r3, r2
 8006484:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	68ba      	ldr	r2, [r7, #8]
 800648c:	0151      	lsls	r1, r2, #5
 800648e:	68fa      	ldr	r2, [r7, #12]
 8006490:	440a      	add	r2, r1
 8006492:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006496:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800649a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800649c:	68bb      	ldr	r3, [r7, #8]
 800649e:	015a      	lsls	r2, r3, #5
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	4413      	add	r3, r2
 80064a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	68ba      	ldr	r2, [r7, #8]
 80064ac:	0151      	lsls	r1, r2, #5
 80064ae:	68fa      	ldr	r2, [r7, #12]
 80064b0:	440a      	add	r2, r1
 80064b2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80064b6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80064ba:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80064c2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	781b      	ldrb	r3, [r3, #0]
 80064c8:	f003 030f 	and.w	r3, r3, #15
 80064cc:	2101      	movs	r1, #1
 80064ce:	fa01 f303 	lsl.w	r3, r1, r3
 80064d2:	041b      	lsls	r3, r3, #16
 80064d4:	43db      	mvns	r3, r3
 80064d6:	68f9      	ldr	r1, [r7, #12]
 80064d8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80064dc:	4013      	ands	r3, r2
 80064de:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80064e6:	69da      	ldr	r2, [r3, #28]
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	781b      	ldrb	r3, [r3, #0]
 80064ec:	f003 030f 	and.w	r3, r3, #15
 80064f0:	2101      	movs	r1, #1
 80064f2:	fa01 f303 	lsl.w	r3, r1, r3
 80064f6:	041b      	lsls	r3, r3, #16
 80064f8:	43db      	mvns	r3, r3
 80064fa:	68f9      	ldr	r1, [r7, #12]
 80064fc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006500:	4013      	ands	r3, r2
 8006502:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006504:	68bb      	ldr	r3, [r7, #8]
 8006506:	015a      	lsls	r2, r3, #5
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	4413      	add	r3, r2
 800650c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006510:	681a      	ldr	r2, [r3, #0]
 8006512:	68bb      	ldr	r3, [r7, #8]
 8006514:	0159      	lsls	r1, r3, #5
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	440b      	add	r3, r1
 800651a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800651e:	4619      	mov	r1, r3
 8006520:	4b05      	ldr	r3, [pc, #20]	@ (8006538 <USB_DeactivateEndpoint+0x1b4>)
 8006522:	4013      	ands	r3, r2
 8006524:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006526:	2300      	movs	r3, #0
}
 8006528:	4618      	mov	r0, r3
 800652a:	3714      	adds	r7, #20
 800652c:	46bd      	mov	sp, r7
 800652e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006532:	4770      	bx	lr
 8006534:	ec337800 	.word	0xec337800
 8006538:	eff37800 	.word	0xeff37800

0800653c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800653c:	b580      	push	{r7, lr}
 800653e:	b08a      	sub	sp, #40	@ 0x28
 8006540:	af02      	add	r7, sp, #8
 8006542:	60f8      	str	r0, [r7, #12]
 8006544:	60b9      	str	r1, [r7, #8]
 8006546:	4613      	mov	r3, r2
 8006548:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800654e:	68bb      	ldr	r3, [r7, #8]
 8006550:	781b      	ldrb	r3, [r3, #0]
 8006552:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006554:	68bb      	ldr	r3, [r7, #8]
 8006556:	785b      	ldrb	r3, [r3, #1]
 8006558:	2b01      	cmp	r3, #1
 800655a:	f040 817a 	bne.w	8006852 <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800655e:	68bb      	ldr	r3, [r7, #8]
 8006560:	691b      	ldr	r3, [r3, #16]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d132      	bne.n	80065cc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006566:	69bb      	ldr	r3, [r7, #24]
 8006568:	015a      	lsls	r2, r3, #5
 800656a:	69fb      	ldr	r3, [r7, #28]
 800656c:	4413      	add	r3, r2
 800656e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006572:	691b      	ldr	r3, [r3, #16]
 8006574:	69ba      	ldr	r2, [r7, #24]
 8006576:	0151      	lsls	r1, r2, #5
 8006578:	69fa      	ldr	r2, [r7, #28]
 800657a:	440a      	add	r2, r1
 800657c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006580:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006584:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006588:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800658a:	69bb      	ldr	r3, [r7, #24]
 800658c:	015a      	lsls	r2, r3, #5
 800658e:	69fb      	ldr	r3, [r7, #28]
 8006590:	4413      	add	r3, r2
 8006592:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006596:	691b      	ldr	r3, [r3, #16]
 8006598:	69ba      	ldr	r2, [r7, #24]
 800659a:	0151      	lsls	r1, r2, #5
 800659c:	69fa      	ldr	r2, [r7, #28]
 800659e:	440a      	add	r2, r1
 80065a0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80065a4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80065a8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80065aa:	69bb      	ldr	r3, [r7, #24]
 80065ac:	015a      	lsls	r2, r3, #5
 80065ae:	69fb      	ldr	r3, [r7, #28]
 80065b0:	4413      	add	r3, r2
 80065b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80065b6:	691b      	ldr	r3, [r3, #16]
 80065b8:	69ba      	ldr	r2, [r7, #24]
 80065ba:	0151      	lsls	r1, r2, #5
 80065bc:	69fa      	ldr	r2, [r7, #28]
 80065be:	440a      	add	r2, r1
 80065c0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80065c4:	0cdb      	lsrs	r3, r3, #19
 80065c6:	04db      	lsls	r3, r3, #19
 80065c8:	6113      	str	r3, [r2, #16]
 80065ca:	e092      	b.n	80066f2 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80065cc:	69bb      	ldr	r3, [r7, #24]
 80065ce:	015a      	lsls	r2, r3, #5
 80065d0:	69fb      	ldr	r3, [r7, #28]
 80065d2:	4413      	add	r3, r2
 80065d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80065d8:	691b      	ldr	r3, [r3, #16]
 80065da:	69ba      	ldr	r2, [r7, #24]
 80065dc:	0151      	lsls	r1, r2, #5
 80065de:	69fa      	ldr	r2, [r7, #28]
 80065e0:	440a      	add	r2, r1
 80065e2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80065e6:	0cdb      	lsrs	r3, r3, #19
 80065e8:	04db      	lsls	r3, r3, #19
 80065ea:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80065ec:	69bb      	ldr	r3, [r7, #24]
 80065ee:	015a      	lsls	r2, r3, #5
 80065f0:	69fb      	ldr	r3, [r7, #28]
 80065f2:	4413      	add	r3, r2
 80065f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80065f8:	691b      	ldr	r3, [r3, #16]
 80065fa:	69ba      	ldr	r2, [r7, #24]
 80065fc:	0151      	lsls	r1, r2, #5
 80065fe:	69fa      	ldr	r2, [r7, #28]
 8006600:	440a      	add	r2, r1
 8006602:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006606:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800660a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800660e:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8006610:	69bb      	ldr	r3, [r7, #24]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d11a      	bne.n	800664c <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8006616:	68bb      	ldr	r3, [r7, #8]
 8006618:	691a      	ldr	r2, [r3, #16]
 800661a:	68bb      	ldr	r3, [r7, #8]
 800661c:	689b      	ldr	r3, [r3, #8]
 800661e:	429a      	cmp	r2, r3
 8006620:	d903      	bls.n	800662a <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8006622:	68bb      	ldr	r3, [r7, #8]
 8006624:	689a      	ldr	r2, [r3, #8]
 8006626:	68bb      	ldr	r3, [r7, #8]
 8006628:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800662a:	69bb      	ldr	r3, [r7, #24]
 800662c:	015a      	lsls	r2, r3, #5
 800662e:	69fb      	ldr	r3, [r7, #28]
 8006630:	4413      	add	r3, r2
 8006632:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006636:	691b      	ldr	r3, [r3, #16]
 8006638:	69ba      	ldr	r2, [r7, #24]
 800663a:	0151      	lsls	r1, r2, #5
 800663c:	69fa      	ldr	r2, [r7, #28]
 800663e:	440a      	add	r2, r1
 8006640:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006644:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006648:	6113      	str	r3, [r2, #16]
 800664a:	e01b      	b.n	8006684 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800664c:	69bb      	ldr	r3, [r7, #24]
 800664e:	015a      	lsls	r2, r3, #5
 8006650:	69fb      	ldr	r3, [r7, #28]
 8006652:	4413      	add	r3, r2
 8006654:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006658:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800665a:	68bb      	ldr	r3, [r7, #8]
 800665c:	6919      	ldr	r1, [r3, #16]
 800665e:	68bb      	ldr	r3, [r7, #8]
 8006660:	689b      	ldr	r3, [r3, #8]
 8006662:	440b      	add	r3, r1
 8006664:	1e59      	subs	r1, r3, #1
 8006666:	68bb      	ldr	r3, [r7, #8]
 8006668:	689b      	ldr	r3, [r3, #8]
 800666a:	fbb1 f3f3 	udiv	r3, r1, r3
 800666e:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006670:	4ba2      	ldr	r3, [pc, #648]	@ (80068fc <USB_EPStartXfer+0x3c0>)
 8006672:	400b      	ands	r3, r1
 8006674:	69b9      	ldr	r1, [r7, #24]
 8006676:	0148      	lsls	r0, r1, #5
 8006678:	69f9      	ldr	r1, [r7, #28]
 800667a:	4401      	add	r1, r0
 800667c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006680:	4313      	orrs	r3, r2
 8006682:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006684:	69bb      	ldr	r3, [r7, #24]
 8006686:	015a      	lsls	r2, r3, #5
 8006688:	69fb      	ldr	r3, [r7, #28]
 800668a:	4413      	add	r3, r2
 800668c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006690:	691a      	ldr	r2, [r3, #16]
 8006692:	68bb      	ldr	r3, [r7, #8]
 8006694:	691b      	ldr	r3, [r3, #16]
 8006696:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800669a:	69b9      	ldr	r1, [r7, #24]
 800669c:	0148      	lsls	r0, r1, #5
 800669e:	69f9      	ldr	r1, [r7, #28]
 80066a0:	4401      	add	r1, r0
 80066a2:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80066a6:	4313      	orrs	r3, r2
 80066a8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80066aa:	68bb      	ldr	r3, [r7, #8]
 80066ac:	791b      	ldrb	r3, [r3, #4]
 80066ae:	2b01      	cmp	r3, #1
 80066b0:	d11f      	bne.n	80066f2 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80066b2:	69bb      	ldr	r3, [r7, #24]
 80066b4:	015a      	lsls	r2, r3, #5
 80066b6:	69fb      	ldr	r3, [r7, #28]
 80066b8:	4413      	add	r3, r2
 80066ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80066be:	691b      	ldr	r3, [r3, #16]
 80066c0:	69ba      	ldr	r2, [r7, #24]
 80066c2:	0151      	lsls	r1, r2, #5
 80066c4:	69fa      	ldr	r2, [r7, #28]
 80066c6:	440a      	add	r2, r1
 80066c8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80066cc:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80066d0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80066d2:	69bb      	ldr	r3, [r7, #24]
 80066d4:	015a      	lsls	r2, r3, #5
 80066d6:	69fb      	ldr	r3, [r7, #28]
 80066d8:	4413      	add	r3, r2
 80066da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80066de:	691b      	ldr	r3, [r3, #16]
 80066e0:	69ba      	ldr	r2, [r7, #24]
 80066e2:	0151      	lsls	r1, r2, #5
 80066e4:	69fa      	ldr	r2, [r7, #28]
 80066e6:	440a      	add	r2, r1
 80066e8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80066ec:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80066f0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80066f2:	79fb      	ldrb	r3, [r7, #7]
 80066f4:	2b01      	cmp	r3, #1
 80066f6:	d14b      	bne.n	8006790 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80066f8:	68bb      	ldr	r3, [r7, #8]
 80066fa:	69db      	ldr	r3, [r3, #28]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d009      	beq.n	8006714 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006700:	69bb      	ldr	r3, [r7, #24]
 8006702:	015a      	lsls	r2, r3, #5
 8006704:	69fb      	ldr	r3, [r7, #28]
 8006706:	4413      	add	r3, r2
 8006708:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800670c:	461a      	mov	r2, r3
 800670e:	68bb      	ldr	r3, [r7, #8]
 8006710:	69db      	ldr	r3, [r3, #28]
 8006712:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006714:	68bb      	ldr	r3, [r7, #8]
 8006716:	791b      	ldrb	r3, [r3, #4]
 8006718:	2b01      	cmp	r3, #1
 800671a:	d128      	bne.n	800676e <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800671c:	69fb      	ldr	r3, [r7, #28]
 800671e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006722:	689b      	ldr	r3, [r3, #8]
 8006724:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006728:	2b00      	cmp	r3, #0
 800672a:	d110      	bne.n	800674e <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800672c:	69bb      	ldr	r3, [r7, #24]
 800672e:	015a      	lsls	r2, r3, #5
 8006730:	69fb      	ldr	r3, [r7, #28]
 8006732:	4413      	add	r3, r2
 8006734:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	69ba      	ldr	r2, [r7, #24]
 800673c:	0151      	lsls	r1, r2, #5
 800673e:	69fa      	ldr	r2, [r7, #28]
 8006740:	440a      	add	r2, r1
 8006742:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006746:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800674a:	6013      	str	r3, [r2, #0]
 800674c:	e00f      	b.n	800676e <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800674e:	69bb      	ldr	r3, [r7, #24]
 8006750:	015a      	lsls	r2, r3, #5
 8006752:	69fb      	ldr	r3, [r7, #28]
 8006754:	4413      	add	r3, r2
 8006756:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	69ba      	ldr	r2, [r7, #24]
 800675e:	0151      	lsls	r1, r2, #5
 8006760:	69fa      	ldr	r2, [r7, #28]
 8006762:	440a      	add	r2, r1
 8006764:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006768:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800676c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800676e:	69bb      	ldr	r3, [r7, #24]
 8006770:	015a      	lsls	r2, r3, #5
 8006772:	69fb      	ldr	r3, [r7, #28]
 8006774:	4413      	add	r3, r2
 8006776:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	69ba      	ldr	r2, [r7, #24]
 800677e:	0151      	lsls	r1, r2, #5
 8006780:	69fa      	ldr	r2, [r7, #28]
 8006782:	440a      	add	r2, r1
 8006784:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006788:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800678c:	6013      	str	r3, [r2, #0]
 800678e:	e165      	b.n	8006a5c <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006790:	69bb      	ldr	r3, [r7, #24]
 8006792:	015a      	lsls	r2, r3, #5
 8006794:	69fb      	ldr	r3, [r7, #28]
 8006796:	4413      	add	r3, r2
 8006798:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	69ba      	ldr	r2, [r7, #24]
 80067a0:	0151      	lsls	r1, r2, #5
 80067a2:	69fa      	ldr	r2, [r7, #28]
 80067a4:	440a      	add	r2, r1
 80067a6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80067aa:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80067ae:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80067b0:	68bb      	ldr	r3, [r7, #8]
 80067b2:	791b      	ldrb	r3, [r3, #4]
 80067b4:	2b01      	cmp	r3, #1
 80067b6:	d015      	beq.n	80067e4 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80067b8:	68bb      	ldr	r3, [r7, #8]
 80067ba:	691b      	ldr	r3, [r3, #16]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	f000 814d 	beq.w	8006a5c <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80067c2:	69fb      	ldr	r3, [r7, #28]
 80067c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80067c8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80067ca:	68bb      	ldr	r3, [r7, #8]
 80067cc:	781b      	ldrb	r3, [r3, #0]
 80067ce:	f003 030f 	and.w	r3, r3, #15
 80067d2:	2101      	movs	r1, #1
 80067d4:	fa01 f303 	lsl.w	r3, r1, r3
 80067d8:	69f9      	ldr	r1, [r7, #28]
 80067da:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80067de:	4313      	orrs	r3, r2
 80067e0:	634b      	str	r3, [r1, #52]	@ 0x34
 80067e2:	e13b      	b.n	8006a5c <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80067e4:	69fb      	ldr	r3, [r7, #28]
 80067e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80067ea:	689b      	ldr	r3, [r3, #8]
 80067ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d110      	bne.n	8006816 <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80067f4:	69bb      	ldr	r3, [r7, #24]
 80067f6:	015a      	lsls	r2, r3, #5
 80067f8:	69fb      	ldr	r3, [r7, #28]
 80067fa:	4413      	add	r3, r2
 80067fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	69ba      	ldr	r2, [r7, #24]
 8006804:	0151      	lsls	r1, r2, #5
 8006806:	69fa      	ldr	r2, [r7, #28]
 8006808:	440a      	add	r2, r1
 800680a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800680e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006812:	6013      	str	r3, [r2, #0]
 8006814:	e00f      	b.n	8006836 <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006816:	69bb      	ldr	r3, [r7, #24]
 8006818:	015a      	lsls	r2, r3, #5
 800681a:	69fb      	ldr	r3, [r7, #28]
 800681c:	4413      	add	r3, r2
 800681e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	69ba      	ldr	r2, [r7, #24]
 8006826:	0151      	lsls	r1, r2, #5
 8006828:	69fa      	ldr	r2, [r7, #28]
 800682a:	440a      	add	r2, r1
 800682c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006830:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006834:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006836:	68bb      	ldr	r3, [r7, #8]
 8006838:	68d9      	ldr	r1, [r3, #12]
 800683a:	68bb      	ldr	r3, [r7, #8]
 800683c:	781a      	ldrb	r2, [r3, #0]
 800683e:	68bb      	ldr	r3, [r7, #8]
 8006840:	691b      	ldr	r3, [r3, #16]
 8006842:	b298      	uxth	r0, r3
 8006844:	79fb      	ldrb	r3, [r7, #7]
 8006846:	9300      	str	r3, [sp, #0]
 8006848:	4603      	mov	r3, r0
 800684a:	68f8      	ldr	r0, [r7, #12]
 800684c:	f000 f9b8 	bl	8006bc0 <USB_WritePacket>
 8006850:	e104      	b.n	8006a5c <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006852:	69bb      	ldr	r3, [r7, #24]
 8006854:	015a      	lsls	r2, r3, #5
 8006856:	69fb      	ldr	r3, [r7, #28]
 8006858:	4413      	add	r3, r2
 800685a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800685e:	691b      	ldr	r3, [r3, #16]
 8006860:	69ba      	ldr	r2, [r7, #24]
 8006862:	0151      	lsls	r1, r2, #5
 8006864:	69fa      	ldr	r2, [r7, #28]
 8006866:	440a      	add	r2, r1
 8006868:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800686c:	0cdb      	lsrs	r3, r3, #19
 800686e:	04db      	lsls	r3, r3, #19
 8006870:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006872:	69bb      	ldr	r3, [r7, #24]
 8006874:	015a      	lsls	r2, r3, #5
 8006876:	69fb      	ldr	r3, [r7, #28]
 8006878:	4413      	add	r3, r2
 800687a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800687e:	691b      	ldr	r3, [r3, #16]
 8006880:	69ba      	ldr	r2, [r7, #24]
 8006882:	0151      	lsls	r1, r2, #5
 8006884:	69fa      	ldr	r2, [r7, #28]
 8006886:	440a      	add	r2, r1
 8006888:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800688c:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006890:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006894:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8006896:	69bb      	ldr	r3, [r7, #24]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d131      	bne.n	8006900 <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 800689c:	68bb      	ldr	r3, [r7, #8]
 800689e:	691b      	ldr	r3, [r3, #16]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d003      	beq.n	80068ac <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 80068a4:	68bb      	ldr	r3, [r7, #8]
 80068a6:	689a      	ldr	r2, [r3, #8]
 80068a8:	68bb      	ldr	r3, [r7, #8]
 80068aa:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80068ac:	68bb      	ldr	r3, [r7, #8]
 80068ae:	689a      	ldr	r2, [r3, #8]
 80068b0:	68bb      	ldr	r3, [r7, #8]
 80068b2:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80068b4:	69bb      	ldr	r3, [r7, #24]
 80068b6:	015a      	lsls	r2, r3, #5
 80068b8:	69fb      	ldr	r3, [r7, #28]
 80068ba:	4413      	add	r3, r2
 80068bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80068c0:	691a      	ldr	r2, [r3, #16]
 80068c2:	68bb      	ldr	r3, [r7, #8]
 80068c4:	6a1b      	ldr	r3, [r3, #32]
 80068c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80068ca:	69b9      	ldr	r1, [r7, #24]
 80068cc:	0148      	lsls	r0, r1, #5
 80068ce:	69f9      	ldr	r1, [r7, #28]
 80068d0:	4401      	add	r1, r0
 80068d2:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80068d6:	4313      	orrs	r3, r2
 80068d8:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80068da:	69bb      	ldr	r3, [r7, #24]
 80068dc:	015a      	lsls	r2, r3, #5
 80068de:	69fb      	ldr	r3, [r7, #28]
 80068e0:	4413      	add	r3, r2
 80068e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80068e6:	691b      	ldr	r3, [r3, #16]
 80068e8:	69ba      	ldr	r2, [r7, #24]
 80068ea:	0151      	lsls	r1, r2, #5
 80068ec:	69fa      	ldr	r2, [r7, #28]
 80068ee:	440a      	add	r2, r1
 80068f0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80068f4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80068f8:	6113      	str	r3, [r2, #16]
 80068fa:	e061      	b.n	80069c0 <USB_EPStartXfer+0x484>
 80068fc:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8006900:	68bb      	ldr	r3, [r7, #8]
 8006902:	691b      	ldr	r3, [r3, #16]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d123      	bne.n	8006950 <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006908:	69bb      	ldr	r3, [r7, #24]
 800690a:	015a      	lsls	r2, r3, #5
 800690c:	69fb      	ldr	r3, [r7, #28]
 800690e:	4413      	add	r3, r2
 8006910:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006914:	691a      	ldr	r2, [r3, #16]
 8006916:	68bb      	ldr	r3, [r7, #8]
 8006918:	689b      	ldr	r3, [r3, #8]
 800691a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800691e:	69b9      	ldr	r1, [r7, #24]
 8006920:	0148      	lsls	r0, r1, #5
 8006922:	69f9      	ldr	r1, [r7, #28]
 8006924:	4401      	add	r1, r0
 8006926:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800692a:	4313      	orrs	r3, r2
 800692c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800692e:	69bb      	ldr	r3, [r7, #24]
 8006930:	015a      	lsls	r2, r3, #5
 8006932:	69fb      	ldr	r3, [r7, #28]
 8006934:	4413      	add	r3, r2
 8006936:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800693a:	691b      	ldr	r3, [r3, #16]
 800693c:	69ba      	ldr	r2, [r7, #24]
 800693e:	0151      	lsls	r1, r2, #5
 8006940:	69fa      	ldr	r2, [r7, #28]
 8006942:	440a      	add	r2, r1
 8006944:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006948:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800694c:	6113      	str	r3, [r2, #16]
 800694e:	e037      	b.n	80069c0 <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006950:	68bb      	ldr	r3, [r7, #8]
 8006952:	691a      	ldr	r2, [r3, #16]
 8006954:	68bb      	ldr	r3, [r7, #8]
 8006956:	689b      	ldr	r3, [r3, #8]
 8006958:	4413      	add	r3, r2
 800695a:	1e5a      	subs	r2, r3, #1
 800695c:	68bb      	ldr	r3, [r7, #8]
 800695e:	689b      	ldr	r3, [r3, #8]
 8006960:	fbb2 f3f3 	udiv	r3, r2, r3
 8006964:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8006966:	68bb      	ldr	r3, [r7, #8]
 8006968:	689b      	ldr	r3, [r3, #8]
 800696a:	8afa      	ldrh	r2, [r7, #22]
 800696c:	fb03 f202 	mul.w	r2, r3, r2
 8006970:	68bb      	ldr	r3, [r7, #8]
 8006972:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006974:	69bb      	ldr	r3, [r7, #24]
 8006976:	015a      	lsls	r2, r3, #5
 8006978:	69fb      	ldr	r3, [r7, #28]
 800697a:	4413      	add	r3, r2
 800697c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006980:	691a      	ldr	r2, [r3, #16]
 8006982:	8afb      	ldrh	r3, [r7, #22]
 8006984:	04d9      	lsls	r1, r3, #19
 8006986:	4b38      	ldr	r3, [pc, #224]	@ (8006a68 <USB_EPStartXfer+0x52c>)
 8006988:	400b      	ands	r3, r1
 800698a:	69b9      	ldr	r1, [r7, #24]
 800698c:	0148      	lsls	r0, r1, #5
 800698e:	69f9      	ldr	r1, [r7, #28]
 8006990:	4401      	add	r1, r0
 8006992:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006996:	4313      	orrs	r3, r2
 8006998:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800699a:	69bb      	ldr	r3, [r7, #24]
 800699c:	015a      	lsls	r2, r3, #5
 800699e:	69fb      	ldr	r3, [r7, #28]
 80069a0:	4413      	add	r3, r2
 80069a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80069a6:	691a      	ldr	r2, [r3, #16]
 80069a8:	68bb      	ldr	r3, [r7, #8]
 80069aa:	6a1b      	ldr	r3, [r3, #32]
 80069ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80069b0:	69b9      	ldr	r1, [r7, #24]
 80069b2:	0148      	lsls	r0, r1, #5
 80069b4:	69f9      	ldr	r1, [r7, #28]
 80069b6:	4401      	add	r1, r0
 80069b8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80069bc:	4313      	orrs	r3, r2
 80069be:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80069c0:	79fb      	ldrb	r3, [r7, #7]
 80069c2:	2b01      	cmp	r3, #1
 80069c4:	d10d      	bne.n	80069e2 <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80069c6:	68bb      	ldr	r3, [r7, #8]
 80069c8:	68db      	ldr	r3, [r3, #12]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d009      	beq.n	80069e2 <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80069ce:	68bb      	ldr	r3, [r7, #8]
 80069d0:	68d9      	ldr	r1, [r3, #12]
 80069d2:	69bb      	ldr	r3, [r7, #24]
 80069d4:	015a      	lsls	r2, r3, #5
 80069d6:	69fb      	ldr	r3, [r7, #28]
 80069d8:	4413      	add	r3, r2
 80069da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80069de:	460a      	mov	r2, r1
 80069e0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80069e2:	68bb      	ldr	r3, [r7, #8]
 80069e4:	791b      	ldrb	r3, [r3, #4]
 80069e6:	2b01      	cmp	r3, #1
 80069e8:	d128      	bne.n	8006a3c <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80069ea:	69fb      	ldr	r3, [r7, #28]
 80069ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80069f0:	689b      	ldr	r3, [r3, #8]
 80069f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d110      	bne.n	8006a1c <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80069fa:	69bb      	ldr	r3, [r7, #24]
 80069fc:	015a      	lsls	r2, r3, #5
 80069fe:	69fb      	ldr	r3, [r7, #28]
 8006a00:	4413      	add	r3, r2
 8006a02:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	69ba      	ldr	r2, [r7, #24]
 8006a0a:	0151      	lsls	r1, r2, #5
 8006a0c:	69fa      	ldr	r2, [r7, #28]
 8006a0e:	440a      	add	r2, r1
 8006a10:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006a14:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006a18:	6013      	str	r3, [r2, #0]
 8006a1a:	e00f      	b.n	8006a3c <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006a1c:	69bb      	ldr	r3, [r7, #24]
 8006a1e:	015a      	lsls	r2, r3, #5
 8006a20:	69fb      	ldr	r3, [r7, #28]
 8006a22:	4413      	add	r3, r2
 8006a24:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	69ba      	ldr	r2, [r7, #24]
 8006a2c:	0151      	lsls	r1, r2, #5
 8006a2e:	69fa      	ldr	r2, [r7, #28]
 8006a30:	440a      	add	r2, r1
 8006a32:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006a36:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006a3a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006a3c:	69bb      	ldr	r3, [r7, #24]
 8006a3e:	015a      	lsls	r2, r3, #5
 8006a40:	69fb      	ldr	r3, [r7, #28]
 8006a42:	4413      	add	r3, r2
 8006a44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	69ba      	ldr	r2, [r7, #24]
 8006a4c:	0151      	lsls	r1, r2, #5
 8006a4e:	69fa      	ldr	r2, [r7, #28]
 8006a50:	440a      	add	r2, r1
 8006a52:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006a56:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006a5a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006a5c:	2300      	movs	r3, #0
}
 8006a5e:	4618      	mov	r0, r3
 8006a60:	3720      	adds	r7, #32
 8006a62:	46bd      	mov	sp, r7
 8006a64:	bd80      	pop	{r7, pc}
 8006a66:	bf00      	nop
 8006a68:	1ff80000 	.word	0x1ff80000

08006a6c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006a6c:	b480      	push	{r7}
 8006a6e:	b087      	sub	sp, #28
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
 8006a74:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006a76:	2300      	movs	r3, #0
 8006a78:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006a82:	683b      	ldr	r3, [r7, #0]
 8006a84:	785b      	ldrb	r3, [r3, #1]
 8006a86:	2b01      	cmp	r3, #1
 8006a88:	d14a      	bne.n	8006b20 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	781b      	ldrb	r3, [r3, #0]
 8006a8e:	015a      	lsls	r2, r3, #5
 8006a90:	693b      	ldr	r3, [r7, #16]
 8006a92:	4413      	add	r3, r2
 8006a94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006a9e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006aa2:	f040 8086 	bne.w	8006bb2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	781b      	ldrb	r3, [r3, #0]
 8006aaa:	015a      	lsls	r2, r3, #5
 8006aac:	693b      	ldr	r3, [r7, #16]
 8006aae:	4413      	add	r3, r2
 8006ab0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	683a      	ldr	r2, [r7, #0]
 8006ab8:	7812      	ldrb	r2, [r2, #0]
 8006aba:	0151      	lsls	r1, r2, #5
 8006abc:	693a      	ldr	r2, [r7, #16]
 8006abe:	440a      	add	r2, r1
 8006ac0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006ac4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006ac8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	781b      	ldrb	r3, [r3, #0]
 8006ace:	015a      	lsls	r2, r3, #5
 8006ad0:	693b      	ldr	r3, [r7, #16]
 8006ad2:	4413      	add	r3, r2
 8006ad4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	683a      	ldr	r2, [r7, #0]
 8006adc:	7812      	ldrb	r2, [r2, #0]
 8006ade:	0151      	lsls	r1, r2, #5
 8006ae0:	693a      	ldr	r2, [r7, #16]
 8006ae2:	440a      	add	r2, r1
 8006ae4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006ae8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006aec:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	3301      	adds	r3, #1
 8006af2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	f242 7210 	movw	r2, #10000	@ 0x2710
 8006afa:	4293      	cmp	r3, r2
 8006afc:	d902      	bls.n	8006b04 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8006afe:	2301      	movs	r3, #1
 8006b00:	75fb      	strb	r3, [r7, #23]
          break;
 8006b02:	e056      	b.n	8006bb2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006b04:	683b      	ldr	r3, [r7, #0]
 8006b06:	781b      	ldrb	r3, [r3, #0]
 8006b08:	015a      	lsls	r2, r3, #5
 8006b0a:	693b      	ldr	r3, [r7, #16]
 8006b0c:	4413      	add	r3, r2
 8006b0e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006b18:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006b1c:	d0e7      	beq.n	8006aee <USB_EPStopXfer+0x82>
 8006b1e:	e048      	b.n	8006bb2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006b20:	683b      	ldr	r3, [r7, #0]
 8006b22:	781b      	ldrb	r3, [r3, #0]
 8006b24:	015a      	lsls	r2, r3, #5
 8006b26:	693b      	ldr	r3, [r7, #16]
 8006b28:	4413      	add	r3, r2
 8006b2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006b34:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006b38:	d13b      	bne.n	8006bb2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	781b      	ldrb	r3, [r3, #0]
 8006b3e:	015a      	lsls	r2, r3, #5
 8006b40:	693b      	ldr	r3, [r7, #16]
 8006b42:	4413      	add	r3, r2
 8006b44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	683a      	ldr	r2, [r7, #0]
 8006b4c:	7812      	ldrb	r2, [r2, #0]
 8006b4e:	0151      	lsls	r1, r2, #5
 8006b50:	693a      	ldr	r2, [r7, #16]
 8006b52:	440a      	add	r2, r1
 8006b54:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006b58:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006b5c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8006b5e:	683b      	ldr	r3, [r7, #0]
 8006b60:	781b      	ldrb	r3, [r3, #0]
 8006b62:	015a      	lsls	r2, r3, #5
 8006b64:	693b      	ldr	r3, [r7, #16]
 8006b66:	4413      	add	r3, r2
 8006b68:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	683a      	ldr	r2, [r7, #0]
 8006b70:	7812      	ldrb	r2, [r2, #0]
 8006b72:	0151      	lsls	r1, r2, #5
 8006b74:	693a      	ldr	r2, [r7, #16]
 8006b76:	440a      	add	r2, r1
 8006b78:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006b7c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006b80:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	3301      	adds	r3, #1
 8006b86:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	f242 7210 	movw	r2, #10000	@ 0x2710
 8006b8e:	4293      	cmp	r3, r2
 8006b90:	d902      	bls.n	8006b98 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8006b92:	2301      	movs	r3, #1
 8006b94:	75fb      	strb	r3, [r7, #23]
          break;
 8006b96:	e00c      	b.n	8006bb2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	781b      	ldrb	r3, [r3, #0]
 8006b9c:	015a      	lsls	r2, r3, #5
 8006b9e:	693b      	ldr	r3, [r7, #16]
 8006ba0:	4413      	add	r3, r2
 8006ba2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006bac:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006bb0:	d0e7      	beq.n	8006b82 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8006bb2:	7dfb      	ldrb	r3, [r7, #23]
}
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	371c      	adds	r7, #28
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bbe:	4770      	bx	lr

08006bc0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006bc0:	b480      	push	{r7}
 8006bc2:	b089      	sub	sp, #36	@ 0x24
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	60f8      	str	r0, [r7, #12]
 8006bc8:	60b9      	str	r1, [r7, #8]
 8006bca:	4611      	mov	r1, r2
 8006bcc:	461a      	mov	r2, r3
 8006bce:	460b      	mov	r3, r1
 8006bd0:	71fb      	strb	r3, [r7, #7]
 8006bd2:	4613      	mov	r3, r2
 8006bd4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006bda:	68bb      	ldr	r3, [r7, #8]
 8006bdc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006bde:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d123      	bne.n	8006c2e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006be6:	88bb      	ldrh	r3, [r7, #4]
 8006be8:	3303      	adds	r3, #3
 8006bea:	089b      	lsrs	r3, r3, #2
 8006bec:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006bee:	2300      	movs	r3, #0
 8006bf0:	61bb      	str	r3, [r7, #24]
 8006bf2:	e018      	b.n	8006c26 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006bf4:	79fb      	ldrb	r3, [r7, #7]
 8006bf6:	031a      	lsls	r2, r3, #12
 8006bf8:	697b      	ldr	r3, [r7, #20]
 8006bfa:	4413      	add	r3, r2
 8006bfc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006c00:	461a      	mov	r2, r3
 8006c02:	69fb      	ldr	r3, [r7, #28]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006c08:	69fb      	ldr	r3, [r7, #28]
 8006c0a:	3301      	adds	r3, #1
 8006c0c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006c0e:	69fb      	ldr	r3, [r7, #28]
 8006c10:	3301      	adds	r3, #1
 8006c12:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006c14:	69fb      	ldr	r3, [r7, #28]
 8006c16:	3301      	adds	r3, #1
 8006c18:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006c1a:	69fb      	ldr	r3, [r7, #28]
 8006c1c:	3301      	adds	r3, #1
 8006c1e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006c20:	69bb      	ldr	r3, [r7, #24]
 8006c22:	3301      	adds	r3, #1
 8006c24:	61bb      	str	r3, [r7, #24]
 8006c26:	69ba      	ldr	r2, [r7, #24]
 8006c28:	693b      	ldr	r3, [r7, #16]
 8006c2a:	429a      	cmp	r2, r3
 8006c2c:	d3e2      	bcc.n	8006bf4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006c2e:	2300      	movs	r3, #0
}
 8006c30:	4618      	mov	r0, r3
 8006c32:	3724      	adds	r7, #36	@ 0x24
 8006c34:	46bd      	mov	sp, r7
 8006c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3a:	4770      	bx	lr

08006c3c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006c3c:	b480      	push	{r7}
 8006c3e:	b08b      	sub	sp, #44	@ 0x2c
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	60f8      	str	r0, [r7, #12]
 8006c44:	60b9      	str	r1, [r7, #8]
 8006c46:	4613      	mov	r3, r2
 8006c48:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006c4e:	68bb      	ldr	r3, [r7, #8]
 8006c50:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006c52:	88fb      	ldrh	r3, [r7, #6]
 8006c54:	089b      	lsrs	r3, r3, #2
 8006c56:	b29b      	uxth	r3, r3
 8006c58:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006c5a:	88fb      	ldrh	r3, [r7, #6]
 8006c5c:	f003 0303 	and.w	r3, r3, #3
 8006c60:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006c62:	2300      	movs	r3, #0
 8006c64:	623b      	str	r3, [r7, #32]
 8006c66:	e014      	b.n	8006c92 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006c68:	69bb      	ldr	r3, [r7, #24]
 8006c6a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006c6e:	681a      	ldr	r2, [r3, #0]
 8006c70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c72:	601a      	str	r2, [r3, #0]
    pDest++;
 8006c74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c76:	3301      	adds	r3, #1
 8006c78:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006c7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c7c:	3301      	adds	r3, #1
 8006c7e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006c80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c82:	3301      	adds	r3, #1
 8006c84:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006c86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c88:	3301      	adds	r3, #1
 8006c8a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8006c8c:	6a3b      	ldr	r3, [r7, #32]
 8006c8e:	3301      	adds	r3, #1
 8006c90:	623b      	str	r3, [r7, #32]
 8006c92:	6a3a      	ldr	r2, [r7, #32]
 8006c94:	697b      	ldr	r3, [r7, #20]
 8006c96:	429a      	cmp	r2, r3
 8006c98:	d3e6      	bcc.n	8006c68 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006c9a:	8bfb      	ldrh	r3, [r7, #30]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d01e      	beq.n	8006cde <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006ca4:	69bb      	ldr	r3, [r7, #24]
 8006ca6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006caa:	461a      	mov	r2, r3
 8006cac:	f107 0310 	add.w	r3, r7, #16
 8006cb0:	6812      	ldr	r2, [r2, #0]
 8006cb2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006cb4:	693a      	ldr	r2, [r7, #16]
 8006cb6:	6a3b      	ldr	r3, [r7, #32]
 8006cb8:	b2db      	uxtb	r3, r3
 8006cba:	00db      	lsls	r3, r3, #3
 8006cbc:	fa22 f303 	lsr.w	r3, r2, r3
 8006cc0:	b2da      	uxtb	r2, r3
 8006cc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cc4:	701a      	strb	r2, [r3, #0]
      i++;
 8006cc6:	6a3b      	ldr	r3, [r7, #32]
 8006cc8:	3301      	adds	r3, #1
 8006cca:	623b      	str	r3, [r7, #32]
      pDest++;
 8006ccc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cce:	3301      	adds	r3, #1
 8006cd0:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8006cd2:	8bfb      	ldrh	r3, [r7, #30]
 8006cd4:	3b01      	subs	r3, #1
 8006cd6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006cd8:	8bfb      	ldrh	r3, [r7, #30]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d1ea      	bne.n	8006cb4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006cde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	372c      	adds	r7, #44	@ 0x2c
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cea:	4770      	bx	lr

08006cec <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006cec:	b480      	push	{r7}
 8006cee:	b085      	sub	sp, #20
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
 8006cf4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	781b      	ldrb	r3, [r3, #0]
 8006cfe:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006d00:	683b      	ldr	r3, [r7, #0]
 8006d02:	785b      	ldrb	r3, [r3, #1]
 8006d04:	2b01      	cmp	r3, #1
 8006d06:	d12c      	bne.n	8006d62 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006d08:	68bb      	ldr	r3, [r7, #8]
 8006d0a:	015a      	lsls	r2, r3, #5
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	4413      	add	r3, r2
 8006d10:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	db12      	blt.n	8006d40 <USB_EPSetStall+0x54>
 8006d1a:	68bb      	ldr	r3, [r7, #8]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d00f      	beq.n	8006d40 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006d20:	68bb      	ldr	r3, [r7, #8]
 8006d22:	015a      	lsls	r2, r3, #5
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	4413      	add	r3, r2
 8006d28:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	68ba      	ldr	r2, [r7, #8]
 8006d30:	0151      	lsls	r1, r2, #5
 8006d32:	68fa      	ldr	r2, [r7, #12]
 8006d34:	440a      	add	r2, r1
 8006d36:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006d3a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006d3e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006d40:	68bb      	ldr	r3, [r7, #8]
 8006d42:	015a      	lsls	r2, r3, #5
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	4413      	add	r3, r2
 8006d48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	68ba      	ldr	r2, [r7, #8]
 8006d50:	0151      	lsls	r1, r2, #5
 8006d52:	68fa      	ldr	r2, [r7, #12]
 8006d54:	440a      	add	r2, r1
 8006d56:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006d5a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006d5e:	6013      	str	r3, [r2, #0]
 8006d60:	e02b      	b.n	8006dba <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006d62:	68bb      	ldr	r3, [r7, #8]
 8006d64:	015a      	lsls	r2, r3, #5
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	4413      	add	r3, r2
 8006d6a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	db12      	blt.n	8006d9a <USB_EPSetStall+0xae>
 8006d74:	68bb      	ldr	r3, [r7, #8]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d00f      	beq.n	8006d9a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006d7a:	68bb      	ldr	r3, [r7, #8]
 8006d7c:	015a      	lsls	r2, r3, #5
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	4413      	add	r3, r2
 8006d82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	68ba      	ldr	r2, [r7, #8]
 8006d8a:	0151      	lsls	r1, r2, #5
 8006d8c:	68fa      	ldr	r2, [r7, #12]
 8006d8e:	440a      	add	r2, r1
 8006d90:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006d94:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006d98:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006d9a:	68bb      	ldr	r3, [r7, #8]
 8006d9c:	015a      	lsls	r2, r3, #5
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	4413      	add	r3, r2
 8006da2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	68ba      	ldr	r2, [r7, #8]
 8006daa:	0151      	lsls	r1, r2, #5
 8006dac:	68fa      	ldr	r2, [r7, #12]
 8006dae:	440a      	add	r2, r1
 8006db0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006db4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006db8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006dba:	2300      	movs	r3, #0
}
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	3714      	adds	r7, #20
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc6:	4770      	bx	lr

08006dc8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006dc8:	b480      	push	{r7}
 8006dca:	b085      	sub	sp, #20
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
 8006dd0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006dd6:	683b      	ldr	r3, [r7, #0]
 8006dd8:	781b      	ldrb	r3, [r3, #0]
 8006dda:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	785b      	ldrb	r3, [r3, #1]
 8006de0:	2b01      	cmp	r3, #1
 8006de2:	d128      	bne.n	8006e36 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006de4:	68bb      	ldr	r3, [r7, #8]
 8006de6:	015a      	lsls	r2, r3, #5
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	4413      	add	r3, r2
 8006dec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	68ba      	ldr	r2, [r7, #8]
 8006df4:	0151      	lsls	r1, r2, #5
 8006df6:	68fa      	ldr	r2, [r7, #12]
 8006df8:	440a      	add	r2, r1
 8006dfa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006dfe:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006e02:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	791b      	ldrb	r3, [r3, #4]
 8006e08:	2b03      	cmp	r3, #3
 8006e0a:	d003      	beq.n	8006e14 <USB_EPClearStall+0x4c>
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	791b      	ldrb	r3, [r3, #4]
 8006e10:	2b02      	cmp	r3, #2
 8006e12:	d138      	bne.n	8006e86 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006e14:	68bb      	ldr	r3, [r7, #8]
 8006e16:	015a      	lsls	r2, r3, #5
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	4413      	add	r3, r2
 8006e1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	68ba      	ldr	r2, [r7, #8]
 8006e24:	0151      	lsls	r1, r2, #5
 8006e26:	68fa      	ldr	r2, [r7, #12]
 8006e28:	440a      	add	r2, r1
 8006e2a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006e2e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006e32:	6013      	str	r3, [r2, #0]
 8006e34:	e027      	b.n	8006e86 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006e36:	68bb      	ldr	r3, [r7, #8]
 8006e38:	015a      	lsls	r2, r3, #5
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	4413      	add	r3, r2
 8006e3e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	68ba      	ldr	r2, [r7, #8]
 8006e46:	0151      	lsls	r1, r2, #5
 8006e48:	68fa      	ldr	r2, [r7, #12]
 8006e4a:	440a      	add	r2, r1
 8006e4c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006e50:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006e54:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006e56:	683b      	ldr	r3, [r7, #0]
 8006e58:	791b      	ldrb	r3, [r3, #4]
 8006e5a:	2b03      	cmp	r3, #3
 8006e5c:	d003      	beq.n	8006e66 <USB_EPClearStall+0x9e>
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	791b      	ldrb	r3, [r3, #4]
 8006e62:	2b02      	cmp	r3, #2
 8006e64:	d10f      	bne.n	8006e86 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006e66:	68bb      	ldr	r3, [r7, #8]
 8006e68:	015a      	lsls	r2, r3, #5
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	4413      	add	r3, r2
 8006e6e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	68ba      	ldr	r2, [r7, #8]
 8006e76:	0151      	lsls	r1, r2, #5
 8006e78:	68fa      	ldr	r2, [r7, #12]
 8006e7a:	440a      	add	r2, r1
 8006e7c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006e80:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006e84:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006e86:	2300      	movs	r3, #0
}
 8006e88:	4618      	mov	r0, r3
 8006e8a:	3714      	adds	r7, #20
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e92:	4770      	bx	lr

08006e94 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006e94:	b480      	push	{r7}
 8006e96:	b085      	sub	sp, #20
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
 8006e9c:	460b      	mov	r3, r1
 8006e9e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	68fa      	ldr	r2, [r7, #12]
 8006eae:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006eb2:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8006eb6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ebe:	681a      	ldr	r2, [r3, #0]
 8006ec0:	78fb      	ldrb	r3, [r7, #3]
 8006ec2:	011b      	lsls	r3, r3, #4
 8006ec4:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8006ec8:	68f9      	ldr	r1, [r7, #12]
 8006eca:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006ece:	4313      	orrs	r3, r2
 8006ed0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006ed2:	2300      	movs	r3, #0
}
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	3714      	adds	r7, #20
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ede:	4770      	bx	lr

08006ee0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006ee0:	b480      	push	{r7}
 8006ee2:	b085      	sub	sp, #20
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	68fa      	ldr	r2, [r7, #12]
 8006ef6:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006efa:	f023 0303 	bic.w	r3, r3, #3
 8006efe:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006f06:	685b      	ldr	r3, [r3, #4]
 8006f08:	68fa      	ldr	r2, [r7, #12]
 8006f0a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006f0e:	f023 0302 	bic.w	r3, r3, #2
 8006f12:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006f14:	2300      	movs	r3, #0
}
 8006f16:	4618      	mov	r0, r3
 8006f18:	3714      	adds	r7, #20
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f20:	4770      	bx	lr

08006f22 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006f22:	b480      	push	{r7}
 8006f24:	b085      	sub	sp, #20
 8006f26:	af00      	add	r7, sp, #0
 8006f28:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	68fa      	ldr	r2, [r7, #12]
 8006f38:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006f3c:	f023 0303 	bic.w	r3, r3, #3
 8006f40:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006f48:	685b      	ldr	r3, [r3, #4]
 8006f4a:	68fa      	ldr	r2, [r7, #12]
 8006f4c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006f50:	f043 0302 	orr.w	r3, r3, #2
 8006f54:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006f56:	2300      	movs	r3, #0
}
 8006f58:	4618      	mov	r0, r3
 8006f5a:	3714      	adds	r7, #20
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f62:	4770      	bx	lr

08006f64 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8006f64:	b480      	push	{r7}
 8006f66:	b085      	sub	sp, #20
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	695b      	ldr	r3, [r3, #20]
 8006f70:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	699b      	ldr	r3, [r3, #24]
 8006f76:	68fa      	ldr	r2, [r7, #12]
 8006f78:	4013      	ands	r3, r2
 8006f7a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006f7c:	68fb      	ldr	r3, [r7, #12]
}
 8006f7e:	4618      	mov	r0, r3
 8006f80:	3714      	adds	r7, #20
 8006f82:	46bd      	mov	sp, r7
 8006f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f88:	4770      	bx	lr

08006f8a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006f8a:	b480      	push	{r7}
 8006f8c:	b085      	sub	sp, #20
 8006f8e:	af00      	add	r7, sp, #0
 8006f90:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006f9c:	699b      	ldr	r3, [r3, #24]
 8006f9e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006fa6:	69db      	ldr	r3, [r3, #28]
 8006fa8:	68ba      	ldr	r2, [r7, #8]
 8006faa:	4013      	ands	r3, r2
 8006fac:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006fae:	68bb      	ldr	r3, [r7, #8]
 8006fb0:	0c1b      	lsrs	r3, r3, #16
}
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	3714      	adds	r7, #20
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fbc:	4770      	bx	lr

08006fbe <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006fbe:	b480      	push	{r7}
 8006fc0:	b085      	sub	sp, #20
 8006fc2:	af00      	add	r7, sp, #0
 8006fc4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006fd0:	699b      	ldr	r3, [r3, #24]
 8006fd2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006fda:	69db      	ldr	r3, [r3, #28]
 8006fdc:	68ba      	ldr	r2, [r7, #8]
 8006fde:	4013      	ands	r3, r2
 8006fe0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006fe2:	68bb      	ldr	r3, [r7, #8]
 8006fe4:	b29b      	uxth	r3, r3
}
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	3714      	adds	r7, #20
 8006fea:	46bd      	mov	sp, r7
 8006fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff0:	4770      	bx	lr

08006ff2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006ff2:	b480      	push	{r7}
 8006ff4:	b085      	sub	sp, #20
 8006ff6:	af00      	add	r7, sp, #0
 8006ff8:	6078      	str	r0, [r7, #4]
 8006ffa:	460b      	mov	r3, r1
 8006ffc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007002:	78fb      	ldrb	r3, [r7, #3]
 8007004:	015a      	lsls	r2, r3, #5
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	4413      	add	r3, r2
 800700a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800700e:	689b      	ldr	r3, [r3, #8]
 8007010:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007018:	695b      	ldr	r3, [r3, #20]
 800701a:	68ba      	ldr	r2, [r7, #8]
 800701c:	4013      	ands	r3, r2
 800701e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007020:	68bb      	ldr	r3, [r7, #8]
}
 8007022:	4618      	mov	r0, r3
 8007024:	3714      	adds	r7, #20
 8007026:	46bd      	mov	sp, r7
 8007028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702c:	4770      	bx	lr

0800702e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800702e:	b480      	push	{r7}
 8007030:	b087      	sub	sp, #28
 8007032:	af00      	add	r7, sp, #0
 8007034:	6078      	str	r0, [r7, #4]
 8007036:	460b      	mov	r3, r1
 8007038:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800703e:	697b      	ldr	r3, [r7, #20]
 8007040:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007044:	691b      	ldr	r3, [r3, #16]
 8007046:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007048:	697b      	ldr	r3, [r7, #20]
 800704a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800704e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007050:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007052:	78fb      	ldrb	r3, [r7, #3]
 8007054:	f003 030f 	and.w	r3, r3, #15
 8007058:	68fa      	ldr	r2, [r7, #12]
 800705a:	fa22 f303 	lsr.w	r3, r2, r3
 800705e:	01db      	lsls	r3, r3, #7
 8007060:	b2db      	uxtb	r3, r3
 8007062:	693a      	ldr	r2, [r7, #16]
 8007064:	4313      	orrs	r3, r2
 8007066:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007068:	78fb      	ldrb	r3, [r7, #3]
 800706a:	015a      	lsls	r2, r3, #5
 800706c:	697b      	ldr	r3, [r7, #20]
 800706e:	4413      	add	r3, r2
 8007070:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007074:	689b      	ldr	r3, [r3, #8]
 8007076:	693a      	ldr	r2, [r7, #16]
 8007078:	4013      	ands	r3, r2
 800707a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800707c:	68bb      	ldr	r3, [r7, #8]
}
 800707e:	4618      	mov	r0, r3
 8007080:	371c      	adds	r7, #28
 8007082:	46bd      	mov	sp, r7
 8007084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007088:	4770      	bx	lr

0800708a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800708a:	b480      	push	{r7}
 800708c:	b083      	sub	sp, #12
 800708e:	af00      	add	r7, sp, #0
 8007090:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	695b      	ldr	r3, [r3, #20]
 8007096:	f003 0301 	and.w	r3, r3, #1
}
 800709a:	4618      	mov	r0, r3
 800709c:	370c      	adds	r7, #12
 800709e:	46bd      	mov	sp, r7
 80070a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a4:	4770      	bx	lr

080070a6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 80070a6:	b480      	push	{r7}
 80070a8:	b085      	sub	sp, #20
 80070aa:	af00      	add	r7, sp, #0
 80070ac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	68fa      	ldr	r2, [r7, #12]
 80070bc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80070c0:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80070c4:	f023 0307 	bic.w	r3, r3, #7
 80070c8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80070d0:	685b      	ldr	r3, [r3, #4]
 80070d2:	68fa      	ldr	r2, [r7, #12]
 80070d4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80070d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80070dc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80070de:	2300      	movs	r3, #0
}
 80070e0:	4618      	mov	r0, r3
 80070e2:	3714      	adds	r7, #20
 80070e4:	46bd      	mov	sp, r7
 80070e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ea:	4770      	bx	lr

080070ec <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80070ec:	b480      	push	{r7}
 80070ee:	b087      	sub	sp, #28
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	60f8      	str	r0, [r7, #12]
 80070f4:	460b      	mov	r3, r1
 80070f6:	607a      	str	r2, [r7, #4]
 80070f8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	333c      	adds	r3, #60	@ 0x3c
 8007102:	3304      	adds	r3, #4
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007108:	693b      	ldr	r3, [r7, #16]
 800710a:	4a26      	ldr	r2, [pc, #152]	@ (80071a4 <USB_EP0_OutStart+0xb8>)
 800710c:	4293      	cmp	r3, r2
 800710e:	d90a      	bls.n	8007126 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007110:	697b      	ldr	r3, [r7, #20]
 8007112:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800711c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007120:	d101      	bne.n	8007126 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007122:	2300      	movs	r3, #0
 8007124:	e037      	b.n	8007196 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007126:	697b      	ldr	r3, [r7, #20]
 8007128:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800712c:	461a      	mov	r2, r3
 800712e:	2300      	movs	r3, #0
 8007130:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007132:	697b      	ldr	r3, [r7, #20]
 8007134:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007138:	691b      	ldr	r3, [r3, #16]
 800713a:	697a      	ldr	r2, [r7, #20]
 800713c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007140:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007144:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007146:	697b      	ldr	r3, [r7, #20]
 8007148:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800714c:	691b      	ldr	r3, [r3, #16]
 800714e:	697a      	ldr	r2, [r7, #20]
 8007150:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007154:	f043 0318 	orr.w	r3, r3, #24
 8007158:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800715a:	697b      	ldr	r3, [r7, #20]
 800715c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007160:	691b      	ldr	r3, [r3, #16]
 8007162:	697a      	ldr	r2, [r7, #20]
 8007164:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007168:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800716c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800716e:	7afb      	ldrb	r3, [r7, #11]
 8007170:	2b01      	cmp	r3, #1
 8007172:	d10f      	bne.n	8007194 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007174:	697b      	ldr	r3, [r7, #20]
 8007176:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800717a:	461a      	mov	r2, r3
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007180:	697b      	ldr	r3, [r7, #20]
 8007182:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	697a      	ldr	r2, [r7, #20]
 800718a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800718e:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8007192:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007194:	2300      	movs	r3, #0
}
 8007196:	4618      	mov	r0, r3
 8007198:	371c      	adds	r7, #28
 800719a:	46bd      	mov	sp, r7
 800719c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a0:	4770      	bx	lr
 80071a2:	bf00      	nop
 80071a4:	4f54300a 	.word	0x4f54300a

080071a8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80071a8:	b480      	push	{r7}
 80071aa:	b085      	sub	sp, #20
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80071b0:	2300      	movs	r3, #0
 80071b2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	3301      	adds	r3, #1
 80071b8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80071c0:	d901      	bls.n	80071c6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80071c2:	2303      	movs	r3, #3
 80071c4:	e01b      	b.n	80071fe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	691b      	ldr	r3, [r3, #16]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	daf2      	bge.n	80071b4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80071ce:	2300      	movs	r3, #0
 80071d0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	691b      	ldr	r3, [r3, #16]
 80071d6:	f043 0201 	orr.w	r2, r3, #1
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	3301      	adds	r3, #1
 80071e2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80071ea:	d901      	bls.n	80071f0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80071ec:	2303      	movs	r3, #3
 80071ee:	e006      	b.n	80071fe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	691b      	ldr	r3, [r3, #16]
 80071f4:	f003 0301 	and.w	r3, r3, #1
 80071f8:	2b01      	cmp	r3, #1
 80071fa:	d0f0      	beq.n	80071de <USB_CoreReset+0x36>

  return HAL_OK;
 80071fc:	2300      	movs	r3, #0
}
 80071fe:	4618      	mov	r0, r3
 8007200:	3714      	adds	r7, #20
 8007202:	46bd      	mov	sp, r7
 8007204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007208:	4770      	bx	lr
	...

0800720c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800720c:	b580      	push	{r7, lr}
 800720e:	b084      	sub	sp, #16
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
 8007214:	460b      	mov	r3, r1
 8007216:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007218:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800721c:	f002 fcc2 	bl	8009ba4 <USBD_static_malloc>
 8007220:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	2b00      	cmp	r3, #0
 8007226:	d109      	bne.n	800723c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	32b0      	adds	r2, #176	@ 0xb0
 8007232:	2100      	movs	r1, #0
 8007234:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8007238:	2302      	movs	r3, #2
 800723a:	e0d4      	b.n	80073e6 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800723c:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8007240:	2100      	movs	r1, #0
 8007242:	68f8      	ldr	r0, [r7, #12]
 8007244:	f002 ff1c 	bl	800a080 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	32b0      	adds	r2, #176	@ 0xb0
 8007252:	68f9      	ldr	r1, [r7, #12]
 8007254:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	32b0      	adds	r2, #176	@ 0xb0
 8007262:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	7c1b      	ldrb	r3, [r3, #16]
 8007270:	2b00      	cmp	r3, #0
 8007272:	d138      	bne.n	80072e6 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007274:	4b5e      	ldr	r3, [pc, #376]	@ (80073f0 <USBD_CDC_Init+0x1e4>)
 8007276:	7819      	ldrb	r1, [r3, #0]
 8007278:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800727c:	2202      	movs	r2, #2
 800727e:	6878      	ldr	r0, [r7, #4]
 8007280:	f002 fb6d 	bl	800995e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007284:	4b5a      	ldr	r3, [pc, #360]	@ (80073f0 <USBD_CDC_Init+0x1e4>)
 8007286:	781b      	ldrb	r3, [r3, #0]
 8007288:	f003 020f 	and.w	r2, r3, #15
 800728c:	6879      	ldr	r1, [r7, #4]
 800728e:	4613      	mov	r3, r2
 8007290:	009b      	lsls	r3, r3, #2
 8007292:	4413      	add	r3, r2
 8007294:	009b      	lsls	r3, r3, #2
 8007296:	440b      	add	r3, r1
 8007298:	3324      	adds	r3, #36	@ 0x24
 800729a:	2201      	movs	r2, #1
 800729c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800729e:	4b55      	ldr	r3, [pc, #340]	@ (80073f4 <USBD_CDC_Init+0x1e8>)
 80072a0:	7819      	ldrb	r1, [r3, #0]
 80072a2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80072a6:	2202      	movs	r2, #2
 80072a8:	6878      	ldr	r0, [r7, #4]
 80072aa:	f002 fb58 	bl	800995e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80072ae:	4b51      	ldr	r3, [pc, #324]	@ (80073f4 <USBD_CDC_Init+0x1e8>)
 80072b0:	781b      	ldrb	r3, [r3, #0]
 80072b2:	f003 020f 	and.w	r2, r3, #15
 80072b6:	6879      	ldr	r1, [r7, #4]
 80072b8:	4613      	mov	r3, r2
 80072ba:	009b      	lsls	r3, r3, #2
 80072bc:	4413      	add	r3, r2
 80072be:	009b      	lsls	r3, r3, #2
 80072c0:	440b      	add	r3, r1
 80072c2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80072c6:	2201      	movs	r2, #1
 80072c8:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80072ca:	4b4b      	ldr	r3, [pc, #300]	@ (80073f8 <USBD_CDC_Init+0x1ec>)
 80072cc:	781b      	ldrb	r3, [r3, #0]
 80072ce:	f003 020f 	and.w	r2, r3, #15
 80072d2:	6879      	ldr	r1, [r7, #4]
 80072d4:	4613      	mov	r3, r2
 80072d6:	009b      	lsls	r3, r3, #2
 80072d8:	4413      	add	r3, r2
 80072da:	009b      	lsls	r3, r3, #2
 80072dc:	440b      	add	r3, r1
 80072de:	3326      	adds	r3, #38	@ 0x26
 80072e0:	2210      	movs	r2, #16
 80072e2:	801a      	strh	r2, [r3, #0]
 80072e4:	e035      	b.n	8007352 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80072e6:	4b42      	ldr	r3, [pc, #264]	@ (80073f0 <USBD_CDC_Init+0x1e4>)
 80072e8:	7819      	ldrb	r1, [r3, #0]
 80072ea:	2340      	movs	r3, #64	@ 0x40
 80072ec:	2202      	movs	r2, #2
 80072ee:	6878      	ldr	r0, [r7, #4]
 80072f0:	f002 fb35 	bl	800995e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80072f4:	4b3e      	ldr	r3, [pc, #248]	@ (80073f0 <USBD_CDC_Init+0x1e4>)
 80072f6:	781b      	ldrb	r3, [r3, #0]
 80072f8:	f003 020f 	and.w	r2, r3, #15
 80072fc:	6879      	ldr	r1, [r7, #4]
 80072fe:	4613      	mov	r3, r2
 8007300:	009b      	lsls	r3, r3, #2
 8007302:	4413      	add	r3, r2
 8007304:	009b      	lsls	r3, r3, #2
 8007306:	440b      	add	r3, r1
 8007308:	3324      	adds	r3, #36	@ 0x24
 800730a:	2201      	movs	r2, #1
 800730c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800730e:	4b39      	ldr	r3, [pc, #228]	@ (80073f4 <USBD_CDC_Init+0x1e8>)
 8007310:	7819      	ldrb	r1, [r3, #0]
 8007312:	2340      	movs	r3, #64	@ 0x40
 8007314:	2202      	movs	r2, #2
 8007316:	6878      	ldr	r0, [r7, #4]
 8007318:	f002 fb21 	bl	800995e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800731c:	4b35      	ldr	r3, [pc, #212]	@ (80073f4 <USBD_CDC_Init+0x1e8>)
 800731e:	781b      	ldrb	r3, [r3, #0]
 8007320:	f003 020f 	and.w	r2, r3, #15
 8007324:	6879      	ldr	r1, [r7, #4]
 8007326:	4613      	mov	r3, r2
 8007328:	009b      	lsls	r3, r3, #2
 800732a:	4413      	add	r3, r2
 800732c:	009b      	lsls	r3, r3, #2
 800732e:	440b      	add	r3, r1
 8007330:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007334:	2201      	movs	r2, #1
 8007336:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007338:	4b2f      	ldr	r3, [pc, #188]	@ (80073f8 <USBD_CDC_Init+0x1ec>)
 800733a:	781b      	ldrb	r3, [r3, #0]
 800733c:	f003 020f 	and.w	r2, r3, #15
 8007340:	6879      	ldr	r1, [r7, #4]
 8007342:	4613      	mov	r3, r2
 8007344:	009b      	lsls	r3, r3, #2
 8007346:	4413      	add	r3, r2
 8007348:	009b      	lsls	r3, r3, #2
 800734a:	440b      	add	r3, r1
 800734c:	3326      	adds	r3, #38	@ 0x26
 800734e:	2210      	movs	r2, #16
 8007350:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007352:	4b29      	ldr	r3, [pc, #164]	@ (80073f8 <USBD_CDC_Init+0x1ec>)
 8007354:	7819      	ldrb	r1, [r3, #0]
 8007356:	2308      	movs	r3, #8
 8007358:	2203      	movs	r2, #3
 800735a:	6878      	ldr	r0, [r7, #4]
 800735c:	f002 faff 	bl	800995e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8007360:	4b25      	ldr	r3, [pc, #148]	@ (80073f8 <USBD_CDC_Init+0x1ec>)
 8007362:	781b      	ldrb	r3, [r3, #0]
 8007364:	f003 020f 	and.w	r2, r3, #15
 8007368:	6879      	ldr	r1, [r7, #4]
 800736a:	4613      	mov	r3, r2
 800736c:	009b      	lsls	r3, r3, #2
 800736e:	4413      	add	r3, r2
 8007370:	009b      	lsls	r3, r3, #2
 8007372:	440b      	add	r3, r1
 8007374:	3324      	adds	r3, #36	@ 0x24
 8007376:	2201      	movs	r2, #1
 8007378:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	2200      	movs	r2, #0
 800737e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007388:	687a      	ldr	r2, [r7, #4]
 800738a:	33b0      	adds	r3, #176	@ 0xb0
 800738c:	009b      	lsls	r3, r3, #2
 800738e:	4413      	add	r3, r2
 8007390:	685b      	ldr	r3, [r3, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	2200      	movs	r2, #0
 800739a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	2200      	movs	r2, #0
 80073a2:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d101      	bne.n	80073b4 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80073b0:	2302      	movs	r3, #2
 80073b2:	e018      	b.n	80073e6 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	7c1b      	ldrb	r3, [r3, #16]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d10a      	bne.n	80073d2 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80073bc:	4b0d      	ldr	r3, [pc, #52]	@ (80073f4 <USBD_CDC_Init+0x1e8>)
 80073be:	7819      	ldrb	r1, [r3, #0]
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80073c6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80073ca:	6878      	ldr	r0, [r7, #4]
 80073cc:	f002 fbb6 	bl	8009b3c <USBD_LL_PrepareReceive>
 80073d0:	e008      	b.n	80073e4 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80073d2:	4b08      	ldr	r3, [pc, #32]	@ (80073f4 <USBD_CDC_Init+0x1e8>)
 80073d4:	7819      	ldrb	r1, [r3, #0]
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80073dc:	2340      	movs	r3, #64	@ 0x40
 80073de:	6878      	ldr	r0, [r7, #4]
 80073e0:	f002 fbac 	bl	8009b3c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80073e4:	2300      	movs	r3, #0
}
 80073e6:	4618      	mov	r0, r3
 80073e8:	3710      	adds	r7, #16
 80073ea:	46bd      	mov	sp, r7
 80073ec:	bd80      	pop	{r7, pc}
 80073ee:	bf00      	nop
 80073f0:	20000093 	.word	0x20000093
 80073f4:	20000094 	.word	0x20000094
 80073f8:	20000095 	.word	0x20000095

080073fc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80073fc:	b580      	push	{r7, lr}
 80073fe:	b082      	sub	sp, #8
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
 8007404:	460b      	mov	r3, r1
 8007406:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8007408:	4b3a      	ldr	r3, [pc, #232]	@ (80074f4 <USBD_CDC_DeInit+0xf8>)
 800740a:	781b      	ldrb	r3, [r3, #0]
 800740c:	4619      	mov	r1, r3
 800740e:	6878      	ldr	r0, [r7, #4]
 8007410:	f002 facb 	bl	80099aa <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8007414:	4b37      	ldr	r3, [pc, #220]	@ (80074f4 <USBD_CDC_DeInit+0xf8>)
 8007416:	781b      	ldrb	r3, [r3, #0]
 8007418:	f003 020f 	and.w	r2, r3, #15
 800741c:	6879      	ldr	r1, [r7, #4]
 800741e:	4613      	mov	r3, r2
 8007420:	009b      	lsls	r3, r3, #2
 8007422:	4413      	add	r3, r2
 8007424:	009b      	lsls	r3, r3, #2
 8007426:	440b      	add	r3, r1
 8007428:	3324      	adds	r3, #36	@ 0x24
 800742a:	2200      	movs	r2, #0
 800742c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800742e:	4b32      	ldr	r3, [pc, #200]	@ (80074f8 <USBD_CDC_DeInit+0xfc>)
 8007430:	781b      	ldrb	r3, [r3, #0]
 8007432:	4619      	mov	r1, r3
 8007434:	6878      	ldr	r0, [r7, #4]
 8007436:	f002 fab8 	bl	80099aa <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800743a:	4b2f      	ldr	r3, [pc, #188]	@ (80074f8 <USBD_CDC_DeInit+0xfc>)
 800743c:	781b      	ldrb	r3, [r3, #0]
 800743e:	f003 020f 	and.w	r2, r3, #15
 8007442:	6879      	ldr	r1, [r7, #4]
 8007444:	4613      	mov	r3, r2
 8007446:	009b      	lsls	r3, r3, #2
 8007448:	4413      	add	r3, r2
 800744a:	009b      	lsls	r3, r3, #2
 800744c:	440b      	add	r3, r1
 800744e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007452:	2200      	movs	r2, #0
 8007454:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8007456:	4b29      	ldr	r3, [pc, #164]	@ (80074fc <USBD_CDC_DeInit+0x100>)
 8007458:	781b      	ldrb	r3, [r3, #0]
 800745a:	4619      	mov	r1, r3
 800745c:	6878      	ldr	r0, [r7, #4]
 800745e:	f002 faa4 	bl	80099aa <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8007462:	4b26      	ldr	r3, [pc, #152]	@ (80074fc <USBD_CDC_DeInit+0x100>)
 8007464:	781b      	ldrb	r3, [r3, #0]
 8007466:	f003 020f 	and.w	r2, r3, #15
 800746a:	6879      	ldr	r1, [r7, #4]
 800746c:	4613      	mov	r3, r2
 800746e:	009b      	lsls	r3, r3, #2
 8007470:	4413      	add	r3, r2
 8007472:	009b      	lsls	r3, r3, #2
 8007474:	440b      	add	r3, r1
 8007476:	3324      	adds	r3, #36	@ 0x24
 8007478:	2200      	movs	r2, #0
 800747a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800747c:	4b1f      	ldr	r3, [pc, #124]	@ (80074fc <USBD_CDC_DeInit+0x100>)
 800747e:	781b      	ldrb	r3, [r3, #0]
 8007480:	f003 020f 	and.w	r2, r3, #15
 8007484:	6879      	ldr	r1, [r7, #4]
 8007486:	4613      	mov	r3, r2
 8007488:	009b      	lsls	r3, r3, #2
 800748a:	4413      	add	r3, r2
 800748c:	009b      	lsls	r3, r3, #2
 800748e:	440b      	add	r3, r1
 8007490:	3326      	adds	r3, #38	@ 0x26
 8007492:	2200      	movs	r2, #0
 8007494:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	32b0      	adds	r2, #176	@ 0xb0
 80074a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d01f      	beq.n	80074e8 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80074ae:	687a      	ldr	r2, [r7, #4]
 80074b0:	33b0      	adds	r3, #176	@ 0xb0
 80074b2:	009b      	lsls	r3, r3, #2
 80074b4:	4413      	add	r3, r2
 80074b6:	685b      	ldr	r3, [r3, #4]
 80074b8:	685b      	ldr	r3, [r3, #4]
 80074ba:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	32b0      	adds	r2, #176	@ 0xb0
 80074c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074ca:	4618      	mov	r0, r3
 80074cc:	f002 fb78 	bl	8009bc0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	32b0      	adds	r2, #176	@ 0xb0
 80074da:	2100      	movs	r1, #0
 80074dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2200      	movs	r2, #0
 80074e4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 80074e8:	2300      	movs	r3, #0
}
 80074ea:	4618      	mov	r0, r3
 80074ec:	3708      	adds	r7, #8
 80074ee:	46bd      	mov	sp, r7
 80074f0:	bd80      	pop	{r7, pc}
 80074f2:	bf00      	nop
 80074f4:	20000093 	.word	0x20000093
 80074f8:	20000094 	.word	0x20000094
 80074fc:	20000095 	.word	0x20000095

08007500 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007500:	b580      	push	{r7, lr}
 8007502:	b086      	sub	sp, #24
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
 8007508:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	32b0      	adds	r2, #176	@ 0xb0
 8007514:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007518:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800751a:	2300      	movs	r3, #0
 800751c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800751e:	2300      	movs	r3, #0
 8007520:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8007522:	2300      	movs	r3, #0
 8007524:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8007526:	693b      	ldr	r3, [r7, #16]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d101      	bne.n	8007530 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800752c:	2303      	movs	r3, #3
 800752e:	e0bf      	b.n	80076b0 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007530:	683b      	ldr	r3, [r7, #0]
 8007532:	781b      	ldrb	r3, [r3, #0]
 8007534:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007538:	2b00      	cmp	r3, #0
 800753a:	d050      	beq.n	80075de <USBD_CDC_Setup+0xde>
 800753c:	2b20      	cmp	r3, #32
 800753e:	f040 80af 	bne.w	80076a0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007542:	683b      	ldr	r3, [r7, #0]
 8007544:	88db      	ldrh	r3, [r3, #6]
 8007546:	2b00      	cmp	r3, #0
 8007548:	d03a      	beq.n	80075c0 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800754a:	683b      	ldr	r3, [r7, #0]
 800754c:	781b      	ldrb	r3, [r3, #0]
 800754e:	b25b      	sxtb	r3, r3
 8007550:	2b00      	cmp	r3, #0
 8007552:	da1b      	bge.n	800758c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800755a:	687a      	ldr	r2, [r7, #4]
 800755c:	33b0      	adds	r3, #176	@ 0xb0
 800755e:	009b      	lsls	r3, r3, #2
 8007560:	4413      	add	r3, r2
 8007562:	685b      	ldr	r3, [r3, #4]
 8007564:	689b      	ldr	r3, [r3, #8]
 8007566:	683a      	ldr	r2, [r7, #0]
 8007568:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800756a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800756c:	683a      	ldr	r2, [r7, #0]
 800756e:	88d2      	ldrh	r2, [r2, #6]
 8007570:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8007572:	683b      	ldr	r3, [r7, #0]
 8007574:	88db      	ldrh	r3, [r3, #6]
 8007576:	2b07      	cmp	r3, #7
 8007578:	bf28      	it	cs
 800757a:	2307      	movcs	r3, #7
 800757c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800757e:	693b      	ldr	r3, [r7, #16]
 8007580:	89fa      	ldrh	r2, [r7, #14]
 8007582:	4619      	mov	r1, r3
 8007584:	6878      	ldr	r0, [r7, #4]
 8007586:	f001 fd87 	bl	8009098 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800758a:	e090      	b.n	80076ae <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800758c:	683b      	ldr	r3, [r7, #0]
 800758e:	785a      	ldrb	r2, [r3, #1]
 8007590:	693b      	ldr	r3, [r7, #16]
 8007592:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8007596:	683b      	ldr	r3, [r7, #0]
 8007598:	88db      	ldrh	r3, [r3, #6]
 800759a:	2b3f      	cmp	r3, #63	@ 0x3f
 800759c:	d803      	bhi.n	80075a6 <USBD_CDC_Setup+0xa6>
 800759e:	683b      	ldr	r3, [r7, #0]
 80075a0:	88db      	ldrh	r3, [r3, #6]
 80075a2:	b2da      	uxtb	r2, r3
 80075a4:	e000      	b.n	80075a8 <USBD_CDC_Setup+0xa8>
 80075a6:	2240      	movs	r2, #64	@ 0x40
 80075a8:	693b      	ldr	r3, [r7, #16]
 80075aa:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80075ae:	6939      	ldr	r1, [r7, #16]
 80075b0:	693b      	ldr	r3, [r7, #16]
 80075b2:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 80075b6:	461a      	mov	r2, r3
 80075b8:	6878      	ldr	r0, [r7, #4]
 80075ba:	f001 fd99 	bl	80090f0 <USBD_CtlPrepareRx>
      break;
 80075be:	e076      	b.n	80076ae <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80075c6:	687a      	ldr	r2, [r7, #4]
 80075c8:	33b0      	adds	r3, #176	@ 0xb0
 80075ca:	009b      	lsls	r3, r3, #2
 80075cc:	4413      	add	r3, r2
 80075ce:	685b      	ldr	r3, [r3, #4]
 80075d0:	689b      	ldr	r3, [r3, #8]
 80075d2:	683a      	ldr	r2, [r7, #0]
 80075d4:	7850      	ldrb	r0, [r2, #1]
 80075d6:	2200      	movs	r2, #0
 80075d8:	6839      	ldr	r1, [r7, #0]
 80075da:	4798      	blx	r3
      break;
 80075dc:	e067      	b.n	80076ae <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80075de:	683b      	ldr	r3, [r7, #0]
 80075e0:	785b      	ldrb	r3, [r3, #1]
 80075e2:	2b0b      	cmp	r3, #11
 80075e4:	d851      	bhi.n	800768a <USBD_CDC_Setup+0x18a>
 80075e6:	a201      	add	r2, pc, #4	@ (adr r2, 80075ec <USBD_CDC_Setup+0xec>)
 80075e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075ec:	0800761d 	.word	0x0800761d
 80075f0:	08007699 	.word	0x08007699
 80075f4:	0800768b 	.word	0x0800768b
 80075f8:	0800768b 	.word	0x0800768b
 80075fc:	0800768b 	.word	0x0800768b
 8007600:	0800768b 	.word	0x0800768b
 8007604:	0800768b 	.word	0x0800768b
 8007608:	0800768b 	.word	0x0800768b
 800760c:	0800768b 	.word	0x0800768b
 8007610:	0800768b 	.word	0x0800768b
 8007614:	08007647 	.word	0x08007647
 8007618:	08007671 	.word	0x08007671
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007622:	b2db      	uxtb	r3, r3
 8007624:	2b03      	cmp	r3, #3
 8007626:	d107      	bne.n	8007638 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007628:	f107 030a 	add.w	r3, r7, #10
 800762c:	2202      	movs	r2, #2
 800762e:	4619      	mov	r1, r3
 8007630:	6878      	ldr	r0, [r7, #4]
 8007632:	f001 fd31 	bl	8009098 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007636:	e032      	b.n	800769e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007638:	6839      	ldr	r1, [r7, #0]
 800763a:	6878      	ldr	r0, [r7, #4]
 800763c:	f001 fcbb 	bl	8008fb6 <USBD_CtlError>
            ret = USBD_FAIL;
 8007640:	2303      	movs	r3, #3
 8007642:	75fb      	strb	r3, [r7, #23]
          break;
 8007644:	e02b      	b.n	800769e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800764c:	b2db      	uxtb	r3, r3
 800764e:	2b03      	cmp	r3, #3
 8007650:	d107      	bne.n	8007662 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007652:	f107 030d 	add.w	r3, r7, #13
 8007656:	2201      	movs	r2, #1
 8007658:	4619      	mov	r1, r3
 800765a:	6878      	ldr	r0, [r7, #4]
 800765c:	f001 fd1c 	bl	8009098 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007660:	e01d      	b.n	800769e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007662:	6839      	ldr	r1, [r7, #0]
 8007664:	6878      	ldr	r0, [r7, #4]
 8007666:	f001 fca6 	bl	8008fb6 <USBD_CtlError>
            ret = USBD_FAIL;
 800766a:	2303      	movs	r3, #3
 800766c:	75fb      	strb	r3, [r7, #23]
          break;
 800766e:	e016      	b.n	800769e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007676:	b2db      	uxtb	r3, r3
 8007678:	2b03      	cmp	r3, #3
 800767a:	d00f      	beq.n	800769c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800767c:	6839      	ldr	r1, [r7, #0]
 800767e:	6878      	ldr	r0, [r7, #4]
 8007680:	f001 fc99 	bl	8008fb6 <USBD_CtlError>
            ret = USBD_FAIL;
 8007684:	2303      	movs	r3, #3
 8007686:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007688:	e008      	b.n	800769c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800768a:	6839      	ldr	r1, [r7, #0]
 800768c:	6878      	ldr	r0, [r7, #4]
 800768e:	f001 fc92 	bl	8008fb6 <USBD_CtlError>
          ret = USBD_FAIL;
 8007692:	2303      	movs	r3, #3
 8007694:	75fb      	strb	r3, [r7, #23]
          break;
 8007696:	e002      	b.n	800769e <USBD_CDC_Setup+0x19e>
          break;
 8007698:	bf00      	nop
 800769a:	e008      	b.n	80076ae <USBD_CDC_Setup+0x1ae>
          break;
 800769c:	bf00      	nop
      }
      break;
 800769e:	e006      	b.n	80076ae <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80076a0:	6839      	ldr	r1, [r7, #0]
 80076a2:	6878      	ldr	r0, [r7, #4]
 80076a4:	f001 fc87 	bl	8008fb6 <USBD_CtlError>
      ret = USBD_FAIL;
 80076a8:	2303      	movs	r3, #3
 80076aa:	75fb      	strb	r3, [r7, #23]
      break;
 80076ac:	bf00      	nop
  }

  return (uint8_t)ret;
 80076ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80076b0:	4618      	mov	r0, r3
 80076b2:	3718      	adds	r7, #24
 80076b4:	46bd      	mov	sp, r7
 80076b6:	bd80      	pop	{r7, pc}

080076b8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80076b8:	b580      	push	{r7, lr}
 80076ba:	b084      	sub	sp, #16
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
 80076c0:	460b      	mov	r3, r1
 80076c2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80076ca:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	32b0      	adds	r2, #176	@ 0xb0
 80076d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d101      	bne.n	80076e2 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80076de:	2303      	movs	r3, #3
 80076e0:	e065      	b.n	80077ae <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	32b0      	adds	r2, #176	@ 0xb0
 80076ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076f0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80076f2:	78fb      	ldrb	r3, [r7, #3]
 80076f4:	f003 020f 	and.w	r2, r3, #15
 80076f8:	6879      	ldr	r1, [r7, #4]
 80076fa:	4613      	mov	r3, r2
 80076fc:	009b      	lsls	r3, r3, #2
 80076fe:	4413      	add	r3, r2
 8007700:	009b      	lsls	r3, r3, #2
 8007702:	440b      	add	r3, r1
 8007704:	3318      	adds	r3, #24
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	2b00      	cmp	r3, #0
 800770a:	d02f      	beq.n	800776c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800770c:	78fb      	ldrb	r3, [r7, #3]
 800770e:	f003 020f 	and.w	r2, r3, #15
 8007712:	6879      	ldr	r1, [r7, #4]
 8007714:	4613      	mov	r3, r2
 8007716:	009b      	lsls	r3, r3, #2
 8007718:	4413      	add	r3, r2
 800771a:	009b      	lsls	r3, r3, #2
 800771c:	440b      	add	r3, r1
 800771e:	3318      	adds	r3, #24
 8007720:	681a      	ldr	r2, [r3, #0]
 8007722:	78fb      	ldrb	r3, [r7, #3]
 8007724:	f003 010f 	and.w	r1, r3, #15
 8007728:	68f8      	ldr	r0, [r7, #12]
 800772a:	460b      	mov	r3, r1
 800772c:	00db      	lsls	r3, r3, #3
 800772e:	440b      	add	r3, r1
 8007730:	009b      	lsls	r3, r3, #2
 8007732:	4403      	add	r3, r0
 8007734:	331c      	adds	r3, #28
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	fbb2 f1f3 	udiv	r1, r2, r3
 800773c:	fb01 f303 	mul.w	r3, r1, r3
 8007740:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007742:	2b00      	cmp	r3, #0
 8007744:	d112      	bne.n	800776c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8007746:	78fb      	ldrb	r3, [r7, #3]
 8007748:	f003 020f 	and.w	r2, r3, #15
 800774c:	6879      	ldr	r1, [r7, #4]
 800774e:	4613      	mov	r3, r2
 8007750:	009b      	lsls	r3, r3, #2
 8007752:	4413      	add	r3, r2
 8007754:	009b      	lsls	r3, r3, #2
 8007756:	440b      	add	r3, r1
 8007758:	3318      	adds	r3, #24
 800775a:	2200      	movs	r2, #0
 800775c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800775e:	78f9      	ldrb	r1, [r7, #3]
 8007760:	2300      	movs	r3, #0
 8007762:	2200      	movs	r2, #0
 8007764:	6878      	ldr	r0, [r7, #4]
 8007766:	f002 f9c8 	bl	8009afa <USBD_LL_Transmit>
 800776a:	e01f      	b.n	80077ac <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800776c:	68bb      	ldr	r3, [r7, #8]
 800776e:	2200      	movs	r2, #0
 8007770:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800777a:	687a      	ldr	r2, [r7, #4]
 800777c:	33b0      	adds	r3, #176	@ 0xb0
 800777e:	009b      	lsls	r3, r3, #2
 8007780:	4413      	add	r3, r2
 8007782:	685b      	ldr	r3, [r3, #4]
 8007784:	691b      	ldr	r3, [r3, #16]
 8007786:	2b00      	cmp	r3, #0
 8007788:	d010      	beq.n	80077ac <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007790:	687a      	ldr	r2, [r7, #4]
 8007792:	33b0      	adds	r3, #176	@ 0xb0
 8007794:	009b      	lsls	r3, r3, #2
 8007796:	4413      	add	r3, r2
 8007798:	685b      	ldr	r3, [r3, #4]
 800779a:	691b      	ldr	r3, [r3, #16]
 800779c:	68ba      	ldr	r2, [r7, #8]
 800779e:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 80077a2:	68ba      	ldr	r2, [r7, #8]
 80077a4:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 80077a8:	78fa      	ldrb	r2, [r7, #3]
 80077aa:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80077ac:	2300      	movs	r3, #0
}
 80077ae:	4618      	mov	r0, r3
 80077b0:	3710      	adds	r7, #16
 80077b2:	46bd      	mov	sp, r7
 80077b4:	bd80      	pop	{r7, pc}

080077b6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80077b6:	b580      	push	{r7, lr}
 80077b8:	b084      	sub	sp, #16
 80077ba:	af00      	add	r7, sp, #0
 80077bc:	6078      	str	r0, [r7, #4]
 80077be:	460b      	mov	r3, r1
 80077c0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	32b0      	adds	r2, #176	@ 0xb0
 80077cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077d0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	32b0      	adds	r2, #176	@ 0xb0
 80077dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d101      	bne.n	80077e8 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80077e4:	2303      	movs	r3, #3
 80077e6:	e01a      	b.n	800781e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80077e8:	78fb      	ldrb	r3, [r7, #3]
 80077ea:	4619      	mov	r1, r3
 80077ec:	6878      	ldr	r0, [r7, #4]
 80077ee:	f002 f9c6 	bl	8009b7e <USBD_LL_GetRxDataSize>
 80077f2:	4602      	mov	r2, r0
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007800:	687a      	ldr	r2, [r7, #4]
 8007802:	33b0      	adds	r3, #176	@ 0xb0
 8007804:	009b      	lsls	r3, r3, #2
 8007806:	4413      	add	r3, r2
 8007808:	685b      	ldr	r3, [r3, #4]
 800780a:	68db      	ldr	r3, [r3, #12]
 800780c:	68fa      	ldr	r2, [r7, #12]
 800780e:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8007812:	68fa      	ldr	r2, [r7, #12]
 8007814:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8007818:	4611      	mov	r1, r2
 800781a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800781c:	2300      	movs	r3, #0
}
 800781e:	4618      	mov	r0, r3
 8007820:	3710      	adds	r7, #16
 8007822:	46bd      	mov	sp, r7
 8007824:	bd80      	pop	{r7, pc}

08007826 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007826:	b580      	push	{r7, lr}
 8007828:	b084      	sub	sp, #16
 800782a:	af00      	add	r7, sp, #0
 800782c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	32b0      	adds	r2, #176	@ 0xb0
 8007838:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800783c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	2b00      	cmp	r3, #0
 8007842:	d101      	bne.n	8007848 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007844:	2303      	movs	r3, #3
 8007846:	e024      	b.n	8007892 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800784e:	687a      	ldr	r2, [r7, #4]
 8007850:	33b0      	adds	r3, #176	@ 0xb0
 8007852:	009b      	lsls	r3, r3, #2
 8007854:	4413      	add	r3, r2
 8007856:	685b      	ldr	r3, [r3, #4]
 8007858:	2b00      	cmp	r3, #0
 800785a:	d019      	beq.n	8007890 <USBD_CDC_EP0_RxReady+0x6a>
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8007862:	2bff      	cmp	r3, #255	@ 0xff
 8007864:	d014      	beq.n	8007890 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800786c:	687a      	ldr	r2, [r7, #4]
 800786e:	33b0      	adds	r3, #176	@ 0xb0
 8007870:	009b      	lsls	r3, r3, #2
 8007872:	4413      	add	r3, r2
 8007874:	685b      	ldr	r3, [r3, #4]
 8007876:	689b      	ldr	r3, [r3, #8]
 8007878:	68fa      	ldr	r2, [r7, #12]
 800787a:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800787e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8007880:	68fa      	ldr	r2, [r7, #12]
 8007882:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007886:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	22ff      	movs	r2, #255	@ 0xff
 800788c:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8007890:	2300      	movs	r3, #0
}
 8007892:	4618      	mov	r0, r3
 8007894:	3710      	adds	r7, #16
 8007896:	46bd      	mov	sp, r7
 8007898:	bd80      	pop	{r7, pc}
	...

0800789c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800789c:	b580      	push	{r7, lr}
 800789e:	b086      	sub	sp, #24
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80078a4:	2182      	movs	r1, #130	@ 0x82
 80078a6:	4818      	ldr	r0, [pc, #96]	@ (8007908 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80078a8:	f000 fd4f 	bl	800834a <USBD_GetEpDesc>
 80078ac:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80078ae:	2101      	movs	r1, #1
 80078b0:	4815      	ldr	r0, [pc, #84]	@ (8007908 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80078b2:	f000 fd4a 	bl	800834a <USBD_GetEpDesc>
 80078b6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80078b8:	2181      	movs	r1, #129	@ 0x81
 80078ba:	4813      	ldr	r0, [pc, #76]	@ (8007908 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80078bc:	f000 fd45 	bl	800834a <USBD_GetEpDesc>
 80078c0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80078c2:	697b      	ldr	r3, [r7, #20]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d002      	beq.n	80078ce <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80078c8:	697b      	ldr	r3, [r7, #20]
 80078ca:	2210      	movs	r2, #16
 80078cc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80078ce:	693b      	ldr	r3, [r7, #16]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d006      	beq.n	80078e2 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80078d4:	693b      	ldr	r3, [r7, #16]
 80078d6:	2200      	movs	r2, #0
 80078d8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80078dc:	711a      	strb	r2, [r3, #4]
 80078de:	2200      	movs	r2, #0
 80078e0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d006      	beq.n	80078f6 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	2200      	movs	r2, #0
 80078ec:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80078f0:	711a      	strb	r2, [r3, #4]
 80078f2:	2200      	movs	r2, #0
 80078f4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	2243      	movs	r2, #67	@ 0x43
 80078fa:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80078fc:	4b02      	ldr	r3, [pc, #8]	@ (8007908 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80078fe:	4618      	mov	r0, r3
 8007900:	3718      	adds	r7, #24
 8007902:	46bd      	mov	sp, r7
 8007904:	bd80      	pop	{r7, pc}
 8007906:	bf00      	nop
 8007908:	20000050 	.word	0x20000050

0800790c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800790c:	b580      	push	{r7, lr}
 800790e:	b086      	sub	sp, #24
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007914:	2182      	movs	r1, #130	@ 0x82
 8007916:	4818      	ldr	r0, [pc, #96]	@ (8007978 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007918:	f000 fd17 	bl	800834a <USBD_GetEpDesc>
 800791c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800791e:	2101      	movs	r1, #1
 8007920:	4815      	ldr	r0, [pc, #84]	@ (8007978 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007922:	f000 fd12 	bl	800834a <USBD_GetEpDesc>
 8007926:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007928:	2181      	movs	r1, #129	@ 0x81
 800792a:	4813      	ldr	r0, [pc, #76]	@ (8007978 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800792c:	f000 fd0d 	bl	800834a <USBD_GetEpDesc>
 8007930:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007932:	697b      	ldr	r3, [r7, #20]
 8007934:	2b00      	cmp	r3, #0
 8007936:	d002      	beq.n	800793e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8007938:	697b      	ldr	r3, [r7, #20]
 800793a:	2210      	movs	r2, #16
 800793c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800793e:	693b      	ldr	r3, [r7, #16]
 8007940:	2b00      	cmp	r3, #0
 8007942:	d006      	beq.n	8007952 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007944:	693b      	ldr	r3, [r7, #16]
 8007946:	2200      	movs	r2, #0
 8007948:	711a      	strb	r2, [r3, #4]
 800794a:	2200      	movs	r2, #0
 800794c:	f042 0202 	orr.w	r2, r2, #2
 8007950:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	2b00      	cmp	r3, #0
 8007956:	d006      	beq.n	8007966 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	2200      	movs	r2, #0
 800795c:	711a      	strb	r2, [r3, #4]
 800795e:	2200      	movs	r2, #0
 8007960:	f042 0202 	orr.w	r2, r2, #2
 8007964:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	2243      	movs	r2, #67	@ 0x43
 800796a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800796c:	4b02      	ldr	r3, [pc, #8]	@ (8007978 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800796e:	4618      	mov	r0, r3
 8007970:	3718      	adds	r7, #24
 8007972:	46bd      	mov	sp, r7
 8007974:	bd80      	pop	{r7, pc}
 8007976:	bf00      	nop
 8007978:	20000050 	.word	0x20000050

0800797c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800797c:	b580      	push	{r7, lr}
 800797e:	b086      	sub	sp, #24
 8007980:	af00      	add	r7, sp, #0
 8007982:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007984:	2182      	movs	r1, #130	@ 0x82
 8007986:	4818      	ldr	r0, [pc, #96]	@ (80079e8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007988:	f000 fcdf 	bl	800834a <USBD_GetEpDesc>
 800798c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800798e:	2101      	movs	r1, #1
 8007990:	4815      	ldr	r0, [pc, #84]	@ (80079e8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007992:	f000 fcda 	bl	800834a <USBD_GetEpDesc>
 8007996:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007998:	2181      	movs	r1, #129	@ 0x81
 800799a:	4813      	ldr	r0, [pc, #76]	@ (80079e8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800799c:	f000 fcd5 	bl	800834a <USBD_GetEpDesc>
 80079a0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80079a2:	697b      	ldr	r3, [r7, #20]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d002      	beq.n	80079ae <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80079a8:	697b      	ldr	r3, [r7, #20]
 80079aa:	2210      	movs	r2, #16
 80079ac:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80079ae:	693b      	ldr	r3, [r7, #16]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d006      	beq.n	80079c2 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80079b4:	693b      	ldr	r3, [r7, #16]
 80079b6:	2200      	movs	r2, #0
 80079b8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80079bc:	711a      	strb	r2, [r3, #4]
 80079be:	2200      	movs	r2, #0
 80079c0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d006      	beq.n	80079d6 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	2200      	movs	r2, #0
 80079cc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80079d0:	711a      	strb	r2, [r3, #4]
 80079d2:	2200      	movs	r2, #0
 80079d4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	2243      	movs	r2, #67	@ 0x43
 80079da:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80079dc:	4b02      	ldr	r3, [pc, #8]	@ (80079e8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80079de:	4618      	mov	r0, r3
 80079e0:	3718      	adds	r7, #24
 80079e2:	46bd      	mov	sp, r7
 80079e4:	bd80      	pop	{r7, pc}
 80079e6:	bf00      	nop
 80079e8:	20000050 	.word	0x20000050

080079ec <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80079ec:	b480      	push	{r7}
 80079ee:	b083      	sub	sp, #12
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	220a      	movs	r2, #10
 80079f8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80079fa:	4b03      	ldr	r3, [pc, #12]	@ (8007a08 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80079fc:	4618      	mov	r0, r3
 80079fe:	370c      	adds	r7, #12
 8007a00:	46bd      	mov	sp, r7
 8007a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a06:	4770      	bx	lr
 8007a08:	2000000c 	.word	0x2000000c

08007a0c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007a0c:	b480      	push	{r7}
 8007a0e:	b083      	sub	sp, #12
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	6078      	str	r0, [r7, #4]
 8007a14:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007a16:	683b      	ldr	r3, [r7, #0]
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d101      	bne.n	8007a20 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007a1c:	2303      	movs	r3, #3
 8007a1e:	e009      	b.n	8007a34 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007a26:	687a      	ldr	r2, [r7, #4]
 8007a28:	33b0      	adds	r3, #176	@ 0xb0
 8007a2a:	009b      	lsls	r3, r3, #2
 8007a2c:	4413      	add	r3, r2
 8007a2e:	683a      	ldr	r2, [r7, #0]
 8007a30:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8007a32:	2300      	movs	r3, #0
}
 8007a34:	4618      	mov	r0, r3
 8007a36:	370c      	adds	r7, #12
 8007a38:	46bd      	mov	sp, r7
 8007a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3e:	4770      	bx	lr

08007a40 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007a40:	b480      	push	{r7}
 8007a42:	b087      	sub	sp, #28
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	60f8      	str	r0, [r7, #12]
 8007a48:	60b9      	str	r1, [r7, #8]
 8007a4a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	32b0      	adds	r2, #176	@ 0xb0
 8007a56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a5a:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8007a5c:	697b      	ldr	r3, [r7, #20]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d101      	bne.n	8007a66 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8007a62:	2303      	movs	r3, #3
 8007a64:	e008      	b.n	8007a78 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8007a66:	697b      	ldr	r3, [r7, #20]
 8007a68:	68ba      	ldr	r2, [r7, #8]
 8007a6a:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8007a6e:	697b      	ldr	r3, [r7, #20]
 8007a70:	687a      	ldr	r2, [r7, #4]
 8007a72:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8007a76:	2300      	movs	r3, #0
}
 8007a78:	4618      	mov	r0, r3
 8007a7a:	371c      	adds	r7, #28
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a82:	4770      	bx	lr

08007a84 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007a84:	b480      	push	{r7}
 8007a86:	b085      	sub	sp, #20
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]
 8007a8c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	32b0      	adds	r2, #176	@ 0xb0
 8007a98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a9c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d101      	bne.n	8007aa8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8007aa4:	2303      	movs	r3, #3
 8007aa6:	e004      	b.n	8007ab2 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	683a      	ldr	r2, [r7, #0]
 8007aac:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8007ab0:	2300      	movs	r3, #0
}
 8007ab2:	4618      	mov	r0, r3
 8007ab4:	3714      	adds	r7, #20
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007abc:	4770      	bx	lr
	...

08007ac0 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	b084      	sub	sp, #16
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	32b0      	adds	r2, #176	@ 0xb0
 8007ad2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ad6:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8007ad8:	2301      	movs	r3, #1
 8007ada:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8007adc:	68bb      	ldr	r3, [r7, #8]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d101      	bne.n	8007ae6 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8007ae2:	2303      	movs	r3, #3
 8007ae4:	e025      	b.n	8007b32 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8007ae6:	68bb      	ldr	r3, [r7, #8]
 8007ae8:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d11f      	bne.n	8007b30 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8007af0:	68bb      	ldr	r3, [r7, #8]
 8007af2:	2201      	movs	r2, #1
 8007af4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8007af8:	4b10      	ldr	r3, [pc, #64]	@ (8007b3c <USBD_CDC_TransmitPacket+0x7c>)
 8007afa:	781b      	ldrb	r3, [r3, #0]
 8007afc:	f003 020f 	and.w	r2, r3, #15
 8007b00:	68bb      	ldr	r3, [r7, #8]
 8007b02:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8007b06:	6878      	ldr	r0, [r7, #4]
 8007b08:	4613      	mov	r3, r2
 8007b0a:	009b      	lsls	r3, r3, #2
 8007b0c:	4413      	add	r3, r2
 8007b0e:	009b      	lsls	r3, r3, #2
 8007b10:	4403      	add	r3, r0
 8007b12:	3318      	adds	r3, #24
 8007b14:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8007b16:	4b09      	ldr	r3, [pc, #36]	@ (8007b3c <USBD_CDC_TransmitPacket+0x7c>)
 8007b18:	7819      	ldrb	r1, [r3, #0]
 8007b1a:	68bb      	ldr	r3, [r7, #8]
 8007b1c:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8007b20:	68bb      	ldr	r3, [r7, #8]
 8007b22:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8007b26:	6878      	ldr	r0, [r7, #4]
 8007b28:	f001 ffe7 	bl	8009afa <USBD_LL_Transmit>

    ret = USBD_OK;
 8007b2c:	2300      	movs	r3, #0
 8007b2e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8007b30:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b32:	4618      	mov	r0, r3
 8007b34:	3710      	adds	r7, #16
 8007b36:	46bd      	mov	sp, r7
 8007b38:	bd80      	pop	{r7, pc}
 8007b3a:	bf00      	nop
 8007b3c:	20000093 	.word	0x20000093

08007b40 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007b40:	b580      	push	{r7, lr}
 8007b42:	b084      	sub	sp, #16
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	32b0      	adds	r2, #176	@ 0xb0
 8007b52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b56:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	32b0      	adds	r2, #176	@ 0xb0
 8007b62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d101      	bne.n	8007b6e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8007b6a:	2303      	movs	r3, #3
 8007b6c:	e018      	b.n	8007ba0 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	7c1b      	ldrb	r3, [r3, #16]
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d10a      	bne.n	8007b8c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007b76:	4b0c      	ldr	r3, [pc, #48]	@ (8007ba8 <USBD_CDC_ReceivePacket+0x68>)
 8007b78:	7819      	ldrb	r1, [r3, #0]
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007b80:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007b84:	6878      	ldr	r0, [r7, #4]
 8007b86:	f001 ffd9 	bl	8009b3c <USBD_LL_PrepareReceive>
 8007b8a:	e008      	b.n	8007b9e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007b8c:	4b06      	ldr	r3, [pc, #24]	@ (8007ba8 <USBD_CDC_ReceivePacket+0x68>)
 8007b8e:	7819      	ldrb	r1, [r3, #0]
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007b96:	2340      	movs	r3, #64	@ 0x40
 8007b98:	6878      	ldr	r0, [r7, #4]
 8007b9a:	f001 ffcf 	bl	8009b3c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007b9e:	2300      	movs	r3, #0
}
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	3710      	adds	r7, #16
 8007ba4:	46bd      	mov	sp, r7
 8007ba6:	bd80      	pop	{r7, pc}
 8007ba8:	20000094 	.word	0x20000094

08007bac <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007bac:	b580      	push	{r7, lr}
 8007bae:	b086      	sub	sp, #24
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	60f8      	str	r0, [r7, #12]
 8007bb4:	60b9      	str	r1, [r7, #8]
 8007bb6:	4613      	mov	r3, r2
 8007bb8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d101      	bne.n	8007bc4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007bc0:	2303      	movs	r3, #3
 8007bc2:	e01f      	b.n	8007c04 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	2200      	movs	r2, #0
 8007bc8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	2200      	movs	r2, #0
 8007bd0:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007bdc:	68bb      	ldr	r3, [r7, #8]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d003      	beq.n	8007bea <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	68ba      	ldr	r2, [r7, #8]
 8007be6:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	2201      	movs	r2, #1
 8007bee:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	79fa      	ldrb	r2, [r7, #7]
 8007bf6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007bf8:	68f8      	ldr	r0, [r7, #12]
 8007bfa:	f001 fe49 	bl	8009890 <USBD_LL_Init>
 8007bfe:	4603      	mov	r3, r0
 8007c00:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007c02:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c04:	4618      	mov	r0, r3
 8007c06:	3718      	adds	r7, #24
 8007c08:	46bd      	mov	sp, r7
 8007c0a:	bd80      	pop	{r7, pc}

08007c0c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007c0c:	b580      	push	{r7, lr}
 8007c0e:	b084      	sub	sp, #16
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	6078      	str	r0, [r7, #4]
 8007c14:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007c16:	2300      	movs	r3, #0
 8007c18:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007c1a:	683b      	ldr	r3, [r7, #0]
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d101      	bne.n	8007c24 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007c20:	2303      	movs	r3, #3
 8007c22:	e025      	b.n	8007c70 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	683a      	ldr	r2, [r7, #0]
 8007c28:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	32ae      	adds	r2, #174	@ 0xae
 8007c36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d00f      	beq.n	8007c60 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	32ae      	adds	r2, #174	@ 0xae
 8007c4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c50:	f107 020e 	add.w	r2, r7, #14
 8007c54:	4610      	mov	r0, r2
 8007c56:	4798      	blx	r3
 8007c58:	4602      	mov	r2, r0
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8007c66:	1c5a      	adds	r2, r3, #1
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8007c6e:	2300      	movs	r3, #0
}
 8007c70:	4618      	mov	r0, r3
 8007c72:	3710      	adds	r7, #16
 8007c74:	46bd      	mov	sp, r7
 8007c76:	bd80      	pop	{r7, pc}

08007c78 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b082      	sub	sp, #8
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007c80:	6878      	ldr	r0, [r7, #4]
 8007c82:	f001 fe51 	bl	8009928 <USBD_LL_Start>
 8007c86:	4603      	mov	r3, r0
}
 8007c88:	4618      	mov	r0, r3
 8007c8a:	3708      	adds	r7, #8
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	bd80      	pop	{r7, pc}

08007c90 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007c90:	b480      	push	{r7}
 8007c92:	b083      	sub	sp, #12
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007c98:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	370c      	adds	r7, #12
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca4:	4770      	bx	lr

08007ca6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007ca6:	b580      	push	{r7, lr}
 8007ca8:	b084      	sub	sp, #16
 8007caa:	af00      	add	r7, sp, #0
 8007cac:	6078      	str	r0, [r7, #4]
 8007cae:	460b      	mov	r3, r1
 8007cb0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d009      	beq.n	8007cd4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	78fa      	ldrb	r2, [r7, #3]
 8007cca:	4611      	mov	r1, r2
 8007ccc:	6878      	ldr	r0, [r7, #4]
 8007cce:	4798      	blx	r3
 8007cd0:	4603      	mov	r3, r0
 8007cd2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007cd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	3710      	adds	r7, #16
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	bd80      	pop	{r7, pc}

08007cde <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007cde:	b580      	push	{r7, lr}
 8007ce0:	b084      	sub	sp, #16
 8007ce2:	af00      	add	r7, sp, #0
 8007ce4:	6078      	str	r0, [r7, #4]
 8007ce6:	460b      	mov	r3, r1
 8007ce8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007cea:	2300      	movs	r3, #0
 8007cec:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007cf4:	685b      	ldr	r3, [r3, #4]
 8007cf6:	78fa      	ldrb	r2, [r7, #3]
 8007cf8:	4611      	mov	r1, r2
 8007cfa:	6878      	ldr	r0, [r7, #4]
 8007cfc:	4798      	blx	r3
 8007cfe:	4603      	mov	r3, r0
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d001      	beq.n	8007d08 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8007d04:	2303      	movs	r3, #3
 8007d06:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007d08:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	3710      	adds	r7, #16
 8007d0e:	46bd      	mov	sp, r7
 8007d10:	bd80      	pop	{r7, pc}

08007d12 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007d12:	b580      	push	{r7, lr}
 8007d14:	b084      	sub	sp, #16
 8007d16:	af00      	add	r7, sp, #0
 8007d18:	6078      	str	r0, [r7, #4]
 8007d1a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007d22:	6839      	ldr	r1, [r7, #0]
 8007d24:	4618      	mov	r0, r3
 8007d26:	f001 f90c 	bl	8008f42 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	2201      	movs	r2, #1
 8007d2e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8007d38:	461a      	mov	r2, r3
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007d46:	f003 031f 	and.w	r3, r3, #31
 8007d4a:	2b02      	cmp	r3, #2
 8007d4c:	d01a      	beq.n	8007d84 <USBD_LL_SetupStage+0x72>
 8007d4e:	2b02      	cmp	r3, #2
 8007d50:	d822      	bhi.n	8007d98 <USBD_LL_SetupStage+0x86>
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d002      	beq.n	8007d5c <USBD_LL_SetupStage+0x4a>
 8007d56:	2b01      	cmp	r3, #1
 8007d58:	d00a      	beq.n	8007d70 <USBD_LL_SetupStage+0x5e>
 8007d5a:	e01d      	b.n	8007d98 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007d62:	4619      	mov	r1, r3
 8007d64:	6878      	ldr	r0, [r7, #4]
 8007d66:	f000 fb63 	bl	8008430 <USBD_StdDevReq>
 8007d6a:	4603      	mov	r3, r0
 8007d6c:	73fb      	strb	r3, [r7, #15]
      break;
 8007d6e:	e020      	b.n	8007db2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007d76:	4619      	mov	r1, r3
 8007d78:	6878      	ldr	r0, [r7, #4]
 8007d7a:	f000 fbcb 	bl	8008514 <USBD_StdItfReq>
 8007d7e:	4603      	mov	r3, r0
 8007d80:	73fb      	strb	r3, [r7, #15]
      break;
 8007d82:	e016      	b.n	8007db2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007d8a:	4619      	mov	r1, r3
 8007d8c:	6878      	ldr	r0, [r7, #4]
 8007d8e:	f000 fc2d 	bl	80085ec <USBD_StdEPReq>
 8007d92:	4603      	mov	r3, r0
 8007d94:	73fb      	strb	r3, [r7, #15]
      break;
 8007d96:	e00c      	b.n	8007db2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007d9e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8007da2:	b2db      	uxtb	r3, r3
 8007da4:	4619      	mov	r1, r3
 8007da6:	6878      	ldr	r0, [r7, #4]
 8007da8:	f001 fe1e 	bl	80099e8 <USBD_LL_StallEP>
 8007dac:	4603      	mov	r3, r0
 8007dae:	73fb      	strb	r3, [r7, #15]
      break;
 8007db0:	bf00      	nop
  }

  return ret;
 8007db2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007db4:	4618      	mov	r0, r3
 8007db6:	3710      	adds	r7, #16
 8007db8:	46bd      	mov	sp, r7
 8007dba:	bd80      	pop	{r7, pc}

08007dbc <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	b086      	sub	sp, #24
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	60f8      	str	r0, [r7, #12]
 8007dc4:	460b      	mov	r3, r1
 8007dc6:	607a      	str	r2, [r7, #4]
 8007dc8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8007dca:	2300      	movs	r3, #0
 8007dcc:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8007dce:	7afb      	ldrb	r3, [r7, #11]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d16e      	bne.n	8007eb2 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8007dda:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007de2:	2b03      	cmp	r3, #3
 8007de4:	f040 8098 	bne.w	8007f18 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8007de8:	693b      	ldr	r3, [r7, #16]
 8007dea:	689a      	ldr	r2, [r3, #8]
 8007dec:	693b      	ldr	r3, [r7, #16]
 8007dee:	68db      	ldr	r3, [r3, #12]
 8007df0:	429a      	cmp	r2, r3
 8007df2:	d913      	bls.n	8007e1c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8007df4:	693b      	ldr	r3, [r7, #16]
 8007df6:	689a      	ldr	r2, [r3, #8]
 8007df8:	693b      	ldr	r3, [r7, #16]
 8007dfa:	68db      	ldr	r3, [r3, #12]
 8007dfc:	1ad2      	subs	r2, r2, r3
 8007dfe:	693b      	ldr	r3, [r7, #16]
 8007e00:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007e02:	693b      	ldr	r3, [r7, #16]
 8007e04:	68da      	ldr	r2, [r3, #12]
 8007e06:	693b      	ldr	r3, [r7, #16]
 8007e08:	689b      	ldr	r3, [r3, #8]
 8007e0a:	4293      	cmp	r3, r2
 8007e0c:	bf28      	it	cs
 8007e0e:	4613      	movcs	r3, r2
 8007e10:	461a      	mov	r2, r3
 8007e12:	6879      	ldr	r1, [r7, #4]
 8007e14:	68f8      	ldr	r0, [r7, #12]
 8007e16:	f001 f988 	bl	800912a <USBD_CtlContinueRx>
 8007e1a:	e07d      	b.n	8007f18 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007e22:	f003 031f 	and.w	r3, r3, #31
 8007e26:	2b02      	cmp	r3, #2
 8007e28:	d014      	beq.n	8007e54 <USBD_LL_DataOutStage+0x98>
 8007e2a:	2b02      	cmp	r3, #2
 8007e2c:	d81d      	bhi.n	8007e6a <USBD_LL_DataOutStage+0xae>
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d002      	beq.n	8007e38 <USBD_LL_DataOutStage+0x7c>
 8007e32:	2b01      	cmp	r3, #1
 8007e34:	d003      	beq.n	8007e3e <USBD_LL_DataOutStage+0x82>
 8007e36:	e018      	b.n	8007e6a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8007e38:	2300      	movs	r3, #0
 8007e3a:	75bb      	strb	r3, [r7, #22]
            break;
 8007e3c:	e018      	b.n	8007e70 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8007e44:	b2db      	uxtb	r3, r3
 8007e46:	4619      	mov	r1, r3
 8007e48:	68f8      	ldr	r0, [r7, #12]
 8007e4a:	f000 fa64 	bl	8008316 <USBD_CoreFindIF>
 8007e4e:	4603      	mov	r3, r0
 8007e50:	75bb      	strb	r3, [r7, #22]
            break;
 8007e52:	e00d      	b.n	8007e70 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8007e5a:	b2db      	uxtb	r3, r3
 8007e5c:	4619      	mov	r1, r3
 8007e5e:	68f8      	ldr	r0, [r7, #12]
 8007e60:	f000 fa66 	bl	8008330 <USBD_CoreFindEP>
 8007e64:	4603      	mov	r3, r0
 8007e66:	75bb      	strb	r3, [r7, #22]
            break;
 8007e68:	e002      	b.n	8007e70 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	75bb      	strb	r3, [r7, #22]
            break;
 8007e6e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007e70:	7dbb      	ldrb	r3, [r7, #22]
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d119      	bne.n	8007eaa <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007e7c:	b2db      	uxtb	r3, r3
 8007e7e:	2b03      	cmp	r3, #3
 8007e80:	d113      	bne.n	8007eaa <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8007e82:	7dba      	ldrb	r2, [r7, #22]
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	32ae      	adds	r2, #174	@ 0xae
 8007e88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e8c:	691b      	ldr	r3, [r3, #16]
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d00b      	beq.n	8007eaa <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8007e92:	7dba      	ldrb	r2, [r7, #22]
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8007e9a:	7dba      	ldrb	r2, [r7, #22]
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	32ae      	adds	r2, #174	@ 0xae
 8007ea0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ea4:	691b      	ldr	r3, [r3, #16]
 8007ea6:	68f8      	ldr	r0, [r7, #12]
 8007ea8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007eaa:	68f8      	ldr	r0, [r7, #12]
 8007eac:	f001 f94e 	bl	800914c <USBD_CtlSendStatus>
 8007eb0:	e032      	b.n	8007f18 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8007eb2:	7afb      	ldrb	r3, [r7, #11]
 8007eb4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007eb8:	b2db      	uxtb	r3, r3
 8007eba:	4619      	mov	r1, r3
 8007ebc:	68f8      	ldr	r0, [r7, #12]
 8007ebe:	f000 fa37 	bl	8008330 <USBD_CoreFindEP>
 8007ec2:	4603      	mov	r3, r0
 8007ec4:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007ec6:	7dbb      	ldrb	r3, [r7, #22]
 8007ec8:	2bff      	cmp	r3, #255	@ 0xff
 8007eca:	d025      	beq.n	8007f18 <USBD_LL_DataOutStage+0x15c>
 8007ecc:	7dbb      	ldrb	r3, [r7, #22]
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d122      	bne.n	8007f18 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007ed8:	b2db      	uxtb	r3, r3
 8007eda:	2b03      	cmp	r3, #3
 8007edc:	d117      	bne.n	8007f0e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8007ede:	7dba      	ldrb	r2, [r7, #22]
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	32ae      	adds	r2, #174	@ 0xae
 8007ee4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ee8:	699b      	ldr	r3, [r3, #24]
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d00f      	beq.n	8007f0e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8007eee:	7dba      	ldrb	r2, [r7, #22]
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8007ef6:	7dba      	ldrb	r2, [r7, #22]
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	32ae      	adds	r2, #174	@ 0xae
 8007efc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f00:	699b      	ldr	r3, [r3, #24]
 8007f02:	7afa      	ldrb	r2, [r7, #11]
 8007f04:	4611      	mov	r1, r2
 8007f06:	68f8      	ldr	r0, [r7, #12]
 8007f08:	4798      	blx	r3
 8007f0a:	4603      	mov	r3, r0
 8007f0c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8007f0e:	7dfb      	ldrb	r3, [r7, #23]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d001      	beq.n	8007f18 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8007f14:	7dfb      	ldrb	r3, [r7, #23]
 8007f16:	e000      	b.n	8007f1a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8007f18:	2300      	movs	r3, #0
}
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	3718      	adds	r7, #24
 8007f1e:	46bd      	mov	sp, r7
 8007f20:	bd80      	pop	{r7, pc}

08007f22 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007f22:	b580      	push	{r7, lr}
 8007f24:	b086      	sub	sp, #24
 8007f26:	af00      	add	r7, sp, #0
 8007f28:	60f8      	str	r0, [r7, #12]
 8007f2a:	460b      	mov	r3, r1
 8007f2c:	607a      	str	r2, [r7, #4]
 8007f2e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8007f30:	7afb      	ldrb	r3, [r7, #11]
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d16f      	bne.n	8008016 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	3314      	adds	r3, #20
 8007f3a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007f42:	2b02      	cmp	r3, #2
 8007f44:	d15a      	bne.n	8007ffc <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8007f46:	693b      	ldr	r3, [r7, #16]
 8007f48:	689a      	ldr	r2, [r3, #8]
 8007f4a:	693b      	ldr	r3, [r7, #16]
 8007f4c:	68db      	ldr	r3, [r3, #12]
 8007f4e:	429a      	cmp	r2, r3
 8007f50:	d914      	bls.n	8007f7c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007f52:	693b      	ldr	r3, [r7, #16]
 8007f54:	689a      	ldr	r2, [r3, #8]
 8007f56:	693b      	ldr	r3, [r7, #16]
 8007f58:	68db      	ldr	r3, [r3, #12]
 8007f5a:	1ad2      	subs	r2, r2, r3
 8007f5c:	693b      	ldr	r3, [r7, #16]
 8007f5e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007f60:	693b      	ldr	r3, [r7, #16]
 8007f62:	689b      	ldr	r3, [r3, #8]
 8007f64:	461a      	mov	r2, r3
 8007f66:	6879      	ldr	r1, [r7, #4]
 8007f68:	68f8      	ldr	r0, [r7, #12]
 8007f6a:	f001 f8b0 	bl	80090ce <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007f6e:	2300      	movs	r3, #0
 8007f70:	2200      	movs	r2, #0
 8007f72:	2100      	movs	r1, #0
 8007f74:	68f8      	ldr	r0, [r7, #12]
 8007f76:	f001 fde1 	bl	8009b3c <USBD_LL_PrepareReceive>
 8007f7a:	e03f      	b.n	8007ffc <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007f7c:	693b      	ldr	r3, [r7, #16]
 8007f7e:	68da      	ldr	r2, [r3, #12]
 8007f80:	693b      	ldr	r3, [r7, #16]
 8007f82:	689b      	ldr	r3, [r3, #8]
 8007f84:	429a      	cmp	r2, r3
 8007f86:	d11c      	bne.n	8007fc2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007f88:	693b      	ldr	r3, [r7, #16]
 8007f8a:	685a      	ldr	r2, [r3, #4]
 8007f8c:	693b      	ldr	r3, [r7, #16]
 8007f8e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007f90:	429a      	cmp	r2, r3
 8007f92:	d316      	bcc.n	8007fc2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007f94:	693b      	ldr	r3, [r7, #16]
 8007f96:	685a      	ldr	r2, [r3, #4]
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007f9e:	429a      	cmp	r2, r3
 8007fa0:	d20f      	bcs.n	8007fc2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007fa2:	2200      	movs	r2, #0
 8007fa4:	2100      	movs	r1, #0
 8007fa6:	68f8      	ldr	r0, [r7, #12]
 8007fa8:	f001 f891 	bl	80090ce <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	2200      	movs	r2, #0
 8007fb0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007fb4:	2300      	movs	r3, #0
 8007fb6:	2200      	movs	r2, #0
 8007fb8:	2100      	movs	r1, #0
 8007fba:	68f8      	ldr	r0, [r7, #12]
 8007fbc:	f001 fdbe 	bl	8009b3c <USBD_LL_PrepareReceive>
 8007fc0:	e01c      	b.n	8007ffc <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007fc8:	b2db      	uxtb	r3, r3
 8007fca:	2b03      	cmp	r3, #3
 8007fcc:	d10f      	bne.n	8007fee <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007fd4:	68db      	ldr	r3, [r3, #12]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d009      	beq.n	8007fee <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	2200      	movs	r2, #0
 8007fde:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007fe8:	68db      	ldr	r3, [r3, #12]
 8007fea:	68f8      	ldr	r0, [r7, #12]
 8007fec:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007fee:	2180      	movs	r1, #128	@ 0x80
 8007ff0:	68f8      	ldr	r0, [r7, #12]
 8007ff2:	f001 fcf9 	bl	80099e8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007ff6:	68f8      	ldr	r0, [r7, #12]
 8007ff8:	f001 f8bb 	bl	8009172 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8008002:	2b00      	cmp	r3, #0
 8008004:	d03a      	beq.n	800807c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8008006:	68f8      	ldr	r0, [r7, #12]
 8008008:	f7ff fe42 	bl	8007c90 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	2200      	movs	r2, #0
 8008010:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8008014:	e032      	b.n	800807c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8008016:	7afb      	ldrb	r3, [r7, #11]
 8008018:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800801c:	b2db      	uxtb	r3, r3
 800801e:	4619      	mov	r1, r3
 8008020:	68f8      	ldr	r0, [r7, #12]
 8008022:	f000 f985 	bl	8008330 <USBD_CoreFindEP>
 8008026:	4603      	mov	r3, r0
 8008028:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800802a:	7dfb      	ldrb	r3, [r7, #23]
 800802c:	2bff      	cmp	r3, #255	@ 0xff
 800802e:	d025      	beq.n	800807c <USBD_LL_DataInStage+0x15a>
 8008030:	7dfb      	ldrb	r3, [r7, #23]
 8008032:	2b00      	cmp	r3, #0
 8008034:	d122      	bne.n	800807c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800803c:	b2db      	uxtb	r3, r3
 800803e:	2b03      	cmp	r3, #3
 8008040:	d11c      	bne.n	800807c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8008042:	7dfa      	ldrb	r2, [r7, #23]
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	32ae      	adds	r2, #174	@ 0xae
 8008048:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800804c:	695b      	ldr	r3, [r3, #20]
 800804e:	2b00      	cmp	r3, #0
 8008050:	d014      	beq.n	800807c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8008052:	7dfa      	ldrb	r2, [r7, #23]
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800805a:	7dfa      	ldrb	r2, [r7, #23]
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	32ae      	adds	r2, #174	@ 0xae
 8008060:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008064:	695b      	ldr	r3, [r3, #20]
 8008066:	7afa      	ldrb	r2, [r7, #11]
 8008068:	4611      	mov	r1, r2
 800806a:	68f8      	ldr	r0, [r7, #12]
 800806c:	4798      	blx	r3
 800806e:	4603      	mov	r3, r0
 8008070:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8008072:	7dbb      	ldrb	r3, [r7, #22]
 8008074:	2b00      	cmp	r3, #0
 8008076:	d001      	beq.n	800807c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8008078:	7dbb      	ldrb	r3, [r7, #22]
 800807a:	e000      	b.n	800807e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800807c:	2300      	movs	r3, #0
}
 800807e:	4618      	mov	r0, r3
 8008080:	3718      	adds	r7, #24
 8008082:	46bd      	mov	sp, r7
 8008084:	bd80      	pop	{r7, pc}

08008086 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008086:	b580      	push	{r7, lr}
 8008088:	b084      	sub	sp, #16
 800808a:	af00      	add	r7, sp, #0
 800808c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800808e:	2300      	movs	r3, #0
 8008090:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	2201      	movs	r2, #1
 8008096:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	2200      	movs	r2, #0
 800809e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	2200      	movs	r2, #0
 80080a6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	2200      	movs	r2, #0
 80080ac:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	2200      	movs	r2, #0
 80080b4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d014      	beq.n	80080ec <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80080c8:	685b      	ldr	r3, [r3, #4]
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d00e      	beq.n	80080ec <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80080d4:	685b      	ldr	r3, [r3, #4]
 80080d6:	687a      	ldr	r2, [r7, #4]
 80080d8:	6852      	ldr	r2, [r2, #4]
 80080da:	b2d2      	uxtb	r2, r2
 80080dc:	4611      	mov	r1, r2
 80080de:	6878      	ldr	r0, [r7, #4]
 80080e0:	4798      	blx	r3
 80080e2:	4603      	mov	r3, r0
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d001      	beq.n	80080ec <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80080e8:	2303      	movs	r3, #3
 80080ea:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80080ec:	2340      	movs	r3, #64	@ 0x40
 80080ee:	2200      	movs	r2, #0
 80080f0:	2100      	movs	r1, #0
 80080f2:	6878      	ldr	r0, [r7, #4]
 80080f4:	f001 fc33 	bl	800995e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	2201      	movs	r2, #1
 80080fc:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	2240      	movs	r2, #64	@ 0x40
 8008104:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008108:	2340      	movs	r3, #64	@ 0x40
 800810a:	2200      	movs	r2, #0
 800810c:	2180      	movs	r1, #128	@ 0x80
 800810e:	6878      	ldr	r0, [r7, #4]
 8008110:	f001 fc25 	bl	800995e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	2201      	movs	r2, #1
 8008118:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	2240      	movs	r2, #64	@ 0x40
 800811e:	621a      	str	r2, [r3, #32]

  return ret;
 8008120:	7bfb      	ldrb	r3, [r7, #15]
}
 8008122:	4618      	mov	r0, r3
 8008124:	3710      	adds	r7, #16
 8008126:	46bd      	mov	sp, r7
 8008128:	bd80      	pop	{r7, pc}

0800812a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800812a:	b480      	push	{r7}
 800812c:	b083      	sub	sp, #12
 800812e:	af00      	add	r7, sp, #0
 8008130:	6078      	str	r0, [r7, #4]
 8008132:	460b      	mov	r3, r1
 8008134:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	78fa      	ldrb	r2, [r7, #3]
 800813a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800813c:	2300      	movs	r3, #0
}
 800813e:	4618      	mov	r0, r3
 8008140:	370c      	adds	r7, #12
 8008142:	46bd      	mov	sp, r7
 8008144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008148:	4770      	bx	lr

0800814a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800814a:	b480      	push	{r7}
 800814c:	b083      	sub	sp, #12
 800814e:	af00      	add	r7, sp, #0
 8008150:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008158:	b2db      	uxtb	r3, r3
 800815a:	2b04      	cmp	r3, #4
 800815c:	d006      	beq.n	800816c <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008164:	b2da      	uxtb	r2, r3
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	2204      	movs	r2, #4
 8008170:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8008174:	2300      	movs	r3, #0
}
 8008176:	4618      	mov	r0, r3
 8008178:	370c      	adds	r7, #12
 800817a:	46bd      	mov	sp, r7
 800817c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008180:	4770      	bx	lr

08008182 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008182:	b480      	push	{r7}
 8008184:	b083      	sub	sp, #12
 8008186:	af00      	add	r7, sp, #0
 8008188:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008190:	b2db      	uxtb	r3, r3
 8008192:	2b04      	cmp	r3, #4
 8008194:	d106      	bne.n	80081a4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800819c:	b2da      	uxtb	r2, r3
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80081a4:	2300      	movs	r3, #0
}
 80081a6:	4618      	mov	r0, r3
 80081a8:	370c      	adds	r7, #12
 80081aa:	46bd      	mov	sp, r7
 80081ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b0:	4770      	bx	lr

080081b2 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80081b2:	b580      	push	{r7, lr}
 80081b4:	b082      	sub	sp, #8
 80081b6:	af00      	add	r7, sp, #0
 80081b8:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80081c0:	b2db      	uxtb	r3, r3
 80081c2:	2b03      	cmp	r3, #3
 80081c4:	d110      	bne.n	80081e8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d00b      	beq.n	80081e8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80081d6:	69db      	ldr	r3, [r3, #28]
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d005      	beq.n	80081e8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80081e2:	69db      	ldr	r3, [r3, #28]
 80081e4:	6878      	ldr	r0, [r7, #4]
 80081e6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80081e8:	2300      	movs	r3, #0
}
 80081ea:	4618      	mov	r0, r3
 80081ec:	3708      	adds	r7, #8
 80081ee:	46bd      	mov	sp, r7
 80081f0:	bd80      	pop	{r7, pc}

080081f2 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80081f2:	b580      	push	{r7, lr}
 80081f4:	b082      	sub	sp, #8
 80081f6:	af00      	add	r7, sp, #0
 80081f8:	6078      	str	r0, [r7, #4]
 80081fa:	460b      	mov	r3, r1
 80081fc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	32ae      	adds	r2, #174	@ 0xae
 8008208:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800820c:	2b00      	cmp	r3, #0
 800820e:	d101      	bne.n	8008214 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8008210:	2303      	movs	r3, #3
 8008212:	e01c      	b.n	800824e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800821a:	b2db      	uxtb	r3, r3
 800821c:	2b03      	cmp	r3, #3
 800821e:	d115      	bne.n	800824c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	32ae      	adds	r2, #174	@ 0xae
 800822a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800822e:	6a1b      	ldr	r3, [r3, #32]
 8008230:	2b00      	cmp	r3, #0
 8008232:	d00b      	beq.n	800824c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	32ae      	adds	r2, #174	@ 0xae
 800823e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008242:	6a1b      	ldr	r3, [r3, #32]
 8008244:	78fa      	ldrb	r2, [r7, #3]
 8008246:	4611      	mov	r1, r2
 8008248:	6878      	ldr	r0, [r7, #4]
 800824a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800824c:	2300      	movs	r3, #0
}
 800824e:	4618      	mov	r0, r3
 8008250:	3708      	adds	r7, #8
 8008252:	46bd      	mov	sp, r7
 8008254:	bd80      	pop	{r7, pc}

08008256 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008256:	b580      	push	{r7, lr}
 8008258:	b082      	sub	sp, #8
 800825a:	af00      	add	r7, sp, #0
 800825c:	6078      	str	r0, [r7, #4]
 800825e:	460b      	mov	r3, r1
 8008260:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	32ae      	adds	r2, #174	@ 0xae
 800826c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008270:	2b00      	cmp	r3, #0
 8008272:	d101      	bne.n	8008278 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8008274:	2303      	movs	r3, #3
 8008276:	e01c      	b.n	80082b2 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800827e:	b2db      	uxtb	r3, r3
 8008280:	2b03      	cmp	r3, #3
 8008282:	d115      	bne.n	80082b0 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	32ae      	adds	r2, #174	@ 0xae
 800828e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008292:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008294:	2b00      	cmp	r3, #0
 8008296:	d00b      	beq.n	80082b0 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	32ae      	adds	r2, #174	@ 0xae
 80082a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082a8:	78fa      	ldrb	r2, [r7, #3]
 80082aa:	4611      	mov	r1, r2
 80082ac:	6878      	ldr	r0, [r7, #4]
 80082ae:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80082b0:	2300      	movs	r3, #0
}
 80082b2:	4618      	mov	r0, r3
 80082b4:	3708      	adds	r7, #8
 80082b6:	46bd      	mov	sp, r7
 80082b8:	bd80      	pop	{r7, pc}

080082ba <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80082ba:	b480      	push	{r7}
 80082bc:	b083      	sub	sp, #12
 80082be:	af00      	add	r7, sp, #0
 80082c0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80082c2:	2300      	movs	r3, #0
}
 80082c4:	4618      	mov	r0, r3
 80082c6:	370c      	adds	r7, #12
 80082c8:	46bd      	mov	sp, r7
 80082ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ce:	4770      	bx	lr

080082d0 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80082d0:	b580      	push	{r7, lr}
 80082d2:	b084      	sub	sp, #16
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80082d8:	2300      	movs	r3, #0
 80082da:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	2201      	movs	r2, #1
 80082e0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d00e      	beq.n	800830c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80082f4:	685b      	ldr	r3, [r3, #4]
 80082f6:	687a      	ldr	r2, [r7, #4]
 80082f8:	6852      	ldr	r2, [r2, #4]
 80082fa:	b2d2      	uxtb	r2, r2
 80082fc:	4611      	mov	r1, r2
 80082fe:	6878      	ldr	r0, [r7, #4]
 8008300:	4798      	blx	r3
 8008302:	4603      	mov	r3, r0
 8008304:	2b00      	cmp	r3, #0
 8008306:	d001      	beq.n	800830c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8008308:	2303      	movs	r3, #3
 800830a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800830c:	7bfb      	ldrb	r3, [r7, #15]
}
 800830e:	4618      	mov	r0, r3
 8008310:	3710      	adds	r7, #16
 8008312:	46bd      	mov	sp, r7
 8008314:	bd80      	pop	{r7, pc}

08008316 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008316:	b480      	push	{r7}
 8008318:	b083      	sub	sp, #12
 800831a:	af00      	add	r7, sp, #0
 800831c:	6078      	str	r0, [r7, #4]
 800831e:	460b      	mov	r3, r1
 8008320:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008322:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008324:	4618      	mov	r0, r3
 8008326:	370c      	adds	r7, #12
 8008328:	46bd      	mov	sp, r7
 800832a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832e:	4770      	bx	lr

08008330 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008330:	b480      	push	{r7}
 8008332:	b083      	sub	sp, #12
 8008334:	af00      	add	r7, sp, #0
 8008336:	6078      	str	r0, [r7, #4]
 8008338:	460b      	mov	r3, r1
 800833a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800833c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800833e:	4618      	mov	r0, r3
 8008340:	370c      	adds	r7, #12
 8008342:	46bd      	mov	sp, r7
 8008344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008348:	4770      	bx	lr

0800834a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800834a:	b580      	push	{r7, lr}
 800834c:	b086      	sub	sp, #24
 800834e:	af00      	add	r7, sp, #0
 8008350:	6078      	str	r0, [r7, #4]
 8008352:	460b      	mov	r3, r1
 8008354:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800835e:	2300      	movs	r3, #0
 8008360:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	885b      	ldrh	r3, [r3, #2]
 8008366:	b29b      	uxth	r3, r3
 8008368:	68fa      	ldr	r2, [r7, #12]
 800836a:	7812      	ldrb	r2, [r2, #0]
 800836c:	4293      	cmp	r3, r2
 800836e:	d91f      	bls.n	80083b0 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	781b      	ldrb	r3, [r3, #0]
 8008374:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8008376:	e013      	b.n	80083a0 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8008378:	f107 030a 	add.w	r3, r7, #10
 800837c:	4619      	mov	r1, r3
 800837e:	6978      	ldr	r0, [r7, #20]
 8008380:	f000 f81b 	bl	80083ba <USBD_GetNextDesc>
 8008384:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008386:	697b      	ldr	r3, [r7, #20]
 8008388:	785b      	ldrb	r3, [r3, #1]
 800838a:	2b05      	cmp	r3, #5
 800838c:	d108      	bne.n	80083a0 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800838e:	697b      	ldr	r3, [r7, #20]
 8008390:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8008392:	693b      	ldr	r3, [r7, #16]
 8008394:	789b      	ldrb	r3, [r3, #2]
 8008396:	78fa      	ldrb	r2, [r7, #3]
 8008398:	429a      	cmp	r2, r3
 800839a:	d008      	beq.n	80083ae <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800839c:	2300      	movs	r3, #0
 800839e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	885b      	ldrh	r3, [r3, #2]
 80083a4:	b29a      	uxth	r2, r3
 80083a6:	897b      	ldrh	r3, [r7, #10]
 80083a8:	429a      	cmp	r2, r3
 80083aa:	d8e5      	bhi.n	8008378 <USBD_GetEpDesc+0x2e>
 80083ac:	e000      	b.n	80083b0 <USBD_GetEpDesc+0x66>
          break;
 80083ae:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80083b0:	693b      	ldr	r3, [r7, #16]
}
 80083b2:	4618      	mov	r0, r3
 80083b4:	3718      	adds	r7, #24
 80083b6:	46bd      	mov	sp, r7
 80083b8:	bd80      	pop	{r7, pc}

080083ba <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80083ba:	b480      	push	{r7}
 80083bc:	b085      	sub	sp, #20
 80083be:	af00      	add	r7, sp, #0
 80083c0:	6078      	str	r0, [r7, #4]
 80083c2:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80083c8:	683b      	ldr	r3, [r7, #0]
 80083ca:	881b      	ldrh	r3, [r3, #0]
 80083cc:	68fa      	ldr	r2, [r7, #12]
 80083ce:	7812      	ldrb	r2, [r2, #0]
 80083d0:	4413      	add	r3, r2
 80083d2:	b29a      	uxth	r2, r3
 80083d4:	683b      	ldr	r3, [r7, #0]
 80083d6:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	781b      	ldrb	r3, [r3, #0]
 80083dc:	461a      	mov	r2, r3
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	4413      	add	r3, r2
 80083e2:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80083e4:	68fb      	ldr	r3, [r7, #12]
}
 80083e6:	4618      	mov	r0, r3
 80083e8:	3714      	adds	r7, #20
 80083ea:	46bd      	mov	sp, r7
 80083ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f0:	4770      	bx	lr

080083f2 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80083f2:	b480      	push	{r7}
 80083f4:	b087      	sub	sp, #28
 80083f6:	af00      	add	r7, sp, #0
 80083f8:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80083fe:	697b      	ldr	r3, [r7, #20]
 8008400:	781b      	ldrb	r3, [r3, #0]
 8008402:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008404:	697b      	ldr	r3, [r7, #20]
 8008406:	3301      	adds	r3, #1
 8008408:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800840a:	697b      	ldr	r3, [r7, #20]
 800840c:	781b      	ldrb	r3, [r3, #0]
 800840e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008410:	8a3b      	ldrh	r3, [r7, #16]
 8008412:	021b      	lsls	r3, r3, #8
 8008414:	b21a      	sxth	r2, r3
 8008416:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800841a:	4313      	orrs	r3, r2
 800841c:	b21b      	sxth	r3, r3
 800841e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008420:	89fb      	ldrh	r3, [r7, #14]
}
 8008422:	4618      	mov	r0, r3
 8008424:	371c      	adds	r7, #28
 8008426:	46bd      	mov	sp, r7
 8008428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800842c:	4770      	bx	lr
	...

08008430 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008430:	b580      	push	{r7, lr}
 8008432:	b084      	sub	sp, #16
 8008434:	af00      	add	r7, sp, #0
 8008436:	6078      	str	r0, [r7, #4]
 8008438:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800843a:	2300      	movs	r3, #0
 800843c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800843e:	683b      	ldr	r3, [r7, #0]
 8008440:	781b      	ldrb	r3, [r3, #0]
 8008442:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008446:	2b40      	cmp	r3, #64	@ 0x40
 8008448:	d005      	beq.n	8008456 <USBD_StdDevReq+0x26>
 800844a:	2b40      	cmp	r3, #64	@ 0x40
 800844c:	d857      	bhi.n	80084fe <USBD_StdDevReq+0xce>
 800844e:	2b00      	cmp	r3, #0
 8008450:	d00f      	beq.n	8008472 <USBD_StdDevReq+0x42>
 8008452:	2b20      	cmp	r3, #32
 8008454:	d153      	bne.n	80084fe <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	32ae      	adds	r2, #174	@ 0xae
 8008460:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008464:	689b      	ldr	r3, [r3, #8]
 8008466:	6839      	ldr	r1, [r7, #0]
 8008468:	6878      	ldr	r0, [r7, #4]
 800846a:	4798      	blx	r3
 800846c:	4603      	mov	r3, r0
 800846e:	73fb      	strb	r3, [r7, #15]
      break;
 8008470:	e04a      	b.n	8008508 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008472:	683b      	ldr	r3, [r7, #0]
 8008474:	785b      	ldrb	r3, [r3, #1]
 8008476:	2b09      	cmp	r3, #9
 8008478:	d83b      	bhi.n	80084f2 <USBD_StdDevReq+0xc2>
 800847a:	a201      	add	r2, pc, #4	@ (adr r2, 8008480 <USBD_StdDevReq+0x50>)
 800847c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008480:	080084d5 	.word	0x080084d5
 8008484:	080084e9 	.word	0x080084e9
 8008488:	080084f3 	.word	0x080084f3
 800848c:	080084df 	.word	0x080084df
 8008490:	080084f3 	.word	0x080084f3
 8008494:	080084b3 	.word	0x080084b3
 8008498:	080084a9 	.word	0x080084a9
 800849c:	080084f3 	.word	0x080084f3
 80084a0:	080084cb 	.word	0x080084cb
 80084a4:	080084bd 	.word	0x080084bd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80084a8:	6839      	ldr	r1, [r7, #0]
 80084aa:	6878      	ldr	r0, [r7, #4]
 80084ac:	f000 fa3c 	bl	8008928 <USBD_GetDescriptor>
          break;
 80084b0:	e024      	b.n	80084fc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80084b2:	6839      	ldr	r1, [r7, #0]
 80084b4:	6878      	ldr	r0, [r7, #4]
 80084b6:	f000 fba1 	bl	8008bfc <USBD_SetAddress>
          break;
 80084ba:	e01f      	b.n	80084fc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80084bc:	6839      	ldr	r1, [r7, #0]
 80084be:	6878      	ldr	r0, [r7, #4]
 80084c0:	f000 fbe0 	bl	8008c84 <USBD_SetConfig>
 80084c4:	4603      	mov	r3, r0
 80084c6:	73fb      	strb	r3, [r7, #15]
          break;
 80084c8:	e018      	b.n	80084fc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80084ca:	6839      	ldr	r1, [r7, #0]
 80084cc:	6878      	ldr	r0, [r7, #4]
 80084ce:	f000 fc83 	bl	8008dd8 <USBD_GetConfig>
          break;
 80084d2:	e013      	b.n	80084fc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80084d4:	6839      	ldr	r1, [r7, #0]
 80084d6:	6878      	ldr	r0, [r7, #4]
 80084d8:	f000 fcb4 	bl	8008e44 <USBD_GetStatus>
          break;
 80084dc:	e00e      	b.n	80084fc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80084de:	6839      	ldr	r1, [r7, #0]
 80084e0:	6878      	ldr	r0, [r7, #4]
 80084e2:	f000 fce3 	bl	8008eac <USBD_SetFeature>
          break;
 80084e6:	e009      	b.n	80084fc <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80084e8:	6839      	ldr	r1, [r7, #0]
 80084ea:	6878      	ldr	r0, [r7, #4]
 80084ec:	f000 fd07 	bl	8008efe <USBD_ClrFeature>
          break;
 80084f0:	e004      	b.n	80084fc <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80084f2:	6839      	ldr	r1, [r7, #0]
 80084f4:	6878      	ldr	r0, [r7, #4]
 80084f6:	f000 fd5e 	bl	8008fb6 <USBD_CtlError>
          break;
 80084fa:	bf00      	nop
      }
      break;
 80084fc:	e004      	b.n	8008508 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80084fe:	6839      	ldr	r1, [r7, #0]
 8008500:	6878      	ldr	r0, [r7, #4]
 8008502:	f000 fd58 	bl	8008fb6 <USBD_CtlError>
      break;
 8008506:	bf00      	nop
  }

  return ret;
 8008508:	7bfb      	ldrb	r3, [r7, #15]
}
 800850a:	4618      	mov	r0, r3
 800850c:	3710      	adds	r7, #16
 800850e:	46bd      	mov	sp, r7
 8008510:	bd80      	pop	{r7, pc}
 8008512:	bf00      	nop

08008514 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008514:	b580      	push	{r7, lr}
 8008516:	b084      	sub	sp, #16
 8008518:	af00      	add	r7, sp, #0
 800851a:	6078      	str	r0, [r7, #4]
 800851c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800851e:	2300      	movs	r3, #0
 8008520:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008522:	683b      	ldr	r3, [r7, #0]
 8008524:	781b      	ldrb	r3, [r3, #0]
 8008526:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800852a:	2b40      	cmp	r3, #64	@ 0x40
 800852c:	d005      	beq.n	800853a <USBD_StdItfReq+0x26>
 800852e:	2b40      	cmp	r3, #64	@ 0x40
 8008530:	d852      	bhi.n	80085d8 <USBD_StdItfReq+0xc4>
 8008532:	2b00      	cmp	r3, #0
 8008534:	d001      	beq.n	800853a <USBD_StdItfReq+0x26>
 8008536:	2b20      	cmp	r3, #32
 8008538:	d14e      	bne.n	80085d8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008540:	b2db      	uxtb	r3, r3
 8008542:	3b01      	subs	r3, #1
 8008544:	2b02      	cmp	r3, #2
 8008546:	d840      	bhi.n	80085ca <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008548:	683b      	ldr	r3, [r7, #0]
 800854a:	889b      	ldrh	r3, [r3, #4]
 800854c:	b2db      	uxtb	r3, r3
 800854e:	2b01      	cmp	r3, #1
 8008550:	d836      	bhi.n	80085c0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8008552:	683b      	ldr	r3, [r7, #0]
 8008554:	889b      	ldrh	r3, [r3, #4]
 8008556:	b2db      	uxtb	r3, r3
 8008558:	4619      	mov	r1, r3
 800855a:	6878      	ldr	r0, [r7, #4]
 800855c:	f7ff fedb 	bl	8008316 <USBD_CoreFindIF>
 8008560:	4603      	mov	r3, r0
 8008562:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008564:	7bbb      	ldrb	r3, [r7, #14]
 8008566:	2bff      	cmp	r3, #255	@ 0xff
 8008568:	d01d      	beq.n	80085a6 <USBD_StdItfReq+0x92>
 800856a:	7bbb      	ldrb	r3, [r7, #14]
 800856c:	2b00      	cmp	r3, #0
 800856e:	d11a      	bne.n	80085a6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8008570:	7bba      	ldrb	r2, [r7, #14]
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	32ae      	adds	r2, #174	@ 0xae
 8008576:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800857a:	689b      	ldr	r3, [r3, #8]
 800857c:	2b00      	cmp	r3, #0
 800857e:	d00f      	beq.n	80085a0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8008580:	7bba      	ldrb	r2, [r7, #14]
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008588:	7bba      	ldrb	r2, [r7, #14]
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	32ae      	adds	r2, #174	@ 0xae
 800858e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008592:	689b      	ldr	r3, [r3, #8]
 8008594:	6839      	ldr	r1, [r7, #0]
 8008596:	6878      	ldr	r0, [r7, #4]
 8008598:	4798      	blx	r3
 800859a:	4603      	mov	r3, r0
 800859c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800859e:	e004      	b.n	80085aa <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80085a0:	2303      	movs	r3, #3
 80085a2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80085a4:	e001      	b.n	80085aa <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80085a6:	2303      	movs	r3, #3
 80085a8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80085aa:	683b      	ldr	r3, [r7, #0]
 80085ac:	88db      	ldrh	r3, [r3, #6]
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d110      	bne.n	80085d4 <USBD_StdItfReq+0xc0>
 80085b2:	7bfb      	ldrb	r3, [r7, #15]
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d10d      	bne.n	80085d4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80085b8:	6878      	ldr	r0, [r7, #4]
 80085ba:	f000 fdc7 	bl	800914c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80085be:	e009      	b.n	80085d4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80085c0:	6839      	ldr	r1, [r7, #0]
 80085c2:	6878      	ldr	r0, [r7, #4]
 80085c4:	f000 fcf7 	bl	8008fb6 <USBD_CtlError>
          break;
 80085c8:	e004      	b.n	80085d4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80085ca:	6839      	ldr	r1, [r7, #0]
 80085cc:	6878      	ldr	r0, [r7, #4]
 80085ce:	f000 fcf2 	bl	8008fb6 <USBD_CtlError>
          break;
 80085d2:	e000      	b.n	80085d6 <USBD_StdItfReq+0xc2>
          break;
 80085d4:	bf00      	nop
      }
      break;
 80085d6:	e004      	b.n	80085e2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80085d8:	6839      	ldr	r1, [r7, #0]
 80085da:	6878      	ldr	r0, [r7, #4]
 80085dc:	f000 fceb 	bl	8008fb6 <USBD_CtlError>
      break;
 80085e0:	bf00      	nop
  }

  return ret;
 80085e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80085e4:	4618      	mov	r0, r3
 80085e6:	3710      	adds	r7, #16
 80085e8:	46bd      	mov	sp, r7
 80085ea:	bd80      	pop	{r7, pc}

080085ec <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80085ec:	b580      	push	{r7, lr}
 80085ee:	b084      	sub	sp, #16
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	6078      	str	r0, [r7, #4]
 80085f4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80085f6:	2300      	movs	r3, #0
 80085f8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80085fa:	683b      	ldr	r3, [r7, #0]
 80085fc:	889b      	ldrh	r3, [r3, #4]
 80085fe:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008600:	683b      	ldr	r3, [r7, #0]
 8008602:	781b      	ldrb	r3, [r3, #0]
 8008604:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008608:	2b40      	cmp	r3, #64	@ 0x40
 800860a:	d007      	beq.n	800861c <USBD_StdEPReq+0x30>
 800860c:	2b40      	cmp	r3, #64	@ 0x40
 800860e:	f200 817f 	bhi.w	8008910 <USBD_StdEPReq+0x324>
 8008612:	2b00      	cmp	r3, #0
 8008614:	d02a      	beq.n	800866c <USBD_StdEPReq+0x80>
 8008616:	2b20      	cmp	r3, #32
 8008618:	f040 817a 	bne.w	8008910 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800861c:	7bbb      	ldrb	r3, [r7, #14]
 800861e:	4619      	mov	r1, r3
 8008620:	6878      	ldr	r0, [r7, #4]
 8008622:	f7ff fe85 	bl	8008330 <USBD_CoreFindEP>
 8008626:	4603      	mov	r3, r0
 8008628:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800862a:	7b7b      	ldrb	r3, [r7, #13]
 800862c:	2bff      	cmp	r3, #255	@ 0xff
 800862e:	f000 8174 	beq.w	800891a <USBD_StdEPReq+0x32e>
 8008632:	7b7b      	ldrb	r3, [r7, #13]
 8008634:	2b00      	cmp	r3, #0
 8008636:	f040 8170 	bne.w	800891a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800863a:	7b7a      	ldrb	r2, [r7, #13]
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8008642:	7b7a      	ldrb	r2, [r7, #13]
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	32ae      	adds	r2, #174	@ 0xae
 8008648:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800864c:	689b      	ldr	r3, [r3, #8]
 800864e:	2b00      	cmp	r3, #0
 8008650:	f000 8163 	beq.w	800891a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8008654:	7b7a      	ldrb	r2, [r7, #13]
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	32ae      	adds	r2, #174	@ 0xae
 800865a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800865e:	689b      	ldr	r3, [r3, #8]
 8008660:	6839      	ldr	r1, [r7, #0]
 8008662:	6878      	ldr	r0, [r7, #4]
 8008664:	4798      	blx	r3
 8008666:	4603      	mov	r3, r0
 8008668:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800866a:	e156      	b.n	800891a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800866c:	683b      	ldr	r3, [r7, #0]
 800866e:	785b      	ldrb	r3, [r3, #1]
 8008670:	2b03      	cmp	r3, #3
 8008672:	d008      	beq.n	8008686 <USBD_StdEPReq+0x9a>
 8008674:	2b03      	cmp	r3, #3
 8008676:	f300 8145 	bgt.w	8008904 <USBD_StdEPReq+0x318>
 800867a:	2b00      	cmp	r3, #0
 800867c:	f000 809b 	beq.w	80087b6 <USBD_StdEPReq+0x1ca>
 8008680:	2b01      	cmp	r3, #1
 8008682:	d03c      	beq.n	80086fe <USBD_StdEPReq+0x112>
 8008684:	e13e      	b.n	8008904 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800868c:	b2db      	uxtb	r3, r3
 800868e:	2b02      	cmp	r3, #2
 8008690:	d002      	beq.n	8008698 <USBD_StdEPReq+0xac>
 8008692:	2b03      	cmp	r3, #3
 8008694:	d016      	beq.n	80086c4 <USBD_StdEPReq+0xd8>
 8008696:	e02c      	b.n	80086f2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008698:	7bbb      	ldrb	r3, [r7, #14]
 800869a:	2b00      	cmp	r3, #0
 800869c:	d00d      	beq.n	80086ba <USBD_StdEPReq+0xce>
 800869e:	7bbb      	ldrb	r3, [r7, #14]
 80086a0:	2b80      	cmp	r3, #128	@ 0x80
 80086a2:	d00a      	beq.n	80086ba <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80086a4:	7bbb      	ldrb	r3, [r7, #14]
 80086a6:	4619      	mov	r1, r3
 80086a8:	6878      	ldr	r0, [r7, #4]
 80086aa:	f001 f99d 	bl	80099e8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80086ae:	2180      	movs	r1, #128	@ 0x80
 80086b0:	6878      	ldr	r0, [r7, #4]
 80086b2:	f001 f999 	bl	80099e8 <USBD_LL_StallEP>
 80086b6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80086b8:	e020      	b.n	80086fc <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80086ba:	6839      	ldr	r1, [r7, #0]
 80086bc:	6878      	ldr	r0, [r7, #4]
 80086be:	f000 fc7a 	bl	8008fb6 <USBD_CtlError>
              break;
 80086c2:	e01b      	b.n	80086fc <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80086c4:	683b      	ldr	r3, [r7, #0]
 80086c6:	885b      	ldrh	r3, [r3, #2]
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d10e      	bne.n	80086ea <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80086cc:	7bbb      	ldrb	r3, [r7, #14]
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d00b      	beq.n	80086ea <USBD_StdEPReq+0xfe>
 80086d2:	7bbb      	ldrb	r3, [r7, #14]
 80086d4:	2b80      	cmp	r3, #128	@ 0x80
 80086d6:	d008      	beq.n	80086ea <USBD_StdEPReq+0xfe>
 80086d8:	683b      	ldr	r3, [r7, #0]
 80086da:	88db      	ldrh	r3, [r3, #6]
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d104      	bne.n	80086ea <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80086e0:	7bbb      	ldrb	r3, [r7, #14]
 80086e2:	4619      	mov	r1, r3
 80086e4:	6878      	ldr	r0, [r7, #4]
 80086e6:	f001 f97f 	bl	80099e8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80086ea:	6878      	ldr	r0, [r7, #4]
 80086ec:	f000 fd2e 	bl	800914c <USBD_CtlSendStatus>

              break;
 80086f0:	e004      	b.n	80086fc <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80086f2:	6839      	ldr	r1, [r7, #0]
 80086f4:	6878      	ldr	r0, [r7, #4]
 80086f6:	f000 fc5e 	bl	8008fb6 <USBD_CtlError>
              break;
 80086fa:	bf00      	nop
          }
          break;
 80086fc:	e107      	b.n	800890e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008704:	b2db      	uxtb	r3, r3
 8008706:	2b02      	cmp	r3, #2
 8008708:	d002      	beq.n	8008710 <USBD_StdEPReq+0x124>
 800870a:	2b03      	cmp	r3, #3
 800870c:	d016      	beq.n	800873c <USBD_StdEPReq+0x150>
 800870e:	e04b      	b.n	80087a8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008710:	7bbb      	ldrb	r3, [r7, #14]
 8008712:	2b00      	cmp	r3, #0
 8008714:	d00d      	beq.n	8008732 <USBD_StdEPReq+0x146>
 8008716:	7bbb      	ldrb	r3, [r7, #14]
 8008718:	2b80      	cmp	r3, #128	@ 0x80
 800871a:	d00a      	beq.n	8008732 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800871c:	7bbb      	ldrb	r3, [r7, #14]
 800871e:	4619      	mov	r1, r3
 8008720:	6878      	ldr	r0, [r7, #4]
 8008722:	f001 f961 	bl	80099e8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008726:	2180      	movs	r1, #128	@ 0x80
 8008728:	6878      	ldr	r0, [r7, #4]
 800872a:	f001 f95d 	bl	80099e8 <USBD_LL_StallEP>
 800872e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008730:	e040      	b.n	80087b4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8008732:	6839      	ldr	r1, [r7, #0]
 8008734:	6878      	ldr	r0, [r7, #4]
 8008736:	f000 fc3e 	bl	8008fb6 <USBD_CtlError>
              break;
 800873a:	e03b      	b.n	80087b4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800873c:	683b      	ldr	r3, [r7, #0]
 800873e:	885b      	ldrh	r3, [r3, #2]
 8008740:	2b00      	cmp	r3, #0
 8008742:	d136      	bne.n	80087b2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008744:	7bbb      	ldrb	r3, [r7, #14]
 8008746:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800874a:	2b00      	cmp	r3, #0
 800874c:	d004      	beq.n	8008758 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800874e:	7bbb      	ldrb	r3, [r7, #14]
 8008750:	4619      	mov	r1, r3
 8008752:	6878      	ldr	r0, [r7, #4]
 8008754:	f001 f967 	bl	8009a26 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008758:	6878      	ldr	r0, [r7, #4]
 800875a:	f000 fcf7 	bl	800914c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800875e:	7bbb      	ldrb	r3, [r7, #14]
 8008760:	4619      	mov	r1, r3
 8008762:	6878      	ldr	r0, [r7, #4]
 8008764:	f7ff fde4 	bl	8008330 <USBD_CoreFindEP>
 8008768:	4603      	mov	r3, r0
 800876a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800876c:	7b7b      	ldrb	r3, [r7, #13]
 800876e:	2bff      	cmp	r3, #255	@ 0xff
 8008770:	d01f      	beq.n	80087b2 <USBD_StdEPReq+0x1c6>
 8008772:	7b7b      	ldrb	r3, [r7, #13]
 8008774:	2b00      	cmp	r3, #0
 8008776:	d11c      	bne.n	80087b2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8008778:	7b7a      	ldrb	r2, [r7, #13]
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8008780:	7b7a      	ldrb	r2, [r7, #13]
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	32ae      	adds	r2, #174	@ 0xae
 8008786:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800878a:	689b      	ldr	r3, [r3, #8]
 800878c:	2b00      	cmp	r3, #0
 800878e:	d010      	beq.n	80087b2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008790:	7b7a      	ldrb	r2, [r7, #13]
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	32ae      	adds	r2, #174	@ 0xae
 8008796:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800879a:	689b      	ldr	r3, [r3, #8]
 800879c:	6839      	ldr	r1, [r7, #0]
 800879e:	6878      	ldr	r0, [r7, #4]
 80087a0:	4798      	blx	r3
 80087a2:	4603      	mov	r3, r0
 80087a4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80087a6:	e004      	b.n	80087b2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80087a8:	6839      	ldr	r1, [r7, #0]
 80087aa:	6878      	ldr	r0, [r7, #4]
 80087ac:	f000 fc03 	bl	8008fb6 <USBD_CtlError>
              break;
 80087b0:	e000      	b.n	80087b4 <USBD_StdEPReq+0x1c8>
              break;
 80087b2:	bf00      	nop
          }
          break;
 80087b4:	e0ab      	b.n	800890e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80087bc:	b2db      	uxtb	r3, r3
 80087be:	2b02      	cmp	r3, #2
 80087c0:	d002      	beq.n	80087c8 <USBD_StdEPReq+0x1dc>
 80087c2:	2b03      	cmp	r3, #3
 80087c4:	d032      	beq.n	800882c <USBD_StdEPReq+0x240>
 80087c6:	e097      	b.n	80088f8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80087c8:	7bbb      	ldrb	r3, [r7, #14]
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d007      	beq.n	80087de <USBD_StdEPReq+0x1f2>
 80087ce:	7bbb      	ldrb	r3, [r7, #14]
 80087d0:	2b80      	cmp	r3, #128	@ 0x80
 80087d2:	d004      	beq.n	80087de <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80087d4:	6839      	ldr	r1, [r7, #0]
 80087d6:	6878      	ldr	r0, [r7, #4]
 80087d8:	f000 fbed 	bl	8008fb6 <USBD_CtlError>
                break;
 80087dc:	e091      	b.n	8008902 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80087de:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	da0b      	bge.n	80087fe <USBD_StdEPReq+0x212>
 80087e6:	7bbb      	ldrb	r3, [r7, #14]
 80087e8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80087ec:	4613      	mov	r3, r2
 80087ee:	009b      	lsls	r3, r3, #2
 80087f0:	4413      	add	r3, r2
 80087f2:	009b      	lsls	r3, r3, #2
 80087f4:	3310      	adds	r3, #16
 80087f6:	687a      	ldr	r2, [r7, #4]
 80087f8:	4413      	add	r3, r2
 80087fa:	3304      	adds	r3, #4
 80087fc:	e00b      	b.n	8008816 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80087fe:	7bbb      	ldrb	r3, [r7, #14]
 8008800:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008804:	4613      	mov	r3, r2
 8008806:	009b      	lsls	r3, r3, #2
 8008808:	4413      	add	r3, r2
 800880a:	009b      	lsls	r3, r3, #2
 800880c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008810:	687a      	ldr	r2, [r7, #4]
 8008812:	4413      	add	r3, r2
 8008814:	3304      	adds	r3, #4
 8008816:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008818:	68bb      	ldr	r3, [r7, #8]
 800881a:	2200      	movs	r2, #0
 800881c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800881e:	68bb      	ldr	r3, [r7, #8]
 8008820:	2202      	movs	r2, #2
 8008822:	4619      	mov	r1, r3
 8008824:	6878      	ldr	r0, [r7, #4]
 8008826:	f000 fc37 	bl	8009098 <USBD_CtlSendData>
              break;
 800882a:	e06a      	b.n	8008902 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800882c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008830:	2b00      	cmp	r3, #0
 8008832:	da11      	bge.n	8008858 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008834:	7bbb      	ldrb	r3, [r7, #14]
 8008836:	f003 020f 	and.w	r2, r3, #15
 800883a:	6879      	ldr	r1, [r7, #4]
 800883c:	4613      	mov	r3, r2
 800883e:	009b      	lsls	r3, r3, #2
 8008840:	4413      	add	r3, r2
 8008842:	009b      	lsls	r3, r3, #2
 8008844:	440b      	add	r3, r1
 8008846:	3324      	adds	r3, #36	@ 0x24
 8008848:	881b      	ldrh	r3, [r3, #0]
 800884a:	2b00      	cmp	r3, #0
 800884c:	d117      	bne.n	800887e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800884e:	6839      	ldr	r1, [r7, #0]
 8008850:	6878      	ldr	r0, [r7, #4]
 8008852:	f000 fbb0 	bl	8008fb6 <USBD_CtlError>
                  break;
 8008856:	e054      	b.n	8008902 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008858:	7bbb      	ldrb	r3, [r7, #14]
 800885a:	f003 020f 	and.w	r2, r3, #15
 800885e:	6879      	ldr	r1, [r7, #4]
 8008860:	4613      	mov	r3, r2
 8008862:	009b      	lsls	r3, r3, #2
 8008864:	4413      	add	r3, r2
 8008866:	009b      	lsls	r3, r3, #2
 8008868:	440b      	add	r3, r1
 800886a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800886e:	881b      	ldrh	r3, [r3, #0]
 8008870:	2b00      	cmp	r3, #0
 8008872:	d104      	bne.n	800887e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008874:	6839      	ldr	r1, [r7, #0]
 8008876:	6878      	ldr	r0, [r7, #4]
 8008878:	f000 fb9d 	bl	8008fb6 <USBD_CtlError>
                  break;
 800887c:	e041      	b.n	8008902 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800887e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008882:	2b00      	cmp	r3, #0
 8008884:	da0b      	bge.n	800889e <USBD_StdEPReq+0x2b2>
 8008886:	7bbb      	ldrb	r3, [r7, #14]
 8008888:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800888c:	4613      	mov	r3, r2
 800888e:	009b      	lsls	r3, r3, #2
 8008890:	4413      	add	r3, r2
 8008892:	009b      	lsls	r3, r3, #2
 8008894:	3310      	adds	r3, #16
 8008896:	687a      	ldr	r2, [r7, #4]
 8008898:	4413      	add	r3, r2
 800889a:	3304      	adds	r3, #4
 800889c:	e00b      	b.n	80088b6 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800889e:	7bbb      	ldrb	r3, [r7, #14]
 80088a0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80088a4:	4613      	mov	r3, r2
 80088a6:	009b      	lsls	r3, r3, #2
 80088a8:	4413      	add	r3, r2
 80088aa:	009b      	lsls	r3, r3, #2
 80088ac:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80088b0:	687a      	ldr	r2, [r7, #4]
 80088b2:	4413      	add	r3, r2
 80088b4:	3304      	adds	r3, #4
 80088b6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80088b8:	7bbb      	ldrb	r3, [r7, #14]
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d002      	beq.n	80088c4 <USBD_StdEPReq+0x2d8>
 80088be:	7bbb      	ldrb	r3, [r7, #14]
 80088c0:	2b80      	cmp	r3, #128	@ 0x80
 80088c2:	d103      	bne.n	80088cc <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80088c4:	68bb      	ldr	r3, [r7, #8]
 80088c6:	2200      	movs	r2, #0
 80088c8:	601a      	str	r2, [r3, #0]
 80088ca:	e00e      	b.n	80088ea <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80088cc:	7bbb      	ldrb	r3, [r7, #14]
 80088ce:	4619      	mov	r1, r3
 80088d0:	6878      	ldr	r0, [r7, #4]
 80088d2:	f001 f8c7 	bl	8009a64 <USBD_LL_IsStallEP>
 80088d6:	4603      	mov	r3, r0
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d003      	beq.n	80088e4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80088dc:	68bb      	ldr	r3, [r7, #8]
 80088de:	2201      	movs	r2, #1
 80088e0:	601a      	str	r2, [r3, #0]
 80088e2:	e002      	b.n	80088ea <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80088e4:	68bb      	ldr	r3, [r7, #8]
 80088e6:	2200      	movs	r2, #0
 80088e8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80088ea:	68bb      	ldr	r3, [r7, #8]
 80088ec:	2202      	movs	r2, #2
 80088ee:	4619      	mov	r1, r3
 80088f0:	6878      	ldr	r0, [r7, #4]
 80088f2:	f000 fbd1 	bl	8009098 <USBD_CtlSendData>
              break;
 80088f6:	e004      	b.n	8008902 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80088f8:	6839      	ldr	r1, [r7, #0]
 80088fa:	6878      	ldr	r0, [r7, #4]
 80088fc:	f000 fb5b 	bl	8008fb6 <USBD_CtlError>
              break;
 8008900:	bf00      	nop
          }
          break;
 8008902:	e004      	b.n	800890e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8008904:	6839      	ldr	r1, [r7, #0]
 8008906:	6878      	ldr	r0, [r7, #4]
 8008908:	f000 fb55 	bl	8008fb6 <USBD_CtlError>
          break;
 800890c:	bf00      	nop
      }
      break;
 800890e:	e005      	b.n	800891c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8008910:	6839      	ldr	r1, [r7, #0]
 8008912:	6878      	ldr	r0, [r7, #4]
 8008914:	f000 fb4f 	bl	8008fb6 <USBD_CtlError>
      break;
 8008918:	e000      	b.n	800891c <USBD_StdEPReq+0x330>
      break;
 800891a:	bf00      	nop
  }

  return ret;
 800891c:	7bfb      	ldrb	r3, [r7, #15]
}
 800891e:	4618      	mov	r0, r3
 8008920:	3710      	adds	r7, #16
 8008922:	46bd      	mov	sp, r7
 8008924:	bd80      	pop	{r7, pc}
	...

08008928 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008928:	b580      	push	{r7, lr}
 800892a:	b084      	sub	sp, #16
 800892c:	af00      	add	r7, sp, #0
 800892e:	6078      	str	r0, [r7, #4]
 8008930:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008932:	2300      	movs	r3, #0
 8008934:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008936:	2300      	movs	r3, #0
 8008938:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800893a:	2300      	movs	r3, #0
 800893c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800893e:	683b      	ldr	r3, [r7, #0]
 8008940:	885b      	ldrh	r3, [r3, #2]
 8008942:	0a1b      	lsrs	r3, r3, #8
 8008944:	b29b      	uxth	r3, r3
 8008946:	3b01      	subs	r3, #1
 8008948:	2b06      	cmp	r3, #6
 800894a:	f200 8128 	bhi.w	8008b9e <USBD_GetDescriptor+0x276>
 800894e:	a201      	add	r2, pc, #4	@ (adr r2, 8008954 <USBD_GetDescriptor+0x2c>)
 8008950:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008954:	08008971 	.word	0x08008971
 8008958:	08008989 	.word	0x08008989
 800895c:	080089c9 	.word	0x080089c9
 8008960:	08008b9f 	.word	0x08008b9f
 8008964:	08008b9f 	.word	0x08008b9f
 8008968:	08008b3f 	.word	0x08008b3f
 800896c:	08008b6b 	.word	0x08008b6b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	687a      	ldr	r2, [r7, #4]
 800897a:	7c12      	ldrb	r2, [r2, #16]
 800897c:	f107 0108 	add.w	r1, r7, #8
 8008980:	4610      	mov	r0, r2
 8008982:	4798      	blx	r3
 8008984:	60f8      	str	r0, [r7, #12]
      break;
 8008986:	e112      	b.n	8008bae <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	7c1b      	ldrb	r3, [r3, #16]
 800898c:	2b00      	cmp	r3, #0
 800898e:	d10d      	bne.n	80089ac <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008996:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008998:	f107 0208 	add.w	r2, r7, #8
 800899c:	4610      	mov	r0, r2
 800899e:	4798      	blx	r3
 80089a0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	3301      	adds	r3, #1
 80089a6:	2202      	movs	r2, #2
 80089a8:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80089aa:	e100      	b.n	8008bae <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80089b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089b4:	f107 0208 	add.w	r2, r7, #8
 80089b8:	4610      	mov	r0, r2
 80089ba:	4798      	blx	r3
 80089bc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	3301      	adds	r3, #1
 80089c2:	2202      	movs	r2, #2
 80089c4:	701a      	strb	r2, [r3, #0]
      break;
 80089c6:	e0f2      	b.n	8008bae <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80089c8:	683b      	ldr	r3, [r7, #0]
 80089ca:	885b      	ldrh	r3, [r3, #2]
 80089cc:	b2db      	uxtb	r3, r3
 80089ce:	2b05      	cmp	r3, #5
 80089d0:	f200 80ac 	bhi.w	8008b2c <USBD_GetDescriptor+0x204>
 80089d4:	a201      	add	r2, pc, #4	@ (adr r2, 80089dc <USBD_GetDescriptor+0xb4>)
 80089d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089da:	bf00      	nop
 80089dc:	080089f5 	.word	0x080089f5
 80089e0:	08008a29 	.word	0x08008a29
 80089e4:	08008a5d 	.word	0x08008a5d
 80089e8:	08008a91 	.word	0x08008a91
 80089ec:	08008ac5 	.word	0x08008ac5
 80089f0:	08008af9 	.word	0x08008af9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80089fa:	685b      	ldr	r3, [r3, #4]
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d00b      	beq.n	8008a18 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008a06:	685b      	ldr	r3, [r3, #4]
 8008a08:	687a      	ldr	r2, [r7, #4]
 8008a0a:	7c12      	ldrb	r2, [r2, #16]
 8008a0c:	f107 0108 	add.w	r1, r7, #8
 8008a10:	4610      	mov	r0, r2
 8008a12:	4798      	blx	r3
 8008a14:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008a16:	e091      	b.n	8008b3c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008a18:	6839      	ldr	r1, [r7, #0]
 8008a1a:	6878      	ldr	r0, [r7, #4]
 8008a1c:	f000 facb 	bl	8008fb6 <USBD_CtlError>
            err++;
 8008a20:	7afb      	ldrb	r3, [r7, #11]
 8008a22:	3301      	adds	r3, #1
 8008a24:	72fb      	strb	r3, [r7, #11]
          break;
 8008a26:	e089      	b.n	8008b3c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008a2e:	689b      	ldr	r3, [r3, #8]
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d00b      	beq.n	8008a4c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008a3a:	689b      	ldr	r3, [r3, #8]
 8008a3c:	687a      	ldr	r2, [r7, #4]
 8008a3e:	7c12      	ldrb	r2, [r2, #16]
 8008a40:	f107 0108 	add.w	r1, r7, #8
 8008a44:	4610      	mov	r0, r2
 8008a46:	4798      	blx	r3
 8008a48:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008a4a:	e077      	b.n	8008b3c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008a4c:	6839      	ldr	r1, [r7, #0]
 8008a4e:	6878      	ldr	r0, [r7, #4]
 8008a50:	f000 fab1 	bl	8008fb6 <USBD_CtlError>
            err++;
 8008a54:	7afb      	ldrb	r3, [r7, #11]
 8008a56:	3301      	adds	r3, #1
 8008a58:	72fb      	strb	r3, [r7, #11]
          break;
 8008a5a:	e06f      	b.n	8008b3c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008a62:	68db      	ldr	r3, [r3, #12]
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d00b      	beq.n	8008a80 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008a6e:	68db      	ldr	r3, [r3, #12]
 8008a70:	687a      	ldr	r2, [r7, #4]
 8008a72:	7c12      	ldrb	r2, [r2, #16]
 8008a74:	f107 0108 	add.w	r1, r7, #8
 8008a78:	4610      	mov	r0, r2
 8008a7a:	4798      	blx	r3
 8008a7c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008a7e:	e05d      	b.n	8008b3c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008a80:	6839      	ldr	r1, [r7, #0]
 8008a82:	6878      	ldr	r0, [r7, #4]
 8008a84:	f000 fa97 	bl	8008fb6 <USBD_CtlError>
            err++;
 8008a88:	7afb      	ldrb	r3, [r7, #11]
 8008a8a:	3301      	adds	r3, #1
 8008a8c:	72fb      	strb	r3, [r7, #11]
          break;
 8008a8e:	e055      	b.n	8008b3c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008a96:	691b      	ldr	r3, [r3, #16]
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d00b      	beq.n	8008ab4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008aa2:	691b      	ldr	r3, [r3, #16]
 8008aa4:	687a      	ldr	r2, [r7, #4]
 8008aa6:	7c12      	ldrb	r2, [r2, #16]
 8008aa8:	f107 0108 	add.w	r1, r7, #8
 8008aac:	4610      	mov	r0, r2
 8008aae:	4798      	blx	r3
 8008ab0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008ab2:	e043      	b.n	8008b3c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008ab4:	6839      	ldr	r1, [r7, #0]
 8008ab6:	6878      	ldr	r0, [r7, #4]
 8008ab8:	f000 fa7d 	bl	8008fb6 <USBD_CtlError>
            err++;
 8008abc:	7afb      	ldrb	r3, [r7, #11]
 8008abe:	3301      	adds	r3, #1
 8008ac0:	72fb      	strb	r3, [r7, #11]
          break;
 8008ac2:	e03b      	b.n	8008b3c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008aca:	695b      	ldr	r3, [r3, #20]
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d00b      	beq.n	8008ae8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008ad6:	695b      	ldr	r3, [r3, #20]
 8008ad8:	687a      	ldr	r2, [r7, #4]
 8008ada:	7c12      	ldrb	r2, [r2, #16]
 8008adc:	f107 0108 	add.w	r1, r7, #8
 8008ae0:	4610      	mov	r0, r2
 8008ae2:	4798      	blx	r3
 8008ae4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008ae6:	e029      	b.n	8008b3c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008ae8:	6839      	ldr	r1, [r7, #0]
 8008aea:	6878      	ldr	r0, [r7, #4]
 8008aec:	f000 fa63 	bl	8008fb6 <USBD_CtlError>
            err++;
 8008af0:	7afb      	ldrb	r3, [r7, #11]
 8008af2:	3301      	adds	r3, #1
 8008af4:	72fb      	strb	r3, [r7, #11]
          break;
 8008af6:	e021      	b.n	8008b3c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008afe:	699b      	ldr	r3, [r3, #24]
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d00b      	beq.n	8008b1c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008b0a:	699b      	ldr	r3, [r3, #24]
 8008b0c:	687a      	ldr	r2, [r7, #4]
 8008b0e:	7c12      	ldrb	r2, [r2, #16]
 8008b10:	f107 0108 	add.w	r1, r7, #8
 8008b14:	4610      	mov	r0, r2
 8008b16:	4798      	blx	r3
 8008b18:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008b1a:	e00f      	b.n	8008b3c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008b1c:	6839      	ldr	r1, [r7, #0]
 8008b1e:	6878      	ldr	r0, [r7, #4]
 8008b20:	f000 fa49 	bl	8008fb6 <USBD_CtlError>
            err++;
 8008b24:	7afb      	ldrb	r3, [r7, #11]
 8008b26:	3301      	adds	r3, #1
 8008b28:	72fb      	strb	r3, [r7, #11]
          break;
 8008b2a:	e007      	b.n	8008b3c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008b2c:	6839      	ldr	r1, [r7, #0]
 8008b2e:	6878      	ldr	r0, [r7, #4]
 8008b30:	f000 fa41 	bl	8008fb6 <USBD_CtlError>
          err++;
 8008b34:	7afb      	ldrb	r3, [r7, #11]
 8008b36:	3301      	adds	r3, #1
 8008b38:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8008b3a:	bf00      	nop
      }
      break;
 8008b3c:	e037      	b.n	8008bae <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	7c1b      	ldrb	r3, [r3, #16]
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d109      	bne.n	8008b5a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008b4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008b4e:	f107 0208 	add.w	r2, r7, #8
 8008b52:	4610      	mov	r0, r2
 8008b54:	4798      	blx	r3
 8008b56:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008b58:	e029      	b.n	8008bae <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008b5a:	6839      	ldr	r1, [r7, #0]
 8008b5c:	6878      	ldr	r0, [r7, #4]
 8008b5e:	f000 fa2a 	bl	8008fb6 <USBD_CtlError>
        err++;
 8008b62:	7afb      	ldrb	r3, [r7, #11]
 8008b64:	3301      	adds	r3, #1
 8008b66:	72fb      	strb	r3, [r7, #11]
      break;
 8008b68:	e021      	b.n	8008bae <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	7c1b      	ldrb	r3, [r3, #16]
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d10d      	bne.n	8008b8e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008b78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b7a:	f107 0208 	add.w	r2, r7, #8
 8008b7e:	4610      	mov	r0, r2
 8008b80:	4798      	blx	r3
 8008b82:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	3301      	adds	r3, #1
 8008b88:	2207      	movs	r2, #7
 8008b8a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008b8c:	e00f      	b.n	8008bae <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008b8e:	6839      	ldr	r1, [r7, #0]
 8008b90:	6878      	ldr	r0, [r7, #4]
 8008b92:	f000 fa10 	bl	8008fb6 <USBD_CtlError>
        err++;
 8008b96:	7afb      	ldrb	r3, [r7, #11]
 8008b98:	3301      	adds	r3, #1
 8008b9a:	72fb      	strb	r3, [r7, #11]
      break;
 8008b9c:	e007      	b.n	8008bae <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008b9e:	6839      	ldr	r1, [r7, #0]
 8008ba0:	6878      	ldr	r0, [r7, #4]
 8008ba2:	f000 fa08 	bl	8008fb6 <USBD_CtlError>
      err++;
 8008ba6:	7afb      	ldrb	r3, [r7, #11]
 8008ba8:	3301      	adds	r3, #1
 8008baa:	72fb      	strb	r3, [r7, #11]
      break;
 8008bac:	bf00      	nop
  }

  if (err != 0U)
 8008bae:	7afb      	ldrb	r3, [r7, #11]
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d11e      	bne.n	8008bf2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8008bb4:	683b      	ldr	r3, [r7, #0]
 8008bb6:	88db      	ldrh	r3, [r3, #6]
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d016      	beq.n	8008bea <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8008bbc:	893b      	ldrh	r3, [r7, #8]
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d00e      	beq.n	8008be0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8008bc2:	683b      	ldr	r3, [r7, #0]
 8008bc4:	88da      	ldrh	r2, [r3, #6]
 8008bc6:	893b      	ldrh	r3, [r7, #8]
 8008bc8:	4293      	cmp	r3, r2
 8008bca:	bf28      	it	cs
 8008bcc:	4613      	movcs	r3, r2
 8008bce:	b29b      	uxth	r3, r3
 8008bd0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008bd2:	893b      	ldrh	r3, [r7, #8]
 8008bd4:	461a      	mov	r2, r3
 8008bd6:	68f9      	ldr	r1, [r7, #12]
 8008bd8:	6878      	ldr	r0, [r7, #4]
 8008bda:	f000 fa5d 	bl	8009098 <USBD_CtlSendData>
 8008bde:	e009      	b.n	8008bf4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008be0:	6839      	ldr	r1, [r7, #0]
 8008be2:	6878      	ldr	r0, [r7, #4]
 8008be4:	f000 f9e7 	bl	8008fb6 <USBD_CtlError>
 8008be8:	e004      	b.n	8008bf4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008bea:	6878      	ldr	r0, [r7, #4]
 8008bec:	f000 faae 	bl	800914c <USBD_CtlSendStatus>
 8008bf0:	e000      	b.n	8008bf4 <USBD_GetDescriptor+0x2cc>
    return;
 8008bf2:	bf00      	nop
  }
}
 8008bf4:	3710      	adds	r7, #16
 8008bf6:	46bd      	mov	sp, r7
 8008bf8:	bd80      	pop	{r7, pc}
 8008bfa:	bf00      	nop

08008bfc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008bfc:	b580      	push	{r7, lr}
 8008bfe:	b084      	sub	sp, #16
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	6078      	str	r0, [r7, #4]
 8008c04:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008c06:	683b      	ldr	r3, [r7, #0]
 8008c08:	889b      	ldrh	r3, [r3, #4]
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d131      	bne.n	8008c72 <USBD_SetAddress+0x76>
 8008c0e:	683b      	ldr	r3, [r7, #0]
 8008c10:	88db      	ldrh	r3, [r3, #6]
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d12d      	bne.n	8008c72 <USBD_SetAddress+0x76>
 8008c16:	683b      	ldr	r3, [r7, #0]
 8008c18:	885b      	ldrh	r3, [r3, #2]
 8008c1a:	2b7f      	cmp	r3, #127	@ 0x7f
 8008c1c:	d829      	bhi.n	8008c72 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008c1e:	683b      	ldr	r3, [r7, #0]
 8008c20:	885b      	ldrh	r3, [r3, #2]
 8008c22:	b2db      	uxtb	r3, r3
 8008c24:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008c28:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008c30:	b2db      	uxtb	r3, r3
 8008c32:	2b03      	cmp	r3, #3
 8008c34:	d104      	bne.n	8008c40 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008c36:	6839      	ldr	r1, [r7, #0]
 8008c38:	6878      	ldr	r0, [r7, #4]
 8008c3a:	f000 f9bc 	bl	8008fb6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c3e:	e01d      	b.n	8008c7c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	7bfa      	ldrb	r2, [r7, #15]
 8008c44:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008c48:	7bfb      	ldrb	r3, [r7, #15]
 8008c4a:	4619      	mov	r1, r3
 8008c4c:	6878      	ldr	r0, [r7, #4]
 8008c4e:	f000 ff35 	bl	8009abc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008c52:	6878      	ldr	r0, [r7, #4]
 8008c54:	f000 fa7a 	bl	800914c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008c58:	7bfb      	ldrb	r3, [r7, #15]
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d004      	beq.n	8008c68 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	2202      	movs	r2, #2
 8008c62:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c66:	e009      	b.n	8008c7c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	2201      	movs	r2, #1
 8008c6c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c70:	e004      	b.n	8008c7c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008c72:	6839      	ldr	r1, [r7, #0]
 8008c74:	6878      	ldr	r0, [r7, #4]
 8008c76:	f000 f99e 	bl	8008fb6 <USBD_CtlError>
  }
}
 8008c7a:	bf00      	nop
 8008c7c:	bf00      	nop
 8008c7e:	3710      	adds	r7, #16
 8008c80:	46bd      	mov	sp, r7
 8008c82:	bd80      	pop	{r7, pc}

08008c84 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c84:	b580      	push	{r7, lr}
 8008c86:	b084      	sub	sp, #16
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	6078      	str	r0, [r7, #4]
 8008c8c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008c8e:	2300      	movs	r3, #0
 8008c90:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008c92:	683b      	ldr	r3, [r7, #0]
 8008c94:	885b      	ldrh	r3, [r3, #2]
 8008c96:	b2da      	uxtb	r2, r3
 8008c98:	4b4e      	ldr	r3, [pc, #312]	@ (8008dd4 <USBD_SetConfig+0x150>)
 8008c9a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008c9c:	4b4d      	ldr	r3, [pc, #308]	@ (8008dd4 <USBD_SetConfig+0x150>)
 8008c9e:	781b      	ldrb	r3, [r3, #0]
 8008ca0:	2b01      	cmp	r3, #1
 8008ca2:	d905      	bls.n	8008cb0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008ca4:	6839      	ldr	r1, [r7, #0]
 8008ca6:	6878      	ldr	r0, [r7, #4]
 8008ca8:	f000 f985 	bl	8008fb6 <USBD_CtlError>
    return USBD_FAIL;
 8008cac:	2303      	movs	r3, #3
 8008cae:	e08c      	b.n	8008dca <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008cb6:	b2db      	uxtb	r3, r3
 8008cb8:	2b02      	cmp	r3, #2
 8008cba:	d002      	beq.n	8008cc2 <USBD_SetConfig+0x3e>
 8008cbc:	2b03      	cmp	r3, #3
 8008cbe:	d029      	beq.n	8008d14 <USBD_SetConfig+0x90>
 8008cc0:	e075      	b.n	8008dae <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008cc2:	4b44      	ldr	r3, [pc, #272]	@ (8008dd4 <USBD_SetConfig+0x150>)
 8008cc4:	781b      	ldrb	r3, [r3, #0]
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d020      	beq.n	8008d0c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8008cca:	4b42      	ldr	r3, [pc, #264]	@ (8008dd4 <USBD_SetConfig+0x150>)
 8008ccc:	781b      	ldrb	r3, [r3, #0]
 8008cce:	461a      	mov	r2, r3
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008cd4:	4b3f      	ldr	r3, [pc, #252]	@ (8008dd4 <USBD_SetConfig+0x150>)
 8008cd6:	781b      	ldrb	r3, [r3, #0]
 8008cd8:	4619      	mov	r1, r3
 8008cda:	6878      	ldr	r0, [r7, #4]
 8008cdc:	f7fe ffe3 	bl	8007ca6 <USBD_SetClassConfig>
 8008ce0:	4603      	mov	r3, r0
 8008ce2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008ce4:	7bfb      	ldrb	r3, [r7, #15]
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d008      	beq.n	8008cfc <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8008cea:	6839      	ldr	r1, [r7, #0]
 8008cec:	6878      	ldr	r0, [r7, #4]
 8008cee:	f000 f962 	bl	8008fb6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	2202      	movs	r2, #2
 8008cf6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008cfa:	e065      	b.n	8008dc8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008cfc:	6878      	ldr	r0, [r7, #4]
 8008cfe:	f000 fa25 	bl	800914c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	2203      	movs	r2, #3
 8008d06:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8008d0a:	e05d      	b.n	8008dc8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008d0c:	6878      	ldr	r0, [r7, #4]
 8008d0e:	f000 fa1d 	bl	800914c <USBD_CtlSendStatus>
      break;
 8008d12:	e059      	b.n	8008dc8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008d14:	4b2f      	ldr	r3, [pc, #188]	@ (8008dd4 <USBD_SetConfig+0x150>)
 8008d16:	781b      	ldrb	r3, [r3, #0]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d112      	bne.n	8008d42 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	2202      	movs	r2, #2
 8008d20:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8008d24:	4b2b      	ldr	r3, [pc, #172]	@ (8008dd4 <USBD_SetConfig+0x150>)
 8008d26:	781b      	ldrb	r3, [r3, #0]
 8008d28:	461a      	mov	r2, r3
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008d2e:	4b29      	ldr	r3, [pc, #164]	@ (8008dd4 <USBD_SetConfig+0x150>)
 8008d30:	781b      	ldrb	r3, [r3, #0]
 8008d32:	4619      	mov	r1, r3
 8008d34:	6878      	ldr	r0, [r7, #4]
 8008d36:	f7fe ffd2 	bl	8007cde <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008d3a:	6878      	ldr	r0, [r7, #4]
 8008d3c:	f000 fa06 	bl	800914c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008d40:	e042      	b.n	8008dc8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8008d42:	4b24      	ldr	r3, [pc, #144]	@ (8008dd4 <USBD_SetConfig+0x150>)
 8008d44:	781b      	ldrb	r3, [r3, #0]
 8008d46:	461a      	mov	r2, r3
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	685b      	ldr	r3, [r3, #4]
 8008d4c:	429a      	cmp	r2, r3
 8008d4e:	d02a      	beq.n	8008da6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	685b      	ldr	r3, [r3, #4]
 8008d54:	b2db      	uxtb	r3, r3
 8008d56:	4619      	mov	r1, r3
 8008d58:	6878      	ldr	r0, [r7, #4]
 8008d5a:	f7fe ffc0 	bl	8007cde <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008d5e:	4b1d      	ldr	r3, [pc, #116]	@ (8008dd4 <USBD_SetConfig+0x150>)
 8008d60:	781b      	ldrb	r3, [r3, #0]
 8008d62:	461a      	mov	r2, r3
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008d68:	4b1a      	ldr	r3, [pc, #104]	@ (8008dd4 <USBD_SetConfig+0x150>)
 8008d6a:	781b      	ldrb	r3, [r3, #0]
 8008d6c:	4619      	mov	r1, r3
 8008d6e:	6878      	ldr	r0, [r7, #4]
 8008d70:	f7fe ff99 	bl	8007ca6 <USBD_SetClassConfig>
 8008d74:	4603      	mov	r3, r0
 8008d76:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008d78:	7bfb      	ldrb	r3, [r7, #15]
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d00f      	beq.n	8008d9e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8008d7e:	6839      	ldr	r1, [r7, #0]
 8008d80:	6878      	ldr	r0, [r7, #4]
 8008d82:	f000 f918 	bl	8008fb6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	685b      	ldr	r3, [r3, #4]
 8008d8a:	b2db      	uxtb	r3, r3
 8008d8c:	4619      	mov	r1, r3
 8008d8e:	6878      	ldr	r0, [r7, #4]
 8008d90:	f7fe ffa5 	bl	8007cde <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	2202      	movs	r2, #2
 8008d98:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8008d9c:	e014      	b.n	8008dc8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008d9e:	6878      	ldr	r0, [r7, #4]
 8008da0:	f000 f9d4 	bl	800914c <USBD_CtlSendStatus>
      break;
 8008da4:	e010      	b.n	8008dc8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008da6:	6878      	ldr	r0, [r7, #4]
 8008da8:	f000 f9d0 	bl	800914c <USBD_CtlSendStatus>
      break;
 8008dac:	e00c      	b.n	8008dc8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8008dae:	6839      	ldr	r1, [r7, #0]
 8008db0:	6878      	ldr	r0, [r7, #4]
 8008db2:	f000 f900 	bl	8008fb6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008db6:	4b07      	ldr	r3, [pc, #28]	@ (8008dd4 <USBD_SetConfig+0x150>)
 8008db8:	781b      	ldrb	r3, [r3, #0]
 8008dba:	4619      	mov	r1, r3
 8008dbc:	6878      	ldr	r0, [r7, #4]
 8008dbe:	f7fe ff8e 	bl	8007cde <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008dc2:	2303      	movs	r3, #3
 8008dc4:	73fb      	strb	r3, [r7, #15]
      break;
 8008dc6:	bf00      	nop
  }

  return ret;
 8008dc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dca:	4618      	mov	r0, r3
 8008dcc:	3710      	adds	r7, #16
 8008dce:	46bd      	mov	sp, r7
 8008dd0:	bd80      	pop	{r7, pc}
 8008dd2:	bf00      	nop
 8008dd4:	20009514 	.word	0x20009514

08008dd8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008dd8:	b580      	push	{r7, lr}
 8008dda:	b082      	sub	sp, #8
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	6078      	str	r0, [r7, #4]
 8008de0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008de2:	683b      	ldr	r3, [r7, #0]
 8008de4:	88db      	ldrh	r3, [r3, #6]
 8008de6:	2b01      	cmp	r3, #1
 8008de8:	d004      	beq.n	8008df4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008dea:	6839      	ldr	r1, [r7, #0]
 8008dec:	6878      	ldr	r0, [r7, #4]
 8008dee:	f000 f8e2 	bl	8008fb6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008df2:	e023      	b.n	8008e3c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008dfa:	b2db      	uxtb	r3, r3
 8008dfc:	2b02      	cmp	r3, #2
 8008dfe:	dc02      	bgt.n	8008e06 <USBD_GetConfig+0x2e>
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	dc03      	bgt.n	8008e0c <USBD_GetConfig+0x34>
 8008e04:	e015      	b.n	8008e32 <USBD_GetConfig+0x5a>
 8008e06:	2b03      	cmp	r3, #3
 8008e08:	d00b      	beq.n	8008e22 <USBD_GetConfig+0x4a>
 8008e0a:	e012      	b.n	8008e32 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	2200      	movs	r2, #0
 8008e10:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	3308      	adds	r3, #8
 8008e16:	2201      	movs	r2, #1
 8008e18:	4619      	mov	r1, r3
 8008e1a:	6878      	ldr	r0, [r7, #4]
 8008e1c:	f000 f93c 	bl	8009098 <USBD_CtlSendData>
        break;
 8008e20:	e00c      	b.n	8008e3c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	3304      	adds	r3, #4
 8008e26:	2201      	movs	r2, #1
 8008e28:	4619      	mov	r1, r3
 8008e2a:	6878      	ldr	r0, [r7, #4]
 8008e2c:	f000 f934 	bl	8009098 <USBD_CtlSendData>
        break;
 8008e30:	e004      	b.n	8008e3c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008e32:	6839      	ldr	r1, [r7, #0]
 8008e34:	6878      	ldr	r0, [r7, #4]
 8008e36:	f000 f8be 	bl	8008fb6 <USBD_CtlError>
        break;
 8008e3a:	bf00      	nop
}
 8008e3c:	bf00      	nop
 8008e3e:	3708      	adds	r7, #8
 8008e40:	46bd      	mov	sp, r7
 8008e42:	bd80      	pop	{r7, pc}

08008e44 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e44:	b580      	push	{r7, lr}
 8008e46:	b082      	sub	sp, #8
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	6078      	str	r0, [r7, #4]
 8008e4c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008e54:	b2db      	uxtb	r3, r3
 8008e56:	3b01      	subs	r3, #1
 8008e58:	2b02      	cmp	r3, #2
 8008e5a:	d81e      	bhi.n	8008e9a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008e5c:	683b      	ldr	r3, [r7, #0]
 8008e5e:	88db      	ldrh	r3, [r3, #6]
 8008e60:	2b02      	cmp	r3, #2
 8008e62:	d004      	beq.n	8008e6e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008e64:	6839      	ldr	r1, [r7, #0]
 8008e66:	6878      	ldr	r0, [r7, #4]
 8008e68:	f000 f8a5 	bl	8008fb6 <USBD_CtlError>
        break;
 8008e6c:	e01a      	b.n	8008ea4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	2201      	movs	r2, #1
 8008e72:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d005      	beq.n	8008e8a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	68db      	ldr	r3, [r3, #12]
 8008e82:	f043 0202 	orr.w	r2, r3, #2
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	330c      	adds	r3, #12
 8008e8e:	2202      	movs	r2, #2
 8008e90:	4619      	mov	r1, r3
 8008e92:	6878      	ldr	r0, [r7, #4]
 8008e94:	f000 f900 	bl	8009098 <USBD_CtlSendData>
      break;
 8008e98:	e004      	b.n	8008ea4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008e9a:	6839      	ldr	r1, [r7, #0]
 8008e9c:	6878      	ldr	r0, [r7, #4]
 8008e9e:	f000 f88a 	bl	8008fb6 <USBD_CtlError>
      break;
 8008ea2:	bf00      	nop
  }
}
 8008ea4:	bf00      	nop
 8008ea6:	3708      	adds	r7, #8
 8008ea8:	46bd      	mov	sp, r7
 8008eaa:	bd80      	pop	{r7, pc}

08008eac <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008eac:	b580      	push	{r7, lr}
 8008eae:	b082      	sub	sp, #8
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	6078      	str	r0, [r7, #4]
 8008eb4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008eb6:	683b      	ldr	r3, [r7, #0]
 8008eb8:	885b      	ldrh	r3, [r3, #2]
 8008eba:	2b01      	cmp	r3, #1
 8008ebc:	d107      	bne.n	8008ece <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	2201      	movs	r2, #1
 8008ec2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008ec6:	6878      	ldr	r0, [r7, #4]
 8008ec8:	f000 f940 	bl	800914c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008ecc:	e013      	b.n	8008ef6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8008ece:	683b      	ldr	r3, [r7, #0]
 8008ed0:	885b      	ldrh	r3, [r3, #2]
 8008ed2:	2b02      	cmp	r3, #2
 8008ed4:	d10b      	bne.n	8008eee <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8008ed6:	683b      	ldr	r3, [r7, #0]
 8008ed8:	889b      	ldrh	r3, [r3, #4]
 8008eda:	0a1b      	lsrs	r3, r3, #8
 8008edc:	b29b      	uxth	r3, r3
 8008ede:	b2da      	uxtb	r2, r3
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8008ee6:	6878      	ldr	r0, [r7, #4]
 8008ee8:	f000 f930 	bl	800914c <USBD_CtlSendStatus>
}
 8008eec:	e003      	b.n	8008ef6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8008eee:	6839      	ldr	r1, [r7, #0]
 8008ef0:	6878      	ldr	r0, [r7, #4]
 8008ef2:	f000 f860 	bl	8008fb6 <USBD_CtlError>
}
 8008ef6:	bf00      	nop
 8008ef8:	3708      	adds	r7, #8
 8008efa:	46bd      	mov	sp, r7
 8008efc:	bd80      	pop	{r7, pc}

08008efe <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008efe:	b580      	push	{r7, lr}
 8008f00:	b082      	sub	sp, #8
 8008f02:	af00      	add	r7, sp, #0
 8008f04:	6078      	str	r0, [r7, #4]
 8008f06:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008f0e:	b2db      	uxtb	r3, r3
 8008f10:	3b01      	subs	r3, #1
 8008f12:	2b02      	cmp	r3, #2
 8008f14:	d80b      	bhi.n	8008f2e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008f16:	683b      	ldr	r3, [r7, #0]
 8008f18:	885b      	ldrh	r3, [r3, #2]
 8008f1a:	2b01      	cmp	r3, #1
 8008f1c:	d10c      	bne.n	8008f38 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	2200      	movs	r2, #0
 8008f22:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008f26:	6878      	ldr	r0, [r7, #4]
 8008f28:	f000 f910 	bl	800914c <USBD_CtlSendStatus>
      }
      break;
 8008f2c:	e004      	b.n	8008f38 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008f2e:	6839      	ldr	r1, [r7, #0]
 8008f30:	6878      	ldr	r0, [r7, #4]
 8008f32:	f000 f840 	bl	8008fb6 <USBD_CtlError>
      break;
 8008f36:	e000      	b.n	8008f3a <USBD_ClrFeature+0x3c>
      break;
 8008f38:	bf00      	nop
  }
}
 8008f3a:	bf00      	nop
 8008f3c:	3708      	adds	r7, #8
 8008f3e:	46bd      	mov	sp, r7
 8008f40:	bd80      	pop	{r7, pc}

08008f42 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008f42:	b580      	push	{r7, lr}
 8008f44:	b084      	sub	sp, #16
 8008f46:	af00      	add	r7, sp, #0
 8008f48:	6078      	str	r0, [r7, #4]
 8008f4a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008f4c:	683b      	ldr	r3, [r7, #0]
 8008f4e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	781a      	ldrb	r2, [r3, #0]
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	3301      	adds	r3, #1
 8008f5c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	781a      	ldrb	r2, [r3, #0]
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	3301      	adds	r3, #1
 8008f6a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008f6c:	68f8      	ldr	r0, [r7, #12]
 8008f6e:	f7ff fa40 	bl	80083f2 <SWAPBYTE>
 8008f72:	4603      	mov	r3, r0
 8008f74:	461a      	mov	r2, r3
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	3301      	adds	r3, #1
 8008f7e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	3301      	adds	r3, #1
 8008f84:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008f86:	68f8      	ldr	r0, [r7, #12]
 8008f88:	f7ff fa33 	bl	80083f2 <SWAPBYTE>
 8008f8c:	4603      	mov	r3, r0
 8008f8e:	461a      	mov	r2, r3
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	3301      	adds	r3, #1
 8008f98:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	3301      	adds	r3, #1
 8008f9e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008fa0:	68f8      	ldr	r0, [r7, #12]
 8008fa2:	f7ff fa26 	bl	80083f2 <SWAPBYTE>
 8008fa6:	4603      	mov	r3, r0
 8008fa8:	461a      	mov	r2, r3
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	80da      	strh	r2, [r3, #6]
}
 8008fae:	bf00      	nop
 8008fb0:	3710      	adds	r7, #16
 8008fb2:	46bd      	mov	sp, r7
 8008fb4:	bd80      	pop	{r7, pc}

08008fb6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008fb6:	b580      	push	{r7, lr}
 8008fb8:	b082      	sub	sp, #8
 8008fba:	af00      	add	r7, sp, #0
 8008fbc:	6078      	str	r0, [r7, #4]
 8008fbe:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008fc0:	2180      	movs	r1, #128	@ 0x80
 8008fc2:	6878      	ldr	r0, [r7, #4]
 8008fc4:	f000 fd10 	bl	80099e8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008fc8:	2100      	movs	r1, #0
 8008fca:	6878      	ldr	r0, [r7, #4]
 8008fcc:	f000 fd0c 	bl	80099e8 <USBD_LL_StallEP>
}
 8008fd0:	bf00      	nop
 8008fd2:	3708      	adds	r7, #8
 8008fd4:	46bd      	mov	sp, r7
 8008fd6:	bd80      	pop	{r7, pc}

08008fd8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008fd8:	b580      	push	{r7, lr}
 8008fda:	b086      	sub	sp, #24
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	60f8      	str	r0, [r7, #12]
 8008fe0:	60b9      	str	r1, [r7, #8]
 8008fe2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008fe4:	2300      	movs	r3, #0
 8008fe6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d036      	beq.n	800905c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008ff2:	6938      	ldr	r0, [r7, #16]
 8008ff4:	f000 f836 	bl	8009064 <USBD_GetLen>
 8008ff8:	4603      	mov	r3, r0
 8008ffa:	3301      	adds	r3, #1
 8008ffc:	b29b      	uxth	r3, r3
 8008ffe:	005b      	lsls	r3, r3, #1
 8009000:	b29a      	uxth	r2, r3
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009006:	7dfb      	ldrb	r3, [r7, #23]
 8009008:	68ba      	ldr	r2, [r7, #8]
 800900a:	4413      	add	r3, r2
 800900c:	687a      	ldr	r2, [r7, #4]
 800900e:	7812      	ldrb	r2, [r2, #0]
 8009010:	701a      	strb	r2, [r3, #0]
  idx++;
 8009012:	7dfb      	ldrb	r3, [r7, #23]
 8009014:	3301      	adds	r3, #1
 8009016:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009018:	7dfb      	ldrb	r3, [r7, #23]
 800901a:	68ba      	ldr	r2, [r7, #8]
 800901c:	4413      	add	r3, r2
 800901e:	2203      	movs	r2, #3
 8009020:	701a      	strb	r2, [r3, #0]
  idx++;
 8009022:	7dfb      	ldrb	r3, [r7, #23]
 8009024:	3301      	adds	r3, #1
 8009026:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009028:	e013      	b.n	8009052 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800902a:	7dfb      	ldrb	r3, [r7, #23]
 800902c:	68ba      	ldr	r2, [r7, #8]
 800902e:	4413      	add	r3, r2
 8009030:	693a      	ldr	r2, [r7, #16]
 8009032:	7812      	ldrb	r2, [r2, #0]
 8009034:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009036:	693b      	ldr	r3, [r7, #16]
 8009038:	3301      	adds	r3, #1
 800903a:	613b      	str	r3, [r7, #16]
    idx++;
 800903c:	7dfb      	ldrb	r3, [r7, #23]
 800903e:	3301      	adds	r3, #1
 8009040:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009042:	7dfb      	ldrb	r3, [r7, #23]
 8009044:	68ba      	ldr	r2, [r7, #8]
 8009046:	4413      	add	r3, r2
 8009048:	2200      	movs	r2, #0
 800904a:	701a      	strb	r2, [r3, #0]
    idx++;
 800904c:	7dfb      	ldrb	r3, [r7, #23]
 800904e:	3301      	adds	r3, #1
 8009050:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009052:	693b      	ldr	r3, [r7, #16]
 8009054:	781b      	ldrb	r3, [r3, #0]
 8009056:	2b00      	cmp	r3, #0
 8009058:	d1e7      	bne.n	800902a <USBD_GetString+0x52>
 800905a:	e000      	b.n	800905e <USBD_GetString+0x86>
    return;
 800905c:	bf00      	nop
  }
}
 800905e:	3718      	adds	r7, #24
 8009060:	46bd      	mov	sp, r7
 8009062:	bd80      	pop	{r7, pc}

08009064 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009064:	b480      	push	{r7}
 8009066:	b085      	sub	sp, #20
 8009068:	af00      	add	r7, sp, #0
 800906a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800906c:	2300      	movs	r3, #0
 800906e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009074:	e005      	b.n	8009082 <USBD_GetLen+0x1e>
  {
    len++;
 8009076:	7bfb      	ldrb	r3, [r7, #15]
 8009078:	3301      	adds	r3, #1
 800907a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800907c:	68bb      	ldr	r3, [r7, #8]
 800907e:	3301      	adds	r3, #1
 8009080:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009082:	68bb      	ldr	r3, [r7, #8]
 8009084:	781b      	ldrb	r3, [r3, #0]
 8009086:	2b00      	cmp	r3, #0
 8009088:	d1f5      	bne.n	8009076 <USBD_GetLen+0x12>
  }

  return len;
 800908a:	7bfb      	ldrb	r3, [r7, #15]
}
 800908c:	4618      	mov	r0, r3
 800908e:	3714      	adds	r7, #20
 8009090:	46bd      	mov	sp, r7
 8009092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009096:	4770      	bx	lr

08009098 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009098:	b580      	push	{r7, lr}
 800909a:	b084      	sub	sp, #16
 800909c:	af00      	add	r7, sp, #0
 800909e:	60f8      	str	r0, [r7, #12]
 80090a0:	60b9      	str	r1, [r7, #8]
 80090a2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	2202      	movs	r2, #2
 80090a8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	687a      	ldr	r2, [r7, #4]
 80090b0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	687a      	ldr	r2, [r7, #4]
 80090b6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	68ba      	ldr	r2, [r7, #8]
 80090bc:	2100      	movs	r1, #0
 80090be:	68f8      	ldr	r0, [r7, #12]
 80090c0:	f000 fd1b 	bl	8009afa <USBD_LL_Transmit>

  return USBD_OK;
 80090c4:	2300      	movs	r3, #0
}
 80090c6:	4618      	mov	r0, r3
 80090c8:	3710      	adds	r7, #16
 80090ca:	46bd      	mov	sp, r7
 80090cc:	bd80      	pop	{r7, pc}

080090ce <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80090ce:	b580      	push	{r7, lr}
 80090d0:	b084      	sub	sp, #16
 80090d2:	af00      	add	r7, sp, #0
 80090d4:	60f8      	str	r0, [r7, #12]
 80090d6:	60b9      	str	r1, [r7, #8]
 80090d8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	68ba      	ldr	r2, [r7, #8]
 80090de:	2100      	movs	r1, #0
 80090e0:	68f8      	ldr	r0, [r7, #12]
 80090e2:	f000 fd0a 	bl	8009afa <USBD_LL_Transmit>

  return USBD_OK;
 80090e6:	2300      	movs	r3, #0
}
 80090e8:	4618      	mov	r0, r3
 80090ea:	3710      	adds	r7, #16
 80090ec:	46bd      	mov	sp, r7
 80090ee:	bd80      	pop	{r7, pc}

080090f0 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80090f0:	b580      	push	{r7, lr}
 80090f2:	b084      	sub	sp, #16
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	60f8      	str	r0, [r7, #12]
 80090f8:	60b9      	str	r1, [r7, #8]
 80090fa:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	2203      	movs	r2, #3
 8009100:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	687a      	ldr	r2, [r7, #4]
 8009108:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	687a      	ldr	r2, [r7, #4]
 8009110:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	68ba      	ldr	r2, [r7, #8]
 8009118:	2100      	movs	r1, #0
 800911a:	68f8      	ldr	r0, [r7, #12]
 800911c:	f000 fd0e 	bl	8009b3c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009120:	2300      	movs	r3, #0
}
 8009122:	4618      	mov	r0, r3
 8009124:	3710      	adds	r7, #16
 8009126:	46bd      	mov	sp, r7
 8009128:	bd80      	pop	{r7, pc}

0800912a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800912a:	b580      	push	{r7, lr}
 800912c:	b084      	sub	sp, #16
 800912e:	af00      	add	r7, sp, #0
 8009130:	60f8      	str	r0, [r7, #12]
 8009132:	60b9      	str	r1, [r7, #8]
 8009134:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	68ba      	ldr	r2, [r7, #8]
 800913a:	2100      	movs	r1, #0
 800913c:	68f8      	ldr	r0, [r7, #12]
 800913e:	f000 fcfd 	bl	8009b3c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009142:	2300      	movs	r3, #0
}
 8009144:	4618      	mov	r0, r3
 8009146:	3710      	adds	r7, #16
 8009148:	46bd      	mov	sp, r7
 800914a:	bd80      	pop	{r7, pc}

0800914c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800914c:	b580      	push	{r7, lr}
 800914e:	b082      	sub	sp, #8
 8009150:	af00      	add	r7, sp, #0
 8009152:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	2204      	movs	r2, #4
 8009158:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800915c:	2300      	movs	r3, #0
 800915e:	2200      	movs	r2, #0
 8009160:	2100      	movs	r1, #0
 8009162:	6878      	ldr	r0, [r7, #4]
 8009164:	f000 fcc9 	bl	8009afa <USBD_LL_Transmit>

  return USBD_OK;
 8009168:	2300      	movs	r3, #0
}
 800916a:	4618      	mov	r0, r3
 800916c:	3708      	adds	r7, #8
 800916e:	46bd      	mov	sp, r7
 8009170:	bd80      	pop	{r7, pc}

08009172 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009172:	b580      	push	{r7, lr}
 8009174:	b082      	sub	sp, #8
 8009176:	af00      	add	r7, sp, #0
 8009178:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	2205      	movs	r2, #5
 800917e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009182:	2300      	movs	r3, #0
 8009184:	2200      	movs	r2, #0
 8009186:	2100      	movs	r1, #0
 8009188:	6878      	ldr	r0, [r7, #4]
 800918a:	f000 fcd7 	bl	8009b3c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800918e:	2300      	movs	r3, #0
}
 8009190:	4618      	mov	r0, r3
 8009192:	3708      	adds	r7, #8
 8009194:	46bd      	mov	sp, r7
 8009196:	bd80      	pop	{r7, pc}

08009198 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009198:	b580      	push	{r7, lr}
 800919a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800919c:	2200      	movs	r2, #0
 800919e:	4912      	ldr	r1, [pc, #72]	@ (80091e8 <MX_USB_DEVICE_Init+0x50>)
 80091a0:	4812      	ldr	r0, [pc, #72]	@ (80091ec <MX_USB_DEVICE_Init+0x54>)
 80091a2:	f7fe fd03 	bl	8007bac <USBD_Init>
 80091a6:	4603      	mov	r3, r0
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d001      	beq.n	80091b0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80091ac:	f7f7 fba2 	bl	80008f4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80091b0:	490f      	ldr	r1, [pc, #60]	@ (80091f0 <MX_USB_DEVICE_Init+0x58>)
 80091b2:	480e      	ldr	r0, [pc, #56]	@ (80091ec <MX_USB_DEVICE_Init+0x54>)
 80091b4:	f7fe fd2a 	bl	8007c0c <USBD_RegisterClass>
 80091b8:	4603      	mov	r3, r0
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d001      	beq.n	80091c2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80091be:	f7f7 fb99 	bl	80008f4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80091c2:	490c      	ldr	r1, [pc, #48]	@ (80091f4 <MX_USB_DEVICE_Init+0x5c>)
 80091c4:	4809      	ldr	r0, [pc, #36]	@ (80091ec <MX_USB_DEVICE_Init+0x54>)
 80091c6:	f7fe fc21 	bl	8007a0c <USBD_CDC_RegisterInterface>
 80091ca:	4603      	mov	r3, r0
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d001      	beq.n	80091d4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80091d0:	f7f7 fb90 	bl	80008f4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80091d4:	4805      	ldr	r0, [pc, #20]	@ (80091ec <MX_USB_DEVICE_Init+0x54>)
 80091d6:	f7fe fd4f 	bl	8007c78 <USBD_Start>
 80091da:	4603      	mov	r3, r0
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d001      	beq.n	80091e4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80091e0:	f7f7 fb88 	bl	80008f4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80091e4:	bf00      	nop
 80091e6:	bd80      	pop	{r7, pc}
 80091e8:	200000ac 	.word	0x200000ac
 80091ec:	20009518 	.word	0x20009518
 80091f0:	20000018 	.word	0x20000018
 80091f4:	20000098 	.word	0x20000098

080091f8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80091f8:	b580      	push	{r7, lr}
 80091fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80091fc:	2200      	movs	r2, #0
 80091fe:	4905      	ldr	r1, [pc, #20]	@ (8009214 <CDC_Init_FS+0x1c>)
 8009200:	4805      	ldr	r0, [pc, #20]	@ (8009218 <CDC_Init_FS+0x20>)
 8009202:	f7fe fc1d 	bl	8007a40 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009206:	4905      	ldr	r1, [pc, #20]	@ (800921c <CDC_Init_FS+0x24>)
 8009208:	4803      	ldr	r0, [pc, #12]	@ (8009218 <CDC_Init_FS+0x20>)
 800920a:	f7fe fc3b 	bl	8007a84 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800920e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009210:	4618      	mov	r0, r3
 8009212:	bd80      	pop	{r7, pc}
 8009214:	20009ff4 	.word	0x20009ff4
 8009218:	20009518 	.word	0x20009518
 800921c:	200097f4 	.word	0x200097f4

08009220 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009220:	b480      	push	{r7}
 8009222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009224:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009226:	4618      	mov	r0, r3
 8009228:	46bd      	mov	sp, r7
 800922a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800922e:	4770      	bx	lr

08009230 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009230:	b480      	push	{r7}
 8009232:	b083      	sub	sp, #12
 8009234:	af00      	add	r7, sp, #0
 8009236:	4603      	mov	r3, r0
 8009238:	6039      	str	r1, [r7, #0]
 800923a:	71fb      	strb	r3, [r7, #7]
 800923c:	4613      	mov	r3, r2
 800923e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009240:	79fb      	ldrb	r3, [r7, #7]
 8009242:	2b23      	cmp	r3, #35	@ 0x23
 8009244:	d84a      	bhi.n	80092dc <CDC_Control_FS+0xac>
 8009246:	a201      	add	r2, pc, #4	@ (adr r2, 800924c <CDC_Control_FS+0x1c>)
 8009248:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800924c:	080092dd 	.word	0x080092dd
 8009250:	080092dd 	.word	0x080092dd
 8009254:	080092dd 	.word	0x080092dd
 8009258:	080092dd 	.word	0x080092dd
 800925c:	080092dd 	.word	0x080092dd
 8009260:	080092dd 	.word	0x080092dd
 8009264:	080092dd 	.word	0x080092dd
 8009268:	080092dd 	.word	0x080092dd
 800926c:	080092dd 	.word	0x080092dd
 8009270:	080092dd 	.word	0x080092dd
 8009274:	080092dd 	.word	0x080092dd
 8009278:	080092dd 	.word	0x080092dd
 800927c:	080092dd 	.word	0x080092dd
 8009280:	080092dd 	.word	0x080092dd
 8009284:	080092dd 	.word	0x080092dd
 8009288:	080092dd 	.word	0x080092dd
 800928c:	080092dd 	.word	0x080092dd
 8009290:	080092dd 	.word	0x080092dd
 8009294:	080092dd 	.word	0x080092dd
 8009298:	080092dd 	.word	0x080092dd
 800929c:	080092dd 	.word	0x080092dd
 80092a0:	080092dd 	.word	0x080092dd
 80092a4:	080092dd 	.word	0x080092dd
 80092a8:	080092dd 	.word	0x080092dd
 80092ac:	080092dd 	.word	0x080092dd
 80092b0:	080092dd 	.word	0x080092dd
 80092b4:	080092dd 	.word	0x080092dd
 80092b8:	080092dd 	.word	0x080092dd
 80092bc:	080092dd 	.word	0x080092dd
 80092c0:	080092dd 	.word	0x080092dd
 80092c4:	080092dd 	.word	0x080092dd
 80092c8:	080092dd 	.word	0x080092dd
 80092cc:	080092dd 	.word	0x080092dd
 80092d0:	080092dd 	.word	0x080092dd
 80092d4:	080092dd 	.word	0x080092dd
 80092d8:	080092dd 	.word	0x080092dd
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80092dc:	bf00      	nop
  }

  return (USBD_OK);
 80092de:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80092e0:	4618      	mov	r0, r3
 80092e2:	370c      	adds	r7, #12
 80092e4:	46bd      	mov	sp, r7
 80092e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ea:	4770      	bx	lr

080092ec <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80092ec:	b580      	push	{r7, lr}
 80092ee:	b082      	sub	sp, #8
 80092f0:	af00      	add	r7, sp, #0
 80092f2:	6078      	str	r0, [r7, #4]
 80092f4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USB_CdcRxBuffer_FS_cnt = *Len;
 80092f6:	683b      	ldr	r3, [r7, #0]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	4a0a      	ldr	r2, [pc, #40]	@ (8009324 <CDC_Receive_FS+0x38>)
 80092fc:	6013      	str	r3, [r2, #0]
  strncpy(USB_CdcRxBuffer_FS, Buf, *Len);
 80092fe:	683b      	ldr	r3, [r7, #0]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	461a      	mov	r2, r3
 8009304:	6879      	ldr	r1, [r7, #4]
 8009306:	4808      	ldr	r0, [pc, #32]	@ (8009328 <CDC_Receive_FS+0x3c>)
 8009308:	f000 fed4 	bl	800a0b4 <strncpy>

  // memcpy((uint8_t *) USB_CdcRxBuffer_FS, (uint8_t *) Buf, sizeof(*Len));

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800930c:	6879      	ldr	r1, [r7, #4]
 800930e:	4807      	ldr	r0, [pc, #28]	@ (800932c <CDC_Receive_FS+0x40>)
 8009310:	f7fe fbb8 	bl	8007a84 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009314:	4805      	ldr	r0, [pc, #20]	@ (800932c <CDC_Receive_FS+0x40>)
 8009316:	f7fe fc13 	bl	8007b40 <USBD_CDC_ReceivePacket>

  return (USBD_OK);
 800931a:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800931c:	4618      	mov	r0, r3
 800931e:	3708      	adds	r7, #8
 8009320:	46bd      	mov	sp, r7
 8009322:	bd80      	pop	{r7, pc}
 8009324:	200017f4 	.word	0x200017f4
 8009328:	200015f4 	.word	0x200015f4
 800932c:	20009518 	.word	0x20009518

08009330 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009330:	b580      	push	{r7, lr}
 8009332:	b086      	sub	sp, #24
 8009334:	af00      	add	r7, sp, #0
 8009336:	6078      	str	r0, [r7, #4]
 8009338:	460b      	mov	r3, r1
 800933a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800933c:	2300      	movs	r3, #0
 800933e:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 7 */
  uint32_t startTick = HAL_GetTick();
 8009340:	f7f8 fb86 	bl	8001a50 <HAL_GetTick>
 8009344:	6138      	str	r0, [r7, #16]
  uint32_t TIMEOUT_VALUE = 1U;
 8009346:	2301      	movs	r3, #1
 8009348:	60fb      	str	r3, [r7, #12]

  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800934a:	4b10      	ldr	r3, [pc, #64]	@ (800938c <CDC_Transmit_FS+0x5c>)
 800934c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009350:	60bb      	str	r3, [r7, #8]
  #if 1
  if (hcdc == NULL)
 8009352:	68bb      	ldr	r3, [r7, #8]
 8009354:	2b00      	cmp	r3, #0
 8009356:	d101      	bne.n	800935c <CDC_Transmit_FS+0x2c>
  {
    return USBD_FAIL;
 8009358:	2303      	movs	r3, #3
 800935a:	e012      	b.n	8009382 <CDC_Transmit_FS+0x52>
  }

  if (hcdc->TxState != 0)
 800935c:	68bb      	ldr	r3, [r7, #8]
 800935e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8009362:	2b00      	cmp	r3, #0
 8009364:	d001      	beq.n	800936a <CDC_Transmit_FS+0x3a>
  {
      return USBD_BUSY;
 8009366:	2301      	movs	r3, #1
 8009368:	e00b      	b.n	8009382 <CDC_Transmit_FS+0x52>
  //       return USBD_BUSY;
  //   }
  // }
  #endif
  
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800936a:	887b      	ldrh	r3, [r7, #2]
 800936c:	461a      	mov	r2, r3
 800936e:	6879      	ldr	r1, [r7, #4]
 8009370:	4806      	ldr	r0, [pc, #24]	@ (800938c <CDC_Transmit_FS+0x5c>)
 8009372:	f7fe fb65 	bl	8007a40 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8009376:	4805      	ldr	r0, [pc, #20]	@ (800938c <CDC_Transmit_FS+0x5c>)
 8009378:	f7fe fba2 	bl	8007ac0 <USBD_CDC_TransmitPacket>
 800937c:	4603      	mov	r3, r0
 800937e:	75fb      	strb	r3, [r7, #23]
  /* USER CODE END 7 */
  return result;
 8009380:	7dfb      	ldrb	r3, [r7, #23]
}
 8009382:	4618      	mov	r0, r3
 8009384:	3718      	adds	r7, #24
 8009386:	46bd      	mov	sp, r7
 8009388:	bd80      	pop	{r7, pc}
 800938a:	bf00      	nop
 800938c:	20009518 	.word	0x20009518

08009390 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009390:	b480      	push	{r7}
 8009392:	b087      	sub	sp, #28
 8009394:	af00      	add	r7, sp, #0
 8009396:	60f8      	str	r0, [r7, #12]
 8009398:	60b9      	str	r1, [r7, #8]
 800939a:	4613      	mov	r3, r2
 800939c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800939e:	2300      	movs	r3, #0
 80093a0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80093a2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80093a6:	4618      	mov	r0, r3
 80093a8:	371c      	adds	r7, #28
 80093aa:	46bd      	mov	sp, r7
 80093ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b0:	4770      	bx	lr
	...

080093b4 <CDC_Transmit_Is_Busy>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
uint8_t CDC_Transmit_Is_Busy(void){
 80093b4:	b480      	push	{r7}
 80093b6:	b083      	sub	sp, #12
 80093b8:	af00      	add	r7, sp, #0
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80093ba:	4b09      	ldr	r3, [pc, #36]	@ (80093e0 <CDC_Transmit_Is_Busy+0x2c>)
 80093bc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80093c0:	607b      	str	r3, [r7, #4]
  if (hcdc->TxState != 0)
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d001      	beq.n	80093d0 <CDC_Transmit_Is_Busy+0x1c>
    return USBD_BUSY;
 80093cc:	2301      	movs	r3, #1
 80093ce:	e000      	b.n	80093d2 <CDC_Transmit_Is_Busy+0x1e>
  else
    return USBD_OK;
 80093d0:	2300      	movs	r3, #0
}
 80093d2:	4618      	mov	r0, r3
 80093d4:	370c      	adds	r7, #12
 80093d6:	46bd      	mov	sp, r7
 80093d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093dc:	4770      	bx	lr
 80093de:	bf00      	nop
 80093e0:	20009518 	.word	0x20009518

080093e4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80093e4:	b480      	push	{r7}
 80093e6:	b083      	sub	sp, #12
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	4603      	mov	r3, r0
 80093ec:	6039      	str	r1, [r7, #0]
 80093ee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80093f0:	683b      	ldr	r3, [r7, #0]
 80093f2:	2212      	movs	r2, #18
 80093f4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80093f6:	4b03      	ldr	r3, [pc, #12]	@ (8009404 <USBD_FS_DeviceDescriptor+0x20>)
}
 80093f8:	4618      	mov	r0, r3
 80093fa:	370c      	adds	r7, #12
 80093fc:	46bd      	mov	sp, r7
 80093fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009402:	4770      	bx	lr
 8009404:	200000c8 	.word	0x200000c8

08009408 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009408:	b480      	push	{r7}
 800940a:	b083      	sub	sp, #12
 800940c:	af00      	add	r7, sp, #0
 800940e:	4603      	mov	r3, r0
 8009410:	6039      	str	r1, [r7, #0]
 8009412:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009414:	683b      	ldr	r3, [r7, #0]
 8009416:	2204      	movs	r2, #4
 8009418:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800941a:	4b03      	ldr	r3, [pc, #12]	@ (8009428 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800941c:	4618      	mov	r0, r3
 800941e:	370c      	adds	r7, #12
 8009420:	46bd      	mov	sp, r7
 8009422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009426:	4770      	bx	lr
 8009428:	200000dc 	.word	0x200000dc

0800942c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800942c:	b580      	push	{r7, lr}
 800942e:	b082      	sub	sp, #8
 8009430:	af00      	add	r7, sp, #0
 8009432:	4603      	mov	r3, r0
 8009434:	6039      	str	r1, [r7, #0]
 8009436:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009438:	79fb      	ldrb	r3, [r7, #7]
 800943a:	2b00      	cmp	r3, #0
 800943c:	d105      	bne.n	800944a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800943e:	683a      	ldr	r2, [r7, #0]
 8009440:	4907      	ldr	r1, [pc, #28]	@ (8009460 <USBD_FS_ProductStrDescriptor+0x34>)
 8009442:	4808      	ldr	r0, [pc, #32]	@ (8009464 <USBD_FS_ProductStrDescriptor+0x38>)
 8009444:	f7ff fdc8 	bl	8008fd8 <USBD_GetString>
 8009448:	e004      	b.n	8009454 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800944a:	683a      	ldr	r2, [r7, #0]
 800944c:	4904      	ldr	r1, [pc, #16]	@ (8009460 <USBD_FS_ProductStrDescriptor+0x34>)
 800944e:	4805      	ldr	r0, [pc, #20]	@ (8009464 <USBD_FS_ProductStrDescriptor+0x38>)
 8009450:	f7ff fdc2 	bl	8008fd8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009454:	4b02      	ldr	r3, [pc, #8]	@ (8009460 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009456:	4618      	mov	r0, r3
 8009458:	3708      	adds	r7, #8
 800945a:	46bd      	mov	sp, r7
 800945c:	bd80      	pop	{r7, pc}
 800945e:	bf00      	nop
 8009460:	2000a7f4 	.word	0x2000a7f4
 8009464:	0800aff0 	.word	0x0800aff0

08009468 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009468:	b580      	push	{r7, lr}
 800946a:	b082      	sub	sp, #8
 800946c:	af00      	add	r7, sp, #0
 800946e:	4603      	mov	r3, r0
 8009470:	6039      	str	r1, [r7, #0]
 8009472:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009474:	683a      	ldr	r2, [r7, #0]
 8009476:	4904      	ldr	r1, [pc, #16]	@ (8009488 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009478:	4804      	ldr	r0, [pc, #16]	@ (800948c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800947a:	f7ff fdad 	bl	8008fd8 <USBD_GetString>
  return USBD_StrDesc;
 800947e:	4b02      	ldr	r3, [pc, #8]	@ (8009488 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009480:	4618      	mov	r0, r3
 8009482:	3708      	adds	r7, #8
 8009484:	46bd      	mov	sp, r7
 8009486:	bd80      	pop	{r7, pc}
 8009488:	2000a7f4 	.word	0x2000a7f4
 800948c:	0800b008 	.word	0x0800b008

08009490 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009490:	b580      	push	{r7, lr}
 8009492:	b082      	sub	sp, #8
 8009494:	af00      	add	r7, sp, #0
 8009496:	4603      	mov	r3, r0
 8009498:	6039      	str	r1, [r7, #0]
 800949a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800949c:	683b      	ldr	r3, [r7, #0]
 800949e:	221a      	movs	r2, #26
 80094a0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80094a2:	f000 f843 	bl	800952c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80094a6:	4b02      	ldr	r3, [pc, #8]	@ (80094b0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80094a8:	4618      	mov	r0, r3
 80094aa:	3708      	adds	r7, #8
 80094ac:	46bd      	mov	sp, r7
 80094ae:	bd80      	pop	{r7, pc}
 80094b0:	200000e0 	.word	0x200000e0

080094b4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80094b4:	b580      	push	{r7, lr}
 80094b6:	b082      	sub	sp, #8
 80094b8:	af00      	add	r7, sp, #0
 80094ba:	4603      	mov	r3, r0
 80094bc:	6039      	str	r1, [r7, #0]
 80094be:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80094c0:	79fb      	ldrb	r3, [r7, #7]
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d105      	bne.n	80094d2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80094c6:	683a      	ldr	r2, [r7, #0]
 80094c8:	4907      	ldr	r1, [pc, #28]	@ (80094e8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80094ca:	4808      	ldr	r0, [pc, #32]	@ (80094ec <USBD_FS_ConfigStrDescriptor+0x38>)
 80094cc:	f7ff fd84 	bl	8008fd8 <USBD_GetString>
 80094d0:	e004      	b.n	80094dc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80094d2:	683a      	ldr	r2, [r7, #0]
 80094d4:	4904      	ldr	r1, [pc, #16]	@ (80094e8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80094d6:	4805      	ldr	r0, [pc, #20]	@ (80094ec <USBD_FS_ConfigStrDescriptor+0x38>)
 80094d8:	f7ff fd7e 	bl	8008fd8 <USBD_GetString>
  }
  return USBD_StrDesc;
 80094dc:	4b02      	ldr	r3, [pc, #8]	@ (80094e8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80094de:	4618      	mov	r0, r3
 80094e0:	3708      	adds	r7, #8
 80094e2:	46bd      	mov	sp, r7
 80094e4:	bd80      	pop	{r7, pc}
 80094e6:	bf00      	nop
 80094e8:	2000a7f4 	.word	0x2000a7f4
 80094ec:	0800b01c 	.word	0x0800b01c

080094f0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80094f0:	b580      	push	{r7, lr}
 80094f2:	b082      	sub	sp, #8
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	4603      	mov	r3, r0
 80094f8:	6039      	str	r1, [r7, #0]
 80094fa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80094fc:	79fb      	ldrb	r3, [r7, #7]
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d105      	bne.n	800950e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009502:	683a      	ldr	r2, [r7, #0]
 8009504:	4907      	ldr	r1, [pc, #28]	@ (8009524 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009506:	4808      	ldr	r0, [pc, #32]	@ (8009528 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009508:	f7ff fd66 	bl	8008fd8 <USBD_GetString>
 800950c:	e004      	b.n	8009518 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800950e:	683a      	ldr	r2, [r7, #0]
 8009510:	4904      	ldr	r1, [pc, #16]	@ (8009524 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009512:	4805      	ldr	r0, [pc, #20]	@ (8009528 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009514:	f7ff fd60 	bl	8008fd8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009518:	4b02      	ldr	r3, [pc, #8]	@ (8009524 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800951a:	4618      	mov	r0, r3
 800951c:	3708      	adds	r7, #8
 800951e:	46bd      	mov	sp, r7
 8009520:	bd80      	pop	{r7, pc}
 8009522:	bf00      	nop
 8009524:	2000a7f4 	.word	0x2000a7f4
 8009528:	0800b028 	.word	0x0800b028

0800952c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800952c:	b580      	push	{r7, lr}
 800952e:	b084      	sub	sp, #16
 8009530:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009532:	4b0f      	ldr	r3, [pc, #60]	@ (8009570 <Get_SerialNum+0x44>)
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009538:	4b0e      	ldr	r3, [pc, #56]	@ (8009574 <Get_SerialNum+0x48>)
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800953e:	4b0e      	ldr	r3, [pc, #56]	@ (8009578 <Get_SerialNum+0x4c>)
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009544:	68fa      	ldr	r2, [r7, #12]
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	4413      	add	r3, r2
 800954a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	2b00      	cmp	r3, #0
 8009550:	d009      	beq.n	8009566 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009552:	2208      	movs	r2, #8
 8009554:	4909      	ldr	r1, [pc, #36]	@ (800957c <Get_SerialNum+0x50>)
 8009556:	68f8      	ldr	r0, [r7, #12]
 8009558:	f000 f814 	bl	8009584 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800955c:	2204      	movs	r2, #4
 800955e:	4908      	ldr	r1, [pc, #32]	@ (8009580 <Get_SerialNum+0x54>)
 8009560:	68b8      	ldr	r0, [r7, #8]
 8009562:	f000 f80f 	bl	8009584 <IntToUnicode>
  }
}
 8009566:	bf00      	nop
 8009568:	3710      	adds	r7, #16
 800956a:	46bd      	mov	sp, r7
 800956c:	bd80      	pop	{r7, pc}
 800956e:	bf00      	nop
 8009570:	1fff7a10 	.word	0x1fff7a10
 8009574:	1fff7a14 	.word	0x1fff7a14
 8009578:	1fff7a18 	.word	0x1fff7a18
 800957c:	200000e2 	.word	0x200000e2
 8009580:	200000f2 	.word	0x200000f2

08009584 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009584:	b480      	push	{r7}
 8009586:	b087      	sub	sp, #28
 8009588:	af00      	add	r7, sp, #0
 800958a:	60f8      	str	r0, [r7, #12]
 800958c:	60b9      	str	r1, [r7, #8]
 800958e:	4613      	mov	r3, r2
 8009590:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009592:	2300      	movs	r3, #0
 8009594:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009596:	2300      	movs	r3, #0
 8009598:	75fb      	strb	r3, [r7, #23]
 800959a:	e027      	b.n	80095ec <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	0f1b      	lsrs	r3, r3, #28
 80095a0:	2b09      	cmp	r3, #9
 80095a2:	d80b      	bhi.n	80095bc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	0f1b      	lsrs	r3, r3, #28
 80095a8:	b2da      	uxtb	r2, r3
 80095aa:	7dfb      	ldrb	r3, [r7, #23]
 80095ac:	005b      	lsls	r3, r3, #1
 80095ae:	4619      	mov	r1, r3
 80095b0:	68bb      	ldr	r3, [r7, #8]
 80095b2:	440b      	add	r3, r1
 80095b4:	3230      	adds	r2, #48	@ 0x30
 80095b6:	b2d2      	uxtb	r2, r2
 80095b8:	701a      	strb	r2, [r3, #0]
 80095ba:	e00a      	b.n	80095d2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	0f1b      	lsrs	r3, r3, #28
 80095c0:	b2da      	uxtb	r2, r3
 80095c2:	7dfb      	ldrb	r3, [r7, #23]
 80095c4:	005b      	lsls	r3, r3, #1
 80095c6:	4619      	mov	r1, r3
 80095c8:	68bb      	ldr	r3, [r7, #8]
 80095ca:	440b      	add	r3, r1
 80095cc:	3237      	adds	r2, #55	@ 0x37
 80095ce:	b2d2      	uxtb	r2, r2
 80095d0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	011b      	lsls	r3, r3, #4
 80095d6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80095d8:	7dfb      	ldrb	r3, [r7, #23]
 80095da:	005b      	lsls	r3, r3, #1
 80095dc:	3301      	adds	r3, #1
 80095de:	68ba      	ldr	r2, [r7, #8]
 80095e0:	4413      	add	r3, r2
 80095e2:	2200      	movs	r2, #0
 80095e4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80095e6:	7dfb      	ldrb	r3, [r7, #23]
 80095e8:	3301      	adds	r3, #1
 80095ea:	75fb      	strb	r3, [r7, #23]
 80095ec:	7dfa      	ldrb	r2, [r7, #23]
 80095ee:	79fb      	ldrb	r3, [r7, #7]
 80095f0:	429a      	cmp	r2, r3
 80095f2:	d3d3      	bcc.n	800959c <IntToUnicode+0x18>
  }
}
 80095f4:	bf00      	nop
 80095f6:	bf00      	nop
 80095f8:	371c      	adds	r7, #28
 80095fa:	46bd      	mov	sp, r7
 80095fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009600:	4770      	bx	lr
	...

08009604 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009604:	b580      	push	{r7, lr}
 8009606:	b08a      	sub	sp, #40	@ 0x28
 8009608:	af00      	add	r7, sp, #0
 800960a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800960c:	f107 0314 	add.w	r3, r7, #20
 8009610:	2200      	movs	r2, #0
 8009612:	601a      	str	r2, [r3, #0]
 8009614:	605a      	str	r2, [r3, #4]
 8009616:	609a      	str	r2, [r3, #8]
 8009618:	60da      	str	r2, [r3, #12]
 800961a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009624:	d13a      	bne.n	800969c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009626:	2300      	movs	r3, #0
 8009628:	613b      	str	r3, [r7, #16]
 800962a:	4b1e      	ldr	r3, [pc, #120]	@ (80096a4 <HAL_PCD_MspInit+0xa0>)
 800962c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800962e:	4a1d      	ldr	r2, [pc, #116]	@ (80096a4 <HAL_PCD_MspInit+0xa0>)
 8009630:	f043 0301 	orr.w	r3, r3, #1
 8009634:	6313      	str	r3, [r2, #48]	@ 0x30
 8009636:	4b1b      	ldr	r3, [pc, #108]	@ (80096a4 <HAL_PCD_MspInit+0xa0>)
 8009638:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800963a:	f003 0301 	and.w	r3, r3, #1
 800963e:	613b      	str	r3, [r7, #16]
 8009640:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA8     ------> USB_OTG_FS_SOF
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8009642:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8009646:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009648:	2302      	movs	r3, #2
 800964a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800964c:	2300      	movs	r3, #0
 800964e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009650:	2303      	movs	r3, #3
 8009652:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009654:	230a      	movs	r3, #10
 8009656:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009658:	f107 0314 	add.w	r3, r7, #20
 800965c:	4619      	mov	r1, r3
 800965e:	4812      	ldr	r0, [pc, #72]	@ (80096a8 <HAL_PCD_MspInit+0xa4>)
 8009660:	f7f8 ff32 	bl	80024c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009664:	4b0f      	ldr	r3, [pc, #60]	@ (80096a4 <HAL_PCD_MspInit+0xa0>)
 8009666:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009668:	4a0e      	ldr	r2, [pc, #56]	@ (80096a4 <HAL_PCD_MspInit+0xa0>)
 800966a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800966e:	6353      	str	r3, [r2, #52]	@ 0x34
 8009670:	2300      	movs	r3, #0
 8009672:	60fb      	str	r3, [r7, #12]
 8009674:	4b0b      	ldr	r3, [pc, #44]	@ (80096a4 <HAL_PCD_MspInit+0xa0>)
 8009676:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009678:	4a0a      	ldr	r2, [pc, #40]	@ (80096a4 <HAL_PCD_MspInit+0xa0>)
 800967a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800967e:	6453      	str	r3, [r2, #68]	@ 0x44
 8009680:	4b08      	ldr	r3, [pc, #32]	@ (80096a4 <HAL_PCD_MspInit+0xa0>)
 8009682:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009684:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009688:	60fb      	str	r3, [r7, #12]
 800968a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800968c:	2200      	movs	r2, #0
 800968e:	2100      	movs	r1, #0
 8009690:	2043      	movs	r0, #67	@ 0x43
 8009692:	f7f8 fafe 	bl	8001c92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009696:	2043      	movs	r0, #67	@ 0x43
 8009698:	f7f8 fb17 	bl	8001cca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800969c:	bf00      	nop
 800969e:	3728      	adds	r7, #40	@ 0x28
 80096a0:	46bd      	mov	sp, r7
 80096a2:	bd80      	pop	{r7, pc}
 80096a4:	40023800 	.word	0x40023800
 80096a8:	40020000 	.word	0x40020000

080096ac <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80096ac:	b580      	push	{r7, lr}
 80096ae:	b082      	sub	sp, #8
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80096c0:	4619      	mov	r1, r3
 80096c2:	4610      	mov	r0, r2
 80096c4:	f7fe fb25 	bl	8007d12 <USBD_LL_SetupStage>
}
 80096c8:	bf00      	nop
 80096ca:	3708      	adds	r7, #8
 80096cc:	46bd      	mov	sp, r7
 80096ce:	bd80      	pop	{r7, pc}

080096d0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80096d0:	b580      	push	{r7, lr}
 80096d2:	b082      	sub	sp, #8
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	6078      	str	r0, [r7, #4]
 80096d8:	460b      	mov	r3, r1
 80096da:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80096e2:	78fa      	ldrb	r2, [r7, #3]
 80096e4:	6879      	ldr	r1, [r7, #4]
 80096e6:	4613      	mov	r3, r2
 80096e8:	00db      	lsls	r3, r3, #3
 80096ea:	4413      	add	r3, r2
 80096ec:	009b      	lsls	r3, r3, #2
 80096ee:	440b      	add	r3, r1
 80096f0:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80096f4:	681a      	ldr	r2, [r3, #0]
 80096f6:	78fb      	ldrb	r3, [r7, #3]
 80096f8:	4619      	mov	r1, r3
 80096fa:	f7fe fb5f 	bl	8007dbc <USBD_LL_DataOutStage>
}
 80096fe:	bf00      	nop
 8009700:	3708      	adds	r7, #8
 8009702:	46bd      	mov	sp, r7
 8009704:	bd80      	pop	{r7, pc}

08009706 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009706:	b580      	push	{r7, lr}
 8009708:	b082      	sub	sp, #8
 800970a:	af00      	add	r7, sp, #0
 800970c:	6078      	str	r0, [r7, #4]
 800970e:	460b      	mov	r3, r1
 8009710:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8009718:	78fa      	ldrb	r2, [r7, #3]
 800971a:	6879      	ldr	r1, [r7, #4]
 800971c:	4613      	mov	r3, r2
 800971e:	00db      	lsls	r3, r3, #3
 8009720:	4413      	add	r3, r2
 8009722:	009b      	lsls	r3, r3, #2
 8009724:	440b      	add	r3, r1
 8009726:	3320      	adds	r3, #32
 8009728:	681a      	ldr	r2, [r3, #0]
 800972a:	78fb      	ldrb	r3, [r7, #3]
 800972c:	4619      	mov	r1, r3
 800972e:	f7fe fbf8 	bl	8007f22 <USBD_LL_DataInStage>
}
 8009732:	bf00      	nop
 8009734:	3708      	adds	r7, #8
 8009736:	46bd      	mov	sp, r7
 8009738:	bd80      	pop	{r7, pc}

0800973a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800973a:	b580      	push	{r7, lr}
 800973c:	b082      	sub	sp, #8
 800973e:	af00      	add	r7, sp, #0
 8009740:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009748:	4618      	mov	r0, r3
 800974a:	f7fe fd32 	bl	80081b2 <USBD_LL_SOF>
}
 800974e:	bf00      	nop
 8009750:	3708      	adds	r7, #8
 8009752:	46bd      	mov	sp, r7
 8009754:	bd80      	pop	{r7, pc}

08009756 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009756:	b580      	push	{r7, lr}
 8009758:	b084      	sub	sp, #16
 800975a:	af00      	add	r7, sp, #0
 800975c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800975e:	2301      	movs	r3, #1
 8009760:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	79db      	ldrb	r3, [r3, #7]
 8009766:	2b00      	cmp	r3, #0
 8009768:	d102      	bne.n	8009770 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800976a:	2300      	movs	r3, #0
 800976c:	73fb      	strb	r3, [r7, #15]
 800976e:	e008      	b.n	8009782 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	79db      	ldrb	r3, [r3, #7]
 8009774:	2b02      	cmp	r3, #2
 8009776:	d102      	bne.n	800977e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8009778:	2301      	movs	r3, #1
 800977a:	73fb      	strb	r3, [r7, #15]
 800977c:	e001      	b.n	8009782 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800977e:	f7f7 f8b9 	bl	80008f4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009788:	7bfa      	ldrb	r2, [r7, #15]
 800978a:	4611      	mov	r1, r2
 800978c:	4618      	mov	r0, r3
 800978e:	f7fe fccc 	bl	800812a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009798:	4618      	mov	r0, r3
 800979a:	f7fe fc74 	bl	8008086 <USBD_LL_Reset>
}
 800979e:	bf00      	nop
 80097a0:	3710      	adds	r7, #16
 80097a2:	46bd      	mov	sp, r7
 80097a4:	bd80      	pop	{r7, pc}
	...

080097a8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80097a8:	b580      	push	{r7, lr}
 80097aa:	b082      	sub	sp, #8
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80097b6:	4618      	mov	r0, r3
 80097b8:	f7fe fcc7 	bl	800814a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	687a      	ldr	r2, [r7, #4]
 80097c8:	6812      	ldr	r2, [r2, #0]
 80097ca:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80097ce:	f043 0301 	orr.w	r3, r3, #1
 80097d2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	7adb      	ldrb	r3, [r3, #11]
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d005      	beq.n	80097e8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80097dc:	4b04      	ldr	r3, [pc, #16]	@ (80097f0 <HAL_PCD_SuspendCallback+0x48>)
 80097de:	691b      	ldr	r3, [r3, #16]
 80097e0:	4a03      	ldr	r2, [pc, #12]	@ (80097f0 <HAL_PCD_SuspendCallback+0x48>)
 80097e2:	f043 0306 	orr.w	r3, r3, #6
 80097e6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80097e8:	bf00      	nop
 80097ea:	3708      	adds	r7, #8
 80097ec:	46bd      	mov	sp, r7
 80097ee:	bd80      	pop	{r7, pc}
 80097f0:	e000ed00 	.word	0xe000ed00

080097f4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80097f4:	b580      	push	{r7, lr}
 80097f6:	b082      	sub	sp, #8
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009802:	4618      	mov	r0, r3
 8009804:	f7fe fcbd 	bl	8008182 <USBD_LL_Resume>
}
 8009808:	bf00      	nop
 800980a:	3708      	adds	r7, #8
 800980c:	46bd      	mov	sp, r7
 800980e:	bd80      	pop	{r7, pc}

08009810 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009810:	b580      	push	{r7, lr}
 8009812:	b082      	sub	sp, #8
 8009814:	af00      	add	r7, sp, #0
 8009816:	6078      	str	r0, [r7, #4]
 8009818:	460b      	mov	r3, r1
 800981a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009822:	78fa      	ldrb	r2, [r7, #3]
 8009824:	4611      	mov	r1, r2
 8009826:	4618      	mov	r0, r3
 8009828:	f7fe fd15 	bl	8008256 <USBD_LL_IsoOUTIncomplete>
}
 800982c:	bf00      	nop
 800982e:	3708      	adds	r7, #8
 8009830:	46bd      	mov	sp, r7
 8009832:	bd80      	pop	{r7, pc}

08009834 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009834:	b580      	push	{r7, lr}
 8009836:	b082      	sub	sp, #8
 8009838:	af00      	add	r7, sp, #0
 800983a:	6078      	str	r0, [r7, #4]
 800983c:	460b      	mov	r3, r1
 800983e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009846:	78fa      	ldrb	r2, [r7, #3]
 8009848:	4611      	mov	r1, r2
 800984a:	4618      	mov	r0, r3
 800984c:	f7fe fcd1 	bl	80081f2 <USBD_LL_IsoINIncomplete>
}
 8009850:	bf00      	nop
 8009852:	3708      	adds	r7, #8
 8009854:	46bd      	mov	sp, r7
 8009856:	bd80      	pop	{r7, pc}

08009858 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009858:	b580      	push	{r7, lr}
 800985a:	b082      	sub	sp, #8
 800985c:	af00      	add	r7, sp, #0
 800985e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009866:	4618      	mov	r0, r3
 8009868:	f7fe fd27 	bl	80082ba <USBD_LL_DevConnected>
}
 800986c:	bf00      	nop
 800986e:	3708      	adds	r7, #8
 8009870:	46bd      	mov	sp, r7
 8009872:	bd80      	pop	{r7, pc}

08009874 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009874:	b580      	push	{r7, lr}
 8009876:	b082      	sub	sp, #8
 8009878:	af00      	add	r7, sp, #0
 800987a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009882:	4618      	mov	r0, r3
 8009884:	f7fe fd24 	bl	80082d0 <USBD_LL_DevDisconnected>
}
 8009888:	bf00      	nop
 800988a:	3708      	adds	r7, #8
 800988c:	46bd      	mov	sp, r7
 800988e:	bd80      	pop	{r7, pc}

08009890 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009890:	b580      	push	{r7, lr}
 8009892:	b082      	sub	sp, #8
 8009894:	af00      	add	r7, sp, #0
 8009896:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	781b      	ldrb	r3, [r3, #0]
 800989c:	2b00      	cmp	r3, #0
 800989e:	d13c      	bne.n	800991a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80098a0:	4a20      	ldr	r2, [pc, #128]	@ (8009924 <USBD_LL_Init+0x94>)
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	4a1e      	ldr	r2, [pc, #120]	@ (8009924 <USBD_LL_Init+0x94>)
 80098ac:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80098b0:	4b1c      	ldr	r3, [pc, #112]	@ (8009924 <USBD_LL_Init+0x94>)
 80098b2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80098b6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80098b8:	4b1a      	ldr	r3, [pc, #104]	@ (8009924 <USBD_LL_Init+0x94>)
 80098ba:	2204      	movs	r2, #4
 80098bc:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80098be:	4b19      	ldr	r3, [pc, #100]	@ (8009924 <USBD_LL_Init+0x94>)
 80098c0:	2202      	movs	r2, #2
 80098c2:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80098c4:	4b17      	ldr	r3, [pc, #92]	@ (8009924 <USBD_LL_Init+0x94>)
 80098c6:	2200      	movs	r2, #0
 80098c8:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80098ca:	4b16      	ldr	r3, [pc, #88]	@ (8009924 <USBD_LL_Init+0x94>)
 80098cc:	2202      	movs	r2, #2
 80098ce:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80098d0:	4b14      	ldr	r3, [pc, #80]	@ (8009924 <USBD_LL_Init+0x94>)
 80098d2:	2201      	movs	r2, #1
 80098d4:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80098d6:	4b13      	ldr	r3, [pc, #76]	@ (8009924 <USBD_LL_Init+0x94>)
 80098d8:	2200      	movs	r2, #0
 80098da:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80098dc:	4b11      	ldr	r3, [pc, #68]	@ (8009924 <USBD_LL_Init+0x94>)
 80098de:	2200      	movs	r2, #0
 80098e0:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80098e2:	4b10      	ldr	r3, [pc, #64]	@ (8009924 <USBD_LL_Init+0x94>)
 80098e4:	2200      	movs	r2, #0
 80098e6:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80098e8:	4b0e      	ldr	r3, [pc, #56]	@ (8009924 <USBD_LL_Init+0x94>)
 80098ea:	2200      	movs	r2, #0
 80098ec:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80098ee:	480d      	ldr	r0, [pc, #52]	@ (8009924 <USBD_LL_Init+0x94>)
 80098f0:	f7f8 ffe2 	bl	80028b8 <HAL_PCD_Init>
 80098f4:	4603      	mov	r3, r0
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d001      	beq.n	80098fe <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80098fa:	f7f6 fffb 	bl	80008f4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80098fe:	2180      	movs	r1, #128	@ 0x80
 8009900:	4808      	ldr	r0, [pc, #32]	@ (8009924 <USBD_LL_Init+0x94>)
 8009902:	f7fa fa0c 	bl	8003d1e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8009906:	2240      	movs	r2, #64	@ 0x40
 8009908:	2100      	movs	r1, #0
 800990a:	4806      	ldr	r0, [pc, #24]	@ (8009924 <USBD_LL_Init+0x94>)
 800990c:	f7fa f9c0 	bl	8003c90 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009910:	2280      	movs	r2, #128	@ 0x80
 8009912:	2101      	movs	r1, #1
 8009914:	4803      	ldr	r0, [pc, #12]	@ (8009924 <USBD_LL_Init+0x94>)
 8009916:	f7fa f9bb 	bl	8003c90 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800991a:	2300      	movs	r3, #0
}
 800991c:	4618      	mov	r0, r3
 800991e:	3708      	adds	r7, #8
 8009920:	46bd      	mov	sp, r7
 8009922:	bd80      	pop	{r7, pc}
 8009924:	2000a9f4 	.word	0x2000a9f4

08009928 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009928:	b580      	push	{r7, lr}
 800992a:	b084      	sub	sp, #16
 800992c:	af00      	add	r7, sp, #0
 800992e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009930:	2300      	movs	r3, #0
 8009932:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009934:	2300      	movs	r3, #0
 8009936:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800993e:	4618      	mov	r0, r3
 8009940:	f7f9 f8c9 	bl	8002ad6 <HAL_PCD_Start>
 8009944:	4603      	mov	r3, r0
 8009946:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009948:	7bfb      	ldrb	r3, [r7, #15]
 800994a:	4618      	mov	r0, r3
 800994c:	f000 f942 	bl	8009bd4 <USBD_Get_USB_Status>
 8009950:	4603      	mov	r3, r0
 8009952:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009954:	7bbb      	ldrb	r3, [r7, #14]
}
 8009956:	4618      	mov	r0, r3
 8009958:	3710      	adds	r7, #16
 800995a:	46bd      	mov	sp, r7
 800995c:	bd80      	pop	{r7, pc}

0800995e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800995e:	b580      	push	{r7, lr}
 8009960:	b084      	sub	sp, #16
 8009962:	af00      	add	r7, sp, #0
 8009964:	6078      	str	r0, [r7, #4]
 8009966:	4608      	mov	r0, r1
 8009968:	4611      	mov	r1, r2
 800996a:	461a      	mov	r2, r3
 800996c:	4603      	mov	r3, r0
 800996e:	70fb      	strb	r3, [r7, #3]
 8009970:	460b      	mov	r3, r1
 8009972:	70bb      	strb	r3, [r7, #2]
 8009974:	4613      	mov	r3, r2
 8009976:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009978:	2300      	movs	r3, #0
 800997a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800997c:	2300      	movs	r3, #0
 800997e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8009986:	78bb      	ldrb	r3, [r7, #2]
 8009988:	883a      	ldrh	r2, [r7, #0]
 800998a:	78f9      	ldrb	r1, [r7, #3]
 800998c:	f7f9 fd9d 	bl	80034ca <HAL_PCD_EP_Open>
 8009990:	4603      	mov	r3, r0
 8009992:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009994:	7bfb      	ldrb	r3, [r7, #15]
 8009996:	4618      	mov	r0, r3
 8009998:	f000 f91c 	bl	8009bd4 <USBD_Get_USB_Status>
 800999c:	4603      	mov	r3, r0
 800999e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80099a0:	7bbb      	ldrb	r3, [r7, #14]
}
 80099a2:	4618      	mov	r0, r3
 80099a4:	3710      	adds	r7, #16
 80099a6:	46bd      	mov	sp, r7
 80099a8:	bd80      	pop	{r7, pc}

080099aa <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80099aa:	b580      	push	{r7, lr}
 80099ac:	b084      	sub	sp, #16
 80099ae:	af00      	add	r7, sp, #0
 80099b0:	6078      	str	r0, [r7, #4]
 80099b2:	460b      	mov	r3, r1
 80099b4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80099b6:	2300      	movs	r3, #0
 80099b8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80099ba:	2300      	movs	r3, #0
 80099bc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80099c4:	78fa      	ldrb	r2, [r7, #3]
 80099c6:	4611      	mov	r1, r2
 80099c8:	4618      	mov	r0, r3
 80099ca:	f7f9 fde6 	bl	800359a <HAL_PCD_EP_Close>
 80099ce:	4603      	mov	r3, r0
 80099d0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80099d2:	7bfb      	ldrb	r3, [r7, #15]
 80099d4:	4618      	mov	r0, r3
 80099d6:	f000 f8fd 	bl	8009bd4 <USBD_Get_USB_Status>
 80099da:	4603      	mov	r3, r0
 80099dc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80099de:	7bbb      	ldrb	r3, [r7, #14]
}
 80099e0:	4618      	mov	r0, r3
 80099e2:	3710      	adds	r7, #16
 80099e4:	46bd      	mov	sp, r7
 80099e6:	bd80      	pop	{r7, pc}

080099e8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80099e8:	b580      	push	{r7, lr}
 80099ea:	b084      	sub	sp, #16
 80099ec:	af00      	add	r7, sp, #0
 80099ee:	6078      	str	r0, [r7, #4]
 80099f0:	460b      	mov	r3, r1
 80099f2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80099f4:	2300      	movs	r3, #0
 80099f6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80099f8:	2300      	movs	r3, #0
 80099fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009a02:	78fa      	ldrb	r2, [r7, #3]
 8009a04:	4611      	mov	r1, r2
 8009a06:	4618      	mov	r0, r3
 8009a08:	f7f9 fe9e 	bl	8003748 <HAL_PCD_EP_SetStall>
 8009a0c:	4603      	mov	r3, r0
 8009a0e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009a10:	7bfb      	ldrb	r3, [r7, #15]
 8009a12:	4618      	mov	r0, r3
 8009a14:	f000 f8de 	bl	8009bd4 <USBD_Get_USB_Status>
 8009a18:	4603      	mov	r3, r0
 8009a1a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009a1c:	7bbb      	ldrb	r3, [r7, #14]
}
 8009a1e:	4618      	mov	r0, r3
 8009a20:	3710      	adds	r7, #16
 8009a22:	46bd      	mov	sp, r7
 8009a24:	bd80      	pop	{r7, pc}

08009a26 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009a26:	b580      	push	{r7, lr}
 8009a28:	b084      	sub	sp, #16
 8009a2a:	af00      	add	r7, sp, #0
 8009a2c:	6078      	str	r0, [r7, #4]
 8009a2e:	460b      	mov	r3, r1
 8009a30:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a32:	2300      	movs	r3, #0
 8009a34:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a36:	2300      	movs	r3, #0
 8009a38:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009a40:	78fa      	ldrb	r2, [r7, #3]
 8009a42:	4611      	mov	r1, r2
 8009a44:	4618      	mov	r0, r3
 8009a46:	f7f9 fee2 	bl	800380e <HAL_PCD_EP_ClrStall>
 8009a4a:	4603      	mov	r3, r0
 8009a4c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009a4e:	7bfb      	ldrb	r3, [r7, #15]
 8009a50:	4618      	mov	r0, r3
 8009a52:	f000 f8bf 	bl	8009bd4 <USBD_Get_USB_Status>
 8009a56:	4603      	mov	r3, r0
 8009a58:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009a5a:	7bbb      	ldrb	r3, [r7, #14]
}
 8009a5c:	4618      	mov	r0, r3
 8009a5e:	3710      	adds	r7, #16
 8009a60:	46bd      	mov	sp, r7
 8009a62:	bd80      	pop	{r7, pc}

08009a64 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009a64:	b480      	push	{r7}
 8009a66:	b085      	sub	sp, #20
 8009a68:	af00      	add	r7, sp, #0
 8009a6a:	6078      	str	r0, [r7, #4]
 8009a6c:	460b      	mov	r3, r1
 8009a6e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009a76:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009a78:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	da0b      	bge.n	8009a98 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009a80:	78fb      	ldrb	r3, [r7, #3]
 8009a82:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009a86:	68f9      	ldr	r1, [r7, #12]
 8009a88:	4613      	mov	r3, r2
 8009a8a:	00db      	lsls	r3, r3, #3
 8009a8c:	4413      	add	r3, r2
 8009a8e:	009b      	lsls	r3, r3, #2
 8009a90:	440b      	add	r3, r1
 8009a92:	3316      	adds	r3, #22
 8009a94:	781b      	ldrb	r3, [r3, #0]
 8009a96:	e00b      	b.n	8009ab0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009a98:	78fb      	ldrb	r3, [r7, #3]
 8009a9a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009a9e:	68f9      	ldr	r1, [r7, #12]
 8009aa0:	4613      	mov	r3, r2
 8009aa2:	00db      	lsls	r3, r3, #3
 8009aa4:	4413      	add	r3, r2
 8009aa6:	009b      	lsls	r3, r3, #2
 8009aa8:	440b      	add	r3, r1
 8009aaa:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8009aae:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009ab0:	4618      	mov	r0, r3
 8009ab2:	3714      	adds	r7, #20
 8009ab4:	46bd      	mov	sp, r7
 8009ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aba:	4770      	bx	lr

08009abc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009abc:	b580      	push	{r7, lr}
 8009abe:	b084      	sub	sp, #16
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	6078      	str	r0, [r7, #4]
 8009ac4:	460b      	mov	r3, r1
 8009ac6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ac8:	2300      	movs	r3, #0
 8009aca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009acc:	2300      	movs	r3, #0
 8009ace:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009ad6:	78fa      	ldrb	r2, [r7, #3]
 8009ad8:	4611      	mov	r1, r2
 8009ada:	4618      	mov	r0, r3
 8009adc:	f7f9 fcd1 	bl	8003482 <HAL_PCD_SetAddress>
 8009ae0:	4603      	mov	r3, r0
 8009ae2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009ae4:	7bfb      	ldrb	r3, [r7, #15]
 8009ae6:	4618      	mov	r0, r3
 8009ae8:	f000 f874 	bl	8009bd4 <USBD_Get_USB_Status>
 8009aec:	4603      	mov	r3, r0
 8009aee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009af0:	7bbb      	ldrb	r3, [r7, #14]
}
 8009af2:	4618      	mov	r0, r3
 8009af4:	3710      	adds	r7, #16
 8009af6:	46bd      	mov	sp, r7
 8009af8:	bd80      	pop	{r7, pc}

08009afa <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009afa:	b580      	push	{r7, lr}
 8009afc:	b086      	sub	sp, #24
 8009afe:	af00      	add	r7, sp, #0
 8009b00:	60f8      	str	r0, [r7, #12]
 8009b02:	607a      	str	r2, [r7, #4]
 8009b04:	603b      	str	r3, [r7, #0]
 8009b06:	460b      	mov	r3, r1
 8009b08:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b0a:	2300      	movs	r3, #0
 8009b0c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b0e:	2300      	movs	r3, #0
 8009b10:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8009b18:	7af9      	ldrb	r1, [r7, #11]
 8009b1a:	683b      	ldr	r3, [r7, #0]
 8009b1c:	687a      	ldr	r2, [r7, #4]
 8009b1e:	f7f9 fdd9 	bl	80036d4 <HAL_PCD_EP_Transmit>
 8009b22:	4603      	mov	r3, r0
 8009b24:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009b26:	7dfb      	ldrb	r3, [r7, #23]
 8009b28:	4618      	mov	r0, r3
 8009b2a:	f000 f853 	bl	8009bd4 <USBD_Get_USB_Status>
 8009b2e:	4603      	mov	r3, r0
 8009b30:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009b32:	7dbb      	ldrb	r3, [r7, #22]
}
 8009b34:	4618      	mov	r0, r3
 8009b36:	3718      	adds	r7, #24
 8009b38:	46bd      	mov	sp, r7
 8009b3a:	bd80      	pop	{r7, pc}

08009b3c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009b3c:	b580      	push	{r7, lr}
 8009b3e:	b086      	sub	sp, #24
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	60f8      	str	r0, [r7, #12]
 8009b44:	607a      	str	r2, [r7, #4]
 8009b46:	603b      	str	r3, [r7, #0]
 8009b48:	460b      	mov	r3, r1
 8009b4a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b4c:	2300      	movs	r3, #0
 8009b4e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b50:	2300      	movs	r3, #0
 8009b52:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8009b5a:	7af9      	ldrb	r1, [r7, #11]
 8009b5c:	683b      	ldr	r3, [r7, #0]
 8009b5e:	687a      	ldr	r2, [r7, #4]
 8009b60:	f7f9 fd65 	bl	800362e <HAL_PCD_EP_Receive>
 8009b64:	4603      	mov	r3, r0
 8009b66:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009b68:	7dfb      	ldrb	r3, [r7, #23]
 8009b6a:	4618      	mov	r0, r3
 8009b6c:	f000 f832 	bl	8009bd4 <USBD_Get_USB_Status>
 8009b70:	4603      	mov	r3, r0
 8009b72:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009b74:	7dbb      	ldrb	r3, [r7, #22]
}
 8009b76:	4618      	mov	r0, r3
 8009b78:	3718      	adds	r7, #24
 8009b7a:	46bd      	mov	sp, r7
 8009b7c:	bd80      	pop	{r7, pc}

08009b7e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009b7e:	b580      	push	{r7, lr}
 8009b80:	b082      	sub	sp, #8
 8009b82:	af00      	add	r7, sp, #0
 8009b84:	6078      	str	r0, [r7, #4]
 8009b86:	460b      	mov	r3, r1
 8009b88:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009b90:	78fa      	ldrb	r2, [r7, #3]
 8009b92:	4611      	mov	r1, r2
 8009b94:	4618      	mov	r0, r3
 8009b96:	f7f9 fd85 	bl	80036a4 <HAL_PCD_EP_GetRxCount>
 8009b9a:	4603      	mov	r3, r0
}
 8009b9c:	4618      	mov	r0, r3
 8009b9e:	3708      	adds	r7, #8
 8009ba0:	46bd      	mov	sp, r7
 8009ba2:	bd80      	pop	{r7, pc}

08009ba4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009ba4:	b480      	push	{r7}
 8009ba6:	b083      	sub	sp, #12
 8009ba8:	af00      	add	r7, sp, #0
 8009baa:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009bac:	4b03      	ldr	r3, [pc, #12]	@ (8009bbc <USBD_static_malloc+0x18>)
}
 8009bae:	4618      	mov	r0, r3
 8009bb0:	370c      	adds	r7, #12
 8009bb2:	46bd      	mov	sp, r7
 8009bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bb8:	4770      	bx	lr
 8009bba:	bf00      	nop
 8009bbc:	2000aed8 	.word	0x2000aed8

08009bc0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009bc0:	b480      	push	{r7}
 8009bc2:	b083      	sub	sp, #12
 8009bc4:	af00      	add	r7, sp, #0
 8009bc6:	6078      	str	r0, [r7, #4]

}
 8009bc8:	bf00      	nop
 8009bca:	370c      	adds	r7, #12
 8009bcc:	46bd      	mov	sp, r7
 8009bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd2:	4770      	bx	lr

08009bd4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009bd4:	b480      	push	{r7}
 8009bd6:	b085      	sub	sp, #20
 8009bd8:	af00      	add	r7, sp, #0
 8009bda:	4603      	mov	r3, r0
 8009bdc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009bde:	2300      	movs	r3, #0
 8009be0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009be2:	79fb      	ldrb	r3, [r7, #7]
 8009be4:	2b03      	cmp	r3, #3
 8009be6:	d817      	bhi.n	8009c18 <USBD_Get_USB_Status+0x44>
 8009be8:	a201      	add	r2, pc, #4	@ (adr r2, 8009bf0 <USBD_Get_USB_Status+0x1c>)
 8009bea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bee:	bf00      	nop
 8009bf0:	08009c01 	.word	0x08009c01
 8009bf4:	08009c07 	.word	0x08009c07
 8009bf8:	08009c0d 	.word	0x08009c0d
 8009bfc:	08009c13 	.word	0x08009c13
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009c00:	2300      	movs	r3, #0
 8009c02:	73fb      	strb	r3, [r7, #15]
    break;
 8009c04:	e00b      	b.n	8009c1e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009c06:	2303      	movs	r3, #3
 8009c08:	73fb      	strb	r3, [r7, #15]
    break;
 8009c0a:	e008      	b.n	8009c1e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009c0c:	2301      	movs	r3, #1
 8009c0e:	73fb      	strb	r3, [r7, #15]
    break;
 8009c10:	e005      	b.n	8009c1e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009c12:	2303      	movs	r3, #3
 8009c14:	73fb      	strb	r3, [r7, #15]
    break;
 8009c16:	e002      	b.n	8009c1e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009c18:	2303      	movs	r3, #3
 8009c1a:	73fb      	strb	r3, [r7, #15]
    break;
 8009c1c:	bf00      	nop
  }
  return usb_status;
 8009c1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c20:	4618      	mov	r0, r3
 8009c22:	3714      	adds	r7, #20
 8009c24:	46bd      	mov	sp, r7
 8009c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c2a:	4770      	bx	lr

08009c2c <std>:
 8009c2c:	2300      	movs	r3, #0
 8009c2e:	b510      	push	{r4, lr}
 8009c30:	4604      	mov	r4, r0
 8009c32:	e9c0 3300 	strd	r3, r3, [r0]
 8009c36:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009c3a:	6083      	str	r3, [r0, #8]
 8009c3c:	8181      	strh	r1, [r0, #12]
 8009c3e:	6643      	str	r3, [r0, #100]	@ 0x64
 8009c40:	81c2      	strh	r2, [r0, #14]
 8009c42:	6183      	str	r3, [r0, #24]
 8009c44:	4619      	mov	r1, r3
 8009c46:	2208      	movs	r2, #8
 8009c48:	305c      	adds	r0, #92	@ 0x5c
 8009c4a:	f000 fa19 	bl	800a080 <memset>
 8009c4e:	4b0d      	ldr	r3, [pc, #52]	@ (8009c84 <std+0x58>)
 8009c50:	6263      	str	r3, [r4, #36]	@ 0x24
 8009c52:	4b0d      	ldr	r3, [pc, #52]	@ (8009c88 <std+0x5c>)
 8009c54:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009c56:	4b0d      	ldr	r3, [pc, #52]	@ (8009c8c <std+0x60>)
 8009c58:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009c5a:	4b0d      	ldr	r3, [pc, #52]	@ (8009c90 <std+0x64>)
 8009c5c:	6323      	str	r3, [r4, #48]	@ 0x30
 8009c5e:	4b0d      	ldr	r3, [pc, #52]	@ (8009c94 <std+0x68>)
 8009c60:	6224      	str	r4, [r4, #32]
 8009c62:	429c      	cmp	r4, r3
 8009c64:	d006      	beq.n	8009c74 <std+0x48>
 8009c66:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009c6a:	4294      	cmp	r4, r2
 8009c6c:	d002      	beq.n	8009c74 <std+0x48>
 8009c6e:	33d0      	adds	r3, #208	@ 0xd0
 8009c70:	429c      	cmp	r4, r3
 8009c72:	d105      	bne.n	8009c80 <std+0x54>
 8009c74:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009c78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009c7c:	f000 ba9e 	b.w	800a1bc <__retarget_lock_init_recursive>
 8009c80:	bd10      	pop	{r4, pc}
 8009c82:	bf00      	nop
 8009c84:	08009ed1 	.word	0x08009ed1
 8009c88:	08009ef3 	.word	0x08009ef3
 8009c8c:	08009f2b 	.word	0x08009f2b
 8009c90:	08009f4f 	.word	0x08009f4f
 8009c94:	2000b0f8 	.word	0x2000b0f8

08009c98 <stdio_exit_handler>:
 8009c98:	4a02      	ldr	r2, [pc, #8]	@ (8009ca4 <stdio_exit_handler+0xc>)
 8009c9a:	4903      	ldr	r1, [pc, #12]	@ (8009ca8 <stdio_exit_handler+0x10>)
 8009c9c:	4803      	ldr	r0, [pc, #12]	@ (8009cac <stdio_exit_handler+0x14>)
 8009c9e:	f000 b869 	b.w	8009d74 <_fwalk_sglue>
 8009ca2:	bf00      	nop
 8009ca4:	200000fc 	.word	0x200000fc
 8009ca8:	0800ad29 	.word	0x0800ad29
 8009cac:	2000010c 	.word	0x2000010c

08009cb0 <cleanup_stdio>:
 8009cb0:	6841      	ldr	r1, [r0, #4]
 8009cb2:	4b0c      	ldr	r3, [pc, #48]	@ (8009ce4 <cleanup_stdio+0x34>)
 8009cb4:	4299      	cmp	r1, r3
 8009cb6:	b510      	push	{r4, lr}
 8009cb8:	4604      	mov	r4, r0
 8009cba:	d001      	beq.n	8009cc0 <cleanup_stdio+0x10>
 8009cbc:	f001 f834 	bl	800ad28 <_fflush_r>
 8009cc0:	68a1      	ldr	r1, [r4, #8]
 8009cc2:	4b09      	ldr	r3, [pc, #36]	@ (8009ce8 <cleanup_stdio+0x38>)
 8009cc4:	4299      	cmp	r1, r3
 8009cc6:	d002      	beq.n	8009cce <cleanup_stdio+0x1e>
 8009cc8:	4620      	mov	r0, r4
 8009cca:	f001 f82d 	bl	800ad28 <_fflush_r>
 8009cce:	68e1      	ldr	r1, [r4, #12]
 8009cd0:	4b06      	ldr	r3, [pc, #24]	@ (8009cec <cleanup_stdio+0x3c>)
 8009cd2:	4299      	cmp	r1, r3
 8009cd4:	d004      	beq.n	8009ce0 <cleanup_stdio+0x30>
 8009cd6:	4620      	mov	r0, r4
 8009cd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009cdc:	f001 b824 	b.w	800ad28 <_fflush_r>
 8009ce0:	bd10      	pop	{r4, pc}
 8009ce2:	bf00      	nop
 8009ce4:	2000b0f8 	.word	0x2000b0f8
 8009ce8:	2000b160 	.word	0x2000b160
 8009cec:	2000b1c8 	.word	0x2000b1c8

08009cf0 <global_stdio_init.part.0>:
 8009cf0:	b510      	push	{r4, lr}
 8009cf2:	4b0b      	ldr	r3, [pc, #44]	@ (8009d20 <global_stdio_init.part.0+0x30>)
 8009cf4:	4c0b      	ldr	r4, [pc, #44]	@ (8009d24 <global_stdio_init.part.0+0x34>)
 8009cf6:	4a0c      	ldr	r2, [pc, #48]	@ (8009d28 <global_stdio_init.part.0+0x38>)
 8009cf8:	601a      	str	r2, [r3, #0]
 8009cfa:	4620      	mov	r0, r4
 8009cfc:	2200      	movs	r2, #0
 8009cfe:	2104      	movs	r1, #4
 8009d00:	f7ff ff94 	bl	8009c2c <std>
 8009d04:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009d08:	2201      	movs	r2, #1
 8009d0a:	2109      	movs	r1, #9
 8009d0c:	f7ff ff8e 	bl	8009c2c <std>
 8009d10:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009d14:	2202      	movs	r2, #2
 8009d16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009d1a:	2112      	movs	r1, #18
 8009d1c:	f7ff bf86 	b.w	8009c2c <std>
 8009d20:	2000b230 	.word	0x2000b230
 8009d24:	2000b0f8 	.word	0x2000b0f8
 8009d28:	08009c99 	.word	0x08009c99

08009d2c <__sfp_lock_acquire>:
 8009d2c:	4801      	ldr	r0, [pc, #4]	@ (8009d34 <__sfp_lock_acquire+0x8>)
 8009d2e:	f000 ba46 	b.w	800a1be <__retarget_lock_acquire_recursive>
 8009d32:	bf00      	nop
 8009d34:	2000b239 	.word	0x2000b239

08009d38 <__sfp_lock_release>:
 8009d38:	4801      	ldr	r0, [pc, #4]	@ (8009d40 <__sfp_lock_release+0x8>)
 8009d3a:	f000 ba41 	b.w	800a1c0 <__retarget_lock_release_recursive>
 8009d3e:	bf00      	nop
 8009d40:	2000b239 	.word	0x2000b239

08009d44 <__sinit>:
 8009d44:	b510      	push	{r4, lr}
 8009d46:	4604      	mov	r4, r0
 8009d48:	f7ff fff0 	bl	8009d2c <__sfp_lock_acquire>
 8009d4c:	6a23      	ldr	r3, [r4, #32]
 8009d4e:	b11b      	cbz	r3, 8009d58 <__sinit+0x14>
 8009d50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009d54:	f7ff bff0 	b.w	8009d38 <__sfp_lock_release>
 8009d58:	4b04      	ldr	r3, [pc, #16]	@ (8009d6c <__sinit+0x28>)
 8009d5a:	6223      	str	r3, [r4, #32]
 8009d5c:	4b04      	ldr	r3, [pc, #16]	@ (8009d70 <__sinit+0x2c>)
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d1f5      	bne.n	8009d50 <__sinit+0xc>
 8009d64:	f7ff ffc4 	bl	8009cf0 <global_stdio_init.part.0>
 8009d68:	e7f2      	b.n	8009d50 <__sinit+0xc>
 8009d6a:	bf00      	nop
 8009d6c:	08009cb1 	.word	0x08009cb1
 8009d70:	2000b230 	.word	0x2000b230

08009d74 <_fwalk_sglue>:
 8009d74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d78:	4607      	mov	r7, r0
 8009d7a:	4688      	mov	r8, r1
 8009d7c:	4614      	mov	r4, r2
 8009d7e:	2600      	movs	r6, #0
 8009d80:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009d84:	f1b9 0901 	subs.w	r9, r9, #1
 8009d88:	d505      	bpl.n	8009d96 <_fwalk_sglue+0x22>
 8009d8a:	6824      	ldr	r4, [r4, #0]
 8009d8c:	2c00      	cmp	r4, #0
 8009d8e:	d1f7      	bne.n	8009d80 <_fwalk_sglue+0xc>
 8009d90:	4630      	mov	r0, r6
 8009d92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009d96:	89ab      	ldrh	r3, [r5, #12]
 8009d98:	2b01      	cmp	r3, #1
 8009d9a:	d907      	bls.n	8009dac <_fwalk_sglue+0x38>
 8009d9c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009da0:	3301      	adds	r3, #1
 8009da2:	d003      	beq.n	8009dac <_fwalk_sglue+0x38>
 8009da4:	4629      	mov	r1, r5
 8009da6:	4638      	mov	r0, r7
 8009da8:	47c0      	blx	r8
 8009daa:	4306      	orrs	r6, r0
 8009dac:	3568      	adds	r5, #104	@ 0x68
 8009dae:	e7e9      	b.n	8009d84 <_fwalk_sglue+0x10>

08009db0 <iprintf>:
 8009db0:	b40f      	push	{r0, r1, r2, r3}
 8009db2:	b507      	push	{r0, r1, r2, lr}
 8009db4:	4906      	ldr	r1, [pc, #24]	@ (8009dd0 <iprintf+0x20>)
 8009db6:	ab04      	add	r3, sp, #16
 8009db8:	6808      	ldr	r0, [r1, #0]
 8009dba:	f853 2b04 	ldr.w	r2, [r3], #4
 8009dbe:	6881      	ldr	r1, [r0, #8]
 8009dc0:	9301      	str	r3, [sp, #4]
 8009dc2:	f000 fc87 	bl	800a6d4 <_vfiprintf_r>
 8009dc6:	b003      	add	sp, #12
 8009dc8:	f85d eb04 	ldr.w	lr, [sp], #4
 8009dcc:	b004      	add	sp, #16
 8009dce:	4770      	bx	lr
 8009dd0:	20000108 	.word	0x20000108

08009dd4 <_puts_r>:
 8009dd4:	6a03      	ldr	r3, [r0, #32]
 8009dd6:	b570      	push	{r4, r5, r6, lr}
 8009dd8:	6884      	ldr	r4, [r0, #8]
 8009dda:	4605      	mov	r5, r0
 8009ddc:	460e      	mov	r6, r1
 8009dde:	b90b      	cbnz	r3, 8009de4 <_puts_r+0x10>
 8009de0:	f7ff ffb0 	bl	8009d44 <__sinit>
 8009de4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009de6:	07db      	lsls	r3, r3, #31
 8009de8:	d405      	bmi.n	8009df6 <_puts_r+0x22>
 8009dea:	89a3      	ldrh	r3, [r4, #12]
 8009dec:	0598      	lsls	r0, r3, #22
 8009dee:	d402      	bmi.n	8009df6 <_puts_r+0x22>
 8009df0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009df2:	f000 f9e4 	bl	800a1be <__retarget_lock_acquire_recursive>
 8009df6:	89a3      	ldrh	r3, [r4, #12]
 8009df8:	0719      	lsls	r1, r3, #28
 8009dfa:	d502      	bpl.n	8009e02 <_puts_r+0x2e>
 8009dfc:	6923      	ldr	r3, [r4, #16]
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d135      	bne.n	8009e6e <_puts_r+0x9a>
 8009e02:	4621      	mov	r1, r4
 8009e04:	4628      	mov	r0, r5
 8009e06:	f000 f8e5 	bl	8009fd4 <__swsetup_r>
 8009e0a:	b380      	cbz	r0, 8009e6e <_puts_r+0x9a>
 8009e0c:	f04f 35ff 	mov.w	r5, #4294967295
 8009e10:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009e12:	07da      	lsls	r2, r3, #31
 8009e14:	d405      	bmi.n	8009e22 <_puts_r+0x4e>
 8009e16:	89a3      	ldrh	r3, [r4, #12]
 8009e18:	059b      	lsls	r3, r3, #22
 8009e1a:	d402      	bmi.n	8009e22 <_puts_r+0x4e>
 8009e1c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009e1e:	f000 f9cf 	bl	800a1c0 <__retarget_lock_release_recursive>
 8009e22:	4628      	mov	r0, r5
 8009e24:	bd70      	pop	{r4, r5, r6, pc}
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	da04      	bge.n	8009e34 <_puts_r+0x60>
 8009e2a:	69a2      	ldr	r2, [r4, #24]
 8009e2c:	429a      	cmp	r2, r3
 8009e2e:	dc17      	bgt.n	8009e60 <_puts_r+0x8c>
 8009e30:	290a      	cmp	r1, #10
 8009e32:	d015      	beq.n	8009e60 <_puts_r+0x8c>
 8009e34:	6823      	ldr	r3, [r4, #0]
 8009e36:	1c5a      	adds	r2, r3, #1
 8009e38:	6022      	str	r2, [r4, #0]
 8009e3a:	7019      	strb	r1, [r3, #0]
 8009e3c:	68a3      	ldr	r3, [r4, #8]
 8009e3e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009e42:	3b01      	subs	r3, #1
 8009e44:	60a3      	str	r3, [r4, #8]
 8009e46:	2900      	cmp	r1, #0
 8009e48:	d1ed      	bne.n	8009e26 <_puts_r+0x52>
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	da11      	bge.n	8009e72 <_puts_r+0x9e>
 8009e4e:	4622      	mov	r2, r4
 8009e50:	210a      	movs	r1, #10
 8009e52:	4628      	mov	r0, r5
 8009e54:	f000 f87f 	bl	8009f56 <__swbuf_r>
 8009e58:	3001      	adds	r0, #1
 8009e5a:	d0d7      	beq.n	8009e0c <_puts_r+0x38>
 8009e5c:	250a      	movs	r5, #10
 8009e5e:	e7d7      	b.n	8009e10 <_puts_r+0x3c>
 8009e60:	4622      	mov	r2, r4
 8009e62:	4628      	mov	r0, r5
 8009e64:	f000 f877 	bl	8009f56 <__swbuf_r>
 8009e68:	3001      	adds	r0, #1
 8009e6a:	d1e7      	bne.n	8009e3c <_puts_r+0x68>
 8009e6c:	e7ce      	b.n	8009e0c <_puts_r+0x38>
 8009e6e:	3e01      	subs	r6, #1
 8009e70:	e7e4      	b.n	8009e3c <_puts_r+0x68>
 8009e72:	6823      	ldr	r3, [r4, #0]
 8009e74:	1c5a      	adds	r2, r3, #1
 8009e76:	6022      	str	r2, [r4, #0]
 8009e78:	220a      	movs	r2, #10
 8009e7a:	701a      	strb	r2, [r3, #0]
 8009e7c:	e7ee      	b.n	8009e5c <_puts_r+0x88>
	...

08009e80 <puts>:
 8009e80:	4b02      	ldr	r3, [pc, #8]	@ (8009e8c <puts+0xc>)
 8009e82:	4601      	mov	r1, r0
 8009e84:	6818      	ldr	r0, [r3, #0]
 8009e86:	f7ff bfa5 	b.w	8009dd4 <_puts_r>
 8009e8a:	bf00      	nop
 8009e8c:	20000108 	.word	0x20000108

08009e90 <siprintf>:
 8009e90:	b40e      	push	{r1, r2, r3}
 8009e92:	b500      	push	{lr}
 8009e94:	b09c      	sub	sp, #112	@ 0x70
 8009e96:	ab1d      	add	r3, sp, #116	@ 0x74
 8009e98:	9002      	str	r0, [sp, #8]
 8009e9a:	9006      	str	r0, [sp, #24]
 8009e9c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8009ea0:	4809      	ldr	r0, [pc, #36]	@ (8009ec8 <siprintf+0x38>)
 8009ea2:	9107      	str	r1, [sp, #28]
 8009ea4:	9104      	str	r1, [sp, #16]
 8009ea6:	4909      	ldr	r1, [pc, #36]	@ (8009ecc <siprintf+0x3c>)
 8009ea8:	f853 2b04 	ldr.w	r2, [r3], #4
 8009eac:	9105      	str	r1, [sp, #20]
 8009eae:	6800      	ldr	r0, [r0, #0]
 8009eb0:	9301      	str	r3, [sp, #4]
 8009eb2:	a902      	add	r1, sp, #8
 8009eb4:	f000 fae8 	bl	800a488 <_svfiprintf_r>
 8009eb8:	9b02      	ldr	r3, [sp, #8]
 8009eba:	2200      	movs	r2, #0
 8009ebc:	701a      	strb	r2, [r3, #0]
 8009ebe:	b01c      	add	sp, #112	@ 0x70
 8009ec0:	f85d eb04 	ldr.w	lr, [sp], #4
 8009ec4:	b003      	add	sp, #12
 8009ec6:	4770      	bx	lr
 8009ec8:	20000108 	.word	0x20000108
 8009ecc:	ffff0208 	.word	0xffff0208

08009ed0 <__sread>:
 8009ed0:	b510      	push	{r4, lr}
 8009ed2:	460c      	mov	r4, r1
 8009ed4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ed8:	f000 f922 	bl	800a120 <_read_r>
 8009edc:	2800      	cmp	r0, #0
 8009ede:	bfab      	itete	ge
 8009ee0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009ee2:	89a3      	ldrhlt	r3, [r4, #12]
 8009ee4:	181b      	addge	r3, r3, r0
 8009ee6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009eea:	bfac      	ite	ge
 8009eec:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009eee:	81a3      	strhlt	r3, [r4, #12]
 8009ef0:	bd10      	pop	{r4, pc}

08009ef2 <__swrite>:
 8009ef2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ef6:	461f      	mov	r7, r3
 8009ef8:	898b      	ldrh	r3, [r1, #12]
 8009efa:	05db      	lsls	r3, r3, #23
 8009efc:	4605      	mov	r5, r0
 8009efe:	460c      	mov	r4, r1
 8009f00:	4616      	mov	r6, r2
 8009f02:	d505      	bpl.n	8009f10 <__swrite+0x1e>
 8009f04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f08:	2302      	movs	r3, #2
 8009f0a:	2200      	movs	r2, #0
 8009f0c:	f000 f8f6 	bl	800a0fc <_lseek_r>
 8009f10:	89a3      	ldrh	r3, [r4, #12]
 8009f12:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009f16:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009f1a:	81a3      	strh	r3, [r4, #12]
 8009f1c:	4632      	mov	r2, r6
 8009f1e:	463b      	mov	r3, r7
 8009f20:	4628      	mov	r0, r5
 8009f22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009f26:	f000 b90d 	b.w	800a144 <_write_r>

08009f2a <__sseek>:
 8009f2a:	b510      	push	{r4, lr}
 8009f2c:	460c      	mov	r4, r1
 8009f2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f32:	f000 f8e3 	bl	800a0fc <_lseek_r>
 8009f36:	1c43      	adds	r3, r0, #1
 8009f38:	89a3      	ldrh	r3, [r4, #12]
 8009f3a:	bf15      	itete	ne
 8009f3c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009f3e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009f42:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009f46:	81a3      	strheq	r3, [r4, #12]
 8009f48:	bf18      	it	ne
 8009f4a:	81a3      	strhne	r3, [r4, #12]
 8009f4c:	bd10      	pop	{r4, pc}

08009f4e <__sclose>:
 8009f4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f52:	f000 b8c3 	b.w	800a0dc <_close_r>

08009f56 <__swbuf_r>:
 8009f56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f58:	460e      	mov	r6, r1
 8009f5a:	4614      	mov	r4, r2
 8009f5c:	4605      	mov	r5, r0
 8009f5e:	b118      	cbz	r0, 8009f68 <__swbuf_r+0x12>
 8009f60:	6a03      	ldr	r3, [r0, #32]
 8009f62:	b90b      	cbnz	r3, 8009f68 <__swbuf_r+0x12>
 8009f64:	f7ff feee 	bl	8009d44 <__sinit>
 8009f68:	69a3      	ldr	r3, [r4, #24]
 8009f6a:	60a3      	str	r3, [r4, #8]
 8009f6c:	89a3      	ldrh	r3, [r4, #12]
 8009f6e:	071a      	lsls	r2, r3, #28
 8009f70:	d501      	bpl.n	8009f76 <__swbuf_r+0x20>
 8009f72:	6923      	ldr	r3, [r4, #16]
 8009f74:	b943      	cbnz	r3, 8009f88 <__swbuf_r+0x32>
 8009f76:	4621      	mov	r1, r4
 8009f78:	4628      	mov	r0, r5
 8009f7a:	f000 f82b 	bl	8009fd4 <__swsetup_r>
 8009f7e:	b118      	cbz	r0, 8009f88 <__swbuf_r+0x32>
 8009f80:	f04f 37ff 	mov.w	r7, #4294967295
 8009f84:	4638      	mov	r0, r7
 8009f86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009f88:	6823      	ldr	r3, [r4, #0]
 8009f8a:	6922      	ldr	r2, [r4, #16]
 8009f8c:	1a98      	subs	r0, r3, r2
 8009f8e:	6963      	ldr	r3, [r4, #20]
 8009f90:	b2f6      	uxtb	r6, r6
 8009f92:	4283      	cmp	r3, r0
 8009f94:	4637      	mov	r7, r6
 8009f96:	dc05      	bgt.n	8009fa4 <__swbuf_r+0x4e>
 8009f98:	4621      	mov	r1, r4
 8009f9a:	4628      	mov	r0, r5
 8009f9c:	f000 fec4 	bl	800ad28 <_fflush_r>
 8009fa0:	2800      	cmp	r0, #0
 8009fa2:	d1ed      	bne.n	8009f80 <__swbuf_r+0x2a>
 8009fa4:	68a3      	ldr	r3, [r4, #8]
 8009fa6:	3b01      	subs	r3, #1
 8009fa8:	60a3      	str	r3, [r4, #8]
 8009faa:	6823      	ldr	r3, [r4, #0]
 8009fac:	1c5a      	adds	r2, r3, #1
 8009fae:	6022      	str	r2, [r4, #0]
 8009fb0:	701e      	strb	r6, [r3, #0]
 8009fb2:	6962      	ldr	r2, [r4, #20]
 8009fb4:	1c43      	adds	r3, r0, #1
 8009fb6:	429a      	cmp	r2, r3
 8009fb8:	d004      	beq.n	8009fc4 <__swbuf_r+0x6e>
 8009fba:	89a3      	ldrh	r3, [r4, #12]
 8009fbc:	07db      	lsls	r3, r3, #31
 8009fbe:	d5e1      	bpl.n	8009f84 <__swbuf_r+0x2e>
 8009fc0:	2e0a      	cmp	r6, #10
 8009fc2:	d1df      	bne.n	8009f84 <__swbuf_r+0x2e>
 8009fc4:	4621      	mov	r1, r4
 8009fc6:	4628      	mov	r0, r5
 8009fc8:	f000 feae 	bl	800ad28 <_fflush_r>
 8009fcc:	2800      	cmp	r0, #0
 8009fce:	d0d9      	beq.n	8009f84 <__swbuf_r+0x2e>
 8009fd0:	e7d6      	b.n	8009f80 <__swbuf_r+0x2a>
	...

08009fd4 <__swsetup_r>:
 8009fd4:	b538      	push	{r3, r4, r5, lr}
 8009fd6:	4b29      	ldr	r3, [pc, #164]	@ (800a07c <__swsetup_r+0xa8>)
 8009fd8:	4605      	mov	r5, r0
 8009fda:	6818      	ldr	r0, [r3, #0]
 8009fdc:	460c      	mov	r4, r1
 8009fde:	b118      	cbz	r0, 8009fe8 <__swsetup_r+0x14>
 8009fe0:	6a03      	ldr	r3, [r0, #32]
 8009fe2:	b90b      	cbnz	r3, 8009fe8 <__swsetup_r+0x14>
 8009fe4:	f7ff feae 	bl	8009d44 <__sinit>
 8009fe8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009fec:	0719      	lsls	r1, r3, #28
 8009fee:	d422      	bmi.n	800a036 <__swsetup_r+0x62>
 8009ff0:	06da      	lsls	r2, r3, #27
 8009ff2:	d407      	bmi.n	800a004 <__swsetup_r+0x30>
 8009ff4:	2209      	movs	r2, #9
 8009ff6:	602a      	str	r2, [r5, #0]
 8009ff8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009ffc:	81a3      	strh	r3, [r4, #12]
 8009ffe:	f04f 30ff 	mov.w	r0, #4294967295
 800a002:	e033      	b.n	800a06c <__swsetup_r+0x98>
 800a004:	0758      	lsls	r0, r3, #29
 800a006:	d512      	bpl.n	800a02e <__swsetup_r+0x5a>
 800a008:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a00a:	b141      	cbz	r1, 800a01e <__swsetup_r+0x4a>
 800a00c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a010:	4299      	cmp	r1, r3
 800a012:	d002      	beq.n	800a01a <__swsetup_r+0x46>
 800a014:	4628      	mov	r0, r5
 800a016:	f000 f8e3 	bl	800a1e0 <_free_r>
 800a01a:	2300      	movs	r3, #0
 800a01c:	6363      	str	r3, [r4, #52]	@ 0x34
 800a01e:	89a3      	ldrh	r3, [r4, #12]
 800a020:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a024:	81a3      	strh	r3, [r4, #12]
 800a026:	2300      	movs	r3, #0
 800a028:	6063      	str	r3, [r4, #4]
 800a02a:	6923      	ldr	r3, [r4, #16]
 800a02c:	6023      	str	r3, [r4, #0]
 800a02e:	89a3      	ldrh	r3, [r4, #12]
 800a030:	f043 0308 	orr.w	r3, r3, #8
 800a034:	81a3      	strh	r3, [r4, #12]
 800a036:	6923      	ldr	r3, [r4, #16]
 800a038:	b94b      	cbnz	r3, 800a04e <__swsetup_r+0x7a>
 800a03a:	89a3      	ldrh	r3, [r4, #12]
 800a03c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a040:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a044:	d003      	beq.n	800a04e <__swsetup_r+0x7a>
 800a046:	4621      	mov	r1, r4
 800a048:	4628      	mov	r0, r5
 800a04a:	f000 febb 	bl	800adc4 <__smakebuf_r>
 800a04e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a052:	f013 0201 	ands.w	r2, r3, #1
 800a056:	d00a      	beq.n	800a06e <__swsetup_r+0x9a>
 800a058:	2200      	movs	r2, #0
 800a05a:	60a2      	str	r2, [r4, #8]
 800a05c:	6962      	ldr	r2, [r4, #20]
 800a05e:	4252      	negs	r2, r2
 800a060:	61a2      	str	r2, [r4, #24]
 800a062:	6922      	ldr	r2, [r4, #16]
 800a064:	b942      	cbnz	r2, 800a078 <__swsetup_r+0xa4>
 800a066:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a06a:	d1c5      	bne.n	8009ff8 <__swsetup_r+0x24>
 800a06c:	bd38      	pop	{r3, r4, r5, pc}
 800a06e:	0799      	lsls	r1, r3, #30
 800a070:	bf58      	it	pl
 800a072:	6962      	ldrpl	r2, [r4, #20]
 800a074:	60a2      	str	r2, [r4, #8]
 800a076:	e7f4      	b.n	800a062 <__swsetup_r+0x8e>
 800a078:	2000      	movs	r0, #0
 800a07a:	e7f7      	b.n	800a06c <__swsetup_r+0x98>
 800a07c:	20000108 	.word	0x20000108

0800a080 <memset>:
 800a080:	4402      	add	r2, r0
 800a082:	4603      	mov	r3, r0
 800a084:	4293      	cmp	r3, r2
 800a086:	d100      	bne.n	800a08a <memset+0xa>
 800a088:	4770      	bx	lr
 800a08a:	f803 1b01 	strb.w	r1, [r3], #1
 800a08e:	e7f9      	b.n	800a084 <memset+0x4>

0800a090 <strncmp>:
 800a090:	b510      	push	{r4, lr}
 800a092:	b16a      	cbz	r2, 800a0b0 <strncmp+0x20>
 800a094:	3901      	subs	r1, #1
 800a096:	1884      	adds	r4, r0, r2
 800a098:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a09c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800a0a0:	429a      	cmp	r2, r3
 800a0a2:	d103      	bne.n	800a0ac <strncmp+0x1c>
 800a0a4:	42a0      	cmp	r0, r4
 800a0a6:	d001      	beq.n	800a0ac <strncmp+0x1c>
 800a0a8:	2a00      	cmp	r2, #0
 800a0aa:	d1f5      	bne.n	800a098 <strncmp+0x8>
 800a0ac:	1ad0      	subs	r0, r2, r3
 800a0ae:	bd10      	pop	{r4, pc}
 800a0b0:	4610      	mov	r0, r2
 800a0b2:	e7fc      	b.n	800a0ae <strncmp+0x1e>

0800a0b4 <strncpy>:
 800a0b4:	b510      	push	{r4, lr}
 800a0b6:	3901      	subs	r1, #1
 800a0b8:	4603      	mov	r3, r0
 800a0ba:	b132      	cbz	r2, 800a0ca <strncpy+0x16>
 800a0bc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800a0c0:	f803 4b01 	strb.w	r4, [r3], #1
 800a0c4:	3a01      	subs	r2, #1
 800a0c6:	2c00      	cmp	r4, #0
 800a0c8:	d1f7      	bne.n	800a0ba <strncpy+0x6>
 800a0ca:	441a      	add	r2, r3
 800a0cc:	2100      	movs	r1, #0
 800a0ce:	4293      	cmp	r3, r2
 800a0d0:	d100      	bne.n	800a0d4 <strncpy+0x20>
 800a0d2:	bd10      	pop	{r4, pc}
 800a0d4:	f803 1b01 	strb.w	r1, [r3], #1
 800a0d8:	e7f9      	b.n	800a0ce <strncpy+0x1a>
	...

0800a0dc <_close_r>:
 800a0dc:	b538      	push	{r3, r4, r5, lr}
 800a0de:	4d06      	ldr	r5, [pc, #24]	@ (800a0f8 <_close_r+0x1c>)
 800a0e0:	2300      	movs	r3, #0
 800a0e2:	4604      	mov	r4, r0
 800a0e4:	4608      	mov	r0, r1
 800a0e6:	602b      	str	r3, [r5, #0]
 800a0e8:	f7f6 ff31 	bl	8000f4e <_close>
 800a0ec:	1c43      	adds	r3, r0, #1
 800a0ee:	d102      	bne.n	800a0f6 <_close_r+0x1a>
 800a0f0:	682b      	ldr	r3, [r5, #0]
 800a0f2:	b103      	cbz	r3, 800a0f6 <_close_r+0x1a>
 800a0f4:	6023      	str	r3, [r4, #0]
 800a0f6:	bd38      	pop	{r3, r4, r5, pc}
 800a0f8:	2000b234 	.word	0x2000b234

0800a0fc <_lseek_r>:
 800a0fc:	b538      	push	{r3, r4, r5, lr}
 800a0fe:	4d07      	ldr	r5, [pc, #28]	@ (800a11c <_lseek_r+0x20>)
 800a100:	4604      	mov	r4, r0
 800a102:	4608      	mov	r0, r1
 800a104:	4611      	mov	r1, r2
 800a106:	2200      	movs	r2, #0
 800a108:	602a      	str	r2, [r5, #0]
 800a10a:	461a      	mov	r2, r3
 800a10c:	f7f6 ff46 	bl	8000f9c <_lseek>
 800a110:	1c43      	adds	r3, r0, #1
 800a112:	d102      	bne.n	800a11a <_lseek_r+0x1e>
 800a114:	682b      	ldr	r3, [r5, #0]
 800a116:	b103      	cbz	r3, 800a11a <_lseek_r+0x1e>
 800a118:	6023      	str	r3, [r4, #0]
 800a11a:	bd38      	pop	{r3, r4, r5, pc}
 800a11c:	2000b234 	.word	0x2000b234

0800a120 <_read_r>:
 800a120:	b538      	push	{r3, r4, r5, lr}
 800a122:	4d07      	ldr	r5, [pc, #28]	@ (800a140 <_read_r+0x20>)
 800a124:	4604      	mov	r4, r0
 800a126:	4608      	mov	r0, r1
 800a128:	4611      	mov	r1, r2
 800a12a:	2200      	movs	r2, #0
 800a12c:	602a      	str	r2, [r5, #0]
 800a12e:	461a      	mov	r2, r3
 800a130:	f7f6 fef0 	bl	8000f14 <_read>
 800a134:	1c43      	adds	r3, r0, #1
 800a136:	d102      	bne.n	800a13e <_read_r+0x1e>
 800a138:	682b      	ldr	r3, [r5, #0]
 800a13a:	b103      	cbz	r3, 800a13e <_read_r+0x1e>
 800a13c:	6023      	str	r3, [r4, #0]
 800a13e:	bd38      	pop	{r3, r4, r5, pc}
 800a140:	2000b234 	.word	0x2000b234

0800a144 <_write_r>:
 800a144:	b538      	push	{r3, r4, r5, lr}
 800a146:	4d07      	ldr	r5, [pc, #28]	@ (800a164 <_write_r+0x20>)
 800a148:	4604      	mov	r4, r0
 800a14a:	4608      	mov	r0, r1
 800a14c:	4611      	mov	r1, r2
 800a14e:	2200      	movs	r2, #0
 800a150:	602a      	str	r2, [r5, #0]
 800a152:	461a      	mov	r2, r3
 800a154:	f7f6 fb06 	bl	8000764 <_write>
 800a158:	1c43      	adds	r3, r0, #1
 800a15a:	d102      	bne.n	800a162 <_write_r+0x1e>
 800a15c:	682b      	ldr	r3, [r5, #0]
 800a15e:	b103      	cbz	r3, 800a162 <_write_r+0x1e>
 800a160:	6023      	str	r3, [r4, #0]
 800a162:	bd38      	pop	{r3, r4, r5, pc}
 800a164:	2000b234 	.word	0x2000b234

0800a168 <__errno>:
 800a168:	4b01      	ldr	r3, [pc, #4]	@ (800a170 <__errno+0x8>)
 800a16a:	6818      	ldr	r0, [r3, #0]
 800a16c:	4770      	bx	lr
 800a16e:	bf00      	nop
 800a170:	20000108 	.word	0x20000108

0800a174 <__libc_init_array>:
 800a174:	b570      	push	{r4, r5, r6, lr}
 800a176:	4d0d      	ldr	r5, [pc, #52]	@ (800a1ac <__libc_init_array+0x38>)
 800a178:	4c0d      	ldr	r4, [pc, #52]	@ (800a1b0 <__libc_init_array+0x3c>)
 800a17a:	1b64      	subs	r4, r4, r5
 800a17c:	10a4      	asrs	r4, r4, #2
 800a17e:	2600      	movs	r6, #0
 800a180:	42a6      	cmp	r6, r4
 800a182:	d109      	bne.n	800a198 <__libc_init_array+0x24>
 800a184:	4d0b      	ldr	r5, [pc, #44]	@ (800a1b4 <__libc_init_array+0x40>)
 800a186:	4c0c      	ldr	r4, [pc, #48]	@ (800a1b8 <__libc_init_array+0x44>)
 800a188:	f000 feda 	bl	800af40 <_init>
 800a18c:	1b64      	subs	r4, r4, r5
 800a18e:	10a4      	asrs	r4, r4, #2
 800a190:	2600      	movs	r6, #0
 800a192:	42a6      	cmp	r6, r4
 800a194:	d105      	bne.n	800a1a2 <__libc_init_array+0x2e>
 800a196:	bd70      	pop	{r4, r5, r6, pc}
 800a198:	f855 3b04 	ldr.w	r3, [r5], #4
 800a19c:	4798      	blx	r3
 800a19e:	3601      	adds	r6, #1
 800a1a0:	e7ee      	b.n	800a180 <__libc_init_array+0xc>
 800a1a2:	f855 3b04 	ldr.w	r3, [r5], #4
 800a1a6:	4798      	blx	r3
 800a1a8:	3601      	adds	r6, #1
 800a1aa:	e7f2      	b.n	800a192 <__libc_init_array+0x1e>
 800a1ac:	0800b094 	.word	0x0800b094
 800a1b0:	0800b094 	.word	0x0800b094
 800a1b4:	0800b094 	.word	0x0800b094
 800a1b8:	0800b098 	.word	0x0800b098

0800a1bc <__retarget_lock_init_recursive>:
 800a1bc:	4770      	bx	lr

0800a1be <__retarget_lock_acquire_recursive>:
 800a1be:	4770      	bx	lr

0800a1c0 <__retarget_lock_release_recursive>:
 800a1c0:	4770      	bx	lr

0800a1c2 <memcpy>:
 800a1c2:	440a      	add	r2, r1
 800a1c4:	4291      	cmp	r1, r2
 800a1c6:	f100 33ff 	add.w	r3, r0, #4294967295
 800a1ca:	d100      	bne.n	800a1ce <memcpy+0xc>
 800a1cc:	4770      	bx	lr
 800a1ce:	b510      	push	{r4, lr}
 800a1d0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a1d4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a1d8:	4291      	cmp	r1, r2
 800a1da:	d1f9      	bne.n	800a1d0 <memcpy+0xe>
 800a1dc:	bd10      	pop	{r4, pc}
	...

0800a1e0 <_free_r>:
 800a1e0:	b538      	push	{r3, r4, r5, lr}
 800a1e2:	4605      	mov	r5, r0
 800a1e4:	2900      	cmp	r1, #0
 800a1e6:	d041      	beq.n	800a26c <_free_r+0x8c>
 800a1e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a1ec:	1f0c      	subs	r4, r1, #4
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	bfb8      	it	lt
 800a1f2:	18e4      	addlt	r4, r4, r3
 800a1f4:	f000 f8e0 	bl	800a3b8 <__malloc_lock>
 800a1f8:	4a1d      	ldr	r2, [pc, #116]	@ (800a270 <_free_r+0x90>)
 800a1fa:	6813      	ldr	r3, [r2, #0]
 800a1fc:	b933      	cbnz	r3, 800a20c <_free_r+0x2c>
 800a1fe:	6063      	str	r3, [r4, #4]
 800a200:	6014      	str	r4, [r2, #0]
 800a202:	4628      	mov	r0, r5
 800a204:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a208:	f000 b8dc 	b.w	800a3c4 <__malloc_unlock>
 800a20c:	42a3      	cmp	r3, r4
 800a20e:	d908      	bls.n	800a222 <_free_r+0x42>
 800a210:	6820      	ldr	r0, [r4, #0]
 800a212:	1821      	adds	r1, r4, r0
 800a214:	428b      	cmp	r3, r1
 800a216:	bf01      	itttt	eq
 800a218:	6819      	ldreq	r1, [r3, #0]
 800a21a:	685b      	ldreq	r3, [r3, #4]
 800a21c:	1809      	addeq	r1, r1, r0
 800a21e:	6021      	streq	r1, [r4, #0]
 800a220:	e7ed      	b.n	800a1fe <_free_r+0x1e>
 800a222:	461a      	mov	r2, r3
 800a224:	685b      	ldr	r3, [r3, #4]
 800a226:	b10b      	cbz	r3, 800a22c <_free_r+0x4c>
 800a228:	42a3      	cmp	r3, r4
 800a22a:	d9fa      	bls.n	800a222 <_free_r+0x42>
 800a22c:	6811      	ldr	r1, [r2, #0]
 800a22e:	1850      	adds	r0, r2, r1
 800a230:	42a0      	cmp	r0, r4
 800a232:	d10b      	bne.n	800a24c <_free_r+0x6c>
 800a234:	6820      	ldr	r0, [r4, #0]
 800a236:	4401      	add	r1, r0
 800a238:	1850      	adds	r0, r2, r1
 800a23a:	4283      	cmp	r3, r0
 800a23c:	6011      	str	r1, [r2, #0]
 800a23e:	d1e0      	bne.n	800a202 <_free_r+0x22>
 800a240:	6818      	ldr	r0, [r3, #0]
 800a242:	685b      	ldr	r3, [r3, #4]
 800a244:	6053      	str	r3, [r2, #4]
 800a246:	4408      	add	r0, r1
 800a248:	6010      	str	r0, [r2, #0]
 800a24a:	e7da      	b.n	800a202 <_free_r+0x22>
 800a24c:	d902      	bls.n	800a254 <_free_r+0x74>
 800a24e:	230c      	movs	r3, #12
 800a250:	602b      	str	r3, [r5, #0]
 800a252:	e7d6      	b.n	800a202 <_free_r+0x22>
 800a254:	6820      	ldr	r0, [r4, #0]
 800a256:	1821      	adds	r1, r4, r0
 800a258:	428b      	cmp	r3, r1
 800a25a:	bf04      	itt	eq
 800a25c:	6819      	ldreq	r1, [r3, #0]
 800a25e:	685b      	ldreq	r3, [r3, #4]
 800a260:	6063      	str	r3, [r4, #4]
 800a262:	bf04      	itt	eq
 800a264:	1809      	addeq	r1, r1, r0
 800a266:	6021      	streq	r1, [r4, #0]
 800a268:	6054      	str	r4, [r2, #4]
 800a26a:	e7ca      	b.n	800a202 <_free_r+0x22>
 800a26c:	bd38      	pop	{r3, r4, r5, pc}
 800a26e:	bf00      	nop
 800a270:	2000b240 	.word	0x2000b240

0800a274 <sbrk_aligned>:
 800a274:	b570      	push	{r4, r5, r6, lr}
 800a276:	4e0f      	ldr	r6, [pc, #60]	@ (800a2b4 <sbrk_aligned+0x40>)
 800a278:	460c      	mov	r4, r1
 800a27a:	6831      	ldr	r1, [r6, #0]
 800a27c:	4605      	mov	r5, r0
 800a27e:	b911      	cbnz	r1, 800a286 <sbrk_aligned+0x12>
 800a280:	f000 fe18 	bl	800aeb4 <_sbrk_r>
 800a284:	6030      	str	r0, [r6, #0]
 800a286:	4621      	mov	r1, r4
 800a288:	4628      	mov	r0, r5
 800a28a:	f000 fe13 	bl	800aeb4 <_sbrk_r>
 800a28e:	1c43      	adds	r3, r0, #1
 800a290:	d103      	bne.n	800a29a <sbrk_aligned+0x26>
 800a292:	f04f 34ff 	mov.w	r4, #4294967295
 800a296:	4620      	mov	r0, r4
 800a298:	bd70      	pop	{r4, r5, r6, pc}
 800a29a:	1cc4      	adds	r4, r0, #3
 800a29c:	f024 0403 	bic.w	r4, r4, #3
 800a2a0:	42a0      	cmp	r0, r4
 800a2a2:	d0f8      	beq.n	800a296 <sbrk_aligned+0x22>
 800a2a4:	1a21      	subs	r1, r4, r0
 800a2a6:	4628      	mov	r0, r5
 800a2a8:	f000 fe04 	bl	800aeb4 <_sbrk_r>
 800a2ac:	3001      	adds	r0, #1
 800a2ae:	d1f2      	bne.n	800a296 <sbrk_aligned+0x22>
 800a2b0:	e7ef      	b.n	800a292 <sbrk_aligned+0x1e>
 800a2b2:	bf00      	nop
 800a2b4:	2000b23c 	.word	0x2000b23c

0800a2b8 <_malloc_r>:
 800a2b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a2bc:	1ccd      	adds	r5, r1, #3
 800a2be:	f025 0503 	bic.w	r5, r5, #3
 800a2c2:	3508      	adds	r5, #8
 800a2c4:	2d0c      	cmp	r5, #12
 800a2c6:	bf38      	it	cc
 800a2c8:	250c      	movcc	r5, #12
 800a2ca:	2d00      	cmp	r5, #0
 800a2cc:	4606      	mov	r6, r0
 800a2ce:	db01      	blt.n	800a2d4 <_malloc_r+0x1c>
 800a2d0:	42a9      	cmp	r1, r5
 800a2d2:	d904      	bls.n	800a2de <_malloc_r+0x26>
 800a2d4:	230c      	movs	r3, #12
 800a2d6:	6033      	str	r3, [r6, #0]
 800a2d8:	2000      	movs	r0, #0
 800a2da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a2de:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a3b4 <_malloc_r+0xfc>
 800a2e2:	f000 f869 	bl	800a3b8 <__malloc_lock>
 800a2e6:	f8d8 3000 	ldr.w	r3, [r8]
 800a2ea:	461c      	mov	r4, r3
 800a2ec:	bb44      	cbnz	r4, 800a340 <_malloc_r+0x88>
 800a2ee:	4629      	mov	r1, r5
 800a2f0:	4630      	mov	r0, r6
 800a2f2:	f7ff ffbf 	bl	800a274 <sbrk_aligned>
 800a2f6:	1c43      	adds	r3, r0, #1
 800a2f8:	4604      	mov	r4, r0
 800a2fa:	d158      	bne.n	800a3ae <_malloc_r+0xf6>
 800a2fc:	f8d8 4000 	ldr.w	r4, [r8]
 800a300:	4627      	mov	r7, r4
 800a302:	2f00      	cmp	r7, #0
 800a304:	d143      	bne.n	800a38e <_malloc_r+0xd6>
 800a306:	2c00      	cmp	r4, #0
 800a308:	d04b      	beq.n	800a3a2 <_malloc_r+0xea>
 800a30a:	6823      	ldr	r3, [r4, #0]
 800a30c:	4639      	mov	r1, r7
 800a30e:	4630      	mov	r0, r6
 800a310:	eb04 0903 	add.w	r9, r4, r3
 800a314:	f000 fdce 	bl	800aeb4 <_sbrk_r>
 800a318:	4581      	cmp	r9, r0
 800a31a:	d142      	bne.n	800a3a2 <_malloc_r+0xea>
 800a31c:	6821      	ldr	r1, [r4, #0]
 800a31e:	1a6d      	subs	r5, r5, r1
 800a320:	4629      	mov	r1, r5
 800a322:	4630      	mov	r0, r6
 800a324:	f7ff ffa6 	bl	800a274 <sbrk_aligned>
 800a328:	3001      	adds	r0, #1
 800a32a:	d03a      	beq.n	800a3a2 <_malloc_r+0xea>
 800a32c:	6823      	ldr	r3, [r4, #0]
 800a32e:	442b      	add	r3, r5
 800a330:	6023      	str	r3, [r4, #0]
 800a332:	f8d8 3000 	ldr.w	r3, [r8]
 800a336:	685a      	ldr	r2, [r3, #4]
 800a338:	bb62      	cbnz	r2, 800a394 <_malloc_r+0xdc>
 800a33a:	f8c8 7000 	str.w	r7, [r8]
 800a33e:	e00f      	b.n	800a360 <_malloc_r+0xa8>
 800a340:	6822      	ldr	r2, [r4, #0]
 800a342:	1b52      	subs	r2, r2, r5
 800a344:	d420      	bmi.n	800a388 <_malloc_r+0xd0>
 800a346:	2a0b      	cmp	r2, #11
 800a348:	d917      	bls.n	800a37a <_malloc_r+0xc2>
 800a34a:	1961      	adds	r1, r4, r5
 800a34c:	42a3      	cmp	r3, r4
 800a34e:	6025      	str	r5, [r4, #0]
 800a350:	bf18      	it	ne
 800a352:	6059      	strne	r1, [r3, #4]
 800a354:	6863      	ldr	r3, [r4, #4]
 800a356:	bf08      	it	eq
 800a358:	f8c8 1000 	streq.w	r1, [r8]
 800a35c:	5162      	str	r2, [r4, r5]
 800a35e:	604b      	str	r3, [r1, #4]
 800a360:	4630      	mov	r0, r6
 800a362:	f000 f82f 	bl	800a3c4 <__malloc_unlock>
 800a366:	f104 000b 	add.w	r0, r4, #11
 800a36a:	1d23      	adds	r3, r4, #4
 800a36c:	f020 0007 	bic.w	r0, r0, #7
 800a370:	1ac2      	subs	r2, r0, r3
 800a372:	bf1c      	itt	ne
 800a374:	1a1b      	subne	r3, r3, r0
 800a376:	50a3      	strne	r3, [r4, r2]
 800a378:	e7af      	b.n	800a2da <_malloc_r+0x22>
 800a37a:	6862      	ldr	r2, [r4, #4]
 800a37c:	42a3      	cmp	r3, r4
 800a37e:	bf0c      	ite	eq
 800a380:	f8c8 2000 	streq.w	r2, [r8]
 800a384:	605a      	strne	r2, [r3, #4]
 800a386:	e7eb      	b.n	800a360 <_malloc_r+0xa8>
 800a388:	4623      	mov	r3, r4
 800a38a:	6864      	ldr	r4, [r4, #4]
 800a38c:	e7ae      	b.n	800a2ec <_malloc_r+0x34>
 800a38e:	463c      	mov	r4, r7
 800a390:	687f      	ldr	r7, [r7, #4]
 800a392:	e7b6      	b.n	800a302 <_malloc_r+0x4a>
 800a394:	461a      	mov	r2, r3
 800a396:	685b      	ldr	r3, [r3, #4]
 800a398:	42a3      	cmp	r3, r4
 800a39a:	d1fb      	bne.n	800a394 <_malloc_r+0xdc>
 800a39c:	2300      	movs	r3, #0
 800a39e:	6053      	str	r3, [r2, #4]
 800a3a0:	e7de      	b.n	800a360 <_malloc_r+0xa8>
 800a3a2:	230c      	movs	r3, #12
 800a3a4:	6033      	str	r3, [r6, #0]
 800a3a6:	4630      	mov	r0, r6
 800a3a8:	f000 f80c 	bl	800a3c4 <__malloc_unlock>
 800a3ac:	e794      	b.n	800a2d8 <_malloc_r+0x20>
 800a3ae:	6005      	str	r5, [r0, #0]
 800a3b0:	e7d6      	b.n	800a360 <_malloc_r+0xa8>
 800a3b2:	bf00      	nop
 800a3b4:	2000b240 	.word	0x2000b240

0800a3b8 <__malloc_lock>:
 800a3b8:	4801      	ldr	r0, [pc, #4]	@ (800a3c0 <__malloc_lock+0x8>)
 800a3ba:	f7ff bf00 	b.w	800a1be <__retarget_lock_acquire_recursive>
 800a3be:	bf00      	nop
 800a3c0:	2000b238 	.word	0x2000b238

0800a3c4 <__malloc_unlock>:
 800a3c4:	4801      	ldr	r0, [pc, #4]	@ (800a3cc <__malloc_unlock+0x8>)
 800a3c6:	f7ff befb 	b.w	800a1c0 <__retarget_lock_release_recursive>
 800a3ca:	bf00      	nop
 800a3cc:	2000b238 	.word	0x2000b238

0800a3d0 <__ssputs_r>:
 800a3d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a3d4:	688e      	ldr	r6, [r1, #8]
 800a3d6:	461f      	mov	r7, r3
 800a3d8:	42be      	cmp	r6, r7
 800a3da:	680b      	ldr	r3, [r1, #0]
 800a3dc:	4682      	mov	sl, r0
 800a3de:	460c      	mov	r4, r1
 800a3e0:	4690      	mov	r8, r2
 800a3e2:	d82d      	bhi.n	800a440 <__ssputs_r+0x70>
 800a3e4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a3e8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a3ec:	d026      	beq.n	800a43c <__ssputs_r+0x6c>
 800a3ee:	6965      	ldr	r5, [r4, #20]
 800a3f0:	6909      	ldr	r1, [r1, #16]
 800a3f2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a3f6:	eba3 0901 	sub.w	r9, r3, r1
 800a3fa:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a3fe:	1c7b      	adds	r3, r7, #1
 800a400:	444b      	add	r3, r9
 800a402:	106d      	asrs	r5, r5, #1
 800a404:	429d      	cmp	r5, r3
 800a406:	bf38      	it	cc
 800a408:	461d      	movcc	r5, r3
 800a40a:	0553      	lsls	r3, r2, #21
 800a40c:	d527      	bpl.n	800a45e <__ssputs_r+0x8e>
 800a40e:	4629      	mov	r1, r5
 800a410:	f7ff ff52 	bl	800a2b8 <_malloc_r>
 800a414:	4606      	mov	r6, r0
 800a416:	b360      	cbz	r0, 800a472 <__ssputs_r+0xa2>
 800a418:	6921      	ldr	r1, [r4, #16]
 800a41a:	464a      	mov	r2, r9
 800a41c:	f7ff fed1 	bl	800a1c2 <memcpy>
 800a420:	89a3      	ldrh	r3, [r4, #12]
 800a422:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a426:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a42a:	81a3      	strh	r3, [r4, #12]
 800a42c:	6126      	str	r6, [r4, #16]
 800a42e:	6165      	str	r5, [r4, #20]
 800a430:	444e      	add	r6, r9
 800a432:	eba5 0509 	sub.w	r5, r5, r9
 800a436:	6026      	str	r6, [r4, #0]
 800a438:	60a5      	str	r5, [r4, #8]
 800a43a:	463e      	mov	r6, r7
 800a43c:	42be      	cmp	r6, r7
 800a43e:	d900      	bls.n	800a442 <__ssputs_r+0x72>
 800a440:	463e      	mov	r6, r7
 800a442:	6820      	ldr	r0, [r4, #0]
 800a444:	4632      	mov	r2, r6
 800a446:	4641      	mov	r1, r8
 800a448:	f000 fcf8 	bl	800ae3c <memmove>
 800a44c:	68a3      	ldr	r3, [r4, #8]
 800a44e:	1b9b      	subs	r3, r3, r6
 800a450:	60a3      	str	r3, [r4, #8]
 800a452:	6823      	ldr	r3, [r4, #0]
 800a454:	4433      	add	r3, r6
 800a456:	6023      	str	r3, [r4, #0]
 800a458:	2000      	movs	r0, #0
 800a45a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a45e:	462a      	mov	r2, r5
 800a460:	f000 fd38 	bl	800aed4 <_realloc_r>
 800a464:	4606      	mov	r6, r0
 800a466:	2800      	cmp	r0, #0
 800a468:	d1e0      	bne.n	800a42c <__ssputs_r+0x5c>
 800a46a:	6921      	ldr	r1, [r4, #16]
 800a46c:	4650      	mov	r0, sl
 800a46e:	f7ff feb7 	bl	800a1e0 <_free_r>
 800a472:	230c      	movs	r3, #12
 800a474:	f8ca 3000 	str.w	r3, [sl]
 800a478:	89a3      	ldrh	r3, [r4, #12]
 800a47a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a47e:	81a3      	strh	r3, [r4, #12]
 800a480:	f04f 30ff 	mov.w	r0, #4294967295
 800a484:	e7e9      	b.n	800a45a <__ssputs_r+0x8a>
	...

0800a488 <_svfiprintf_r>:
 800a488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a48c:	4698      	mov	r8, r3
 800a48e:	898b      	ldrh	r3, [r1, #12]
 800a490:	061b      	lsls	r3, r3, #24
 800a492:	b09d      	sub	sp, #116	@ 0x74
 800a494:	4607      	mov	r7, r0
 800a496:	460d      	mov	r5, r1
 800a498:	4614      	mov	r4, r2
 800a49a:	d510      	bpl.n	800a4be <_svfiprintf_r+0x36>
 800a49c:	690b      	ldr	r3, [r1, #16]
 800a49e:	b973      	cbnz	r3, 800a4be <_svfiprintf_r+0x36>
 800a4a0:	2140      	movs	r1, #64	@ 0x40
 800a4a2:	f7ff ff09 	bl	800a2b8 <_malloc_r>
 800a4a6:	6028      	str	r0, [r5, #0]
 800a4a8:	6128      	str	r0, [r5, #16]
 800a4aa:	b930      	cbnz	r0, 800a4ba <_svfiprintf_r+0x32>
 800a4ac:	230c      	movs	r3, #12
 800a4ae:	603b      	str	r3, [r7, #0]
 800a4b0:	f04f 30ff 	mov.w	r0, #4294967295
 800a4b4:	b01d      	add	sp, #116	@ 0x74
 800a4b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4ba:	2340      	movs	r3, #64	@ 0x40
 800a4bc:	616b      	str	r3, [r5, #20]
 800a4be:	2300      	movs	r3, #0
 800a4c0:	9309      	str	r3, [sp, #36]	@ 0x24
 800a4c2:	2320      	movs	r3, #32
 800a4c4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a4c8:	f8cd 800c 	str.w	r8, [sp, #12]
 800a4cc:	2330      	movs	r3, #48	@ 0x30
 800a4ce:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800a66c <_svfiprintf_r+0x1e4>
 800a4d2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a4d6:	f04f 0901 	mov.w	r9, #1
 800a4da:	4623      	mov	r3, r4
 800a4dc:	469a      	mov	sl, r3
 800a4de:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a4e2:	b10a      	cbz	r2, 800a4e8 <_svfiprintf_r+0x60>
 800a4e4:	2a25      	cmp	r2, #37	@ 0x25
 800a4e6:	d1f9      	bne.n	800a4dc <_svfiprintf_r+0x54>
 800a4e8:	ebba 0b04 	subs.w	fp, sl, r4
 800a4ec:	d00b      	beq.n	800a506 <_svfiprintf_r+0x7e>
 800a4ee:	465b      	mov	r3, fp
 800a4f0:	4622      	mov	r2, r4
 800a4f2:	4629      	mov	r1, r5
 800a4f4:	4638      	mov	r0, r7
 800a4f6:	f7ff ff6b 	bl	800a3d0 <__ssputs_r>
 800a4fa:	3001      	adds	r0, #1
 800a4fc:	f000 80a7 	beq.w	800a64e <_svfiprintf_r+0x1c6>
 800a500:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a502:	445a      	add	r2, fp
 800a504:	9209      	str	r2, [sp, #36]	@ 0x24
 800a506:	f89a 3000 	ldrb.w	r3, [sl]
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	f000 809f 	beq.w	800a64e <_svfiprintf_r+0x1c6>
 800a510:	2300      	movs	r3, #0
 800a512:	f04f 32ff 	mov.w	r2, #4294967295
 800a516:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a51a:	f10a 0a01 	add.w	sl, sl, #1
 800a51e:	9304      	str	r3, [sp, #16]
 800a520:	9307      	str	r3, [sp, #28]
 800a522:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a526:	931a      	str	r3, [sp, #104]	@ 0x68
 800a528:	4654      	mov	r4, sl
 800a52a:	2205      	movs	r2, #5
 800a52c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a530:	484e      	ldr	r0, [pc, #312]	@ (800a66c <_svfiprintf_r+0x1e4>)
 800a532:	f7f5 fe65 	bl	8000200 <memchr>
 800a536:	9a04      	ldr	r2, [sp, #16]
 800a538:	b9d8      	cbnz	r0, 800a572 <_svfiprintf_r+0xea>
 800a53a:	06d0      	lsls	r0, r2, #27
 800a53c:	bf44      	itt	mi
 800a53e:	2320      	movmi	r3, #32
 800a540:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a544:	0711      	lsls	r1, r2, #28
 800a546:	bf44      	itt	mi
 800a548:	232b      	movmi	r3, #43	@ 0x2b
 800a54a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a54e:	f89a 3000 	ldrb.w	r3, [sl]
 800a552:	2b2a      	cmp	r3, #42	@ 0x2a
 800a554:	d015      	beq.n	800a582 <_svfiprintf_r+0xfa>
 800a556:	9a07      	ldr	r2, [sp, #28]
 800a558:	4654      	mov	r4, sl
 800a55a:	2000      	movs	r0, #0
 800a55c:	f04f 0c0a 	mov.w	ip, #10
 800a560:	4621      	mov	r1, r4
 800a562:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a566:	3b30      	subs	r3, #48	@ 0x30
 800a568:	2b09      	cmp	r3, #9
 800a56a:	d94b      	bls.n	800a604 <_svfiprintf_r+0x17c>
 800a56c:	b1b0      	cbz	r0, 800a59c <_svfiprintf_r+0x114>
 800a56e:	9207      	str	r2, [sp, #28]
 800a570:	e014      	b.n	800a59c <_svfiprintf_r+0x114>
 800a572:	eba0 0308 	sub.w	r3, r0, r8
 800a576:	fa09 f303 	lsl.w	r3, r9, r3
 800a57a:	4313      	orrs	r3, r2
 800a57c:	9304      	str	r3, [sp, #16]
 800a57e:	46a2      	mov	sl, r4
 800a580:	e7d2      	b.n	800a528 <_svfiprintf_r+0xa0>
 800a582:	9b03      	ldr	r3, [sp, #12]
 800a584:	1d19      	adds	r1, r3, #4
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	9103      	str	r1, [sp, #12]
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	bfbb      	ittet	lt
 800a58e:	425b      	neglt	r3, r3
 800a590:	f042 0202 	orrlt.w	r2, r2, #2
 800a594:	9307      	strge	r3, [sp, #28]
 800a596:	9307      	strlt	r3, [sp, #28]
 800a598:	bfb8      	it	lt
 800a59a:	9204      	strlt	r2, [sp, #16]
 800a59c:	7823      	ldrb	r3, [r4, #0]
 800a59e:	2b2e      	cmp	r3, #46	@ 0x2e
 800a5a0:	d10a      	bne.n	800a5b8 <_svfiprintf_r+0x130>
 800a5a2:	7863      	ldrb	r3, [r4, #1]
 800a5a4:	2b2a      	cmp	r3, #42	@ 0x2a
 800a5a6:	d132      	bne.n	800a60e <_svfiprintf_r+0x186>
 800a5a8:	9b03      	ldr	r3, [sp, #12]
 800a5aa:	1d1a      	adds	r2, r3, #4
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	9203      	str	r2, [sp, #12]
 800a5b0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a5b4:	3402      	adds	r4, #2
 800a5b6:	9305      	str	r3, [sp, #20]
 800a5b8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800a67c <_svfiprintf_r+0x1f4>
 800a5bc:	7821      	ldrb	r1, [r4, #0]
 800a5be:	2203      	movs	r2, #3
 800a5c0:	4650      	mov	r0, sl
 800a5c2:	f7f5 fe1d 	bl	8000200 <memchr>
 800a5c6:	b138      	cbz	r0, 800a5d8 <_svfiprintf_r+0x150>
 800a5c8:	9b04      	ldr	r3, [sp, #16]
 800a5ca:	eba0 000a 	sub.w	r0, r0, sl
 800a5ce:	2240      	movs	r2, #64	@ 0x40
 800a5d0:	4082      	lsls	r2, r0
 800a5d2:	4313      	orrs	r3, r2
 800a5d4:	3401      	adds	r4, #1
 800a5d6:	9304      	str	r3, [sp, #16]
 800a5d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a5dc:	4824      	ldr	r0, [pc, #144]	@ (800a670 <_svfiprintf_r+0x1e8>)
 800a5de:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a5e2:	2206      	movs	r2, #6
 800a5e4:	f7f5 fe0c 	bl	8000200 <memchr>
 800a5e8:	2800      	cmp	r0, #0
 800a5ea:	d036      	beq.n	800a65a <_svfiprintf_r+0x1d2>
 800a5ec:	4b21      	ldr	r3, [pc, #132]	@ (800a674 <_svfiprintf_r+0x1ec>)
 800a5ee:	bb1b      	cbnz	r3, 800a638 <_svfiprintf_r+0x1b0>
 800a5f0:	9b03      	ldr	r3, [sp, #12]
 800a5f2:	3307      	adds	r3, #7
 800a5f4:	f023 0307 	bic.w	r3, r3, #7
 800a5f8:	3308      	adds	r3, #8
 800a5fa:	9303      	str	r3, [sp, #12]
 800a5fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a5fe:	4433      	add	r3, r6
 800a600:	9309      	str	r3, [sp, #36]	@ 0x24
 800a602:	e76a      	b.n	800a4da <_svfiprintf_r+0x52>
 800a604:	fb0c 3202 	mla	r2, ip, r2, r3
 800a608:	460c      	mov	r4, r1
 800a60a:	2001      	movs	r0, #1
 800a60c:	e7a8      	b.n	800a560 <_svfiprintf_r+0xd8>
 800a60e:	2300      	movs	r3, #0
 800a610:	3401      	adds	r4, #1
 800a612:	9305      	str	r3, [sp, #20]
 800a614:	4619      	mov	r1, r3
 800a616:	f04f 0c0a 	mov.w	ip, #10
 800a61a:	4620      	mov	r0, r4
 800a61c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a620:	3a30      	subs	r2, #48	@ 0x30
 800a622:	2a09      	cmp	r2, #9
 800a624:	d903      	bls.n	800a62e <_svfiprintf_r+0x1a6>
 800a626:	2b00      	cmp	r3, #0
 800a628:	d0c6      	beq.n	800a5b8 <_svfiprintf_r+0x130>
 800a62a:	9105      	str	r1, [sp, #20]
 800a62c:	e7c4      	b.n	800a5b8 <_svfiprintf_r+0x130>
 800a62e:	fb0c 2101 	mla	r1, ip, r1, r2
 800a632:	4604      	mov	r4, r0
 800a634:	2301      	movs	r3, #1
 800a636:	e7f0      	b.n	800a61a <_svfiprintf_r+0x192>
 800a638:	ab03      	add	r3, sp, #12
 800a63a:	9300      	str	r3, [sp, #0]
 800a63c:	462a      	mov	r2, r5
 800a63e:	4b0e      	ldr	r3, [pc, #56]	@ (800a678 <_svfiprintf_r+0x1f0>)
 800a640:	a904      	add	r1, sp, #16
 800a642:	4638      	mov	r0, r7
 800a644:	f3af 8000 	nop.w
 800a648:	1c42      	adds	r2, r0, #1
 800a64a:	4606      	mov	r6, r0
 800a64c:	d1d6      	bne.n	800a5fc <_svfiprintf_r+0x174>
 800a64e:	89ab      	ldrh	r3, [r5, #12]
 800a650:	065b      	lsls	r3, r3, #25
 800a652:	f53f af2d 	bmi.w	800a4b0 <_svfiprintf_r+0x28>
 800a656:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a658:	e72c      	b.n	800a4b4 <_svfiprintf_r+0x2c>
 800a65a:	ab03      	add	r3, sp, #12
 800a65c:	9300      	str	r3, [sp, #0]
 800a65e:	462a      	mov	r2, r5
 800a660:	4b05      	ldr	r3, [pc, #20]	@ (800a678 <_svfiprintf_r+0x1f0>)
 800a662:	a904      	add	r1, sp, #16
 800a664:	4638      	mov	r0, r7
 800a666:	f000 f9bb 	bl	800a9e0 <_printf_i>
 800a66a:	e7ed      	b.n	800a648 <_svfiprintf_r+0x1c0>
 800a66c:	0800b058 	.word	0x0800b058
 800a670:	0800b062 	.word	0x0800b062
 800a674:	00000000 	.word	0x00000000
 800a678:	0800a3d1 	.word	0x0800a3d1
 800a67c:	0800b05e 	.word	0x0800b05e

0800a680 <__sfputc_r>:
 800a680:	6893      	ldr	r3, [r2, #8]
 800a682:	3b01      	subs	r3, #1
 800a684:	2b00      	cmp	r3, #0
 800a686:	b410      	push	{r4}
 800a688:	6093      	str	r3, [r2, #8]
 800a68a:	da08      	bge.n	800a69e <__sfputc_r+0x1e>
 800a68c:	6994      	ldr	r4, [r2, #24]
 800a68e:	42a3      	cmp	r3, r4
 800a690:	db01      	blt.n	800a696 <__sfputc_r+0x16>
 800a692:	290a      	cmp	r1, #10
 800a694:	d103      	bne.n	800a69e <__sfputc_r+0x1e>
 800a696:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a69a:	f7ff bc5c 	b.w	8009f56 <__swbuf_r>
 800a69e:	6813      	ldr	r3, [r2, #0]
 800a6a0:	1c58      	adds	r0, r3, #1
 800a6a2:	6010      	str	r0, [r2, #0]
 800a6a4:	7019      	strb	r1, [r3, #0]
 800a6a6:	4608      	mov	r0, r1
 800a6a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a6ac:	4770      	bx	lr

0800a6ae <__sfputs_r>:
 800a6ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6b0:	4606      	mov	r6, r0
 800a6b2:	460f      	mov	r7, r1
 800a6b4:	4614      	mov	r4, r2
 800a6b6:	18d5      	adds	r5, r2, r3
 800a6b8:	42ac      	cmp	r4, r5
 800a6ba:	d101      	bne.n	800a6c0 <__sfputs_r+0x12>
 800a6bc:	2000      	movs	r0, #0
 800a6be:	e007      	b.n	800a6d0 <__sfputs_r+0x22>
 800a6c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a6c4:	463a      	mov	r2, r7
 800a6c6:	4630      	mov	r0, r6
 800a6c8:	f7ff ffda 	bl	800a680 <__sfputc_r>
 800a6cc:	1c43      	adds	r3, r0, #1
 800a6ce:	d1f3      	bne.n	800a6b8 <__sfputs_r+0xa>
 800a6d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a6d4 <_vfiprintf_r>:
 800a6d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6d8:	460d      	mov	r5, r1
 800a6da:	b09d      	sub	sp, #116	@ 0x74
 800a6dc:	4614      	mov	r4, r2
 800a6de:	4698      	mov	r8, r3
 800a6e0:	4606      	mov	r6, r0
 800a6e2:	b118      	cbz	r0, 800a6ec <_vfiprintf_r+0x18>
 800a6e4:	6a03      	ldr	r3, [r0, #32]
 800a6e6:	b90b      	cbnz	r3, 800a6ec <_vfiprintf_r+0x18>
 800a6e8:	f7ff fb2c 	bl	8009d44 <__sinit>
 800a6ec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a6ee:	07d9      	lsls	r1, r3, #31
 800a6f0:	d405      	bmi.n	800a6fe <_vfiprintf_r+0x2a>
 800a6f2:	89ab      	ldrh	r3, [r5, #12]
 800a6f4:	059a      	lsls	r2, r3, #22
 800a6f6:	d402      	bmi.n	800a6fe <_vfiprintf_r+0x2a>
 800a6f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a6fa:	f7ff fd60 	bl	800a1be <__retarget_lock_acquire_recursive>
 800a6fe:	89ab      	ldrh	r3, [r5, #12]
 800a700:	071b      	lsls	r3, r3, #28
 800a702:	d501      	bpl.n	800a708 <_vfiprintf_r+0x34>
 800a704:	692b      	ldr	r3, [r5, #16]
 800a706:	b99b      	cbnz	r3, 800a730 <_vfiprintf_r+0x5c>
 800a708:	4629      	mov	r1, r5
 800a70a:	4630      	mov	r0, r6
 800a70c:	f7ff fc62 	bl	8009fd4 <__swsetup_r>
 800a710:	b170      	cbz	r0, 800a730 <_vfiprintf_r+0x5c>
 800a712:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a714:	07dc      	lsls	r4, r3, #31
 800a716:	d504      	bpl.n	800a722 <_vfiprintf_r+0x4e>
 800a718:	f04f 30ff 	mov.w	r0, #4294967295
 800a71c:	b01d      	add	sp, #116	@ 0x74
 800a71e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a722:	89ab      	ldrh	r3, [r5, #12]
 800a724:	0598      	lsls	r0, r3, #22
 800a726:	d4f7      	bmi.n	800a718 <_vfiprintf_r+0x44>
 800a728:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a72a:	f7ff fd49 	bl	800a1c0 <__retarget_lock_release_recursive>
 800a72e:	e7f3      	b.n	800a718 <_vfiprintf_r+0x44>
 800a730:	2300      	movs	r3, #0
 800a732:	9309      	str	r3, [sp, #36]	@ 0x24
 800a734:	2320      	movs	r3, #32
 800a736:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a73a:	f8cd 800c 	str.w	r8, [sp, #12]
 800a73e:	2330      	movs	r3, #48	@ 0x30
 800a740:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a8f0 <_vfiprintf_r+0x21c>
 800a744:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a748:	f04f 0901 	mov.w	r9, #1
 800a74c:	4623      	mov	r3, r4
 800a74e:	469a      	mov	sl, r3
 800a750:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a754:	b10a      	cbz	r2, 800a75a <_vfiprintf_r+0x86>
 800a756:	2a25      	cmp	r2, #37	@ 0x25
 800a758:	d1f9      	bne.n	800a74e <_vfiprintf_r+0x7a>
 800a75a:	ebba 0b04 	subs.w	fp, sl, r4
 800a75e:	d00b      	beq.n	800a778 <_vfiprintf_r+0xa4>
 800a760:	465b      	mov	r3, fp
 800a762:	4622      	mov	r2, r4
 800a764:	4629      	mov	r1, r5
 800a766:	4630      	mov	r0, r6
 800a768:	f7ff ffa1 	bl	800a6ae <__sfputs_r>
 800a76c:	3001      	adds	r0, #1
 800a76e:	f000 80a7 	beq.w	800a8c0 <_vfiprintf_r+0x1ec>
 800a772:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a774:	445a      	add	r2, fp
 800a776:	9209      	str	r2, [sp, #36]	@ 0x24
 800a778:	f89a 3000 	ldrb.w	r3, [sl]
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	f000 809f 	beq.w	800a8c0 <_vfiprintf_r+0x1ec>
 800a782:	2300      	movs	r3, #0
 800a784:	f04f 32ff 	mov.w	r2, #4294967295
 800a788:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a78c:	f10a 0a01 	add.w	sl, sl, #1
 800a790:	9304      	str	r3, [sp, #16]
 800a792:	9307      	str	r3, [sp, #28]
 800a794:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a798:	931a      	str	r3, [sp, #104]	@ 0x68
 800a79a:	4654      	mov	r4, sl
 800a79c:	2205      	movs	r2, #5
 800a79e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a7a2:	4853      	ldr	r0, [pc, #332]	@ (800a8f0 <_vfiprintf_r+0x21c>)
 800a7a4:	f7f5 fd2c 	bl	8000200 <memchr>
 800a7a8:	9a04      	ldr	r2, [sp, #16]
 800a7aa:	b9d8      	cbnz	r0, 800a7e4 <_vfiprintf_r+0x110>
 800a7ac:	06d1      	lsls	r1, r2, #27
 800a7ae:	bf44      	itt	mi
 800a7b0:	2320      	movmi	r3, #32
 800a7b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a7b6:	0713      	lsls	r3, r2, #28
 800a7b8:	bf44      	itt	mi
 800a7ba:	232b      	movmi	r3, #43	@ 0x2b
 800a7bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a7c0:	f89a 3000 	ldrb.w	r3, [sl]
 800a7c4:	2b2a      	cmp	r3, #42	@ 0x2a
 800a7c6:	d015      	beq.n	800a7f4 <_vfiprintf_r+0x120>
 800a7c8:	9a07      	ldr	r2, [sp, #28]
 800a7ca:	4654      	mov	r4, sl
 800a7cc:	2000      	movs	r0, #0
 800a7ce:	f04f 0c0a 	mov.w	ip, #10
 800a7d2:	4621      	mov	r1, r4
 800a7d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a7d8:	3b30      	subs	r3, #48	@ 0x30
 800a7da:	2b09      	cmp	r3, #9
 800a7dc:	d94b      	bls.n	800a876 <_vfiprintf_r+0x1a2>
 800a7de:	b1b0      	cbz	r0, 800a80e <_vfiprintf_r+0x13a>
 800a7e0:	9207      	str	r2, [sp, #28]
 800a7e2:	e014      	b.n	800a80e <_vfiprintf_r+0x13a>
 800a7e4:	eba0 0308 	sub.w	r3, r0, r8
 800a7e8:	fa09 f303 	lsl.w	r3, r9, r3
 800a7ec:	4313      	orrs	r3, r2
 800a7ee:	9304      	str	r3, [sp, #16]
 800a7f0:	46a2      	mov	sl, r4
 800a7f2:	e7d2      	b.n	800a79a <_vfiprintf_r+0xc6>
 800a7f4:	9b03      	ldr	r3, [sp, #12]
 800a7f6:	1d19      	adds	r1, r3, #4
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	9103      	str	r1, [sp, #12]
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	bfbb      	ittet	lt
 800a800:	425b      	neglt	r3, r3
 800a802:	f042 0202 	orrlt.w	r2, r2, #2
 800a806:	9307      	strge	r3, [sp, #28]
 800a808:	9307      	strlt	r3, [sp, #28]
 800a80a:	bfb8      	it	lt
 800a80c:	9204      	strlt	r2, [sp, #16]
 800a80e:	7823      	ldrb	r3, [r4, #0]
 800a810:	2b2e      	cmp	r3, #46	@ 0x2e
 800a812:	d10a      	bne.n	800a82a <_vfiprintf_r+0x156>
 800a814:	7863      	ldrb	r3, [r4, #1]
 800a816:	2b2a      	cmp	r3, #42	@ 0x2a
 800a818:	d132      	bne.n	800a880 <_vfiprintf_r+0x1ac>
 800a81a:	9b03      	ldr	r3, [sp, #12]
 800a81c:	1d1a      	adds	r2, r3, #4
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	9203      	str	r2, [sp, #12]
 800a822:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a826:	3402      	adds	r4, #2
 800a828:	9305      	str	r3, [sp, #20]
 800a82a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a900 <_vfiprintf_r+0x22c>
 800a82e:	7821      	ldrb	r1, [r4, #0]
 800a830:	2203      	movs	r2, #3
 800a832:	4650      	mov	r0, sl
 800a834:	f7f5 fce4 	bl	8000200 <memchr>
 800a838:	b138      	cbz	r0, 800a84a <_vfiprintf_r+0x176>
 800a83a:	9b04      	ldr	r3, [sp, #16]
 800a83c:	eba0 000a 	sub.w	r0, r0, sl
 800a840:	2240      	movs	r2, #64	@ 0x40
 800a842:	4082      	lsls	r2, r0
 800a844:	4313      	orrs	r3, r2
 800a846:	3401      	adds	r4, #1
 800a848:	9304      	str	r3, [sp, #16]
 800a84a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a84e:	4829      	ldr	r0, [pc, #164]	@ (800a8f4 <_vfiprintf_r+0x220>)
 800a850:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a854:	2206      	movs	r2, #6
 800a856:	f7f5 fcd3 	bl	8000200 <memchr>
 800a85a:	2800      	cmp	r0, #0
 800a85c:	d03f      	beq.n	800a8de <_vfiprintf_r+0x20a>
 800a85e:	4b26      	ldr	r3, [pc, #152]	@ (800a8f8 <_vfiprintf_r+0x224>)
 800a860:	bb1b      	cbnz	r3, 800a8aa <_vfiprintf_r+0x1d6>
 800a862:	9b03      	ldr	r3, [sp, #12]
 800a864:	3307      	adds	r3, #7
 800a866:	f023 0307 	bic.w	r3, r3, #7
 800a86a:	3308      	adds	r3, #8
 800a86c:	9303      	str	r3, [sp, #12]
 800a86e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a870:	443b      	add	r3, r7
 800a872:	9309      	str	r3, [sp, #36]	@ 0x24
 800a874:	e76a      	b.n	800a74c <_vfiprintf_r+0x78>
 800a876:	fb0c 3202 	mla	r2, ip, r2, r3
 800a87a:	460c      	mov	r4, r1
 800a87c:	2001      	movs	r0, #1
 800a87e:	e7a8      	b.n	800a7d2 <_vfiprintf_r+0xfe>
 800a880:	2300      	movs	r3, #0
 800a882:	3401      	adds	r4, #1
 800a884:	9305      	str	r3, [sp, #20]
 800a886:	4619      	mov	r1, r3
 800a888:	f04f 0c0a 	mov.w	ip, #10
 800a88c:	4620      	mov	r0, r4
 800a88e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a892:	3a30      	subs	r2, #48	@ 0x30
 800a894:	2a09      	cmp	r2, #9
 800a896:	d903      	bls.n	800a8a0 <_vfiprintf_r+0x1cc>
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d0c6      	beq.n	800a82a <_vfiprintf_r+0x156>
 800a89c:	9105      	str	r1, [sp, #20]
 800a89e:	e7c4      	b.n	800a82a <_vfiprintf_r+0x156>
 800a8a0:	fb0c 2101 	mla	r1, ip, r1, r2
 800a8a4:	4604      	mov	r4, r0
 800a8a6:	2301      	movs	r3, #1
 800a8a8:	e7f0      	b.n	800a88c <_vfiprintf_r+0x1b8>
 800a8aa:	ab03      	add	r3, sp, #12
 800a8ac:	9300      	str	r3, [sp, #0]
 800a8ae:	462a      	mov	r2, r5
 800a8b0:	4b12      	ldr	r3, [pc, #72]	@ (800a8fc <_vfiprintf_r+0x228>)
 800a8b2:	a904      	add	r1, sp, #16
 800a8b4:	4630      	mov	r0, r6
 800a8b6:	f3af 8000 	nop.w
 800a8ba:	4607      	mov	r7, r0
 800a8bc:	1c78      	adds	r0, r7, #1
 800a8be:	d1d6      	bne.n	800a86e <_vfiprintf_r+0x19a>
 800a8c0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a8c2:	07d9      	lsls	r1, r3, #31
 800a8c4:	d405      	bmi.n	800a8d2 <_vfiprintf_r+0x1fe>
 800a8c6:	89ab      	ldrh	r3, [r5, #12]
 800a8c8:	059a      	lsls	r2, r3, #22
 800a8ca:	d402      	bmi.n	800a8d2 <_vfiprintf_r+0x1fe>
 800a8cc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a8ce:	f7ff fc77 	bl	800a1c0 <__retarget_lock_release_recursive>
 800a8d2:	89ab      	ldrh	r3, [r5, #12]
 800a8d4:	065b      	lsls	r3, r3, #25
 800a8d6:	f53f af1f 	bmi.w	800a718 <_vfiprintf_r+0x44>
 800a8da:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a8dc:	e71e      	b.n	800a71c <_vfiprintf_r+0x48>
 800a8de:	ab03      	add	r3, sp, #12
 800a8e0:	9300      	str	r3, [sp, #0]
 800a8e2:	462a      	mov	r2, r5
 800a8e4:	4b05      	ldr	r3, [pc, #20]	@ (800a8fc <_vfiprintf_r+0x228>)
 800a8e6:	a904      	add	r1, sp, #16
 800a8e8:	4630      	mov	r0, r6
 800a8ea:	f000 f879 	bl	800a9e0 <_printf_i>
 800a8ee:	e7e4      	b.n	800a8ba <_vfiprintf_r+0x1e6>
 800a8f0:	0800b058 	.word	0x0800b058
 800a8f4:	0800b062 	.word	0x0800b062
 800a8f8:	00000000 	.word	0x00000000
 800a8fc:	0800a6af 	.word	0x0800a6af
 800a900:	0800b05e 	.word	0x0800b05e

0800a904 <_printf_common>:
 800a904:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a908:	4616      	mov	r6, r2
 800a90a:	4698      	mov	r8, r3
 800a90c:	688a      	ldr	r2, [r1, #8]
 800a90e:	690b      	ldr	r3, [r1, #16]
 800a910:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a914:	4293      	cmp	r3, r2
 800a916:	bfb8      	it	lt
 800a918:	4613      	movlt	r3, r2
 800a91a:	6033      	str	r3, [r6, #0]
 800a91c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a920:	4607      	mov	r7, r0
 800a922:	460c      	mov	r4, r1
 800a924:	b10a      	cbz	r2, 800a92a <_printf_common+0x26>
 800a926:	3301      	adds	r3, #1
 800a928:	6033      	str	r3, [r6, #0]
 800a92a:	6823      	ldr	r3, [r4, #0]
 800a92c:	0699      	lsls	r1, r3, #26
 800a92e:	bf42      	ittt	mi
 800a930:	6833      	ldrmi	r3, [r6, #0]
 800a932:	3302      	addmi	r3, #2
 800a934:	6033      	strmi	r3, [r6, #0]
 800a936:	6825      	ldr	r5, [r4, #0]
 800a938:	f015 0506 	ands.w	r5, r5, #6
 800a93c:	d106      	bne.n	800a94c <_printf_common+0x48>
 800a93e:	f104 0a19 	add.w	sl, r4, #25
 800a942:	68e3      	ldr	r3, [r4, #12]
 800a944:	6832      	ldr	r2, [r6, #0]
 800a946:	1a9b      	subs	r3, r3, r2
 800a948:	42ab      	cmp	r3, r5
 800a94a:	dc26      	bgt.n	800a99a <_printf_common+0x96>
 800a94c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a950:	6822      	ldr	r2, [r4, #0]
 800a952:	3b00      	subs	r3, #0
 800a954:	bf18      	it	ne
 800a956:	2301      	movne	r3, #1
 800a958:	0692      	lsls	r2, r2, #26
 800a95a:	d42b      	bmi.n	800a9b4 <_printf_common+0xb0>
 800a95c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a960:	4641      	mov	r1, r8
 800a962:	4638      	mov	r0, r7
 800a964:	47c8      	blx	r9
 800a966:	3001      	adds	r0, #1
 800a968:	d01e      	beq.n	800a9a8 <_printf_common+0xa4>
 800a96a:	6823      	ldr	r3, [r4, #0]
 800a96c:	6922      	ldr	r2, [r4, #16]
 800a96e:	f003 0306 	and.w	r3, r3, #6
 800a972:	2b04      	cmp	r3, #4
 800a974:	bf02      	ittt	eq
 800a976:	68e5      	ldreq	r5, [r4, #12]
 800a978:	6833      	ldreq	r3, [r6, #0]
 800a97a:	1aed      	subeq	r5, r5, r3
 800a97c:	68a3      	ldr	r3, [r4, #8]
 800a97e:	bf0c      	ite	eq
 800a980:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a984:	2500      	movne	r5, #0
 800a986:	4293      	cmp	r3, r2
 800a988:	bfc4      	itt	gt
 800a98a:	1a9b      	subgt	r3, r3, r2
 800a98c:	18ed      	addgt	r5, r5, r3
 800a98e:	2600      	movs	r6, #0
 800a990:	341a      	adds	r4, #26
 800a992:	42b5      	cmp	r5, r6
 800a994:	d11a      	bne.n	800a9cc <_printf_common+0xc8>
 800a996:	2000      	movs	r0, #0
 800a998:	e008      	b.n	800a9ac <_printf_common+0xa8>
 800a99a:	2301      	movs	r3, #1
 800a99c:	4652      	mov	r2, sl
 800a99e:	4641      	mov	r1, r8
 800a9a0:	4638      	mov	r0, r7
 800a9a2:	47c8      	blx	r9
 800a9a4:	3001      	adds	r0, #1
 800a9a6:	d103      	bne.n	800a9b0 <_printf_common+0xac>
 800a9a8:	f04f 30ff 	mov.w	r0, #4294967295
 800a9ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a9b0:	3501      	adds	r5, #1
 800a9b2:	e7c6      	b.n	800a942 <_printf_common+0x3e>
 800a9b4:	18e1      	adds	r1, r4, r3
 800a9b6:	1c5a      	adds	r2, r3, #1
 800a9b8:	2030      	movs	r0, #48	@ 0x30
 800a9ba:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a9be:	4422      	add	r2, r4
 800a9c0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a9c4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a9c8:	3302      	adds	r3, #2
 800a9ca:	e7c7      	b.n	800a95c <_printf_common+0x58>
 800a9cc:	2301      	movs	r3, #1
 800a9ce:	4622      	mov	r2, r4
 800a9d0:	4641      	mov	r1, r8
 800a9d2:	4638      	mov	r0, r7
 800a9d4:	47c8      	blx	r9
 800a9d6:	3001      	adds	r0, #1
 800a9d8:	d0e6      	beq.n	800a9a8 <_printf_common+0xa4>
 800a9da:	3601      	adds	r6, #1
 800a9dc:	e7d9      	b.n	800a992 <_printf_common+0x8e>
	...

0800a9e0 <_printf_i>:
 800a9e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a9e4:	7e0f      	ldrb	r7, [r1, #24]
 800a9e6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a9e8:	2f78      	cmp	r7, #120	@ 0x78
 800a9ea:	4691      	mov	r9, r2
 800a9ec:	4680      	mov	r8, r0
 800a9ee:	460c      	mov	r4, r1
 800a9f0:	469a      	mov	sl, r3
 800a9f2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a9f6:	d807      	bhi.n	800aa08 <_printf_i+0x28>
 800a9f8:	2f62      	cmp	r7, #98	@ 0x62
 800a9fa:	d80a      	bhi.n	800aa12 <_printf_i+0x32>
 800a9fc:	2f00      	cmp	r7, #0
 800a9fe:	f000 80d2 	beq.w	800aba6 <_printf_i+0x1c6>
 800aa02:	2f58      	cmp	r7, #88	@ 0x58
 800aa04:	f000 80b9 	beq.w	800ab7a <_printf_i+0x19a>
 800aa08:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800aa0c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800aa10:	e03a      	b.n	800aa88 <_printf_i+0xa8>
 800aa12:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800aa16:	2b15      	cmp	r3, #21
 800aa18:	d8f6      	bhi.n	800aa08 <_printf_i+0x28>
 800aa1a:	a101      	add	r1, pc, #4	@ (adr r1, 800aa20 <_printf_i+0x40>)
 800aa1c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800aa20:	0800aa79 	.word	0x0800aa79
 800aa24:	0800aa8d 	.word	0x0800aa8d
 800aa28:	0800aa09 	.word	0x0800aa09
 800aa2c:	0800aa09 	.word	0x0800aa09
 800aa30:	0800aa09 	.word	0x0800aa09
 800aa34:	0800aa09 	.word	0x0800aa09
 800aa38:	0800aa8d 	.word	0x0800aa8d
 800aa3c:	0800aa09 	.word	0x0800aa09
 800aa40:	0800aa09 	.word	0x0800aa09
 800aa44:	0800aa09 	.word	0x0800aa09
 800aa48:	0800aa09 	.word	0x0800aa09
 800aa4c:	0800ab8d 	.word	0x0800ab8d
 800aa50:	0800aab7 	.word	0x0800aab7
 800aa54:	0800ab47 	.word	0x0800ab47
 800aa58:	0800aa09 	.word	0x0800aa09
 800aa5c:	0800aa09 	.word	0x0800aa09
 800aa60:	0800abaf 	.word	0x0800abaf
 800aa64:	0800aa09 	.word	0x0800aa09
 800aa68:	0800aab7 	.word	0x0800aab7
 800aa6c:	0800aa09 	.word	0x0800aa09
 800aa70:	0800aa09 	.word	0x0800aa09
 800aa74:	0800ab4f 	.word	0x0800ab4f
 800aa78:	6833      	ldr	r3, [r6, #0]
 800aa7a:	1d1a      	adds	r2, r3, #4
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	6032      	str	r2, [r6, #0]
 800aa80:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800aa84:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800aa88:	2301      	movs	r3, #1
 800aa8a:	e09d      	b.n	800abc8 <_printf_i+0x1e8>
 800aa8c:	6833      	ldr	r3, [r6, #0]
 800aa8e:	6820      	ldr	r0, [r4, #0]
 800aa90:	1d19      	adds	r1, r3, #4
 800aa92:	6031      	str	r1, [r6, #0]
 800aa94:	0606      	lsls	r6, r0, #24
 800aa96:	d501      	bpl.n	800aa9c <_printf_i+0xbc>
 800aa98:	681d      	ldr	r5, [r3, #0]
 800aa9a:	e003      	b.n	800aaa4 <_printf_i+0xc4>
 800aa9c:	0645      	lsls	r5, r0, #25
 800aa9e:	d5fb      	bpl.n	800aa98 <_printf_i+0xb8>
 800aaa0:	f9b3 5000 	ldrsh.w	r5, [r3]
 800aaa4:	2d00      	cmp	r5, #0
 800aaa6:	da03      	bge.n	800aab0 <_printf_i+0xd0>
 800aaa8:	232d      	movs	r3, #45	@ 0x2d
 800aaaa:	426d      	negs	r5, r5
 800aaac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800aab0:	4859      	ldr	r0, [pc, #356]	@ (800ac18 <_printf_i+0x238>)
 800aab2:	230a      	movs	r3, #10
 800aab4:	e011      	b.n	800aada <_printf_i+0xfa>
 800aab6:	6821      	ldr	r1, [r4, #0]
 800aab8:	6833      	ldr	r3, [r6, #0]
 800aaba:	0608      	lsls	r0, r1, #24
 800aabc:	f853 5b04 	ldr.w	r5, [r3], #4
 800aac0:	d402      	bmi.n	800aac8 <_printf_i+0xe8>
 800aac2:	0649      	lsls	r1, r1, #25
 800aac4:	bf48      	it	mi
 800aac6:	b2ad      	uxthmi	r5, r5
 800aac8:	2f6f      	cmp	r7, #111	@ 0x6f
 800aaca:	4853      	ldr	r0, [pc, #332]	@ (800ac18 <_printf_i+0x238>)
 800aacc:	6033      	str	r3, [r6, #0]
 800aace:	bf14      	ite	ne
 800aad0:	230a      	movne	r3, #10
 800aad2:	2308      	moveq	r3, #8
 800aad4:	2100      	movs	r1, #0
 800aad6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800aada:	6866      	ldr	r6, [r4, #4]
 800aadc:	60a6      	str	r6, [r4, #8]
 800aade:	2e00      	cmp	r6, #0
 800aae0:	bfa2      	ittt	ge
 800aae2:	6821      	ldrge	r1, [r4, #0]
 800aae4:	f021 0104 	bicge.w	r1, r1, #4
 800aae8:	6021      	strge	r1, [r4, #0]
 800aaea:	b90d      	cbnz	r5, 800aaf0 <_printf_i+0x110>
 800aaec:	2e00      	cmp	r6, #0
 800aaee:	d04b      	beq.n	800ab88 <_printf_i+0x1a8>
 800aaf0:	4616      	mov	r6, r2
 800aaf2:	fbb5 f1f3 	udiv	r1, r5, r3
 800aaf6:	fb03 5711 	mls	r7, r3, r1, r5
 800aafa:	5dc7      	ldrb	r7, [r0, r7]
 800aafc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ab00:	462f      	mov	r7, r5
 800ab02:	42bb      	cmp	r3, r7
 800ab04:	460d      	mov	r5, r1
 800ab06:	d9f4      	bls.n	800aaf2 <_printf_i+0x112>
 800ab08:	2b08      	cmp	r3, #8
 800ab0a:	d10b      	bne.n	800ab24 <_printf_i+0x144>
 800ab0c:	6823      	ldr	r3, [r4, #0]
 800ab0e:	07df      	lsls	r7, r3, #31
 800ab10:	d508      	bpl.n	800ab24 <_printf_i+0x144>
 800ab12:	6923      	ldr	r3, [r4, #16]
 800ab14:	6861      	ldr	r1, [r4, #4]
 800ab16:	4299      	cmp	r1, r3
 800ab18:	bfde      	ittt	le
 800ab1a:	2330      	movle	r3, #48	@ 0x30
 800ab1c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ab20:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ab24:	1b92      	subs	r2, r2, r6
 800ab26:	6122      	str	r2, [r4, #16]
 800ab28:	f8cd a000 	str.w	sl, [sp]
 800ab2c:	464b      	mov	r3, r9
 800ab2e:	aa03      	add	r2, sp, #12
 800ab30:	4621      	mov	r1, r4
 800ab32:	4640      	mov	r0, r8
 800ab34:	f7ff fee6 	bl	800a904 <_printf_common>
 800ab38:	3001      	adds	r0, #1
 800ab3a:	d14a      	bne.n	800abd2 <_printf_i+0x1f2>
 800ab3c:	f04f 30ff 	mov.w	r0, #4294967295
 800ab40:	b004      	add	sp, #16
 800ab42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab46:	6823      	ldr	r3, [r4, #0]
 800ab48:	f043 0320 	orr.w	r3, r3, #32
 800ab4c:	6023      	str	r3, [r4, #0]
 800ab4e:	4833      	ldr	r0, [pc, #204]	@ (800ac1c <_printf_i+0x23c>)
 800ab50:	2778      	movs	r7, #120	@ 0x78
 800ab52:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ab56:	6823      	ldr	r3, [r4, #0]
 800ab58:	6831      	ldr	r1, [r6, #0]
 800ab5a:	061f      	lsls	r7, r3, #24
 800ab5c:	f851 5b04 	ldr.w	r5, [r1], #4
 800ab60:	d402      	bmi.n	800ab68 <_printf_i+0x188>
 800ab62:	065f      	lsls	r7, r3, #25
 800ab64:	bf48      	it	mi
 800ab66:	b2ad      	uxthmi	r5, r5
 800ab68:	6031      	str	r1, [r6, #0]
 800ab6a:	07d9      	lsls	r1, r3, #31
 800ab6c:	bf44      	itt	mi
 800ab6e:	f043 0320 	orrmi.w	r3, r3, #32
 800ab72:	6023      	strmi	r3, [r4, #0]
 800ab74:	b11d      	cbz	r5, 800ab7e <_printf_i+0x19e>
 800ab76:	2310      	movs	r3, #16
 800ab78:	e7ac      	b.n	800aad4 <_printf_i+0xf4>
 800ab7a:	4827      	ldr	r0, [pc, #156]	@ (800ac18 <_printf_i+0x238>)
 800ab7c:	e7e9      	b.n	800ab52 <_printf_i+0x172>
 800ab7e:	6823      	ldr	r3, [r4, #0]
 800ab80:	f023 0320 	bic.w	r3, r3, #32
 800ab84:	6023      	str	r3, [r4, #0]
 800ab86:	e7f6      	b.n	800ab76 <_printf_i+0x196>
 800ab88:	4616      	mov	r6, r2
 800ab8a:	e7bd      	b.n	800ab08 <_printf_i+0x128>
 800ab8c:	6833      	ldr	r3, [r6, #0]
 800ab8e:	6825      	ldr	r5, [r4, #0]
 800ab90:	6961      	ldr	r1, [r4, #20]
 800ab92:	1d18      	adds	r0, r3, #4
 800ab94:	6030      	str	r0, [r6, #0]
 800ab96:	062e      	lsls	r6, r5, #24
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	d501      	bpl.n	800aba0 <_printf_i+0x1c0>
 800ab9c:	6019      	str	r1, [r3, #0]
 800ab9e:	e002      	b.n	800aba6 <_printf_i+0x1c6>
 800aba0:	0668      	lsls	r0, r5, #25
 800aba2:	d5fb      	bpl.n	800ab9c <_printf_i+0x1bc>
 800aba4:	8019      	strh	r1, [r3, #0]
 800aba6:	2300      	movs	r3, #0
 800aba8:	6123      	str	r3, [r4, #16]
 800abaa:	4616      	mov	r6, r2
 800abac:	e7bc      	b.n	800ab28 <_printf_i+0x148>
 800abae:	6833      	ldr	r3, [r6, #0]
 800abb0:	1d1a      	adds	r2, r3, #4
 800abb2:	6032      	str	r2, [r6, #0]
 800abb4:	681e      	ldr	r6, [r3, #0]
 800abb6:	6862      	ldr	r2, [r4, #4]
 800abb8:	2100      	movs	r1, #0
 800abba:	4630      	mov	r0, r6
 800abbc:	f7f5 fb20 	bl	8000200 <memchr>
 800abc0:	b108      	cbz	r0, 800abc6 <_printf_i+0x1e6>
 800abc2:	1b80      	subs	r0, r0, r6
 800abc4:	6060      	str	r0, [r4, #4]
 800abc6:	6863      	ldr	r3, [r4, #4]
 800abc8:	6123      	str	r3, [r4, #16]
 800abca:	2300      	movs	r3, #0
 800abcc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800abd0:	e7aa      	b.n	800ab28 <_printf_i+0x148>
 800abd2:	6923      	ldr	r3, [r4, #16]
 800abd4:	4632      	mov	r2, r6
 800abd6:	4649      	mov	r1, r9
 800abd8:	4640      	mov	r0, r8
 800abda:	47d0      	blx	sl
 800abdc:	3001      	adds	r0, #1
 800abde:	d0ad      	beq.n	800ab3c <_printf_i+0x15c>
 800abe0:	6823      	ldr	r3, [r4, #0]
 800abe2:	079b      	lsls	r3, r3, #30
 800abe4:	d413      	bmi.n	800ac0e <_printf_i+0x22e>
 800abe6:	68e0      	ldr	r0, [r4, #12]
 800abe8:	9b03      	ldr	r3, [sp, #12]
 800abea:	4298      	cmp	r0, r3
 800abec:	bfb8      	it	lt
 800abee:	4618      	movlt	r0, r3
 800abf0:	e7a6      	b.n	800ab40 <_printf_i+0x160>
 800abf2:	2301      	movs	r3, #1
 800abf4:	4632      	mov	r2, r6
 800abf6:	4649      	mov	r1, r9
 800abf8:	4640      	mov	r0, r8
 800abfa:	47d0      	blx	sl
 800abfc:	3001      	adds	r0, #1
 800abfe:	d09d      	beq.n	800ab3c <_printf_i+0x15c>
 800ac00:	3501      	adds	r5, #1
 800ac02:	68e3      	ldr	r3, [r4, #12]
 800ac04:	9903      	ldr	r1, [sp, #12]
 800ac06:	1a5b      	subs	r3, r3, r1
 800ac08:	42ab      	cmp	r3, r5
 800ac0a:	dcf2      	bgt.n	800abf2 <_printf_i+0x212>
 800ac0c:	e7eb      	b.n	800abe6 <_printf_i+0x206>
 800ac0e:	2500      	movs	r5, #0
 800ac10:	f104 0619 	add.w	r6, r4, #25
 800ac14:	e7f5      	b.n	800ac02 <_printf_i+0x222>
 800ac16:	bf00      	nop
 800ac18:	0800b069 	.word	0x0800b069
 800ac1c:	0800b07a 	.word	0x0800b07a

0800ac20 <__sflush_r>:
 800ac20:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ac24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac28:	0716      	lsls	r6, r2, #28
 800ac2a:	4605      	mov	r5, r0
 800ac2c:	460c      	mov	r4, r1
 800ac2e:	d454      	bmi.n	800acda <__sflush_r+0xba>
 800ac30:	684b      	ldr	r3, [r1, #4]
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	dc02      	bgt.n	800ac3c <__sflush_r+0x1c>
 800ac36:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	dd48      	ble.n	800acce <__sflush_r+0xae>
 800ac3c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ac3e:	2e00      	cmp	r6, #0
 800ac40:	d045      	beq.n	800acce <__sflush_r+0xae>
 800ac42:	2300      	movs	r3, #0
 800ac44:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ac48:	682f      	ldr	r7, [r5, #0]
 800ac4a:	6a21      	ldr	r1, [r4, #32]
 800ac4c:	602b      	str	r3, [r5, #0]
 800ac4e:	d030      	beq.n	800acb2 <__sflush_r+0x92>
 800ac50:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ac52:	89a3      	ldrh	r3, [r4, #12]
 800ac54:	0759      	lsls	r1, r3, #29
 800ac56:	d505      	bpl.n	800ac64 <__sflush_r+0x44>
 800ac58:	6863      	ldr	r3, [r4, #4]
 800ac5a:	1ad2      	subs	r2, r2, r3
 800ac5c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ac5e:	b10b      	cbz	r3, 800ac64 <__sflush_r+0x44>
 800ac60:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ac62:	1ad2      	subs	r2, r2, r3
 800ac64:	2300      	movs	r3, #0
 800ac66:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ac68:	6a21      	ldr	r1, [r4, #32]
 800ac6a:	4628      	mov	r0, r5
 800ac6c:	47b0      	blx	r6
 800ac6e:	1c43      	adds	r3, r0, #1
 800ac70:	89a3      	ldrh	r3, [r4, #12]
 800ac72:	d106      	bne.n	800ac82 <__sflush_r+0x62>
 800ac74:	6829      	ldr	r1, [r5, #0]
 800ac76:	291d      	cmp	r1, #29
 800ac78:	d82b      	bhi.n	800acd2 <__sflush_r+0xb2>
 800ac7a:	4a2a      	ldr	r2, [pc, #168]	@ (800ad24 <__sflush_r+0x104>)
 800ac7c:	410a      	asrs	r2, r1
 800ac7e:	07d6      	lsls	r6, r2, #31
 800ac80:	d427      	bmi.n	800acd2 <__sflush_r+0xb2>
 800ac82:	2200      	movs	r2, #0
 800ac84:	6062      	str	r2, [r4, #4]
 800ac86:	04d9      	lsls	r1, r3, #19
 800ac88:	6922      	ldr	r2, [r4, #16]
 800ac8a:	6022      	str	r2, [r4, #0]
 800ac8c:	d504      	bpl.n	800ac98 <__sflush_r+0x78>
 800ac8e:	1c42      	adds	r2, r0, #1
 800ac90:	d101      	bne.n	800ac96 <__sflush_r+0x76>
 800ac92:	682b      	ldr	r3, [r5, #0]
 800ac94:	b903      	cbnz	r3, 800ac98 <__sflush_r+0x78>
 800ac96:	6560      	str	r0, [r4, #84]	@ 0x54
 800ac98:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ac9a:	602f      	str	r7, [r5, #0]
 800ac9c:	b1b9      	cbz	r1, 800acce <__sflush_r+0xae>
 800ac9e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800aca2:	4299      	cmp	r1, r3
 800aca4:	d002      	beq.n	800acac <__sflush_r+0x8c>
 800aca6:	4628      	mov	r0, r5
 800aca8:	f7ff fa9a 	bl	800a1e0 <_free_r>
 800acac:	2300      	movs	r3, #0
 800acae:	6363      	str	r3, [r4, #52]	@ 0x34
 800acb0:	e00d      	b.n	800acce <__sflush_r+0xae>
 800acb2:	2301      	movs	r3, #1
 800acb4:	4628      	mov	r0, r5
 800acb6:	47b0      	blx	r6
 800acb8:	4602      	mov	r2, r0
 800acba:	1c50      	adds	r0, r2, #1
 800acbc:	d1c9      	bne.n	800ac52 <__sflush_r+0x32>
 800acbe:	682b      	ldr	r3, [r5, #0]
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d0c6      	beq.n	800ac52 <__sflush_r+0x32>
 800acc4:	2b1d      	cmp	r3, #29
 800acc6:	d001      	beq.n	800accc <__sflush_r+0xac>
 800acc8:	2b16      	cmp	r3, #22
 800acca:	d11e      	bne.n	800ad0a <__sflush_r+0xea>
 800accc:	602f      	str	r7, [r5, #0]
 800acce:	2000      	movs	r0, #0
 800acd0:	e022      	b.n	800ad18 <__sflush_r+0xf8>
 800acd2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800acd6:	b21b      	sxth	r3, r3
 800acd8:	e01b      	b.n	800ad12 <__sflush_r+0xf2>
 800acda:	690f      	ldr	r7, [r1, #16]
 800acdc:	2f00      	cmp	r7, #0
 800acde:	d0f6      	beq.n	800acce <__sflush_r+0xae>
 800ace0:	0793      	lsls	r3, r2, #30
 800ace2:	680e      	ldr	r6, [r1, #0]
 800ace4:	bf08      	it	eq
 800ace6:	694b      	ldreq	r3, [r1, #20]
 800ace8:	600f      	str	r7, [r1, #0]
 800acea:	bf18      	it	ne
 800acec:	2300      	movne	r3, #0
 800acee:	eba6 0807 	sub.w	r8, r6, r7
 800acf2:	608b      	str	r3, [r1, #8]
 800acf4:	f1b8 0f00 	cmp.w	r8, #0
 800acf8:	dde9      	ble.n	800acce <__sflush_r+0xae>
 800acfa:	6a21      	ldr	r1, [r4, #32]
 800acfc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800acfe:	4643      	mov	r3, r8
 800ad00:	463a      	mov	r2, r7
 800ad02:	4628      	mov	r0, r5
 800ad04:	47b0      	blx	r6
 800ad06:	2800      	cmp	r0, #0
 800ad08:	dc08      	bgt.n	800ad1c <__sflush_r+0xfc>
 800ad0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ad0e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ad12:	81a3      	strh	r3, [r4, #12]
 800ad14:	f04f 30ff 	mov.w	r0, #4294967295
 800ad18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad1c:	4407      	add	r7, r0
 800ad1e:	eba8 0800 	sub.w	r8, r8, r0
 800ad22:	e7e7      	b.n	800acf4 <__sflush_r+0xd4>
 800ad24:	dfbffffe 	.word	0xdfbffffe

0800ad28 <_fflush_r>:
 800ad28:	b538      	push	{r3, r4, r5, lr}
 800ad2a:	690b      	ldr	r3, [r1, #16]
 800ad2c:	4605      	mov	r5, r0
 800ad2e:	460c      	mov	r4, r1
 800ad30:	b913      	cbnz	r3, 800ad38 <_fflush_r+0x10>
 800ad32:	2500      	movs	r5, #0
 800ad34:	4628      	mov	r0, r5
 800ad36:	bd38      	pop	{r3, r4, r5, pc}
 800ad38:	b118      	cbz	r0, 800ad42 <_fflush_r+0x1a>
 800ad3a:	6a03      	ldr	r3, [r0, #32]
 800ad3c:	b90b      	cbnz	r3, 800ad42 <_fflush_r+0x1a>
 800ad3e:	f7ff f801 	bl	8009d44 <__sinit>
 800ad42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d0f3      	beq.n	800ad32 <_fflush_r+0xa>
 800ad4a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ad4c:	07d0      	lsls	r0, r2, #31
 800ad4e:	d404      	bmi.n	800ad5a <_fflush_r+0x32>
 800ad50:	0599      	lsls	r1, r3, #22
 800ad52:	d402      	bmi.n	800ad5a <_fflush_r+0x32>
 800ad54:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ad56:	f7ff fa32 	bl	800a1be <__retarget_lock_acquire_recursive>
 800ad5a:	4628      	mov	r0, r5
 800ad5c:	4621      	mov	r1, r4
 800ad5e:	f7ff ff5f 	bl	800ac20 <__sflush_r>
 800ad62:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ad64:	07da      	lsls	r2, r3, #31
 800ad66:	4605      	mov	r5, r0
 800ad68:	d4e4      	bmi.n	800ad34 <_fflush_r+0xc>
 800ad6a:	89a3      	ldrh	r3, [r4, #12]
 800ad6c:	059b      	lsls	r3, r3, #22
 800ad6e:	d4e1      	bmi.n	800ad34 <_fflush_r+0xc>
 800ad70:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ad72:	f7ff fa25 	bl	800a1c0 <__retarget_lock_release_recursive>
 800ad76:	e7dd      	b.n	800ad34 <_fflush_r+0xc>

0800ad78 <__swhatbuf_r>:
 800ad78:	b570      	push	{r4, r5, r6, lr}
 800ad7a:	460c      	mov	r4, r1
 800ad7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad80:	2900      	cmp	r1, #0
 800ad82:	b096      	sub	sp, #88	@ 0x58
 800ad84:	4615      	mov	r5, r2
 800ad86:	461e      	mov	r6, r3
 800ad88:	da0d      	bge.n	800ada6 <__swhatbuf_r+0x2e>
 800ad8a:	89a3      	ldrh	r3, [r4, #12]
 800ad8c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ad90:	f04f 0100 	mov.w	r1, #0
 800ad94:	bf14      	ite	ne
 800ad96:	2340      	movne	r3, #64	@ 0x40
 800ad98:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ad9c:	2000      	movs	r0, #0
 800ad9e:	6031      	str	r1, [r6, #0]
 800ada0:	602b      	str	r3, [r5, #0]
 800ada2:	b016      	add	sp, #88	@ 0x58
 800ada4:	bd70      	pop	{r4, r5, r6, pc}
 800ada6:	466a      	mov	r2, sp
 800ada8:	f000 f862 	bl	800ae70 <_fstat_r>
 800adac:	2800      	cmp	r0, #0
 800adae:	dbec      	blt.n	800ad8a <__swhatbuf_r+0x12>
 800adb0:	9901      	ldr	r1, [sp, #4]
 800adb2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800adb6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800adba:	4259      	negs	r1, r3
 800adbc:	4159      	adcs	r1, r3
 800adbe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800adc2:	e7eb      	b.n	800ad9c <__swhatbuf_r+0x24>

0800adc4 <__smakebuf_r>:
 800adc4:	898b      	ldrh	r3, [r1, #12]
 800adc6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800adc8:	079d      	lsls	r5, r3, #30
 800adca:	4606      	mov	r6, r0
 800adcc:	460c      	mov	r4, r1
 800adce:	d507      	bpl.n	800ade0 <__smakebuf_r+0x1c>
 800add0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800add4:	6023      	str	r3, [r4, #0]
 800add6:	6123      	str	r3, [r4, #16]
 800add8:	2301      	movs	r3, #1
 800adda:	6163      	str	r3, [r4, #20]
 800addc:	b003      	add	sp, #12
 800adde:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ade0:	ab01      	add	r3, sp, #4
 800ade2:	466a      	mov	r2, sp
 800ade4:	f7ff ffc8 	bl	800ad78 <__swhatbuf_r>
 800ade8:	9f00      	ldr	r7, [sp, #0]
 800adea:	4605      	mov	r5, r0
 800adec:	4639      	mov	r1, r7
 800adee:	4630      	mov	r0, r6
 800adf0:	f7ff fa62 	bl	800a2b8 <_malloc_r>
 800adf4:	b948      	cbnz	r0, 800ae0a <__smakebuf_r+0x46>
 800adf6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800adfa:	059a      	lsls	r2, r3, #22
 800adfc:	d4ee      	bmi.n	800addc <__smakebuf_r+0x18>
 800adfe:	f023 0303 	bic.w	r3, r3, #3
 800ae02:	f043 0302 	orr.w	r3, r3, #2
 800ae06:	81a3      	strh	r3, [r4, #12]
 800ae08:	e7e2      	b.n	800add0 <__smakebuf_r+0xc>
 800ae0a:	89a3      	ldrh	r3, [r4, #12]
 800ae0c:	6020      	str	r0, [r4, #0]
 800ae0e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ae12:	81a3      	strh	r3, [r4, #12]
 800ae14:	9b01      	ldr	r3, [sp, #4]
 800ae16:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ae1a:	b15b      	cbz	r3, 800ae34 <__smakebuf_r+0x70>
 800ae1c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ae20:	4630      	mov	r0, r6
 800ae22:	f000 f837 	bl	800ae94 <_isatty_r>
 800ae26:	b128      	cbz	r0, 800ae34 <__smakebuf_r+0x70>
 800ae28:	89a3      	ldrh	r3, [r4, #12]
 800ae2a:	f023 0303 	bic.w	r3, r3, #3
 800ae2e:	f043 0301 	orr.w	r3, r3, #1
 800ae32:	81a3      	strh	r3, [r4, #12]
 800ae34:	89a3      	ldrh	r3, [r4, #12]
 800ae36:	431d      	orrs	r5, r3
 800ae38:	81a5      	strh	r5, [r4, #12]
 800ae3a:	e7cf      	b.n	800addc <__smakebuf_r+0x18>

0800ae3c <memmove>:
 800ae3c:	4288      	cmp	r0, r1
 800ae3e:	b510      	push	{r4, lr}
 800ae40:	eb01 0402 	add.w	r4, r1, r2
 800ae44:	d902      	bls.n	800ae4c <memmove+0x10>
 800ae46:	4284      	cmp	r4, r0
 800ae48:	4623      	mov	r3, r4
 800ae4a:	d807      	bhi.n	800ae5c <memmove+0x20>
 800ae4c:	1e43      	subs	r3, r0, #1
 800ae4e:	42a1      	cmp	r1, r4
 800ae50:	d008      	beq.n	800ae64 <memmove+0x28>
 800ae52:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ae56:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ae5a:	e7f8      	b.n	800ae4e <memmove+0x12>
 800ae5c:	4402      	add	r2, r0
 800ae5e:	4601      	mov	r1, r0
 800ae60:	428a      	cmp	r2, r1
 800ae62:	d100      	bne.n	800ae66 <memmove+0x2a>
 800ae64:	bd10      	pop	{r4, pc}
 800ae66:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ae6a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ae6e:	e7f7      	b.n	800ae60 <memmove+0x24>

0800ae70 <_fstat_r>:
 800ae70:	b538      	push	{r3, r4, r5, lr}
 800ae72:	4d07      	ldr	r5, [pc, #28]	@ (800ae90 <_fstat_r+0x20>)
 800ae74:	2300      	movs	r3, #0
 800ae76:	4604      	mov	r4, r0
 800ae78:	4608      	mov	r0, r1
 800ae7a:	4611      	mov	r1, r2
 800ae7c:	602b      	str	r3, [r5, #0]
 800ae7e:	f7f6 f872 	bl	8000f66 <_fstat>
 800ae82:	1c43      	adds	r3, r0, #1
 800ae84:	d102      	bne.n	800ae8c <_fstat_r+0x1c>
 800ae86:	682b      	ldr	r3, [r5, #0]
 800ae88:	b103      	cbz	r3, 800ae8c <_fstat_r+0x1c>
 800ae8a:	6023      	str	r3, [r4, #0]
 800ae8c:	bd38      	pop	{r3, r4, r5, pc}
 800ae8e:	bf00      	nop
 800ae90:	2000b234 	.word	0x2000b234

0800ae94 <_isatty_r>:
 800ae94:	b538      	push	{r3, r4, r5, lr}
 800ae96:	4d06      	ldr	r5, [pc, #24]	@ (800aeb0 <_isatty_r+0x1c>)
 800ae98:	2300      	movs	r3, #0
 800ae9a:	4604      	mov	r4, r0
 800ae9c:	4608      	mov	r0, r1
 800ae9e:	602b      	str	r3, [r5, #0]
 800aea0:	f7f6 f871 	bl	8000f86 <_isatty>
 800aea4:	1c43      	adds	r3, r0, #1
 800aea6:	d102      	bne.n	800aeae <_isatty_r+0x1a>
 800aea8:	682b      	ldr	r3, [r5, #0]
 800aeaa:	b103      	cbz	r3, 800aeae <_isatty_r+0x1a>
 800aeac:	6023      	str	r3, [r4, #0]
 800aeae:	bd38      	pop	{r3, r4, r5, pc}
 800aeb0:	2000b234 	.word	0x2000b234

0800aeb4 <_sbrk_r>:
 800aeb4:	b538      	push	{r3, r4, r5, lr}
 800aeb6:	4d06      	ldr	r5, [pc, #24]	@ (800aed0 <_sbrk_r+0x1c>)
 800aeb8:	2300      	movs	r3, #0
 800aeba:	4604      	mov	r4, r0
 800aebc:	4608      	mov	r0, r1
 800aebe:	602b      	str	r3, [r5, #0]
 800aec0:	f7f6 f87a 	bl	8000fb8 <_sbrk>
 800aec4:	1c43      	adds	r3, r0, #1
 800aec6:	d102      	bne.n	800aece <_sbrk_r+0x1a>
 800aec8:	682b      	ldr	r3, [r5, #0]
 800aeca:	b103      	cbz	r3, 800aece <_sbrk_r+0x1a>
 800aecc:	6023      	str	r3, [r4, #0]
 800aece:	bd38      	pop	{r3, r4, r5, pc}
 800aed0:	2000b234 	.word	0x2000b234

0800aed4 <_realloc_r>:
 800aed4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aed8:	4680      	mov	r8, r0
 800aeda:	4615      	mov	r5, r2
 800aedc:	460c      	mov	r4, r1
 800aede:	b921      	cbnz	r1, 800aeea <_realloc_r+0x16>
 800aee0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aee4:	4611      	mov	r1, r2
 800aee6:	f7ff b9e7 	b.w	800a2b8 <_malloc_r>
 800aeea:	b92a      	cbnz	r2, 800aef8 <_realloc_r+0x24>
 800aeec:	f7ff f978 	bl	800a1e0 <_free_r>
 800aef0:	2400      	movs	r4, #0
 800aef2:	4620      	mov	r0, r4
 800aef4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aef8:	f000 f81a 	bl	800af30 <_malloc_usable_size_r>
 800aefc:	4285      	cmp	r5, r0
 800aefe:	4606      	mov	r6, r0
 800af00:	d802      	bhi.n	800af08 <_realloc_r+0x34>
 800af02:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800af06:	d8f4      	bhi.n	800aef2 <_realloc_r+0x1e>
 800af08:	4629      	mov	r1, r5
 800af0a:	4640      	mov	r0, r8
 800af0c:	f7ff f9d4 	bl	800a2b8 <_malloc_r>
 800af10:	4607      	mov	r7, r0
 800af12:	2800      	cmp	r0, #0
 800af14:	d0ec      	beq.n	800aef0 <_realloc_r+0x1c>
 800af16:	42b5      	cmp	r5, r6
 800af18:	462a      	mov	r2, r5
 800af1a:	4621      	mov	r1, r4
 800af1c:	bf28      	it	cs
 800af1e:	4632      	movcs	r2, r6
 800af20:	f7ff f94f 	bl	800a1c2 <memcpy>
 800af24:	4621      	mov	r1, r4
 800af26:	4640      	mov	r0, r8
 800af28:	f7ff f95a 	bl	800a1e0 <_free_r>
 800af2c:	463c      	mov	r4, r7
 800af2e:	e7e0      	b.n	800aef2 <_realloc_r+0x1e>

0800af30 <_malloc_usable_size_r>:
 800af30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800af34:	1f18      	subs	r0, r3, #4
 800af36:	2b00      	cmp	r3, #0
 800af38:	bfbc      	itt	lt
 800af3a:	580b      	ldrlt	r3, [r1, r0]
 800af3c:	18c0      	addlt	r0, r0, r3
 800af3e:	4770      	bx	lr

0800af40 <_init>:
 800af40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af42:	bf00      	nop
 800af44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af46:	bc08      	pop	{r3}
 800af48:	469e      	mov	lr, r3
 800af4a:	4770      	bx	lr

0800af4c <_fini>:
 800af4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af4e:	bf00      	nop
 800af50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af52:	bc08      	pop	{r3}
 800af54:	469e      	mov	lr, r3
 800af56:	4770      	bx	lr
