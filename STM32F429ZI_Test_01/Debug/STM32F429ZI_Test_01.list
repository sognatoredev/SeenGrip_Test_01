
STM32F429ZI_Test_01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009b00  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002f8  08009cb0  08009cb0  0000acb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009fa8  08009fa8  0000b14c  2**0
                  CONTENTS
  4 .ARM          00000008  08009fa8  08009fa8  0000afa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009fb0  08009fb0  0000b14c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009fb0  08009fb0  0000afb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009fb4  08009fb4  0000afb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000014c  20000000  08009fb8  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b14c  2**0
                  CONTENTS
 10 .bss          000024f8  2000014c  2000014c  0000b14c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20002644  20002644  0000b14c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b14c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001853a  00000000  00000000  0000b17c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003fb4  00000000  00000000  000236b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001488  00000000  00000000  00027670  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000fab  00000000  00000000  00028af8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000284dc  00000000  00000000  00029aa3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d9c5  00000000  00000000  00051f7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000deb71  00000000  00000000  0006f944  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0014e4b5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005900  00000000  00000000  0014e4f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006d  00000000  00000000  00153df8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000014c 	.word	0x2000014c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08009c98 	.word	0x08009c98

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000150 	.word	0x20000150
 80001ec:	08009c98 	.word	0x08009c98

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b96a 	b.w	800058c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	460c      	mov	r4, r1
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d14e      	bne.n	800037a <__udivmoddi4+0xaa>
 80002dc:	4694      	mov	ip, r2
 80002de:	458c      	cmp	ip, r1
 80002e0:	4686      	mov	lr, r0
 80002e2:	fab2 f282 	clz	r2, r2
 80002e6:	d962      	bls.n	80003ae <__udivmoddi4+0xde>
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0320 	rsb	r3, r2, #32
 80002ee:	4091      	lsls	r1, r2
 80002f0:	fa20 f303 	lsr.w	r3, r0, r3
 80002f4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002f8:	4319      	orrs	r1, r3
 80002fa:	fa00 fe02 	lsl.w	lr, r0, r2
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f f68c 	uxth.w	r6, ip
 8000306:	fbb1 f4f7 	udiv	r4, r1, r7
 800030a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030e:	fb07 1114 	mls	r1, r7, r4, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb04 f106 	mul.w	r1, r4, r6
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f104 30ff 	add.w	r0, r4, #4294967295
 8000326:	f080 8112 	bcs.w	800054e <__udivmoddi4+0x27e>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 810f 	bls.w	800054e <__udivmoddi4+0x27e>
 8000330:	3c02      	subs	r4, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	fa1f f38e 	uxth.w	r3, lr
 800033a:	fbb1 f0f7 	udiv	r0, r1, r7
 800033e:	fb07 1110 	mls	r1, r7, r0, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb00 f606 	mul.w	r6, r0, r6
 800034a:	429e      	cmp	r6, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x94>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f100 31ff 	add.w	r1, r0, #4294967295
 8000356:	f080 80fc 	bcs.w	8000552 <__udivmoddi4+0x282>
 800035a:	429e      	cmp	r6, r3
 800035c:	f240 80f9 	bls.w	8000552 <__udivmoddi4+0x282>
 8000360:	4463      	add	r3, ip
 8000362:	3802      	subs	r0, #2
 8000364:	1b9b      	subs	r3, r3, r6
 8000366:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800036a:	2100      	movs	r1, #0
 800036c:	b11d      	cbz	r5, 8000376 <__udivmoddi4+0xa6>
 800036e:	40d3      	lsrs	r3, r2
 8000370:	2200      	movs	r2, #0
 8000372:	e9c5 3200 	strd	r3, r2, [r5]
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d905      	bls.n	800038a <__udivmoddi4+0xba>
 800037e:	b10d      	cbz	r5, 8000384 <__udivmoddi4+0xb4>
 8000380:	e9c5 0100 	strd	r0, r1, [r5]
 8000384:	2100      	movs	r1, #0
 8000386:	4608      	mov	r0, r1
 8000388:	e7f5      	b.n	8000376 <__udivmoddi4+0xa6>
 800038a:	fab3 f183 	clz	r1, r3
 800038e:	2900      	cmp	r1, #0
 8000390:	d146      	bne.n	8000420 <__udivmoddi4+0x150>
 8000392:	42a3      	cmp	r3, r4
 8000394:	d302      	bcc.n	800039c <__udivmoddi4+0xcc>
 8000396:	4290      	cmp	r0, r2
 8000398:	f0c0 80f0 	bcc.w	800057c <__udivmoddi4+0x2ac>
 800039c:	1a86      	subs	r6, r0, r2
 800039e:	eb64 0303 	sbc.w	r3, r4, r3
 80003a2:	2001      	movs	r0, #1
 80003a4:	2d00      	cmp	r5, #0
 80003a6:	d0e6      	beq.n	8000376 <__udivmoddi4+0xa6>
 80003a8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ac:	e7e3      	b.n	8000376 <__udivmoddi4+0xa6>
 80003ae:	2a00      	cmp	r2, #0
 80003b0:	f040 8090 	bne.w	80004d4 <__udivmoddi4+0x204>
 80003b4:	eba1 040c 	sub.w	r4, r1, ip
 80003b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003bc:	fa1f f78c 	uxth.w	r7, ip
 80003c0:	2101      	movs	r1, #1
 80003c2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003c6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ca:	fb08 4416 	mls	r4, r8, r6, r4
 80003ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003d2:	fb07 f006 	mul.w	r0, r7, r6
 80003d6:	4298      	cmp	r0, r3
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x11c>
 80003da:	eb1c 0303 	adds.w	r3, ip, r3
 80003de:	f106 34ff 	add.w	r4, r6, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x11a>
 80003e4:	4298      	cmp	r0, r3
 80003e6:	f200 80cd 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003ea:	4626      	mov	r6, r4
 80003ec:	1a1c      	subs	r4, r3, r0
 80003ee:	fa1f f38e 	uxth.w	r3, lr
 80003f2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003f6:	fb08 4410 	mls	r4, r8, r0, r4
 80003fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003fe:	fb00 f707 	mul.w	r7, r0, r7
 8000402:	429f      	cmp	r7, r3
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x148>
 8000406:	eb1c 0303 	adds.w	r3, ip, r3
 800040a:	f100 34ff 	add.w	r4, r0, #4294967295
 800040e:	d202      	bcs.n	8000416 <__udivmoddi4+0x146>
 8000410:	429f      	cmp	r7, r3
 8000412:	f200 80b0 	bhi.w	8000576 <__udivmoddi4+0x2a6>
 8000416:	4620      	mov	r0, r4
 8000418:	1bdb      	subs	r3, r3, r7
 800041a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800041e:	e7a5      	b.n	800036c <__udivmoddi4+0x9c>
 8000420:	f1c1 0620 	rsb	r6, r1, #32
 8000424:	408b      	lsls	r3, r1
 8000426:	fa22 f706 	lsr.w	r7, r2, r6
 800042a:	431f      	orrs	r7, r3
 800042c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000430:	fa04 f301 	lsl.w	r3, r4, r1
 8000434:	ea43 030c 	orr.w	r3, r3, ip
 8000438:	40f4      	lsrs	r4, r6
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	0c38      	lsrs	r0, r7, #16
 8000440:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000444:	fbb4 fef0 	udiv	lr, r4, r0
 8000448:	fa1f fc87 	uxth.w	ip, r7
 800044c:	fb00 441e 	mls	r4, r0, lr, r4
 8000450:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000454:	fb0e f90c 	mul.w	r9, lr, ip
 8000458:	45a1      	cmp	r9, r4
 800045a:	fa02 f201 	lsl.w	r2, r2, r1
 800045e:	d90a      	bls.n	8000476 <__udivmoddi4+0x1a6>
 8000460:	193c      	adds	r4, r7, r4
 8000462:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000466:	f080 8084 	bcs.w	8000572 <__udivmoddi4+0x2a2>
 800046a:	45a1      	cmp	r9, r4
 800046c:	f240 8081 	bls.w	8000572 <__udivmoddi4+0x2a2>
 8000470:	f1ae 0e02 	sub.w	lr, lr, #2
 8000474:	443c      	add	r4, r7
 8000476:	eba4 0409 	sub.w	r4, r4, r9
 800047a:	fa1f f983 	uxth.w	r9, r3
 800047e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000482:	fb00 4413 	mls	r4, r0, r3, r4
 8000486:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048a:	fb03 fc0c 	mul.w	ip, r3, ip
 800048e:	45a4      	cmp	ip, r4
 8000490:	d907      	bls.n	80004a2 <__udivmoddi4+0x1d2>
 8000492:	193c      	adds	r4, r7, r4
 8000494:	f103 30ff 	add.w	r0, r3, #4294967295
 8000498:	d267      	bcs.n	800056a <__udivmoddi4+0x29a>
 800049a:	45a4      	cmp	ip, r4
 800049c:	d965      	bls.n	800056a <__udivmoddi4+0x29a>
 800049e:	3b02      	subs	r3, #2
 80004a0:	443c      	add	r4, r7
 80004a2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004a6:	fba0 9302 	umull	r9, r3, r0, r2
 80004aa:	eba4 040c 	sub.w	r4, r4, ip
 80004ae:	429c      	cmp	r4, r3
 80004b0:	46ce      	mov	lr, r9
 80004b2:	469c      	mov	ip, r3
 80004b4:	d351      	bcc.n	800055a <__udivmoddi4+0x28a>
 80004b6:	d04e      	beq.n	8000556 <__udivmoddi4+0x286>
 80004b8:	b155      	cbz	r5, 80004d0 <__udivmoddi4+0x200>
 80004ba:	ebb8 030e 	subs.w	r3, r8, lr
 80004be:	eb64 040c 	sbc.w	r4, r4, ip
 80004c2:	fa04 f606 	lsl.w	r6, r4, r6
 80004c6:	40cb      	lsrs	r3, r1
 80004c8:	431e      	orrs	r6, r3
 80004ca:	40cc      	lsrs	r4, r1
 80004cc:	e9c5 6400 	strd	r6, r4, [r5]
 80004d0:	2100      	movs	r1, #0
 80004d2:	e750      	b.n	8000376 <__udivmoddi4+0xa6>
 80004d4:	f1c2 0320 	rsb	r3, r2, #32
 80004d8:	fa20 f103 	lsr.w	r1, r0, r3
 80004dc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e0:	fa24 f303 	lsr.w	r3, r4, r3
 80004e4:	4094      	lsls	r4, r2
 80004e6:	430c      	orrs	r4, r1
 80004e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ec:	fa00 fe02 	lsl.w	lr, r0, r2
 80004f0:	fa1f f78c 	uxth.w	r7, ip
 80004f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004f8:	fb08 3110 	mls	r1, r8, r0, r3
 80004fc:	0c23      	lsrs	r3, r4, #16
 80004fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000502:	fb00 f107 	mul.w	r1, r0, r7
 8000506:	4299      	cmp	r1, r3
 8000508:	d908      	bls.n	800051c <__udivmoddi4+0x24c>
 800050a:	eb1c 0303 	adds.w	r3, ip, r3
 800050e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000512:	d22c      	bcs.n	800056e <__udivmoddi4+0x29e>
 8000514:	4299      	cmp	r1, r3
 8000516:	d92a      	bls.n	800056e <__udivmoddi4+0x29e>
 8000518:	3802      	subs	r0, #2
 800051a:	4463      	add	r3, ip
 800051c:	1a5b      	subs	r3, r3, r1
 800051e:	b2a4      	uxth	r4, r4
 8000520:	fbb3 f1f8 	udiv	r1, r3, r8
 8000524:	fb08 3311 	mls	r3, r8, r1, r3
 8000528:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800052c:	fb01 f307 	mul.w	r3, r1, r7
 8000530:	42a3      	cmp	r3, r4
 8000532:	d908      	bls.n	8000546 <__udivmoddi4+0x276>
 8000534:	eb1c 0404 	adds.w	r4, ip, r4
 8000538:	f101 36ff 	add.w	r6, r1, #4294967295
 800053c:	d213      	bcs.n	8000566 <__udivmoddi4+0x296>
 800053e:	42a3      	cmp	r3, r4
 8000540:	d911      	bls.n	8000566 <__udivmoddi4+0x296>
 8000542:	3902      	subs	r1, #2
 8000544:	4464      	add	r4, ip
 8000546:	1ae4      	subs	r4, r4, r3
 8000548:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800054c:	e739      	b.n	80003c2 <__udivmoddi4+0xf2>
 800054e:	4604      	mov	r4, r0
 8000550:	e6f0      	b.n	8000334 <__udivmoddi4+0x64>
 8000552:	4608      	mov	r0, r1
 8000554:	e706      	b.n	8000364 <__udivmoddi4+0x94>
 8000556:	45c8      	cmp	r8, r9
 8000558:	d2ae      	bcs.n	80004b8 <__udivmoddi4+0x1e8>
 800055a:	ebb9 0e02 	subs.w	lr, r9, r2
 800055e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000562:	3801      	subs	r0, #1
 8000564:	e7a8      	b.n	80004b8 <__udivmoddi4+0x1e8>
 8000566:	4631      	mov	r1, r6
 8000568:	e7ed      	b.n	8000546 <__udivmoddi4+0x276>
 800056a:	4603      	mov	r3, r0
 800056c:	e799      	b.n	80004a2 <__udivmoddi4+0x1d2>
 800056e:	4630      	mov	r0, r6
 8000570:	e7d4      	b.n	800051c <__udivmoddi4+0x24c>
 8000572:	46d6      	mov	lr, sl
 8000574:	e77f      	b.n	8000476 <__udivmoddi4+0x1a6>
 8000576:	4463      	add	r3, ip
 8000578:	3802      	subs	r0, #2
 800057a:	e74d      	b.n	8000418 <__udivmoddi4+0x148>
 800057c:	4606      	mov	r6, r0
 800057e:	4623      	mov	r3, r4
 8000580:	4608      	mov	r0, r1
 8000582:	e70f      	b.n	80003a4 <__udivmoddi4+0xd4>
 8000584:	3e02      	subs	r6, #2
 8000586:	4463      	add	r3, ip
 8000588:	e730      	b.n	80003ec <__udivmoddi4+0x11c>
 800058a:	bf00      	nop

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b082      	sub	sp, #8
 8000594:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000596:	2300      	movs	r3, #0
 8000598:	607b      	str	r3, [r7, #4]
 800059a:	4b10      	ldr	r3, [pc, #64]	@ (80005dc <MX_DMA_Init+0x4c>)
 800059c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800059e:	4a0f      	ldr	r2, [pc, #60]	@ (80005dc <MX_DMA_Init+0x4c>)
 80005a0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80005a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80005a6:	4b0d      	ldr	r3, [pc, #52]	@ (80005dc <MX_DMA_Init+0x4c>)
 80005a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005aa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80005ae:	607b      	str	r3, [r7, #4]
 80005b0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80005b2:	2200      	movs	r2, #0
 80005b4:	2100      	movs	r1, #0
 80005b6:	200c      	movs	r0, #12
 80005b8:	f000 ffb1 	bl	800151e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80005bc:	200c      	movs	r0, #12
 80005be:	f000 ffca 	bl	8001556 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80005c2:	2200      	movs	r2, #0
 80005c4:	2100      	movs	r1, #0
 80005c6:	2010      	movs	r0, #16
 80005c8:	f000 ffa9 	bl	800151e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80005cc:	2010      	movs	r0, #16
 80005ce:	f000 ffc2 	bl	8001556 <HAL_NVIC_EnableIRQ>

}
 80005d2:	bf00      	nop
 80005d4:	3708      	adds	r7, #8
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	bf00      	nop
 80005dc:	40023800 	.word	0x40023800

080005e0 <MX_GPIO_Init>:
        * EXTI
     PC9   ------> RCC_MCO_2
     PA9   ------> USART1_TX
*/
void MX_GPIO_Init(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b08a      	sub	sp, #40	@ 0x28
 80005e4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005e6:	f107 0314 	add.w	r3, r7, #20
 80005ea:	2200      	movs	r2, #0
 80005ec:	601a      	str	r2, [r3, #0]
 80005ee:	605a      	str	r2, [r3, #4]
 80005f0:	609a      	str	r2, [r3, #8]
 80005f2:	60da      	str	r2, [r3, #12]
 80005f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005f6:	2300      	movs	r3, #0
 80005f8:	613b      	str	r3, [r7, #16]
 80005fa:	4b3f      	ldr	r3, [pc, #252]	@ (80006f8 <MX_GPIO_Init+0x118>)
 80005fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005fe:	4a3e      	ldr	r2, [pc, #248]	@ (80006f8 <MX_GPIO_Init+0x118>)
 8000600:	f043 0304 	orr.w	r3, r3, #4
 8000604:	6313      	str	r3, [r2, #48]	@ 0x30
 8000606:	4b3c      	ldr	r3, [pc, #240]	@ (80006f8 <MX_GPIO_Init+0x118>)
 8000608:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800060a:	f003 0304 	and.w	r3, r3, #4
 800060e:	613b      	str	r3, [r7, #16]
 8000610:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000612:	2300      	movs	r3, #0
 8000614:	60fb      	str	r3, [r7, #12]
 8000616:	4b38      	ldr	r3, [pc, #224]	@ (80006f8 <MX_GPIO_Init+0x118>)
 8000618:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800061a:	4a37      	ldr	r2, [pc, #220]	@ (80006f8 <MX_GPIO_Init+0x118>)
 800061c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000620:	6313      	str	r3, [r2, #48]	@ 0x30
 8000622:	4b35      	ldr	r3, [pc, #212]	@ (80006f8 <MX_GPIO_Init+0x118>)
 8000624:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000626:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800062a:	60fb      	str	r3, [r7, #12]
 800062c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800062e:	2300      	movs	r3, #0
 8000630:	60bb      	str	r3, [r7, #8]
 8000632:	4b31      	ldr	r3, [pc, #196]	@ (80006f8 <MX_GPIO_Init+0x118>)
 8000634:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000636:	4a30      	ldr	r2, [pc, #192]	@ (80006f8 <MX_GPIO_Init+0x118>)
 8000638:	f043 0301 	orr.w	r3, r3, #1
 800063c:	6313      	str	r3, [r2, #48]	@ 0x30
 800063e:	4b2e      	ldr	r3, [pc, #184]	@ (80006f8 <MX_GPIO_Init+0x118>)
 8000640:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000642:	f003 0301 	and.w	r3, r3, #1
 8000646:	60bb      	str	r3, [r7, #8]
 8000648:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800064a:	2300      	movs	r3, #0
 800064c:	607b      	str	r3, [r7, #4]
 800064e:	4b2a      	ldr	r3, [pc, #168]	@ (80006f8 <MX_GPIO_Init+0x118>)
 8000650:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000652:	4a29      	ldr	r2, [pc, #164]	@ (80006f8 <MX_GPIO_Init+0x118>)
 8000654:	f043 0302 	orr.w	r3, r3, #2
 8000658:	6313      	str	r3, [r2, #48]	@ 0x30
 800065a:	4b27      	ldr	r3, [pc, #156]	@ (80006f8 <MX_GPIO_Init+0x118>)
 800065c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800065e:	f003 0302 	and.w	r3, r3, #2
 8000662:	607b      	str	r3, [r7, #4]
 8000664:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_7, GPIO_PIN_RESET);
 8000666:	2200      	movs	r2, #0
 8000668:	f244 0181 	movw	r1, #16513	@ 0x4081
 800066c:	4823      	ldr	r0, [pc, #140]	@ (80006fc <MX_GPIO_Init+0x11c>)
 800066e:	f001 fcad 	bl	8001fcc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000672:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000676:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000678:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800067c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067e:	2300      	movs	r3, #0
 8000680:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000682:	f107 0314 	add.w	r3, r7, #20
 8000686:	4619      	mov	r1, r3
 8000688:	481d      	ldr	r0, [pc, #116]	@ (8000700 <MX_GPIO_Init+0x120>)
 800068a:	f001 faf3 	bl	8001c74 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB14 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_7;
 800068e:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000692:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000694:	2301      	movs	r3, #1
 8000696:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000698:	2300      	movs	r3, #0
 800069a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800069c:	2300      	movs	r3, #0
 800069e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006a0:	f107 0314 	add.w	r3, r7, #20
 80006a4:	4619      	mov	r1, r3
 80006a6:	4815      	ldr	r0, [pc, #84]	@ (80006fc <MX_GPIO_Init+0x11c>)
 80006a8:	f001 fae4 	bl	8001c74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80006ac:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80006b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006b2:	2302      	movs	r3, #2
 80006b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b6:	2300      	movs	r3, #0
 80006b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ba:	2300      	movs	r3, #0
 80006bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80006be:	2300      	movs	r3, #0
 80006c0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006c2:	f107 0314 	add.w	r3, r7, #20
 80006c6:	4619      	mov	r1, r3
 80006c8:	480d      	ldr	r0, [pc, #52]	@ (8000700 <MX_GPIO_Init+0x120>)
 80006ca:	f001 fad3 	bl	8001c74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80006ce:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80006d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006d4:	2302      	movs	r3, #2
 80006d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d8:	2300      	movs	r3, #0
 80006da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006dc:	2303      	movs	r3, #3
 80006de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80006e0:	2307      	movs	r3, #7
 80006e2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006e4:	f107 0314 	add.w	r3, r7, #20
 80006e8:	4619      	mov	r1, r3
 80006ea:	4806      	ldr	r0, [pc, #24]	@ (8000704 <MX_GPIO_Init+0x124>)
 80006ec:	f001 fac2 	bl	8001c74 <HAL_GPIO_Init>

}
 80006f0:	bf00      	nop
 80006f2:	3728      	adds	r7, #40	@ 0x28
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	40023800 	.word	0x40023800
 80006fc:	40020400 	.word	0x40020400
 8000700:	40020800 	.word	0x40020800
 8000704:	40020000 	.word	0x40020000

08000708 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800070c:	f000 fd80 	bl	8001210 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000710:	f000 f82c 	bl	800076c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000714:	f7ff ff64 	bl	80005e0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000718:	f7ff ff3a 	bl	8000590 <MX_DMA_Init>
  MX_TIM1_Init();
 800071c:	f000 f9aa 	bl	8000a74 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 8000720:	f000 fa20 	bl	8000b64 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000724:	f000 fa48 	bl	8000bb8 <MX_USART3_UART_Init>
  MX_USB_DEVICE_Init();
 8000728:	f008 f8b6 	bl	8008898 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  HAL_UARTEx_ReceiveToIdle_DMA(&huart2, (uint8_t *) uart2_rx_buffer, UART_RX_BUFFER_MAX_SIZE);
 800072c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000730:	490b      	ldr	r1, [pc, #44]	@ (8000760 <main+0x58>)
 8000732:	480c      	ldr	r0, [pc, #48]	@ (8000764 <main+0x5c>)
 8000734:	f004 f894 	bl	8004860 <HAL_UARTEx_ReceiveToIdle_DMA>
  // __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
  HAL_TIM_Base_Start_IT(&htim1);
 8000738:	480b      	ldr	r0, [pc, #44]	@ (8000768 <main+0x60>)
 800073a:	f003 fc1b 	bl	8003f74 <HAL_TIM_Base_Start_IT>
  // HAL_UARTEx_ReceiveToIdle_DMA(&huart1, (uint8_t *) uart1_rx_buffer, UART_RX_BUFFER_MAX_SIZE);
  
  HAL_Delay(5000);
 800073e:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000742:	f000 fdd7 	bl	80012f4 <HAL_Delay>
  BootMessagePrint();
 8000746:	f000 fb45 	bl	8000dd4 <BootMessagePrint>
  GetClockSourcePrint();
 800074a:	f000 fbb1 	bl	8000eb0 <GetClockSourcePrint>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    GPIO_Proc();
 800074e:	f000 fc59 	bl	8001004 <GPIO_Proc>
    USB_CDC_Proc();
 8000752:	f000 fc5d 	bl	8001010 <USB_CDC_Proc>
    USB_CDC_RX_Proc();
 8000756:	f000 fc9d 	bl	8001094 <USB_CDC_RX_Proc>
  {
 800075a:	bf00      	nop
 800075c:	e7f7      	b.n	800074e <main+0x46>
 800075e:	bf00      	nop
 8000760:	20000510 	.word	0x20000510
 8000764:	200001b4 	.word	0x200001b4
 8000768:	2000016c 	.word	0x2000016c

0800076c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b094      	sub	sp, #80	@ 0x50
 8000770:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000772:	f107 0320 	add.w	r3, r7, #32
 8000776:	2230      	movs	r2, #48	@ 0x30
 8000778:	2100      	movs	r1, #0
 800077a:	4618      	mov	r0, r3
 800077c:	f008 fde6 	bl	800934c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000780:	f107 030c 	add.w	r3, r7, #12
 8000784:	2200      	movs	r2, #0
 8000786:	601a      	str	r2, [r3, #0]
 8000788:	605a      	str	r2, [r3, #4]
 800078a:	609a      	str	r2, [r3, #8]
 800078c:	60da      	str	r2, [r3, #12]
 800078e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000790:	2300      	movs	r3, #0
 8000792:	60bb      	str	r3, [r7, #8]
 8000794:	4b2b      	ldr	r3, [pc, #172]	@ (8000844 <SystemClock_Config+0xd8>)
 8000796:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000798:	4a2a      	ldr	r2, [pc, #168]	@ (8000844 <SystemClock_Config+0xd8>)
 800079a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800079e:	6413      	str	r3, [r2, #64]	@ 0x40
 80007a0:	4b28      	ldr	r3, [pc, #160]	@ (8000844 <SystemClock_Config+0xd8>)
 80007a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007a8:	60bb      	str	r3, [r7, #8]
 80007aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007ac:	2300      	movs	r3, #0
 80007ae:	607b      	str	r3, [r7, #4]
 80007b0:	4b25      	ldr	r3, [pc, #148]	@ (8000848 <SystemClock_Config+0xdc>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	4a24      	ldr	r2, [pc, #144]	@ (8000848 <SystemClock_Config+0xdc>)
 80007b6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80007ba:	6013      	str	r3, [r2, #0]
 80007bc:	4b22      	ldr	r3, [pc, #136]	@ (8000848 <SystemClock_Config+0xdc>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80007c4:	607b      	str	r3, [r7, #4]
 80007c6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007c8:	2301      	movs	r3, #1
 80007ca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80007cc:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80007d0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007d2:	2302      	movs	r3, #2
 80007d4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007d6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80007da:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80007dc:	2304      	movs	r3, #4
 80007de:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80007e0:	23a8      	movs	r3, #168	@ 0xa8
 80007e2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007e4:	2302      	movs	r3, #2
 80007e6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80007e8:	2307      	movs	r3, #7
 80007ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007ec:	f107 0320 	add.w	r3, r7, #32
 80007f0:	4618      	mov	r0, r3
 80007f2:	f002 fe6f 	bl	80034d4 <HAL_RCC_OscConfig>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80007fc:	f000 f826 	bl	800084c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000800:	230f      	movs	r3, #15
 8000802:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000804:	2302      	movs	r3, #2
 8000806:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000808:	2300      	movs	r3, #0
 800080a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800080c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000810:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000812:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000816:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000818:	f107 030c 	add.w	r3, r7, #12
 800081c:	2105      	movs	r1, #5
 800081e:	4618      	mov	r0, r3
 8000820:	f003 f8d0 	bl	80039c4 <HAL_RCC_ClockConfig>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800082a:	f000 f80f 	bl	800084c <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO2, RCC_MCO2SOURCE_HSE, RCC_MCODIV_1);
 800082e:	2200      	movs	r2, #0
 8000830:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8000834:	2001      	movs	r0, #1
 8000836:	f003 f9ab 	bl	8003b90 <HAL_RCC_MCOConfig>
}
 800083a:	bf00      	nop
 800083c:	3750      	adds	r7, #80	@ 0x50
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	40023800 	.word	0x40023800
 8000848:	40007000 	.word	0x40007000

0800084c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000850:	b672      	cpsid	i
}
 8000852:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000854:	bf00      	nop
 8000856:	e7fd      	b.n	8000854 <Error_Handler+0x8>

08000858 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000858:	b480      	push	{r7}
 800085a:	b083      	sub	sp, #12
 800085c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800085e:	2300      	movs	r3, #0
 8000860:	607b      	str	r3, [r7, #4]
 8000862:	4b10      	ldr	r3, [pc, #64]	@ (80008a4 <HAL_MspInit+0x4c>)
 8000864:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000866:	4a0f      	ldr	r2, [pc, #60]	@ (80008a4 <HAL_MspInit+0x4c>)
 8000868:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800086c:	6453      	str	r3, [r2, #68]	@ 0x44
 800086e:	4b0d      	ldr	r3, [pc, #52]	@ (80008a4 <HAL_MspInit+0x4c>)
 8000870:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000872:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000876:	607b      	str	r3, [r7, #4]
 8000878:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800087a:	2300      	movs	r3, #0
 800087c:	603b      	str	r3, [r7, #0]
 800087e:	4b09      	ldr	r3, [pc, #36]	@ (80008a4 <HAL_MspInit+0x4c>)
 8000880:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000882:	4a08      	ldr	r2, [pc, #32]	@ (80008a4 <HAL_MspInit+0x4c>)
 8000884:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000888:	6413      	str	r3, [r2, #64]	@ 0x40
 800088a:	4b06      	ldr	r3, [pc, #24]	@ (80008a4 <HAL_MspInit+0x4c>)
 800088c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800088e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000892:	603b      	str	r3, [r7, #0]
 8000894:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000896:	bf00      	nop
 8000898:	370c      	adds	r7, #12
 800089a:	46bd      	mov	sp, r7
 800089c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a0:	4770      	bx	lr
 80008a2:	bf00      	nop
 80008a4:	40023800 	.word	0x40023800

080008a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008ac:	bf00      	nop
 80008ae:	e7fd      	b.n	80008ac <NMI_Handler+0x4>

080008b0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008b4:	bf00      	nop
 80008b6:	e7fd      	b.n	80008b4 <HardFault_Handler+0x4>

080008b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008bc:	bf00      	nop
 80008be:	e7fd      	b.n	80008bc <MemManage_Handler+0x4>

080008c0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008c4:	bf00      	nop
 80008c6:	e7fd      	b.n	80008c4 <BusFault_Handler+0x4>

080008c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008cc:	bf00      	nop
 80008ce:	e7fd      	b.n	80008cc <UsageFault_Handler+0x4>

080008d0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008d4:	bf00      	nop
 80008d6:	46bd      	mov	sp, r7
 80008d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008dc:	4770      	bx	lr

080008de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008de:	b480      	push	{r7}
 80008e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008e2:	bf00      	nop
 80008e4:	46bd      	mov	sp, r7
 80008e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ea:	4770      	bx	lr

080008ec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008f0:	bf00      	nop
 80008f2:	46bd      	mov	sp, r7
 80008f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f8:	4770      	bx	lr

080008fa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008fa:	b580      	push	{r7, lr}
 80008fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008fe:	f000 fcd9 	bl	80012b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000902:	bf00      	nop
 8000904:	bd80      	pop	{r7, pc}
	...

08000908 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 800090c:	4802      	ldr	r0, [pc, #8]	@ (8000918 <DMA1_Stream1_IRQHandler+0x10>)
 800090e:	f000 ff47 	bl	80017a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8000912:	bf00      	nop
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	200002a4 	.word	0x200002a4

0800091c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000920:	4802      	ldr	r0, [pc, #8]	@ (800092c <DMA1_Stream5_IRQHandler+0x10>)
 8000922:	f000 ff3d 	bl	80017a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000926:	bf00      	nop
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	20000244 	.word	0x20000244

08000930 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000934:	4802      	ldr	r0, [pc, #8]	@ (8000940 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000936:	f003 fb8d 	bl	8004054 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800093a:	bf00      	nop
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	2000016c 	.word	0x2000016c

08000944 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000948:	4802      	ldr	r0, [pc, #8]	@ (8000954 <OTG_FS_IRQHandler+0x10>)
 800094a:	f001 fcb6 	bl	80022ba <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800094e:	bf00      	nop
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	20001df8 	.word	0x20001df8

08000958 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000958:	b480      	push	{r7}
 800095a:	b083      	sub	sp, #12
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);

  TIM1_CNT_1++;
 8000960:	4b07      	ldr	r3, [pc, #28]	@ (8000980 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	3301      	adds	r3, #1
 8000966:	4a06      	ldr	r2, [pc, #24]	@ (8000980 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000968:	6013      	str	r3, [r2, #0]
  TIM1_CNT_2++;
 800096a:	4b06      	ldr	r3, [pc, #24]	@ (8000984 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	3301      	adds	r3, #1
 8000970:	4a04      	ldr	r2, [pc, #16]	@ (8000984 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000972:	6013      	str	r3, [r2, #0]
}
 8000974:	bf00      	nop
 8000976:	370c      	adds	r7, #12
 8000978:	46bd      	mov	sp, r7
 800097a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097e:	4770      	bx	lr
 8000980:	20000304 	.word	0x20000304
 8000984:	20000308 	.word	0x20000308

08000988 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b082      	sub	sp, #8
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
 8000990:	460b      	mov	r3, r1
 8000992:	807b      	strh	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  UNUSED(Size);

  Uart_Rx_IdlelineSize = Size;
 8000994:	4a0e      	ldr	r2, [pc, #56]	@ (80009d0 <HAL_UARTEx_RxEventCallback+0x48>)
 8000996:	887b      	ldrh	r3, [r7, #2]
 8000998:	8013      	strh	r3, [r2, #0]
	// 		// set an error flag, poll for flag in main loop, and call HAL_UARTEx_ReceiveToIdle_DMA again.
	// 		return;
	// 	}
	// 	__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
  // }
  if (huart->Instance == USART2)
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	4a0d      	ldr	r2, [pc, #52]	@ (80009d4 <HAL_UARTEx_RxEventCallback+0x4c>)
 80009a0:	4293      	cmp	r3, r2
 80009a2:	d112      	bne.n	80009ca <HAL_UARTEx_RxEventCallback+0x42>
  {
    if(HAL_UARTEx_ReceiveToIdle_DMA(&huart2, (uint8_t *) uart2_rx_buffer, UART_RX_BUFFER_MAX_SIZE) != HAL_OK)
 80009a4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80009a8:	490b      	ldr	r1, [pc, #44]	@ (80009d8 <HAL_UARTEx_RxEventCallback+0x50>)
 80009aa:	480c      	ldr	r0, [pc, #48]	@ (80009dc <HAL_UARTEx_RxEventCallback+0x54>)
 80009ac:	f003 ff58 	bl	8004860 <HAL_UARTEx_ReceiveToIdle_DMA>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d108      	bne.n	80009c8 <HAL_UARTEx_RxEventCallback+0x40>
		{
			// set an error flag, poll for flag in main loop, and call HAL_UARTEx_ReceiveToIdle_DMA again.
			return;
		}
		__HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 80009b6:	4b0a      	ldr	r3, [pc, #40]	@ (80009e0 <HAL_UARTEx_RxEventCallback+0x58>)
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	681a      	ldr	r2, [r3, #0]
 80009bc:	4b08      	ldr	r3, [pc, #32]	@ (80009e0 <HAL_UARTEx_RxEventCallback+0x58>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	f022 0208 	bic.w	r2, r2, #8
 80009c4:	601a      	str	r2, [r3, #0]
 80009c6:	e000      	b.n	80009ca <HAL_UARTEx_RxEventCallback+0x42>
			return;
 80009c8:	bf00      	nop
  }
}
 80009ca:	3708      	adds	r7, #8
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	20000910 	.word	0x20000910
 80009d4:	40004400 	.word	0x40004400
 80009d8:	20000510 	.word	0x20000510
 80009dc:	200001b4 	.word	0x200001b4
 80009e0:	20000244 	.word	0x20000244

080009e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b086      	sub	sp, #24
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009ec:	4a14      	ldr	r2, [pc, #80]	@ (8000a40 <_sbrk+0x5c>)
 80009ee:	4b15      	ldr	r3, [pc, #84]	@ (8000a44 <_sbrk+0x60>)
 80009f0:	1ad3      	subs	r3, r2, r3
 80009f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009f4:	697b      	ldr	r3, [r7, #20]
 80009f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009f8:	4b13      	ldr	r3, [pc, #76]	@ (8000a48 <_sbrk+0x64>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d102      	bne.n	8000a06 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a00:	4b11      	ldr	r3, [pc, #68]	@ (8000a48 <_sbrk+0x64>)
 8000a02:	4a12      	ldr	r2, [pc, #72]	@ (8000a4c <_sbrk+0x68>)
 8000a04:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a06:	4b10      	ldr	r3, [pc, #64]	@ (8000a48 <_sbrk+0x64>)
 8000a08:	681a      	ldr	r2, [r3, #0]
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	4413      	add	r3, r2
 8000a0e:	693a      	ldr	r2, [r7, #16]
 8000a10:	429a      	cmp	r2, r3
 8000a12:	d207      	bcs.n	8000a24 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a14:	f008 fcc8 	bl	80093a8 <__errno>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	220c      	movs	r2, #12
 8000a1c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a1e:	f04f 33ff 	mov.w	r3, #4294967295
 8000a22:	e009      	b.n	8000a38 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a24:	4b08      	ldr	r3, [pc, #32]	@ (8000a48 <_sbrk+0x64>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a2a:	4b07      	ldr	r3, [pc, #28]	@ (8000a48 <_sbrk+0x64>)
 8000a2c:	681a      	ldr	r2, [r3, #0]
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	4413      	add	r3, r2
 8000a32:	4a05      	ldr	r2, [pc, #20]	@ (8000a48 <_sbrk+0x64>)
 8000a34:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a36:	68fb      	ldr	r3, [r7, #12]
}
 8000a38:	4618      	mov	r0, r3
 8000a3a:	3718      	adds	r7, #24
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	20030000 	.word	0x20030000
 8000a44:	00000400 	.word	0x00000400
 8000a48:	20000168 	.word	0x20000168
 8000a4c:	20002648 	.word	0x20002648

08000a50 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a54:	4b06      	ldr	r3, [pc, #24]	@ (8000a70 <SystemInit+0x20>)
 8000a56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a5a:	4a05      	ldr	r2, [pc, #20]	@ (8000a70 <SystemInit+0x20>)
 8000a5c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a60:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a64:	bf00      	nop
 8000a66:	46bd      	mov	sp, r7
 8000a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop
 8000a70:	e000ed00 	.word	0xe000ed00

08000a74 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b086      	sub	sp, #24
 8000a78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a7a:	f107 0308 	add.w	r3, r7, #8
 8000a7e:	2200      	movs	r2, #0
 8000a80:	601a      	str	r2, [r3, #0]
 8000a82:	605a      	str	r2, [r3, #4]
 8000a84:	609a      	str	r2, [r3, #8]
 8000a86:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a88:	463b      	mov	r3, r7
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	601a      	str	r2, [r3, #0]
 8000a8e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000a90:	4b1e      	ldr	r3, [pc, #120]	@ (8000b0c <MX_TIM1_Init+0x98>)
 8000a92:	4a1f      	ldr	r2, [pc, #124]	@ (8000b10 <MX_TIM1_Init+0x9c>)
 8000a94:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 999;
 8000a96:	4b1d      	ldr	r3, [pc, #116]	@ (8000b0c <MX_TIM1_Init+0x98>)
 8000a98:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000a9c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a9e:	4b1b      	ldr	r3, [pc, #108]	@ (8000b0c <MX_TIM1_Init+0x98>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 168-1;
 8000aa4:	4b19      	ldr	r3, [pc, #100]	@ (8000b0c <MX_TIM1_Init+0x98>)
 8000aa6:	22a7      	movs	r2, #167	@ 0xa7
 8000aa8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000aaa:	4b18      	ldr	r3, [pc, #96]	@ (8000b0c <MX_TIM1_Init+0x98>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000ab0:	4b16      	ldr	r3, [pc, #88]	@ (8000b0c <MX_TIM1_Init+0x98>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ab6:	4b15      	ldr	r3, [pc, #84]	@ (8000b0c <MX_TIM1_Init+0x98>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000abc:	4813      	ldr	r0, [pc, #76]	@ (8000b0c <MX_TIM1_Init+0x98>)
 8000abe:	f003 fa09 	bl	8003ed4 <HAL_TIM_Base_Init>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d001      	beq.n	8000acc <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000ac8:	f7ff fec0 	bl	800084c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000acc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ad0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000ad2:	f107 0308 	add.w	r3, r7, #8
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	480c      	ldr	r0, [pc, #48]	@ (8000b0c <MX_TIM1_Init+0x98>)
 8000ada:	f003 fbab 	bl	8004234 <HAL_TIM_ConfigClockSource>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d001      	beq.n	8000ae8 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000ae4:	f7ff feb2 	bl	800084c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000aec:	2300      	movs	r3, #0
 8000aee:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000af0:	463b      	mov	r3, r7
 8000af2:	4619      	mov	r1, r3
 8000af4:	4805      	ldr	r0, [pc, #20]	@ (8000b0c <MX_TIM1_Init+0x98>)
 8000af6:	f003 fdd3 	bl	80046a0 <HAL_TIMEx_MasterConfigSynchronization>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d001      	beq.n	8000b04 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000b00:	f7ff fea4 	bl	800084c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000b04:	bf00      	nop
 8000b06:	3718      	adds	r7, #24
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	2000016c 	.word	0x2000016c
 8000b10:	40010000 	.word	0x40010000

08000b14 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b084      	sub	sp, #16
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	4a0e      	ldr	r2, [pc, #56]	@ (8000b5c <HAL_TIM_Base_MspInit+0x48>)
 8000b22:	4293      	cmp	r3, r2
 8000b24:	d115      	bne.n	8000b52 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000b26:	2300      	movs	r3, #0
 8000b28:	60fb      	str	r3, [r7, #12]
 8000b2a:	4b0d      	ldr	r3, [pc, #52]	@ (8000b60 <HAL_TIM_Base_MspInit+0x4c>)
 8000b2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b2e:	4a0c      	ldr	r2, [pc, #48]	@ (8000b60 <HAL_TIM_Base_MspInit+0x4c>)
 8000b30:	f043 0301 	orr.w	r3, r3, #1
 8000b34:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b36:	4b0a      	ldr	r3, [pc, #40]	@ (8000b60 <HAL_TIM_Base_MspInit+0x4c>)
 8000b38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b3a:	f003 0301 	and.w	r3, r3, #1
 8000b3e:	60fb      	str	r3, [r7, #12]
 8000b40:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8000b42:	2200      	movs	r2, #0
 8000b44:	2100      	movs	r1, #0
 8000b46:	2019      	movs	r0, #25
 8000b48:	f000 fce9 	bl	800151e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000b4c:	2019      	movs	r0, #25
 8000b4e:	f000 fd02 	bl	8001556 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000b52:	bf00      	nop
 8000b54:	3710      	adds	r7, #16
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	40010000 	.word	0x40010000
 8000b60:	40023800 	.word	0x40023800

08000b64 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart3_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b68:	4b11      	ldr	r3, [pc, #68]	@ (8000bb0 <MX_USART2_UART_Init+0x4c>)
 8000b6a:	4a12      	ldr	r2, [pc, #72]	@ (8000bb4 <MX_USART2_UART_Init+0x50>)
 8000b6c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 230400;
 8000b6e:	4b10      	ldr	r3, [pc, #64]	@ (8000bb0 <MX_USART2_UART_Init+0x4c>)
 8000b70:	f44f 3261 	mov.w	r2, #230400	@ 0x38400
 8000b74:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b76:	4b0e      	ldr	r3, [pc, #56]	@ (8000bb0 <MX_USART2_UART_Init+0x4c>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b7c:	4b0c      	ldr	r3, [pc, #48]	@ (8000bb0 <MX_USART2_UART_Init+0x4c>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b82:	4b0b      	ldr	r3, [pc, #44]	@ (8000bb0 <MX_USART2_UART_Init+0x4c>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b88:	4b09      	ldr	r3, [pc, #36]	@ (8000bb0 <MX_USART2_UART_Init+0x4c>)
 8000b8a:	220c      	movs	r2, #12
 8000b8c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b8e:	4b08      	ldr	r3, [pc, #32]	@ (8000bb0 <MX_USART2_UART_Init+0x4c>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b94:	4b06      	ldr	r3, [pc, #24]	@ (8000bb0 <MX_USART2_UART_Init+0x4c>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b9a:	4805      	ldr	r0, [pc, #20]	@ (8000bb0 <MX_USART2_UART_Init+0x4c>)
 8000b9c:	f003 fe10 	bl	80047c0 <HAL_UART_Init>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d001      	beq.n	8000baa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000ba6:	f7ff fe51 	bl	800084c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000baa:	bf00      	nop
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	200001b4 	.word	0x200001b4
 8000bb4:	40004400 	.word	0x40004400

08000bb8 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000bbc:	4b11      	ldr	r3, [pc, #68]	@ (8000c04 <MX_USART3_UART_Init+0x4c>)
 8000bbe:	4a12      	ldr	r2, [pc, #72]	@ (8000c08 <MX_USART3_UART_Init+0x50>)
 8000bc0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000bc2:	4b10      	ldr	r3, [pc, #64]	@ (8000c04 <MX_USART3_UART_Init+0x4c>)
 8000bc4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000bc8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000bca:	4b0e      	ldr	r3, [pc, #56]	@ (8000c04 <MX_USART3_UART_Init+0x4c>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000bd0:	4b0c      	ldr	r3, [pc, #48]	@ (8000c04 <MX_USART3_UART_Init+0x4c>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000bd6:	4b0b      	ldr	r3, [pc, #44]	@ (8000c04 <MX_USART3_UART_Init+0x4c>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000bdc:	4b09      	ldr	r3, [pc, #36]	@ (8000c04 <MX_USART3_UART_Init+0x4c>)
 8000bde:	220c      	movs	r2, #12
 8000be0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000be2:	4b08      	ldr	r3, [pc, #32]	@ (8000c04 <MX_USART3_UART_Init+0x4c>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000be8:	4b06      	ldr	r3, [pc, #24]	@ (8000c04 <MX_USART3_UART_Init+0x4c>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000bee:	4805      	ldr	r0, [pc, #20]	@ (8000c04 <MX_USART3_UART_Init+0x4c>)
 8000bf0:	f003 fde6 	bl	80047c0 <HAL_UART_Init>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d001      	beq.n	8000bfe <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000bfa:	f7ff fe27 	bl	800084c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000bfe:	bf00      	nop
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	200001fc 	.word	0x200001fc
 8000c08:	40004800 	.word	0x40004800

08000c0c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b08c      	sub	sp, #48	@ 0x30
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c14:	f107 031c 	add.w	r3, r7, #28
 8000c18:	2200      	movs	r2, #0
 8000c1a:	601a      	str	r2, [r3, #0]
 8000c1c:	605a      	str	r2, [r3, #4]
 8000c1e:	609a      	str	r2, [r3, #8]
 8000c20:	60da      	str	r2, [r3, #12]
 8000c22:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	4a61      	ldr	r2, [pc, #388]	@ (8000db0 <HAL_UART_MspInit+0x1a4>)
 8000c2a:	4293      	cmp	r3, r2
 8000c2c:	d15b      	bne.n	8000ce6 <HAL_UART_MspInit+0xda>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c2e:	2300      	movs	r3, #0
 8000c30:	61bb      	str	r3, [r7, #24]
 8000c32:	4b60      	ldr	r3, [pc, #384]	@ (8000db4 <HAL_UART_MspInit+0x1a8>)
 8000c34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c36:	4a5f      	ldr	r2, [pc, #380]	@ (8000db4 <HAL_UART_MspInit+0x1a8>)
 8000c38:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c3c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c3e:	4b5d      	ldr	r3, [pc, #372]	@ (8000db4 <HAL_UART_MspInit+0x1a8>)
 8000c40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c46:	61bb      	str	r3, [r7, #24]
 8000c48:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	617b      	str	r3, [r7, #20]
 8000c4e:	4b59      	ldr	r3, [pc, #356]	@ (8000db4 <HAL_UART_MspInit+0x1a8>)
 8000c50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c52:	4a58      	ldr	r2, [pc, #352]	@ (8000db4 <HAL_UART_MspInit+0x1a8>)
 8000c54:	f043 0301 	orr.w	r3, r3, #1
 8000c58:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c5a:	4b56      	ldr	r3, [pc, #344]	@ (8000db4 <HAL_UART_MspInit+0x1a8>)
 8000c5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c5e:	f003 0301 	and.w	r3, r3, #1
 8000c62:	617b      	str	r3, [r7, #20]
 8000c64:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000c66:	230c      	movs	r3, #12
 8000c68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c6a:	2302      	movs	r3, #2
 8000c6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c72:	2303      	movs	r3, #3
 8000c74:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c76:	2307      	movs	r3, #7
 8000c78:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c7a:	f107 031c 	add.w	r3, r7, #28
 8000c7e:	4619      	mov	r1, r3
 8000c80:	484d      	ldr	r0, [pc, #308]	@ (8000db8 <HAL_UART_MspInit+0x1ac>)
 8000c82:	f000 fff7 	bl	8001c74 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8000c86:	4b4d      	ldr	r3, [pc, #308]	@ (8000dbc <HAL_UART_MspInit+0x1b0>)
 8000c88:	4a4d      	ldr	r2, [pc, #308]	@ (8000dc0 <HAL_UART_MspInit+0x1b4>)
 8000c8a:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8000c8c:	4b4b      	ldr	r3, [pc, #300]	@ (8000dbc <HAL_UART_MspInit+0x1b0>)
 8000c8e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000c92:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c94:	4b49      	ldr	r3, [pc, #292]	@ (8000dbc <HAL_UART_MspInit+0x1b0>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c9a:	4b48      	ldr	r3, [pc, #288]	@ (8000dbc <HAL_UART_MspInit+0x1b0>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000ca0:	4b46      	ldr	r3, [pc, #280]	@ (8000dbc <HAL_UART_MspInit+0x1b0>)
 8000ca2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000ca6:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000ca8:	4b44      	ldr	r3, [pc, #272]	@ (8000dbc <HAL_UART_MspInit+0x1b0>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000cae:	4b43      	ldr	r3, [pc, #268]	@ (8000dbc <HAL_UART_MspInit+0x1b0>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8000cb4:	4b41      	ldr	r3, [pc, #260]	@ (8000dbc <HAL_UART_MspInit+0x1b0>)
 8000cb6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000cba:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000cbc:	4b3f      	ldr	r3, [pc, #252]	@ (8000dbc <HAL_UART_MspInit+0x1b0>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000cc2:	4b3e      	ldr	r3, [pc, #248]	@ (8000dbc <HAL_UART_MspInit+0x1b0>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000cc8:	483c      	ldr	r0, [pc, #240]	@ (8000dbc <HAL_UART_MspInit+0x1b0>)
 8000cca:	f000 fc63 	bl	8001594 <HAL_DMA_Init>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d001      	beq.n	8000cd8 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8000cd4:	f7ff fdba 	bl	800084c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	4a38      	ldr	r2, [pc, #224]	@ (8000dbc <HAL_UART_MspInit+0x1b0>)
 8000cdc:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000cde:	4a37      	ldr	r2, [pc, #220]	@ (8000dbc <HAL_UART_MspInit+0x1b0>)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000ce4:	e05f      	b.n	8000da6 <HAL_UART_MspInit+0x19a>
  else if(uartHandle->Instance==USART3)
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	4a36      	ldr	r2, [pc, #216]	@ (8000dc4 <HAL_UART_MspInit+0x1b8>)
 8000cec:	4293      	cmp	r3, r2
 8000cee:	d15a      	bne.n	8000da6 <HAL_UART_MspInit+0x19a>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	613b      	str	r3, [r7, #16]
 8000cf4:	4b2f      	ldr	r3, [pc, #188]	@ (8000db4 <HAL_UART_MspInit+0x1a8>)
 8000cf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cf8:	4a2e      	ldr	r2, [pc, #184]	@ (8000db4 <HAL_UART_MspInit+0x1a8>)
 8000cfa:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000cfe:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d00:	4b2c      	ldr	r3, [pc, #176]	@ (8000db4 <HAL_UART_MspInit+0x1a8>)
 8000d02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d04:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000d08:	613b      	str	r3, [r7, #16]
 8000d0a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	60fb      	str	r3, [r7, #12]
 8000d10:	4b28      	ldr	r3, [pc, #160]	@ (8000db4 <HAL_UART_MspInit+0x1a8>)
 8000d12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d14:	4a27      	ldr	r2, [pc, #156]	@ (8000db4 <HAL_UART_MspInit+0x1a8>)
 8000d16:	f043 0302 	orr.w	r3, r3, #2
 8000d1a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d1c:	4b25      	ldr	r3, [pc, #148]	@ (8000db4 <HAL_UART_MspInit+0x1a8>)
 8000d1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d20:	f003 0302 	and.w	r3, r3, #2
 8000d24:	60fb      	str	r3, [r7, #12]
 8000d26:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000d28:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000d2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d2e:	2302      	movs	r3, #2
 8000d30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d32:	2300      	movs	r3, #0
 8000d34:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d36:	2303      	movs	r3, #3
 8000d38:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d3a:	2307      	movs	r3, #7
 8000d3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d3e:	f107 031c 	add.w	r3, r7, #28
 8000d42:	4619      	mov	r1, r3
 8000d44:	4820      	ldr	r0, [pc, #128]	@ (8000dc8 <HAL_UART_MspInit+0x1bc>)
 8000d46:	f000 ff95 	bl	8001c74 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8000d4a:	4b20      	ldr	r3, [pc, #128]	@ (8000dcc <HAL_UART_MspInit+0x1c0>)
 8000d4c:	4a20      	ldr	r2, [pc, #128]	@ (8000dd0 <HAL_UART_MspInit+0x1c4>)
 8000d4e:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8000d50:	4b1e      	ldr	r3, [pc, #120]	@ (8000dcc <HAL_UART_MspInit+0x1c0>)
 8000d52:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000d56:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d58:	4b1c      	ldr	r3, [pc, #112]	@ (8000dcc <HAL_UART_MspInit+0x1c0>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d5e:	4b1b      	ldr	r3, [pc, #108]	@ (8000dcc <HAL_UART_MspInit+0x1c0>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000d64:	4b19      	ldr	r3, [pc, #100]	@ (8000dcc <HAL_UART_MspInit+0x1c0>)
 8000d66:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000d6a:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d6c:	4b17      	ldr	r3, [pc, #92]	@ (8000dcc <HAL_UART_MspInit+0x1c0>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d72:	4b16      	ldr	r3, [pc, #88]	@ (8000dcc <HAL_UART_MspInit+0x1c0>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8000d78:	4b14      	ldr	r3, [pc, #80]	@ (8000dcc <HAL_UART_MspInit+0x1c0>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000d7e:	4b13      	ldr	r3, [pc, #76]	@ (8000dcc <HAL_UART_MspInit+0x1c0>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000d84:	4b11      	ldr	r3, [pc, #68]	@ (8000dcc <HAL_UART_MspInit+0x1c0>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8000d8a:	4810      	ldr	r0, [pc, #64]	@ (8000dcc <HAL_UART_MspInit+0x1c0>)
 8000d8c:	f000 fc02 	bl	8001594 <HAL_DMA_Init>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d001      	beq.n	8000d9a <HAL_UART_MspInit+0x18e>
      Error_Handler();
 8000d96:	f7ff fd59 	bl	800084c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	4a0b      	ldr	r2, [pc, #44]	@ (8000dcc <HAL_UART_MspInit+0x1c0>)
 8000d9e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000da0:	4a0a      	ldr	r2, [pc, #40]	@ (8000dcc <HAL_UART_MspInit+0x1c0>)
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8000da6:	bf00      	nop
 8000da8:	3730      	adds	r7, #48	@ 0x30
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	40004400 	.word	0x40004400
 8000db4:	40023800 	.word	0x40023800
 8000db8:	40020000 	.word	0x40020000
 8000dbc:	20000244 	.word	0x20000244
 8000dc0:	40026088 	.word	0x40026088
 8000dc4:	40004800 	.word	0x40004800
 8000dc8:	40020400 	.word	0x40020400
 8000dcc:	200002a4 	.word	0x200002a4
 8000dd0:	40026028 	.word	0x40026028

08000dd4 <BootMessagePrint>:
/*******************************************************************************
 * PUBLIC FUNCTION DEFINITIONS
 *******************************************************************************/
/* Display Boot Message */
void BootMessagePrint (void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
    sprintf(USB_CdcTxBuffer_FS, "-------------------------------------------\r\n");
 8000dd8:	492a      	ldr	r1, [pc, #168]	@ (8000e84 <BootMessagePrint+0xb0>)
 8000dda:	482b      	ldr	r0, [pc, #172]	@ (8000e88 <BootMessagePrint+0xb4>)
 8000ddc:	f008 fa96 	bl	800930c <siprintf>
    User_CDC_Transmit_FS((uint8_t *) USB_CdcTxBuffer_FS, strlen(USB_CdcTxBuffer_FS));
 8000de0:	4829      	ldr	r0, [pc, #164]	@ (8000e88 <BootMessagePrint+0xb4>)
 8000de2:	f7ff fa05 	bl	80001f0 <strlen>
 8000de6:	4603      	mov	r3, r0
 8000de8:	b29b      	uxth	r3, r3
 8000dea:	4619      	mov	r1, r3
 8000dec:	4826      	ldr	r0, [pc, #152]	@ (8000e88 <BootMessagePrint+0xb4>)
 8000dee:	f000 f8df 	bl	8000fb0 <User_CDC_Transmit_FS>

    sprintf(USB_CdcTxBuffer_FS, " Project Name        : %s\r\n", PROJECT_NAME );
 8000df2:	4a26      	ldr	r2, [pc, #152]	@ (8000e8c <BootMessagePrint+0xb8>)
 8000df4:	4926      	ldr	r1, [pc, #152]	@ (8000e90 <BootMessagePrint+0xbc>)
 8000df6:	4824      	ldr	r0, [pc, #144]	@ (8000e88 <BootMessagePrint+0xb4>)
 8000df8:	f008 fa88 	bl	800930c <siprintf>
    User_CDC_Transmit_FS((uint8_t *) USB_CdcTxBuffer_FS, strlen(USB_CdcTxBuffer_FS));
 8000dfc:	4822      	ldr	r0, [pc, #136]	@ (8000e88 <BootMessagePrint+0xb4>)
 8000dfe:	f7ff f9f7 	bl	80001f0 <strlen>
 8000e02:	4603      	mov	r3, r0
 8000e04:	b29b      	uxth	r3, r3
 8000e06:	4619      	mov	r1, r3
 8000e08:	481f      	ldr	r0, [pc, #124]	@ (8000e88 <BootMessagePrint+0xb4>)
 8000e0a:	f000 f8d1 	bl	8000fb0 <User_CDC_Transmit_FS>

    sprintf(USB_CdcTxBuffer_FS, " - HW VERSION        : %s\r\n", STR_HW_VER );
 8000e0e:	4a21      	ldr	r2, [pc, #132]	@ (8000e94 <BootMessagePrint+0xc0>)
 8000e10:	4921      	ldr	r1, [pc, #132]	@ (8000e98 <BootMessagePrint+0xc4>)
 8000e12:	481d      	ldr	r0, [pc, #116]	@ (8000e88 <BootMessagePrint+0xb4>)
 8000e14:	f008 fa7a 	bl	800930c <siprintf>
    User_CDC_Transmit_FS((uint8_t *) USB_CdcTxBuffer_FS, strlen(USB_CdcTxBuffer_FS));
 8000e18:	481b      	ldr	r0, [pc, #108]	@ (8000e88 <BootMessagePrint+0xb4>)
 8000e1a:	f7ff f9e9 	bl	80001f0 <strlen>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	b29b      	uxth	r3, r3
 8000e22:	4619      	mov	r1, r3
 8000e24:	4818      	ldr	r0, [pc, #96]	@ (8000e88 <BootMessagePrint+0xb4>)
 8000e26:	f000 f8c3 	bl	8000fb0 <User_CDC_Transmit_FS>

    sprintf(USB_CdcTxBuffer_FS, " - FW VERSION        : %s\r\n", STR_FW_VER );
 8000e2a:	4a1c      	ldr	r2, [pc, #112]	@ (8000e9c <BootMessagePrint+0xc8>)
 8000e2c:	491c      	ldr	r1, [pc, #112]	@ (8000ea0 <BootMessagePrint+0xcc>)
 8000e2e:	4816      	ldr	r0, [pc, #88]	@ (8000e88 <BootMessagePrint+0xb4>)
 8000e30:	f008 fa6c 	bl	800930c <siprintf>
    User_CDC_Transmit_FS((uint8_t *) USB_CdcTxBuffer_FS, strlen(USB_CdcTxBuffer_FS));
 8000e34:	4814      	ldr	r0, [pc, #80]	@ (8000e88 <BootMessagePrint+0xb4>)
 8000e36:	f7ff f9db 	bl	80001f0 <strlen>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	b29b      	uxth	r3, r3
 8000e3e:	4619      	mov	r1, r3
 8000e40:	4811      	ldr	r0, [pc, #68]	@ (8000e88 <BootMessagePrint+0xb4>)
 8000e42:	f000 f8b5 	bl	8000fb0 <User_CDC_Transmit_FS>

    sprintf(USB_CdcTxBuffer_FS, " - BUILD TIME        : %s, %s\r\n", __DATE__, __TIME__ );
 8000e46:	4b17      	ldr	r3, [pc, #92]	@ (8000ea4 <BootMessagePrint+0xd0>)
 8000e48:	4a17      	ldr	r2, [pc, #92]	@ (8000ea8 <BootMessagePrint+0xd4>)
 8000e4a:	4918      	ldr	r1, [pc, #96]	@ (8000eac <BootMessagePrint+0xd8>)
 8000e4c:	480e      	ldr	r0, [pc, #56]	@ (8000e88 <BootMessagePrint+0xb4>)
 8000e4e:	f008 fa5d 	bl	800930c <siprintf>
    User_CDC_Transmit_FS((uint8_t *) USB_CdcTxBuffer_FS, strlen(USB_CdcTxBuffer_FS));
 8000e52:	480d      	ldr	r0, [pc, #52]	@ (8000e88 <BootMessagePrint+0xb4>)
 8000e54:	f7ff f9cc 	bl	80001f0 <strlen>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	b29b      	uxth	r3, r3
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	480a      	ldr	r0, [pc, #40]	@ (8000e88 <BootMessagePrint+0xb4>)
 8000e60:	f000 f8a6 	bl	8000fb0 <User_CDC_Transmit_FS>

    sprintf(USB_CdcTxBuffer_FS, "-------------------------------------------\r\n" );
 8000e64:	4907      	ldr	r1, [pc, #28]	@ (8000e84 <BootMessagePrint+0xb0>)
 8000e66:	4808      	ldr	r0, [pc, #32]	@ (8000e88 <BootMessagePrint+0xb4>)
 8000e68:	f008 fa50 	bl	800930c <siprintf>
    User_CDC_Transmit_FS((uint8_t *) USB_CdcTxBuffer_FS, strlen(USB_CdcTxBuffer_FS));
 8000e6c:	4806      	ldr	r0, [pc, #24]	@ (8000e88 <BootMessagePrint+0xb4>)
 8000e6e:	f7ff f9bf 	bl	80001f0 <strlen>
 8000e72:	4603      	mov	r3, r0
 8000e74:	b29b      	uxth	r3, r3
 8000e76:	4619      	mov	r1, r3
 8000e78:	4803      	ldr	r0, [pc, #12]	@ (8000e88 <BootMessagePrint+0xb4>)
 8000e7a:	f000 f899 	bl	8000fb0 <User_CDC_Transmit_FS>
}
 8000e7e:	bf00      	nop
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	08009cb0 	.word	0x08009cb0
 8000e88:	2000040c 	.word	0x2000040c
 8000e8c:	08009ce0 	.word	0x08009ce0
 8000e90:	08009cf4 	.word	0x08009cf4
 8000e94:	08009d10 	.word	0x08009d10
 8000e98:	08009d18 	.word	0x08009d18
 8000e9c:	08009d34 	.word	0x08009d34
 8000ea0:	08009d48 	.word	0x08009d48
 8000ea4:	08009d64 	.word	0x08009d64
 8000ea8:	08009d70 	.word	0x08009d70
 8000eac:	08009d7c 	.word	0x08009d7c

08000eb0 <GetClockSourcePrint>:

/* Display Clcok Source Message */
void GetClockSourcePrint (void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
    sprintf(USB_CdcTxBuffer_FS, "-------------------------------------------\r\n");
 8000eb4:	4937      	ldr	r1, [pc, #220]	@ (8000f94 <GetClockSourcePrint+0xe4>)
 8000eb6:	4838      	ldr	r0, [pc, #224]	@ (8000f98 <GetClockSourcePrint+0xe8>)
 8000eb8:	f008 fa28 	bl	800930c <siprintf>
    User_CDC_Transmit_FS((uint8_t *) USB_CdcTxBuffer_FS, strlen(USB_CdcTxBuffer_FS));
 8000ebc:	4836      	ldr	r0, [pc, #216]	@ (8000f98 <GetClockSourcePrint+0xe8>)
 8000ebe:	f7ff f997 	bl	80001f0 <strlen>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	b29b      	uxth	r3, r3
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	4833      	ldr	r0, [pc, #204]	@ (8000f98 <GetClockSourcePrint+0xe8>)
 8000eca:	f000 f871 	bl	8000fb0 <User_CDC_Transmit_FS>

    sprintf(USB_CdcTxBuffer_FS, " - SYSTEM Clock Frequency        : %lu MHz\r\n", (HAL_RCC_GetSysClockFreq() /1000000));
 8000ece:	f002 fec7 	bl	8003c60 <HAL_RCC_GetSysClockFreq>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	4a31      	ldr	r2, [pc, #196]	@ (8000f9c <GetClockSourcePrint+0xec>)
 8000ed6:	fba2 2303 	umull	r2, r3, r2, r3
 8000eda:	0c9b      	lsrs	r3, r3, #18
 8000edc:	461a      	mov	r2, r3
 8000ede:	4930      	ldr	r1, [pc, #192]	@ (8000fa0 <GetClockSourcePrint+0xf0>)
 8000ee0:	482d      	ldr	r0, [pc, #180]	@ (8000f98 <GetClockSourcePrint+0xe8>)
 8000ee2:	f008 fa13 	bl	800930c <siprintf>
    User_CDC_Transmit_FS((uint8_t *) USB_CdcTxBuffer_FS, strlen(USB_CdcTxBuffer_FS));
 8000ee6:	482c      	ldr	r0, [pc, #176]	@ (8000f98 <GetClockSourcePrint+0xe8>)
 8000ee8:	f7ff f982 	bl	80001f0 <strlen>
 8000eec:	4603      	mov	r3, r0
 8000eee:	b29b      	uxth	r3, r3
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	4829      	ldr	r0, [pc, #164]	@ (8000f98 <GetClockSourcePrint+0xe8>)
 8000ef4:	f000 f85c 	bl	8000fb0 <User_CDC_Transmit_FS>

    sprintf(USB_CdcTxBuffer_FS, " - HCLK Clock   Frequency        : %lu MHz\r\n", (HAL_RCC_GetHCLKFreq() / 1000000));
 8000ef8:	f002 ffb8 	bl	8003e6c <HAL_RCC_GetHCLKFreq>
 8000efc:	4603      	mov	r3, r0
 8000efe:	4a27      	ldr	r2, [pc, #156]	@ (8000f9c <GetClockSourcePrint+0xec>)
 8000f00:	fba2 2303 	umull	r2, r3, r2, r3
 8000f04:	0c9b      	lsrs	r3, r3, #18
 8000f06:	461a      	mov	r2, r3
 8000f08:	4926      	ldr	r1, [pc, #152]	@ (8000fa4 <GetClockSourcePrint+0xf4>)
 8000f0a:	4823      	ldr	r0, [pc, #140]	@ (8000f98 <GetClockSourcePrint+0xe8>)
 8000f0c:	f008 f9fe 	bl	800930c <siprintf>
    User_CDC_Transmit_FS((uint8_t *) USB_CdcTxBuffer_FS, strlen(USB_CdcTxBuffer_FS));
 8000f10:	4821      	ldr	r0, [pc, #132]	@ (8000f98 <GetClockSourcePrint+0xe8>)
 8000f12:	f7ff f96d 	bl	80001f0 <strlen>
 8000f16:	4603      	mov	r3, r0
 8000f18:	b29b      	uxth	r3, r3
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	481e      	ldr	r0, [pc, #120]	@ (8000f98 <GetClockSourcePrint+0xe8>)
 8000f1e:	f000 f847 	bl	8000fb0 <User_CDC_Transmit_FS>

    sprintf(USB_CdcTxBuffer_FS, " - PCLK1 Clock  Frequency        : %lu MHz\r\n", (HAL_RCC_GetPCLK1Freq() / 1000000));
 8000f22:	f002 ffaf 	bl	8003e84 <HAL_RCC_GetPCLK1Freq>
 8000f26:	4603      	mov	r3, r0
 8000f28:	4a1c      	ldr	r2, [pc, #112]	@ (8000f9c <GetClockSourcePrint+0xec>)
 8000f2a:	fba2 2303 	umull	r2, r3, r2, r3
 8000f2e:	0c9b      	lsrs	r3, r3, #18
 8000f30:	461a      	mov	r2, r3
 8000f32:	491d      	ldr	r1, [pc, #116]	@ (8000fa8 <GetClockSourcePrint+0xf8>)
 8000f34:	4818      	ldr	r0, [pc, #96]	@ (8000f98 <GetClockSourcePrint+0xe8>)
 8000f36:	f008 f9e9 	bl	800930c <siprintf>
    User_CDC_Transmit_FS((uint8_t *) USB_CdcTxBuffer_FS, strlen(USB_CdcTxBuffer_FS));
 8000f3a:	4817      	ldr	r0, [pc, #92]	@ (8000f98 <GetClockSourcePrint+0xe8>)
 8000f3c:	f7ff f958 	bl	80001f0 <strlen>
 8000f40:	4603      	mov	r3, r0
 8000f42:	b29b      	uxth	r3, r3
 8000f44:	4619      	mov	r1, r3
 8000f46:	4814      	ldr	r0, [pc, #80]	@ (8000f98 <GetClockSourcePrint+0xe8>)
 8000f48:	f000 f832 	bl	8000fb0 <User_CDC_Transmit_FS>

    sprintf(USB_CdcTxBuffer_FS, " - PCLK2 Clock  Frequency        : %lu MHz\r\n", (HAL_RCC_GetPCLK2Freq() / 1000000));
 8000f4c:	f002 ffae 	bl	8003eac <HAL_RCC_GetPCLK2Freq>
 8000f50:	4603      	mov	r3, r0
 8000f52:	4a12      	ldr	r2, [pc, #72]	@ (8000f9c <GetClockSourcePrint+0xec>)
 8000f54:	fba2 2303 	umull	r2, r3, r2, r3
 8000f58:	0c9b      	lsrs	r3, r3, #18
 8000f5a:	461a      	mov	r2, r3
 8000f5c:	4913      	ldr	r1, [pc, #76]	@ (8000fac <GetClockSourcePrint+0xfc>)
 8000f5e:	480e      	ldr	r0, [pc, #56]	@ (8000f98 <GetClockSourcePrint+0xe8>)
 8000f60:	f008 f9d4 	bl	800930c <siprintf>
    User_CDC_Transmit_FS((uint8_t *) USB_CdcTxBuffer_FS, strlen(USB_CdcTxBuffer_FS));
 8000f64:	480c      	ldr	r0, [pc, #48]	@ (8000f98 <GetClockSourcePrint+0xe8>)
 8000f66:	f7ff f943 	bl	80001f0 <strlen>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	b29b      	uxth	r3, r3
 8000f6e:	4619      	mov	r1, r3
 8000f70:	4809      	ldr	r0, [pc, #36]	@ (8000f98 <GetClockSourcePrint+0xe8>)
 8000f72:	f000 f81d 	bl	8000fb0 <User_CDC_Transmit_FS>

    sprintf(USB_CdcTxBuffer_FS, "-------------------------------------------\r\n" );
 8000f76:	4907      	ldr	r1, [pc, #28]	@ (8000f94 <GetClockSourcePrint+0xe4>)
 8000f78:	4807      	ldr	r0, [pc, #28]	@ (8000f98 <GetClockSourcePrint+0xe8>)
 8000f7a:	f008 f9c7 	bl	800930c <siprintf>
    User_CDC_Transmit_FS((uint8_t *) USB_CdcTxBuffer_FS, strlen(USB_CdcTxBuffer_FS));
 8000f7e:	4806      	ldr	r0, [pc, #24]	@ (8000f98 <GetClockSourcePrint+0xe8>)
 8000f80:	f7ff f936 	bl	80001f0 <strlen>
 8000f84:	4603      	mov	r3, r0
 8000f86:	b29b      	uxth	r3, r3
 8000f88:	4619      	mov	r1, r3
 8000f8a:	4803      	ldr	r0, [pc, #12]	@ (8000f98 <GetClockSourcePrint+0xe8>)
 8000f8c:	f000 f810 	bl	8000fb0 <User_CDC_Transmit_FS>
}
 8000f90:	bf00      	nop
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	08009cb0 	.word	0x08009cb0
 8000f98:	2000040c 	.word	0x2000040c
 8000f9c:	431bde83 	.word	0x431bde83
 8000fa0:	08009d9c 	.word	0x08009d9c
 8000fa4:	08009dcc 	.word	0x08009dcc
 8000fa8:	08009dfc 	.word	0x08009dfc
 8000fac:	08009e2c 	.word	0x08009e2c

08000fb0 <User_CDC_Transmit_FS>:

void User_CDC_Transmit_FS(uint8_t * pdata, uint16_t datalength)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
 8000fb8:	460b      	mov	r3, r1
 8000fba:	807b      	strh	r3, [r7, #2]
    while(CDC_Transmit_FS((uint8_t *) pdata, datalength) == USBD_BUSY);
 8000fbc:	bf00      	nop
 8000fbe:	887b      	ldrh	r3, [r7, #2]
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	6878      	ldr	r0, [r7, #4]
 8000fc4:	f007 fd34 	bl	8008a30 <CDC_Transmit_FS>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b01      	cmp	r3, #1
 8000fcc:	d0f7      	beq.n	8000fbe <User_CDC_Transmit_FS+0xe>
}
 8000fce:	bf00      	nop
 8000fd0:	bf00      	nop
 8000fd2:	3708      	adds	r7, #8
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}

08000fd8 <LED_Proc>:
    LED_RED_PIN         GPIO_PIN_14
    LED_GREEN_PIN       GPIO_PIN_0
    LED_BLUE_PIN        GPIO_PIN_7
*/
static void LED_Proc (void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	af00      	add	r7, sp, #0
    if(TIM1_CNT_1 >= 500)
 8000fdc:	4b07      	ldr	r3, [pc, #28]	@ (8000ffc <LED_Proc+0x24>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000fe4:	d307      	bcc.n	8000ff6 <LED_Proc+0x1e>
    {
        TIM1_CNT_1 = 0;
 8000fe6:	4b05      	ldr	r3, [pc, #20]	@ (8000ffc <LED_Proc+0x24>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	601a      	str	r2, [r3, #0]
        
        HAL_GPIO_TogglePin(LED_ALL_PORT, LED_ALL_PIN);
 8000fec:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000ff0:	4803      	ldr	r0, [pc, #12]	@ (8001000 <LED_Proc+0x28>)
 8000ff2:	f001 f804 	bl	8001ffe <HAL_GPIO_TogglePin>
    }    
}
 8000ff6:	bf00      	nop
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	20000304 	.word	0x20000304
 8001000:	40020400 	.word	0x40020400

08001004 <GPIO_Proc>:

void GPIO_Proc (void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0
    LED_Proc();
 8001008:	f7ff ffe6 	bl	8000fd8 <LED_Proc>
}
 800100c:	bf00      	nop
 800100e:	bd80      	pop	{r7, pc}

08001010 <USB_CDC_Proc>:
/*----------------------------------------------------------------------------*/
static uint16_t count = 0;

/* USER CODE BEGIN 1 */
void USB_CDC_Proc (void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
    #if 1
    if (TIM1_CNT_2 >= 1000)
 8001014:	4b1a      	ldr	r3, [pc, #104]	@ (8001080 <USB_CDC_Proc+0x70>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800101c:	d32e      	bcc.n	800107c <USB_CDC_Proc+0x6c>
    {
        TIM1_CNT_2 = 0;
 800101e:	4b18      	ldr	r3, [pc, #96]	@ (8001080 <USB_CDC_Proc+0x70>)
 8001020:	2200      	movs	r2, #0
 8001022:	601a      	str	r2, [r3, #0]

        sprintf(USB_CdcTxBuffer_FS, "USB CDC TEST %d\r\n", count);
 8001024:	4b17      	ldr	r3, [pc, #92]	@ (8001084 <USB_CDC_Proc+0x74>)
 8001026:	881b      	ldrh	r3, [r3, #0]
 8001028:	461a      	mov	r2, r3
 800102a:	4917      	ldr	r1, [pc, #92]	@ (8001088 <USB_CDC_Proc+0x78>)
 800102c:	4817      	ldr	r0, [pc, #92]	@ (800108c <USB_CDC_Proc+0x7c>)
 800102e:	f008 f96d 	bl	800930c <siprintf>
        User_CDC_Transmit_FS((uint8_t *) USB_CdcTxBuffer_FS, strlen(USB_CdcTxBuffer_FS));
 8001032:	4816      	ldr	r0, [pc, #88]	@ (800108c <USB_CDC_Proc+0x7c>)
 8001034:	f7ff f8dc 	bl	80001f0 <strlen>
 8001038:	4603      	mov	r3, r0
 800103a:	b29b      	uxth	r3, r3
 800103c:	4619      	mov	r1, r3
 800103e:	4813      	ldr	r0, [pc, #76]	@ (800108c <USB_CDC_Proc+0x7c>)
 8001040:	f7ff ffb6 	bl	8000fb0 <User_CDC_Transmit_FS>

        sprintf(USB_CdcTxBuffer_FS, "USB CDC Transmit OK.\r\n");
 8001044:	4912      	ldr	r1, [pc, #72]	@ (8001090 <USB_CDC_Proc+0x80>)
 8001046:	4811      	ldr	r0, [pc, #68]	@ (800108c <USB_CDC_Proc+0x7c>)
 8001048:	f008 f960 	bl	800930c <siprintf>
        User_CDC_Transmit_FS((uint8_t *) USB_CdcTxBuffer_FS, strlen(USB_CdcTxBuffer_FS));
 800104c:	480f      	ldr	r0, [pc, #60]	@ (800108c <USB_CDC_Proc+0x7c>)
 800104e:	f7ff f8cf 	bl	80001f0 <strlen>
 8001052:	4603      	mov	r3, r0
 8001054:	b29b      	uxth	r3, r3
 8001056:	4619      	mov	r1, r3
 8001058:	480c      	ldr	r0, [pc, #48]	@ (800108c <USB_CDC_Proc+0x7c>)
 800105a:	f7ff ffa9 	bl	8000fb0 <User_CDC_Transmit_FS>
        
        memset(USB_CdcTxBuffer_FS, 0, strlen(USB_CdcTxBuffer_FS));
 800105e:	480b      	ldr	r0, [pc, #44]	@ (800108c <USB_CDC_Proc+0x7c>)
 8001060:	f7ff f8c6 	bl	80001f0 <strlen>
 8001064:	4603      	mov	r3, r0
 8001066:	461a      	mov	r2, r3
 8001068:	2100      	movs	r1, #0
 800106a:	4808      	ldr	r0, [pc, #32]	@ (800108c <USB_CDC_Proc+0x7c>)
 800106c:	f008 f96e 	bl	800934c <memset>
        
        count++;
 8001070:	4b04      	ldr	r3, [pc, #16]	@ (8001084 <USB_CDC_Proc+0x74>)
 8001072:	881b      	ldrh	r3, [r3, #0]
 8001074:	3301      	adds	r3, #1
 8001076:	b29a      	uxth	r2, r3
 8001078:	4b02      	ldr	r3, [pc, #8]	@ (8001084 <USB_CDC_Proc+0x74>)
 800107a:	801a      	strh	r2, [r3, #0]

        sprintf(USB_CdcTxBuffer_FS, "-------------------------------------------\r\n" );
        CDC_Transmit_FS(USB_CdcTxBuffer_FS, strlen(USB_CdcTxBuffer_FS));
    }
    #endif
}
 800107c:	bf00      	nop
 800107e:	bd80      	pop	{r7, pc}
 8001080:	20000308 	.word	0x20000308
 8001084:	20000912 	.word	0x20000912
 8001088:	08009e5c 	.word	0x08009e5c
 800108c:	2000040c 	.word	0x2000040c
 8001090:	08009e70 	.word	0x08009e70

08001094 <USB_CDC_RX_Proc>:

void USB_CDC_RX_Proc(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
    if (USB_CdcRxBuffer_FS_cnt != NULL)
 8001098:	4b3d      	ldr	r3, [pc, #244]	@ (8001190 <USB_CDC_RX_Proc+0xfc>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d075      	beq.n	800118c <USB_CDC_RX_Proc+0xf8>
    {
        if (!strncmp("RXBUF ALL PRINT", USB_CdcRxBuffer_FS, USB_CDC_RX_CNT))
 80010a0:	4b3b      	ldr	r3, [pc, #236]	@ (8001190 <USB_CDC_RX_Proc+0xfc>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	3b02      	subs	r3, #2
 80010a6:	461a      	mov	r2, r3
 80010a8:	493a      	ldr	r1, [pc, #232]	@ (8001194 <USB_CDC_RX_Proc+0x100>)
 80010aa:	483b      	ldr	r0, [pc, #236]	@ (8001198 <USB_CDC_RX_Proc+0x104>)
 80010ac:	f008 f956 	bl	800935c <strncmp>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d10d      	bne.n	80010d2 <USB_CDC_RX_Proc+0x3e>
        {
            sprintf(USB_CdcTxBuffer_FS, "USB ALL\r\n");
 80010b6:	4939      	ldr	r1, [pc, #228]	@ (800119c <USB_CDC_RX_Proc+0x108>)
 80010b8:	4839      	ldr	r0, [pc, #228]	@ (80011a0 <USB_CDC_RX_Proc+0x10c>)
 80010ba:	f008 f927 	bl	800930c <siprintf>
            User_CDC_Transmit_FS((uint8_t *) USB_CdcTxBuffer_FS, strlen(USB_CdcTxBuffer_FS));
 80010be:	4838      	ldr	r0, [pc, #224]	@ (80011a0 <USB_CDC_RX_Proc+0x10c>)
 80010c0:	f7ff f896 	bl	80001f0 <strlen>
 80010c4:	4603      	mov	r3, r0
 80010c6:	b29b      	uxth	r3, r3
 80010c8:	4619      	mov	r1, r3
 80010ca:	4835      	ldr	r0, [pc, #212]	@ (80011a0 <USB_CDC_RX_Proc+0x10c>)
 80010cc:	f7ff ff70 	bl	8000fb0 <User_CDC_Transmit_FS>
 80010d0:	e052      	b.n	8001178 <USB_CDC_RX_Proc+0xe4>
        }
        else if (!strncmp("RXBUF CLEAR", USB_CdcRxBuffer_FS, USB_CDC_RX_CNT))
 80010d2:	4b2f      	ldr	r3, [pc, #188]	@ (8001190 <USB_CDC_RX_Proc+0xfc>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	3b02      	subs	r3, #2
 80010d8:	461a      	mov	r2, r3
 80010da:	492e      	ldr	r1, [pc, #184]	@ (8001194 <USB_CDC_RX_Proc+0x100>)
 80010dc:	4831      	ldr	r0, [pc, #196]	@ (80011a4 <USB_CDC_RX_Proc+0x110>)
 80010de:	f008 f93d 	bl	800935c <strncmp>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d10d      	bne.n	8001104 <USB_CDC_RX_Proc+0x70>
        {
            sprintf(USB_CdcTxBuffer_FS, "USB RX Buffer Clear\r\n");
 80010e8:	492f      	ldr	r1, [pc, #188]	@ (80011a8 <USB_CDC_RX_Proc+0x114>)
 80010ea:	482d      	ldr	r0, [pc, #180]	@ (80011a0 <USB_CDC_RX_Proc+0x10c>)
 80010ec:	f008 f90e 	bl	800930c <siprintf>
            User_CDC_Transmit_FS((uint8_t *) USB_CdcTxBuffer_FS, strlen(USB_CdcTxBuffer_FS));
 80010f0:	482b      	ldr	r0, [pc, #172]	@ (80011a0 <USB_CDC_RX_Proc+0x10c>)
 80010f2:	f7ff f87d 	bl	80001f0 <strlen>
 80010f6:	4603      	mov	r3, r0
 80010f8:	b29b      	uxth	r3, r3
 80010fa:	4619      	mov	r1, r3
 80010fc:	4828      	ldr	r0, [pc, #160]	@ (80011a0 <USB_CDC_RX_Proc+0x10c>)
 80010fe:	f7ff ff57 	bl	8000fb0 <User_CDC_Transmit_FS>
 8001102:	e039      	b.n	8001178 <USB_CDC_RX_Proc+0xe4>
        }
        else if (!strncmp("SYSTEM RESET", USB_CdcRxBuffer_FS, USB_CDC_RX_CNT))
 8001104:	4b22      	ldr	r3, [pc, #136]	@ (8001190 <USB_CDC_RX_Proc+0xfc>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	3b02      	subs	r3, #2
 800110a:	461a      	mov	r2, r3
 800110c:	4921      	ldr	r1, [pc, #132]	@ (8001194 <USB_CDC_RX_Proc+0x100>)
 800110e:	4827      	ldr	r0, [pc, #156]	@ (80011ac <USB_CDC_RX_Proc+0x118>)
 8001110:	f008 f924 	bl	800935c <strncmp>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d112      	bne.n	8001140 <USB_CDC_RX_Proc+0xac>
        {
            sprintf(USB_CdcTxBuffer_FS, "SYSTEM Reset\r\n");
 800111a:	4925      	ldr	r1, [pc, #148]	@ (80011b0 <USB_CDC_RX_Proc+0x11c>)
 800111c:	4820      	ldr	r0, [pc, #128]	@ (80011a0 <USB_CDC_RX_Proc+0x10c>)
 800111e:	f008 f8f5 	bl	800930c <siprintf>
            User_CDC_Transmit_FS((uint8_t *) USB_CdcTxBuffer_FS, strlen(USB_CdcTxBuffer_FS));
 8001122:	481f      	ldr	r0, [pc, #124]	@ (80011a0 <USB_CDC_RX_Proc+0x10c>)
 8001124:	f7ff f864 	bl	80001f0 <strlen>
 8001128:	4603      	mov	r3, r0
 800112a:	b29b      	uxth	r3, r3
 800112c:	4619      	mov	r1, r3
 800112e:	481c      	ldr	r0, [pc, #112]	@ (80011a0 <USB_CDC_RX_Proc+0x10c>)
 8001130:	f7ff ff3e 	bl	8000fb0 <User_CDC_Transmit_FS>
            HAL_Delay(100);
 8001134:	2064      	movs	r0, #100	@ 0x64
 8001136:	f000 f8dd 	bl	80012f4 <HAL_Delay>
            HAL_NVIC_SystemReset();
 800113a:	f000 fa1a 	bl	8001572 <HAL_NVIC_SystemReset>
 800113e:	e01b      	b.n	8001178 <USB_CDC_RX_Proc+0xe4>
        }
        else if (!strncmp("SYSTEM INFO", USB_CdcRxBuffer_FS, USB_CDC_RX_CNT))
 8001140:	4b13      	ldr	r3, [pc, #76]	@ (8001190 <USB_CDC_RX_Proc+0xfc>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	3b02      	subs	r3, #2
 8001146:	461a      	mov	r2, r3
 8001148:	4912      	ldr	r1, [pc, #72]	@ (8001194 <USB_CDC_RX_Proc+0x100>)
 800114a:	481a      	ldr	r0, [pc, #104]	@ (80011b4 <USB_CDC_RX_Proc+0x120>)
 800114c:	f008 f906 	bl	800935c <strncmp>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d110      	bne.n	8001178 <USB_CDC_RX_Proc+0xe4>
        {
            sprintf(USB_CdcTxBuffer_FS, "[ System Infomation ]\r\n");
 8001156:	4918      	ldr	r1, [pc, #96]	@ (80011b8 <USB_CDC_RX_Proc+0x124>)
 8001158:	4811      	ldr	r0, [pc, #68]	@ (80011a0 <USB_CDC_RX_Proc+0x10c>)
 800115a:	f008 f8d7 	bl	800930c <siprintf>
            User_CDC_Transmit_FS((uint8_t *) USB_CdcTxBuffer_FS, strlen(USB_CdcTxBuffer_FS));
 800115e:	4810      	ldr	r0, [pc, #64]	@ (80011a0 <USB_CDC_RX_Proc+0x10c>)
 8001160:	f7ff f846 	bl	80001f0 <strlen>
 8001164:	4603      	mov	r3, r0
 8001166:	b29b      	uxth	r3, r3
 8001168:	4619      	mov	r1, r3
 800116a:	480d      	ldr	r0, [pc, #52]	@ (80011a0 <USB_CDC_RX_Proc+0x10c>)
 800116c:	f7ff ff20 	bl	8000fb0 <User_CDC_Transmit_FS>

            BootMessagePrint();
 8001170:	f7ff fe30 	bl	8000dd4 <BootMessagePrint>
            GetClockSourcePrint();
 8001174:	f7ff fe9c 	bl	8000eb0 <GetClockSourcePrint>
        }

        memset(USB_CdcRxBuffer_FS, 0, USB_CdcRxBuffer_FS_cnt);
 8001178:	4b05      	ldr	r3, [pc, #20]	@ (8001190 <USB_CDC_RX_Proc+0xfc>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	461a      	mov	r2, r3
 800117e:	2100      	movs	r1, #0
 8001180:	4804      	ldr	r0, [pc, #16]	@ (8001194 <USB_CDC_RX_Proc+0x100>)
 8001182:	f008 f8e3 	bl	800934c <memset>
        USB_CdcRxBuffer_FS_cnt = NULL;
 8001186:	4b02      	ldr	r3, [pc, #8]	@ (8001190 <USB_CDC_RX_Proc+0xfc>)
 8001188:	2200      	movs	r2, #0
 800118a:	601a      	str	r2, [r3, #0]
    }
}
 800118c:	bf00      	nop
 800118e:	bd80      	pop	{r7, pc}
 8001190:	2000050c 	.word	0x2000050c
 8001194:	2000030c 	.word	0x2000030c
 8001198:	08009e88 	.word	0x08009e88
 800119c:	08009e98 	.word	0x08009e98
 80011a0:	2000040c 	.word	0x2000040c
 80011a4:	08009ea4 	.word	0x08009ea4
 80011a8:	08009eb0 	.word	0x08009eb0
 80011ac:	08009ec8 	.word	0x08009ec8
 80011b0:	08009ed8 	.word	0x08009ed8
 80011b4:	08009ee8 	.word	0x08009ee8
 80011b8:	08009ef4 	.word	0x08009ef4

080011bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80011bc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80011f4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80011c0:	f7ff fc46 	bl	8000a50 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80011c4:	480c      	ldr	r0, [pc, #48]	@ (80011f8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80011c6:	490d      	ldr	r1, [pc, #52]	@ (80011fc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80011c8:	4a0d      	ldr	r2, [pc, #52]	@ (8001200 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80011ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011cc:	e002      	b.n	80011d4 <LoopCopyDataInit>

080011ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011d2:	3304      	adds	r3, #4

080011d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011d8:	d3f9      	bcc.n	80011ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011da:	4a0a      	ldr	r2, [pc, #40]	@ (8001204 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80011dc:	4c0a      	ldr	r4, [pc, #40]	@ (8001208 <LoopFillZerobss+0x22>)
  movs r3, #0
 80011de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011e0:	e001      	b.n	80011e6 <LoopFillZerobss>

080011e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011e4:	3204      	adds	r2, #4

080011e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011e8:	d3fb      	bcc.n	80011e2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80011ea:	f008 f8e3 	bl	80093b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011ee:	f7ff fa8b 	bl	8000708 <main>
  bx  lr    
 80011f2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80011f4:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80011f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011fc:	2000014c 	.word	0x2000014c
  ldr r2, =_sidata
 8001200:	08009fb8 	.word	0x08009fb8
  ldr r2, =_sbss
 8001204:	2000014c 	.word	0x2000014c
  ldr r4, =_ebss
 8001208:	20002644 	.word	0x20002644

0800120c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800120c:	e7fe      	b.n	800120c <ADC_IRQHandler>
	...

08001210 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001214:	4b0e      	ldr	r3, [pc, #56]	@ (8001250 <HAL_Init+0x40>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a0d      	ldr	r2, [pc, #52]	@ (8001250 <HAL_Init+0x40>)
 800121a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800121e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001220:	4b0b      	ldr	r3, [pc, #44]	@ (8001250 <HAL_Init+0x40>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a0a      	ldr	r2, [pc, #40]	@ (8001250 <HAL_Init+0x40>)
 8001226:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800122a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800122c:	4b08      	ldr	r3, [pc, #32]	@ (8001250 <HAL_Init+0x40>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a07      	ldr	r2, [pc, #28]	@ (8001250 <HAL_Init+0x40>)
 8001232:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001236:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001238:	2003      	movs	r0, #3
 800123a:	f000 f965 	bl	8001508 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800123e:	200f      	movs	r0, #15
 8001240:	f000 f808 	bl	8001254 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001244:	f7ff fb08 	bl	8000858 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001248:	2300      	movs	r3, #0
}
 800124a:	4618      	mov	r0, r3
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	40023c00 	.word	0x40023c00

08001254 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b082      	sub	sp, #8
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800125c:	4b12      	ldr	r3, [pc, #72]	@ (80012a8 <HAL_InitTick+0x54>)
 800125e:	681a      	ldr	r2, [r3, #0]
 8001260:	4b12      	ldr	r3, [pc, #72]	@ (80012ac <HAL_InitTick+0x58>)
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	4619      	mov	r1, r3
 8001266:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800126a:	fbb3 f3f1 	udiv	r3, r3, r1
 800126e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001272:	4618      	mov	r0, r3
 8001274:	f000 f981 	bl	800157a <HAL_SYSTICK_Config>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d001      	beq.n	8001282 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800127e:	2301      	movs	r3, #1
 8001280:	e00e      	b.n	80012a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	2b0f      	cmp	r3, #15
 8001286:	d80a      	bhi.n	800129e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001288:	2200      	movs	r2, #0
 800128a:	6879      	ldr	r1, [r7, #4]
 800128c:	f04f 30ff 	mov.w	r0, #4294967295
 8001290:	f000 f945 	bl	800151e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001294:	4a06      	ldr	r2, [pc, #24]	@ (80012b0 <HAL_InitTick+0x5c>)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800129a:	2300      	movs	r3, #0
 800129c:	e000      	b.n	80012a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800129e:	2301      	movs	r3, #1
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	3708      	adds	r7, #8
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	20000000 	.word	0x20000000
 80012ac:	20000008 	.word	0x20000008
 80012b0:	20000004 	.word	0x20000004

080012b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012b8:	4b06      	ldr	r3, [pc, #24]	@ (80012d4 <HAL_IncTick+0x20>)
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	461a      	mov	r2, r3
 80012be:	4b06      	ldr	r3, [pc, #24]	@ (80012d8 <HAL_IncTick+0x24>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4413      	add	r3, r2
 80012c4:	4a04      	ldr	r2, [pc, #16]	@ (80012d8 <HAL_IncTick+0x24>)
 80012c6:	6013      	str	r3, [r2, #0]
}
 80012c8:	bf00      	nop
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr
 80012d2:	bf00      	nop
 80012d4:	20000008 	.word	0x20000008
 80012d8:	20000914 	.word	0x20000914

080012dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0
  return uwTick;
 80012e0:	4b03      	ldr	r3, [pc, #12]	@ (80012f0 <HAL_GetTick+0x14>)
 80012e2:	681b      	ldr	r3, [r3, #0]
}
 80012e4:	4618      	mov	r0, r3
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr
 80012ee:	bf00      	nop
 80012f0:	20000914 	.word	0x20000914

080012f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b084      	sub	sp, #16
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012fc:	f7ff ffee 	bl	80012dc <HAL_GetTick>
 8001300:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	f1b3 3fff 	cmp.w	r3, #4294967295
 800130c:	d005      	beq.n	800131a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800130e:	4b0a      	ldr	r3, [pc, #40]	@ (8001338 <HAL_Delay+0x44>)
 8001310:	781b      	ldrb	r3, [r3, #0]
 8001312:	461a      	mov	r2, r3
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	4413      	add	r3, r2
 8001318:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800131a:	bf00      	nop
 800131c:	f7ff ffde 	bl	80012dc <HAL_GetTick>
 8001320:	4602      	mov	r2, r0
 8001322:	68bb      	ldr	r3, [r7, #8]
 8001324:	1ad3      	subs	r3, r2, r3
 8001326:	68fa      	ldr	r2, [r7, #12]
 8001328:	429a      	cmp	r2, r3
 800132a:	d8f7      	bhi.n	800131c <HAL_Delay+0x28>
  {
  }
}
 800132c:	bf00      	nop
 800132e:	bf00      	nop
 8001330:	3710      	adds	r7, #16
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	20000008 	.word	0x20000008

0800133c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800133c:	b480      	push	{r7}
 800133e:	b085      	sub	sp, #20
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	f003 0307 	and.w	r3, r3, #7
 800134a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800134c:	4b0c      	ldr	r3, [pc, #48]	@ (8001380 <__NVIC_SetPriorityGrouping+0x44>)
 800134e:	68db      	ldr	r3, [r3, #12]
 8001350:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001352:	68ba      	ldr	r2, [r7, #8]
 8001354:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001358:	4013      	ands	r3, r2
 800135a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001360:	68bb      	ldr	r3, [r7, #8]
 8001362:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001364:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001368:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800136c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800136e:	4a04      	ldr	r2, [pc, #16]	@ (8001380 <__NVIC_SetPriorityGrouping+0x44>)
 8001370:	68bb      	ldr	r3, [r7, #8]
 8001372:	60d3      	str	r3, [r2, #12]
}
 8001374:	bf00      	nop
 8001376:	3714      	adds	r7, #20
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr
 8001380:	e000ed00 	.word	0xe000ed00

08001384 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001388:	4b04      	ldr	r3, [pc, #16]	@ (800139c <__NVIC_GetPriorityGrouping+0x18>)
 800138a:	68db      	ldr	r3, [r3, #12]
 800138c:	0a1b      	lsrs	r3, r3, #8
 800138e:	f003 0307 	and.w	r3, r3, #7
}
 8001392:	4618      	mov	r0, r3
 8001394:	46bd      	mov	sp, r7
 8001396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139a:	4770      	bx	lr
 800139c:	e000ed00 	.word	0xe000ed00

080013a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b083      	sub	sp, #12
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	4603      	mov	r3, r0
 80013a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	db0b      	blt.n	80013ca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013b2:	79fb      	ldrb	r3, [r7, #7]
 80013b4:	f003 021f 	and.w	r2, r3, #31
 80013b8:	4907      	ldr	r1, [pc, #28]	@ (80013d8 <__NVIC_EnableIRQ+0x38>)
 80013ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013be:	095b      	lsrs	r3, r3, #5
 80013c0:	2001      	movs	r0, #1
 80013c2:	fa00 f202 	lsl.w	r2, r0, r2
 80013c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80013ca:	bf00      	nop
 80013cc:	370c      	adds	r7, #12
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr
 80013d6:	bf00      	nop
 80013d8:	e000e100 	.word	0xe000e100

080013dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013dc:	b480      	push	{r7}
 80013de:	b083      	sub	sp, #12
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	4603      	mov	r3, r0
 80013e4:	6039      	str	r1, [r7, #0]
 80013e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	db0a      	blt.n	8001406 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	b2da      	uxtb	r2, r3
 80013f4:	490c      	ldr	r1, [pc, #48]	@ (8001428 <__NVIC_SetPriority+0x4c>)
 80013f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013fa:	0112      	lsls	r2, r2, #4
 80013fc:	b2d2      	uxtb	r2, r2
 80013fe:	440b      	add	r3, r1
 8001400:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001404:	e00a      	b.n	800141c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	b2da      	uxtb	r2, r3
 800140a:	4908      	ldr	r1, [pc, #32]	@ (800142c <__NVIC_SetPriority+0x50>)
 800140c:	79fb      	ldrb	r3, [r7, #7]
 800140e:	f003 030f 	and.w	r3, r3, #15
 8001412:	3b04      	subs	r3, #4
 8001414:	0112      	lsls	r2, r2, #4
 8001416:	b2d2      	uxtb	r2, r2
 8001418:	440b      	add	r3, r1
 800141a:	761a      	strb	r2, [r3, #24]
}
 800141c:	bf00      	nop
 800141e:	370c      	adds	r7, #12
 8001420:	46bd      	mov	sp, r7
 8001422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001426:	4770      	bx	lr
 8001428:	e000e100 	.word	0xe000e100
 800142c:	e000ed00 	.word	0xe000ed00

08001430 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001430:	b480      	push	{r7}
 8001432:	b089      	sub	sp, #36	@ 0x24
 8001434:	af00      	add	r7, sp, #0
 8001436:	60f8      	str	r0, [r7, #12]
 8001438:	60b9      	str	r1, [r7, #8]
 800143a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	f003 0307 	and.w	r3, r3, #7
 8001442:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001444:	69fb      	ldr	r3, [r7, #28]
 8001446:	f1c3 0307 	rsb	r3, r3, #7
 800144a:	2b04      	cmp	r3, #4
 800144c:	bf28      	it	cs
 800144e:	2304      	movcs	r3, #4
 8001450:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001452:	69fb      	ldr	r3, [r7, #28]
 8001454:	3304      	adds	r3, #4
 8001456:	2b06      	cmp	r3, #6
 8001458:	d902      	bls.n	8001460 <NVIC_EncodePriority+0x30>
 800145a:	69fb      	ldr	r3, [r7, #28]
 800145c:	3b03      	subs	r3, #3
 800145e:	e000      	b.n	8001462 <NVIC_EncodePriority+0x32>
 8001460:	2300      	movs	r3, #0
 8001462:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001464:	f04f 32ff 	mov.w	r2, #4294967295
 8001468:	69bb      	ldr	r3, [r7, #24]
 800146a:	fa02 f303 	lsl.w	r3, r2, r3
 800146e:	43da      	mvns	r2, r3
 8001470:	68bb      	ldr	r3, [r7, #8]
 8001472:	401a      	ands	r2, r3
 8001474:	697b      	ldr	r3, [r7, #20]
 8001476:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001478:	f04f 31ff 	mov.w	r1, #4294967295
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	fa01 f303 	lsl.w	r3, r1, r3
 8001482:	43d9      	mvns	r1, r3
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001488:	4313      	orrs	r3, r2
         );
}
 800148a:	4618      	mov	r0, r3
 800148c:	3724      	adds	r7, #36	@ 0x24
 800148e:	46bd      	mov	sp, r7
 8001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001494:	4770      	bx	lr
	...

08001498 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800149c:	f3bf 8f4f 	dsb	sy
}
 80014a0:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80014a2:	4b06      	ldr	r3, [pc, #24]	@ (80014bc <__NVIC_SystemReset+0x24>)
 80014a4:	68db      	ldr	r3, [r3, #12]
 80014a6:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80014aa:	4904      	ldr	r1, [pc, #16]	@ (80014bc <__NVIC_SystemReset+0x24>)
 80014ac:	4b04      	ldr	r3, [pc, #16]	@ (80014c0 <__NVIC_SystemReset+0x28>)
 80014ae:	4313      	orrs	r3, r2
 80014b0:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80014b2:	f3bf 8f4f 	dsb	sy
}
 80014b6:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80014b8:	bf00      	nop
 80014ba:	e7fd      	b.n	80014b8 <__NVIC_SystemReset+0x20>
 80014bc:	e000ed00 	.word	0xe000ed00
 80014c0:	05fa0004 	.word	0x05fa0004

080014c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b082      	sub	sp, #8
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	3b01      	subs	r3, #1
 80014d0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80014d4:	d301      	bcc.n	80014da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014d6:	2301      	movs	r3, #1
 80014d8:	e00f      	b.n	80014fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014da:	4a0a      	ldr	r2, [pc, #40]	@ (8001504 <SysTick_Config+0x40>)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	3b01      	subs	r3, #1
 80014e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014e2:	210f      	movs	r1, #15
 80014e4:	f04f 30ff 	mov.w	r0, #4294967295
 80014e8:	f7ff ff78 	bl	80013dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014ec:	4b05      	ldr	r3, [pc, #20]	@ (8001504 <SysTick_Config+0x40>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014f2:	4b04      	ldr	r3, [pc, #16]	@ (8001504 <SysTick_Config+0x40>)
 80014f4:	2207      	movs	r2, #7
 80014f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014f8:	2300      	movs	r3, #0
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	3708      	adds	r7, #8
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	e000e010 	.word	0xe000e010

08001508 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b082      	sub	sp, #8
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001510:	6878      	ldr	r0, [r7, #4]
 8001512:	f7ff ff13 	bl	800133c <__NVIC_SetPriorityGrouping>
}
 8001516:	bf00      	nop
 8001518:	3708      	adds	r7, #8
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}

0800151e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800151e:	b580      	push	{r7, lr}
 8001520:	b086      	sub	sp, #24
 8001522:	af00      	add	r7, sp, #0
 8001524:	4603      	mov	r3, r0
 8001526:	60b9      	str	r1, [r7, #8]
 8001528:	607a      	str	r2, [r7, #4]
 800152a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800152c:	2300      	movs	r3, #0
 800152e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001530:	f7ff ff28 	bl	8001384 <__NVIC_GetPriorityGrouping>
 8001534:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001536:	687a      	ldr	r2, [r7, #4]
 8001538:	68b9      	ldr	r1, [r7, #8]
 800153a:	6978      	ldr	r0, [r7, #20]
 800153c:	f7ff ff78 	bl	8001430 <NVIC_EncodePriority>
 8001540:	4602      	mov	r2, r0
 8001542:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001546:	4611      	mov	r1, r2
 8001548:	4618      	mov	r0, r3
 800154a:	f7ff ff47 	bl	80013dc <__NVIC_SetPriority>
}
 800154e:	bf00      	nop
 8001550:	3718      	adds	r7, #24
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}

08001556 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001556:	b580      	push	{r7, lr}
 8001558:	b082      	sub	sp, #8
 800155a:	af00      	add	r7, sp, #0
 800155c:	4603      	mov	r3, r0
 800155e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001560:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001564:	4618      	mov	r0, r3
 8001566:	f7ff ff1b 	bl	80013a0 <__NVIC_EnableIRQ>
}
 800156a:	bf00      	nop
 800156c:	3708      	adds	r7, #8
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}

08001572 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8001572:	b580      	push	{r7, lr}
 8001574:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8001576:	f7ff ff8f 	bl	8001498 <__NVIC_SystemReset>

0800157a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800157a:	b580      	push	{r7, lr}
 800157c:	b082      	sub	sp, #8
 800157e:	af00      	add	r7, sp, #0
 8001580:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001582:	6878      	ldr	r0, [r7, #4]
 8001584:	f7ff ff9e 	bl	80014c4 <SysTick_Config>
 8001588:	4603      	mov	r3, r0
}
 800158a:	4618      	mov	r0, r3
 800158c:	3708      	adds	r7, #8
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
	...

08001594 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b086      	sub	sp, #24
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800159c:	2300      	movs	r3, #0
 800159e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80015a0:	f7ff fe9c 	bl	80012dc <HAL_GetTick>
 80015a4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d101      	bne.n	80015b0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80015ac:	2301      	movs	r3, #1
 80015ae:	e099      	b.n	80016e4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2202      	movs	r2, #2
 80015b4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2200      	movs	r2, #0
 80015bc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	681a      	ldr	r2, [r3, #0]
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f022 0201 	bic.w	r2, r2, #1
 80015ce:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80015d0:	e00f      	b.n	80015f2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80015d2:	f7ff fe83 	bl	80012dc <HAL_GetTick>
 80015d6:	4602      	mov	r2, r0
 80015d8:	693b      	ldr	r3, [r7, #16]
 80015da:	1ad3      	subs	r3, r2, r3
 80015dc:	2b05      	cmp	r3, #5
 80015de:	d908      	bls.n	80015f2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2220      	movs	r2, #32
 80015e4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2203      	movs	r2, #3
 80015ea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80015ee:	2303      	movs	r3, #3
 80015f0:	e078      	b.n	80016e4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f003 0301 	and.w	r3, r3, #1
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d1e8      	bne.n	80015d2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001608:	697a      	ldr	r2, [r7, #20]
 800160a:	4b38      	ldr	r3, [pc, #224]	@ (80016ec <HAL_DMA_Init+0x158>)
 800160c:	4013      	ands	r3, r2
 800160e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	685a      	ldr	r2, [r3, #4]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	689b      	ldr	r3, [r3, #8]
 8001618:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800161e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	691b      	ldr	r3, [r3, #16]
 8001624:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800162a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	699b      	ldr	r3, [r3, #24]
 8001630:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001636:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6a1b      	ldr	r3, [r3, #32]
 800163c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800163e:	697a      	ldr	r2, [r7, #20]
 8001640:	4313      	orrs	r3, r2
 8001642:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001648:	2b04      	cmp	r3, #4
 800164a:	d107      	bne.n	800165c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001654:	4313      	orrs	r3, r2
 8001656:	697a      	ldr	r2, [r7, #20]
 8001658:	4313      	orrs	r3, r2
 800165a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	697a      	ldr	r2, [r7, #20]
 8001662:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	695b      	ldr	r3, [r3, #20]
 800166a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800166c:	697b      	ldr	r3, [r7, #20]
 800166e:	f023 0307 	bic.w	r3, r3, #7
 8001672:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001678:	697a      	ldr	r2, [r7, #20]
 800167a:	4313      	orrs	r3, r2
 800167c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001682:	2b04      	cmp	r3, #4
 8001684:	d117      	bne.n	80016b6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800168a:	697a      	ldr	r2, [r7, #20]
 800168c:	4313      	orrs	r3, r2
 800168e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001694:	2b00      	cmp	r3, #0
 8001696:	d00e      	beq.n	80016b6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001698:	6878      	ldr	r0, [r7, #4]
 800169a:	f000 fa6f 	bl	8001b7c <DMA_CheckFifoParam>
 800169e:	4603      	mov	r3, r0
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d008      	beq.n	80016b6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	2240      	movs	r2, #64	@ 0x40
 80016a8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2201      	movs	r2, #1
 80016ae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80016b2:	2301      	movs	r3, #1
 80016b4:	e016      	b.n	80016e4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	697a      	ldr	r2, [r7, #20]
 80016bc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80016be:	6878      	ldr	r0, [r7, #4]
 80016c0:	f000 fa26 	bl	8001b10 <DMA_CalcBaseAndBitshift>
 80016c4:	4603      	mov	r3, r0
 80016c6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016cc:	223f      	movs	r2, #63	@ 0x3f
 80016ce:	409a      	lsls	r2, r3
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2200      	movs	r2, #0
 80016d8:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2201      	movs	r2, #1
 80016de:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80016e2:	2300      	movs	r3, #0
}
 80016e4:	4618      	mov	r0, r3
 80016e6:	3718      	adds	r7, #24
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	f010803f 	.word	0xf010803f

080016f0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b086      	sub	sp, #24
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	60f8      	str	r0, [r7, #12]
 80016f8:	60b9      	str	r1, [r7, #8]
 80016fa:	607a      	str	r2, [r7, #4]
 80016fc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80016fe:	2300      	movs	r3, #0
 8001700:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001706:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800170e:	2b01      	cmp	r3, #1
 8001710:	d101      	bne.n	8001716 <HAL_DMA_Start_IT+0x26>
 8001712:	2302      	movs	r3, #2
 8001714:	e040      	b.n	8001798 <HAL_DMA_Start_IT+0xa8>
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	2201      	movs	r2, #1
 800171a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001724:	b2db      	uxtb	r3, r3
 8001726:	2b01      	cmp	r3, #1
 8001728:	d12f      	bne.n	800178a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	2202      	movs	r2, #2
 800172e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	2200      	movs	r2, #0
 8001736:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	687a      	ldr	r2, [r7, #4]
 800173c:	68b9      	ldr	r1, [r7, #8]
 800173e:	68f8      	ldr	r0, [r7, #12]
 8001740:	f000 f9b8 	bl	8001ab4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001748:	223f      	movs	r2, #63	@ 0x3f
 800174a:	409a      	lsls	r2, r3
 800174c:	693b      	ldr	r3, [r7, #16]
 800174e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	681a      	ldr	r2, [r3, #0]
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f042 0216 	orr.w	r2, r2, #22
 800175e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001764:	2b00      	cmp	r3, #0
 8001766:	d007      	beq.n	8001778 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	681a      	ldr	r2, [r3, #0]
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f042 0208 	orr.w	r2, r2, #8
 8001776:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	681a      	ldr	r2, [r3, #0]
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f042 0201 	orr.w	r2, r2, #1
 8001786:	601a      	str	r2, [r3, #0]
 8001788:	e005      	b.n	8001796 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	2200      	movs	r2, #0
 800178e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001792:	2302      	movs	r3, #2
 8001794:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001796:	7dfb      	ldrb	r3, [r7, #23]
}
 8001798:	4618      	mov	r0, r3
 800179a:	3718      	adds	r7, #24
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}

080017a0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b086      	sub	sp, #24
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80017a8:	2300      	movs	r3, #0
 80017aa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80017ac:	4b8e      	ldr	r3, [pc, #568]	@ (80019e8 <HAL_DMA_IRQHandler+0x248>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a8e      	ldr	r2, [pc, #568]	@ (80019ec <HAL_DMA_IRQHandler+0x24c>)
 80017b2:	fba2 2303 	umull	r2, r3, r2, r3
 80017b6:	0a9b      	lsrs	r3, r3, #10
 80017b8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017be:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80017c0:	693b      	ldr	r3, [r7, #16]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017ca:	2208      	movs	r2, #8
 80017cc:	409a      	lsls	r2, r3
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	4013      	ands	r3, r2
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d01a      	beq.n	800180c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f003 0304 	and.w	r3, r3, #4
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d013      	beq.n	800180c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	681a      	ldr	r2, [r3, #0]
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f022 0204 	bic.w	r2, r2, #4
 80017f2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017f8:	2208      	movs	r2, #8
 80017fa:	409a      	lsls	r2, r3
 80017fc:	693b      	ldr	r3, [r7, #16]
 80017fe:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001804:	f043 0201 	orr.w	r2, r3, #1
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001810:	2201      	movs	r2, #1
 8001812:	409a      	lsls	r2, r3
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	4013      	ands	r3, r2
 8001818:	2b00      	cmp	r3, #0
 800181a:	d012      	beq.n	8001842 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	695b      	ldr	r3, [r3, #20]
 8001822:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001826:	2b00      	cmp	r3, #0
 8001828:	d00b      	beq.n	8001842 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800182e:	2201      	movs	r2, #1
 8001830:	409a      	lsls	r2, r3
 8001832:	693b      	ldr	r3, [r7, #16]
 8001834:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800183a:	f043 0202 	orr.w	r2, r3, #2
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001846:	2204      	movs	r2, #4
 8001848:	409a      	lsls	r2, r3
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	4013      	ands	r3, r2
 800184e:	2b00      	cmp	r3, #0
 8001850:	d012      	beq.n	8001878 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f003 0302 	and.w	r3, r3, #2
 800185c:	2b00      	cmp	r3, #0
 800185e:	d00b      	beq.n	8001878 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001864:	2204      	movs	r2, #4
 8001866:	409a      	lsls	r2, r3
 8001868:	693b      	ldr	r3, [r7, #16]
 800186a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001870:	f043 0204 	orr.w	r2, r3, #4
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800187c:	2210      	movs	r2, #16
 800187e:	409a      	lsls	r2, r3
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	4013      	ands	r3, r2
 8001884:	2b00      	cmp	r3, #0
 8001886:	d043      	beq.n	8001910 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f003 0308 	and.w	r3, r3, #8
 8001892:	2b00      	cmp	r3, #0
 8001894:	d03c      	beq.n	8001910 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800189a:	2210      	movs	r2, #16
 800189c:	409a      	lsls	r2, r3
 800189e:	693b      	ldr	r3, [r7, #16]
 80018a0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d018      	beq.n	80018e2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d108      	bne.n	80018d0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d024      	beq.n	8001910 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ca:	6878      	ldr	r0, [r7, #4]
 80018cc:	4798      	blx	r3
 80018ce:	e01f      	b.n	8001910 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d01b      	beq.n	8001910 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80018dc:	6878      	ldr	r0, [r7, #4]
 80018de:	4798      	blx	r3
 80018e0:	e016      	b.n	8001910 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d107      	bne.n	8001900 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	681a      	ldr	r2, [r3, #0]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f022 0208 	bic.w	r2, r2, #8
 80018fe:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001904:	2b00      	cmp	r3, #0
 8001906:	d003      	beq.n	8001910 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800190c:	6878      	ldr	r0, [r7, #4]
 800190e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001914:	2220      	movs	r2, #32
 8001916:	409a      	lsls	r2, r3
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	4013      	ands	r3, r2
 800191c:	2b00      	cmp	r3, #0
 800191e:	f000 808f 	beq.w	8001a40 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f003 0310 	and.w	r3, r3, #16
 800192c:	2b00      	cmp	r3, #0
 800192e:	f000 8087 	beq.w	8001a40 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001936:	2220      	movs	r2, #32
 8001938:	409a      	lsls	r2, r3
 800193a:	693b      	ldr	r3, [r7, #16]
 800193c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001944:	b2db      	uxtb	r3, r3
 8001946:	2b05      	cmp	r3, #5
 8001948:	d136      	bne.n	80019b8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	681a      	ldr	r2, [r3, #0]
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f022 0216 	bic.w	r2, r2, #22
 8001958:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	695a      	ldr	r2, [r3, #20]
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001968:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800196e:	2b00      	cmp	r3, #0
 8001970:	d103      	bne.n	800197a <HAL_DMA_IRQHandler+0x1da>
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001976:	2b00      	cmp	r3, #0
 8001978:	d007      	beq.n	800198a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	681a      	ldr	r2, [r3, #0]
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f022 0208 	bic.w	r2, r2, #8
 8001988:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800198e:	223f      	movs	r2, #63	@ 0x3f
 8001990:	409a      	lsls	r2, r3
 8001992:	693b      	ldr	r3, [r7, #16]
 8001994:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2201      	movs	r2, #1
 800199a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2200      	movs	r2, #0
 80019a2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d07e      	beq.n	8001aac <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80019b2:	6878      	ldr	r0, [r7, #4]
 80019b4:	4798      	blx	r3
        }
        return;
 80019b6:	e079      	b.n	8001aac <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d01d      	beq.n	8001a02 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d10d      	bne.n	80019f0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d031      	beq.n	8001a40 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019e0:	6878      	ldr	r0, [r7, #4]
 80019e2:	4798      	blx	r3
 80019e4:	e02c      	b.n	8001a40 <HAL_DMA_IRQHandler+0x2a0>
 80019e6:	bf00      	nop
 80019e8:	20000000 	.word	0x20000000
 80019ec:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d023      	beq.n	8001a40 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80019fc:	6878      	ldr	r0, [r7, #4]
 80019fe:	4798      	blx	r3
 8001a00:	e01e      	b.n	8001a40 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d10f      	bne.n	8001a30 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	681a      	ldr	r2, [r3, #0]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f022 0210 	bic.w	r2, r2, #16
 8001a1e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2201      	movs	r2, #1
 8001a24:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d003      	beq.n	8001a40 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a3c:	6878      	ldr	r0, [r7, #4]
 8001a3e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d032      	beq.n	8001aae <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a4c:	f003 0301 	and.w	r3, r3, #1
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d022      	beq.n	8001a9a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2205      	movs	r2, #5
 8001a58:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	681a      	ldr	r2, [r3, #0]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f022 0201 	bic.w	r2, r2, #1
 8001a6a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001a6c:	68bb      	ldr	r3, [r7, #8]
 8001a6e:	3301      	adds	r3, #1
 8001a70:	60bb      	str	r3, [r7, #8]
 8001a72:	697a      	ldr	r2, [r7, #20]
 8001a74:	429a      	cmp	r2, r3
 8001a76:	d307      	bcc.n	8001a88 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f003 0301 	and.w	r3, r3, #1
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d1f2      	bne.n	8001a6c <HAL_DMA_IRQHandler+0x2cc>
 8001a86:	e000      	b.n	8001a8a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001a88:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2200      	movs	r2, #0
 8001a96:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d005      	beq.n	8001aae <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001aa6:	6878      	ldr	r0, [r7, #4]
 8001aa8:	4798      	blx	r3
 8001aaa:	e000      	b.n	8001aae <HAL_DMA_IRQHandler+0x30e>
        return;
 8001aac:	bf00      	nop
    }
  }
}
 8001aae:	3718      	adds	r7, #24
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}

08001ab4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b085      	sub	sp, #20
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	60f8      	str	r0, [r7, #12]
 8001abc:	60b9      	str	r1, [r7, #8]
 8001abe:	607a      	str	r2, [r7, #4]
 8001ac0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	681a      	ldr	r2, [r3, #0]
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001ad0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	683a      	ldr	r2, [r7, #0]
 8001ad8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	689b      	ldr	r3, [r3, #8]
 8001ade:	2b40      	cmp	r3, #64	@ 0x40
 8001ae0:	d108      	bne.n	8001af4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	687a      	ldr	r2, [r7, #4]
 8001ae8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	68ba      	ldr	r2, [r7, #8]
 8001af0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001af2:	e007      	b.n	8001b04 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	68ba      	ldr	r2, [r7, #8]
 8001afa:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	687a      	ldr	r2, [r7, #4]
 8001b02:	60da      	str	r2, [r3, #12]
}
 8001b04:	bf00      	nop
 8001b06:	3714      	adds	r7, #20
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0e:	4770      	bx	lr

08001b10 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b085      	sub	sp, #20
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	b2db      	uxtb	r3, r3
 8001b1e:	3b10      	subs	r3, #16
 8001b20:	4a14      	ldr	r2, [pc, #80]	@ (8001b74 <DMA_CalcBaseAndBitshift+0x64>)
 8001b22:	fba2 2303 	umull	r2, r3, r2, r3
 8001b26:	091b      	lsrs	r3, r3, #4
 8001b28:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001b2a:	4a13      	ldr	r2, [pc, #76]	@ (8001b78 <DMA_CalcBaseAndBitshift+0x68>)
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	4413      	add	r3, r2
 8001b30:	781b      	ldrb	r3, [r3, #0]
 8001b32:	461a      	mov	r2, r3
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	2b03      	cmp	r3, #3
 8001b3c:	d909      	bls.n	8001b52 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001b46:	f023 0303 	bic.w	r3, r3, #3
 8001b4a:	1d1a      	adds	r2, r3, #4
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	659a      	str	r2, [r3, #88]	@ 0x58
 8001b50:	e007      	b.n	8001b62 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001b5a:	f023 0303 	bic.w	r3, r3, #3
 8001b5e:	687a      	ldr	r2, [r7, #4]
 8001b60:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	3714      	adds	r7, #20
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr
 8001b72:	bf00      	nop
 8001b74:	aaaaaaab 	.word	0xaaaaaaab
 8001b78:	08009f6c 	.word	0x08009f6c

08001b7c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b085      	sub	sp, #20
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b84:	2300      	movs	r3, #0
 8001b86:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b8c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	699b      	ldr	r3, [r3, #24]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d11f      	bne.n	8001bd6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001b96:	68bb      	ldr	r3, [r7, #8]
 8001b98:	2b03      	cmp	r3, #3
 8001b9a:	d856      	bhi.n	8001c4a <DMA_CheckFifoParam+0xce>
 8001b9c:	a201      	add	r2, pc, #4	@ (adr r2, 8001ba4 <DMA_CheckFifoParam+0x28>)
 8001b9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ba2:	bf00      	nop
 8001ba4:	08001bb5 	.word	0x08001bb5
 8001ba8:	08001bc7 	.word	0x08001bc7
 8001bac:	08001bb5 	.word	0x08001bb5
 8001bb0:	08001c4b 	.word	0x08001c4b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bb8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d046      	beq.n	8001c4e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001bc4:	e043      	b.n	8001c4e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bca:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001bce:	d140      	bne.n	8001c52 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001bd4:	e03d      	b.n	8001c52 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	699b      	ldr	r3, [r3, #24]
 8001bda:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001bde:	d121      	bne.n	8001c24 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001be0:	68bb      	ldr	r3, [r7, #8]
 8001be2:	2b03      	cmp	r3, #3
 8001be4:	d837      	bhi.n	8001c56 <DMA_CheckFifoParam+0xda>
 8001be6:	a201      	add	r2, pc, #4	@ (adr r2, 8001bec <DMA_CheckFifoParam+0x70>)
 8001be8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bec:	08001bfd 	.word	0x08001bfd
 8001bf0:	08001c03 	.word	0x08001c03
 8001bf4:	08001bfd 	.word	0x08001bfd
 8001bf8:	08001c15 	.word	0x08001c15
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	73fb      	strb	r3, [r7, #15]
      break;
 8001c00:	e030      	b.n	8001c64 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c06:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d025      	beq.n	8001c5a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001c12:	e022      	b.n	8001c5a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c18:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001c1c:	d11f      	bne.n	8001c5e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001c22:	e01c      	b.n	8001c5e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001c24:	68bb      	ldr	r3, [r7, #8]
 8001c26:	2b02      	cmp	r3, #2
 8001c28:	d903      	bls.n	8001c32 <DMA_CheckFifoParam+0xb6>
 8001c2a:	68bb      	ldr	r3, [r7, #8]
 8001c2c:	2b03      	cmp	r3, #3
 8001c2e:	d003      	beq.n	8001c38 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001c30:	e018      	b.n	8001c64 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
 8001c34:	73fb      	strb	r3, [r7, #15]
      break;
 8001c36:	e015      	b.n	8001c64 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c3c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d00e      	beq.n	8001c62 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001c44:	2301      	movs	r3, #1
 8001c46:	73fb      	strb	r3, [r7, #15]
      break;
 8001c48:	e00b      	b.n	8001c62 <DMA_CheckFifoParam+0xe6>
      break;
 8001c4a:	bf00      	nop
 8001c4c:	e00a      	b.n	8001c64 <DMA_CheckFifoParam+0xe8>
      break;
 8001c4e:	bf00      	nop
 8001c50:	e008      	b.n	8001c64 <DMA_CheckFifoParam+0xe8>
      break;
 8001c52:	bf00      	nop
 8001c54:	e006      	b.n	8001c64 <DMA_CheckFifoParam+0xe8>
      break;
 8001c56:	bf00      	nop
 8001c58:	e004      	b.n	8001c64 <DMA_CheckFifoParam+0xe8>
      break;
 8001c5a:	bf00      	nop
 8001c5c:	e002      	b.n	8001c64 <DMA_CheckFifoParam+0xe8>
      break;   
 8001c5e:	bf00      	nop
 8001c60:	e000      	b.n	8001c64 <DMA_CheckFifoParam+0xe8>
      break;
 8001c62:	bf00      	nop
    }
  } 
  
  return status; 
 8001c64:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	3714      	adds	r7, #20
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr
 8001c72:	bf00      	nop

08001c74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b089      	sub	sp, #36	@ 0x24
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
 8001c7c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c82:	2300      	movs	r3, #0
 8001c84:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c86:	2300      	movs	r3, #0
 8001c88:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	61fb      	str	r3, [r7, #28]
 8001c8e:	e177      	b.n	8001f80 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c90:	2201      	movs	r2, #1
 8001c92:	69fb      	ldr	r3, [r7, #28]
 8001c94:	fa02 f303 	lsl.w	r3, r2, r3
 8001c98:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	697a      	ldr	r2, [r7, #20]
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ca4:	693a      	ldr	r2, [r7, #16]
 8001ca6:	697b      	ldr	r3, [r7, #20]
 8001ca8:	429a      	cmp	r2, r3
 8001caa:	f040 8166 	bne.w	8001f7a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	f003 0303 	and.w	r3, r3, #3
 8001cb6:	2b01      	cmp	r3, #1
 8001cb8:	d005      	beq.n	8001cc6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001cc2:	2b02      	cmp	r3, #2
 8001cc4:	d130      	bne.n	8001d28 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	689b      	ldr	r3, [r3, #8]
 8001cca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ccc:	69fb      	ldr	r3, [r7, #28]
 8001cce:	005b      	lsls	r3, r3, #1
 8001cd0:	2203      	movs	r2, #3
 8001cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd6:	43db      	mvns	r3, r3
 8001cd8:	69ba      	ldr	r2, [r7, #24]
 8001cda:	4013      	ands	r3, r2
 8001cdc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	68da      	ldr	r2, [r3, #12]
 8001ce2:	69fb      	ldr	r3, [r7, #28]
 8001ce4:	005b      	lsls	r3, r3, #1
 8001ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cea:	69ba      	ldr	r2, [r7, #24]
 8001cec:	4313      	orrs	r3, r2
 8001cee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	69ba      	ldr	r2, [r7, #24]
 8001cf4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	69fb      	ldr	r3, [r7, #28]
 8001d00:	fa02 f303 	lsl.w	r3, r2, r3
 8001d04:	43db      	mvns	r3, r3
 8001d06:	69ba      	ldr	r2, [r7, #24]
 8001d08:	4013      	ands	r3, r2
 8001d0a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	091b      	lsrs	r3, r3, #4
 8001d12:	f003 0201 	and.w	r2, r3, #1
 8001d16:	69fb      	ldr	r3, [r7, #28]
 8001d18:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1c:	69ba      	ldr	r2, [r7, #24]
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	69ba      	ldr	r2, [r7, #24]
 8001d26:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	f003 0303 	and.w	r3, r3, #3
 8001d30:	2b03      	cmp	r3, #3
 8001d32:	d017      	beq.n	8001d64 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	68db      	ldr	r3, [r3, #12]
 8001d38:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d3a:	69fb      	ldr	r3, [r7, #28]
 8001d3c:	005b      	lsls	r3, r3, #1
 8001d3e:	2203      	movs	r2, #3
 8001d40:	fa02 f303 	lsl.w	r3, r2, r3
 8001d44:	43db      	mvns	r3, r3
 8001d46:	69ba      	ldr	r2, [r7, #24]
 8001d48:	4013      	ands	r3, r2
 8001d4a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	689a      	ldr	r2, [r3, #8]
 8001d50:	69fb      	ldr	r3, [r7, #28]
 8001d52:	005b      	lsls	r3, r3, #1
 8001d54:	fa02 f303 	lsl.w	r3, r2, r3
 8001d58:	69ba      	ldr	r2, [r7, #24]
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	69ba      	ldr	r2, [r7, #24]
 8001d62:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	f003 0303 	and.w	r3, r3, #3
 8001d6c:	2b02      	cmp	r3, #2
 8001d6e:	d123      	bne.n	8001db8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d70:	69fb      	ldr	r3, [r7, #28]
 8001d72:	08da      	lsrs	r2, r3, #3
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	3208      	adds	r2, #8
 8001d78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d7e:	69fb      	ldr	r3, [r7, #28]
 8001d80:	f003 0307 	and.w	r3, r3, #7
 8001d84:	009b      	lsls	r3, r3, #2
 8001d86:	220f      	movs	r2, #15
 8001d88:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8c:	43db      	mvns	r3, r3
 8001d8e:	69ba      	ldr	r2, [r7, #24]
 8001d90:	4013      	ands	r3, r2
 8001d92:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	691a      	ldr	r2, [r3, #16]
 8001d98:	69fb      	ldr	r3, [r7, #28]
 8001d9a:	f003 0307 	and.w	r3, r3, #7
 8001d9e:	009b      	lsls	r3, r3, #2
 8001da0:	fa02 f303 	lsl.w	r3, r2, r3
 8001da4:	69ba      	ldr	r2, [r7, #24]
 8001da6:	4313      	orrs	r3, r2
 8001da8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001daa:	69fb      	ldr	r3, [r7, #28]
 8001dac:	08da      	lsrs	r2, r3, #3
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	3208      	adds	r2, #8
 8001db2:	69b9      	ldr	r1, [r7, #24]
 8001db4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001dbe:	69fb      	ldr	r3, [r7, #28]
 8001dc0:	005b      	lsls	r3, r3, #1
 8001dc2:	2203      	movs	r2, #3
 8001dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc8:	43db      	mvns	r3, r3
 8001dca:	69ba      	ldr	r2, [r7, #24]
 8001dcc:	4013      	ands	r3, r2
 8001dce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	f003 0203 	and.w	r2, r3, #3
 8001dd8:	69fb      	ldr	r3, [r7, #28]
 8001dda:	005b      	lsls	r3, r3, #1
 8001ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8001de0:	69ba      	ldr	r2, [r7, #24]
 8001de2:	4313      	orrs	r3, r2
 8001de4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	69ba      	ldr	r2, [r7, #24]
 8001dea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	f000 80c0 	beq.w	8001f7a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	60fb      	str	r3, [r7, #12]
 8001dfe:	4b66      	ldr	r3, [pc, #408]	@ (8001f98 <HAL_GPIO_Init+0x324>)
 8001e00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e02:	4a65      	ldr	r2, [pc, #404]	@ (8001f98 <HAL_GPIO_Init+0x324>)
 8001e04:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e08:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e0a:	4b63      	ldr	r3, [pc, #396]	@ (8001f98 <HAL_GPIO_Init+0x324>)
 8001e0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e0e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e12:	60fb      	str	r3, [r7, #12]
 8001e14:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e16:	4a61      	ldr	r2, [pc, #388]	@ (8001f9c <HAL_GPIO_Init+0x328>)
 8001e18:	69fb      	ldr	r3, [r7, #28]
 8001e1a:	089b      	lsrs	r3, r3, #2
 8001e1c:	3302      	adds	r3, #2
 8001e1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e22:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e24:	69fb      	ldr	r3, [r7, #28]
 8001e26:	f003 0303 	and.w	r3, r3, #3
 8001e2a:	009b      	lsls	r3, r3, #2
 8001e2c:	220f      	movs	r2, #15
 8001e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e32:	43db      	mvns	r3, r3
 8001e34:	69ba      	ldr	r2, [r7, #24]
 8001e36:	4013      	ands	r3, r2
 8001e38:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	4a58      	ldr	r2, [pc, #352]	@ (8001fa0 <HAL_GPIO_Init+0x32c>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d037      	beq.n	8001eb2 <HAL_GPIO_Init+0x23e>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	4a57      	ldr	r2, [pc, #348]	@ (8001fa4 <HAL_GPIO_Init+0x330>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d031      	beq.n	8001eae <HAL_GPIO_Init+0x23a>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	4a56      	ldr	r2, [pc, #344]	@ (8001fa8 <HAL_GPIO_Init+0x334>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d02b      	beq.n	8001eaa <HAL_GPIO_Init+0x236>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	4a55      	ldr	r2, [pc, #340]	@ (8001fac <HAL_GPIO_Init+0x338>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d025      	beq.n	8001ea6 <HAL_GPIO_Init+0x232>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	4a54      	ldr	r2, [pc, #336]	@ (8001fb0 <HAL_GPIO_Init+0x33c>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d01f      	beq.n	8001ea2 <HAL_GPIO_Init+0x22e>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	4a53      	ldr	r2, [pc, #332]	@ (8001fb4 <HAL_GPIO_Init+0x340>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d019      	beq.n	8001e9e <HAL_GPIO_Init+0x22a>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	4a52      	ldr	r2, [pc, #328]	@ (8001fb8 <HAL_GPIO_Init+0x344>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d013      	beq.n	8001e9a <HAL_GPIO_Init+0x226>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	4a51      	ldr	r2, [pc, #324]	@ (8001fbc <HAL_GPIO_Init+0x348>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d00d      	beq.n	8001e96 <HAL_GPIO_Init+0x222>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	4a50      	ldr	r2, [pc, #320]	@ (8001fc0 <HAL_GPIO_Init+0x34c>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d007      	beq.n	8001e92 <HAL_GPIO_Init+0x21e>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	4a4f      	ldr	r2, [pc, #316]	@ (8001fc4 <HAL_GPIO_Init+0x350>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d101      	bne.n	8001e8e <HAL_GPIO_Init+0x21a>
 8001e8a:	2309      	movs	r3, #9
 8001e8c:	e012      	b.n	8001eb4 <HAL_GPIO_Init+0x240>
 8001e8e:	230a      	movs	r3, #10
 8001e90:	e010      	b.n	8001eb4 <HAL_GPIO_Init+0x240>
 8001e92:	2308      	movs	r3, #8
 8001e94:	e00e      	b.n	8001eb4 <HAL_GPIO_Init+0x240>
 8001e96:	2307      	movs	r3, #7
 8001e98:	e00c      	b.n	8001eb4 <HAL_GPIO_Init+0x240>
 8001e9a:	2306      	movs	r3, #6
 8001e9c:	e00a      	b.n	8001eb4 <HAL_GPIO_Init+0x240>
 8001e9e:	2305      	movs	r3, #5
 8001ea0:	e008      	b.n	8001eb4 <HAL_GPIO_Init+0x240>
 8001ea2:	2304      	movs	r3, #4
 8001ea4:	e006      	b.n	8001eb4 <HAL_GPIO_Init+0x240>
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	e004      	b.n	8001eb4 <HAL_GPIO_Init+0x240>
 8001eaa:	2302      	movs	r3, #2
 8001eac:	e002      	b.n	8001eb4 <HAL_GPIO_Init+0x240>
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e000      	b.n	8001eb4 <HAL_GPIO_Init+0x240>
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	69fa      	ldr	r2, [r7, #28]
 8001eb6:	f002 0203 	and.w	r2, r2, #3
 8001eba:	0092      	lsls	r2, r2, #2
 8001ebc:	4093      	lsls	r3, r2
 8001ebe:	69ba      	ldr	r2, [r7, #24]
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ec4:	4935      	ldr	r1, [pc, #212]	@ (8001f9c <HAL_GPIO_Init+0x328>)
 8001ec6:	69fb      	ldr	r3, [r7, #28]
 8001ec8:	089b      	lsrs	r3, r3, #2
 8001eca:	3302      	adds	r3, #2
 8001ecc:	69ba      	ldr	r2, [r7, #24]
 8001ece:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ed2:	4b3d      	ldr	r3, [pc, #244]	@ (8001fc8 <HAL_GPIO_Init+0x354>)
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ed8:	693b      	ldr	r3, [r7, #16]
 8001eda:	43db      	mvns	r3, r3
 8001edc:	69ba      	ldr	r2, [r7, #24]
 8001ede:	4013      	ands	r3, r2
 8001ee0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d003      	beq.n	8001ef6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001eee:	69ba      	ldr	r2, [r7, #24]
 8001ef0:	693b      	ldr	r3, [r7, #16]
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ef6:	4a34      	ldr	r2, [pc, #208]	@ (8001fc8 <HAL_GPIO_Init+0x354>)
 8001ef8:	69bb      	ldr	r3, [r7, #24]
 8001efa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001efc:	4b32      	ldr	r3, [pc, #200]	@ (8001fc8 <HAL_GPIO_Init+0x354>)
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	43db      	mvns	r3, r3
 8001f06:	69ba      	ldr	r2, [r7, #24]
 8001f08:	4013      	ands	r3, r2
 8001f0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d003      	beq.n	8001f20 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001f18:	69ba      	ldr	r2, [r7, #24]
 8001f1a:	693b      	ldr	r3, [r7, #16]
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f20:	4a29      	ldr	r2, [pc, #164]	@ (8001fc8 <HAL_GPIO_Init+0x354>)
 8001f22:	69bb      	ldr	r3, [r7, #24]
 8001f24:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f26:	4b28      	ldr	r3, [pc, #160]	@ (8001fc8 <HAL_GPIO_Init+0x354>)
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	43db      	mvns	r3, r3
 8001f30:	69ba      	ldr	r2, [r7, #24]
 8001f32:	4013      	ands	r3, r2
 8001f34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d003      	beq.n	8001f4a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001f42:	69ba      	ldr	r2, [r7, #24]
 8001f44:	693b      	ldr	r3, [r7, #16]
 8001f46:	4313      	orrs	r3, r2
 8001f48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f4a:	4a1f      	ldr	r2, [pc, #124]	@ (8001fc8 <HAL_GPIO_Init+0x354>)
 8001f4c:	69bb      	ldr	r3, [r7, #24]
 8001f4e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f50:	4b1d      	ldr	r3, [pc, #116]	@ (8001fc8 <HAL_GPIO_Init+0x354>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	43db      	mvns	r3, r3
 8001f5a:	69ba      	ldr	r2, [r7, #24]
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d003      	beq.n	8001f74 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001f6c:	69ba      	ldr	r2, [r7, #24]
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	4313      	orrs	r3, r2
 8001f72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f74:	4a14      	ldr	r2, [pc, #80]	@ (8001fc8 <HAL_GPIO_Init+0x354>)
 8001f76:	69bb      	ldr	r3, [r7, #24]
 8001f78:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f7a:	69fb      	ldr	r3, [r7, #28]
 8001f7c:	3301      	adds	r3, #1
 8001f7e:	61fb      	str	r3, [r7, #28]
 8001f80:	69fb      	ldr	r3, [r7, #28]
 8001f82:	2b0f      	cmp	r3, #15
 8001f84:	f67f ae84 	bls.w	8001c90 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f88:	bf00      	nop
 8001f8a:	bf00      	nop
 8001f8c:	3724      	adds	r7, #36	@ 0x24
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f94:	4770      	bx	lr
 8001f96:	bf00      	nop
 8001f98:	40023800 	.word	0x40023800
 8001f9c:	40013800 	.word	0x40013800
 8001fa0:	40020000 	.word	0x40020000
 8001fa4:	40020400 	.word	0x40020400
 8001fa8:	40020800 	.word	0x40020800
 8001fac:	40020c00 	.word	0x40020c00
 8001fb0:	40021000 	.word	0x40021000
 8001fb4:	40021400 	.word	0x40021400
 8001fb8:	40021800 	.word	0x40021800
 8001fbc:	40021c00 	.word	0x40021c00
 8001fc0:	40022000 	.word	0x40022000
 8001fc4:	40022400 	.word	0x40022400
 8001fc8:	40013c00 	.word	0x40013c00

08001fcc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b083      	sub	sp, #12
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
 8001fd4:	460b      	mov	r3, r1
 8001fd6:	807b      	strh	r3, [r7, #2]
 8001fd8:	4613      	mov	r3, r2
 8001fda:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001fdc:	787b      	ldrb	r3, [r7, #1]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d003      	beq.n	8001fea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001fe2:	887a      	ldrh	r2, [r7, #2]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001fe8:	e003      	b.n	8001ff2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001fea:	887b      	ldrh	r3, [r7, #2]
 8001fec:	041a      	lsls	r2, r3, #16
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	619a      	str	r2, [r3, #24]
}
 8001ff2:	bf00      	nop
 8001ff4:	370c      	adds	r7, #12
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr

08001ffe <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001ffe:	b480      	push	{r7}
 8002000:	b085      	sub	sp, #20
 8002002:	af00      	add	r7, sp, #0
 8002004:	6078      	str	r0, [r7, #4]
 8002006:	460b      	mov	r3, r1
 8002008:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	695b      	ldr	r3, [r3, #20]
 800200e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002010:	887a      	ldrh	r2, [r7, #2]
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	4013      	ands	r3, r2
 8002016:	041a      	lsls	r2, r3, #16
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	43d9      	mvns	r1, r3
 800201c:	887b      	ldrh	r3, [r7, #2]
 800201e:	400b      	ands	r3, r1
 8002020:	431a      	orrs	r2, r3
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	619a      	str	r2, [r3, #24]
}
 8002026:	bf00      	nop
 8002028:	3714      	adds	r7, #20
 800202a:	46bd      	mov	sp, r7
 800202c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002030:	4770      	bx	lr

08002032 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002032:	b580      	push	{r7, lr}
 8002034:	b086      	sub	sp, #24
 8002036:	af02      	add	r7, sp, #8
 8002038:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d101      	bne.n	8002044 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002040:	2301      	movs	r3, #1
 8002042:	e101      	b.n	8002248 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002050:	b2db      	uxtb	r3, r3
 8002052:	2b00      	cmp	r3, #0
 8002054:	d106      	bne.n	8002064 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2200      	movs	r2, #0
 800205a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800205e:	6878      	ldr	r0, [r7, #4]
 8002060:	f006 fe40 	bl	8008ce4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2203      	movs	r2, #3
 8002068:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800206c:	68bb      	ldr	r3, [r7, #8]
 800206e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002072:	d102      	bne.n	800207a <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2200      	movs	r2, #0
 8002078:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4618      	mov	r0, r3
 8002080:	f003 fa19 	bl	80054b6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6818      	ldr	r0, [r3, #0]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	7c1a      	ldrb	r2, [r3, #16]
 800208c:	f88d 2000 	strb.w	r2, [sp]
 8002090:	3304      	adds	r3, #4
 8002092:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002094:	f003 f8f8 	bl	8005288 <USB_CoreInit>
 8002098:	4603      	mov	r3, r0
 800209a:	2b00      	cmp	r3, #0
 800209c:	d005      	beq.n	80020aa <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2202      	movs	r2, #2
 80020a2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
 80020a8:	e0ce      	b.n	8002248 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	2100      	movs	r1, #0
 80020b0:	4618      	mov	r0, r3
 80020b2:	f003 fa11 	bl	80054d8 <USB_SetCurrentMode>
 80020b6:	4603      	mov	r3, r0
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d005      	beq.n	80020c8 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2202      	movs	r2, #2
 80020c0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80020c4:	2301      	movs	r3, #1
 80020c6:	e0bf      	b.n	8002248 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020c8:	2300      	movs	r3, #0
 80020ca:	73fb      	strb	r3, [r7, #15]
 80020cc:	e04a      	b.n	8002164 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80020ce:	7bfa      	ldrb	r2, [r7, #15]
 80020d0:	6879      	ldr	r1, [r7, #4]
 80020d2:	4613      	mov	r3, r2
 80020d4:	00db      	lsls	r3, r3, #3
 80020d6:	4413      	add	r3, r2
 80020d8:	009b      	lsls	r3, r3, #2
 80020da:	440b      	add	r3, r1
 80020dc:	3315      	adds	r3, #21
 80020de:	2201      	movs	r2, #1
 80020e0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80020e2:	7bfa      	ldrb	r2, [r7, #15]
 80020e4:	6879      	ldr	r1, [r7, #4]
 80020e6:	4613      	mov	r3, r2
 80020e8:	00db      	lsls	r3, r3, #3
 80020ea:	4413      	add	r3, r2
 80020ec:	009b      	lsls	r3, r3, #2
 80020ee:	440b      	add	r3, r1
 80020f0:	3314      	adds	r3, #20
 80020f2:	7bfa      	ldrb	r2, [r7, #15]
 80020f4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80020f6:	7bfa      	ldrb	r2, [r7, #15]
 80020f8:	7bfb      	ldrb	r3, [r7, #15]
 80020fa:	b298      	uxth	r0, r3
 80020fc:	6879      	ldr	r1, [r7, #4]
 80020fe:	4613      	mov	r3, r2
 8002100:	00db      	lsls	r3, r3, #3
 8002102:	4413      	add	r3, r2
 8002104:	009b      	lsls	r3, r3, #2
 8002106:	440b      	add	r3, r1
 8002108:	332e      	adds	r3, #46	@ 0x2e
 800210a:	4602      	mov	r2, r0
 800210c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800210e:	7bfa      	ldrb	r2, [r7, #15]
 8002110:	6879      	ldr	r1, [r7, #4]
 8002112:	4613      	mov	r3, r2
 8002114:	00db      	lsls	r3, r3, #3
 8002116:	4413      	add	r3, r2
 8002118:	009b      	lsls	r3, r3, #2
 800211a:	440b      	add	r3, r1
 800211c:	3318      	adds	r3, #24
 800211e:	2200      	movs	r2, #0
 8002120:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002122:	7bfa      	ldrb	r2, [r7, #15]
 8002124:	6879      	ldr	r1, [r7, #4]
 8002126:	4613      	mov	r3, r2
 8002128:	00db      	lsls	r3, r3, #3
 800212a:	4413      	add	r3, r2
 800212c:	009b      	lsls	r3, r3, #2
 800212e:	440b      	add	r3, r1
 8002130:	331c      	adds	r3, #28
 8002132:	2200      	movs	r2, #0
 8002134:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002136:	7bfa      	ldrb	r2, [r7, #15]
 8002138:	6879      	ldr	r1, [r7, #4]
 800213a:	4613      	mov	r3, r2
 800213c:	00db      	lsls	r3, r3, #3
 800213e:	4413      	add	r3, r2
 8002140:	009b      	lsls	r3, r3, #2
 8002142:	440b      	add	r3, r1
 8002144:	3320      	adds	r3, #32
 8002146:	2200      	movs	r2, #0
 8002148:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800214a:	7bfa      	ldrb	r2, [r7, #15]
 800214c:	6879      	ldr	r1, [r7, #4]
 800214e:	4613      	mov	r3, r2
 8002150:	00db      	lsls	r3, r3, #3
 8002152:	4413      	add	r3, r2
 8002154:	009b      	lsls	r3, r3, #2
 8002156:	440b      	add	r3, r1
 8002158:	3324      	adds	r3, #36	@ 0x24
 800215a:	2200      	movs	r2, #0
 800215c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800215e:	7bfb      	ldrb	r3, [r7, #15]
 8002160:	3301      	adds	r3, #1
 8002162:	73fb      	strb	r3, [r7, #15]
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	791b      	ldrb	r3, [r3, #4]
 8002168:	7bfa      	ldrb	r2, [r7, #15]
 800216a:	429a      	cmp	r2, r3
 800216c:	d3af      	bcc.n	80020ce <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800216e:	2300      	movs	r3, #0
 8002170:	73fb      	strb	r3, [r7, #15]
 8002172:	e044      	b.n	80021fe <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002174:	7bfa      	ldrb	r2, [r7, #15]
 8002176:	6879      	ldr	r1, [r7, #4]
 8002178:	4613      	mov	r3, r2
 800217a:	00db      	lsls	r3, r3, #3
 800217c:	4413      	add	r3, r2
 800217e:	009b      	lsls	r3, r3, #2
 8002180:	440b      	add	r3, r1
 8002182:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002186:	2200      	movs	r2, #0
 8002188:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800218a:	7bfa      	ldrb	r2, [r7, #15]
 800218c:	6879      	ldr	r1, [r7, #4]
 800218e:	4613      	mov	r3, r2
 8002190:	00db      	lsls	r3, r3, #3
 8002192:	4413      	add	r3, r2
 8002194:	009b      	lsls	r3, r3, #2
 8002196:	440b      	add	r3, r1
 8002198:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800219c:	7bfa      	ldrb	r2, [r7, #15]
 800219e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80021a0:	7bfa      	ldrb	r2, [r7, #15]
 80021a2:	6879      	ldr	r1, [r7, #4]
 80021a4:	4613      	mov	r3, r2
 80021a6:	00db      	lsls	r3, r3, #3
 80021a8:	4413      	add	r3, r2
 80021aa:	009b      	lsls	r3, r3, #2
 80021ac:	440b      	add	r3, r1
 80021ae:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80021b2:	2200      	movs	r2, #0
 80021b4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80021b6:	7bfa      	ldrb	r2, [r7, #15]
 80021b8:	6879      	ldr	r1, [r7, #4]
 80021ba:	4613      	mov	r3, r2
 80021bc:	00db      	lsls	r3, r3, #3
 80021be:	4413      	add	r3, r2
 80021c0:	009b      	lsls	r3, r3, #2
 80021c2:	440b      	add	r3, r1
 80021c4:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80021c8:	2200      	movs	r2, #0
 80021ca:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80021cc:	7bfa      	ldrb	r2, [r7, #15]
 80021ce:	6879      	ldr	r1, [r7, #4]
 80021d0:	4613      	mov	r3, r2
 80021d2:	00db      	lsls	r3, r3, #3
 80021d4:	4413      	add	r3, r2
 80021d6:	009b      	lsls	r3, r3, #2
 80021d8:	440b      	add	r3, r1
 80021da:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80021de:	2200      	movs	r2, #0
 80021e0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80021e2:	7bfa      	ldrb	r2, [r7, #15]
 80021e4:	6879      	ldr	r1, [r7, #4]
 80021e6:	4613      	mov	r3, r2
 80021e8:	00db      	lsls	r3, r3, #3
 80021ea:	4413      	add	r3, r2
 80021ec:	009b      	lsls	r3, r3, #2
 80021ee:	440b      	add	r3, r1
 80021f0:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80021f4:	2200      	movs	r2, #0
 80021f6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021f8:	7bfb      	ldrb	r3, [r7, #15]
 80021fa:	3301      	adds	r3, #1
 80021fc:	73fb      	strb	r3, [r7, #15]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	791b      	ldrb	r3, [r3, #4]
 8002202:	7bfa      	ldrb	r2, [r7, #15]
 8002204:	429a      	cmp	r2, r3
 8002206:	d3b5      	bcc.n	8002174 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6818      	ldr	r0, [r3, #0]
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	7c1a      	ldrb	r2, [r3, #16]
 8002210:	f88d 2000 	strb.w	r2, [sp]
 8002214:	3304      	adds	r3, #4
 8002216:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002218:	f003 f9aa 	bl	8005570 <USB_DevInit>
 800221c:	4603      	mov	r3, r0
 800221e:	2b00      	cmp	r3, #0
 8002220:	d005      	beq.n	800222e <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2202      	movs	r2, #2
 8002226:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	e00c      	b.n	8002248 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2200      	movs	r2, #0
 8002232:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2201      	movs	r2, #1
 8002238:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4618      	mov	r0, r3
 8002242:	f004 f9ee 	bl	8006622 <USB_DevDisconnect>

  return HAL_OK;
 8002246:	2300      	movs	r3, #0
}
 8002248:	4618      	mov	r0, r3
 800224a:	3710      	adds	r7, #16
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}

08002250 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b084      	sub	sp, #16
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002264:	2b01      	cmp	r3, #1
 8002266:	d101      	bne.n	800226c <HAL_PCD_Start+0x1c>
 8002268:	2302      	movs	r3, #2
 800226a:	e022      	b.n	80022b2 <HAL_PCD_Start+0x62>
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2201      	movs	r2, #1
 8002270:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	68db      	ldr	r3, [r3, #12]
 8002278:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800227c:	2b00      	cmp	r3, #0
 800227e:	d009      	beq.n	8002294 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002284:	2b01      	cmp	r3, #1
 8002286:	d105      	bne.n	8002294 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800228c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4618      	mov	r0, r3
 800229a:	f003 f8fb 	bl	8005494 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4618      	mov	r0, r3
 80022a4:	f004 f99c 	bl	80065e0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2200      	movs	r2, #0
 80022ac:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80022b0:	2300      	movs	r3, #0
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	3710      	adds	r7, #16
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}

080022ba <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80022ba:	b590      	push	{r4, r7, lr}
 80022bc:	b08d      	sub	sp, #52	@ 0x34
 80022be:	af00      	add	r7, sp, #0
 80022c0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80022c8:	6a3b      	ldr	r3, [r7, #32]
 80022ca:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4618      	mov	r0, r3
 80022d2:	f004 fa5a 	bl	800678a <USB_GetMode>
 80022d6:	4603      	mov	r3, r0
 80022d8:	2b00      	cmp	r3, #0
 80022da:	f040 848c 	bne.w	8002bf6 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4618      	mov	r0, r3
 80022e4:	f004 f9be 	bl	8006664 <USB_ReadInterrupts>
 80022e8:	4603      	mov	r3, r0
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	f000 8482 	beq.w	8002bf4 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80022f0:	69fb      	ldr	r3, [r7, #28]
 80022f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80022f6:	689b      	ldr	r3, [r3, #8]
 80022f8:	0a1b      	lsrs	r3, r3, #8
 80022fa:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4618      	mov	r0, r3
 800230a:	f004 f9ab 	bl	8006664 <USB_ReadInterrupts>
 800230e:	4603      	mov	r3, r0
 8002310:	f003 0302 	and.w	r3, r3, #2
 8002314:	2b02      	cmp	r3, #2
 8002316:	d107      	bne.n	8002328 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	695a      	ldr	r2, [r3, #20]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f002 0202 	and.w	r2, r2, #2
 8002326:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4618      	mov	r0, r3
 800232e:	f004 f999 	bl	8006664 <USB_ReadInterrupts>
 8002332:	4603      	mov	r3, r0
 8002334:	f003 0310 	and.w	r3, r3, #16
 8002338:	2b10      	cmp	r3, #16
 800233a:	d161      	bne.n	8002400 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	699a      	ldr	r2, [r3, #24]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f022 0210 	bic.w	r2, r2, #16
 800234a:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800234c:	6a3b      	ldr	r3, [r7, #32]
 800234e:	6a1b      	ldr	r3, [r3, #32]
 8002350:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002352:	69bb      	ldr	r3, [r7, #24]
 8002354:	f003 020f 	and.w	r2, r3, #15
 8002358:	4613      	mov	r3, r2
 800235a:	00db      	lsls	r3, r3, #3
 800235c:	4413      	add	r3, r2
 800235e:	009b      	lsls	r3, r3, #2
 8002360:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002364:	687a      	ldr	r2, [r7, #4]
 8002366:	4413      	add	r3, r2
 8002368:	3304      	adds	r3, #4
 800236a:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800236c:	69bb      	ldr	r3, [r7, #24]
 800236e:	0c5b      	lsrs	r3, r3, #17
 8002370:	f003 030f 	and.w	r3, r3, #15
 8002374:	2b02      	cmp	r3, #2
 8002376:	d124      	bne.n	80023c2 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002378:	69ba      	ldr	r2, [r7, #24]
 800237a:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800237e:	4013      	ands	r3, r2
 8002380:	2b00      	cmp	r3, #0
 8002382:	d035      	beq.n	80023f0 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002388:	69bb      	ldr	r3, [r7, #24]
 800238a:	091b      	lsrs	r3, r3, #4
 800238c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800238e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002392:	b29b      	uxth	r3, r3
 8002394:	461a      	mov	r2, r3
 8002396:	6a38      	ldr	r0, [r7, #32]
 8002398:	f003 ffd0 	bl	800633c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	68da      	ldr	r2, [r3, #12]
 80023a0:	69bb      	ldr	r3, [r7, #24]
 80023a2:	091b      	lsrs	r3, r3, #4
 80023a4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80023a8:	441a      	add	r2, r3
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	695a      	ldr	r2, [r3, #20]
 80023b2:	69bb      	ldr	r3, [r7, #24]
 80023b4:	091b      	lsrs	r3, r3, #4
 80023b6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80023ba:	441a      	add	r2, r3
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	615a      	str	r2, [r3, #20]
 80023c0:	e016      	b.n	80023f0 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80023c2:	69bb      	ldr	r3, [r7, #24]
 80023c4:	0c5b      	lsrs	r3, r3, #17
 80023c6:	f003 030f 	and.w	r3, r3, #15
 80023ca:	2b06      	cmp	r3, #6
 80023cc:	d110      	bne.n	80023f0 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80023d4:	2208      	movs	r2, #8
 80023d6:	4619      	mov	r1, r3
 80023d8:	6a38      	ldr	r0, [r7, #32]
 80023da:	f003 ffaf 	bl	800633c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80023de:	697b      	ldr	r3, [r7, #20]
 80023e0:	695a      	ldr	r2, [r3, #20]
 80023e2:	69bb      	ldr	r3, [r7, #24]
 80023e4:	091b      	lsrs	r3, r3, #4
 80023e6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80023ea:	441a      	add	r2, r3
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	699a      	ldr	r2, [r3, #24]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f042 0210 	orr.w	r2, r2, #16
 80023fe:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4618      	mov	r0, r3
 8002406:	f004 f92d 	bl	8006664 <USB_ReadInterrupts>
 800240a:	4603      	mov	r3, r0
 800240c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002410:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002414:	f040 80a7 	bne.w	8002566 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002418:	2300      	movs	r3, #0
 800241a:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4618      	mov	r0, r3
 8002422:	f004 f932 	bl	800668a <USB_ReadDevAllOutEpInterrupt>
 8002426:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8002428:	e099      	b.n	800255e <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800242a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800242c:	f003 0301 	and.w	r3, r3, #1
 8002430:	2b00      	cmp	r3, #0
 8002432:	f000 808e 	beq.w	8002552 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800243c:	b2d2      	uxtb	r2, r2
 800243e:	4611      	mov	r1, r2
 8002440:	4618      	mov	r0, r3
 8002442:	f004 f956 	bl	80066f2 <USB_ReadDevOutEPInterrupt>
 8002446:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002448:	693b      	ldr	r3, [r7, #16]
 800244a:	f003 0301 	and.w	r3, r3, #1
 800244e:	2b00      	cmp	r3, #0
 8002450:	d00c      	beq.n	800246c <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002452:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002454:	015a      	lsls	r2, r3, #5
 8002456:	69fb      	ldr	r3, [r7, #28]
 8002458:	4413      	add	r3, r2
 800245a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800245e:	461a      	mov	r2, r3
 8002460:	2301      	movs	r3, #1
 8002462:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002464:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002466:	6878      	ldr	r0, [r7, #4]
 8002468:	f000 fea2 	bl	80031b0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800246c:	693b      	ldr	r3, [r7, #16]
 800246e:	f003 0308 	and.w	r3, r3, #8
 8002472:	2b00      	cmp	r3, #0
 8002474:	d00c      	beq.n	8002490 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002476:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002478:	015a      	lsls	r2, r3, #5
 800247a:	69fb      	ldr	r3, [r7, #28]
 800247c:	4413      	add	r3, r2
 800247e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002482:	461a      	mov	r2, r3
 8002484:	2308      	movs	r3, #8
 8002486:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002488:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800248a:	6878      	ldr	r0, [r7, #4]
 800248c:	f000 ff78 	bl	8003380 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	f003 0310 	and.w	r3, r3, #16
 8002496:	2b00      	cmp	r3, #0
 8002498:	d008      	beq.n	80024ac <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800249a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800249c:	015a      	lsls	r2, r3, #5
 800249e:	69fb      	ldr	r3, [r7, #28]
 80024a0:	4413      	add	r3, r2
 80024a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80024a6:	461a      	mov	r2, r3
 80024a8:	2310      	movs	r3, #16
 80024aa:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	f003 0302 	and.w	r3, r3, #2
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d030      	beq.n	8002518 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80024b6:	6a3b      	ldr	r3, [r7, #32]
 80024b8:	695b      	ldr	r3, [r3, #20]
 80024ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024be:	2b80      	cmp	r3, #128	@ 0x80
 80024c0:	d109      	bne.n	80024d6 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80024c2:	69fb      	ldr	r3, [r7, #28]
 80024c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	69fa      	ldr	r2, [r7, #28]
 80024cc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80024d0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80024d4:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80024d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80024d8:	4613      	mov	r3, r2
 80024da:	00db      	lsls	r3, r3, #3
 80024dc:	4413      	add	r3, r2
 80024de:	009b      	lsls	r3, r3, #2
 80024e0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80024e4:	687a      	ldr	r2, [r7, #4]
 80024e6:	4413      	add	r3, r2
 80024e8:	3304      	adds	r3, #4
 80024ea:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	78db      	ldrb	r3, [r3, #3]
 80024f0:	2b01      	cmp	r3, #1
 80024f2:	d108      	bne.n	8002506 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	2200      	movs	r2, #0
 80024f8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80024fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024fc:	b2db      	uxtb	r3, r3
 80024fe:	4619      	mov	r1, r3
 8002500:	6878      	ldr	r0, [r7, #4]
 8002502:	f006 fcf5 	bl	8008ef0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002506:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002508:	015a      	lsls	r2, r3, #5
 800250a:	69fb      	ldr	r3, [r7, #28]
 800250c:	4413      	add	r3, r2
 800250e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002512:	461a      	mov	r2, r3
 8002514:	2302      	movs	r3, #2
 8002516:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	f003 0320 	and.w	r3, r3, #32
 800251e:	2b00      	cmp	r3, #0
 8002520:	d008      	beq.n	8002534 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002522:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002524:	015a      	lsls	r2, r3, #5
 8002526:	69fb      	ldr	r3, [r7, #28]
 8002528:	4413      	add	r3, r2
 800252a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800252e:	461a      	mov	r2, r3
 8002530:	2320      	movs	r3, #32
 8002532:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002534:	693b      	ldr	r3, [r7, #16]
 8002536:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800253a:	2b00      	cmp	r3, #0
 800253c:	d009      	beq.n	8002552 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800253e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002540:	015a      	lsls	r2, r3, #5
 8002542:	69fb      	ldr	r3, [r7, #28]
 8002544:	4413      	add	r3, r2
 8002546:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800254a:	461a      	mov	r2, r3
 800254c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002550:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002554:	3301      	adds	r3, #1
 8002556:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002558:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800255a:	085b      	lsrs	r3, r3, #1
 800255c:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800255e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002560:	2b00      	cmp	r3, #0
 8002562:	f47f af62 	bne.w	800242a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4618      	mov	r0, r3
 800256c:	f004 f87a 	bl	8006664 <USB_ReadInterrupts>
 8002570:	4603      	mov	r3, r0
 8002572:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002576:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800257a:	f040 80db 	bne.w	8002734 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4618      	mov	r0, r3
 8002584:	f004 f89b 	bl	80066be <USB_ReadDevAllInEpInterrupt>
 8002588:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800258a:	2300      	movs	r3, #0
 800258c:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800258e:	e0cd      	b.n	800272c <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002590:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002592:	f003 0301 	and.w	r3, r3, #1
 8002596:	2b00      	cmp	r3, #0
 8002598:	f000 80c2 	beq.w	8002720 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80025a2:	b2d2      	uxtb	r2, r2
 80025a4:	4611      	mov	r1, r2
 80025a6:	4618      	mov	r0, r3
 80025a8:	f004 f8c1 	bl	800672e <USB_ReadDevInEPInterrupt>
 80025ac:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80025ae:	693b      	ldr	r3, [r7, #16]
 80025b0:	f003 0301 	and.w	r3, r3, #1
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d057      	beq.n	8002668 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80025b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025ba:	f003 030f 	and.w	r3, r3, #15
 80025be:	2201      	movs	r2, #1
 80025c0:	fa02 f303 	lsl.w	r3, r2, r3
 80025c4:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80025c6:	69fb      	ldr	r3, [r7, #28]
 80025c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80025cc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	43db      	mvns	r3, r3
 80025d2:	69f9      	ldr	r1, [r7, #28]
 80025d4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80025d8:	4013      	ands	r3, r2
 80025da:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80025dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025de:	015a      	lsls	r2, r3, #5
 80025e0:	69fb      	ldr	r3, [r7, #28]
 80025e2:	4413      	add	r3, r2
 80025e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80025e8:	461a      	mov	r2, r3
 80025ea:	2301      	movs	r3, #1
 80025ec:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	799b      	ldrb	r3, [r3, #6]
 80025f2:	2b01      	cmp	r3, #1
 80025f4:	d132      	bne.n	800265c <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80025f6:	6879      	ldr	r1, [r7, #4]
 80025f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80025fa:	4613      	mov	r3, r2
 80025fc:	00db      	lsls	r3, r3, #3
 80025fe:	4413      	add	r3, r2
 8002600:	009b      	lsls	r3, r3, #2
 8002602:	440b      	add	r3, r1
 8002604:	3320      	adds	r3, #32
 8002606:	6819      	ldr	r1, [r3, #0]
 8002608:	6878      	ldr	r0, [r7, #4]
 800260a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800260c:	4613      	mov	r3, r2
 800260e:	00db      	lsls	r3, r3, #3
 8002610:	4413      	add	r3, r2
 8002612:	009b      	lsls	r3, r3, #2
 8002614:	4403      	add	r3, r0
 8002616:	331c      	adds	r3, #28
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4419      	add	r1, r3
 800261c:	6878      	ldr	r0, [r7, #4]
 800261e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002620:	4613      	mov	r3, r2
 8002622:	00db      	lsls	r3, r3, #3
 8002624:	4413      	add	r3, r2
 8002626:	009b      	lsls	r3, r3, #2
 8002628:	4403      	add	r3, r0
 800262a:	3320      	adds	r3, #32
 800262c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800262e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002630:	2b00      	cmp	r3, #0
 8002632:	d113      	bne.n	800265c <HAL_PCD_IRQHandler+0x3a2>
 8002634:	6879      	ldr	r1, [r7, #4]
 8002636:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002638:	4613      	mov	r3, r2
 800263a:	00db      	lsls	r3, r3, #3
 800263c:	4413      	add	r3, r2
 800263e:	009b      	lsls	r3, r3, #2
 8002640:	440b      	add	r3, r1
 8002642:	3324      	adds	r3, #36	@ 0x24
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d108      	bne.n	800265c <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6818      	ldr	r0, [r3, #0]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002654:	461a      	mov	r2, r3
 8002656:	2101      	movs	r1, #1
 8002658:	f004 f8c8 	bl	80067ec <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800265c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800265e:	b2db      	uxtb	r3, r3
 8002660:	4619      	mov	r1, r3
 8002662:	6878      	ldr	r0, [r7, #4]
 8002664:	f006 fbbf 	bl	8008de6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	f003 0308 	and.w	r3, r3, #8
 800266e:	2b00      	cmp	r3, #0
 8002670:	d008      	beq.n	8002684 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002672:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002674:	015a      	lsls	r2, r3, #5
 8002676:	69fb      	ldr	r3, [r7, #28]
 8002678:	4413      	add	r3, r2
 800267a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800267e:	461a      	mov	r2, r3
 8002680:	2308      	movs	r3, #8
 8002682:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002684:	693b      	ldr	r3, [r7, #16]
 8002686:	f003 0310 	and.w	r3, r3, #16
 800268a:	2b00      	cmp	r3, #0
 800268c:	d008      	beq.n	80026a0 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800268e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002690:	015a      	lsls	r2, r3, #5
 8002692:	69fb      	ldr	r3, [r7, #28]
 8002694:	4413      	add	r3, r2
 8002696:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800269a:	461a      	mov	r2, r3
 800269c:	2310      	movs	r3, #16
 800269e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80026a0:	693b      	ldr	r3, [r7, #16]
 80026a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d008      	beq.n	80026bc <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80026aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026ac:	015a      	lsls	r2, r3, #5
 80026ae:	69fb      	ldr	r3, [r7, #28]
 80026b0:	4413      	add	r3, r2
 80026b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80026b6:	461a      	mov	r2, r3
 80026b8:	2340      	movs	r3, #64	@ 0x40
 80026ba:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80026bc:	693b      	ldr	r3, [r7, #16]
 80026be:	f003 0302 	and.w	r3, r3, #2
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d023      	beq.n	800270e <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80026c6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80026c8:	6a38      	ldr	r0, [r7, #32]
 80026ca:	f003 f8b5 	bl	8005838 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80026ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80026d0:	4613      	mov	r3, r2
 80026d2:	00db      	lsls	r3, r3, #3
 80026d4:	4413      	add	r3, r2
 80026d6:	009b      	lsls	r3, r3, #2
 80026d8:	3310      	adds	r3, #16
 80026da:	687a      	ldr	r2, [r7, #4]
 80026dc:	4413      	add	r3, r2
 80026de:	3304      	adds	r3, #4
 80026e0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	78db      	ldrb	r3, [r3, #3]
 80026e6:	2b01      	cmp	r3, #1
 80026e8:	d108      	bne.n	80026fc <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80026ea:	697b      	ldr	r3, [r7, #20]
 80026ec:	2200      	movs	r2, #0
 80026ee:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80026f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026f2:	b2db      	uxtb	r3, r3
 80026f4:	4619      	mov	r1, r3
 80026f6:	6878      	ldr	r0, [r7, #4]
 80026f8:	f006 fc0c 	bl	8008f14 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80026fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026fe:	015a      	lsls	r2, r3, #5
 8002700:	69fb      	ldr	r3, [r7, #28]
 8002702:	4413      	add	r3, r2
 8002704:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002708:	461a      	mov	r2, r3
 800270a:	2302      	movs	r3, #2
 800270c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002714:	2b00      	cmp	r3, #0
 8002716:	d003      	beq.n	8002720 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002718:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800271a:	6878      	ldr	r0, [r7, #4]
 800271c:	f000 fcbb 	bl	8003096 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002720:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002722:	3301      	adds	r3, #1
 8002724:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002726:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002728:	085b      	lsrs	r3, r3, #1
 800272a:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800272c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800272e:	2b00      	cmp	r3, #0
 8002730:	f47f af2e 	bne.w	8002590 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4618      	mov	r0, r3
 800273a:	f003 ff93 	bl	8006664 <USB_ReadInterrupts>
 800273e:	4603      	mov	r3, r0
 8002740:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002744:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002748:	d122      	bne.n	8002790 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800274a:	69fb      	ldr	r3, [r7, #28]
 800274c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	69fa      	ldr	r2, [r7, #28]
 8002754:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002758:	f023 0301 	bic.w	r3, r3, #1
 800275c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8002764:	2b01      	cmp	r3, #1
 8002766:	d108      	bne.n	800277a <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2200      	movs	r2, #0
 800276c:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002770:	2100      	movs	r1, #0
 8002772:	6878      	ldr	r0, [r7, #4]
 8002774:	f000 fea2 	bl	80034bc <HAL_PCDEx_LPM_Callback>
 8002778:	e002      	b.n	8002780 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800277a:	6878      	ldr	r0, [r7, #4]
 800277c:	f006 fbaa 	bl	8008ed4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	695a      	ldr	r2, [r3, #20]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800278e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4618      	mov	r0, r3
 8002796:	f003 ff65 	bl	8006664 <USB_ReadInterrupts>
 800279a:	4603      	mov	r3, r0
 800279c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80027a0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80027a4:	d112      	bne.n	80027cc <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80027a6:	69fb      	ldr	r3, [r7, #28]
 80027a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	f003 0301 	and.w	r3, r3, #1
 80027b2:	2b01      	cmp	r3, #1
 80027b4:	d102      	bne.n	80027bc <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80027b6:	6878      	ldr	r0, [r7, #4]
 80027b8:	f006 fb66 	bl	8008e88 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	695a      	ldr	r2, [r3, #20]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80027ca:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4618      	mov	r0, r3
 80027d2:	f003 ff47 	bl	8006664 <USB_ReadInterrupts>
 80027d6:	4603      	mov	r3, r0
 80027d8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80027dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80027e0:	f040 80b7 	bne.w	8002952 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80027e4:	69fb      	ldr	r3, [r7, #28]
 80027e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	69fa      	ldr	r2, [r7, #28]
 80027ee:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80027f2:	f023 0301 	bic.w	r3, r3, #1
 80027f6:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	2110      	movs	r1, #16
 80027fe:	4618      	mov	r0, r3
 8002800:	f003 f81a 	bl	8005838 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002804:	2300      	movs	r3, #0
 8002806:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002808:	e046      	b.n	8002898 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800280a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800280c:	015a      	lsls	r2, r3, #5
 800280e:	69fb      	ldr	r3, [r7, #28]
 8002810:	4413      	add	r3, r2
 8002812:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002816:	461a      	mov	r2, r3
 8002818:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800281c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800281e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002820:	015a      	lsls	r2, r3, #5
 8002822:	69fb      	ldr	r3, [r7, #28]
 8002824:	4413      	add	r3, r2
 8002826:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800282e:	0151      	lsls	r1, r2, #5
 8002830:	69fa      	ldr	r2, [r7, #28]
 8002832:	440a      	add	r2, r1
 8002834:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8002838:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800283c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800283e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002840:	015a      	lsls	r2, r3, #5
 8002842:	69fb      	ldr	r3, [r7, #28]
 8002844:	4413      	add	r3, r2
 8002846:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800284a:	461a      	mov	r2, r3
 800284c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002850:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002852:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002854:	015a      	lsls	r2, r3, #5
 8002856:	69fb      	ldr	r3, [r7, #28]
 8002858:	4413      	add	r3, r2
 800285a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002862:	0151      	lsls	r1, r2, #5
 8002864:	69fa      	ldr	r2, [r7, #28]
 8002866:	440a      	add	r2, r1
 8002868:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800286c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002870:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002872:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002874:	015a      	lsls	r2, r3, #5
 8002876:	69fb      	ldr	r3, [r7, #28]
 8002878:	4413      	add	r3, r2
 800287a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002882:	0151      	lsls	r1, r2, #5
 8002884:	69fa      	ldr	r2, [r7, #28]
 8002886:	440a      	add	r2, r1
 8002888:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800288c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002890:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002892:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002894:	3301      	adds	r3, #1
 8002896:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	791b      	ldrb	r3, [r3, #4]
 800289c:	461a      	mov	r2, r3
 800289e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d3b2      	bcc.n	800280a <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80028a4:	69fb      	ldr	r3, [r7, #28]
 80028a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80028aa:	69db      	ldr	r3, [r3, #28]
 80028ac:	69fa      	ldr	r2, [r7, #28]
 80028ae:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80028b2:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80028b6:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	7bdb      	ldrb	r3, [r3, #15]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d016      	beq.n	80028ee <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80028c0:	69fb      	ldr	r3, [r7, #28]
 80028c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80028c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80028ca:	69fa      	ldr	r2, [r7, #28]
 80028cc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80028d0:	f043 030b 	orr.w	r3, r3, #11
 80028d4:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80028d8:	69fb      	ldr	r3, [r7, #28]
 80028da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80028de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028e0:	69fa      	ldr	r2, [r7, #28]
 80028e2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80028e6:	f043 030b 	orr.w	r3, r3, #11
 80028ea:	6453      	str	r3, [r2, #68]	@ 0x44
 80028ec:	e015      	b.n	800291a <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80028ee:	69fb      	ldr	r3, [r7, #28]
 80028f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80028f4:	695b      	ldr	r3, [r3, #20]
 80028f6:	69fa      	ldr	r2, [r7, #28]
 80028f8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80028fc:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002900:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8002904:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002906:	69fb      	ldr	r3, [r7, #28]
 8002908:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800290c:	691b      	ldr	r3, [r3, #16]
 800290e:	69fa      	ldr	r2, [r7, #28]
 8002910:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002914:	f043 030b 	orr.w	r3, r3, #11
 8002918:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800291a:	69fb      	ldr	r3, [r7, #28]
 800291c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	69fa      	ldr	r2, [r7, #28]
 8002924:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002928:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800292c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6818      	ldr	r0, [r3, #0]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800293c:	461a      	mov	r2, r3
 800293e:	f003 ff55 	bl	80067ec <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	695a      	ldr	r2, [r3, #20]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8002950:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4618      	mov	r0, r3
 8002958:	f003 fe84 	bl	8006664 <USB_ReadInterrupts>
 800295c:	4603      	mov	r3, r0
 800295e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002962:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002966:	d123      	bne.n	80029b0 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4618      	mov	r0, r3
 800296e:	f003 ff1a 	bl	80067a6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4618      	mov	r0, r3
 8002978:	f002 ffd7 	bl	800592a <USB_GetDevSpeed>
 800297c:	4603      	mov	r3, r0
 800297e:	461a      	mov	r2, r3
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681c      	ldr	r4, [r3, #0]
 8002988:	f001 fa70 	bl	8003e6c <HAL_RCC_GetHCLKFreq>
 800298c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002992:	461a      	mov	r2, r3
 8002994:	4620      	mov	r0, r4
 8002996:	f002 fcdb 	bl	8005350 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800299a:	6878      	ldr	r0, [r7, #4]
 800299c:	f006 fa4b 	bl	8008e36 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	695a      	ldr	r2, [r3, #20]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80029ae:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4618      	mov	r0, r3
 80029b6:	f003 fe55 	bl	8006664 <USB_ReadInterrupts>
 80029ba:	4603      	mov	r3, r0
 80029bc:	f003 0308 	and.w	r3, r3, #8
 80029c0:	2b08      	cmp	r3, #8
 80029c2:	d10a      	bne.n	80029da <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80029c4:	6878      	ldr	r0, [r7, #4]
 80029c6:	f006 fa28 	bl	8008e1a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	695a      	ldr	r2, [r3, #20]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f002 0208 	and.w	r2, r2, #8
 80029d8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4618      	mov	r0, r3
 80029e0:	f003 fe40 	bl	8006664 <USB_ReadInterrupts>
 80029e4:	4603      	mov	r3, r0
 80029e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029ea:	2b80      	cmp	r3, #128	@ 0x80
 80029ec:	d123      	bne.n	8002a36 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80029ee:	6a3b      	ldr	r3, [r7, #32]
 80029f0:	699b      	ldr	r3, [r3, #24]
 80029f2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80029f6:	6a3b      	ldr	r3, [r7, #32]
 80029f8:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80029fa:	2301      	movs	r3, #1
 80029fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80029fe:	e014      	b.n	8002a2a <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002a00:	6879      	ldr	r1, [r7, #4]
 8002a02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a04:	4613      	mov	r3, r2
 8002a06:	00db      	lsls	r3, r3, #3
 8002a08:	4413      	add	r3, r2
 8002a0a:	009b      	lsls	r3, r3, #2
 8002a0c:	440b      	add	r3, r1
 8002a0e:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002a12:	781b      	ldrb	r3, [r3, #0]
 8002a14:	2b01      	cmp	r3, #1
 8002a16:	d105      	bne.n	8002a24 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002a18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a1a:	b2db      	uxtb	r3, r3
 8002a1c:	4619      	mov	r1, r3
 8002a1e:	6878      	ldr	r0, [r7, #4]
 8002a20:	f000 fb08 	bl	8003034 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002a24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a26:	3301      	adds	r3, #1
 8002a28:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	791b      	ldrb	r3, [r3, #4]
 8002a2e:	461a      	mov	r2, r3
 8002a30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d3e4      	bcc.n	8002a00 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f003 fe12 	bl	8006664 <USB_ReadInterrupts>
 8002a40:	4603      	mov	r3, r0
 8002a42:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002a46:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002a4a:	d13c      	bne.n	8002ac6 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a50:	e02b      	b.n	8002aaa <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002a52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a54:	015a      	lsls	r2, r3, #5
 8002a56:	69fb      	ldr	r3, [r7, #28]
 8002a58:	4413      	add	r3, r2
 8002a5a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002a62:	6879      	ldr	r1, [r7, #4]
 8002a64:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a66:	4613      	mov	r3, r2
 8002a68:	00db      	lsls	r3, r3, #3
 8002a6a:	4413      	add	r3, r2
 8002a6c:	009b      	lsls	r3, r3, #2
 8002a6e:	440b      	add	r3, r1
 8002a70:	3318      	adds	r3, #24
 8002a72:	781b      	ldrb	r3, [r3, #0]
 8002a74:	2b01      	cmp	r3, #1
 8002a76:	d115      	bne.n	8002aa4 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002a78:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	da12      	bge.n	8002aa4 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002a7e:	6879      	ldr	r1, [r7, #4]
 8002a80:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a82:	4613      	mov	r3, r2
 8002a84:	00db      	lsls	r3, r3, #3
 8002a86:	4413      	add	r3, r2
 8002a88:	009b      	lsls	r3, r3, #2
 8002a8a:	440b      	add	r3, r1
 8002a8c:	3317      	adds	r3, #23
 8002a8e:	2201      	movs	r2, #1
 8002a90:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002a92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a94:	b2db      	uxtb	r3, r3
 8002a96:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002a9a:	b2db      	uxtb	r3, r3
 8002a9c:	4619      	mov	r1, r3
 8002a9e:	6878      	ldr	r0, [r7, #4]
 8002aa0:	f000 fac8 	bl	8003034 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002aa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aa6:	3301      	adds	r3, #1
 8002aa8:	627b      	str	r3, [r7, #36]	@ 0x24
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	791b      	ldrb	r3, [r3, #4]
 8002aae:	461a      	mov	r2, r3
 8002ab0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d3cd      	bcc.n	8002a52 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	695a      	ldr	r2, [r3, #20]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8002ac4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4618      	mov	r0, r3
 8002acc:	f003 fdca 	bl	8006664 <USB_ReadInterrupts>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002ad6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002ada:	d156      	bne.n	8002b8a <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002adc:	2301      	movs	r3, #1
 8002ade:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ae0:	e045      	b.n	8002b6e <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002ae2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ae4:	015a      	lsls	r2, r3, #5
 8002ae6:	69fb      	ldr	r3, [r7, #28]
 8002ae8:	4413      	add	r3, r2
 8002aea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002af2:	6879      	ldr	r1, [r7, #4]
 8002af4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002af6:	4613      	mov	r3, r2
 8002af8:	00db      	lsls	r3, r3, #3
 8002afa:	4413      	add	r3, r2
 8002afc:	009b      	lsls	r3, r3, #2
 8002afe:	440b      	add	r3, r1
 8002b00:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002b04:	781b      	ldrb	r3, [r3, #0]
 8002b06:	2b01      	cmp	r3, #1
 8002b08:	d12e      	bne.n	8002b68 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002b0a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	da2b      	bge.n	8002b68 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002b10:	69bb      	ldr	r3, [r7, #24]
 8002b12:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8002b1c:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002b20:	429a      	cmp	r2, r3
 8002b22:	d121      	bne.n	8002b68 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002b24:	6879      	ldr	r1, [r7, #4]
 8002b26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b28:	4613      	mov	r3, r2
 8002b2a:	00db      	lsls	r3, r3, #3
 8002b2c:	4413      	add	r3, r2
 8002b2e:	009b      	lsls	r3, r3, #2
 8002b30:	440b      	add	r3, r1
 8002b32:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002b36:	2201      	movs	r2, #1
 8002b38:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002b3a:	6a3b      	ldr	r3, [r7, #32]
 8002b3c:	699b      	ldr	r3, [r3, #24]
 8002b3e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002b42:	6a3b      	ldr	r3, [r7, #32]
 8002b44:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002b46:	6a3b      	ldr	r3, [r7, #32]
 8002b48:	695b      	ldr	r3, [r3, #20]
 8002b4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d10a      	bne.n	8002b68 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002b52:	69fb      	ldr	r3, [r7, #28]
 8002b54:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	69fa      	ldr	r2, [r7, #28]
 8002b5c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002b60:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002b64:	6053      	str	r3, [r2, #4]
            break;
 8002b66:	e008      	b.n	8002b7a <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002b68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b6a:	3301      	adds	r3, #1
 8002b6c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	791b      	ldrb	r3, [r3, #4]
 8002b72:	461a      	mov	r2, r3
 8002b74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d3b3      	bcc.n	8002ae2 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	695a      	ldr	r2, [r3, #20]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8002b88:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f003 fd68 	bl	8006664 <USB_ReadInterrupts>
 8002b94:	4603      	mov	r3, r0
 8002b96:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002b9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b9e:	d10a      	bne.n	8002bb6 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002ba0:	6878      	ldr	r0, [r7, #4]
 8002ba2:	f006 f9c9 	bl	8008f38 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	695a      	ldr	r2, [r3, #20]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8002bb4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f003 fd52 	bl	8006664 <USB_ReadInterrupts>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	f003 0304 	and.w	r3, r3, #4
 8002bc6:	2b04      	cmp	r3, #4
 8002bc8:	d115      	bne.n	8002bf6 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002bd2:	69bb      	ldr	r3, [r7, #24]
 8002bd4:	f003 0304 	and.w	r3, r3, #4
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d002      	beq.n	8002be2 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002bdc:	6878      	ldr	r0, [r7, #4]
 8002bde:	f006 f9b9 	bl	8008f54 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	6859      	ldr	r1, [r3, #4]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	69ba      	ldr	r2, [r7, #24]
 8002bee:	430a      	orrs	r2, r1
 8002bf0:	605a      	str	r2, [r3, #4]
 8002bf2:	e000      	b.n	8002bf6 <HAL_PCD_IRQHandler+0x93c>
      return;
 8002bf4:	bf00      	nop
    }
  }
}
 8002bf6:	3734      	adds	r7, #52	@ 0x34
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bd90      	pop	{r4, r7, pc}

08002bfc <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b082      	sub	sp, #8
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
 8002c04:	460b      	mov	r3, r1
 8002c06:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002c0e:	2b01      	cmp	r3, #1
 8002c10:	d101      	bne.n	8002c16 <HAL_PCD_SetAddress+0x1a>
 8002c12:	2302      	movs	r3, #2
 8002c14:	e012      	b.n	8002c3c <HAL_PCD_SetAddress+0x40>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2201      	movs	r2, #1
 8002c1a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	78fa      	ldrb	r2, [r7, #3]
 8002c22:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	78fa      	ldrb	r2, [r7, #3]
 8002c2a:	4611      	mov	r1, r2
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f003 fcb1 	bl	8006594 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2200      	movs	r2, #0
 8002c36:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002c3a:	2300      	movs	r3, #0
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	3708      	adds	r7, #8
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd80      	pop	{r7, pc}

08002c44 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b084      	sub	sp, #16
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
 8002c4c:	4608      	mov	r0, r1
 8002c4e:	4611      	mov	r1, r2
 8002c50:	461a      	mov	r2, r3
 8002c52:	4603      	mov	r3, r0
 8002c54:	70fb      	strb	r3, [r7, #3]
 8002c56:	460b      	mov	r3, r1
 8002c58:	803b      	strh	r3, [r7, #0]
 8002c5a:	4613      	mov	r3, r2
 8002c5c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002c62:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	da0f      	bge.n	8002c8a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c6a:	78fb      	ldrb	r3, [r7, #3]
 8002c6c:	f003 020f 	and.w	r2, r3, #15
 8002c70:	4613      	mov	r3, r2
 8002c72:	00db      	lsls	r3, r3, #3
 8002c74:	4413      	add	r3, r2
 8002c76:	009b      	lsls	r3, r3, #2
 8002c78:	3310      	adds	r3, #16
 8002c7a:	687a      	ldr	r2, [r7, #4]
 8002c7c:	4413      	add	r3, r2
 8002c7e:	3304      	adds	r3, #4
 8002c80:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	2201      	movs	r2, #1
 8002c86:	705a      	strb	r2, [r3, #1]
 8002c88:	e00f      	b.n	8002caa <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c8a:	78fb      	ldrb	r3, [r7, #3]
 8002c8c:	f003 020f 	and.w	r2, r3, #15
 8002c90:	4613      	mov	r3, r2
 8002c92:	00db      	lsls	r3, r3, #3
 8002c94:	4413      	add	r3, r2
 8002c96:	009b      	lsls	r3, r3, #2
 8002c98:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002c9c:	687a      	ldr	r2, [r7, #4]
 8002c9e:	4413      	add	r3, r2
 8002ca0:	3304      	adds	r3, #4
 8002ca2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002caa:	78fb      	ldrb	r3, [r7, #3]
 8002cac:	f003 030f 	and.w	r3, r3, #15
 8002cb0:	b2da      	uxtb	r2, r3
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002cb6:	883a      	ldrh	r2, [r7, #0]
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	78ba      	ldrb	r2, [r7, #2]
 8002cc0:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	785b      	ldrb	r3, [r3, #1]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d004      	beq.n	8002cd4 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	781b      	ldrb	r3, [r3, #0]
 8002cce:	461a      	mov	r2, r3
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002cd4:	78bb      	ldrb	r3, [r7, #2]
 8002cd6:	2b02      	cmp	r3, #2
 8002cd8:	d102      	bne.n	8002ce0 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	2200      	movs	r2, #0
 8002cde:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002ce6:	2b01      	cmp	r3, #1
 8002ce8:	d101      	bne.n	8002cee <HAL_PCD_EP_Open+0xaa>
 8002cea:	2302      	movs	r3, #2
 8002cec:	e00e      	b.n	8002d0c <HAL_PCD_EP_Open+0xc8>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2201      	movs	r2, #1
 8002cf2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	68f9      	ldr	r1, [r7, #12]
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f002 fe39 	bl	8005974 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2200      	movs	r2, #0
 8002d06:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8002d0a:	7afb      	ldrb	r3, [r7, #11]
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	3710      	adds	r7, #16
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd80      	pop	{r7, pc}

08002d14 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b084      	sub	sp, #16
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
 8002d1c:	460b      	mov	r3, r1
 8002d1e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002d20:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	da0f      	bge.n	8002d48 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d28:	78fb      	ldrb	r3, [r7, #3]
 8002d2a:	f003 020f 	and.w	r2, r3, #15
 8002d2e:	4613      	mov	r3, r2
 8002d30:	00db      	lsls	r3, r3, #3
 8002d32:	4413      	add	r3, r2
 8002d34:	009b      	lsls	r3, r3, #2
 8002d36:	3310      	adds	r3, #16
 8002d38:	687a      	ldr	r2, [r7, #4]
 8002d3a:	4413      	add	r3, r2
 8002d3c:	3304      	adds	r3, #4
 8002d3e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	2201      	movs	r2, #1
 8002d44:	705a      	strb	r2, [r3, #1]
 8002d46:	e00f      	b.n	8002d68 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d48:	78fb      	ldrb	r3, [r7, #3]
 8002d4a:	f003 020f 	and.w	r2, r3, #15
 8002d4e:	4613      	mov	r3, r2
 8002d50:	00db      	lsls	r3, r3, #3
 8002d52:	4413      	add	r3, r2
 8002d54:	009b      	lsls	r3, r3, #2
 8002d56:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002d5a:	687a      	ldr	r2, [r7, #4]
 8002d5c:	4413      	add	r3, r2
 8002d5e:	3304      	adds	r3, #4
 8002d60:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	2200      	movs	r2, #0
 8002d66:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002d68:	78fb      	ldrb	r3, [r7, #3]
 8002d6a:	f003 030f 	and.w	r3, r3, #15
 8002d6e:	b2da      	uxtb	r2, r3
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002d7a:	2b01      	cmp	r3, #1
 8002d7c:	d101      	bne.n	8002d82 <HAL_PCD_EP_Close+0x6e>
 8002d7e:	2302      	movs	r3, #2
 8002d80:	e00e      	b.n	8002da0 <HAL_PCD_EP_Close+0x8c>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2201      	movs	r2, #1
 8002d86:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	68f9      	ldr	r1, [r7, #12]
 8002d90:	4618      	mov	r0, r3
 8002d92:	f002 fe77 	bl	8005a84 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8002d9e:	2300      	movs	r3, #0
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	3710      	adds	r7, #16
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bd80      	pop	{r7, pc}

08002da8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b086      	sub	sp, #24
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	60f8      	str	r0, [r7, #12]
 8002db0:	607a      	str	r2, [r7, #4]
 8002db2:	603b      	str	r3, [r7, #0]
 8002db4:	460b      	mov	r3, r1
 8002db6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002db8:	7afb      	ldrb	r3, [r7, #11]
 8002dba:	f003 020f 	and.w	r2, r3, #15
 8002dbe:	4613      	mov	r3, r2
 8002dc0:	00db      	lsls	r3, r3, #3
 8002dc2:	4413      	add	r3, r2
 8002dc4:	009b      	lsls	r3, r3, #2
 8002dc6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002dca:	68fa      	ldr	r2, [r7, #12]
 8002dcc:	4413      	add	r3, r2
 8002dce:	3304      	adds	r3, #4
 8002dd0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	687a      	ldr	r2, [r7, #4]
 8002dd6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002dd8:	697b      	ldr	r3, [r7, #20]
 8002dda:	683a      	ldr	r2, [r7, #0]
 8002ddc:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	2200      	movs	r2, #0
 8002de2:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	2200      	movs	r2, #0
 8002de8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002dea:	7afb      	ldrb	r3, [r7, #11]
 8002dec:	f003 030f 	and.w	r3, r3, #15
 8002df0:	b2da      	uxtb	r2, r3
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	799b      	ldrb	r3, [r3, #6]
 8002dfa:	2b01      	cmp	r3, #1
 8002dfc:	d102      	bne.n	8002e04 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002dfe:	687a      	ldr	r2, [r7, #4]
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	6818      	ldr	r0, [r3, #0]
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	799b      	ldrb	r3, [r3, #6]
 8002e0c:	461a      	mov	r2, r3
 8002e0e:	6979      	ldr	r1, [r7, #20]
 8002e10:	f002 ff14 	bl	8005c3c <USB_EPStartXfer>

  return HAL_OK;
 8002e14:	2300      	movs	r3, #0
}
 8002e16:	4618      	mov	r0, r3
 8002e18:	3718      	adds	r7, #24
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}

08002e1e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8002e1e:	b480      	push	{r7}
 8002e20:	b083      	sub	sp, #12
 8002e22:	af00      	add	r7, sp, #0
 8002e24:	6078      	str	r0, [r7, #4]
 8002e26:	460b      	mov	r3, r1
 8002e28:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002e2a:	78fb      	ldrb	r3, [r7, #3]
 8002e2c:	f003 020f 	and.w	r2, r3, #15
 8002e30:	6879      	ldr	r1, [r7, #4]
 8002e32:	4613      	mov	r3, r2
 8002e34:	00db      	lsls	r3, r3, #3
 8002e36:	4413      	add	r3, r2
 8002e38:	009b      	lsls	r3, r3, #2
 8002e3a:	440b      	add	r3, r1
 8002e3c:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8002e40:	681b      	ldr	r3, [r3, #0]
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	370c      	adds	r7, #12
 8002e46:	46bd      	mov	sp, r7
 8002e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4c:	4770      	bx	lr

08002e4e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002e4e:	b580      	push	{r7, lr}
 8002e50:	b086      	sub	sp, #24
 8002e52:	af00      	add	r7, sp, #0
 8002e54:	60f8      	str	r0, [r7, #12]
 8002e56:	607a      	str	r2, [r7, #4]
 8002e58:	603b      	str	r3, [r7, #0]
 8002e5a:	460b      	mov	r3, r1
 8002e5c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e5e:	7afb      	ldrb	r3, [r7, #11]
 8002e60:	f003 020f 	and.w	r2, r3, #15
 8002e64:	4613      	mov	r3, r2
 8002e66:	00db      	lsls	r3, r3, #3
 8002e68:	4413      	add	r3, r2
 8002e6a:	009b      	lsls	r3, r3, #2
 8002e6c:	3310      	adds	r3, #16
 8002e6e:	68fa      	ldr	r2, [r7, #12]
 8002e70:	4413      	add	r3, r2
 8002e72:	3304      	adds	r3, #4
 8002e74:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	687a      	ldr	r2, [r7, #4]
 8002e7a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	683a      	ldr	r2, [r7, #0]
 8002e80:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	2200      	movs	r2, #0
 8002e86:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e8e:	7afb      	ldrb	r3, [r7, #11]
 8002e90:	f003 030f 	and.w	r3, r3, #15
 8002e94:	b2da      	uxtb	r2, r3
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	799b      	ldrb	r3, [r3, #6]
 8002e9e:	2b01      	cmp	r3, #1
 8002ea0:	d102      	bne.n	8002ea8 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002ea2:	687a      	ldr	r2, [r7, #4]
 8002ea4:	697b      	ldr	r3, [r7, #20]
 8002ea6:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	6818      	ldr	r0, [r3, #0]
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	799b      	ldrb	r3, [r3, #6]
 8002eb0:	461a      	mov	r2, r3
 8002eb2:	6979      	ldr	r1, [r7, #20]
 8002eb4:	f002 fec2 	bl	8005c3c <USB_EPStartXfer>

  return HAL_OK;
 8002eb8:	2300      	movs	r3, #0
}
 8002eba:	4618      	mov	r0, r3
 8002ebc:	3718      	adds	r7, #24
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd80      	pop	{r7, pc}

08002ec2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002ec2:	b580      	push	{r7, lr}
 8002ec4:	b084      	sub	sp, #16
 8002ec6:	af00      	add	r7, sp, #0
 8002ec8:	6078      	str	r0, [r7, #4]
 8002eca:	460b      	mov	r3, r1
 8002ecc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002ece:	78fb      	ldrb	r3, [r7, #3]
 8002ed0:	f003 030f 	and.w	r3, r3, #15
 8002ed4:	687a      	ldr	r2, [r7, #4]
 8002ed6:	7912      	ldrb	r2, [r2, #4]
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d901      	bls.n	8002ee0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002edc:	2301      	movs	r3, #1
 8002ede:	e04f      	b.n	8002f80 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002ee0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	da0f      	bge.n	8002f08 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ee8:	78fb      	ldrb	r3, [r7, #3]
 8002eea:	f003 020f 	and.w	r2, r3, #15
 8002eee:	4613      	mov	r3, r2
 8002ef0:	00db      	lsls	r3, r3, #3
 8002ef2:	4413      	add	r3, r2
 8002ef4:	009b      	lsls	r3, r3, #2
 8002ef6:	3310      	adds	r3, #16
 8002ef8:	687a      	ldr	r2, [r7, #4]
 8002efa:	4413      	add	r3, r2
 8002efc:	3304      	adds	r3, #4
 8002efe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	2201      	movs	r2, #1
 8002f04:	705a      	strb	r2, [r3, #1]
 8002f06:	e00d      	b.n	8002f24 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002f08:	78fa      	ldrb	r2, [r7, #3]
 8002f0a:	4613      	mov	r3, r2
 8002f0c:	00db      	lsls	r3, r3, #3
 8002f0e:	4413      	add	r3, r2
 8002f10:	009b      	lsls	r3, r3, #2
 8002f12:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002f16:	687a      	ldr	r2, [r7, #4]
 8002f18:	4413      	add	r3, r2
 8002f1a:	3304      	adds	r3, #4
 8002f1c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	2200      	movs	r2, #0
 8002f22:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	2201      	movs	r2, #1
 8002f28:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f2a:	78fb      	ldrb	r3, [r7, #3]
 8002f2c:	f003 030f 	and.w	r3, r3, #15
 8002f30:	b2da      	uxtb	r2, r3
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002f3c:	2b01      	cmp	r3, #1
 8002f3e:	d101      	bne.n	8002f44 <HAL_PCD_EP_SetStall+0x82>
 8002f40:	2302      	movs	r3, #2
 8002f42:	e01d      	b.n	8002f80 <HAL_PCD_EP_SetStall+0xbe>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2201      	movs	r2, #1
 8002f48:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	68f9      	ldr	r1, [r7, #12]
 8002f52:	4618      	mov	r0, r3
 8002f54:	f003 fa4a 	bl	80063ec <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002f58:	78fb      	ldrb	r3, [r7, #3]
 8002f5a:	f003 030f 	and.w	r3, r3, #15
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d109      	bne.n	8002f76 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6818      	ldr	r0, [r3, #0]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	7999      	ldrb	r1, [r3, #6]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002f70:	461a      	mov	r2, r3
 8002f72:	f003 fc3b 	bl	80067ec <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002f7e:	2300      	movs	r3, #0
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	3710      	adds	r7, #16
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}

08002f88 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b084      	sub	sp, #16
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
 8002f90:	460b      	mov	r3, r1
 8002f92:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002f94:	78fb      	ldrb	r3, [r7, #3]
 8002f96:	f003 030f 	and.w	r3, r3, #15
 8002f9a:	687a      	ldr	r2, [r7, #4]
 8002f9c:	7912      	ldrb	r2, [r2, #4]
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d901      	bls.n	8002fa6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	e042      	b.n	800302c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002fa6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	da0f      	bge.n	8002fce <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002fae:	78fb      	ldrb	r3, [r7, #3]
 8002fb0:	f003 020f 	and.w	r2, r3, #15
 8002fb4:	4613      	mov	r3, r2
 8002fb6:	00db      	lsls	r3, r3, #3
 8002fb8:	4413      	add	r3, r2
 8002fba:	009b      	lsls	r3, r3, #2
 8002fbc:	3310      	adds	r3, #16
 8002fbe:	687a      	ldr	r2, [r7, #4]
 8002fc0:	4413      	add	r3, r2
 8002fc2:	3304      	adds	r3, #4
 8002fc4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	2201      	movs	r2, #1
 8002fca:	705a      	strb	r2, [r3, #1]
 8002fcc:	e00f      	b.n	8002fee <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002fce:	78fb      	ldrb	r3, [r7, #3]
 8002fd0:	f003 020f 	and.w	r2, r3, #15
 8002fd4:	4613      	mov	r3, r2
 8002fd6:	00db      	lsls	r3, r3, #3
 8002fd8:	4413      	add	r3, r2
 8002fda:	009b      	lsls	r3, r3, #2
 8002fdc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002fe0:	687a      	ldr	r2, [r7, #4]
 8002fe2:	4413      	add	r3, r2
 8002fe4:	3304      	adds	r3, #4
 8002fe6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	2200      	movs	r2, #0
 8002fec:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ff4:	78fb      	ldrb	r3, [r7, #3]
 8002ff6:	f003 030f 	and.w	r3, r3, #15
 8002ffa:	b2da      	uxtb	r2, r3
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003006:	2b01      	cmp	r3, #1
 8003008:	d101      	bne.n	800300e <HAL_PCD_EP_ClrStall+0x86>
 800300a:	2302      	movs	r3, #2
 800300c:	e00e      	b.n	800302c <HAL_PCD_EP_ClrStall+0xa4>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2201      	movs	r2, #1
 8003012:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	68f9      	ldr	r1, [r7, #12]
 800301c:	4618      	mov	r0, r3
 800301e:	f003 fa53 	bl	80064c8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2200      	movs	r2, #0
 8003026:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800302a:	2300      	movs	r3, #0
}
 800302c:	4618      	mov	r0, r3
 800302e:	3710      	adds	r7, #16
 8003030:	46bd      	mov	sp, r7
 8003032:	bd80      	pop	{r7, pc}

08003034 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b084      	sub	sp, #16
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
 800303c:	460b      	mov	r3, r1
 800303e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003040:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003044:	2b00      	cmp	r3, #0
 8003046:	da0c      	bge.n	8003062 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003048:	78fb      	ldrb	r3, [r7, #3]
 800304a:	f003 020f 	and.w	r2, r3, #15
 800304e:	4613      	mov	r3, r2
 8003050:	00db      	lsls	r3, r3, #3
 8003052:	4413      	add	r3, r2
 8003054:	009b      	lsls	r3, r3, #2
 8003056:	3310      	adds	r3, #16
 8003058:	687a      	ldr	r2, [r7, #4]
 800305a:	4413      	add	r3, r2
 800305c:	3304      	adds	r3, #4
 800305e:	60fb      	str	r3, [r7, #12]
 8003060:	e00c      	b.n	800307c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003062:	78fb      	ldrb	r3, [r7, #3]
 8003064:	f003 020f 	and.w	r2, r3, #15
 8003068:	4613      	mov	r3, r2
 800306a:	00db      	lsls	r3, r3, #3
 800306c:	4413      	add	r3, r2
 800306e:	009b      	lsls	r3, r3, #2
 8003070:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003074:	687a      	ldr	r2, [r7, #4]
 8003076:	4413      	add	r3, r2
 8003078:	3304      	adds	r3, #4
 800307a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	68f9      	ldr	r1, [r7, #12]
 8003082:	4618      	mov	r0, r3
 8003084:	f003 f872 	bl	800616c <USB_EPStopXfer>
 8003088:	4603      	mov	r3, r0
 800308a:	72fb      	strb	r3, [r7, #11]

  return ret;
 800308c:	7afb      	ldrb	r3, [r7, #11]
}
 800308e:	4618      	mov	r0, r3
 8003090:	3710      	adds	r7, #16
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}

08003096 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003096:	b580      	push	{r7, lr}
 8003098:	b08a      	sub	sp, #40	@ 0x28
 800309a:	af02      	add	r7, sp, #8
 800309c:	6078      	str	r0, [r7, #4]
 800309e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80030a6:	697b      	ldr	r3, [r7, #20]
 80030a8:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80030aa:	683a      	ldr	r2, [r7, #0]
 80030ac:	4613      	mov	r3, r2
 80030ae:	00db      	lsls	r3, r3, #3
 80030b0:	4413      	add	r3, r2
 80030b2:	009b      	lsls	r3, r3, #2
 80030b4:	3310      	adds	r3, #16
 80030b6:	687a      	ldr	r2, [r7, #4]
 80030b8:	4413      	add	r3, r2
 80030ba:	3304      	adds	r3, #4
 80030bc:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	695a      	ldr	r2, [r3, #20]
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	691b      	ldr	r3, [r3, #16]
 80030c6:	429a      	cmp	r2, r3
 80030c8:	d901      	bls.n	80030ce <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	e06b      	b.n	80031a6 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	691a      	ldr	r2, [r3, #16]
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	695b      	ldr	r3, [r3, #20]
 80030d6:	1ad3      	subs	r3, r2, r3
 80030d8:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	689b      	ldr	r3, [r3, #8]
 80030de:	69fa      	ldr	r2, [r7, #28]
 80030e0:	429a      	cmp	r2, r3
 80030e2:	d902      	bls.n	80030ea <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	689b      	ldr	r3, [r3, #8]
 80030e8:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80030ea:	69fb      	ldr	r3, [r7, #28]
 80030ec:	3303      	adds	r3, #3
 80030ee:	089b      	lsrs	r3, r3, #2
 80030f0:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80030f2:	e02a      	b.n	800314a <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	691a      	ldr	r2, [r3, #16]
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	695b      	ldr	r3, [r3, #20]
 80030fc:	1ad3      	subs	r3, r2, r3
 80030fe:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	689b      	ldr	r3, [r3, #8]
 8003104:	69fa      	ldr	r2, [r7, #28]
 8003106:	429a      	cmp	r2, r3
 8003108:	d902      	bls.n	8003110 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003110:	69fb      	ldr	r3, [r7, #28]
 8003112:	3303      	adds	r3, #3
 8003114:	089b      	lsrs	r3, r3, #2
 8003116:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	68d9      	ldr	r1, [r3, #12]
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	b2da      	uxtb	r2, r3
 8003120:	69fb      	ldr	r3, [r7, #28]
 8003122:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003128:	9300      	str	r3, [sp, #0]
 800312a:	4603      	mov	r3, r0
 800312c:	6978      	ldr	r0, [r7, #20]
 800312e:	f003 f8c7 	bl	80062c0 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	68da      	ldr	r2, [r3, #12]
 8003136:	69fb      	ldr	r3, [r7, #28]
 8003138:	441a      	add	r2, r3
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	695a      	ldr	r2, [r3, #20]
 8003142:	69fb      	ldr	r3, [r7, #28]
 8003144:	441a      	add	r2, r3
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	015a      	lsls	r2, r3, #5
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	4413      	add	r3, r2
 8003152:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003156:	699b      	ldr	r3, [r3, #24]
 8003158:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800315a:	69ba      	ldr	r2, [r7, #24]
 800315c:	429a      	cmp	r2, r3
 800315e:	d809      	bhi.n	8003174 <PCD_WriteEmptyTxFifo+0xde>
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	695a      	ldr	r2, [r3, #20]
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003168:	429a      	cmp	r2, r3
 800316a:	d203      	bcs.n	8003174 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	691b      	ldr	r3, [r3, #16]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d1bf      	bne.n	80030f4 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	691a      	ldr	r2, [r3, #16]
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	695b      	ldr	r3, [r3, #20]
 800317c:	429a      	cmp	r2, r3
 800317e:	d811      	bhi.n	80031a4 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	f003 030f 	and.w	r3, r3, #15
 8003186:	2201      	movs	r2, #1
 8003188:	fa02 f303 	lsl.w	r3, r2, r3
 800318c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003194:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003196:	68bb      	ldr	r3, [r7, #8]
 8003198:	43db      	mvns	r3, r3
 800319a:	6939      	ldr	r1, [r7, #16]
 800319c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80031a0:	4013      	ands	r3, r2
 80031a2:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80031a4:	2300      	movs	r3, #0
}
 80031a6:	4618      	mov	r0, r3
 80031a8:	3720      	adds	r7, #32
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}
	...

080031b0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b088      	sub	sp, #32
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
 80031b8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80031c0:	69fb      	ldr	r3, [r7, #28]
 80031c2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80031c4:	69fb      	ldr	r3, [r7, #28]
 80031c6:	333c      	adds	r3, #60	@ 0x3c
 80031c8:	3304      	adds	r3, #4
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	015a      	lsls	r2, r3, #5
 80031d2:	69bb      	ldr	r3, [r7, #24]
 80031d4:	4413      	add	r3, r2
 80031d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80031da:	689b      	ldr	r3, [r3, #8]
 80031dc:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	799b      	ldrb	r3, [r3, #6]
 80031e2:	2b01      	cmp	r3, #1
 80031e4:	d17b      	bne.n	80032de <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	f003 0308 	and.w	r3, r3, #8
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d015      	beq.n	800321c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	4a61      	ldr	r2, [pc, #388]	@ (8003378 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	f240 80b9 	bls.w	800336c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003200:	2b00      	cmp	r3, #0
 8003202:	f000 80b3 	beq.w	800336c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	015a      	lsls	r2, r3, #5
 800320a:	69bb      	ldr	r3, [r7, #24]
 800320c:	4413      	add	r3, r2
 800320e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003212:	461a      	mov	r2, r3
 8003214:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003218:	6093      	str	r3, [r2, #8]
 800321a:	e0a7      	b.n	800336c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800321c:	693b      	ldr	r3, [r7, #16]
 800321e:	f003 0320 	and.w	r3, r3, #32
 8003222:	2b00      	cmp	r3, #0
 8003224:	d009      	beq.n	800323a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	015a      	lsls	r2, r3, #5
 800322a:	69bb      	ldr	r3, [r7, #24]
 800322c:	4413      	add	r3, r2
 800322e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003232:	461a      	mov	r2, r3
 8003234:	2320      	movs	r3, #32
 8003236:	6093      	str	r3, [r2, #8]
 8003238:	e098      	b.n	800336c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800323a:	693b      	ldr	r3, [r7, #16]
 800323c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003240:	2b00      	cmp	r3, #0
 8003242:	f040 8093 	bne.w	800336c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003246:	697b      	ldr	r3, [r7, #20]
 8003248:	4a4b      	ldr	r2, [pc, #300]	@ (8003378 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d90f      	bls.n	800326e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003254:	2b00      	cmp	r3, #0
 8003256:	d00a      	beq.n	800326e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	015a      	lsls	r2, r3, #5
 800325c:	69bb      	ldr	r3, [r7, #24]
 800325e:	4413      	add	r3, r2
 8003260:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003264:	461a      	mov	r2, r3
 8003266:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800326a:	6093      	str	r3, [r2, #8]
 800326c:	e07e      	b.n	800336c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800326e:	683a      	ldr	r2, [r7, #0]
 8003270:	4613      	mov	r3, r2
 8003272:	00db      	lsls	r3, r3, #3
 8003274:	4413      	add	r3, r2
 8003276:	009b      	lsls	r3, r3, #2
 8003278:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800327c:	687a      	ldr	r2, [r7, #4]
 800327e:	4413      	add	r3, r2
 8003280:	3304      	adds	r3, #4
 8003282:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	6a1a      	ldr	r2, [r3, #32]
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	0159      	lsls	r1, r3, #5
 800328c:	69bb      	ldr	r3, [r7, #24]
 800328e:	440b      	add	r3, r1
 8003290:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003294:	691b      	ldr	r3, [r3, #16]
 8003296:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800329a:	1ad2      	subs	r2, r2, r3
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d114      	bne.n	80032d0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	691b      	ldr	r3, [r3, #16]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d109      	bne.n	80032c2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6818      	ldr	r0, [r3, #0]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80032b8:	461a      	mov	r2, r3
 80032ba:	2101      	movs	r1, #1
 80032bc:	f003 fa96 	bl	80067ec <USB_EP0_OutStart>
 80032c0:	e006      	b.n	80032d0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	68da      	ldr	r2, [r3, #12]
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	695b      	ldr	r3, [r3, #20]
 80032ca:	441a      	add	r2, r3
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	b2db      	uxtb	r3, r3
 80032d4:	4619      	mov	r1, r3
 80032d6:	6878      	ldr	r0, [r7, #4]
 80032d8:	f005 fd6a 	bl	8008db0 <HAL_PCD_DataOutStageCallback>
 80032dc:	e046      	b.n	800336c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	4a26      	ldr	r2, [pc, #152]	@ (800337c <PCD_EP_OutXfrComplete_int+0x1cc>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d124      	bne.n	8003330 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80032e6:	693b      	ldr	r3, [r7, #16]
 80032e8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d00a      	beq.n	8003306 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	015a      	lsls	r2, r3, #5
 80032f4:	69bb      	ldr	r3, [r7, #24]
 80032f6:	4413      	add	r3, r2
 80032f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80032fc:	461a      	mov	r2, r3
 80032fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003302:	6093      	str	r3, [r2, #8]
 8003304:	e032      	b.n	800336c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	f003 0320 	and.w	r3, r3, #32
 800330c:	2b00      	cmp	r3, #0
 800330e:	d008      	beq.n	8003322 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	015a      	lsls	r2, r3, #5
 8003314:	69bb      	ldr	r3, [r7, #24]
 8003316:	4413      	add	r3, r2
 8003318:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800331c:	461a      	mov	r2, r3
 800331e:	2320      	movs	r3, #32
 8003320:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	b2db      	uxtb	r3, r3
 8003326:	4619      	mov	r1, r3
 8003328:	6878      	ldr	r0, [r7, #4]
 800332a:	f005 fd41 	bl	8008db0 <HAL_PCD_DataOutStageCallback>
 800332e:	e01d      	b.n	800336c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d114      	bne.n	8003360 <PCD_EP_OutXfrComplete_int+0x1b0>
 8003336:	6879      	ldr	r1, [r7, #4]
 8003338:	683a      	ldr	r2, [r7, #0]
 800333a:	4613      	mov	r3, r2
 800333c:	00db      	lsls	r3, r3, #3
 800333e:	4413      	add	r3, r2
 8003340:	009b      	lsls	r3, r3, #2
 8003342:	440b      	add	r3, r1
 8003344:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d108      	bne.n	8003360 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6818      	ldr	r0, [r3, #0]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003358:	461a      	mov	r2, r3
 800335a:	2100      	movs	r1, #0
 800335c:	f003 fa46 	bl	80067ec <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	b2db      	uxtb	r3, r3
 8003364:	4619      	mov	r1, r3
 8003366:	6878      	ldr	r0, [r7, #4]
 8003368:	f005 fd22 	bl	8008db0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800336c:	2300      	movs	r3, #0
}
 800336e:	4618      	mov	r0, r3
 8003370:	3720      	adds	r7, #32
 8003372:	46bd      	mov	sp, r7
 8003374:	bd80      	pop	{r7, pc}
 8003376:	bf00      	nop
 8003378:	4f54300a 	.word	0x4f54300a
 800337c:	4f54310a 	.word	0x4f54310a

08003380 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b086      	sub	sp, #24
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
 8003388:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003390:	697b      	ldr	r3, [r7, #20]
 8003392:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003394:	697b      	ldr	r3, [r7, #20]
 8003396:	333c      	adds	r3, #60	@ 0x3c
 8003398:	3304      	adds	r3, #4
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	015a      	lsls	r2, r3, #5
 80033a2:	693b      	ldr	r3, [r7, #16]
 80033a4:	4413      	add	r3, r2
 80033a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80033aa:	689b      	ldr	r3, [r3, #8]
 80033ac:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	4a15      	ldr	r2, [pc, #84]	@ (8003408 <PCD_EP_OutSetupPacket_int+0x88>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d90e      	bls.n	80033d4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80033b6:	68bb      	ldr	r3, [r7, #8]
 80033b8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d009      	beq.n	80033d4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	015a      	lsls	r2, r3, #5
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	4413      	add	r3, r2
 80033c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80033cc:	461a      	mov	r2, r3
 80033ce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80033d2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80033d4:	6878      	ldr	r0, [r7, #4]
 80033d6:	f005 fcd9 	bl	8008d8c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	4a0a      	ldr	r2, [pc, #40]	@ (8003408 <PCD_EP_OutSetupPacket_int+0x88>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d90c      	bls.n	80033fc <PCD_EP_OutSetupPacket_int+0x7c>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	799b      	ldrb	r3, [r3, #6]
 80033e6:	2b01      	cmp	r3, #1
 80033e8:	d108      	bne.n	80033fc <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6818      	ldr	r0, [r3, #0]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80033f4:	461a      	mov	r2, r3
 80033f6:	2101      	movs	r1, #1
 80033f8:	f003 f9f8 	bl	80067ec <USB_EP0_OutStart>
  }

  return HAL_OK;
 80033fc:	2300      	movs	r3, #0
}
 80033fe:	4618      	mov	r0, r3
 8003400:	3718      	adds	r7, #24
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}
 8003406:	bf00      	nop
 8003408:	4f54300a 	.word	0x4f54300a

0800340c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800340c:	b480      	push	{r7}
 800340e:	b085      	sub	sp, #20
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
 8003414:	460b      	mov	r3, r1
 8003416:	70fb      	strb	r3, [r7, #3]
 8003418:	4613      	mov	r3, r2
 800341a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003422:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003424:	78fb      	ldrb	r3, [r7, #3]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d107      	bne.n	800343a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800342a:	883b      	ldrh	r3, [r7, #0]
 800342c:	0419      	lsls	r1, r3, #16
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	68ba      	ldr	r2, [r7, #8]
 8003434:	430a      	orrs	r2, r1
 8003436:	629a      	str	r2, [r3, #40]	@ 0x28
 8003438:	e028      	b.n	800348c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003440:	0c1b      	lsrs	r3, r3, #16
 8003442:	68ba      	ldr	r2, [r7, #8]
 8003444:	4413      	add	r3, r2
 8003446:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003448:	2300      	movs	r3, #0
 800344a:	73fb      	strb	r3, [r7, #15]
 800344c:	e00d      	b.n	800346a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681a      	ldr	r2, [r3, #0]
 8003452:	7bfb      	ldrb	r3, [r7, #15]
 8003454:	3340      	adds	r3, #64	@ 0x40
 8003456:	009b      	lsls	r3, r3, #2
 8003458:	4413      	add	r3, r2
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	0c1b      	lsrs	r3, r3, #16
 800345e:	68ba      	ldr	r2, [r7, #8]
 8003460:	4413      	add	r3, r2
 8003462:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003464:	7bfb      	ldrb	r3, [r7, #15]
 8003466:	3301      	adds	r3, #1
 8003468:	73fb      	strb	r3, [r7, #15]
 800346a:	7bfa      	ldrb	r2, [r7, #15]
 800346c:	78fb      	ldrb	r3, [r7, #3]
 800346e:	3b01      	subs	r3, #1
 8003470:	429a      	cmp	r2, r3
 8003472:	d3ec      	bcc.n	800344e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003474:	883b      	ldrh	r3, [r7, #0]
 8003476:	0418      	lsls	r0, r3, #16
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6819      	ldr	r1, [r3, #0]
 800347c:	78fb      	ldrb	r3, [r7, #3]
 800347e:	3b01      	subs	r3, #1
 8003480:	68ba      	ldr	r2, [r7, #8]
 8003482:	4302      	orrs	r2, r0
 8003484:	3340      	adds	r3, #64	@ 0x40
 8003486:	009b      	lsls	r3, r3, #2
 8003488:	440b      	add	r3, r1
 800348a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800348c:	2300      	movs	r3, #0
}
 800348e:	4618      	mov	r0, r3
 8003490:	3714      	adds	r7, #20
 8003492:	46bd      	mov	sp, r7
 8003494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003498:	4770      	bx	lr

0800349a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800349a:	b480      	push	{r7}
 800349c:	b083      	sub	sp, #12
 800349e:	af00      	add	r7, sp, #0
 80034a0:	6078      	str	r0, [r7, #4]
 80034a2:	460b      	mov	r3, r1
 80034a4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	887a      	ldrh	r2, [r7, #2]
 80034ac:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80034ae:	2300      	movs	r3, #0
}
 80034b0:	4618      	mov	r0, r3
 80034b2:	370c      	adds	r7, #12
 80034b4:	46bd      	mov	sp, r7
 80034b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ba:	4770      	bx	lr

080034bc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80034bc:	b480      	push	{r7}
 80034be:	b083      	sub	sp, #12
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
 80034c4:	460b      	mov	r3, r1
 80034c6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80034c8:	bf00      	nop
 80034ca:	370c      	adds	r7, #12
 80034cc:	46bd      	mov	sp, r7
 80034ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d2:	4770      	bx	lr

080034d4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b086      	sub	sp, #24
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d101      	bne.n	80034e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80034e2:	2301      	movs	r3, #1
 80034e4:	e267      	b.n	80039b6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f003 0301 	and.w	r3, r3, #1
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d075      	beq.n	80035de <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80034f2:	4b88      	ldr	r3, [pc, #544]	@ (8003714 <HAL_RCC_OscConfig+0x240>)
 80034f4:	689b      	ldr	r3, [r3, #8]
 80034f6:	f003 030c 	and.w	r3, r3, #12
 80034fa:	2b04      	cmp	r3, #4
 80034fc:	d00c      	beq.n	8003518 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80034fe:	4b85      	ldr	r3, [pc, #532]	@ (8003714 <HAL_RCC_OscConfig+0x240>)
 8003500:	689b      	ldr	r3, [r3, #8]
 8003502:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003506:	2b08      	cmp	r3, #8
 8003508:	d112      	bne.n	8003530 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800350a:	4b82      	ldr	r3, [pc, #520]	@ (8003714 <HAL_RCC_OscConfig+0x240>)
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003512:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003516:	d10b      	bne.n	8003530 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003518:	4b7e      	ldr	r3, [pc, #504]	@ (8003714 <HAL_RCC_OscConfig+0x240>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003520:	2b00      	cmp	r3, #0
 8003522:	d05b      	beq.n	80035dc <HAL_RCC_OscConfig+0x108>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d157      	bne.n	80035dc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800352c:	2301      	movs	r3, #1
 800352e:	e242      	b.n	80039b6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003538:	d106      	bne.n	8003548 <HAL_RCC_OscConfig+0x74>
 800353a:	4b76      	ldr	r3, [pc, #472]	@ (8003714 <HAL_RCC_OscConfig+0x240>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a75      	ldr	r2, [pc, #468]	@ (8003714 <HAL_RCC_OscConfig+0x240>)
 8003540:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003544:	6013      	str	r3, [r2, #0]
 8003546:	e01d      	b.n	8003584 <HAL_RCC_OscConfig+0xb0>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003550:	d10c      	bne.n	800356c <HAL_RCC_OscConfig+0x98>
 8003552:	4b70      	ldr	r3, [pc, #448]	@ (8003714 <HAL_RCC_OscConfig+0x240>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a6f      	ldr	r2, [pc, #444]	@ (8003714 <HAL_RCC_OscConfig+0x240>)
 8003558:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800355c:	6013      	str	r3, [r2, #0]
 800355e:	4b6d      	ldr	r3, [pc, #436]	@ (8003714 <HAL_RCC_OscConfig+0x240>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a6c      	ldr	r2, [pc, #432]	@ (8003714 <HAL_RCC_OscConfig+0x240>)
 8003564:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003568:	6013      	str	r3, [r2, #0]
 800356a:	e00b      	b.n	8003584 <HAL_RCC_OscConfig+0xb0>
 800356c:	4b69      	ldr	r3, [pc, #420]	@ (8003714 <HAL_RCC_OscConfig+0x240>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a68      	ldr	r2, [pc, #416]	@ (8003714 <HAL_RCC_OscConfig+0x240>)
 8003572:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003576:	6013      	str	r3, [r2, #0]
 8003578:	4b66      	ldr	r3, [pc, #408]	@ (8003714 <HAL_RCC_OscConfig+0x240>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a65      	ldr	r2, [pc, #404]	@ (8003714 <HAL_RCC_OscConfig+0x240>)
 800357e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003582:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d013      	beq.n	80035b4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800358c:	f7fd fea6 	bl	80012dc <HAL_GetTick>
 8003590:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003592:	e008      	b.n	80035a6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003594:	f7fd fea2 	bl	80012dc <HAL_GetTick>
 8003598:	4602      	mov	r2, r0
 800359a:	693b      	ldr	r3, [r7, #16]
 800359c:	1ad3      	subs	r3, r2, r3
 800359e:	2b64      	cmp	r3, #100	@ 0x64
 80035a0:	d901      	bls.n	80035a6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80035a2:	2303      	movs	r3, #3
 80035a4:	e207      	b.n	80039b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035a6:	4b5b      	ldr	r3, [pc, #364]	@ (8003714 <HAL_RCC_OscConfig+0x240>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d0f0      	beq.n	8003594 <HAL_RCC_OscConfig+0xc0>
 80035b2:	e014      	b.n	80035de <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035b4:	f7fd fe92 	bl	80012dc <HAL_GetTick>
 80035b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035ba:	e008      	b.n	80035ce <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035bc:	f7fd fe8e 	bl	80012dc <HAL_GetTick>
 80035c0:	4602      	mov	r2, r0
 80035c2:	693b      	ldr	r3, [r7, #16]
 80035c4:	1ad3      	subs	r3, r2, r3
 80035c6:	2b64      	cmp	r3, #100	@ 0x64
 80035c8:	d901      	bls.n	80035ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80035ca:	2303      	movs	r3, #3
 80035cc:	e1f3      	b.n	80039b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035ce:	4b51      	ldr	r3, [pc, #324]	@ (8003714 <HAL_RCC_OscConfig+0x240>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d1f0      	bne.n	80035bc <HAL_RCC_OscConfig+0xe8>
 80035da:	e000      	b.n	80035de <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f003 0302 	and.w	r3, r3, #2
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d063      	beq.n	80036b2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80035ea:	4b4a      	ldr	r3, [pc, #296]	@ (8003714 <HAL_RCC_OscConfig+0x240>)
 80035ec:	689b      	ldr	r3, [r3, #8]
 80035ee:	f003 030c 	and.w	r3, r3, #12
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d00b      	beq.n	800360e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80035f6:	4b47      	ldr	r3, [pc, #284]	@ (8003714 <HAL_RCC_OscConfig+0x240>)
 80035f8:	689b      	ldr	r3, [r3, #8]
 80035fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80035fe:	2b08      	cmp	r3, #8
 8003600:	d11c      	bne.n	800363c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003602:	4b44      	ldr	r3, [pc, #272]	@ (8003714 <HAL_RCC_OscConfig+0x240>)
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800360a:	2b00      	cmp	r3, #0
 800360c:	d116      	bne.n	800363c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800360e:	4b41      	ldr	r3, [pc, #260]	@ (8003714 <HAL_RCC_OscConfig+0x240>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f003 0302 	and.w	r3, r3, #2
 8003616:	2b00      	cmp	r3, #0
 8003618:	d005      	beq.n	8003626 <HAL_RCC_OscConfig+0x152>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	68db      	ldr	r3, [r3, #12]
 800361e:	2b01      	cmp	r3, #1
 8003620:	d001      	beq.n	8003626 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	e1c7      	b.n	80039b6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003626:	4b3b      	ldr	r3, [pc, #236]	@ (8003714 <HAL_RCC_OscConfig+0x240>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	691b      	ldr	r3, [r3, #16]
 8003632:	00db      	lsls	r3, r3, #3
 8003634:	4937      	ldr	r1, [pc, #220]	@ (8003714 <HAL_RCC_OscConfig+0x240>)
 8003636:	4313      	orrs	r3, r2
 8003638:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800363a:	e03a      	b.n	80036b2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	68db      	ldr	r3, [r3, #12]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d020      	beq.n	8003686 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003644:	4b34      	ldr	r3, [pc, #208]	@ (8003718 <HAL_RCC_OscConfig+0x244>)
 8003646:	2201      	movs	r2, #1
 8003648:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800364a:	f7fd fe47 	bl	80012dc <HAL_GetTick>
 800364e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003650:	e008      	b.n	8003664 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003652:	f7fd fe43 	bl	80012dc <HAL_GetTick>
 8003656:	4602      	mov	r2, r0
 8003658:	693b      	ldr	r3, [r7, #16]
 800365a:	1ad3      	subs	r3, r2, r3
 800365c:	2b02      	cmp	r3, #2
 800365e:	d901      	bls.n	8003664 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003660:	2303      	movs	r3, #3
 8003662:	e1a8      	b.n	80039b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003664:	4b2b      	ldr	r3, [pc, #172]	@ (8003714 <HAL_RCC_OscConfig+0x240>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f003 0302 	and.w	r3, r3, #2
 800366c:	2b00      	cmp	r3, #0
 800366e:	d0f0      	beq.n	8003652 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003670:	4b28      	ldr	r3, [pc, #160]	@ (8003714 <HAL_RCC_OscConfig+0x240>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	691b      	ldr	r3, [r3, #16]
 800367c:	00db      	lsls	r3, r3, #3
 800367e:	4925      	ldr	r1, [pc, #148]	@ (8003714 <HAL_RCC_OscConfig+0x240>)
 8003680:	4313      	orrs	r3, r2
 8003682:	600b      	str	r3, [r1, #0]
 8003684:	e015      	b.n	80036b2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003686:	4b24      	ldr	r3, [pc, #144]	@ (8003718 <HAL_RCC_OscConfig+0x244>)
 8003688:	2200      	movs	r2, #0
 800368a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800368c:	f7fd fe26 	bl	80012dc <HAL_GetTick>
 8003690:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003692:	e008      	b.n	80036a6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003694:	f7fd fe22 	bl	80012dc <HAL_GetTick>
 8003698:	4602      	mov	r2, r0
 800369a:	693b      	ldr	r3, [r7, #16]
 800369c:	1ad3      	subs	r3, r2, r3
 800369e:	2b02      	cmp	r3, #2
 80036a0:	d901      	bls.n	80036a6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80036a2:	2303      	movs	r3, #3
 80036a4:	e187      	b.n	80039b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036a6:	4b1b      	ldr	r3, [pc, #108]	@ (8003714 <HAL_RCC_OscConfig+0x240>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f003 0302 	and.w	r3, r3, #2
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d1f0      	bne.n	8003694 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f003 0308 	and.w	r3, r3, #8
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d036      	beq.n	800372c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	695b      	ldr	r3, [r3, #20]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d016      	beq.n	80036f4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036c6:	4b15      	ldr	r3, [pc, #84]	@ (800371c <HAL_RCC_OscConfig+0x248>)
 80036c8:	2201      	movs	r2, #1
 80036ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036cc:	f7fd fe06 	bl	80012dc <HAL_GetTick>
 80036d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036d2:	e008      	b.n	80036e6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80036d4:	f7fd fe02 	bl	80012dc <HAL_GetTick>
 80036d8:	4602      	mov	r2, r0
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	1ad3      	subs	r3, r2, r3
 80036de:	2b02      	cmp	r3, #2
 80036e0:	d901      	bls.n	80036e6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80036e2:	2303      	movs	r3, #3
 80036e4:	e167      	b.n	80039b6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036e6:	4b0b      	ldr	r3, [pc, #44]	@ (8003714 <HAL_RCC_OscConfig+0x240>)
 80036e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80036ea:	f003 0302 	and.w	r3, r3, #2
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d0f0      	beq.n	80036d4 <HAL_RCC_OscConfig+0x200>
 80036f2:	e01b      	b.n	800372c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036f4:	4b09      	ldr	r3, [pc, #36]	@ (800371c <HAL_RCC_OscConfig+0x248>)
 80036f6:	2200      	movs	r2, #0
 80036f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036fa:	f7fd fdef 	bl	80012dc <HAL_GetTick>
 80036fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003700:	e00e      	b.n	8003720 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003702:	f7fd fdeb 	bl	80012dc <HAL_GetTick>
 8003706:	4602      	mov	r2, r0
 8003708:	693b      	ldr	r3, [r7, #16]
 800370a:	1ad3      	subs	r3, r2, r3
 800370c:	2b02      	cmp	r3, #2
 800370e:	d907      	bls.n	8003720 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003710:	2303      	movs	r3, #3
 8003712:	e150      	b.n	80039b6 <HAL_RCC_OscConfig+0x4e2>
 8003714:	40023800 	.word	0x40023800
 8003718:	42470000 	.word	0x42470000
 800371c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003720:	4b88      	ldr	r3, [pc, #544]	@ (8003944 <HAL_RCC_OscConfig+0x470>)
 8003722:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003724:	f003 0302 	and.w	r3, r3, #2
 8003728:	2b00      	cmp	r3, #0
 800372a:	d1ea      	bne.n	8003702 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f003 0304 	and.w	r3, r3, #4
 8003734:	2b00      	cmp	r3, #0
 8003736:	f000 8097 	beq.w	8003868 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800373a:	2300      	movs	r3, #0
 800373c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800373e:	4b81      	ldr	r3, [pc, #516]	@ (8003944 <HAL_RCC_OscConfig+0x470>)
 8003740:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003742:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003746:	2b00      	cmp	r3, #0
 8003748:	d10f      	bne.n	800376a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800374a:	2300      	movs	r3, #0
 800374c:	60bb      	str	r3, [r7, #8]
 800374e:	4b7d      	ldr	r3, [pc, #500]	@ (8003944 <HAL_RCC_OscConfig+0x470>)
 8003750:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003752:	4a7c      	ldr	r2, [pc, #496]	@ (8003944 <HAL_RCC_OscConfig+0x470>)
 8003754:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003758:	6413      	str	r3, [r2, #64]	@ 0x40
 800375a:	4b7a      	ldr	r3, [pc, #488]	@ (8003944 <HAL_RCC_OscConfig+0x470>)
 800375c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800375e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003762:	60bb      	str	r3, [r7, #8]
 8003764:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003766:	2301      	movs	r3, #1
 8003768:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800376a:	4b77      	ldr	r3, [pc, #476]	@ (8003948 <HAL_RCC_OscConfig+0x474>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003772:	2b00      	cmp	r3, #0
 8003774:	d118      	bne.n	80037a8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003776:	4b74      	ldr	r3, [pc, #464]	@ (8003948 <HAL_RCC_OscConfig+0x474>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4a73      	ldr	r2, [pc, #460]	@ (8003948 <HAL_RCC_OscConfig+0x474>)
 800377c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003780:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003782:	f7fd fdab 	bl	80012dc <HAL_GetTick>
 8003786:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003788:	e008      	b.n	800379c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800378a:	f7fd fda7 	bl	80012dc <HAL_GetTick>
 800378e:	4602      	mov	r2, r0
 8003790:	693b      	ldr	r3, [r7, #16]
 8003792:	1ad3      	subs	r3, r2, r3
 8003794:	2b02      	cmp	r3, #2
 8003796:	d901      	bls.n	800379c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003798:	2303      	movs	r3, #3
 800379a:	e10c      	b.n	80039b6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800379c:	4b6a      	ldr	r3, [pc, #424]	@ (8003948 <HAL_RCC_OscConfig+0x474>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d0f0      	beq.n	800378a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	689b      	ldr	r3, [r3, #8]
 80037ac:	2b01      	cmp	r3, #1
 80037ae:	d106      	bne.n	80037be <HAL_RCC_OscConfig+0x2ea>
 80037b0:	4b64      	ldr	r3, [pc, #400]	@ (8003944 <HAL_RCC_OscConfig+0x470>)
 80037b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037b4:	4a63      	ldr	r2, [pc, #396]	@ (8003944 <HAL_RCC_OscConfig+0x470>)
 80037b6:	f043 0301 	orr.w	r3, r3, #1
 80037ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80037bc:	e01c      	b.n	80037f8 <HAL_RCC_OscConfig+0x324>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	689b      	ldr	r3, [r3, #8]
 80037c2:	2b05      	cmp	r3, #5
 80037c4:	d10c      	bne.n	80037e0 <HAL_RCC_OscConfig+0x30c>
 80037c6:	4b5f      	ldr	r3, [pc, #380]	@ (8003944 <HAL_RCC_OscConfig+0x470>)
 80037c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037ca:	4a5e      	ldr	r2, [pc, #376]	@ (8003944 <HAL_RCC_OscConfig+0x470>)
 80037cc:	f043 0304 	orr.w	r3, r3, #4
 80037d0:	6713      	str	r3, [r2, #112]	@ 0x70
 80037d2:	4b5c      	ldr	r3, [pc, #368]	@ (8003944 <HAL_RCC_OscConfig+0x470>)
 80037d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037d6:	4a5b      	ldr	r2, [pc, #364]	@ (8003944 <HAL_RCC_OscConfig+0x470>)
 80037d8:	f043 0301 	orr.w	r3, r3, #1
 80037dc:	6713      	str	r3, [r2, #112]	@ 0x70
 80037de:	e00b      	b.n	80037f8 <HAL_RCC_OscConfig+0x324>
 80037e0:	4b58      	ldr	r3, [pc, #352]	@ (8003944 <HAL_RCC_OscConfig+0x470>)
 80037e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037e4:	4a57      	ldr	r2, [pc, #348]	@ (8003944 <HAL_RCC_OscConfig+0x470>)
 80037e6:	f023 0301 	bic.w	r3, r3, #1
 80037ea:	6713      	str	r3, [r2, #112]	@ 0x70
 80037ec:	4b55      	ldr	r3, [pc, #340]	@ (8003944 <HAL_RCC_OscConfig+0x470>)
 80037ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037f0:	4a54      	ldr	r2, [pc, #336]	@ (8003944 <HAL_RCC_OscConfig+0x470>)
 80037f2:	f023 0304 	bic.w	r3, r3, #4
 80037f6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d015      	beq.n	800382c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003800:	f7fd fd6c 	bl	80012dc <HAL_GetTick>
 8003804:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003806:	e00a      	b.n	800381e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003808:	f7fd fd68 	bl	80012dc <HAL_GetTick>
 800380c:	4602      	mov	r2, r0
 800380e:	693b      	ldr	r3, [r7, #16]
 8003810:	1ad3      	subs	r3, r2, r3
 8003812:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003816:	4293      	cmp	r3, r2
 8003818:	d901      	bls.n	800381e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800381a:	2303      	movs	r3, #3
 800381c:	e0cb      	b.n	80039b6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800381e:	4b49      	ldr	r3, [pc, #292]	@ (8003944 <HAL_RCC_OscConfig+0x470>)
 8003820:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003822:	f003 0302 	and.w	r3, r3, #2
 8003826:	2b00      	cmp	r3, #0
 8003828:	d0ee      	beq.n	8003808 <HAL_RCC_OscConfig+0x334>
 800382a:	e014      	b.n	8003856 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800382c:	f7fd fd56 	bl	80012dc <HAL_GetTick>
 8003830:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003832:	e00a      	b.n	800384a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003834:	f7fd fd52 	bl	80012dc <HAL_GetTick>
 8003838:	4602      	mov	r2, r0
 800383a:	693b      	ldr	r3, [r7, #16]
 800383c:	1ad3      	subs	r3, r2, r3
 800383e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003842:	4293      	cmp	r3, r2
 8003844:	d901      	bls.n	800384a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003846:	2303      	movs	r3, #3
 8003848:	e0b5      	b.n	80039b6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800384a:	4b3e      	ldr	r3, [pc, #248]	@ (8003944 <HAL_RCC_OscConfig+0x470>)
 800384c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800384e:	f003 0302 	and.w	r3, r3, #2
 8003852:	2b00      	cmp	r3, #0
 8003854:	d1ee      	bne.n	8003834 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003856:	7dfb      	ldrb	r3, [r7, #23]
 8003858:	2b01      	cmp	r3, #1
 800385a:	d105      	bne.n	8003868 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800385c:	4b39      	ldr	r3, [pc, #228]	@ (8003944 <HAL_RCC_OscConfig+0x470>)
 800385e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003860:	4a38      	ldr	r2, [pc, #224]	@ (8003944 <HAL_RCC_OscConfig+0x470>)
 8003862:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003866:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	699b      	ldr	r3, [r3, #24]
 800386c:	2b00      	cmp	r3, #0
 800386e:	f000 80a1 	beq.w	80039b4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003872:	4b34      	ldr	r3, [pc, #208]	@ (8003944 <HAL_RCC_OscConfig+0x470>)
 8003874:	689b      	ldr	r3, [r3, #8]
 8003876:	f003 030c 	and.w	r3, r3, #12
 800387a:	2b08      	cmp	r3, #8
 800387c:	d05c      	beq.n	8003938 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	699b      	ldr	r3, [r3, #24]
 8003882:	2b02      	cmp	r3, #2
 8003884:	d141      	bne.n	800390a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003886:	4b31      	ldr	r3, [pc, #196]	@ (800394c <HAL_RCC_OscConfig+0x478>)
 8003888:	2200      	movs	r2, #0
 800388a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800388c:	f7fd fd26 	bl	80012dc <HAL_GetTick>
 8003890:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003892:	e008      	b.n	80038a6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003894:	f7fd fd22 	bl	80012dc <HAL_GetTick>
 8003898:	4602      	mov	r2, r0
 800389a:	693b      	ldr	r3, [r7, #16]
 800389c:	1ad3      	subs	r3, r2, r3
 800389e:	2b02      	cmp	r3, #2
 80038a0:	d901      	bls.n	80038a6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80038a2:	2303      	movs	r3, #3
 80038a4:	e087      	b.n	80039b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038a6:	4b27      	ldr	r3, [pc, #156]	@ (8003944 <HAL_RCC_OscConfig+0x470>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d1f0      	bne.n	8003894 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	69da      	ldr	r2, [r3, #28]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6a1b      	ldr	r3, [r3, #32]
 80038ba:	431a      	orrs	r2, r3
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038c0:	019b      	lsls	r3, r3, #6
 80038c2:	431a      	orrs	r2, r3
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038c8:	085b      	lsrs	r3, r3, #1
 80038ca:	3b01      	subs	r3, #1
 80038cc:	041b      	lsls	r3, r3, #16
 80038ce:	431a      	orrs	r2, r3
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038d4:	061b      	lsls	r3, r3, #24
 80038d6:	491b      	ldr	r1, [pc, #108]	@ (8003944 <HAL_RCC_OscConfig+0x470>)
 80038d8:	4313      	orrs	r3, r2
 80038da:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80038dc:	4b1b      	ldr	r3, [pc, #108]	@ (800394c <HAL_RCC_OscConfig+0x478>)
 80038de:	2201      	movs	r2, #1
 80038e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038e2:	f7fd fcfb 	bl	80012dc <HAL_GetTick>
 80038e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038e8:	e008      	b.n	80038fc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038ea:	f7fd fcf7 	bl	80012dc <HAL_GetTick>
 80038ee:	4602      	mov	r2, r0
 80038f0:	693b      	ldr	r3, [r7, #16]
 80038f2:	1ad3      	subs	r3, r2, r3
 80038f4:	2b02      	cmp	r3, #2
 80038f6:	d901      	bls.n	80038fc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80038f8:	2303      	movs	r3, #3
 80038fa:	e05c      	b.n	80039b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038fc:	4b11      	ldr	r3, [pc, #68]	@ (8003944 <HAL_RCC_OscConfig+0x470>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003904:	2b00      	cmp	r3, #0
 8003906:	d0f0      	beq.n	80038ea <HAL_RCC_OscConfig+0x416>
 8003908:	e054      	b.n	80039b4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800390a:	4b10      	ldr	r3, [pc, #64]	@ (800394c <HAL_RCC_OscConfig+0x478>)
 800390c:	2200      	movs	r2, #0
 800390e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003910:	f7fd fce4 	bl	80012dc <HAL_GetTick>
 8003914:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003916:	e008      	b.n	800392a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003918:	f7fd fce0 	bl	80012dc <HAL_GetTick>
 800391c:	4602      	mov	r2, r0
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	1ad3      	subs	r3, r2, r3
 8003922:	2b02      	cmp	r3, #2
 8003924:	d901      	bls.n	800392a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003926:	2303      	movs	r3, #3
 8003928:	e045      	b.n	80039b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800392a:	4b06      	ldr	r3, [pc, #24]	@ (8003944 <HAL_RCC_OscConfig+0x470>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003932:	2b00      	cmp	r3, #0
 8003934:	d1f0      	bne.n	8003918 <HAL_RCC_OscConfig+0x444>
 8003936:	e03d      	b.n	80039b4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	699b      	ldr	r3, [r3, #24]
 800393c:	2b01      	cmp	r3, #1
 800393e:	d107      	bne.n	8003950 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003940:	2301      	movs	r3, #1
 8003942:	e038      	b.n	80039b6 <HAL_RCC_OscConfig+0x4e2>
 8003944:	40023800 	.word	0x40023800
 8003948:	40007000 	.word	0x40007000
 800394c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003950:	4b1b      	ldr	r3, [pc, #108]	@ (80039c0 <HAL_RCC_OscConfig+0x4ec>)
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	699b      	ldr	r3, [r3, #24]
 800395a:	2b01      	cmp	r3, #1
 800395c:	d028      	beq.n	80039b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003968:	429a      	cmp	r2, r3
 800396a:	d121      	bne.n	80039b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003976:	429a      	cmp	r2, r3
 8003978:	d11a      	bne.n	80039b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800397a:	68fa      	ldr	r2, [r7, #12]
 800397c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003980:	4013      	ands	r3, r2
 8003982:	687a      	ldr	r2, [r7, #4]
 8003984:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003986:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003988:	4293      	cmp	r3, r2
 800398a:	d111      	bne.n	80039b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003996:	085b      	lsrs	r3, r3, #1
 8003998:	3b01      	subs	r3, #1
 800399a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800399c:	429a      	cmp	r2, r3
 800399e:	d107      	bne.n	80039b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039aa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80039ac:	429a      	cmp	r2, r3
 80039ae:	d001      	beq.n	80039b4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80039b0:	2301      	movs	r3, #1
 80039b2:	e000      	b.n	80039b6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80039b4:	2300      	movs	r3, #0
}
 80039b6:	4618      	mov	r0, r3
 80039b8:	3718      	adds	r7, #24
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bd80      	pop	{r7, pc}
 80039be:	bf00      	nop
 80039c0:	40023800 	.word	0x40023800

080039c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b084      	sub	sp, #16
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
 80039cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d101      	bne.n	80039d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80039d4:	2301      	movs	r3, #1
 80039d6:	e0cc      	b.n	8003b72 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80039d8:	4b68      	ldr	r3, [pc, #416]	@ (8003b7c <HAL_RCC_ClockConfig+0x1b8>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f003 030f 	and.w	r3, r3, #15
 80039e0:	683a      	ldr	r2, [r7, #0]
 80039e2:	429a      	cmp	r2, r3
 80039e4:	d90c      	bls.n	8003a00 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039e6:	4b65      	ldr	r3, [pc, #404]	@ (8003b7c <HAL_RCC_ClockConfig+0x1b8>)
 80039e8:	683a      	ldr	r2, [r7, #0]
 80039ea:	b2d2      	uxtb	r2, r2
 80039ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039ee:	4b63      	ldr	r3, [pc, #396]	@ (8003b7c <HAL_RCC_ClockConfig+0x1b8>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f003 030f 	and.w	r3, r3, #15
 80039f6:	683a      	ldr	r2, [r7, #0]
 80039f8:	429a      	cmp	r2, r3
 80039fa:	d001      	beq.n	8003a00 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80039fc:	2301      	movs	r3, #1
 80039fe:	e0b8      	b.n	8003b72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f003 0302 	and.w	r3, r3, #2
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d020      	beq.n	8003a4e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f003 0304 	and.w	r3, r3, #4
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d005      	beq.n	8003a24 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a18:	4b59      	ldr	r3, [pc, #356]	@ (8003b80 <HAL_RCC_ClockConfig+0x1bc>)
 8003a1a:	689b      	ldr	r3, [r3, #8]
 8003a1c:	4a58      	ldr	r2, [pc, #352]	@ (8003b80 <HAL_RCC_ClockConfig+0x1bc>)
 8003a1e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003a22:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f003 0308 	and.w	r3, r3, #8
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d005      	beq.n	8003a3c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a30:	4b53      	ldr	r3, [pc, #332]	@ (8003b80 <HAL_RCC_ClockConfig+0x1bc>)
 8003a32:	689b      	ldr	r3, [r3, #8]
 8003a34:	4a52      	ldr	r2, [pc, #328]	@ (8003b80 <HAL_RCC_ClockConfig+0x1bc>)
 8003a36:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003a3a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a3c:	4b50      	ldr	r3, [pc, #320]	@ (8003b80 <HAL_RCC_ClockConfig+0x1bc>)
 8003a3e:	689b      	ldr	r3, [r3, #8]
 8003a40:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	689b      	ldr	r3, [r3, #8]
 8003a48:	494d      	ldr	r1, [pc, #308]	@ (8003b80 <HAL_RCC_ClockConfig+0x1bc>)
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f003 0301 	and.w	r3, r3, #1
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d044      	beq.n	8003ae4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	2b01      	cmp	r3, #1
 8003a60:	d107      	bne.n	8003a72 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a62:	4b47      	ldr	r3, [pc, #284]	@ (8003b80 <HAL_RCC_ClockConfig+0x1bc>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d119      	bne.n	8003aa2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	e07f      	b.n	8003b72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	2b02      	cmp	r3, #2
 8003a78:	d003      	beq.n	8003a82 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a7e:	2b03      	cmp	r3, #3
 8003a80:	d107      	bne.n	8003a92 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a82:	4b3f      	ldr	r3, [pc, #252]	@ (8003b80 <HAL_RCC_ClockConfig+0x1bc>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d109      	bne.n	8003aa2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	e06f      	b.n	8003b72 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a92:	4b3b      	ldr	r3, [pc, #236]	@ (8003b80 <HAL_RCC_ClockConfig+0x1bc>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f003 0302 	and.w	r3, r3, #2
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d101      	bne.n	8003aa2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	e067      	b.n	8003b72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003aa2:	4b37      	ldr	r3, [pc, #220]	@ (8003b80 <HAL_RCC_ClockConfig+0x1bc>)
 8003aa4:	689b      	ldr	r3, [r3, #8]
 8003aa6:	f023 0203 	bic.w	r2, r3, #3
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	4934      	ldr	r1, [pc, #208]	@ (8003b80 <HAL_RCC_ClockConfig+0x1bc>)
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ab4:	f7fd fc12 	bl	80012dc <HAL_GetTick>
 8003ab8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003aba:	e00a      	b.n	8003ad2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003abc:	f7fd fc0e 	bl	80012dc <HAL_GetTick>
 8003ac0:	4602      	mov	r2, r0
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	1ad3      	subs	r3, r2, r3
 8003ac6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d901      	bls.n	8003ad2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003ace:	2303      	movs	r3, #3
 8003ad0:	e04f      	b.n	8003b72 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ad2:	4b2b      	ldr	r3, [pc, #172]	@ (8003b80 <HAL_RCC_ClockConfig+0x1bc>)
 8003ad4:	689b      	ldr	r3, [r3, #8]
 8003ad6:	f003 020c 	and.w	r2, r3, #12
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	009b      	lsls	r3, r3, #2
 8003ae0:	429a      	cmp	r2, r3
 8003ae2:	d1eb      	bne.n	8003abc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ae4:	4b25      	ldr	r3, [pc, #148]	@ (8003b7c <HAL_RCC_ClockConfig+0x1b8>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f003 030f 	and.w	r3, r3, #15
 8003aec:	683a      	ldr	r2, [r7, #0]
 8003aee:	429a      	cmp	r2, r3
 8003af0:	d20c      	bcs.n	8003b0c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003af2:	4b22      	ldr	r3, [pc, #136]	@ (8003b7c <HAL_RCC_ClockConfig+0x1b8>)
 8003af4:	683a      	ldr	r2, [r7, #0]
 8003af6:	b2d2      	uxtb	r2, r2
 8003af8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003afa:	4b20      	ldr	r3, [pc, #128]	@ (8003b7c <HAL_RCC_ClockConfig+0x1b8>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f003 030f 	and.w	r3, r3, #15
 8003b02:	683a      	ldr	r2, [r7, #0]
 8003b04:	429a      	cmp	r2, r3
 8003b06:	d001      	beq.n	8003b0c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	e032      	b.n	8003b72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f003 0304 	and.w	r3, r3, #4
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d008      	beq.n	8003b2a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b18:	4b19      	ldr	r3, [pc, #100]	@ (8003b80 <HAL_RCC_ClockConfig+0x1bc>)
 8003b1a:	689b      	ldr	r3, [r3, #8]
 8003b1c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	68db      	ldr	r3, [r3, #12]
 8003b24:	4916      	ldr	r1, [pc, #88]	@ (8003b80 <HAL_RCC_ClockConfig+0x1bc>)
 8003b26:	4313      	orrs	r3, r2
 8003b28:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f003 0308 	and.w	r3, r3, #8
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d009      	beq.n	8003b4a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b36:	4b12      	ldr	r3, [pc, #72]	@ (8003b80 <HAL_RCC_ClockConfig+0x1bc>)
 8003b38:	689b      	ldr	r3, [r3, #8]
 8003b3a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	691b      	ldr	r3, [r3, #16]
 8003b42:	00db      	lsls	r3, r3, #3
 8003b44:	490e      	ldr	r1, [pc, #56]	@ (8003b80 <HAL_RCC_ClockConfig+0x1bc>)
 8003b46:	4313      	orrs	r3, r2
 8003b48:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003b4a:	f000 f889 	bl	8003c60 <HAL_RCC_GetSysClockFreq>
 8003b4e:	4602      	mov	r2, r0
 8003b50:	4b0b      	ldr	r3, [pc, #44]	@ (8003b80 <HAL_RCC_ClockConfig+0x1bc>)
 8003b52:	689b      	ldr	r3, [r3, #8]
 8003b54:	091b      	lsrs	r3, r3, #4
 8003b56:	f003 030f 	and.w	r3, r3, #15
 8003b5a:	490a      	ldr	r1, [pc, #40]	@ (8003b84 <HAL_RCC_ClockConfig+0x1c0>)
 8003b5c:	5ccb      	ldrb	r3, [r1, r3]
 8003b5e:	fa22 f303 	lsr.w	r3, r2, r3
 8003b62:	4a09      	ldr	r2, [pc, #36]	@ (8003b88 <HAL_RCC_ClockConfig+0x1c4>)
 8003b64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003b66:	4b09      	ldr	r3, [pc, #36]	@ (8003b8c <HAL_RCC_ClockConfig+0x1c8>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	f7fd fb72 	bl	8001254 <HAL_InitTick>

  return HAL_OK;
 8003b70:	2300      	movs	r3, #0
}
 8003b72:	4618      	mov	r0, r3
 8003b74:	3710      	adds	r7, #16
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bd80      	pop	{r7, pc}
 8003b7a:	bf00      	nop
 8003b7c:	40023c00 	.word	0x40023c00
 8003b80:	40023800 	.word	0x40023800
 8003b84:	08009f54 	.word	0x08009f54
 8003b88:	20000000 	.word	0x20000000
 8003b8c:	20000004 	.word	0x20000004

08003b90 <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b08c      	sub	sp, #48	@ 0x30
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	60f8      	str	r0, [r7, #12]
 8003b98:	60b9      	str	r1, [r7, #8]
 8003b9a:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d129      	bne.n	8003bf6 <HAL_RCC_MCOConfig+0x66>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	61bb      	str	r3, [r7, #24]
 8003ba6:	4b2b      	ldr	r3, [pc, #172]	@ (8003c54 <HAL_RCC_MCOConfig+0xc4>)
 8003ba8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003baa:	4a2a      	ldr	r2, [pc, #168]	@ (8003c54 <HAL_RCC_MCOConfig+0xc4>)
 8003bac:	f043 0301 	orr.w	r3, r3, #1
 8003bb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8003bb2:	4b28      	ldr	r3, [pc, #160]	@ (8003c54 <HAL_RCC_MCOConfig+0xc4>)
 8003bb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bb6:	f003 0301 	and.w	r3, r3, #1
 8003bba:	61bb      	str	r3, [r7, #24]
 8003bbc:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8003bbe:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003bc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bc4:	2302      	movs	r3, #2
 8003bc6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003bc8:	2303      	movs	r3, #3
 8003bca:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bcc:	2300      	movs	r3, #0
 8003bce:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8003bd4:	f107 031c 	add.w	r3, r7, #28
 8003bd8:	4619      	mov	r1, r3
 8003bda:	481f      	ldr	r0, [pc, #124]	@ (8003c58 <HAL_RCC_MCOConfig+0xc8>)
 8003bdc:	f7fe f84a 	bl	8001c74 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8003be0:	4b1c      	ldr	r3, [pc, #112]	@ (8003c54 <HAL_RCC_MCOConfig+0xc4>)
 8003be2:	689b      	ldr	r3, [r3, #8]
 8003be4:	f023 62ec 	bic.w	r2, r3, #123731968	@ 0x7600000
 8003be8:	68b9      	ldr	r1, [r7, #8]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	430b      	orrs	r3, r1
 8003bee:	4919      	ldr	r1, [pc, #100]	@ (8003c54 <HAL_RCC_MCOConfig+0xc4>)
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	608b      	str	r3, [r1, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 8003bf4:	e029      	b.n	8003c4a <HAL_RCC_MCOConfig+0xba>
    __MCO2_CLK_ENABLE();
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	617b      	str	r3, [r7, #20]
 8003bfa:	4b16      	ldr	r3, [pc, #88]	@ (8003c54 <HAL_RCC_MCOConfig+0xc4>)
 8003bfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bfe:	4a15      	ldr	r2, [pc, #84]	@ (8003c54 <HAL_RCC_MCOConfig+0xc4>)
 8003c00:	f043 0304 	orr.w	r3, r3, #4
 8003c04:	6313      	str	r3, [r2, #48]	@ 0x30
 8003c06:	4b13      	ldr	r3, [pc, #76]	@ (8003c54 <HAL_RCC_MCOConfig+0xc4>)
 8003c08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c0a:	f003 0304 	and.w	r3, r3, #4
 8003c0e:	617b      	str	r3, [r7, #20]
 8003c10:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8003c12:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003c16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c18:	2302      	movs	r3, #2
 8003c1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c1c:	2303      	movs	r3, #3
 8003c1e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c20:	2300      	movs	r3, #0
 8003c22:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8003c24:	2300      	movs	r3, #0
 8003c26:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8003c28:	f107 031c 	add.w	r3, r7, #28
 8003c2c:	4619      	mov	r1, r3
 8003c2e:	480b      	ldr	r0, [pc, #44]	@ (8003c5c <HAL_RCC_MCOConfig+0xcc>)
 8003c30:	f7fe f820 	bl	8001c74 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 8003c34:	4b07      	ldr	r3, [pc, #28]	@ (8003c54 <HAL_RCC_MCOConfig+0xc4>)
 8003c36:	689b      	ldr	r3, [r3, #8]
 8003c38:	f023 4278 	bic.w	r2, r3, #4160749568	@ 0xf8000000
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	00d9      	lsls	r1, r3, #3
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	430b      	orrs	r3, r1
 8003c44:	4903      	ldr	r1, [pc, #12]	@ (8003c54 <HAL_RCC_MCOConfig+0xc4>)
 8003c46:	4313      	orrs	r3, r2
 8003c48:	608b      	str	r3, [r1, #8]
}
 8003c4a:	bf00      	nop
 8003c4c:	3730      	adds	r7, #48	@ 0x30
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd80      	pop	{r7, pc}
 8003c52:	bf00      	nop
 8003c54:	40023800 	.word	0x40023800
 8003c58:	40020000 	.word	0x40020000
 8003c5c:	40020800 	.word	0x40020800

08003c60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c64:	b094      	sub	sp, #80	@ 0x50
 8003c66:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003c68:	2300      	movs	r3, #0
 8003c6a:	647b      	str	r3, [r7, #68]	@ 0x44
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003c70:	2300      	movs	r3, #0
 8003c72:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003c74:	2300      	movs	r3, #0
 8003c76:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003c78:	4b79      	ldr	r3, [pc, #484]	@ (8003e60 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c7a:	689b      	ldr	r3, [r3, #8]
 8003c7c:	f003 030c 	and.w	r3, r3, #12
 8003c80:	2b08      	cmp	r3, #8
 8003c82:	d00d      	beq.n	8003ca0 <HAL_RCC_GetSysClockFreq+0x40>
 8003c84:	2b08      	cmp	r3, #8
 8003c86:	f200 80e1 	bhi.w	8003e4c <HAL_RCC_GetSysClockFreq+0x1ec>
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d002      	beq.n	8003c94 <HAL_RCC_GetSysClockFreq+0x34>
 8003c8e:	2b04      	cmp	r3, #4
 8003c90:	d003      	beq.n	8003c9a <HAL_RCC_GetSysClockFreq+0x3a>
 8003c92:	e0db      	b.n	8003e4c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003c94:	4b73      	ldr	r3, [pc, #460]	@ (8003e64 <HAL_RCC_GetSysClockFreq+0x204>)
 8003c96:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8003c98:	e0db      	b.n	8003e52 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003c9a:	4b73      	ldr	r3, [pc, #460]	@ (8003e68 <HAL_RCC_GetSysClockFreq+0x208>)
 8003c9c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003c9e:	e0d8      	b.n	8003e52 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ca0:	4b6f      	ldr	r3, [pc, #444]	@ (8003e60 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003ca8:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003caa:	4b6d      	ldr	r3, [pc, #436]	@ (8003e60 <HAL_RCC_GetSysClockFreq+0x200>)
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d063      	beq.n	8003d7e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003cb6:	4b6a      	ldr	r3, [pc, #424]	@ (8003e60 <HAL_RCC_GetSysClockFreq+0x200>)
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	099b      	lsrs	r3, r3, #6
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003cc0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003cc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cc8:	633b      	str	r3, [r7, #48]	@ 0x30
 8003cca:	2300      	movs	r3, #0
 8003ccc:	637b      	str	r3, [r7, #52]	@ 0x34
 8003cce:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003cd2:	4622      	mov	r2, r4
 8003cd4:	462b      	mov	r3, r5
 8003cd6:	f04f 0000 	mov.w	r0, #0
 8003cda:	f04f 0100 	mov.w	r1, #0
 8003cde:	0159      	lsls	r1, r3, #5
 8003ce0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ce4:	0150      	lsls	r0, r2, #5
 8003ce6:	4602      	mov	r2, r0
 8003ce8:	460b      	mov	r3, r1
 8003cea:	4621      	mov	r1, r4
 8003cec:	1a51      	subs	r1, r2, r1
 8003cee:	6139      	str	r1, [r7, #16]
 8003cf0:	4629      	mov	r1, r5
 8003cf2:	eb63 0301 	sbc.w	r3, r3, r1
 8003cf6:	617b      	str	r3, [r7, #20]
 8003cf8:	f04f 0200 	mov.w	r2, #0
 8003cfc:	f04f 0300 	mov.w	r3, #0
 8003d00:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003d04:	4659      	mov	r1, fp
 8003d06:	018b      	lsls	r3, r1, #6
 8003d08:	4651      	mov	r1, sl
 8003d0a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003d0e:	4651      	mov	r1, sl
 8003d10:	018a      	lsls	r2, r1, #6
 8003d12:	4651      	mov	r1, sl
 8003d14:	ebb2 0801 	subs.w	r8, r2, r1
 8003d18:	4659      	mov	r1, fp
 8003d1a:	eb63 0901 	sbc.w	r9, r3, r1
 8003d1e:	f04f 0200 	mov.w	r2, #0
 8003d22:	f04f 0300 	mov.w	r3, #0
 8003d26:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003d2a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003d2e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003d32:	4690      	mov	r8, r2
 8003d34:	4699      	mov	r9, r3
 8003d36:	4623      	mov	r3, r4
 8003d38:	eb18 0303 	adds.w	r3, r8, r3
 8003d3c:	60bb      	str	r3, [r7, #8]
 8003d3e:	462b      	mov	r3, r5
 8003d40:	eb49 0303 	adc.w	r3, r9, r3
 8003d44:	60fb      	str	r3, [r7, #12]
 8003d46:	f04f 0200 	mov.w	r2, #0
 8003d4a:	f04f 0300 	mov.w	r3, #0
 8003d4e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003d52:	4629      	mov	r1, r5
 8003d54:	024b      	lsls	r3, r1, #9
 8003d56:	4621      	mov	r1, r4
 8003d58:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003d5c:	4621      	mov	r1, r4
 8003d5e:	024a      	lsls	r2, r1, #9
 8003d60:	4610      	mov	r0, r2
 8003d62:	4619      	mov	r1, r3
 8003d64:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003d66:	2200      	movs	r2, #0
 8003d68:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003d6a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003d6c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003d70:	f7fc fa96 	bl	80002a0 <__aeabi_uldivmod>
 8003d74:	4602      	mov	r2, r0
 8003d76:	460b      	mov	r3, r1
 8003d78:	4613      	mov	r3, r2
 8003d7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003d7c:	e058      	b.n	8003e30 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d7e:	4b38      	ldr	r3, [pc, #224]	@ (8003e60 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	099b      	lsrs	r3, r3, #6
 8003d84:	2200      	movs	r2, #0
 8003d86:	4618      	mov	r0, r3
 8003d88:	4611      	mov	r1, r2
 8003d8a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003d8e:	623b      	str	r3, [r7, #32]
 8003d90:	2300      	movs	r3, #0
 8003d92:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d94:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003d98:	4642      	mov	r2, r8
 8003d9a:	464b      	mov	r3, r9
 8003d9c:	f04f 0000 	mov.w	r0, #0
 8003da0:	f04f 0100 	mov.w	r1, #0
 8003da4:	0159      	lsls	r1, r3, #5
 8003da6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003daa:	0150      	lsls	r0, r2, #5
 8003dac:	4602      	mov	r2, r0
 8003dae:	460b      	mov	r3, r1
 8003db0:	4641      	mov	r1, r8
 8003db2:	ebb2 0a01 	subs.w	sl, r2, r1
 8003db6:	4649      	mov	r1, r9
 8003db8:	eb63 0b01 	sbc.w	fp, r3, r1
 8003dbc:	f04f 0200 	mov.w	r2, #0
 8003dc0:	f04f 0300 	mov.w	r3, #0
 8003dc4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003dc8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003dcc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003dd0:	ebb2 040a 	subs.w	r4, r2, sl
 8003dd4:	eb63 050b 	sbc.w	r5, r3, fp
 8003dd8:	f04f 0200 	mov.w	r2, #0
 8003ddc:	f04f 0300 	mov.w	r3, #0
 8003de0:	00eb      	lsls	r3, r5, #3
 8003de2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003de6:	00e2      	lsls	r2, r4, #3
 8003de8:	4614      	mov	r4, r2
 8003dea:	461d      	mov	r5, r3
 8003dec:	4643      	mov	r3, r8
 8003dee:	18e3      	adds	r3, r4, r3
 8003df0:	603b      	str	r3, [r7, #0]
 8003df2:	464b      	mov	r3, r9
 8003df4:	eb45 0303 	adc.w	r3, r5, r3
 8003df8:	607b      	str	r3, [r7, #4]
 8003dfa:	f04f 0200 	mov.w	r2, #0
 8003dfe:	f04f 0300 	mov.w	r3, #0
 8003e02:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003e06:	4629      	mov	r1, r5
 8003e08:	028b      	lsls	r3, r1, #10
 8003e0a:	4621      	mov	r1, r4
 8003e0c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003e10:	4621      	mov	r1, r4
 8003e12:	028a      	lsls	r2, r1, #10
 8003e14:	4610      	mov	r0, r2
 8003e16:	4619      	mov	r1, r3
 8003e18:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	61bb      	str	r3, [r7, #24]
 8003e1e:	61fa      	str	r2, [r7, #28]
 8003e20:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e24:	f7fc fa3c 	bl	80002a0 <__aeabi_uldivmod>
 8003e28:	4602      	mov	r2, r0
 8003e2a:	460b      	mov	r3, r1
 8003e2c:	4613      	mov	r3, r2
 8003e2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003e30:	4b0b      	ldr	r3, [pc, #44]	@ (8003e60 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	0c1b      	lsrs	r3, r3, #16
 8003e36:	f003 0303 	and.w	r3, r3, #3
 8003e3a:	3301      	adds	r3, #1
 8003e3c:	005b      	lsls	r3, r3, #1
 8003e3e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8003e40:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003e42:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003e44:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e48:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003e4a:	e002      	b.n	8003e52 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003e4c:	4b05      	ldr	r3, [pc, #20]	@ (8003e64 <HAL_RCC_GetSysClockFreq+0x204>)
 8003e4e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003e50:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e52:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003e54:	4618      	mov	r0, r3
 8003e56:	3750      	adds	r7, #80	@ 0x50
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e5e:	bf00      	nop
 8003e60:	40023800 	.word	0x40023800
 8003e64:	00f42400 	.word	0x00f42400
 8003e68:	007a1200 	.word	0x007a1200

08003e6c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e70:	4b03      	ldr	r3, [pc, #12]	@ (8003e80 <HAL_RCC_GetHCLKFreq+0x14>)
 8003e72:	681b      	ldr	r3, [r3, #0]
}
 8003e74:	4618      	mov	r0, r3
 8003e76:	46bd      	mov	sp, r7
 8003e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7c:	4770      	bx	lr
 8003e7e:	bf00      	nop
 8003e80:	20000000 	.word	0x20000000

08003e84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003e88:	f7ff fff0 	bl	8003e6c <HAL_RCC_GetHCLKFreq>
 8003e8c:	4602      	mov	r2, r0
 8003e8e:	4b05      	ldr	r3, [pc, #20]	@ (8003ea4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003e90:	689b      	ldr	r3, [r3, #8]
 8003e92:	0a9b      	lsrs	r3, r3, #10
 8003e94:	f003 0307 	and.w	r3, r3, #7
 8003e98:	4903      	ldr	r1, [pc, #12]	@ (8003ea8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e9a:	5ccb      	ldrb	r3, [r1, r3]
 8003e9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	bd80      	pop	{r7, pc}
 8003ea4:	40023800 	.word	0x40023800
 8003ea8:	08009f64 	.word	0x08009f64

08003eac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003eb0:	f7ff ffdc 	bl	8003e6c <HAL_RCC_GetHCLKFreq>
 8003eb4:	4602      	mov	r2, r0
 8003eb6:	4b05      	ldr	r3, [pc, #20]	@ (8003ecc <HAL_RCC_GetPCLK2Freq+0x20>)
 8003eb8:	689b      	ldr	r3, [r3, #8]
 8003eba:	0b5b      	lsrs	r3, r3, #13
 8003ebc:	f003 0307 	and.w	r3, r3, #7
 8003ec0:	4903      	ldr	r1, [pc, #12]	@ (8003ed0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ec2:	5ccb      	ldrb	r3, [r1, r3]
 8003ec4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ec8:	4618      	mov	r0, r3
 8003eca:	bd80      	pop	{r7, pc}
 8003ecc:	40023800 	.word	0x40023800
 8003ed0:	08009f64 	.word	0x08009f64

08003ed4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b082      	sub	sp, #8
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d101      	bne.n	8003ee6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	e041      	b.n	8003f6a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003eec:	b2db      	uxtb	r3, r3
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d106      	bne.n	8003f00 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003efa:	6878      	ldr	r0, [r7, #4]
 8003efc:	f7fc fe0a 	bl	8000b14 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2202      	movs	r2, #2
 8003f04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681a      	ldr	r2, [r3, #0]
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	3304      	adds	r3, #4
 8003f10:	4619      	mov	r1, r3
 8003f12:	4610      	mov	r0, r2
 8003f14:	f000 fa7e 	bl	8004414 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2201      	movs	r2, #1
 8003f24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2201      	movs	r2, #1
 8003f34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2201      	movs	r2, #1
 8003f44:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2201      	movs	r2, #1
 8003f54:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2201      	movs	r2, #1
 8003f5c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2201      	movs	r2, #1
 8003f64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003f68:	2300      	movs	r3, #0
}
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	3708      	adds	r7, #8
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bd80      	pop	{r7, pc}
	...

08003f74 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003f74:	b480      	push	{r7}
 8003f76:	b085      	sub	sp, #20
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f82:	b2db      	uxtb	r3, r3
 8003f84:	2b01      	cmp	r3, #1
 8003f86:	d001      	beq.n	8003f8c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	e04e      	b.n	800402a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2202      	movs	r2, #2
 8003f90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	68da      	ldr	r2, [r3, #12]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f042 0201 	orr.w	r2, r2, #1
 8003fa2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4a23      	ldr	r2, [pc, #140]	@ (8004038 <HAL_TIM_Base_Start_IT+0xc4>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d022      	beq.n	8003ff4 <HAL_TIM_Base_Start_IT+0x80>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003fb6:	d01d      	beq.n	8003ff4 <HAL_TIM_Base_Start_IT+0x80>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a1f      	ldr	r2, [pc, #124]	@ (800403c <HAL_TIM_Base_Start_IT+0xc8>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d018      	beq.n	8003ff4 <HAL_TIM_Base_Start_IT+0x80>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a1e      	ldr	r2, [pc, #120]	@ (8004040 <HAL_TIM_Base_Start_IT+0xcc>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d013      	beq.n	8003ff4 <HAL_TIM_Base_Start_IT+0x80>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a1c      	ldr	r2, [pc, #112]	@ (8004044 <HAL_TIM_Base_Start_IT+0xd0>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d00e      	beq.n	8003ff4 <HAL_TIM_Base_Start_IT+0x80>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a1b      	ldr	r2, [pc, #108]	@ (8004048 <HAL_TIM_Base_Start_IT+0xd4>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d009      	beq.n	8003ff4 <HAL_TIM_Base_Start_IT+0x80>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a19      	ldr	r2, [pc, #100]	@ (800404c <HAL_TIM_Base_Start_IT+0xd8>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d004      	beq.n	8003ff4 <HAL_TIM_Base_Start_IT+0x80>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a18      	ldr	r2, [pc, #96]	@ (8004050 <HAL_TIM_Base_Start_IT+0xdc>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d111      	bne.n	8004018 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	689b      	ldr	r3, [r3, #8]
 8003ffa:	f003 0307 	and.w	r3, r3, #7
 8003ffe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	2b06      	cmp	r3, #6
 8004004:	d010      	beq.n	8004028 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	681a      	ldr	r2, [r3, #0]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f042 0201 	orr.w	r2, r2, #1
 8004014:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004016:	e007      	b.n	8004028 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	681a      	ldr	r2, [r3, #0]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f042 0201 	orr.w	r2, r2, #1
 8004026:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004028:	2300      	movs	r3, #0
}
 800402a:	4618      	mov	r0, r3
 800402c:	3714      	adds	r7, #20
 800402e:	46bd      	mov	sp, r7
 8004030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004034:	4770      	bx	lr
 8004036:	bf00      	nop
 8004038:	40010000 	.word	0x40010000
 800403c:	40000400 	.word	0x40000400
 8004040:	40000800 	.word	0x40000800
 8004044:	40000c00 	.word	0x40000c00
 8004048:	40010400 	.word	0x40010400
 800404c:	40014000 	.word	0x40014000
 8004050:	40001800 	.word	0x40001800

08004054 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b084      	sub	sp, #16
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	68db      	ldr	r3, [r3, #12]
 8004062:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	691b      	ldr	r3, [r3, #16]
 800406a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	f003 0302 	and.w	r3, r3, #2
 8004072:	2b00      	cmp	r3, #0
 8004074:	d020      	beq.n	80040b8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	f003 0302 	and.w	r3, r3, #2
 800407c:	2b00      	cmp	r3, #0
 800407e:	d01b      	beq.n	80040b8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f06f 0202 	mvn.w	r2, #2
 8004088:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2201      	movs	r2, #1
 800408e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	699b      	ldr	r3, [r3, #24]
 8004096:	f003 0303 	and.w	r3, r3, #3
 800409a:	2b00      	cmp	r3, #0
 800409c:	d003      	beq.n	80040a6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800409e:	6878      	ldr	r0, [r7, #4]
 80040a0:	f000 f999 	bl	80043d6 <HAL_TIM_IC_CaptureCallback>
 80040a4:	e005      	b.n	80040b2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80040a6:	6878      	ldr	r0, [r7, #4]
 80040a8:	f000 f98b 	bl	80043c2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040ac:	6878      	ldr	r0, [r7, #4]
 80040ae:	f000 f99c 	bl	80043ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2200      	movs	r2, #0
 80040b6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	f003 0304 	and.w	r3, r3, #4
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d020      	beq.n	8004104 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	f003 0304 	and.w	r3, r3, #4
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d01b      	beq.n	8004104 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f06f 0204 	mvn.w	r2, #4
 80040d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2202      	movs	r2, #2
 80040da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	699b      	ldr	r3, [r3, #24]
 80040e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d003      	beq.n	80040f2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040ea:	6878      	ldr	r0, [r7, #4]
 80040ec:	f000 f973 	bl	80043d6 <HAL_TIM_IC_CaptureCallback>
 80040f0:	e005      	b.n	80040fe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040f2:	6878      	ldr	r0, [r7, #4]
 80040f4:	f000 f965 	bl	80043c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040f8:	6878      	ldr	r0, [r7, #4]
 80040fa:	f000 f976 	bl	80043ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2200      	movs	r2, #0
 8004102:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004104:	68bb      	ldr	r3, [r7, #8]
 8004106:	f003 0308 	and.w	r3, r3, #8
 800410a:	2b00      	cmp	r3, #0
 800410c:	d020      	beq.n	8004150 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	f003 0308 	and.w	r3, r3, #8
 8004114:	2b00      	cmp	r3, #0
 8004116:	d01b      	beq.n	8004150 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f06f 0208 	mvn.w	r2, #8
 8004120:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2204      	movs	r2, #4
 8004126:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	69db      	ldr	r3, [r3, #28]
 800412e:	f003 0303 	and.w	r3, r3, #3
 8004132:	2b00      	cmp	r3, #0
 8004134:	d003      	beq.n	800413e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004136:	6878      	ldr	r0, [r7, #4]
 8004138:	f000 f94d 	bl	80043d6 <HAL_TIM_IC_CaptureCallback>
 800413c:	e005      	b.n	800414a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800413e:	6878      	ldr	r0, [r7, #4]
 8004140:	f000 f93f 	bl	80043c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004144:	6878      	ldr	r0, [r7, #4]
 8004146:	f000 f950 	bl	80043ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2200      	movs	r2, #0
 800414e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004150:	68bb      	ldr	r3, [r7, #8]
 8004152:	f003 0310 	and.w	r3, r3, #16
 8004156:	2b00      	cmp	r3, #0
 8004158:	d020      	beq.n	800419c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	f003 0310 	and.w	r3, r3, #16
 8004160:	2b00      	cmp	r3, #0
 8004162:	d01b      	beq.n	800419c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f06f 0210 	mvn.w	r2, #16
 800416c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2208      	movs	r2, #8
 8004172:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	69db      	ldr	r3, [r3, #28]
 800417a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800417e:	2b00      	cmp	r3, #0
 8004180:	d003      	beq.n	800418a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004182:	6878      	ldr	r0, [r7, #4]
 8004184:	f000 f927 	bl	80043d6 <HAL_TIM_IC_CaptureCallback>
 8004188:	e005      	b.n	8004196 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800418a:	6878      	ldr	r0, [r7, #4]
 800418c:	f000 f919 	bl	80043c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004190:	6878      	ldr	r0, [r7, #4]
 8004192:	f000 f92a 	bl	80043ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2200      	movs	r2, #0
 800419a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800419c:	68bb      	ldr	r3, [r7, #8]
 800419e:	f003 0301 	and.w	r3, r3, #1
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d00c      	beq.n	80041c0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	f003 0301 	and.w	r3, r3, #1
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d007      	beq.n	80041c0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f06f 0201 	mvn.w	r2, #1
 80041b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80041ba:	6878      	ldr	r0, [r7, #4]
 80041bc:	f7fc fbcc 	bl	8000958 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80041c0:	68bb      	ldr	r3, [r7, #8]
 80041c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d00c      	beq.n	80041e4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d007      	beq.n	80041e4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80041dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80041de:	6878      	ldr	r0, [r7, #4]
 80041e0:	f000 fae4 	bl	80047ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d00c      	beq.n	8004208 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d007      	beq.n	8004208 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004200:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004202:	6878      	ldr	r0, [r7, #4]
 8004204:	f000 f8fb 	bl	80043fe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004208:	68bb      	ldr	r3, [r7, #8]
 800420a:	f003 0320 	and.w	r3, r3, #32
 800420e:	2b00      	cmp	r3, #0
 8004210:	d00c      	beq.n	800422c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	f003 0320 	and.w	r3, r3, #32
 8004218:	2b00      	cmp	r3, #0
 800421a:	d007      	beq.n	800422c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f06f 0220 	mvn.w	r2, #32
 8004224:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004226:	6878      	ldr	r0, [r7, #4]
 8004228:	f000 fab6 	bl	8004798 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800422c:	bf00      	nop
 800422e:	3710      	adds	r7, #16
 8004230:	46bd      	mov	sp, r7
 8004232:	bd80      	pop	{r7, pc}

08004234 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b084      	sub	sp, #16
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
 800423c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800423e:	2300      	movs	r3, #0
 8004240:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004248:	2b01      	cmp	r3, #1
 800424a:	d101      	bne.n	8004250 <HAL_TIM_ConfigClockSource+0x1c>
 800424c:	2302      	movs	r3, #2
 800424e:	e0b4      	b.n	80043ba <HAL_TIM_ConfigClockSource+0x186>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2201      	movs	r2, #1
 8004254:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2202      	movs	r2, #2
 800425c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	689b      	ldr	r3, [r3, #8]
 8004266:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800426e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004276:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	68ba      	ldr	r2, [r7, #8]
 800427e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004288:	d03e      	beq.n	8004308 <HAL_TIM_ConfigClockSource+0xd4>
 800428a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800428e:	f200 8087 	bhi.w	80043a0 <HAL_TIM_ConfigClockSource+0x16c>
 8004292:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004296:	f000 8086 	beq.w	80043a6 <HAL_TIM_ConfigClockSource+0x172>
 800429a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800429e:	d87f      	bhi.n	80043a0 <HAL_TIM_ConfigClockSource+0x16c>
 80042a0:	2b70      	cmp	r3, #112	@ 0x70
 80042a2:	d01a      	beq.n	80042da <HAL_TIM_ConfigClockSource+0xa6>
 80042a4:	2b70      	cmp	r3, #112	@ 0x70
 80042a6:	d87b      	bhi.n	80043a0 <HAL_TIM_ConfigClockSource+0x16c>
 80042a8:	2b60      	cmp	r3, #96	@ 0x60
 80042aa:	d050      	beq.n	800434e <HAL_TIM_ConfigClockSource+0x11a>
 80042ac:	2b60      	cmp	r3, #96	@ 0x60
 80042ae:	d877      	bhi.n	80043a0 <HAL_TIM_ConfigClockSource+0x16c>
 80042b0:	2b50      	cmp	r3, #80	@ 0x50
 80042b2:	d03c      	beq.n	800432e <HAL_TIM_ConfigClockSource+0xfa>
 80042b4:	2b50      	cmp	r3, #80	@ 0x50
 80042b6:	d873      	bhi.n	80043a0 <HAL_TIM_ConfigClockSource+0x16c>
 80042b8:	2b40      	cmp	r3, #64	@ 0x40
 80042ba:	d058      	beq.n	800436e <HAL_TIM_ConfigClockSource+0x13a>
 80042bc:	2b40      	cmp	r3, #64	@ 0x40
 80042be:	d86f      	bhi.n	80043a0 <HAL_TIM_ConfigClockSource+0x16c>
 80042c0:	2b30      	cmp	r3, #48	@ 0x30
 80042c2:	d064      	beq.n	800438e <HAL_TIM_ConfigClockSource+0x15a>
 80042c4:	2b30      	cmp	r3, #48	@ 0x30
 80042c6:	d86b      	bhi.n	80043a0 <HAL_TIM_ConfigClockSource+0x16c>
 80042c8:	2b20      	cmp	r3, #32
 80042ca:	d060      	beq.n	800438e <HAL_TIM_ConfigClockSource+0x15a>
 80042cc:	2b20      	cmp	r3, #32
 80042ce:	d867      	bhi.n	80043a0 <HAL_TIM_ConfigClockSource+0x16c>
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d05c      	beq.n	800438e <HAL_TIM_ConfigClockSource+0x15a>
 80042d4:	2b10      	cmp	r3, #16
 80042d6:	d05a      	beq.n	800438e <HAL_TIM_ConfigClockSource+0x15a>
 80042d8:	e062      	b.n	80043a0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80042ea:	f000 f9b9 	bl	8004660 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	689b      	ldr	r3, [r3, #8]
 80042f4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80042fc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	68ba      	ldr	r2, [r7, #8]
 8004304:	609a      	str	r2, [r3, #8]
      break;
 8004306:	e04f      	b.n	80043a8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004318:	f000 f9a2 	bl	8004660 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	689a      	ldr	r2, [r3, #8]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800432a:	609a      	str	r2, [r3, #8]
      break;
 800432c:	e03c      	b.n	80043a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800433a:	461a      	mov	r2, r3
 800433c:	f000 f916 	bl	800456c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	2150      	movs	r1, #80	@ 0x50
 8004346:	4618      	mov	r0, r3
 8004348:	f000 f96f 	bl	800462a <TIM_ITRx_SetConfig>
      break;
 800434c:	e02c      	b.n	80043a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800435a:	461a      	mov	r2, r3
 800435c:	f000 f935 	bl	80045ca <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	2160      	movs	r1, #96	@ 0x60
 8004366:	4618      	mov	r0, r3
 8004368:	f000 f95f 	bl	800462a <TIM_ITRx_SetConfig>
      break;
 800436c:	e01c      	b.n	80043a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800437a:	461a      	mov	r2, r3
 800437c:	f000 f8f6 	bl	800456c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	2140      	movs	r1, #64	@ 0x40
 8004386:	4618      	mov	r0, r3
 8004388:	f000 f94f 	bl	800462a <TIM_ITRx_SetConfig>
      break;
 800438c:	e00c      	b.n	80043a8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681a      	ldr	r2, [r3, #0]
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4619      	mov	r1, r3
 8004398:	4610      	mov	r0, r2
 800439a:	f000 f946 	bl	800462a <TIM_ITRx_SetConfig>
      break;
 800439e:	e003      	b.n	80043a8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80043a0:	2301      	movs	r3, #1
 80043a2:	73fb      	strb	r3, [r7, #15]
      break;
 80043a4:	e000      	b.n	80043a8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80043a6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2201      	movs	r2, #1
 80043ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2200      	movs	r2, #0
 80043b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80043b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80043ba:	4618      	mov	r0, r3
 80043bc:	3710      	adds	r7, #16
 80043be:	46bd      	mov	sp, r7
 80043c0:	bd80      	pop	{r7, pc}

080043c2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80043c2:	b480      	push	{r7}
 80043c4:	b083      	sub	sp, #12
 80043c6:	af00      	add	r7, sp, #0
 80043c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80043ca:	bf00      	nop
 80043cc:	370c      	adds	r7, #12
 80043ce:	46bd      	mov	sp, r7
 80043d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d4:	4770      	bx	lr

080043d6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80043d6:	b480      	push	{r7}
 80043d8:	b083      	sub	sp, #12
 80043da:	af00      	add	r7, sp, #0
 80043dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80043de:	bf00      	nop
 80043e0:	370c      	adds	r7, #12
 80043e2:	46bd      	mov	sp, r7
 80043e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e8:	4770      	bx	lr

080043ea <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80043ea:	b480      	push	{r7}
 80043ec:	b083      	sub	sp, #12
 80043ee:	af00      	add	r7, sp, #0
 80043f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80043f2:	bf00      	nop
 80043f4:	370c      	adds	r7, #12
 80043f6:	46bd      	mov	sp, r7
 80043f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fc:	4770      	bx	lr

080043fe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80043fe:	b480      	push	{r7}
 8004400:	b083      	sub	sp, #12
 8004402:	af00      	add	r7, sp, #0
 8004404:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004406:	bf00      	nop
 8004408:	370c      	adds	r7, #12
 800440a:	46bd      	mov	sp, r7
 800440c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004410:	4770      	bx	lr
	...

08004414 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004414:	b480      	push	{r7}
 8004416:	b085      	sub	sp, #20
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
 800441c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	4a46      	ldr	r2, [pc, #280]	@ (8004540 <TIM_Base_SetConfig+0x12c>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d013      	beq.n	8004454 <TIM_Base_SetConfig+0x40>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004432:	d00f      	beq.n	8004454 <TIM_Base_SetConfig+0x40>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	4a43      	ldr	r2, [pc, #268]	@ (8004544 <TIM_Base_SetConfig+0x130>)
 8004438:	4293      	cmp	r3, r2
 800443a:	d00b      	beq.n	8004454 <TIM_Base_SetConfig+0x40>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	4a42      	ldr	r2, [pc, #264]	@ (8004548 <TIM_Base_SetConfig+0x134>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d007      	beq.n	8004454 <TIM_Base_SetConfig+0x40>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	4a41      	ldr	r2, [pc, #260]	@ (800454c <TIM_Base_SetConfig+0x138>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d003      	beq.n	8004454 <TIM_Base_SetConfig+0x40>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	4a40      	ldr	r2, [pc, #256]	@ (8004550 <TIM_Base_SetConfig+0x13c>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d108      	bne.n	8004466 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800445a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	68fa      	ldr	r2, [r7, #12]
 8004462:	4313      	orrs	r3, r2
 8004464:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	4a35      	ldr	r2, [pc, #212]	@ (8004540 <TIM_Base_SetConfig+0x12c>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d02b      	beq.n	80044c6 <TIM_Base_SetConfig+0xb2>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004474:	d027      	beq.n	80044c6 <TIM_Base_SetConfig+0xb2>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	4a32      	ldr	r2, [pc, #200]	@ (8004544 <TIM_Base_SetConfig+0x130>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d023      	beq.n	80044c6 <TIM_Base_SetConfig+0xb2>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	4a31      	ldr	r2, [pc, #196]	@ (8004548 <TIM_Base_SetConfig+0x134>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d01f      	beq.n	80044c6 <TIM_Base_SetConfig+0xb2>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	4a30      	ldr	r2, [pc, #192]	@ (800454c <TIM_Base_SetConfig+0x138>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d01b      	beq.n	80044c6 <TIM_Base_SetConfig+0xb2>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	4a2f      	ldr	r2, [pc, #188]	@ (8004550 <TIM_Base_SetConfig+0x13c>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d017      	beq.n	80044c6 <TIM_Base_SetConfig+0xb2>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	4a2e      	ldr	r2, [pc, #184]	@ (8004554 <TIM_Base_SetConfig+0x140>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d013      	beq.n	80044c6 <TIM_Base_SetConfig+0xb2>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	4a2d      	ldr	r2, [pc, #180]	@ (8004558 <TIM_Base_SetConfig+0x144>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d00f      	beq.n	80044c6 <TIM_Base_SetConfig+0xb2>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	4a2c      	ldr	r2, [pc, #176]	@ (800455c <TIM_Base_SetConfig+0x148>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d00b      	beq.n	80044c6 <TIM_Base_SetConfig+0xb2>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	4a2b      	ldr	r2, [pc, #172]	@ (8004560 <TIM_Base_SetConfig+0x14c>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d007      	beq.n	80044c6 <TIM_Base_SetConfig+0xb2>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	4a2a      	ldr	r2, [pc, #168]	@ (8004564 <TIM_Base_SetConfig+0x150>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d003      	beq.n	80044c6 <TIM_Base_SetConfig+0xb2>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	4a29      	ldr	r2, [pc, #164]	@ (8004568 <TIM_Base_SetConfig+0x154>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d108      	bne.n	80044d8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80044cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	68db      	ldr	r3, [r3, #12]
 80044d2:	68fa      	ldr	r2, [r7, #12]
 80044d4:	4313      	orrs	r3, r2
 80044d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	695b      	ldr	r3, [r3, #20]
 80044e2:	4313      	orrs	r3, r2
 80044e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	68fa      	ldr	r2, [r7, #12]
 80044ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	689a      	ldr	r2, [r3, #8]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	681a      	ldr	r2, [r3, #0]
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	4a10      	ldr	r2, [pc, #64]	@ (8004540 <TIM_Base_SetConfig+0x12c>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d003      	beq.n	800450c <TIM_Base_SetConfig+0xf8>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	4a12      	ldr	r2, [pc, #72]	@ (8004550 <TIM_Base_SetConfig+0x13c>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d103      	bne.n	8004514 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	691a      	ldr	r2, [r3, #16]
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2201      	movs	r2, #1
 8004518:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	691b      	ldr	r3, [r3, #16]
 800451e:	f003 0301 	and.w	r3, r3, #1
 8004522:	2b01      	cmp	r3, #1
 8004524:	d105      	bne.n	8004532 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	691b      	ldr	r3, [r3, #16]
 800452a:	f023 0201 	bic.w	r2, r3, #1
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	611a      	str	r2, [r3, #16]
  }
}
 8004532:	bf00      	nop
 8004534:	3714      	adds	r7, #20
 8004536:	46bd      	mov	sp, r7
 8004538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453c:	4770      	bx	lr
 800453e:	bf00      	nop
 8004540:	40010000 	.word	0x40010000
 8004544:	40000400 	.word	0x40000400
 8004548:	40000800 	.word	0x40000800
 800454c:	40000c00 	.word	0x40000c00
 8004550:	40010400 	.word	0x40010400
 8004554:	40014000 	.word	0x40014000
 8004558:	40014400 	.word	0x40014400
 800455c:	40014800 	.word	0x40014800
 8004560:	40001800 	.word	0x40001800
 8004564:	40001c00 	.word	0x40001c00
 8004568:	40002000 	.word	0x40002000

0800456c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800456c:	b480      	push	{r7}
 800456e:	b087      	sub	sp, #28
 8004570:	af00      	add	r7, sp, #0
 8004572:	60f8      	str	r0, [r7, #12]
 8004574:	60b9      	str	r1, [r7, #8]
 8004576:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	6a1b      	ldr	r3, [r3, #32]
 800457c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	6a1b      	ldr	r3, [r3, #32]
 8004582:	f023 0201 	bic.w	r2, r3, #1
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	699b      	ldr	r3, [r3, #24]
 800458e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004590:	693b      	ldr	r3, [r7, #16]
 8004592:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004596:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	011b      	lsls	r3, r3, #4
 800459c:	693a      	ldr	r2, [r7, #16]
 800459e:	4313      	orrs	r3, r2
 80045a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80045a2:	697b      	ldr	r3, [r7, #20]
 80045a4:	f023 030a 	bic.w	r3, r3, #10
 80045a8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80045aa:	697a      	ldr	r2, [r7, #20]
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	4313      	orrs	r3, r2
 80045b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	693a      	ldr	r2, [r7, #16]
 80045b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	697a      	ldr	r2, [r7, #20]
 80045bc:	621a      	str	r2, [r3, #32]
}
 80045be:	bf00      	nop
 80045c0:	371c      	adds	r7, #28
 80045c2:	46bd      	mov	sp, r7
 80045c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c8:	4770      	bx	lr

080045ca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80045ca:	b480      	push	{r7}
 80045cc:	b087      	sub	sp, #28
 80045ce:	af00      	add	r7, sp, #0
 80045d0:	60f8      	str	r0, [r7, #12]
 80045d2:	60b9      	str	r1, [r7, #8]
 80045d4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	6a1b      	ldr	r3, [r3, #32]
 80045da:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	6a1b      	ldr	r3, [r3, #32]
 80045e0:	f023 0210 	bic.w	r2, r3, #16
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	699b      	ldr	r3, [r3, #24]
 80045ec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80045ee:	693b      	ldr	r3, [r7, #16]
 80045f0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80045f4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	031b      	lsls	r3, r3, #12
 80045fa:	693a      	ldr	r2, [r7, #16]
 80045fc:	4313      	orrs	r3, r2
 80045fe:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004600:	697b      	ldr	r3, [r7, #20]
 8004602:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004606:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004608:	68bb      	ldr	r3, [r7, #8]
 800460a:	011b      	lsls	r3, r3, #4
 800460c:	697a      	ldr	r2, [r7, #20]
 800460e:	4313      	orrs	r3, r2
 8004610:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	693a      	ldr	r2, [r7, #16]
 8004616:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	697a      	ldr	r2, [r7, #20]
 800461c:	621a      	str	r2, [r3, #32]
}
 800461e:	bf00      	nop
 8004620:	371c      	adds	r7, #28
 8004622:	46bd      	mov	sp, r7
 8004624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004628:	4770      	bx	lr

0800462a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800462a:	b480      	push	{r7}
 800462c:	b085      	sub	sp, #20
 800462e:	af00      	add	r7, sp, #0
 8004630:	6078      	str	r0, [r7, #4]
 8004632:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	689b      	ldr	r3, [r3, #8]
 8004638:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004640:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004642:	683a      	ldr	r2, [r7, #0]
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	4313      	orrs	r3, r2
 8004648:	f043 0307 	orr.w	r3, r3, #7
 800464c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	68fa      	ldr	r2, [r7, #12]
 8004652:	609a      	str	r2, [r3, #8]
}
 8004654:	bf00      	nop
 8004656:	3714      	adds	r7, #20
 8004658:	46bd      	mov	sp, r7
 800465a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465e:	4770      	bx	lr

08004660 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004660:	b480      	push	{r7}
 8004662:	b087      	sub	sp, #28
 8004664:	af00      	add	r7, sp, #0
 8004666:	60f8      	str	r0, [r7, #12]
 8004668:	60b9      	str	r1, [r7, #8]
 800466a:	607a      	str	r2, [r7, #4]
 800466c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	689b      	ldr	r3, [r3, #8]
 8004672:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004674:	697b      	ldr	r3, [r7, #20]
 8004676:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800467a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	021a      	lsls	r2, r3, #8
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	431a      	orrs	r2, r3
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	4313      	orrs	r3, r2
 8004688:	697a      	ldr	r2, [r7, #20]
 800468a:	4313      	orrs	r3, r2
 800468c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	697a      	ldr	r2, [r7, #20]
 8004692:	609a      	str	r2, [r3, #8]
}
 8004694:	bf00      	nop
 8004696:	371c      	adds	r7, #28
 8004698:	46bd      	mov	sp, r7
 800469a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469e:	4770      	bx	lr

080046a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80046a0:	b480      	push	{r7}
 80046a2:	b085      	sub	sp, #20
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
 80046a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80046b0:	2b01      	cmp	r3, #1
 80046b2:	d101      	bne.n	80046b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80046b4:	2302      	movs	r3, #2
 80046b6:	e05a      	b.n	800476e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2201      	movs	r2, #1
 80046bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2202      	movs	r2, #2
 80046c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	689b      	ldr	r3, [r3, #8]
 80046d6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046de:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	68fa      	ldr	r2, [r7, #12]
 80046e6:	4313      	orrs	r3, r2
 80046e8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	68fa      	ldr	r2, [r7, #12]
 80046f0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4a21      	ldr	r2, [pc, #132]	@ (800477c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d022      	beq.n	8004742 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004704:	d01d      	beq.n	8004742 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4a1d      	ldr	r2, [pc, #116]	@ (8004780 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d018      	beq.n	8004742 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a1b      	ldr	r2, [pc, #108]	@ (8004784 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d013      	beq.n	8004742 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4a1a      	ldr	r2, [pc, #104]	@ (8004788 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d00e      	beq.n	8004742 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4a18      	ldr	r2, [pc, #96]	@ (800478c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d009      	beq.n	8004742 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4a17      	ldr	r2, [pc, #92]	@ (8004790 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d004      	beq.n	8004742 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4a15      	ldr	r2, [pc, #84]	@ (8004794 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d10c      	bne.n	800475c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004742:	68bb      	ldr	r3, [r7, #8]
 8004744:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004748:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	68ba      	ldr	r2, [r7, #8]
 8004750:	4313      	orrs	r3, r2
 8004752:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	68ba      	ldr	r2, [r7, #8]
 800475a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2201      	movs	r2, #1
 8004760:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2200      	movs	r2, #0
 8004768:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800476c:	2300      	movs	r3, #0
}
 800476e:	4618      	mov	r0, r3
 8004770:	3714      	adds	r7, #20
 8004772:	46bd      	mov	sp, r7
 8004774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004778:	4770      	bx	lr
 800477a:	bf00      	nop
 800477c:	40010000 	.word	0x40010000
 8004780:	40000400 	.word	0x40000400
 8004784:	40000800 	.word	0x40000800
 8004788:	40000c00 	.word	0x40000c00
 800478c:	40010400 	.word	0x40010400
 8004790:	40014000 	.word	0x40014000
 8004794:	40001800 	.word	0x40001800

08004798 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004798:	b480      	push	{r7}
 800479a:	b083      	sub	sp, #12
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80047a0:	bf00      	nop
 80047a2:	370c      	adds	r7, #12
 80047a4:	46bd      	mov	sp, r7
 80047a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047aa:	4770      	bx	lr

080047ac <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80047ac:	b480      	push	{r7}
 80047ae:	b083      	sub	sp, #12
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80047b4:	bf00      	nop
 80047b6:	370c      	adds	r7, #12
 80047b8:	46bd      	mov	sp, r7
 80047ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047be:	4770      	bx	lr

080047c0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b082      	sub	sp, #8
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d101      	bne.n	80047d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80047ce:	2301      	movs	r3, #1
 80047d0:	e042      	b.n	8004858 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80047d8:	b2db      	uxtb	r3, r3
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d106      	bne.n	80047ec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2200      	movs	r2, #0
 80047e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80047e6:	6878      	ldr	r0, [r7, #4]
 80047e8:	f7fc fa10 	bl	8000c0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2224      	movs	r2, #36	@ 0x24
 80047f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	68da      	ldr	r2, [r3, #12]
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004802:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004804:	6878      	ldr	r0, [r7, #4]
 8004806:	f000 facb 	bl	8004da0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	691a      	ldr	r2, [r3, #16]
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004818:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	695a      	ldr	r2, [r3, #20]
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004828:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	68da      	ldr	r2, [r3, #12]
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004838:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2200      	movs	r2, #0
 800483e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2220      	movs	r2, #32
 8004844:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2220      	movs	r2, #32
 800484c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2200      	movs	r2, #0
 8004854:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004856:	2300      	movs	r3, #0
}
 8004858:	4618      	mov	r0, r3
 800485a:	3708      	adds	r7, #8
 800485c:	46bd      	mov	sp, r7
 800485e:	bd80      	pop	{r7, pc}

08004860 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b08c      	sub	sp, #48	@ 0x30
 8004864:	af00      	add	r7, sp, #0
 8004866:	60f8      	str	r0, [r7, #12]
 8004868:	60b9      	str	r1, [r7, #8]
 800486a:	4613      	mov	r3, r2
 800486c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004874:	b2db      	uxtb	r3, r3
 8004876:	2b20      	cmp	r3, #32
 8004878:	d14a      	bne.n	8004910 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 800487a:	68bb      	ldr	r3, [r7, #8]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d002      	beq.n	8004886 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8004880:	88fb      	ldrh	r3, [r7, #6]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d101      	bne.n	800488a <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8004886:	2301      	movs	r3, #1
 8004888:	e043      	b.n	8004912 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	2201      	movs	r2, #1
 800488e:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	2200      	movs	r2, #0
 8004894:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8004896:	88fb      	ldrh	r3, [r7, #6]
 8004898:	461a      	mov	r2, r3
 800489a:	68b9      	ldr	r1, [r7, #8]
 800489c:	68f8      	ldr	r0, [r7, #12]
 800489e:	f000 f959 	bl	8004b54 <UART_Start_Receive_DMA>
 80048a2:	4603      	mov	r3, r0
 80048a4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80048a8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d12c      	bne.n	800490a <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048b4:	2b01      	cmp	r3, #1
 80048b6:	d125      	bne.n	8004904 <HAL_UARTEx_ReceiveToIdle_DMA+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 80048b8:	2300      	movs	r3, #0
 80048ba:	613b      	str	r3, [r7, #16]
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	613b      	str	r3, [r7, #16]
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	613b      	str	r3, [r7, #16]
 80048cc:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	330c      	adds	r3, #12
 80048d4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048d6:	69bb      	ldr	r3, [r7, #24]
 80048d8:	e853 3f00 	ldrex	r3, [r3]
 80048dc:	617b      	str	r3, [r7, #20]
   return(result);
 80048de:	697b      	ldr	r3, [r7, #20]
 80048e0:	f043 0310 	orr.w	r3, r3, #16
 80048e4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	330c      	adds	r3, #12
 80048ec:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80048ee:	627a      	str	r2, [r7, #36]	@ 0x24
 80048f0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048f2:	6a39      	ldr	r1, [r7, #32]
 80048f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80048f6:	e841 2300 	strex	r3, r2, [r1]
 80048fa:	61fb      	str	r3, [r7, #28]
   return(result);
 80048fc:	69fb      	ldr	r3, [r7, #28]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d1e5      	bne.n	80048ce <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 8004902:	e002      	b.n	800490a <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8004904:	2301      	movs	r3, #1
 8004906:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 800490a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800490e:	e000      	b.n	8004912 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8004910:	2302      	movs	r3, #2
  }
}
 8004912:	4618      	mov	r0, r3
 8004914:	3730      	adds	r7, #48	@ 0x30
 8004916:	46bd      	mov	sp, r7
 8004918:	bd80      	pop	{r7, pc}

0800491a <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800491a:	b480      	push	{r7}
 800491c:	b083      	sub	sp, #12
 800491e:	af00      	add	r7, sp, #0
 8004920:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004922:	bf00      	nop
 8004924:	370c      	adds	r7, #12
 8004926:	46bd      	mov	sp, r7
 8004928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492c:	4770      	bx	lr

0800492e <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800492e:	b480      	push	{r7}
 8004930:	b083      	sub	sp, #12
 8004932:	af00      	add	r7, sp, #0
 8004934:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004936:	bf00      	nop
 8004938:	370c      	adds	r7, #12
 800493a:	46bd      	mov	sp, r7
 800493c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004940:	4770      	bx	lr

08004942 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004942:	b480      	push	{r7}
 8004944:	b083      	sub	sp, #12
 8004946:	af00      	add	r7, sp, #0
 8004948:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800494a:	bf00      	nop
 800494c:	370c      	adds	r7, #12
 800494e:	46bd      	mov	sp, r7
 8004950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004954:	4770      	bx	lr

08004956 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004956:	b580      	push	{r7, lr}
 8004958:	b09c      	sub	sp, #112	@ 0x70
 800495a:	af00      	add	r7, sp, #0
 800495c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004962:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800496e:	2b00      	cmp	r3, #0
 8004970:	d172      	bne.n	8004a58 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8004972:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004974:	2200      	movs	r2, #0
 8004976:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004978:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	330c      	adds	r3, #12
 800497e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004980:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004982:	e853 3f00 	ldrex	r3, [r3]
 8004986:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004988:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800498a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800498e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004990:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	330c      	adds	r3, #12
 8004996:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8004998:	65ba      	str	r2, [r7, #88]	@ 0x58
 800499a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800499c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800499e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80049a0:	e841 2300 	strex	r3, r2, [r1]
 80049a4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80049a6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d1e5      	bne.n	8004978 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049ac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	3314      	adds	r3, #20
 80049b2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049b6:	e853 3f00 	ldrex	r3, [r3]
 80049ba:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80049bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049be:	f023 0301 	bic.w	r3, r3, #1
 80049c2:	667b      	str	r3, [r7, #100]	@ 0x64
 80049c4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	3314      	adds	r3, #20
 80049ca:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80049cc:	647a      	str	r2, [r7, #68]	@ 0x44
 80049ce:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049d0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80049d2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80049d4:	e841 2300 	strex	r3, r2, [r1]
 80049d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80049da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d1e5      	bne.n	80049ac <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80049e0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	3314      	adds	r3, #20
 80049e6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049ea:	e853 3f00 	ldrex	r3, [r3]
 80049ee:	623b      	str	r3, [r7, #32]
   return(result);
 80049f0:	6a3b      	ldr	r3, [r7, #32]
 80049f2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80049f6:	663b      	str	r3, [r7, #96]	@ 0x60
 80049f8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	3314      	adds	r3, #20
 80049fe:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004a00:	633a      	str	r2, [r7, #48]	@ 0x30
 8004a02:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a04:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004a06:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004a08:	e841 2300 	strex	r3, r2, [r1]
 8004a0c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004a0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d1e5      	bne.n	80049e0 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004a14:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004a16:	2220      	movs	r2, #32
 8004a18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a1c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004a1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a20:	2b01      	cmp	r3, #1
 8004a22:	d119      	bne.n	8004a58 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a24:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	330c      	adds	r3, #12
 8004a2a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a2c:	693b      	ldr	r3, [r7, #16]
 8004a2e:	e853 3f00 	ldrex	r3, [r3]
 8004a32:	60fb      	str	r3, [r7, #12]
   return(result);
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	f023 0310 	bic.w	r3, r3, #16
 8004a3a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004a3c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	330c      	adds	r3, #12
 8004a42:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004a44:	61fa      	str	r2, [r7, #28]
 8004a46:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a48:	69b9      	ldr	r1, [r7, #24]
 8004a4a:	69fa      	ldr	r2, [r7, #28]
 8004a4c:	e841 2300 	strex	r3, r2, [r1]
 8004a50:	617b      	str	r3, [r7, #20]
   return(result);
 8004a52:	697b      	ldr	r3, [r7, #20]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d1e5      	bne.n	8004a24 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004a58:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a5e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004a60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a62:	2b01      	cmp	r3, #1
 8004a64:	d106      	bne.n	8004a74 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004a66:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004a68:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004a6a:	4619      	mov	r1, r3
 8004a6c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8004a6e:	f7fb ff8b 	bl	8000988 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004a72:	e002      	b.n	8004a7a <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8004a74:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8004a76:	f7ff ff50 	bl	800491a <HAL_UART_RxCpltCallback>
}
 8004a7a:	bf00      	nop
 8004a7c:	3770      	adds	r7, #112	@ 0x70
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	bd80      	pop	{r7, pc}

08004a82 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004a82:	b580      	push	{r7, lr}
 8004a84:	b084      	sub	sp, #16
 8004a86:	af00      	add	r7, sp, #0
 8004a88:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a8e:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	2201      	movs	r2, #1
 8004a94:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a9a:	2b01      	cmp	r3, #1
 8004a9c:	d108      	bne.n	8004ab0 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004aa2:	085b      	lsrs	r3, r3, #1
 8004aa4:	b29b      	uxth	r3, r3
 8004aa6:	4619      	mov	r1, r3
 8004aa8:	68f8      	ldr	r0, [r7, #12]
 8004aaa:	f7fb ff6d 	bl	8000988 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004aae:	e002      	b.n	8004ab6 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8004ab0:	68f8      	ldr	r0, [r7, #12]
 8004ab2:	f7ff ff3c 	bl	800492e <HAL_UART_RxHalfCpltCallback>
}
 8004ab6:	bf00      	nop
 8004ab8:	3710      	adds	r7, #16
 8004aba:	46bd      	mov	sp, r7
 8004abc:	bd80      	pop	{r7, pc}

08004abe <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004abe:	b580      	push	{r7, lr}
 8004ac0:	b084      	sub	sp, #16
 8004ac2:	af00      	add	r7, sp, #0
 8004ac4:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ace:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004ad0:	68bb      	ldr	r3, [r7, #8]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	695b      	ldr	r3, [r3, #20]
 8004ad6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ada:	2b80      	cmp	r3, #128	@ 0x80
 8004adc:	bf0c      	ite	eq
 8004ade:	2301      	moveq	r3, #1
 8004ae0:	2300      	movne	r3, #0
 8004ae2:	b2db      	uxtb	r3, r3
 8004ae4:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004ae6:	68bb      	ldr	r3, [r7, #8]
 8004ae8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004aec:	b2db      	uxtb	r3, r3
 8004aee:	2b21      	cmp	r3, #33	@ 0x21
 8004af0:	d108      	bne.n	8004b04 <UART_DMAError+0x46>
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d005      	beq.n	8004b04 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	2200      	movs	r2, #0
 8004afc:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8004afe:	68b8      	ldr	r0, [r7, #8]
 8004b00:	f000 f8c2 	bl	8004c88 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	695b      	ldr	r3, [r3, #20]
 8004b0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b0e:	2b40      	cmp	r3, #64	@ 0x40
 8004b10:	bf0c      	ite	eq
 8004b12:	2301      	moveq	r3, #1
 8004b14:	2300      	movne	r3, #0
 8004b16:	b2db      	uxtb	r3, r3
 8004b18:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004b1a:	68bb      	ldr	r3, [r7, #8]
 8004b1c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004b20:	b2db      	uxtb	r3, r3
 8004b22:	2b22      	cmp	r3, #34	@ 0x22
 8004b24:	d108      	bne.n	8004b38 <UART_DMAError+0x7a>
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d005      	beq.n	8004b38 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	2200      	movs	r2, #0
 8004b30:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8004b32:	68b8      	ldr	r0, [r7, #8]
 8004b34:	f000 f8d0 	bl	8004cd8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004b38:	68bb      	ldr	r3, [r7, #8]
 8004b3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b3c:	f043 0210 	orr.w	r2, r3, #16
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004b44:	68b8      	ldr	r0, [r7, #8]
 8004b46:	f7ff fefc 	bl	8004942 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004b4a:	bf00      	nop
 8004b4c:	3710      	adds	r7, #16
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	bd80      	pop	{r7, pc}
	...

08004b54 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b098      	sub	sp, #96	@ 0x60
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	60f8      	str	r0, [r7, #12]
 8004b5c:	60b9      	str	r1, [r7, #8]
 8004b5e:	4613      	mov	r3, r2
 8004b60:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8004b62:	68ba      	ldr	r2, [r7, #8]
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	88fa      	ldrh	r2, [r7, #6]
 8004b6c:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	2200      	movs	r2, #0
 8004b72:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	2222      	movs	r2, #34	@ 0x22
 8004b78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b80:	4a3e      	ldr	r2, [pc, #248]	@ (8004c7c <UART_Start_Receive_DMA+0x128>)
 8004b82:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b88:	4a3d      	ldr	r2, [pc, #244]	@ (8004c80 <UART_Start_Receive_DMA+0x12c>)
 8004b8a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b90:	4a3c      	ldr	r2, [pc, #240]	@ (8004c84 <UART_Start_Receive_DMA+0x130>)
 8004b92:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b98:	2200      	movs	r2, #0
 8004b9a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8004b9c:	f107 0308 	add.w	r3, r7, #8
 8004ba0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	3304      	adds	r3, #4
 8004bac:	4619      	mov	r1, r3
 8004bae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004bb0:	681a      	ldr	r2, [r3, #0]
 8004bb2:	88fb      	ldrh	r3, [r7, #6]
 8004bb4:	f7fc fd9c 	bl	80016f0 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8004bb8:	2300      	movs	r3, #0
 8004bba:	613b      	str	r3, [r7, #16]
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	613b      	str	r3, [r7, #16]
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	685b      	ldr	r3, [r3, #4]
 8004bca:	613b      	str	r3, [r7, #16]
 8004bcc:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	691b      	ldr	r3, [r3, #16]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d019      	beq.n	8004c0a <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	330c      	adds	r3, #12
 8004bdc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bde:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004be0:	e853 3f00 	ldrex	r3, [r3]
 8004be4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004be6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004be8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004bec:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	330c      	adds	r3, #12
 8004bf4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004bf6:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8004bf8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bfa:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8004bfc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004bfe:	e841 2300 	strex	r3, r2, [r1]
 8004c02:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8004c04:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d1e5      	bne.n	8004bd6 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	3314      	adds	r3, #20
 8004c10:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c14:	e853 3f00 	ldrex	r3, [r3]
 8004c18:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004c1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c1c:	f043 0301 	orr.w	r3, r3, #1
 8004c20:	657b      	str	r3, [r7, #84]	@ 0x54
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	3314      	adds	r3, #20
 8004c28:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004c2a:	63ba      	str	r2, [r7, #56]	@ 0x38
 8004c2c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c2e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8004c30:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004c32:	e841 2300 	strex	r3, r2, [r1]
 8004c36:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004c38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d1e5      	bne.n	8004c0a <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	3314      	adds	r3, #20
 8004c44:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c46:	69bb      	ldr	r3, [r7, #24]
 8004c48:	e853 3f00 	ldrex	r3, [r3]
 8004c4c:	617b      	str	r3, [r7, #20]
   return(result);
 8004c4e:	697b      	ldr	r3, [r7, #20]
 8004c50:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004c54:	653b      	str	r3, [r7, #80]	@ 0x50
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	3314      	adds	r3, #20
 8004c5c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8004c5e:	627a      	str	r2, [r7, #36]	@ 0x24
 8004c60:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c62:	6a39      	ldr	r1, [r7, #32]
 8004c64:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c66:	e841 2300 	strex	r3, r2, [r1]
 8004c6a:	61fb      	str	r3, [r7, #28]
   return(result);
 8004c6c:	69fb      	ldr	r3, [r7, #28]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d1e5      	bne.n	8004c3e <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8004c72:	2300      	movs	r3, #0
}
 8004c74:	4618      	mov	r0, r3
 8004c76:	3760      	adds	r7, #96	@ 0x60
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	bd80      	pop	{r7, pc}
 8004c7c:	08004957 	.word	0x08004957
 8004c80:	08004a83 	.word	0x08004a83
 8004c84:	08004abf 	.word	0x08004abf

08004c88 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004c88:	b480      	push	{r7}
 8004c8a:	b089      	sub	sp, #36	@ 0x24
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	330c      	adds	r3, #12
 8004c96:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	e853 3f00 	ldrex	r3, [r3]
 8004c9e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8004ca6:	61fb      	str	r3, [r7, #28]
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	330c      	adds	r3, #12
 8004cae:	69fa      	ldr	r2, [r7, #28]
 8004cb0:	61ba      	str	r2, [r7, #24]
 8004cb2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cb4:	6979      	ldr	r1, [r7, #20]
 8004cb6:	69ba      	ldr	r2, [r7, #24]
 8004cb8:	e841 2300 	strex	r3, r2, [r1]
 8004cbc:	613b      	str	r3, [r7, #16]
   return(result);
 8004cbe:	693b      	ldr	r3, [r7, #16]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d1e5      	bne.n	8004c90 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2220      	movs	r2, #32
 8004cc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8004ccc:	bf00      	nop
 8004cce:	3724      	adds	r7, #36	@ 0x24
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd6:	4770      	bx	lr

08004cd8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004cd8:	b480      	push	{r7}
 8004cda:	b095      	sub	sp, #84	@ 0x54
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	330c      	adds	r3, #12
 8004ce6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ce8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004cea:	e853 3f00 	ldrex	r3, [r3]
 8004cee:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004cf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cf2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004cf6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	330c      	adds	r3, #12
 8004cfe:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004d00:	643a      	str	r2, [r7, #64]	@ 0x40
 8004d02:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d04:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004d06:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004d08:	e841 2300 	strex	r3, r2, [r1]
 8004d0c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004d0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d1e5      	bne.n	8004ce0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	3314      	adds	r3, #20
 8004d1a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d1c:	6a3b      	ldr	r3, [r7, #32]
 8004d1e:	e853 3f00 	ldrex	r3, [r3]
 8004d22:	61fb      	str	r3, [r7, #28]
   return(result);
 8004d24:	69fb      	ldr	r3, [r7, #28]
 8004d26:	f023 0301 	bic.w	r3, r3, #1
 8004d2a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	3314      	adds	r3, #20
 8004d32:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004d34:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004d36:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d38:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004d3a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004d3c:	e841 2300 	strex	r3, r2, [r1]
 8004d40:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004d42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d1e5      	bne.n	8004d14 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d4c:	2b01      	cmp	r3, #1
 8004d4e:	d119      	bne.n	8004d84 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	330c      	adds	r3, #12
 8004d56:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	e853 3f00 	ldrex	r3, [r3]
 8004d5e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004d60:	68bb      	ldr	r3, [r7, #8]
 8004d62:	f023 0310 	bic.w	r3, r3, #16
 8004d66:	647b      	str	r3, [r7, #68]	@ 0x44
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	330c      	adds	r3, #12
 8004d6e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004d70:	61ba      	str	r2, [r7, #24]
 8004d72:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d74:	6979      	ldr	r1, [r7, #20]
 8004d76:	69ba      	ldr	r2, [r7, #24]
 8004d78:	e841 2300 	strex	r3, r2, [r1]
 8004d7c:	613b      	str	r3, [r7, #16]
   return(result);
 8004d7e:	693b      	ldr	r3, [r7, #16]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d1e5      	bne.n	8004d50 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2220      	movs	r2, #32
 8004d88:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2200      	movs	r2, #0
 8004d90:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004d92:	bf00      	nop
 8004d94:	3754      	adds	r7, #84	@ 0x54
 8004d96:	46bd      	mov	sp, r7
 8004d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9c:	4770      	bx	lr
	...

08004da0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004da0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004da4:	b0c0      	sub	sp, #256	@ 0x100
 8004da6:	af00      	add	r7, sp, #0
 8004da8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004dac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	691b      	ldr	r3, [r3, #16]
 8004db4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004db8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004dbc:	68d9      	ldr	r1, [r3, #12]
 8004dbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004dc2:	681a      	ldr	r2, [r3, #0]
 8004dc4:	ea40 0301 	orr.w	r3, r0, r1
 8004dc8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004dca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004dce:	689a      	ldr	r2, [r3, #8]
 8004dd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004dd4:	691b      	ldr	r3, [r3, #16]
 8004dd6:	431a      	orrs	r2, r3
 8004dd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ddc:	695b      	ldr	r3, [r3, #20]
 8004dde:	431a      	orrs	r2, r3
 8004de0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004de4:	69db      	ldr	r3, [r3, #28]
 8004de6:	4313      	orrs	r3, r2
 8004de8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004dec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	68db      	ldr	r3, [r3, #12]
 8004df4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004df8:	f021 010c 	bic.w	r1, r1, #12
 8004dfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e00:	681a      	ldr	r2, [r3, #0]
 8004e02:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004e06:	430b      	orrs	r3, r1
 8004e08:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004e0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	695b      	ldr	r3, [r3, #20]
 8004e12:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004e16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e1a:	6999      	ldr	r1, [r3, #24]
 8004e1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e20:	681a      	ldr	r2, [r3, #0]
 8004e22:	ea40 0301 	orr.w	r3, r0, r1
 8004e26:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004e28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e2c:	681a      	ldr	r2, [r3, #0]
 8004e2e:	4b8f      	ldr	r3, [pc, #572]	@ (800506c <UART_SetConfig+0x2cc>)
 8004e30:	429a      	cmp	r2, r3
 8004e32:	d005      	beq.n	8004e40 <UART_SetConfig+0xa0>
 8004e34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e38:	681a      	ldr	r2, [r3, #0]
 8004e3a:	4b8d      	ldr	r3, [pc, #564]	@ (8005070 <UART_SetConfig+0x2d0>)
 8004e3c:	429a      	cmp	r2, r3
 8004e3e:	d104      	bne.n	8004e4a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004e40:	f7ff f834 	bl	8003eac <HAL_RCC_GetPCLK2Freq>
 8004e44:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004e48:	e003      	b.n	8004e52 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004e4a:	f7ff f81b 	bl	8003e84 <HAL_RCC_GetPCLK1Freq>
 8004e4e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e56:	69db      	ldr	r3, [r3, #28]
 8004e58:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004e5c:	f040 810c 	bne.w	8005078 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004e60:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004e64:	2200      	movs	r2, #0
 8004e66:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004e6a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004e6e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004e72:	4622      	mov	r2, r4
 8004e74:	462b      	mov	r3, r5
 8004e76:	1891      	adds	r1, r2, r2
 8004e78:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004e7a:	415b      	adcs	r3, r3
 8004e7c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004e7e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004e82:	4621      	mov	r1, r4
 8004e84:	eb12 0801 	adds.w	r8, r2, r1
 8004e88:	4629      	mov	r1, r5
 8004e8a:	eb43 0901 	adc.w	r9, r3, r1
 8004e8e:	f04f 0200 	mov.w	r2, #0
 8004e92:	f04f 0300 	mov.w	r3, #0
 8004e96:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004e9a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004e9e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004ea2:	4690      	mov	r8, r2
 8004ea4:	4699      	mov	r9, r3
 8004ea6:	4623      	mov	r3, r4
 8004ea8:	eb18 0303 	adds.w	r3, r8, r3
 8004eac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004eb0:	462b      	mov	r3, r5
 8004eb2:	eb49 0303 	adc.w	r3, r9, r3
 8004eb6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004eba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ebe:	685b      	ldr	r3, [r3, #4]
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004ec6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004eca:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004ece:	460b      	mov	r3, r1
 8004ed0:	18db      	adds	r3, r3, r3
 8004ed2:	653b      	str	r3, [r7, #80]	@ 0x50
 8004ed4:	4613      	mov	r3, r2
 8004ed6:	eb42 0303 	adc.w	r3, r2, r3
 8004eda:	657b      	str	r3, [r7, #84]	@ 0x54
 8004edc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004ee0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004ee4:	f7fb f9dc 	bl	80002a0 <__aeabi_uldivmod>
 8004ee8:	4602      	mov	r2, r0
 8004eea:	460b      	mov	r3, r1
 8004eec:	4b61      	ldr	r3, [pc, #388]	@ (8005074 <UART_SetConfig+0x2d4>)
 8004eee:	fba3 2302 	umull	r2, r3, r3, r2
 8004ef2:	095b      	lsrs	r3, r3, #5
 8004ef4:	011c      	lsls	r4, r3, #4
 8004ef6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004efa:	2200      	movs	r2, #0
 8004efc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004f00:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004f04:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004f08:	4642      	mov	r2, r8
 8004f0a:	464b      	mov	r3, r9
 8004f0c:	1891      	adds	r1, r2, r2
 8004f0e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004f10:	415b      	adcs	r3, r3
 8004f12:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004f14:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004f18:	4641      	mov	r1, r8
 8004f1a:	eb12 0a01 	adds.w	sl, r2, r1
 8004f1e:	4649      	mov	r1, r9
 8004f20:	eb43 0b01 	adc.w	fp, r3, r1
 8004f24:	f04f 0200 	mov.w	r2, #0
 8004f28:	f04f 0300 	mov.w	r3, #0
 8004f2c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004f30:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004f34:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004f38:	4692      	mov	sl, r2
 8004f3a:	469b      	mov	fp, r3
 8004f3c:	4643      	mov	r3, r8
 8004f3e:	eb1a 0303 	adds.w	r3, sl, r3
 8004f42:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004f46:	464b      	mov	r3, r9
 8004f48:	eb4b 0303 	adc.w	r3, fp, r3
 8004f4c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004f50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f54:	685b      	ldr	r3, [r3, #4]
 8004f56:	2200      	movs	r2, #0
 8004f58:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004f5c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004f60:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004f64:	460b      	mov	r3, r1
 8004f66:	18db      	adds	r3, r3, r3
 8004f68:	643b      	str	r3, [r7, #64]	@ 0x40
 8004f6a:	4613      	mov	r3, r2
 8004f6c:	eb42 0303 	adc.w	r3, r2, r3
 8004f70:	647b      	str	r3, [r7, #68]	@ 0x44
 8004f72:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004f76:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004f7a:	f7fb f991 	bl	80002a0 <__aeabi_uldivmod>
 8004f7e:	4602      	mov	r2, r0
 8004f80:	460b      	mov	r3, r1
 8004f82:	4611      	mov	r1, r2
 8004f84:	4b3b      	ldr	r3, [pc, #236]	@ (8005074 <UART_SetConfig+0x2d4>)
 8004f86:	fba3 2301 	umull	r2, r3, r3, r1
 8004f8a:	095b      	lsrs	r3, r3, #5
 8004f8c:	2264      	movs	r2, #100	@ 0x64
 8004f8e:	fb02 f303 	mul.w	r3, r2, r3
 8004f92:	1acb      	subs	r3, r1, r3
 8004f94:	00db      	lsls	r3, r3, #3
 8004f96:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004f9a:	4b36      	ldr	r3, [pc, #216]	@ (8005074 <UART_SetConfig+0x2d4>)
 8004f9c:	fba3 2302 	umull	r2, r3, r3, r2
 8004fa0:	095b      	lsrs	r3, r3, #5
 8004fa2:	005b      	lsls	r3, r3, #1
 8004fa4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004fa8:	441c      	add	r4, r3
 8004faa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004fae:	2200      	movs	r2, #0
 8004fb0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004fb4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004fb8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004fbc:	4642      	mov	r2, r8
 8004fbe:	464b      	mov	r3, r9
 8004fc0:	1891      	adds	r1, r2, r2
 8004fc2:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004fc4:	415b      	adcs	r3, r3
 8004fc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004fc8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004fcc:	4641      	mov	r1, r8
 8004fce:	1851      	adds	r1, r2, r1
 8004fd0:	6339      	str	r1, [r7, #48]	@ 0x30
 8004fd2:	4649      	mov	r1, r9
 8004fd4:	414b      	adcs	r3, r1
 8004fd6:	637b      	str	r3, [r7, #52]	@ 0x34
 8004fd8:	f04f 0200 	mov.w	r2, #0
 8004fdc:	f04f 0300 	mov.w	r3, #0
 8004fe0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004fe4:	4659      	mov	r1, fp
 8004fe6:	00cb      	lsls	r3, r1, #3
 8004fe8:	4651      	mov	r1, sl
 8004fea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004fee:	4651      	mov	r1, sl
 8004ff0:	00ca      	lsls	r2, r1, #3
 8004ff2:	4610      	mov	r0, r2
 8004ff4:	4619      	mov	r1, r3
 8004ff6:	4603      	mov	r3, r0
 8004ff8:	4642      	mov	r2, r8
 8004ffa:	189b      	adds	r3, r3, r2
 8004ffc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005000:	464b      	mov	r3, r9
 8005002:	460a      	mov	r2, r1
 8005004:	eb42 0303 	adc.w	r3, r2, r3
 8005008:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800500c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005010:	685b      	ldr	r3, [r3, #4]
 8005012:	2200      	movs	r2, #0
 8005014:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005018:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800501c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005020:	460b      	mov	r3, r1
 8005022:	18db      	adds	r3, r3, r3
 8005024:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005026:	4613      	mov	r3, r2
 8005028:	eb42 0303 	adc.w	r3, r2, r3
 800502c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800502e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005032:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005036:	f7fb f933 	bl	80002a0 <__aeabi_uldivmod>
 800503a:	4602      	mov	r2, r0
 800503c:	460b      	mov	r3, r1
 800503e:	4b0d      	ldr	r3, [pc, #52]	@ (8005074 <UART_SetConfig+0x2d4>)
 8005040:	fba3 1302 	umull	r1, r3, r3, r2
 8005044:	095b      	lsrs	r3, r3, #5
 8005046:	2164      	movs	r1, #100	@ 0x64
 8005048:	fb01 f303 	mul.w	r3, r1, r3
 800504c:	1ad3      	subs	r3, r2, r3
 800504e:	00db      	lsls	r3, r3, #3
 8005050:	3332      	adds	r3, #50	@ 0x32
 8005052:	4a08      	ldr	r2, [pc, #32]	@ (8005074 <UART_SetConfig+0x2d4>)
 8005054:	fba2 2303 	umull	r2, r3, r2, r3
 8005058:	095b      	lsrs	r3, r3, #5
 800505a:	f003 0207 	and.w	r2, r3, #7
 800505e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	4422      	add	r2, r4
 8005066:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005068:	e106      	b.n	8005278 <UART_SetConfig+0x4d8>
 800506a:	bf00      	nop
 800506c:	40011000 	.word	0x40011000
 8005070:	40011400 	.word	0x40011400
 8005074:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005078:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800507c:	2200      	movs	r2, #0
 800507e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005082:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005086:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800508a:	4642      	mov	r2, r8
 800508c:	464b      	mov	r3, r9
 800508e:	1891      	adds	r1, r2, r2
 8005090:	6239      	str	r1, [r7, #32]
 8005092:	415b      	adcs	r3, r3
 8005094:	627b      	str	r3, [r7, #36]	@ 0x24
 8005096:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800509a:	4641      	mov	r1, r8
 800509c:	1854      	adds	r4, r2, r1
 800509e:	4649      	mov	r1, r9
 80050a0:	eb43 0501 	adc.w	r5, r3, r1
 80050a4:	f04f 0200 	mov.w	r2, #0
 80050a8:	f04f 0300 	mov.w	r3, #0
 80050ac:	00eb      	lsls	r3, r5, #3
 80050ae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80050b2:	00e2      	lsls	r2, r4, #3
 80050b4:	4614      	mov	r4, r2
 80050b6:	461d      	mov	r5, r3
 80050b8:	4643      	mov	r3, r8
 80050ba:	18e3      	adds	r3, r4, r3
 80050bc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80050c0:	464b      	mov	r3, r9
 80050c2:	eb45 0303 	adc.w	r3, r5, r3
 80050c6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80050ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050ce:	685b      	ldr	r3, [r3, #4]
 80050d0:	2200      	movs	r2, #0
 80050d2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80050d6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80050da:	f04f 0200 	mov.w	r2, #0
 80050de:	f04f 0300 	mov.w	r3, #0
 80050e2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80050e6:	4629      	mov	r1, r5
 80050e8:	008b      	lsls	r3, r1, #2
 80050ea:	4621      	mov	r1, r4
 80050ec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80050f0:	4621      	mov	r1, r4
 80050f2:	008a      	lsls	r2, r1, #2
 80050f4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80050f8:	f7fb f8d2 	bl	80002a0 <__aeabi_uldivmod>
 80050fc:	4602      	mov	r2, r0
 80050fe:	460b      	mov	r3, r1
 8005100:	4b60      	ldr	r3, [pc, #384]	@ (8005284 <UART_SetConfig+0x4e4>)
 8005102:	fba3 2302 	umull	r2, r3, r3, r2
 8005106:	095b      	lsrs	r3, r3, #5
 8005108:	011c      	lsls	r4, r3, #4
 800510a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800510e:	2200      	movs	r2, #0
 8005110:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005114:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005118:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800511c:	4642      	mov	r2, r8
 800511e:	464b      	mov	r3, r9
 8005120:	1891      	adds	r1, r2, r2
 8005122:	61b9      	str	r1, [r7, #24]
 8005124:	415b      	adcs	r3, r3
 8005126:	61fb      	str	r3, [r7, #28]
 8005128:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800512c:	4641      	mov	r1, r8
 800512e:	1851      	adds	r1, r2, r1
 8005130:	6139      	str	r1, [r7, #16]
 8005132:	4649      	mov	r1, r9
 8005134:	414b      	adcs	r3, r1
 8005136:	617b      	str	r3, [r7, #20]
 8005138:	f04f 0200 	mov.w	r2, #0
 800513c:	f04f 0300 	mov.w	r3, #0
 8005140:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005144:	4659      	mov	r1, fp
 8005146:	00cb      	lsls	r3, r1, #3
 8005148:	4651      	mov	r1, sl
 800514a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800514e:	4651      	mov	r1, sl
 8005150:	00ca      	lsls	r2, r1, #3
 8005152:	4610      	mov	r0, r2
 8005154:	4619      	mov	r1, r3
 8005156:	4603      	mov	r3, r0
 8005158:	4642      	mov	r2, r8
 800515a:	189b      	adds	r3, r3, r2
 800515c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005160:	464b      	mov	r3, r9
 8005162:	460a      	mov	r2, r1
 8005164:	eb42 0303 	adc.w	r3, r2, r3
 8005168:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800516c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005170:	685b      	ldr	r3, [r3, #4]
 8005172:	2200      	movs	r2, #0
 8005174:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005176:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005178:	f04f 0200 	mov.w	r2, #0
 800517c:	f04f 0300 	mov.w	r3, #0
 8005180:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005184:	4649      	mov	r1, r9
 8005186:	008b      	lsls	r3, r1, #2
 8005188:	4641      	mov	r1, r8
 800518a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800518e:	4641      	mov	r1, r8
 8005190:	008a      	lsls	r2, r1, #2
 8005192:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005196:	f7fb f883 	bl	80002a0 <__aeabi_uldivmod>
 800519a:	4602      	mov	r2, r0
 800519c:	460b      	mov	r3, r1
 800519e:	4611      	mov	r1, r2
 80051a0:	4b38      	ldr	r3, [pc, #224]	@ (8005284 <UART_SetConfig+0x4e4>)
 80051a2:	fba3 2301 	umull	r2, r3, r3, r1
 80051a6:	095b      	lsrs	r3, r3, #5
 80051a8:	2264      	movs	r2, #100	@ 0x64
 80051aa:	fb02 f303 	mul.w	r3, r2, r3
 80051ae:	1acb      	subs	r3, r1, r3
 80051b0:	011b      	lsls	r3, r3, #4
 80051b2:	3332      	adds	r3, #50	@ 0x32
 80051b4:	4a33      	ldr	r2, [pc, #204]	@ (8005284 <UART_SetConfig+0x4e4>)
 80051b6:	fba2 2303 	umull	r2, r3, r2, r3
 80051ba:	095b      	lsrs	r3, r3, #5
 80051bc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80051c0:	441c      	add	r4, r3
 80051c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80051c6:	2200      	movs	r2, #0
 80051c8:	673b      	str	r3, [r7, #112]	@ 0x70
 80051ca:	677a      	str	r2, [r7, #116]	@ 0x74
 80051cc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80051d0:	4642      	mov	r2, r8
 80051d2:	464b      	mov	r3, r9
 80051d4:	1891      	adds	r1, r2, r2
 80051d6:	60b9      	str	r1, [r7, #8]
 80051d8:	415b      	adcs	r3, r3
 80051da:	60fb      	str	r3, [r7, #12]
 80051dc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80051e0:	4641      	mov	r1, r8
 80051e2:	1851      	adds	r1, r2, r1
 80051e4:	6039      	str	r1, [r7, #0]
 80051e6:	4649      	mov	r1, r9
 80051e8:	414b      	adcs	r3, r1
 80051ea:	607b      	str	r3, [r7, #4]
 80051ec:	f04f 0200 	mov.w	r2, #0
 80051f0:	f04f 0300 	mov.w	r3, #0
 80051f4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80051f8:	4659      	mov	r1, fp
 80051fa:	00cb      	lsls	r3, r1, #3
 80051fc:	4651      	mov	r1, sl
 80051fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005202:	4651      	mov	r1, sl
 8005204:	00ca      	lsls	r2, r1, #3
 8005206:	4610      	mov	r0, r2
 8005208:	4619      	mov	r1, r3
 800520a:	4603      	mov	r3, r0
 800520c:	4642      	mov	r2, r8
 800520e:	189b      	adds	r3, r3, r2
 8005210:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005212:	464b      	mov	r3, r9
 8005214:	460a      	mov	r2, r1
 8005216:	eb42 0303 	adc.w	r3, r2, r3
 800521a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800521c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005220:	685b      	ldr	r3, [r3, #4]
 8005222:	2200      	movs	r2, #0
 8005224:	663b      	str	r3, [r7, #96]	@ 0x60
 8005226:	667a      	str	r2, [r7, #100]	@ 0x64
 8005228:	f04f 0200 	mov.w	r2, #0
 800522c:	f04f 0300 	mov.w	r3, #0
 8005230:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005234:	4649      	mov	r1, r9
 8005236:	008b      	lsls	r3, r1, #2
 8005238:	4641      	mov	r1, r8
 800523a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800523e:	4641      	mov	r1, r8
 8005240:	008a      	lsls	r2, r1, #2
 8005242:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005246:	f7fb f82b 	bl	80002a0 <__aeabi_uldivmod>
 800524a:	4602      	mov	r2, r0
 800524c:	460b      	mov	r3, r1
 800524e:	4b0d      	ldr	r3, [pc, #52]	@ (8005284 <UART_SetConfig+0x4e4>)
 8005250:	fba3 1302 	umull	r1, r3, r3, r2
 8005254:	095b      	lsrs	r3, r3, #5
 8005256:	2164      	movs	r1, #100	@ 0x64
 8005258:	fb01 f303 	mul.w	r3, r1, r3
 800525c:	1ad3      	subs	r3, r2, r3
 800525e:	011b      	lsls	r3, r3, #4
 8005260:	3332      	adds	r3, #50	@ 0x32
 8005262:	4a08      	ldr	r2, [pc, #32]	@ (8005284 <UART_SetConfig+0x4e4>)
 8005264:	fba2 2303 	umull	r2, r3, r2, r3
 8005268:	095b      	lsrs	r3, r3, #5
 800526a:	f003 020f 	and.w	r2, r3, #15
 800526e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4422      	add	r2, r4
 8005276:	609a      	str	r2, [r3, #8]
}
 8005278:	bf00      	nop
 800527a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800527e:	46bd      	mov	sp, r7
 8005280:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005284:	51eb851f 	.word	0x51eb851f

08005288 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005288:	b084      	sub	sp, #16
 800528a:	b580      	push	{r7, lr}
 800528c:	b084      	sub	sp, #16
 800528e:	af00      	add	r7, sp, #0
 8005290:	6078      	str	r0, [r7, #4]
 8005292:	f107 001c 	add.w	r0, r7, #28
 8005296:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800529a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800529e:	2b01      	cmp	r3, #1
 80052a0:	d123      	bne.n	80052ea <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052a6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	68db      	ldr	r3, [r3, #12]
 80052b2:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80052b6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80052ba:	687a      	ldr	r2, [r7, #4]
 80052bc:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	68db      	ldr	r3, [r3, #12]
 80052c2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80052ca:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80052ce:	2b01      	cmp	r3, #1
 80052d0:	d105      	bne.n	80052de <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	68db      	ldr	r3, [r3, #12]
 80052d6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80052de:	6878      	ldr	r0, [r7, #4]
 80052e0:	f001 fae2 	bl	80068a8 <USB_CoreReset>
 80052e4:	4603      	mov	r3, r0
 80052e6:	73fb      	strb	r3, [r7, #15]
 80052e8:	e01b      	b.n	8005322 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	68db      	ldr	r3, [r3, #12]
 80052ee:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80052f6:	6878      	ldr	r0, [r7, #4]
 80052f8:	f001 fad6 	bl	80068a8 <USB_CoreReset>
 80052fc:	4603      	mov	r3, r0
 80052fe:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005300:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005304:	2b00      	cmp	r3, #0
 8005306:	d106      	bne.n	8005316 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800530c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	639a      	str	r2, [r3, #56]	@ 0x38
 8005314:	e005      	b.n	8005322 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800531a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005322:	7fbb      	ldrb	r3, [r7, #30]
 8005324:	2b01      	cmp	r3, #1
 8005326:	d10b      	bne.n	8005340 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	689b      	ldr	r3, [r3, #8]
 800532c:	f043 0206 	orr.w	r2, r3, #6
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	689b      	ldr	r3, [r3, #8]
 8005338:	f043 0220 	orr.w	r2, r3, #32
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005340:	7bfb      	ldrb	r3, [r7, #15]
}
 8005342:	4618      	mov	r0, r3
 8005344:	3710      	adds	r7, #16
 8005346:	46bd      	mov	sp, r7
 8005348:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800534c:	b004      	add	sp, #16
 800534e:	4770      	bx	lr

08005350 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005350:	b480      	push	{r7}
 8005352:	b087      	sub	sp, #28
 8005354:	af00      	add	r7, sp, #0
 8005356:	60f8      	str	r0, [r7, #12]
 8005358:	60b9      	str	r1, [r7, #8]
 800535a:	4613      	mov	r3, r2
 800535c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800535e:	79fb      	ldrb	r3, [r7, #7]
 8005360:	2b02      	cmp	r3, #2
 8005362:	d165      	bne.n	8005430 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005364:	68bb      	ldr	r3, [r7, #8]
 8005366:	4a41      	ldr	r2, [pc, #260]	@ (800546c <USB_SetTurnaroundTime+0x11c>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d906      	bls.n	800537a <USB_SetTurnaroundTime+0x2a>
 800536c:	68bb      	ldr	r3, [r7, #8]
 800536e:	4a40      	ldr	r2, [pc, #256]	@ (8005470 <USB_SetTurnaroundTime+0x120>)
 8005370:	4293      	cmp	r3, r2
 8005372:	d202      	bcs.n	800537a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005374:	230f      	movs	r3, #15
 8005376:	617b      	str	r3, [r7, #20]
 8005378:	e062      	b.n	8005440 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800537a:	68bb      	ldr	r3, [r7, #8]
 800537c:	4a3c      	ldr	r2, [pc, #240]	@ (8005470 <USB_SetTurnaroundTime+0x120>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d306      	bcc.n	8005390 <USB_SetTurnaroundTime+0x40>
 8005382:	68bb      	ldr	r3, [r7, #8]
 8005384:	4a3b      	ldr	r2, [pc, #236]	@ (8005474 <USB_SetTurnaroundTime+0x124>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d202      	bcs.n	8005390 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800538a:	230e      	movs	r3, #14
 800538c:	617b      	str	r3, [r7, #20]
 800538e:	e057      	b.n	8005440 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005390:	68bb      	ldr	r3, [r7, #8]
 8005392:	4a38      	ldr	r2, [pc, #224]	@ (8005474 <USB_SetTurnaroundTime+0x124>)
 8005394:	4293      	cmp	r3, r2
 8005396:	d306      	bcc.n	80053a6 <USB_SetTurnaroundTime+0x56>
 8005398:	68bb      	ldr	r3, [r7, #8]
 800539a:	4a37      	ldr	r2, [pc, #220]	@ (8005478 <USB_SetTurnaroundTime+0x128>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d202      	bcs.n	80053a6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80053a0:	230d      	movs	r3, #13
 80053a2:	617b      	str	r3, [r7, #20]
 80053a4:	e04c      	b.n	8005440 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80053a6:	68bb      	ldr	r3, [r7, #8]
 80053a8:	4a33      	ldr	r2, [pc, #204]	@ (8005478 <USB_SetTurnaroundTime+0x128>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d306      	bcc.n	80053bc <USB_SetTurnaroundTime+0x6c>
 80053ae:	68bb      	ldr	r3, [r7, #8]
 80053b0:	4a32      	ldr	r2, [pc, #200]	@ (800547c <USB_SetTurnaroundTime+0x12c>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d802      	bhi.n	80053bc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80053b6:	230c      	movs	r3, #12
 80053b8:	617b      	str	r3, [r7, #20]
 80053ba:	e041      	b.n	8005440 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80053bc:	68bb      	ldr	r3, [r7, #8]
 80053be:	4a2f      	ldr	r2, [pc, #188]	@ (800547c <USB_SetTurnaroundTime+0x12c>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d906      	bls.n	80053d2 <USB_SetTurnaroundTime+0x82>
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	4a2e      	ldr	r2, [pc, #184]	@ (8005480 <USB_SetTurnaroundTime+0x130>)
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d802      	bhi.n	80053d2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80053cc:	230b      	movs	r3, #11
 80053ce:	617b      	str	r3, [r7, #20]
 80053d0:	e036      	b.n	8005440 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80053d2:	68bb      	ldr	r3, [r7, #8]
 80053d4:	4a2a      	ldr	r2, [pc, #168]	@ (8005480 <USB_SetTurnaroundTime+0x130>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d906      	bls.n	80053e8 <USB_SetTurnaroundTime+0x98>
 80053da:	68bb      	ldr	r3, [r7, #8]
 80053dc:	4a29      	ldr	r2, [pc, #164]	@ (8005484 <USB_SetTurnaroundTime+0x134>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d802      	bhi.n	80053e8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80053e2:	230a      	movs	r3, #10
 80053e4:	617b      	str	r3, [r7, #20]
 80053e6:	e02b      	b.n	8005440 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80053e8:	68bb      	ldr	r3, [r7, #8]
 80053ea:	4a26      	ldr	r2, [pc, #152]	@ (8005484 <USB_SetTurnaroundTime+0x134>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d906      	bls.n	80053fe <USB_SetTurnaroundTime+0xae>
 80053f0:	68bb      	ldr	r3, [r7, #8]
 80053f2:	4a25      	ldr	r2, [pc, #148]	@ (8005488 <USB_SetTurnaroundTime+0x138>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d202      	bcs.n	80053fe <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80053f8:	2309      	movs	r3, #9
 80053fa:	617b      	str	r3, [r7, #20]
 80053fc:	e020      	b.n	8005440 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80053fe:	68bb      	ldr	r3, [r7, #8]
 8005400:	4a21      	ldr	r2, [pc, #132]	@ (8005488 <USB_SetTurnaroundTime+0x138>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d306      	bcc.n	8005414 <USB_SetTurnaroundTime+0xc4>
 8005406:	68bb      	ldr	r3, [r7, #8]
 8005408:	4a20      	ldr	r2, [pc, #128]	@ (800548c <USB_SetTurnaroundTime+0x13c>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d802      	bhi.n	8005414 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800540e:	2308      	movs	r3, #8
 8005410:	617b      	str	r3, [r7, #20]
 8005412:	e015      	b.n	8005440 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005414:	68bb      	ldr	r3, [r7, #8]
 8005416:	4a1d      	ldr	r2, [pc, #116]	@ (800548c <USB_SetTurnaroundTime+0x13c>)
 8005418:	4293      	cmp	r3, r2
 800541a:	d906      	bls.n	800542a <USB_SetTurnaroundTime+0xda>
 800541c:	68bb      	ldr	r3, [r7, #8]
 800541e:	4a1c      	ldr	r2, [pc, #112]	@ (8005490 <USB_SetTurnaroundTime+0x140>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d202      	bcs.n	800542a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005424:	2307      	movs	r3, #7
 8005426:	617b      	str	r3, [r7, #20]
 8005428:	e00a      	b.n	8005440 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800542a:	2306      	movs	r3, #6
 800542c:	617b      	str	r3, [r7, #20]
 800542e:	e007      	b.n	8005440 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005430:	79fb      	ldrb	r3, [r7, #7]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d102      	bne.n	800543c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005436:	2309      	movs	r3, #9
 8005438:	617b      	str	r3, [r7, #20]
 800543a:	e001      	b.n	8005440 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800543c:	2309      	movs	r3, #9
 800543e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	68db      	ldr	r3, [r3, #12]
 8005444:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	68da      	ldr	r2, [r3, #12]
 8005450:	697b      	ldr	r3, [r7, #20]
 8005452:	029b      	lsls	r3, r3, #10
 8005454:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8005458:	431a      	orrs	r2, r3
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800545e:	2300      	movs	r3, #0
}
 8005460:	4618      	mov	r0, r3
 8005462:	371c      	adds	r7, #28
 8005464:	46bd      	mov	sp, r7
 8005466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546a:	4770      	bx	lr
 800546c:	00d8acbf 	.word	0x00d8acbf
 8005470:	00e4e1c0 	.word	0x00e4e1c0
 8005474:	00f42400 	.word	0x00f42400
 8005478:	01067380 	.word	0x01067380
 800547c:	011a499f 	.word	0x011a499f
 8005480:	01312cff 	.word	0x01312cff
 8005484:	014ca43f 	.word	0x014ca43f
 8005488:	016e3600 	.word	0x016e3600
 800548c:	01a6ab1f 	.word	0x01a6ab1f
 8005490:	01e84800 	.word	0x01e84800

08005494 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005494:	b480      	push	{r7}
 8005496:	b083      	sub	sp, #12
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	689b      	ldr	r3, [r3, #8]
 80054a0:	f043 0201 	orr.w	r2, r3, #1
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80054a8:	2300      	movs	r3, #0
}
 80054aa:	4618      	mov	r0, r3
 80054ac:	370c      	adds	r7, #12
 80054ae:	46bd      	mov	sp, r7
 80054b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b4:	4770      	bx	lr

080054b6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80054b6:	b480      	push	{r7}
 80054b8:	b083      	sub	sp, #12
 80054ba:	af00      	add	r7, sp, #0
 80054bc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	689b      	ldr	r3, [r3, #8]
 80054c2:	f023 0201 	bic.w	r2, r3, #1
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80054ca:	2300      	movs	r3, #0
}
 80054cc:	4618      	mov	r0, r3
 80054ce:	370c      	adds	r7, #12
 80054d0:	46bd      	mov	sp, r7
 80054d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d6:	4770      	bx	lr

080054d8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b084      	sub	sp, #16
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
 80054e0:	460b      	mov	r3, r1
 80054e2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80054e4:	2300      	movs	r3, #0
 80054e6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	68db      	ldr	r3, [r3, #12]
 80054ec:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80054f4:	78fb      	ldrb	r3, [r7, #3]
 80054f6:	2b01      	cmp	r3, #1
 80054f8:	d115      	bne.n	8005526 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	68db      	ldr	r3, [r3, #12]
 80054fe:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005506:	200a      	movs	r0, #10
 8005508:	f7fb fef4 	bl	80012f4 <HAL_Delay>
      ms += 10U;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	330a      	adds	r3, #10
 8005510:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005512:	6878      	ldr	r0, [r7, #4]
 8005514:	f001 f939 	bl	800678a <USB_GetMode>
 8005518:	4603      	mov	r3, r0
 800551a:	2b01      	cmp	r3, #1
 800551c:	d01e      	beq.n	800555c <USB_SetCurrentMode+0x84>
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	2bc7      	cmp	r3, #199	@ 0xc7
 8005522:	d9f0      	bls.n	8005506 <USB_SetCurrentMode+0x2e>
 8005524:	e01a      	b.n	800555c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005526:	78fb      	ldrb	r3, [r7, #3]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d115      	bne.n	8005558 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	68db      	ldr	r3, [r3, #12]
 8005530:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005538:	200a      	movs	r0, #10
 800553a:	f7fb fedb 	bl	80012f4 <HAL_Delay>
      ms += 10U;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	330a      	adds	r3, #10
 8005542:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005544:	6878      	ldr	r0, [r7, #4]
 8005546:	f001 f920 	bl	800678a <USB_GetMode>
 800554a:	4603      	mov	r3, r0
 800554c:	2b00      	cmp	r3, #0
 800554e:	d005      	beq.n	800555c <USB_SetCurrentMode+0x84>
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	2bc7      	cmp	r3, #199	@ 0xc7
 8005554:	d9f0      	bls.n	8005538 <USB_SetCurrentMode+0x60>
 8005556:	e001      	b.n	800555c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005558:	2301      	movs	r3, #1
 800555a:	e005      	b.n	8005568 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	2bc8      	cmp	r3, #200	@ 0xc8
 8005560:	d101      	bne.n	8005566 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005562:	2301      	movs	r3, #1
 8005564:	e000      	b.n	8005568 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005566:	2300      	movs	r3, #0
}
 8005568:	4618      	mov	r0, r3
 800556a:	3710      	adds	r7, #16
 800556c:	46bd      	mov	sp, r7
 800556e:	bd80      	pop	{r7, pc}

08005570 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005570:	b084      	sub	sp, #16
 8005572:	b580      	push	{r7, lr}
 8005574:	b086      	sub	sp, #24
 8005576:	af00      	add	r7, sp, #0
 8005578:	6078      	str	r0, [r7, #4]
 800557a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800557e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005582:	2300      	movs	r3, #0
 8005584:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800558a:	2300      	movs	r3, #0
 800558c:	613b      	str	r3, [r7, #16]
 800558e:	e009      	b.n	80055a4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005590:	687a      	ldr	r2, [r7, #4]
 8005592:	693b      	ldr	r3, [r7, #16]
 8005594:	3340      	adds	r3, #64	@ 0x40
 8005596:	009b      	lsls	r3, r3, #2
 8005598:	4413      	add	r3, r2
 800559a:	2200      	movs	r2, #0
 800559c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800559e:	693b      	ldr	r3, [r7, #16]
 80055a0:	3301      	adds	r3, #1
 80055a2:	613b      	str	r3, [r7, #16]
 80055a4:	693b      	ldr	r3, [r7, #16]
 80055a6:	2b0e      	cmp	r3, #14
 80055a8:	d9f2      	bls.n	8005590 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80055aa:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d11c      	bne.n	80055ec <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80055b8:	685b      	ldr	r3, [r3, #4]
 80055ba:	68fa      	ldr	r2, [r7, #12]
 80055bc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80055c0:	f043 0302 	orr.w	r3, r3, #2
 80055c4:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055ca:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055d6:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055e2:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	639a      	str	r2, [r3, #56]	@ 0x38
 80055ea:	e00b      	b.n	8005604 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055f0:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055fc:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800560a:	461a      	mov	r2, r3
 800560c:	2300      	movs	r3, #0
 800560e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005610:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8005614:	2b01      	cmp	r3, #1
 8005616:	d10d      	bne.n	8005634 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005618:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800561c:	2b00      	cmp	r3, #0
 800561e:	d104      	bne.n	800562a <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005620:	2100      	movs	r1, #0
 8005622:	6878      	ldr	r0, [r7, #4]
 8005624:	f000 f968 	bl	80058f8 <USB_SetDevSpeed>
 8005628:	e008      	b.n	800563c <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800562a:	2101      	movs	r1, #1
 800562c:	6878      	ldr	r0, [r7, #4]
 800562e:	f000 f963 	bl	80058f8 <USB_SetDevSpeed>
 8005632:	e003      	b.n	800563c <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005634:	2103      	movs	r1, #3
 8005636:	6878      	ldr	r0, [r7, #4]
 8005638:	f000 f95e 	bl	80058f8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800563c:	2110      	movs	r1, #16
 800563e:	6878      	ldr	r0, [r7, #4]
 8005640:	f000 f8fa 	bl	8005838 <USB_FlushTxFifo>
 8005644:	4603      	mov	r3, r0
 8005646:	2b00      	cmp	r3, #0
 8005648:	d001      	beq.n	800564e <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800564a:	2301      	movs	r3, #1
 800564c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800564e:	6878      	ldr	r0, [r7, #4]
 8005650:	f000 f924 	bl	800589c <USB_FlushRxFifo>
 8005654:	4603      	mov	r3, r0
 8005656:	2b00      	cmp	r3, #0
 8005658:	d001      	beq.n	800565e <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800565a:	2301      	movs	r3, #1
 800565c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005664:	461a      	mov	r2, r3
 8005666:	2300      	movs	r3, #0
 8005668:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005670:	461a      	mov	r2, r3
 8005672:	2300      	movs	r3, #0
 8005674:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800567c:	461a      	mov	r2, r3
 800567e:	2300      	movs	r3, #0
 8005680:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005682:	2300      	movs	r3, #0
 8005684:	613b      	str	r3, [r7, #16]
 8005686:	e043      	b.n	8005710 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005688:	693b      	ldr	r3, [r7, #16]
 800568a:	015a      	lsls	r2, r3, #5
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	4413      	add	r3, r2
 8005690:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800569a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800569e:	d118      	bne.n	80056d2 <USB_DevInit+0x162>
    {
      if (i == 0U)
 80056a0:	693b      	ldr	r3, [r7, #16]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d10a      	bne.n	80056bc <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80056a6:	693b      	ldr	r3, [r7, #16]
 80056a8:	015a      	lsls	r2, r3, #5
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	4413      	add	r3, r2
 80056ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80056b2:	461a      	mov	r2, r3
 80056b4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80056b8:	6013      	str	r3, [r2, #0]
 80056ba:	e013      	b.n	80056e4 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80056bc:	693b      	ldr	r3, [r7, #16]
 80056be:	015a      	lsls	r2, r3, #5
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	4413      	add	r3, r2
 80056c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80056c8:	461a      	mov	r2, r3
 80056ca:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80056ce:	6013      	str	r3, [r2, #0]
 80056d0:	e008      	b.n	80056e4 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80056d2:	693b      	ldr	r3, [r7, #16]
 80056d4:	015a      	lsls	r2, r3, #5
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	4413      	add	r3, r2
 80056da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80056de:	461a      	mov	r2, r3
 80056e0:	2300      	movs	r3, #0
 80056e2:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80056e4:	693b      	ldr	r3, [r7, #16]
 80056e6:	015a      	lsls	r2, r3, #5
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	4413      	add	r3, r2
 80056ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80056f0:	461a      	mov	r2, r3
 80056f2:	2300      	movs	r3, #0
 80056f4:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80056f6:	693b      	ldr	r3, [r7, #16]
 80056f8:	015a      	lsls	r2, r3, #5
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	4413      	add	r3, r2
 80056fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005702:	461a      	mov	r2, r3
 8005704:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005708:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800570a:	693b      	ldr	r3, [r7, #16]
 800570c:	3301      	adds	r3, #1
 800570e:	613b      	str	r3, [r7, #16]
 8005710:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005714:	461a      	mov	r2, r3
 8005716:	693b      	ldr	r3, [r7, #16]
 8005718:	4293      	cmp	r3, r2
 800571a:	d3b5      	bcc.n	8005688 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800571c:	2300      	movs	r3, #0
 800571e:	613b      	str	r3, [r7, #16]
 8005720:	e043      	b.n	80057aa <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005722:	693b      	ldr	r3, [r7, #16]
 8005724:	015a      	lsls	r2, r3, #5
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	4413      	add	r3, r2
 800572a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005734:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005738:	d118      	bne.n	800576c <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800573a:	693b      	ldr	r3, [r7, #16]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d10a      	bne.n	8005756 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005740:	693b      	ldr	r3, [r7, #16]
 8005742:	015a      	lsls	r2, r3, #5
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	4413      	add	r3, r2
 8005748:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800574c:	461a      	mov	r2, r3
 800574e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005752:	6013      	str	r3, [r2, #0]
 8005754:	e013      	b.n	800577e <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005756:	693b      	ldr	r3, [r7, #16]
 8005758:	015a      	lsls	r2, r3, #5
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	4413      	add	r3, r2
 800575e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005762:	461a      	mov	r2, r3
 8005764:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005768:	6013      	str	r3, [r2, #0]
 800576a:	e008      	b.n	800577e <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800576c:	693b      	ldr	r3, [r7, #16]
 800576e:	015a      	lsls	r2, r3, #5
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	4413      	add	r3, r2
 8005774:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005778:	461a      	mov	r2, r3
 800577a:	2300      	movs	r3, #0
 800577c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800577e:	693b      	ldr	r3, [r7, #16]
 8005780:	015a      	lsls	r2, r3, #5
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	4413      	add	r3, r2
 8005786:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800578a:	461a      	mov	r2, r3
 800578c:	2300      	movs	r3, #0
 800578e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005790:	693b      	ldr	r3, [r7, #16]
 8005792:	015a      	lsls	r2, r3, #5
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	4413      	add	r3, r2
 8005798:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800579c:	461a      	mov	r2, r3
 800579e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80057a2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80057a4:	693b      	ldr	r3, [r7, #16]
 80057a6:	3301      	adds	r3, #1
 80057a8:	613b      	str	r3, [r7, #16]
 80057aa:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80057ae:	461a      	mov	r2, r3
 80057b0:	693b      	ldr	r3, [r7, #16]
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d3b5      	bcc.n	8005722 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80057bc:	691b      	ldr	r3, [r3, #16]
 80057be:	68fa      	ldr	r2, [r7, #12]
 80057c0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80057c4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80057c8:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2200      	movs	r2, #0
 80057ce:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80057d6:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80057d8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d105      	bne.n	80057ec <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	699b      	ldr	r3, [r3, #24]
 80057e4:	f043 0210 	orr.w	r2, r3, #16
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	699a      	ldr	r2, [r3, #24]
 80057f0:	4b10      	ldr	r3, [pc, #64]	@ (8005834 <USB_DevInit+0x2c4>)
 80057f2:	4313      	orrs	r3, r2
 80057f4:	687a      	ldr	r2, [r7, #4]
 80057f6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80057f8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d005      	beq.n	800580c <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	699b      	ldr	r3, [r3, #24]
 8005804:	f043 0208 	orr.w	r2, r3, #8
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800580c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005810:	2b01      	cmp	r3, #1
 8005812:	d107      	bne.n	8005824 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	699b      	ldr	r3, [r3, #24]
 8005818:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800581c:	f043 0304 	orr.w	r3, r3, #4
 8005820:	687a      	ldr	r2, [r7, #4]
 8005822:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005824:	7dfb      	ldrb	r3, [r7, #23]
}
 8005826:	4618      	mov	r0, r3
 8005828:	3718      	adds	r7, #24
 800582a:	46bd      	mov	sp, r7
 800582c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005830:	b004      	add	sp, #16
 8005832:	4770      	bx	lr
 8005834:	803c3800 	.word	0x803c3800

08005838 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005838:	b480      	push	{r7}
 800583a:	b085      	sub	sp, #20
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
 8005840:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005842:	2300      	movs	r3, #0
 8005844:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	3301      	adds	r3, #1
 800584a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005852:	d901      	bls.n	8005858 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005854:	2303      	movs	r3, #3
 8005856:	e01b      	b.n	8005890 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	691b      	ldr	r3, [r3, #16]
 800585c:	2b00      	cmp	r3, #0
 800585e:	daf2      	bge.n	8005846 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005860:	2300      	movs	r3, #0
 8005862:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	019b      	lsls	r3, r3, #6
 8005868:	f043 0220 	orr.w	r2, r3, #32
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	3301      	adds	r3, #1
 8005874:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800587c:	d901      	bls.n	8005882 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800587e:	2303      	movs	r3, #3
 8005880:	e006      	b.n	8005890 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	691b      	ldr	r3, [r3, #16]
 8005886:	f003 0320 	and.w	r3, r3, #32
 800588a:	2b20      	cmp	r3, #32
 800588c:	d0f0      	beq.n	8005870 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800588e:	2300      	movs	r3, #0
}
 8005890:	4618      	mov	r0, r3
 8005892:	3714      	adds	r7, #20
 8005894:	46bd      	mov	sp, r7
 8005896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589a:	4770      	bx	lr

0800589c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800589c:	b480      	push	{r7}
 800589e:	b085      	sub	sp, #20
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80058a4:	2300      	movs	r3, #0
 80058a6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	3301      	adds	r3, #1
 80058ac:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80058b4:	d901      	bls.n	80058ba <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80058b6:	2303      	movs	r3, #3
 80058b8:	e018      	b.n	80058ec <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	691b      	ldr	r3, [r3, #16]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	daf2      	bge.n	80058a8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80058c2:	2300      	movs	r3, #0
 80058c4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2210      	movs	r2, #16
 80058ca:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	3301      	adds	r3, #1
 80058d0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80058d8:	d901      	bls.n	80058de <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80058da:	2303      	movs	r3, #3
 80058dc:	e006      	b.n	80058ec <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	691b      	ldr	r3, [r3, #16]
 80058e2:	f003 0310 	and.w	r3, r3, #16
 80058e6:	2b10      	cmp	r3, #16
 80058e8:	d0f0      	beq.n	80058cc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80058ea:	2300      	movs	r3, #0
}
 80058ec:	4618      	mov	r0, r3
 80058ee:	3714      	adds	r7, #20
 80058f0:	46bd      	mov	sp, r7
 80058f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f6:	4770      	bx	lr

080058f8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80058f8:	b480      	push	{r7}
 80058fa:	b085      	sub	sp, #20
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
 8005900:	460b      	mov	r3, r1
 8005902:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800590e:	681a      	ldr	r2, [r3, #0]
 8005910:	78fb      	ldrb	r3, [r7, #3]
 8005912:	68f9      	ldr	r1, [r7, #12]
 8005914:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005918:	4313      	orrs	r3, r2
 800591a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800591c:	2300      	movs	r3, #0
}
 800591e:	4618      	mov	r0, r3
 8005920:	3714      	adds	r7, #20
 8005922:	46bd      	mov	sp, r7
 8005924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005928:	4770      	bx	lr

0800592a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800592a:	b480      	push	{r7}
 800592c:	b087      	sub	sp, #28
 800592e:	af00      	add	r7, sp, #0
 8005930:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005936:	693b      	ldr	r3, [r7, #16]
 8005938:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800593c:	689b      	ldr	r3, [r3, #8]
 800593e:	f003 0306 	and.w	r3, r3, #6
 8005942:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d102      	bne.n	8005950 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800594a:	2300      	movs	r3, #0
 800594c:	75fb      	strb	r3, [r7, #23]
 800594e:	e00a      	b.n	8005966 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	2b02      	cmp	r3, #2
 8005954:	d002      	beq.n	800595c <USB_GetDevSpeed+0x32>
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	2b06      	cmp	r3, #6
 800595a:	d102      	bne.n	8005962 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800595c:	2302      	movs	r3, #2
 800595e:	75fb      	strb	r3, [r7, #23]
 8005960:	e001      	b.n	8005966 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005962:	230f      	movs	r3, #15
 8005964:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005966:	7dfb      	ldrb	r3, [r7, #23]
}
 8005968:	4618      	mov	r0, r3
 800596a:	371c      	adds	r7, #28
 800596c:	46bd      	mov	sp, r7
 800596e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005972:	4770      	bx	lr

08005974 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005974:	b480      	push	{r7}
 8005976:	b085      	sub	sp, #20
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
 800597c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	781b      	ldrb	r3, [r3, #0]
 8005986:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	785b      	ldrb	r3, [r3, #1]
 800598c:	2b01      	cmp	r3, #1
 800598e:	d13a      	bne.n	8005a06 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005996:	69da      	ldr	r2, [r3, #28]
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	781b      	ldrb	r3, [r3, #0]
 800599c:	f003 030f 	and.w	r3, r3, #15
 80059a0:	2101      	movs	r1, #1
 80059a2:	fa01 f303 	lsl.w	r3, r1, r3
 80059a6:	b29b      	uxth	r3, r3
 80059a8:	68f9      	ldr	r1, [r7, #12]
 80059aa:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80059ae:	4313      	orrs	r3, r2
 80059b0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80059b2:	68bb      	ldr	r3, [r7, #8]
 80059b4:	015a      	lsls	r2, r3, #5
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	4413      	add	r3, r2
 80059ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d155      	bne.n	8005a74 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80059c8:	68bb      	ldr	r3, [r7, #8]
 80059ca:	015a      	lsls	r2, r3, #5
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	4413      	add	r3, r2
 80059d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80059d4:	681a      	ldr	r2, [r3, #0]
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	689b      	ldr	r3, [r3, #8]
 80059da:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	791b      	ldrb	r3, [r3, #4]
 80059e2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80059e4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80059e6:	68bb      	ldr	r3, [r7, #8]
 80059e8:	059b      	lsls	r3, r3, #22
 80059ea:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80059ec:	4313      	orrs	r3, r2
 80059ee:	68ba      	ldr	r2, [r7, #8]
 80059f0:	0151      	lsls	r1, r2, #5
 80059f2:	68fa      	ldr	r2, [r7, #12]
 80059f4:	440a      	add	r2, r1
 80059f6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80059fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80059fe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005a02:	6013      	str	r3, [r2, #0]
 8005a04:	e036      	b.n	8005a74 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a0c:	69da      	ldr	r2, [r3, #28]
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	781b      	ldrb	r3, [r3, #0]
 8005a12:	f003 030f 	and.w	r3, r3, #15
 8005a16:	2101      	movs	r1, #1
 8005a18:	fa01 f303 	lsl.w	r3, r1, r3
 8005a1c:	041b      	lsls	r3, r3, #16
 8005a1e:	68f9      	ldr	r1, [r7, #12]
 8005a20:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005a24:	4313      	orrs	r3, r2
 8005a26:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	015a      	lsls	r2, r3, #5
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	4413      	add	r3, r2
 8005a30:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d11a      	bne.n	8005a74 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005a3e:	68bb      	ldr	r3, [r7, #8]
 8005a40:	015a      	lsls	r2, r3, #5
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	4413      	add	r3, r2
 8005a46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a4a:	681a      	ldr	r2, [r3, #0]
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	689b      	ldr	r3, [r3, #8]
 8005a50:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	791b      	ldrb	r3, [r3, #4]
 8005a58:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005a5a:	430b      	orrs	r3, r1
 8005a5c:	4313      	orrs	r3, r2
 8005a5e:	68ba      	ldr	r2, [r7, #8]
 8005a60:	0151      	lsls	r1, r2, #5
 8005a62:	68fa      	ldr	r2, [r7, #12]
 8005a64:	440a      	add	r2, r1
 8005a66:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005a6a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005a6e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005a72:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005a74:	2300      	movs	r3, #0
}
 8005a76:	4618      	mov	r0, r3
 8005a78:	3714      	adds	r7, #20
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a80:	4770      	bx	lr
	...

08005a84 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005a84:	b480      	push	{r7}
 8005a86:	b085      	sub	sp, #20
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
 8005a8c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	781b      	ldrb	r3, [r3, #0]
 8005a96:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	785b      	ldrb	r3, [r3, #1]
 8005a9c:	2b01      	cmp	r3, #1
 8005a9e:	d161      	bne.n	8005b64 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005aa0:	68bb      	ldr	r3, [r7, #8]
 8005aa2:	015a      	lsls	r2, r3, #5
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	4413      	add	r3, r2
 8005aa8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005ab2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005ab6:	d11f      	bne.n	8005af8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005ab8:	68bb      	ldr	r3, [r7, #8]
 8005aba:	015a      	lsls	r2, r3, #5
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	4413      	add	r3, r2
 8005ac0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	68ba      	ldr	r2, [r7, #8]
 8005ac8:	0151      	lsls	r1, r2, #5
 8005aca:	68fa      	ldr	r2, [r7, #12]
 8005acc:	440a      	add	r2, r1
 8005ace:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005ad2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005ad6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005ad8:	68bb      	ldr	r3, [r7, #8]
 8005ada:	015a      	lsls	r2, r3, #5
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	4413      	add	r3, r2
 8005ae0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	68ba      	ldr	r2, [r7, #8]
 8005ae8:	0151      	lsls	r1, r2, #5
 8005aea:	68fa      	ldr	r2, [r7, #12]
 8005aec:	440a      	add	r2, r1
 8005aee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005af2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005af6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005afe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	781b      	ldrb	r3, [r3, #0]
 8005b04:	f003 030f 	and.w	r3, r3, #15
 8005b08:	2101      	movs	r1, #1
 8005b0a:	fa01 f303 	lsl.w	r3, r1, r3
 8005b0e:	b29b      	uxth	r3, r3
 8005b10:	43db      	mvns	r3, r3
 8005b12:	68f9      	ldr	r1, [r7, #12]
 8005b14:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005b18:	4013      	ands	r3, r2
 8005b1a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b22:	69da      	ldr	r2, [r3, #28]
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	781b      	ldrb	r3, [r3, #0]
 8005b28:	f003 030f 	and.w	r3, r3, #15
 8005b2c:	2101      	movs	r1, #1
 8005b2e:	fa01 f303 	lsl.w	r3, r1, r3
 8005b32:	b29b      	uxth	r3, r3
 8005b34:	43db      	mvns	r3, r3
 8005b36:	68f9      	ldr	r1, [r7, #12]
 8005b38:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005b3c:	4013      	ands	r3, r2
 8005b3e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005b40:	68bb      	ldr	r3, [r7, #8]
 8005b42:	015a      	lsls	r2, r3, #5
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	4413      	add	r3, r2
 8005b48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b4c:	681a      	ldr	r2, [r3, #0]
 8005b4e:	68bb      	ldr	r3, [r7, #8]
 8005b50:	0159      	lsls	r1, r3, #5
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	440b      	add	r3, r1
 8005b56:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b5a:	4619      	mov	r1, r3
 8005b5c:	4b35      	ldr	r3, [pc, #212]	@ (8005c34 <USB_DeactivateEndpoint+0x1b0>)
 8005b5e:	4013      	ands	r3, r2
 8005b60:	600b      	str	r3, [r1, #0]
 8005b62:	e060      	b.n	8005c26 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005b64:	68bb      	ldr	r3, [r7, #8]
 8005b66:	015a      	lsls	r2, r3, #5
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	4413      	add	r3, r2
 8005b6c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005b76:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005b7a:	d11f      	bne.n	8005bbc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005b7c:	68bb      	ldr	r3, [r7, #8]
 8005b7e:	015a      	lsls	r2, r3, #5
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	4413      	add	r3, r2
 8005b84:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	68ba      	ldr	r2, [r7, #8]
 8005b8c:	0151      	lsls	r1, r2, #5
 8005b8e:	68fa      	ldr	r2, [r7, #12]
 8005b90:	440a      	add	r2, r1
 8005b92:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005b96:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005b9a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005b9c:	68bb      	ldr	r3, [r7, #8]
 8005b9e:	015a      	lsls	r2, r3, #5
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	4413      	add	r3, r2
 8005ba4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	68ba      	ldr	r2, [r7, #8]
 8005bac:	0151      	lsls	r1, r2, #5
 8005bae:	68fa      	ldr	r2, [r7, #12]
 8005bb0:	440a      	add	r2, r1
 8005bb2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005bb6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005bba:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005bc2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	781b      	ldrb	r3, [r3, #0]
 8005bc8:	f003 030f 	and.w	r3, r3, #15
 8005bcc:	2101      	movs	r1, #1
 8005bce:	fa01 f303 	lsl.w	r3, r1, r3
 8005bd2:	041b      	lsls	r3, r3, #16
 8005bd4:	43db      	mvns	r3, r3
 8005bd6:	68f9      	ldr	r1, [r7, #12]
 8005bd8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005bdc:	4013      	ands	r3, r2
 8005bde:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005be6:	69da      	ldr	r2, [r3, #28]
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	781b      	ldrb	r3, [r3, #0]
 8005bec:	f003 030f 	and.w	r3, r3, #15
 8005bf0:	2101      	movs	r1, #1
 8005bf2:	fa01 f303 	lsl.w	r3, r1, r3
 8005bf6:	041b      	lsls	r3, r3, #16
 8005bf8:	43db      	mvns	r3, r3
 8005bfa:	68f9      	ldr	r1, [r7, #12]
 8005bfc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005c00:	4013      	ands	r3, r2
 8005c02:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005c04:	68bb      	ldr	r3, [r7, #8]
 8005c06:	015a      	lsls	r2, r3, #5
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	4413      	add	r3, r2
 8005c0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c10:	681a      	ldr	r2, [r3, #0]
 8005c12:	68bb      	ldr	r3, [r7, #8]
 8005c14:	0159      	lsls	r1, r3, #5
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	440b      	add	r3, r1
 8005c1a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c1e:	4619      	mov	r1, r3
 8005c20:	4b05      	ldr	r3, [pc, #20]	@ (8005c38 <USB_DeactivateEndpoint+0x1b4>)
 8005c22:	4013      	ands	r3, r2
 8005c24:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005c26:	2300      	movs	r3, #0
}
 8005c28:	4618      	mov	r0, r3
 8005c2a:	3714      	adds	r7, #20
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c32:	4770      	bx	lr
 8005c34:	ec337800 	.word	0xec337800
 8005c38:	eff37800 	.word	0xeff37800

08005c3c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b08a      	sub	sp, #40	@ 0x28
 8005c40:	af02      	add	r7, sp, #8
 8005c42:	60f8      	str	r0, [r7, #12]
 8005c44:	60b9      	str	r1, [r7, #8]
 8005c46:	4613      	mov	r3, r2
 8005c48:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005c4e:	68bb      	ldr	r3, [r7, #8]
 8005c50:	781b      	ldrb	r3, [r3, #0]
 8005c52:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005c54:	68bb      	ldr	r3, [r7, #8]
 8005c56:	785b      	ldrb	r3, [r3, #1]
 8005c58:	2b01      	cmp	r3, #1
 8005c5a:	f040 817a 	bne.w	8005f52 <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005c5e:	68bb      	ldr	r3, [r7, #8]
 8005c60:	691b      	ldr	r3, [r3, #16]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d132      	bne.n	8005ccc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005c66:	69bb      	ldr	r3, [r7, #24]
 8005c68:	015a      	lsls	r2, r3, #5
 8005c6a:	69fb      	ldr	r3, [r7, #28]
 8005c6c:	4413      	add	r3, r2
 8005c6e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c72:	691b      	ldr	r3, [r3, #16]
 8005c74:	69ba      	ldr	r2, [r7, #24]
 8005c76:	0151      	lsls	r1, r2, #5
 8005c78:	69fa      	ldr	r2, [r7, #28]
 8005c7a:	440a      	add	r2, r1
 8005c7c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005c80:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005c84:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005c88:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005c8a:	69bb      	ldr	r3, [r7, #24]
 8005c8c:	015a      	lsls	r2, r3, #5
 8005c8e:	69fb      	ldr	r3, [r7, #28]
 8005c90:	4413      	add	r3, r2
 8005c92:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c96:	691b      	ldr	r3, [r3, #16]
 8005c98:	69ba      	ldr	r2, [r7, #24]
 8005c9a:	0151      	lsls	r1, r2, #5
 8005c9c:	69fa      	ldr	r2, [r7, #28]
 8005c9e:	440a      	add	r2, r1
 8005ca0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005ca4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005ca8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005caa:	69bb      	ldr	r3, [r7, #24]
 8005cac:	015a      	lsls	r2, r3, #5
 8005cae:	69fb      	ldr	r3, [r7, #28]
 8005cb0:	4413      	add	r3, r2
 8005cb2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005cb6:	691b      	ldr	r3, [r3, #16]
 8005cb8:	69ba      	ldr	r2, [r7, #24]
 8005cba:	0151      	lsls	r1, r2, #5
 8005cbc:	69fa      	ldr	r2, [r7, #28]
 8005cbe:	440a      	add	r2, r1
 8005cc0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005cc4:	0cdb      	lsrs	r3, r3, #19
 8005cc6:	04db      	lsls	r3, r3, #19
 8005cc8:	6113      	str	r3, [r2, #16]
 8005cca:	e092      	b.n	8005df2 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005ccc:	69bb      	ldr	r3, [r7, #24]
 8005cce:	015a      	lsls	r2, r3, #5
 8005cd0:	69fb      	ldr	r3, [r7, #28]
 8005cd2:	4413      	add	r3, r2
 8005cd4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005cd8:	691b      	ldr	r3, [r3, #16]
 8005cda:	69ba      	ldr	r2, [r7, #24]
 8005cdc:	0151      	lsls	r1, r2, #5
 8005cde:	69fa      	ldr	r2, [r7, #28]
 8005ce0:	440a      	add	r2, r1
 8005ce2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005ce6:	0cdb      	lsrs	r3, r3, #19
 8005ce8:	04db      	lsls	r3, r3, #19
 8005cea:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005cec:	69bb      	ldr	r3, [r7, #24]
 8005cee:	015a      	lsls	r2, r3, #5
 8005cf0:	69fb      	ldr	r3, [r7, #28]
 8005cf2:	4413      	add	r3, r2
 8005cf4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005cf8:	691b      	ldr	r3, [r3, #16]
 8005cfa:	69ba      	ldr	r2, [r7, #24]
 8005cfc:	0151      	lsls	r1, r2, #5
 8005cfe:	69fa      	ldr	r2, [r7, #28]
 8005d00:	440a      	add	r2, r1
 8005d02:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005d06:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005d0a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005d0e:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8005d10:	69bb      	ldr	r3, [r7, #24]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d11a      	bne.n	8005d4c <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8005d16:	68bb      	ldr	r3, [r7, #8]
 8005d18:	691a      	ldr	r2, [r3, #16]
 8005d1a:	68bb      	ldr	r3, [r7, #8]
 8005d1c:	689b      	ldr	r3, [r3, #8]
 8005d1e:	429a      	cmp	r2, r3
 8005d20:	d903      	bls.n	8005d2a <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8005d22:	68bb      	ldr	r3, [r7, #8]
 8005d24:	689a      	ldr	r2, [r3, #8]
 8005d26:	68bb      	ldr	r3, [r7, #8]
 8005d28:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005d2a:	69bb      	ldr	r3, [r7, #24]
 8005d2c:	015a      	lsls	r2, r3, #5
 8005d2e:	69fb      	ldr	r3, [r7, #28]
 8005d30:	4413      	add	r3, r2
 8005d32:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d36:	691b      	ldr	r3, [r3, #16]
 8005d38:	69ba      	ldr	r2, [r7, #24]
 8005d3a:	0151      	lsls	r1, r2, #5
 8005d3c:	69fa      	ldr	r2, [r7, #28]
 8005d3e:	440a      	add	r2, r1
 8005d40:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005d44:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005d48:	6113      	str	r3, [r2, #16]
 8005d4a:	e01b      	b.n	8005d84 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005d4c:	69bb      	ldr	r3, [r7, #24]
 8005d4e:	015a      	lsls	r2, r3, #5
 8005d50:	69fb      	ldr	r3, [r7, #28]
 8005d52:	4413      	add	r3, r2
 8005d54:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d58:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005d5a:	68bb      	ldr	r3, [r7, #8]
 8005d5c:	6919      	ldr	r1, [r3, #16]
 8005d5e:	68bb      	ldr	r3, [r7, #8]
 8005d60:	689b      	ldr	r3, [r3, #8]
 8005d62:	440b      	add	r3, r1
 8005d64:	1e59      	subs	r1, r3, #1
 8005d66:	68bb      	ldr	r3, [r7, #8]
 8005d68:	689b      	ldr	r3, [r3, #8]
 8005d6a:	fbb1 f3f3 	udiv	r3, r1, r3
 8005d6e:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005d70:	4ba2      	ldr	r3, [pc, #648]	@ (8005ffc <USB_EPStartXfer+0x3c0>)
 8005d72:	400b      	ands	r3, r1
 8005d74:	69b9      	ldr	r1, [r7, #24]
 8005d76:	0148      	lsls	r0, r1, #5
 8005d78:	69f9      	ldr	r1, [r7, #28]
 8005d7a:	4401      	add	r1, r0
 8005d7c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005d80:	4313      	orrs	r3, r2
 8005d82:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005d84:	69bb      	ldr	r3, [r7, #24]
 8005d86:	015a      	lsls	r2, r3, #5
 8005d88:	69fb      	ldr	r3, [r7, #28]
 8005d8a:	4413      	add	r3, r2
 8005d8c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d90:	691a      	ldr	r2, [r3, #16]
 8005d92:	68bb      	ldr	r3, [r7, #8]
 8005d94:	691b      	ldr	r3, [r3, #16]
 8005d96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005d9a:	69b9      	ldr	r1, [r7, #24]
 8005d9c:	0148      	lsls	r0, r1, #5
 8005d9e:	69f9      	ldr	r1, [r7, #28]
 8005da0:	4401      	add	r1, r0
 8005da2:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005da6:	4313      	orrs	r3, r2
 8005da8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005daa:	68bb      	ldr	r3, [r7, #8]
 8005dac:	791b      	ldrb	r3, [r3, #4]
 8005dae:	2b01      	cmp	r3, #1
 8005db0:	d11f      	bne.n	8005df2 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005db2:	69bb      	ldr	r3, [r7, #24]
 8005db4:	015a      	lsls	r2, r3, #5
 8005db6:	69fb      	ldr	r3, [r7, #28]
 8005db8:	4413      	add	r3, r2
 8005dba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005dbe:	691b      	ldr	r3, [r3, #16]
 8005dc0:	69ba      	ldr	r2, [r7, #24]
 8005dc2:	0151      	lsls	r1, r2, #5
 8005dc4:	69fa      	ldr	r2, [r7, #28]
 8005dc6:	440a      	add	r2, r1
 8005dc8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005dcc:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8005dd0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005dd2:	69bb      	ldr	r3, [r7, #24]
 8005dd4:	015a      	lsls	r2, r3, #5
 8005dd6:	69fb      	ldr	r3, [r7, #28]
 8005dd8:	4413      	add	r3, r2
 8005dda:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005dde:	691b      	ldr	r3, [r3, #16]
 8005de0:	69ba      	ldr	r2, [r7, #24]
 8005de2:	0151      	lsls	r1, r2, #5
 8005de4:	69fa      	ldr	r2, [r7, #28]
 8005de6:	440a      	add	r2, r1
 8005de8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005dec:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005df0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005df2:	79fb      	ldrb	r3, [r7, #7]
 8005df4:	2b01      	cmp	r3, #1
 8005df6:	d14b      	bne.n	8005e90 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005df8:	68bb      	ldr	r3, [r7, #8]
 8005dfa:	69db      	ldr	r3, [r3, #28]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d009      	beq.n	8005e14 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005e00:	69bb      	ldr	r3, [r7, #24]
 8005e02:	015a      	lsls	r2, r3, #5
 8005e04:	69fb      	ldr	r3, [r7, #28]
 8005e06:	4413      	add	r3, r2
 8005e08:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e0c:	461a      	mov	r2, r3
 8005e0e:	68bb      	ldr	r3, [r7, #8]
 8005e10:	69db      	ldr	r3, [r3, #28]
 8005e12:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005e14:	68bb      	ldr	r3, [r7, #8]
 8005e16:	791b      	ldrb	r3, [r3, #4]
 8005e18:	2b01      	cmp	r3, #1
 8005e1a:	d128      	bne.n	8005e6e <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005e1c:	69fb      	ldr	r3, [r7, #28]
 8005e1e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e22:	689b      	ldr	r3, [r3, #8]
 8005e24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d110      	bne.n	8005e4e <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005e2c:	69bb      	ldr	r3, [r7, #24]
 8005e2e:	015a      	lsls	r2, r3, #5
 8005e30:	69fb      	ldr	r3, [r7, #28]
 8005e32:	4413      	add	r3, r2
 8005e34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	69ba      	ldr	r2, [r7, #24]
 8005e3c:	0151      	lsls	r1, r2, #5
 8005e3e:	69fa      	ldr	r2, [r7, #28]
 8005e40:	440a      	add	r2, r1
 8005e42:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005e46:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005e4a:	6013      	str	r3, [r2, #0]
 8005e4c:	e00f      	b.n	8005e6e <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005e4e:	69bb      	ldr	r3, [r7, #24]
 8005e50:	015a      	lsls	r2, r3, #5
 8005e52:	69fb      	ldr	r3, [r7, #28]
 8005e54:	4413      	add	r3, r2
 8005e56:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	69ba      	ldr	r2, [r7, #24]
 8005e5e:	0151      	lsls	r1, r2, #5
 8005e60:	69fa      	ldr	r2, [r7, #28]
 8005e62:	440a      	add	r2, r1
 8005e64:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005e68:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005e6c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005e6e:	69bb      	ldr	r3, [r7, #24]
 8005e70:	015a      	lsls	r2, r3, #5
 8005e72:	69fb      	ldr	r3, [r7, #28]
 8005e74:	4413      	add	r3, r2
 8005e76:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	69ba      	ldr	r2, [r7, #24]
 8005e7e:	0151      	lsls	r1, r2, #5
 8005e80:	69fa      	ldr	r2, [r7, #28]
 8005e82:	440a      	add	r2, r1
 8005e84:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005e88:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005e8c:	6013      	str	r3, [r2, #0]
 8005e8e:	e165      	b.n	800615c <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005e90:	69bb      	ldr	r3, [r7, #24]
 8005e92:	015a      	lsls	r2, r3, #5
 8005e94:	69fb      	ldr	r3, [r7, #28]
 8005e96:	4413      	add	r3, r2
 8005e98:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	69ba      	ldr	r2, [r7, #24]
 8005ea0:	0151      	lsls	r1, r2, #5
 8005ea2:	69fa      	ldr	r2, [r7, #28]
 8005ea4:	440a      	add	r2, r1
 8005ea6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005eaa:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005eae:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005eb0:	68bb      	ldr	r3, [r7, #8]
 8005eb2:	791b      	ldrb	r3, [r3, #4]
 8005eb4:	2b01      	cmp	r3, #1
 8005eb6:	d015      	beq.n	8005ee4 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005eb8:	68bb      	ldr	r3, [r7, #8]
 8005eba:	691b      	ldr	r3, [r3, #16]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	f000 814d 	beq.w	800615c <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005ec2:	69fb      	ldr	r3, [r7, #28]
 8005ec4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ec8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005eca:	68bb      	ldr	r3, [r7, #8]
 8005ecc:	781b      	ldrb	r3, [r3, #0]
 8005ece:	f003 030f 	and.w	r3, r3, #15
 8005ed2:	2101      	movs	r1, #1
 8005ed4:	fa01 f303 	lsl.w	r3, r1, r3
 8005ed8:	69f9      	ldr	r1, [r7, #28]
 8005eda:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005ede:	4313      	orrs	r3, r2
 8005ee0:	634b      	str	r3, [r1, #52]	@ 0x34
 8005ee2:	e13b      	b.n	800615c <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005ee4:	69fb      	ldr	r3, [r7, #28]
 8005ee6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005eea:	689b      	ldr	r3, [r3, #8]
 8005eec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d110      	bne.n	8005f16 <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005ef4:	69bb      	ldr	r3, [r7, #24]
 8005ef6:	015a      	lsls	r2, r3, #5
 8005ef8:	69fb      	ldr	r3, [r7, #28]
 8005efa:	4413      	add	r3, r2
 8005efc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	69ba      	ldr	r2, [r7, #24]
 8005f04:	0151      	lsls	r1, r2, #5
 8005f06:	69fa      	ldr	r2, [r7, #28]
 8005f08:	440a      	add	r2, r1
 8005f0a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005f0e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005f12:	6013      	str	r3, [r2, #0]
 8005f14:	e00f      	b.n	8005f36 <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005f16:	69bb      	ldr	r3, [r7, #24]
 8005f18:	015a      	lsls	r2, r3, #5
 8005f1a:	69fb      	ldr	r3, [r7, #28]
 8005f1c:	4413      	add	r3, r2
 8005f1e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	69ba      	ldr	r2, [r7, #24]
 8005f26:	0151      	lsls	r1, r2, #5
 8005f28:	69fa      	ldr	r2, [r7, #28]
 8005f2a:	440a      	add	r2, r1
 8005f2c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005f30:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005f34:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005f36:	68bb      	ldr	r3, [r7, #8]
 8005f38:	68d9      	ldr	r1, [r3, #12]
 8005f3a:	68bb      	ldr	r3, [r7, #8]
 8005f3c:	781a      	ldrb	r2, [r3, #0]
 8005f3e:	68bb      	ldr	r3, [r7, #8]
 8005f40:	691b      	ldr	r3, [r3, #16]
 8005f42:	b298      	uxth	r0, r3
 8005f44:	79fb      	ldrb	r3, [r7, #7]
 8005f46:	9300      	str	r3, [sp, #0]
 8005f48:	4603      	mov	r3, r0
 8005f4a:	68f8      	ldr	r0, [r7, #12]
 8005f4c:	f000 f9b8 	bl	80062c0 <USB_WritePacket>
 8005f50:	e104      	b.n	800615c <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005f52:	69bb      	ldr	r3, [r7, #24]
 8005f54:	015a      	lsls	r2, r3, #5
 8005f56:	69fb      	ldr	r3, [r7, #28]
 8005f58:	4413      	add	r3, r2
 8005f5a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f5e:	691b      	ldr	r3, [r3, #16]
 8005f60:	69ba      	ldr	r2, [r7, #24]
 8005f62:	0151      	lsls	r1, r2, #5
 8005f64:	69fa      	ldr	r2, [r7, #28]
 8005f66:	440a      	add	r2, r1
 8005f68:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005f6c:	0cdb      	lsrs	r3, r3, #19
 8005f6e:	04db      	lsls	r3, r3, #19
 8005f70:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005f72:	69bb      	ldr	r3, [r7, #24]
 8005f74:	015a      	lsls	r2, r3, #5
 8005f76:	69fb      	ldr	r3, [r7, #28]
 8005f78:	4413      	add	r3, r2
 8005f7a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f7e:	691b      	ldr	r3, [r3, #16]
 8005f80:	69ba      	ldr	r2, [r7, #24]
 8005f82:	0151      	lsls	r1, r2, #5
 8005f84:	69fa      	ldr	r2, [r7, #28]
 8005f86:	440a      	add	r2, r1
 8005f88:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005f8c:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005f90:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005f94:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8005f96:	69bb      	ldr	r3, [r7, #24]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d131      	bne.n	8006000 <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 8005f9c:	68bb      	ldr	r3, [r7, #8]
 8005f9e:	691b      	ldr	r3, [r3, #16]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d003      	beq.n	8005fac <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 8005fa4:	68bb      	ldr	r3, [r7, #8]
 8005fa6:	689a      	ldr	r2, [r3, #8]
 8005fa8:	68bb      	ldr	r3, [r7, #8]
 8005faa:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8005fac:	68bb      	ldr	r3, [r7, #8]
 8005fae:	689a      	ldr	r2, [r3, #8]
 8005fb0:	68bb      	ldr	r3, [r7, #8]
 8005fb2:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005fb4:	69bb      	ldr	r3, [r7, #24]
 8005fb6:	015a      	lsls	r2, r3, #5
 8005fb8:	69fb      	ldr	r3, [r7, #28]
 8005fba:	4413      	add	r3, r2
 8005fbc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005fc0:	691a      	ldr	r2, [r3, #16]
 8005fc2:	68bb      	ldr	r3, [r7, #8]
 8005fc4:	6a1b      	ldr	r3, [r3, #32]
 8005fc6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005fca:	69b9      	ldr	r1, [r7, #24]
 8005fcc:	0148      	lsls	r0, r1, #5
 8005fce:	69f9      	ldr	r1, [r7, #28]
 8005fd0:	4401      	add	r1, r0
 8005fd2:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005fd6:	4313      	orrs	r3, r2
 8005fd8:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005fda:	69bb      	ldr	r3, [r7, #24]
 8005fdc:	015a      	lsls	r2, r3, #5
 8005fde:	69fb      	ldr	r3, [r7, #28]
 8005fe0:	4413      	add	r3, r2
 8005fe2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005fe6:	691b      	ldr	r3, [r3, #16]
 8005fe8:	69ba      	ldr	r2, [r7, #24]
 8005fea:	0151      	lsls	r1, r2, #5
 8005fec:	69fa      	ldr	r2, [r7, #28]
 8005fee:	440a      	add	r2, r1
 8005ff0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005ff4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005ff8:	6113      	str	r3, [r2, #16]
 8005ffa:	e061      	b.n	80060c0 <USB_EPStartXfer+0x484>
 8005ffc:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8006000:	68bb      	ldr	r3, [r7, #8]
 8006002:	691b      	ldr	r3, [r3, #16]
 8006004:	2b00      	cmp	r3, #0
 8006006:	d123      	bne.n	8006050 <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006008:	69bb      	ldr	r3, [r7, #24]
 800600a:	015a      	lsls	r2, r3, #5
 800600c:	69fb      	ldr	r3, [r7, #28]
 800600e:	4413      	add	r3, r2
 8006010:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006014:	691a      	ldr	r2, [r3, #16]
 8006016:	68bb      	ldr	r3, [r7, #8]
 8006018:	689b      	ldr	r3, [r3, #8]
 800601a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800601e:	69b9      	ldr	r1, [r7, #24]
 8006020:	0148      	lsls	r0, r1, #5
 8006022:	69f9      	ldr	r1, [r7, #28]
 8006024:	4401      	add	r1, r0
 8006026:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800602a:	4313      	orrs	r3, r2
 800602c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800602e:	69bb      	ldr	r3, [r7, #24]
 8006030:	015a      	lsls	r2, r3, #5
 8006032:	69fb      	ldr	r3, [r7, #28]
 8006034:	4413      	add	r3, r2
 8006036:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800603a:	691b      	ldr	r3, [r3, #16]
 800603c:	69ba      	ldr	r2, [r7, #24]
 800603e:	0151      	lsls	r1, r2, #5
 8006040:	69fa      	ldr	r2, [r7, #28]
 8006042:	440a      	add	r2, r1
 8006044:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006048:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800604c:	6113      	str	r3, [r2, #16]
 800604e:	e037      	b.n	80060c0 <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006050:	68bb      	ldr	r3, [r7, #8]
 8006052:	691a      	ldr	r2, [r3, #16]
 8006054:	68bb      	ldr	r3, [r7, #8]
 8006056:	689b      	ldr	r3, [r3, #8]
 8006058:	4413      	add	r3, r2
 800605a:	1e5a      	subs	r2, r3, #1
 800605c:	68bb      	ldr	r3, [r7, #8]
 800605e:	689b      	ldr	r3, [r3, #8]
 8006060:	fbb2 f3f3 	udiv	r3, r2, r3
 8006064:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8006066:	68bb      	ldr	r3, [r7, #8]
 8006068:	689b      	ldr	r3, [r3, #8]
 800606a:	8afa      	ldrh	r2, [r7, #22]
 800606c:	fb03 f202 	mul.w	r2, r3, r2
 8006070:	68bb      	ldr	r3, [r7, #8]
 8006072:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006074:	69bb      	ldr	r3, [r7, #24]
 8006076:	015a      	lsls	r2, r3, #5
 8006078:	69fb      	ldr	r3, [r7, #28]
 800607a:	4413      	add	r3, r2
 800607c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006080:	691a      	ldr	r2, [r3, #16]
 8006082:	8afb      	ldrh	r3, [r7, #22]
 8006084:	04d9      	lsls	r1, r3, #19
 8006086:	4b38      	ldr	r3, [pc, #224]	@ (8006168 <USB_EPStartXfer+0x52c>)
 8006088:	400b      	ands	r3, r1
 800608a:	69b9      	ldr	r1, [r7, #24]
 800608c:	0148      	lsls	r0, r1, #5
 800608e:	69f9      	ldr	r1, [r7, #28]
 8006090:	4401      	add	r1, r0
 8006092:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006096:	4313      	orrs	r3, r2
 8006098:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800609a:	69bb      	ldr	r3, [r7, #24]
 800609c:	015a      	lsls	r2, r3, #5
 800609e:	69fb      	ldr	r3, [r7, #28]
 80060a0:	4413      	add	r3, r2
 80060a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060a6:	691a      	ldr	r2, [r3, #16]
 80060a8:	68bb      	ldr	r3, [r7, #8]
 80060aa:	6a1b      	ldr	r3, [r3, #32]
 80060ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80060b0:	69b9      	ldr	r1, [r7, #24]
 80060b2:	0148      	lsls	r0, r1, #5
 80060b4:	69f9      	ldr	r1, [r7, #28]
 80060b6:	4401      	add	r1, r0
 80060b8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80060bc:	4313      	orrs	r3, r2
 80060be:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80060c0:	79fb      	ldrb	r3, [r7, #7]
 80060c2:	2b01      	cmp	r3, #1
 80060c4:	d10d      	bne.n	80060e2 <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80060c6:	68bb      	ldr	r3, [r7, #8]
 80060c8:	68db      	ldr	r3, [r3, #12]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d009      	beq.n	80060e2 <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80060ce:	68bb      	ldr	r3, [r7, #8]
 80060d0:	68d9      	ldr	r1, [r3, #12]
 80060d2:	69bb      	ldr	r3, [r7, #24]
 80060d4:	015a      	lsls	r2, r3, #5
 80060d6:	69fb      	ldr	r3, [r7, #28]
 80060d8:	4413      	add	r3, r2
 80060da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060de:	460a      	mov	r2, r1
 80060e0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80060e2:	68bb      	ldr	r3, [r7, #8]
 80060e4:	791b      	ldrb	r3, [r3, #4]
 80060e6:	2b01      	cmp	r3, #1
 80060e8:	d128      	bne.n	800613c <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80060ea:	69fb      	ldr	r3, [r7, #28]
 80060ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80060f0:	689b      	ldr	r3, [r3, #8]
 80060f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d110      	bne.n	800611c <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80060fa:	69bb      	ldr	r3, [r7, #24]
 80060fc:	015a      	lsls	r2, r3, #5
 80060fe:	69fb      	ldr	r3, [r7, #28]
 8006100:	4413      	add	r3, r2
 8006102:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	69ba      	ldr	r2, [r7, #24]
 800610a:	0151      	lsls	r1, r2, #5
 800610c:	69fa      	ldr	r2, [r7, #28]
 800610e:	440a      	add	r2, r1
 8006110:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006114:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006118:	6013      	str	r3, [r2, #0]
 800611a:	e00f      	b.n	800613c <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800611c:	69bb      	ldr	r3, [r7, #24]
 800611e:	015a      	lsls	r2, r3, #5
 8006120:	69fb      	ldr	r3, [r7, #28]
 8006122:	4413      	add	r3, r2
 8006124:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	69ba      	ldr	r2, [r7, #24]
 800612c:	0151      	lsls	r1, r2, #5
 800612e:	69fa      	ldr	r2, [r7, #28]
 8006130:	440a      	add	r2, r1
 8006132:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006136:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800613a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800613c:	69bb      	ldr	r3, [r7, #24]
 800613e:	015a      	lsls	r2, r3, #5
 8006140:	69fb      	ldr	r3, [r7, #28]
 8006142:	4413      	add	r3, r2
 8006144:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	69ba      	ldr	r2, [r7, #24]
 800614c:	0151      	lsls	r1, r2, #5
 800614e:	69fa      	ldr	r2, [r7, #28]
 8006150:	440a      	add	r2, r1
 8006152:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006156:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800615a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800615c:	2300      	movs	r3, #0
}
 800615e:	4618      	mov	r0, r3
 8006160:	3720      	adds	r7, #32
 8006162:	46bd      	mov	sp, r7
 8006164:	bd80      	pop	{r7, pc}
 8006166:	bf00      	nop
 8006168:	1ff80000 	.word	0x1ff80000

0800616c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800616c:	b480      	push	{r7}
 800616e:	b087      	sub	sp, #28
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
 8006174:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006176:	2300      	movs	r3, #0
 8006178:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800617a:	2300      	movs	r3, #0
 800617c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	785b      	ldrb	r3, [r3, #1]
 8006186:	2b01      	cmp	r3, #1
 8006188:	d14a      	bne.n	8006220 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	781b      	ldrb	r3, [r3, #0]
 800618e:	015a      	lsls	r2, r3, #5
 8006190:	693b      	ldr	r3, [r7, #16]
 8006192:	4413      	add	r3, r2
 8006194:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800619e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80061a2:	f040 8086 	bne.w	80062b2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	781b      	ldrb	r3, [r3, #0]
 80061aa:	015a      	lsls	r2, r3, #5
 80061ac:	693b      	ldr	r3, [r7, #16]
 80061ae:	4413      	add	r3, r2
 80061b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	683a      	ldr	r2, [r7, #0]
 80061b8:	7812      	ldrb	r2, [r2, #0]
 80061ba:	0151      	lsls	r1, r2, #5
 80061bc:	693a      	ldr	r2, [r7, #16]
 80061be:	440a      	add	r2, r1
 80061c0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80061c4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80061c8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	781b      	ldrb	r3, [r3, #0]
 80061ce:	015a      	lsls	r2, r3, #5
 80061d0:	693b      	ldr	r3, [r7, #16]
 80061d2:	4413      	add	r3, r2
 80061d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	683a      	ldr	r2, [r7, #0]
 80061dc:	7812      	ldrb	r2, [r2, #0]
 80061de:	0151      	lsls	r1, r2, #5
 80061e0:	693a      	ldr	r2, [r7, #16]
 80061e2:	440a      	add	r2, r1
 80061e4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80061e8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80061ec:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	3301      	adds	r3, #1
 80061f2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	f242 7210 	movw	r2, #10000	@ 0x2710
 80061fa:	4293      	cmp	r3, r2
 80061fc:	d902      	bls.n	8006204 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80061fe:	2301      	movs	r3, #1
 8006200:	75fb      	strb	r3, [r7, #23]
          break;
 8006202:	e056      	b.n	80062b2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006204:	683b      	ldr	r3, [r7, #0]
 8006206:	781b      	ldrb	r3, [r3, #0]
 8006208:	015a      	lsls	r2, r3, #5
 800620a:	693b      	ldr	r3, [r7, #16]
 800620c:	4413      	add	r3, r2
 800620e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006218:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800621c:	d0e7      	beq.n	80061ee <USB_EPStopXfer+0x82>
 800621e:	e048      	b.n	80062b2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	781b      	ldrb	r3, [r3, #0]
 8006224:	015a      	lsls	r2, r3, #5
 8006226:	693b      	ldr	r3, [r7, #16]
 8006228:	4413      	add	r3, r2
 800622a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006234:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006238:	d13b      	bne.n	80062b2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	781b      	ldrb	r3, [r3, #0]
 800623e:	015a      	lsls	r2, r3, #5
 8006240:	693b      	ldr	r3, [r7, #16]
 8006242:	4413      	add	r3, r2
 8006244:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	683a      	ldr	r2, [r7, #0]
 800624c:	7812      	ldrb	r2, [r2, #0]
 800624e:	0151      	lsls	r1, r2, #5
 8006250:	693a      	ldr	r2, [r7, #16]
 8006252:	440a      	add	r2, r1
 8006254:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006258:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800625c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	781b      	ldrb	r3, [r3, #0]
 8006262:	015a      	lsls	r2, r3, #5
 8006264:	693b      	ldr	r3, [r7, #16]
 8006266:	4413      	add	r3, r2
 8006268:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	683a      	ldr	r2, [r7, #0]
 8006270:	7812      	ldrb	r2, [r2, #0]
 8006272:	0151      	lsls	r1, r2, #5
 8006274:	693a      	ldr	r2, [r7, #16]
 8006276:	440a      	add	r2, r1
 8006278:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800627c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006280:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	3301      	adds	r3, #1
 8006286:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800628e:	4293      	cmp	r3, r2
 8006290:	d902      	bls.n	8006298 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8006292:	2301      	movs	r3, #1
 8006294:	75fb      	strb	r3, [r7, #23]
          break;
 8006296:	e00c      	b.n	80062b2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	781b      	ldrb	r3, [r3, #0]
 800629c:	015a      	lsls	r2, r3, #5
 800629e:	693b      	ldr	r3, [r7, #16]
 80062a0:	4413      	add	r3, r2
 80062a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80062ac:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80062b0:	d0e7      	beq.n	8006282 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80062b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80062b4:	4618      	mov	r0, r3
 80062b6:	371c      	adds	r7, #28
 80062b8:	46bd      	mov	sp, r7
 80062ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062be:	4770      	bx	lr

080062c0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80062c0:	b480      	push	{r7}
 80062c2:	b089      	sub	sp, #36	@ 0x24
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	60f8      	str	r0, [r7, #12]
 80062c8:	60b9      	str	r1, [r7, #8]
 80062ca:	4611      	mov	r1, r2
 80062cc:	461a      	mov	r2, r3
 80062ce:	460b      	mov	r3, r1
 80062d0:	71fb      	strb	r3, [r7, #7]
 80062d2:	4613      	mov	r3, r2
 80062d4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80062da:	68bb      	ldr	r3, [r7, #8]
 80062dc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80062de:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d123      	bne.n	800632e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80062e6:	88bb      	ldrh	r3, [r7, #4]
 80062e8:	3303      	adds	r3, #3
 80062ea:	089b      	lsrs	r3, r3, #2
 80062ec:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80062ee:	2300      	movs	r3, #0
 80062f0:	61bb      	str	r3, [r7, #24]
 80062f2:	e018      	b.n	8006326 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80062f4:	79fb      	ldrb	r3, [r7, #7]
 80062f6:	031a      	lsls	r2, r3, #12
 80062f8:	697b      	ldr	r3, [r7, #20]
 80062fa:	4413      	add	r3, r2
 80062fc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006300:	461a      	mov	r2, r3
 8006302:	69fb      	ldr	r3, [r7, #28]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006308:	69fb      	ldr	r3, [r7, #28]
 800630a:	3301      	adds	r3, #1
 800630c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800630e:	69fb      	ldr	r3, [r7, #28]
 8006310:	3301      	adds	r3, #1
 8006312:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006314:	69fb      	ldr	r3, [r7, #28]
 8006316:	3301      	adds	r3, #1
 8006318:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800631a:	69fb      	ldr	r3, [r7, #28]
 800631c:	3301      	adds	r3, #1
 800631e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006320:	69bb      	ldr	r3, [r7, #24]
 8006322:	3301      	adds	r3, #1
 8006324:	61bb      	str	r3, [r7, #24]
 8006326:	69ba      	ldr	r2, [r7, #24]
 8006328:	693b      	ldr	r3, [r7, #16]
 800632a:	429a      	cmp	r2, r3
 800632c:	d3e2      	bcc.n	80062f4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800632e:	2300      	movs	r3, #0
}
 8006330:	4618      	mov	r0, r3
 8006332:	3724      	adds	r7, #36	@ 0x24
 8006334:	46bd      	mov	sp, r7
 8006336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633a:	4770      	bx	lr

0800633c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800633c:	b480      	push	{r7}
 800633e:	b08b      	sub	sp, #44	@ 0x2c
 8006340:	af00      	add	r7, sp, #0
 8006342:	60f8      	str	r0, [r7, #12]
 8006344:	60b9      	str	r1, [r7, #8]
 8006346:	4613      	mov	r3, r2
 8006348:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800634e:	68bb      	ldr	r3, [r7, #8]
 8006350:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006352:	88fb      	ldrh	r3, [r7, #6]
 8006354:	089b      	lsrs	r3, r3, #2
 8006356:	b29b      	uxth	r3, r3
 8006358:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800635a:	88fb      	ldrh	r3, [r7, #6]
 800635c:	f003 0303 	and.w	r3, r3, #3
 8006360:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006362:	2300      	movs	r3, #0
 8006364:	623b      	str	r3, [r7, #32]
 8006366:	e014      	b.n	8006392 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006368:	69bb      	ldr	r3, [r7, #24]
 800636a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800636e:	681a      	ldr	r2, [r3, #0]
 8006370:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006372:	601a      	str	r2, [r3, #0]
    pDest++;
 8006374:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006376:	3301      	adds	r3, #1
 8006378:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800637a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800637c:	3301      	adds	r3, #1
 800637e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006380:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006382:	3301      	adds	r3, #1
 8006384:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006388:	3301      	adds	r3, #1
 800638a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800638c:	6a3b      	ldr	r3, [r7, #32]
 800638e:	3301      	adds	r3, #1
 8006390:	623b      	str	r3, [r7, #32]
 8006392:	6a3a      	ldr	r2, [r7, #32]
 8006394:	697b      	ldr	r3, [r7, #20]
 8006396:	429a      	cmp	r2, r3
 8006398:	d3e6      	bcc.n	8006368 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800639a:	8bfb      	ldrh	r3, [r7, #30]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d01e      	beq.n	80063de <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80063a0:	2300      	movs	r3, #0
 80063a2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80063a4:	69bb      	ldr	r3, [r7, #24]
 80063a6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80063aa:	461a      	mov	r2, r3
 80063ac:	f107 0310 	add.w	r3, r7, #16
 80063b0:	6812      	ldr	r2, [r2, #0]
 80063b2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80063b4:	693a      	ldr	r2, [r7, #16]
 80063b6:	6a3b      	ldr	r3, [r7, #32]
 80063b8:	b2db      	uxtb	r3, r3
 80063ba:	00db      	lsls	r3, r3, #3
 80063bc:	fa22 f303 	lsr.w	r3, r2, r3
 80063c0:	b2da      	uxtb	r2, r3
 80063c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063c4:	701a      	strb	r2, [r3, #0]
      i++;
 80063c6:	6a3b      	ldr	r3, [r7, #32]
 80063c8:	3301      	adds	r3, #1
 80063ca:	623b      	str	r3, [r7, #32]
      pDest++;
 80063cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063ce:	3301      	adds	r3, #1
 80063d0:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80063d2:	8bfb      	ldrh	r3, [r7, #30]
 80063d4:	3b01      	subs	r3, #1
 80063d6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80063d8:	8bfb      	ldrh	r3, [r7, #30]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d1ea      	bne.n	80063b4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80063de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80063e0:	4618      	mov	r0, r3
 80063e2:	372c      	adds	r7, #44	@ 0x2c
 80063e4:	46bd      	mov	sp, r7
 80063e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ea:	4770      	bx	lr

080063ec <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80063ec:	b480      	push	{r7}
 80063ee:	b085      	sub	sp, #20
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
 80063f4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	781b      	ldrb	r3, [r3, #0]
 80063fe:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	785b      	ldrb	r3, [r3, #1]
 8006404:	2b01      	cmp	r3, #1
 8006406:	d12c      	bne.n	8006462 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006408:	68bb      	ldr	r3, [r7, #8]
 800640a:	015a      	lsls	r2, r3, #5
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	4413      	add	r3, r2
 8006410:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	2b00      	cmp	r3, #0
 8006418:	db12      	blt.n	8006440 <USB_EPSetStall+0x54>
 800641a:	68bb      	ldr	r3, [r7, #8]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d00f      	beq.n	8006440 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006420:	68bb      	ldr	r3, [r7, #8]
 8006422:	015a      	lsls	r2, r3, #5
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	4413      	add	r3, r2
 8006428:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	68ba      	ldr	r2, [r7, #8]
 8006430:	0151      	lsls	r1, r2, #5
 8006432:	68fa      	ldr	r2, [r7, #12]
 8006434:	440a      	add	r2, r1
 8006436:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800643a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800643e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006440:	68bb      	ldr	r3, [r7, #8]
 8006442:	015a      	lsls	r2, r3, #5
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	4413      	add	r3, r2
 8006448:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	68ba      	ldr	r2, [r7, #8]
 8006450:	0151      	lsls	r1, r2, #5
 8006452:	68fa      	ldr	r2, [r7, #12]
 8006454:	440a      	add	r2, r1
 8006456:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800645a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800645e:	6013      	str	r3, [r2, #0]
 8006460:	e02b      	b.n	80064ba <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006462:	68bb      	ldr	r3, [r7, #8]
 8006464:	015a      	lsls	r2, r3, #5
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	4413      	add	r3, r2
 800646a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	2b00      	cmp	r3, #0
 8006472:	db12      	blt.n	800649a <USB_EPSetStall+0xae>
 8006474:	68bb      	ldr	r3, [r7, #8]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d00f      	beq.n	800649a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800647a:	68bb      	ldr	r3, [r7, #8]
 800647c:	015a      	lsls	r2, r3, #5
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	4413      	add	r3, r2
 8006482:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	68ba      	ldr	r2, [r7, #8]
 800648a:	0151      	lsls	r1, r2, #5
 800648c:	68fa      	ldr	r2, [r7, #12]
 800648e:	440a      	add	r2, r1
 8006490:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006494:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006498:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800649a:	68bb      	ldr	r3, [r7, #8]
 800649c:	015a      	lsls	r2, r3, #5
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	4413      	add	r3, r2
 80064a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	68ba      	ldr	r2, [r7, #8]
 80064aa:	0151      	lsls	r1, r2, #5
 80064ac:	68fa      	ldr	r2, [r7, #12]
 80064ae:	440a      	add	r2, r1
 80064b0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80064b4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80064b8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80064ba:	2300      	movs	r3, #0
}
 80064bc:	4618      	mov	r0, r3
 80064be:	3714      	adds	r7, #20
 80064c0:	46bd      	mov	sp, r7
 80064c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c6:	4770      	bx	lr

080064c8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80064c8:	b480      	push	{r7}
 80064ca:	b085      	sub	sp, #20
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
 80064d0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	781b      	ldrb	r3, [r3, #0]
 80064da:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	785b      	ldrb	r3, [r3, #1]
 80064e0:	2b01      	cmp	r3, #1
 80064e2:	d128      	bne.n	8006536 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80064e4:	68bb      	ldr	r3, [r7, #8]
 80064e6:	015a      	lsls	r2, r3, #5
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	4413      	add	r3, r2
 80064ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	68ba      	ldr	r2, [r7, #8]
 80064f4:	0151      	lsls	r1, r2, #5
 80064f6:	68fa      	ldr	r2, [r7, #12]
 80064f8:	440a      	add	r2, r1
 80064fa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80064fe:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006502:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	791b      	ldrb	r3, [r3, #4]
 8006508:	2b03      	cmp	r3, #3
 800650a:	d003      	beq.n	8006514 <USB_EPClearStall+0x4c>
 800650c:	683b      	ldr	r3, [r7, #0]
 800650e:	791b      	ldrb	r3, [r3, #4]
 8006510:	2b02      	cmp	r3, #2
 8006512:	d138      	bne.n	8006586 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006514:	68bb      	ldr	r3, [r7, #8]
 8006516:	015a      	lsls	r2, r3, #5
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	4413      	add	r3, r2
 800651c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	68ba      	ldr	r2, [r7, #8]
 8006524:	0151      	lsls	r1, r2, #5
 8006526:	68fa      	ldr	r2, [r7, #12]
 8006528:	440a      	add	r2, r1
 800652a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800652e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006532:	6013      	str	r3, [r2, #0]
 8006534:	e027      	b.n	8006586 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006536:	68bb      	ldr	r3, [r7, #8]
 8006538:	015a      	lsls	r2, r3, #5
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	4413      	add	r3, r2
 800653e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	68ba      	ldr	r2, [r7, #8]
 8006546:	0151      	lsls	r1, r2, #5
 8006548:	68fa      	ldr	r2, [r7, #12]
 800654a:	440a      	add	r2, r1
 800654c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006550:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006554:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	791b      	ldrb	r3, [r3, #4]
 800655a:	2b03      	cmp	r3, #3
 800655c:	d003      	beq.n	8006566 <USB_EPClearStall+0x9e>
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	791b      	ldrb	r3, [r3, #4]
 8006562:	2b02      	cmp	r3, #2
 8006564:	d10f      	bne.n	8006586 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006566:	68bb      	ldr	r3, [r7, #8]
 8006568:	015a      	lsls	r2, r3, #5
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	4413      	add	r3, r2
 800656e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	68ba      	ldr	r2, [r7, #8]
 8006576:	0151      	lsls	r1, r2, #5
 8006578:	68fa      	ldr	r2, [r7, #12]
 800657a:	440a      	add	r2, r1
 800657c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006580:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006584:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006586:	2300      	movs	r3, #0
}
 8006588:	4618      	mov	r0, r3
 800658a:	3714      	adds	r7, #20
 800658c:	46bd      	mov	sp, r7
 800658e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006592:	4770      	bx	lr

08006594 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006594:	b480      	push	{r7}
 8006596:	b085      	sub	sp, #20
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
 800659c:	460b      	mov	r3, r1
 800659e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	68fa      	ldr	r2, [r7, #12]
 80065ae:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80065b2:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80065b6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80065be:	681a      	ldr	r2, [r3, #0]
 80065c0:	78fb      	ldrb	r3, [r7, #3]
 80065c2:	011b      	lsls	r3, r3, #4
 80065c4:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 80065c8:	68f9      	ldr	r1, [r7, #12]
 80065ca:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80065ce:	4313      	orrs	r3, r2
 80065d0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80065d2:	2300      	movs	r3, #0
}
 80065d4:	4618      	mov	r0, r3
 80065d6:	3714      	adds	r7, #20
 80065d8:	46bd      	mov	sp, r7
 80065da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065de:	4770      	bx	lr

080065e0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80065e0:	b480      	push	{r7}
 80065e2:	b085      	sub	sp, #20
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	68fa      	ldr	r2, [r7, #12]
 80065f6:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80065fa:	f023 0303 	bic.w	r3, r3, #3
 80065fe:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006606:	685b      	ldr	r3, [r3, #4]
 8006608:	68fa      	ldr	r2, [r7, #12]
 800660a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800660e:	f023 0302 	bic.w	r3, r3, #2
 8006612:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006614:	2300      	movs	r3, #0
}
 8006616:	4618      	mov	r0, r3
 8006618:	3714      	adds	r7, #20
 800661a:	46bd      	mov	sp, r7
 800661c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006620:	4770      	bx	lr

08006622 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006622:	b480      	push	{r7}
 8006624:	b085      	sub	sp, #20
 8006626:	af00      	add	r7, sp, #0
 8006628:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	68fa      	ldr	r2, [r7, #12]
 8006638:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800663c:	f023 0303 	bic.w	r3, r3, #3
 8006640:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006648:	685b      	ldr	r3, [r3, #4]
 800664a:	68fa      	ldr	r2, [r7, #12]
 800664c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006650:	f043 0302 	orr.w	r3, r3, #2
 8006654:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006656:	2300      	movs	r3, #0
}
 8006658:	4618      	mov	r0, r3
 800665a:	3714      	adds	r7, #20
 800665c:	46bd      	mov	sp, r7
 800665e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006662:	4770      	bx	lr

08006664 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8006664:	b480      	push	{r7}
 8006666:	b085      	sub	sp, #20
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	695b      	ldr	r3, [r3, #20]
 8006670:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	699b      	ldr	r3, [r3, #24]
 8006676:	68fa      	ldr	r2, [r7, #12]
 8006678:	4013      	ands	r3, r2
 800667a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800667c:	68fb      	ldr	r3, [r7, #12]
}
 800667e:	4618      	mov	r0, r3
 8006680:	3714      	adds	r7, #20
 8006682:	46bd      	mov	sp, r7
 8006684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006688:	4770      	bx	lr

0800668a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800668a:	b480      	push	{r7}
 800668c:	b085      	sub	sp, #20
 800668e:	af00      	add	r7, sp, #0
 8006690:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800669c:	699b      	ldr	r3, [r3, #24]
 800669e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80066a6:	69db      	ldr	r3, [r3, #28]
 80066a8:	68ba      	ldr	r2, [r7, #8]
 80066aa:	4013      	ands	r3, r2
 80066ac:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80066ae:	68bb      	ldr	r3, [r7, #8]
 80066b0:	0c1b      	lsrs	r3, r3, #16
}
 80066b2:	4618      	mov	r0, r3
 80066b4:	3714      	adds	r7, #20
 80066b6:	46bd      	mov	sp, r7
 80066b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066bc:	4770      	bx	lr

080066be <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80066be:	b480      	push	{r7}
 80066c0:	b085      	sub	sp, #20
 80066c2:	af00      	add	r7, sp, #0
 80066c4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80066d0:	699b      	ldr	r3, [r3, #24]
 80066d2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80066da:	69db      	ldr	r3, [r3, #28]
 80066dc:	68ba      	ldr	r2, [r7, #8]
 80066de:	4013      	ands	r3, r2
 80066e0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80066e2:	68bb      	ldr	r3, [r7, #8]
 80066e4:	b29b      	uxth	r3, r3
}
 80066e6:	4618      	mov	r0, r3
 80066e8:	3714      	adds	r7, #20
 80066ea:	46bd      	mov	sp, r7
 80066ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f0:	4770      	bx	lr

080066f2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80066f2:	b480      	push	{r7}
 80066f4:	b085      	sub	sp, #20
 80066f6:	af00      	add	r7, sp, #0
 80066f8:	6078      	str	r0, [r7, #4]
 80066fa:	460b      	mov	r3, r1
 80066fc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006702:	78fb      	ldrb	r3, [r7, #3]
 8006704:	015a      	lsls	r2, r3, #5
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	4413      	add	r3, r2
 800670a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800670e:	689b      	ldr	r3, [r3, #8]
 8006710:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006718:	695b      	ldr	r3, [r3, #20]
 800671a:	68ba      	ldr	r2, [r7, #8]
 800671c:	4013      	ands	r3, r2
 800671e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006720:	68bb      	ldr	r3, [r7, #8]
}
 8006722:	4618      	mov	r0, r3
 8006724:	3714      	adds	r7, #20
 8006726:	46bd      	mov	sp, r7
 8006728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672c:	4770      	bx	lr

0800672e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800672e:	b480      	push	{r7}
 8006730:	b087      	sub	sp, #28
 8006732:	af00      	add	r7, sp, #0
 8006734:	6078      	str	r0, [r7, #4]
 8006736:	460b      	mov	r3, r1
 8006738:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800673e:	697b      	ldr	r3, [r7, #20]
 8006740:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006744:	691b      	ldr	r3, [r3, #16]
 8006746:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006748:	697b      	ldr	r3, [r7, #20]
 800674a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800674e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006750:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006752:	78fb      	ldrb	r3, [r7, #3]
 8006754:	f003 030f 	and.w	r3, r3, #15
 8006758:	68fa      	ldr	r2, [r7, #12]
 800675a:	fa22 f303 	lsr.w	r3, r2, r3
 800675e:	01db      	lsls	r3, r3, #7
 8006760:	b2db      	uxtb	r3, r3
 8006762:	693a      	ldr	r2, [r7, #16]
 8006764:	4313      	orrs	r3, r2
 8006766:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006768:	78fb      	ldrb	r3, [r7, #3]
 800676a:	015a      	lsls	r2, r3, #5
 800676c:	697b      	ldr	r3, [r7, #20]
 800676e:	4413      	add	r3, r2
 8006770:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006774:	689b      	ldr	r3, [r3, #8]
 8006776:	693a      	ldr	r2, [r7, #16]
 8006778:	4013      	ands	r3, r2
 800677a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800677c:	68bb      	ldr	r3, [r7, #8]
}
 800677e:	4618      	mov	r0, r3
 8006780:	371c      	adds	r7, #28
 8006782:	46bd      	mov	sp, r7
 8006784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006788:	4770      	bx	lr

0800678a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800678a:	b480      	push	{r7}
 800678c:	b083      	sub	sp, #12
 800678e:	af00      	add	r7, sp, #0
 8006790:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	695b      	ldr	r3, [r3, #20]
 8006796:	f003 0301 	and.w	r3, r3, #1
}
 800679a:	4618      	mov	r0, r3
 800679c:	370c      	adds	r7, #12
 800679e:	46bd      	mov	sp, r7
 80067a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a4:	4770      	bx	lr

080067a6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 80067a6:	b480      	push	{r7}
 80067a8:	b085      	sub	sp, #20
 80067aa:	af00      	add	r7, sp, #0
 80067ac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	68fa      	ldr	r2, [r7, #12]
 80067bc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80067c0:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80067c4:	f023 0307 	bic.w	r3, r3, #7
 80067c8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80067d0:	685b      	ldr	r3, [r3, #4]
 80067d2:	68fa      	ldr	r2, [r7, #12]
 80067d4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80067d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80067dc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80067de:	2300      	movs	r3, #0
}
 80067e0:	4618      	mov	r0, r3
 80067e2:	3714      	adds	r7, #20
 80067e4:	46bd      	mov	sp, r7
 80067e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ea:	4770      	bx	lr

080067ec <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80067ec:	b480      	push	{r7}
 80067ee:	b087      	sub	sp, #28
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	60f8      	str	r0, [r7, #12]
 80067f4:	460b      	mov	r3, r1
 80067f6:	607a      	str	r2, [r7, #4]
 80067f8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	333c      	adds	r3, #60	@ 0x3c
 8006802:	3304      	adds	r3, #4
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006808:	693b      	ldr	r3, [r7, #16]
 800680a:	4a26      	ldr	r2, [pc, #152]	@ (80068a4 <USB_EP0_OutStart+0xb8>)
 800680c:	4293      	cmp	r3, r2
 800680e:	d90a      	bls.n	8006826 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006810:	697b      	ldr	r3, [r7, #20]
 8006812:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800681c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006820:	d101      	bne.n	8006826 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006822:	2300      	movs	r3, #0
 8006824:	e037      	b.n	8006896 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006826:	697b      	ldr	r3, [r7, #20]
 8006828:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800682c:	461a      	mov	r2, r3
 800682e:	2300      	movs	r3, #0
 8006830:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006832:	697b      	ldr	r3, [r7, #20]
 8006834:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006838:	691b      	ldr	r3, [r3, #16]
 800683a:	697a      	ldr	r2, [r7, #20]
 800683c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006840:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006844:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006846:	697b      	ldr	r3, [r7, #20]
 8006848:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800684c:	691b      	ldr	r3, [r3, #16]
 800684e:	697a      	ldr	r2, [r7, #20]
 8006850:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006854:	f043 0318 	orr.w	r3, r3, #24
 8006858:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800685a:	697b      	ldr	r3, [r7, #20]
 800685c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006860:	691b      	ldr	r3, [r3, #16]
 8006862:	697a      	ldr	r2, [r7, #20]
 8006864:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006868:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800686c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800686e:	7afb      	ldrb	r3, [r7, #11]
 8006870:	2b01      	cmp	r3, #1
 8006872:	d10f      	bne.n	8006894 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006874:	697b      	ldr	r3, [r7, #20]
 8006876:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800687a:	461a      	mov	r2, r3
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006880:	697b      	ldr	r3, [r7, #20]
 8006882:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	697a      	ldr	r2, [r7, #20]
 800688a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800688e:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8006892:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006894:	2300      	movs	r3, #0
}
 8006896:	4618      	mov	r0, r3
 8006898:	371c      	adds	r7, #28
 800689a:	46bd      	mov	sp, r7
 800689c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a0:	4770      	bx	lr
 80068a2:	bf00      	nop
 80068a4:	4f54300a 	.word	0x4f54300a

080068a8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80068a8:	b480      	push	{r7}
 80068aa:	b085      	sub	sp, #20
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80068b0:	2300      	movs	r3, #0
 80068b2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	3301      	adds	r3, #1
 80068b8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80068c0:	d901      	bls.n	80068c6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80068c2:	2303      	movs	r3, #3
 80068c4:	e01b      	b.n	80068fe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	691b      	ldr	r3, [r3, #16]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	daf2      	bge.n	80068b4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80068ce:	2300      	movs	r3, #0
 80068d0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	691b      	ldr	r3, [r3, #16]
 80068d6:	f043 0201 	orr.w	r2, r3, #1
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	3301      	adds	r3, #1
 80068e2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80068ea:	d901      	bls.n	80068f0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80068ec:	2303      	movs	r3, #3
 80068ee:	e006      	b.n	80068fe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	691b      	ldr	r3, [r3, #16]
 80068f4:	f003 0301 	and.w	r3, r3, #1
 80068f8:	2b01      	cmp	r3, #1
 80068fa:	d0f0      	beq.n	80068de <USB_CoreReset+0x36>

  return HAL_OK;
 80068fc:	2300      	movs	r3, #0
}
 80068fe:	4618      	mov	r0, r3
 8006900:	3714      	adds	r7, #20
 8006902:	46bd      	mov	sp, r7
 8006904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006908:	4770      	bx	lr
	...

0800690c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800690c:	b580      	push	{r7, lr}
 800690e:	b084      	sub	sp, #16
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
 8006914:	460b      	mov	r3, r1
 8006916:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006918:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800691c:	f002 fcb2 	bl	8009284 <USBD_static_malloc>
 8006920:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d109      	bne.n	800693c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	32b0      	adds	r2, #176	@ 0xb0
 8006932:	2100      	movs	r1, #0
 8006934:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006938:	2302      	movs	r3, #2
 800693a:	e0d4      	b.n	8006ae6 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800693c:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8006940:	2100      	movs	r1, #0
 8006942:	68f8      	ldr	r0, [r7, #12]
 8006944:	f002 fd02 	bl	800934c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	32b0      	adds	r2, #176	@ 0xb0
 8006952:	68f9      	ldr	r1, [r7, #12]
 8006954:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	32b0      	adds	r2, #176	@ 0xb0
 8006962:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	7c1b      	ldrb	r3, [r3, #16]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d138      	bne.n	80069e6 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006974:	4b5e      	ldr	r3, [pc, #376]	@ (8006af0 <USBD_CDC_Init+0x1e4>)
 8006976:	7819      	ldrb	r1, [r3, #0]
 8006978:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800697c:	2202      	movs	r2, #2
 800697e:	6878      	ldr	r0, [r7, #4]
 8006980:	f002 fb5d 	bl	800903e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006984:	4b5a      	ldr	r3, [pc, #360]	@ (8006af0 <USBD_CDC_Init+0x1e4>)
 8006986:	781b      	ldrb	r3, [r3, #0]
 8006988:	f003 020f 	and.w	r2, r3, #15
 800698c:	6879      	ldr	r1, [r7, #4]
 800698e:	4613      	mov	r3, r2
 8006990:	009b      	lsls	r3, r3, #2
 8006992:	4413      	add	r3, r2
 8006994:	009b      	lsls	r3, r3, #2
 8006996:	440b      	add	r3, r1
 8006998:	3324      	adds	r3, #36	@ 0x24
 800699a:	2201      	movs	r2, #1
 800699c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800699e:	4b55      	ldr	r3, [pc, #340]	@ (8006af4 <USBD_CDC_Init+0x1e8>)
 80069a0:	7819      	ldrb	r1, [r3, #0]
 80069a2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80069a6:	2202      	movs	r2, #2
 80069a8:	6878      	ldr	r0, [r7, #4]
 80069aa:	f002 fb48 	bl	800903e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80069ae:	4b51      	ldr	r3, [pc, #324]	@ (8006af4 <USBD_CDC_Init+0x1e8>)
 80069b0:	781b      	ldrb	r3, [r3, #0]
 80069b2:	f003 020f 	and.w	r2, r3, #15
 80069b6:	6879      	ldr	r1, [r7, #4]
 80069b8:	4613      	mov	r3, r2
 80069ba:	009b      	lsls	r3, r3, #2
 80069bc:	4413      	add	r3, r2
 80069be:	009b      	lsls	r3, r3, #2
 80069c0:	440b      	add	r3, r1
 80069c2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80069c6:	2201      	movs	r2, #1
 80069c8:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80069ca:	4b4b      	ldr	r3, [pc, #300]	@ (8006af8 <USBD_CDC_Init+0x1ec>)
 80069cc:	781b      	ldrb	r3, [r3, #0]
 80069ce:	f003 020f 	and.w	r2, r3, #15
 80069d2:	6879      	ldr	r1, [r7, #4]
 80069d4:	4613      	mov	r3, r2
 80069d6:	009b      	lsls	r3, r3, #2
 80069d8:	4413      	add	r3, r2
 80069da:	009b      	lsls	r3, r3, #2
 80069dc:	440b      	add	r3, r1
 80069de:	3326      	adds	r3, #38	@ 0x26
 80069e0:	2210      	movs	r2, #16
 80069e2:	801a      	strh	r2, [r3, #0]
 80069e4:	e035      	b.n	8006a52 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80069e6:	4b42      	ldr	r3, [pc, #264]	@ (8006af0 <USBD_CDC_Init+0x1e4>)
 80069e8:	7819      	ldrb	r1, [r3, #0]
 80069ea:	2340      	movs	r3, #64	@ 0x40
 80069ec:	2202      	movs	r2, #2
 80069ee:	6878      	ldr	r0, [r7, #4]
 80069f0:	f002 fb25 	bl	800903e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80069f4:	4b3e      	ldr	r3, [pc, #248]	@ (8006af0 <USBD_CDC_Init+0x1e4>)
 80069f6:	781b      	ldrb	r3, [r3, #0]
 80069f8:	f003 020f 	and.w	r2, r3, #15
 80069fc:	6879      	ldr	r1, [r7, #4]
 80069fe:	4613      	mov	r3, r2
 8006a00:	009b      	lsls	r3, r3, #2
 8006a02:	4413      	add	r3, r2
 8006a04:	009b      	lsls	r3, r3, #2
 8006a06:	440b      	add	r3, r1
 8006a08:	3324      	adds	r3, #36	@ 0x24
 8006a0a:	2201      	movs	r2, #1
 8006a0c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006a0e:	4b39      	ldr	r3, [pc, #228]	@ (8006af4 <USBD_CDC_Init+0x1e8>)
 8006a10:	7819      	ldrb	r1, [r3, #0]
 8006a12:	2340      	movs	r3, #64	@ 0x40
 8006a14:	2202      	movs	r2, #2
 8006a16:	6878      	ldr	r0, [r7, #4]
 8006a18:	f002 fb11 	bl	800903e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006a1c:	4b35      	ldr	r3, [pc, #212]	@ (8006af4 <USBD_CDC_Init+0x1e8>)
 8006a1e:	781b      	ldrb	r3, [r3, #0]
 8006a20:	f003 020f 	and.w	r2, r3, #15
 8006a24:	6879      	ldr	r1, [r7, #4]
 8006a26:	4613      	mov	r3, r2
 8006a28:	009b      	lsls	r3, r3, #2
 8006a2a:	4413      	add	r3, r2
 8006a2c:	009b      	lsls	r3, r3, #2
 8006a2e:	440b      	add	r3, r1
 8006a30:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006a34:	2201      	movs	r2, #1
 8006a36:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006a38:	4b2f      	ldr	r3, [pc, #188]	@ (8006af8 <USBD_CDC_Init+0x1ec>)
 8006a3a:	781b      	ldrb	r3, [r3, #0]
 8006a3c:	f003 020f 	and.w	r2, r3, #15
 8006a40:	6879      	ldr	r1, [r7, #4]
 8006a42:	4613      	mov	r3, r2
 8006a44:	009b      	lsls	r3, r3, #2
 8006a46:	4413      	add	r3, r2
 8006a48:	009b      	lsls	r3, r3, #2
 8006a4a:	440b      	add	r3, r1
 8006a4c:	3326      	adds	r3, #38	@ 0x26
 8006a4e:	2210      	movs	r2, #16
 8006a50:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006a52:	4b29      	ldr	r3, [pc, #164]	@ (8006af8 <USBD_CDC_Init+0x1ec>)
 8006a54:	7819      	ldrb	r1, [r3, #0]
 8006a56:	2308      	movs	r3, #8
 8006a58:	2203      	movs	r2, #3
 8006a5a:	6878      	ldr	r0, [r7, #4]
 8006a5c:	f002 faef 	bl	800903e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006a60:	4b25      	ldr	r3, [pc, #148]	@ (8006af8 <USBD_CDC_Init+0x1ec>)
 8006a62:	781b      	ldrb	r3, [r3, #0]
 8006a64:	f003 020f 	and.w	r2, r3, #15
 8006a68:	6879      	ldr	r1, [r7, #4]
 8006a6a:	4613      	mov	r3, r2
 8006a6c:	009b      	lsls	r3, r3, #2
 8006a6e:	4413      	add	r3, r2
 8006a70:	009b      	lsls	r3, r3, #2
 8006a72:	440b      	add	r3, r1
 8006a74:	3324      	adds	r3, #36	@ 0x24
 8006a76:	2201      	movs	r2, #1
 8006a78:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006a88:	687a      	ldr	r2, [r7, #4]
 8006a8a:	33b0      	adds	r3, #176	@ 0xb0
 8006a8c:	009b      	lsls	r3, r3, #2
 8006a8e:	4413      	add	r3, r2
 8006a90:	685b      	ldr	r3, [r3, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	2200      	movs	r2, #0
 8006a9a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d101      	bne.n	8006ab4 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8006ab0:	2302      	movs	r3, #2
 8006ab2:	e018      	b.n	8006ae6 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	7c1b      	ldrb	r3, [r3, #16]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d10a      	bne.n	8006ad2 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006abc:	4b0d      	ldr	r3, [pc, #52]	@ (8006af4 <USBD_CDC_Init+0x1e8>)
 8006abe:	7819      	ldrb	r1, [r3, #0]
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006ac6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006aca:	6878      	ldr	r0, [r7, #4]
 8006acc:	f002 fba6 	bl	800921c <USBD_LL_PrepareReceive>
 8006ad0:	e008      	b.n	8006ae4 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006ad2:	4b08      	ldr	r3, [pc, #32]	@ (8006af4 <USBD_CDC_Init+0x1e8>)
 8006ad4:	7819      	ldrb	r1, [r3, #0]
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006adc:	2340      	movs	r3, #64	@ 0x40
 8006ade:	6878      	ldr	r0, [r7, #4]
 8006ae0:	f002 fb9c 	bl	800921c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006ae4:	2300      	movs	r3, #0
}
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	3710      	adds	r7, #16
 8006aea:	46bd      	mov	sp, r7
 8006aec:	bd80      	pop	{r7, pc}
 8006aee:	bf00      	nop
 8006af0:	20000093 	.word	0x20000093
 8006af4:	20000094 	.word	0x20000094
 8006af8:	20000095 	.word	0x20000095

08006afc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006afc:	b580      	push	{r7, lr}
 8006afe:	b082      	sub	sp, #8
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
 8006b04:	460b      	mov	r3, r1
 8006b06:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8006b08:	4b3a      	ldr	r3, [pc, #232]	@ (8006bf4 <USBD_CDC_DeInit+0xf8>)
 8006b0a:	781b      	ldrb	r3, [r3, #0]
 8006b0c:	4619      	mov	r1, r3
 8006b0e:	6878      	ldr	r0, [r7, #4]
 8006b10:	f002 fabb 	bl	800908a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8006b14:	4b37      	ldr	r3, [pc, #220]	@ (8006bf4 <USBD_CDC_DeInit+0xf8>)
 8006b16:	781b      	ldrb	r3, [r3, #0]
 8006b18:	f003 020f 	and.w	r2, r3, #15
 8006b1c:	6879      	ldr	r1, [r7, #4]
 8006b1e:	4613      	mov	r3, r2
 8006b20:	009b      	lsls	r3, r3, #2
 8006b22:	4413      	add	r3, r2
 8006b24:	009b      	lsls	r3, r3, #2
 8006b26:	440b      	add	r3, r1
 8006b28:	3324      	adds	r3, #36	@ 0x24
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8006b2e:	4b32      	ldr	r3, [pc, #200]	@ (8006bf8 <USBD_CDC_DeInit+0xfc>)
 8006b30:	781b      	ldrb	r3, [r3, #0]
 8006b32:	4619      	mov	r1, r3
 8006b34:	6878      	ldr	r0, [r7, #4]
 8006b36:	f002 faa8 	bl	800908a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8006b3a:	4b2f      	ldr	r3, [pc, #188]	@ (8006bf8 <USBD_CDC_DeInit+0xfc>)
 8006b3c:	781b      	ldrb	r3, [r3, #0]
 8006b3e:	f003 020f 	and.w	r2, r3, #15
 8006b42:	6879      	ldr	r1, [r7, #4]
 8006b44:	4613      	mov	r3, r2
 8006b46:	009b      	lsls	r3, r3, #2
 8006b48:	4413      	add	r3, r2
 8006b4a:	009b      	lsls	r3, r3, #2
 8006b4c:	440b      	add	r3, r1
 8006b4e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006b52:	2200      	movs	r2, #0
 8006b54:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8006b56:	4b29      	ldr	r3, [pc, #164]	@ (8006bfc <USBD_CDC_DeInit+0x100>)
 8006b58:	781b      	ldrb	r3, [r3, #0]
 8006b5a:	4619      	mov	r1, r3
 8006b5c:	6878      	ldr	r0, [r7, #4]
 8006b5e:	f002 fa94 	bl	800908a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8006b62:	4b26      	ldr	r3, [pc, #152]	@ (8006bfc <USBD_CDC_DeInit+0x100>)
 8006b64:	781b      	ldrb	r3, [r3, #0]
 8006b66:	f003 020f 	and.w	r2, r3, #15
 8006b6a:	6879      	ldr	r1, [r7, #4]
 8006b6c:	4613      	mov	r3, r2
 8006b6e:	009b      	lsls	r3, r3, #2
 8006b70:	4413      	add	r3, r2
 8006b72:	009b      	lsls	r3, r3, #2
 8006b74:	440b      	add	r3, r1
 8006b76:	3324      	adds	r3, #36	@ 0x24
 8006b78:	2200      	movs	r2, #0
 8006b7a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8006b7c:	4b1f      	ldr	r3, [pc, #124]	@ (8006bfc <USBD_CDC_DeInit+0x100>)
 8006b7e:	781b      	ldrb	r3, [r3, #0]
 8006b80:	f003 020f 	and.w	r2, r3, #15
 8006b84:	6879      	ldr	r1, [r7, #4]
 8006b86:	4613      	mov	r3, r2
 8006b88:	009b      	lsls	r3, r3, #2
 8006b8a:	4413      	add	r3, r2
 8006b8c:	009b      	lsls	r3, r3, #2
 8006b8e:	440b      	add	r3, r1
 8006b90:	3326      	adds	r3, #38	@ 0x26
 8006b92:	2200      	movs	r2, #0
 8006b94:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	32b0      	adds	r2, #176	@ 0xb0
 8006ba0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d01f      	beq.n	8006be8 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006bae:	687a      	ldr	r2, [r7, #4]
 8006bb0:	33b0      	adds	r3, #176	@ 0xb0
 8006bb2:	009b      	lsls	r3, r3, #2
 8006bb4:	4413      	add	r3, r2
 8006bb6:	685b      	ldr	r3, [r3, #4]
 8006bb8:	685b      	ldr	r3, [r3, #4]
 8006bba:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	32b0      	adds	r2, #176	@ 0xb0
 8006bc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bca:	4618      	mov	r0, r3
 8006bcc:	f002 fb68 	bl	80092a0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	32b0      	adds	r2, #176	@ 0xb0
 8006bda:	2100      	movs	r1, #0
 8006bdc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2200      	movs	r2, #0
 8006be4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006be8:	2300      	movs	r3, #0
}
 8006bea:	4618      	mov	r0, r3
 8006bec:	3708      	adds	r7, #8
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	bd80      	pop	{r7, pc}
 8006bf2:	bf00      	nop
 8006bf4:	20000093 	.word	0x20000093
 8006bf8:	20000094 	.word	0x20000094
 8006bfc:	20000095 	.word	0x20000095

08006c00 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006c00:	b580      	push	{r7, lr}
 8006c02:	b086      	sub	sp, #24
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
 8006c08:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	32b0      	adds	r2, #176	@ 0xb0
 8006c14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c18:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8006c1e:	2300      	movs	r3, #0
 8006c20:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8006c22:	2300      	movs	r3, #0
 8006c24:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8006c26:	693b      	ldr	r3, [r7, #16]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d101      	bne.n	8006c30 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8006c2c:	2303      	movs	r3, #3
 8006c2e:	e0bf      	b.n	8006db0 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006c30:	683b      	ldr	r3, [r7, #0]
 8006c32:	781b      	ldrb	r3, [r3, #0]
 8006c34:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d050      	beq.n	8006cde <USBD_CDC_Setup+0xde>
 8006c3c:	2b20      	cmp	r3, #32
 8006c3e:	f040 80af 	bne.w	8006da0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	88db      	ldrh	r3, [r3, #6]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d03a      	beq.n	8006cc0 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006c4a:	683b      	ldr	r3, [r7, #0]
 8006c4c:	781b      	ldrb	r3, [r3, #0]
 8006c4e:	b25b      	sxtb	r3, r3
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	da1b      	bge.n	8006c8c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006c5a:	687a      	ldr	r2, [r7, #4]
 8006c5c:	33b0      	adds	r3, #176	@ 0xb0
 8006c5e:	009b      	lsls	r3, r3, #2
 8006c60:	4413      	add	r3, r2
 8006c62:	685b      	ldr	r3, [r3, #4]
 8006c64:	689b      	ldr	r3, [r3, #8]
 8006c66:	683a      	ldr	r2, [r7, #0]
 8006c68:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8006c6a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006c6c:	683a      	ldr	r2, [r7, #0]
 8006c6e:	88d2      	ldrh	r2, [r2, #6]
 8006c70:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006c72:	683b      	ldr	r3, [r7, #0]
 8006c74:	88db      	ldrh	r3, [r3, #6]
 8006c76:	2b07      	cmp	r3, #7
 8006c78:	bf28      	it	cs
 8006c7a:	2307      	movcs	r3, #7
 8006c7c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006c7e:	693b      	ldr	r3, [r7, #16]
 8006c80:	89fa      	ldrh	r2, [r7, #14]
 8006c82:	4619      	mov	r1, r3
 8006c84:	6878      	ldr	r0, [r7, #4]
 8006c86:	f001 fd87 	bl	8008798 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8006c8a:	e090      	b.n	8006dae <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8006c8c:	683b      	ldr	r3, [r7, #0]
 8006c8e:	785a      	ldrb	r2, [r3, #1]
 8006c90:	693b      	ldr	r3, [r7, #16]
 8006c92:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	88db      	ldrh	r3, [r3, #6]
 8006c9a:	2b3f      	cmp	r3, #63	@ 0x3f
 8006c9c:	d803      	bhi.n	8006ca6 <USBD_CDC_Setup+0xa6>
 8006c9e:	683b      	ldr	r3, [r7, #0]
 8006ca0:	88db      	ldrh	r3, [r3, #6]
 8006ca2:	b2da      	uxtb	r2, r3
 8006ca4:	e000      	b.n	8006ca8 <USBD_CDC_Setup+0xa8>
 8006ca6:	2240      	movs	r2, #64	@ 0x40
 8006ca8:	693b      	ldr	r3, [r7, #16]
 8006caa:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8006cae:	6939      	ldr	r1, [r7, #16]
 8006cb0:	693b      	ldr	r3, [r7, #16]
 8006cb2:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8006cb6:	461a      	mov	r2, r3
 8006cb8:	6878      	ldr	r0, [r7, #4]
 8006cba:	f001 fd99 	bl	80087f0 <USBD_CtlPrepareRx>
      break;
 8006cbe:	e076      	b.n	8006dae <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006cc6:	687a      	ldr	r2, [r7, #4]
 8006cc8:	33b0      	adds	r3, #176	@ 0xb0
 8006cca:	009b      	lsls	r3, r3, #2
 8006ccc:	4413      	add	r3, r2
 8006cce:	685b      	ldr	r3, [r3, #4]
 8006cd0:	689b      	ldr	r3, [r3, #8]
 8006cd2:	683a      	ldr	r2, [r7, #0]
 8006cd4:	7850      	ldrb	r0, [r2, #1]
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	6839      	ldr	r1, [r7, #0]
 8006cda:	4798      	blx	r3
      break;
 8006cdc:	e067      	b.n	8006dae <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	785b      	ldrb	r3, [r3, #1]
 8006ce2:	2b0b      	cmp	r3, #11
 8006ce4:	d851      	bhi.n	8006d8a <USBD_CDC_Setup+0x18a>
 8006ce6:	a201      	add	r2, pc, #4	@ (adr r2, 8006cec <USBD_CDC_Setup+0xec>)
 8006ce8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cec:	08006d1d 	.word	0x08006d1d
 8006cf0:	08006d99 	.word	0x08006d99
 8006cf4:	08006d8b 	.word	0x08006d8b
 8006cf8:	08006d8b 	.word	0x08006d8b
 8006cfc:	08006d8b 	.word	0x08006d8b
 8006d00:	08006d8b 	.word	0x08006d8b
 8006d04:	08006d8b 	.word	0x08006d8b
 8006d08:	08006d8b 	.word	0x08006d8b
 8006d0c:	08006d8b 	.word	0x08006d8b
 8006d10:	08006d8b 	.word	0x08006d8b
 8006d14:	08006d47 	.word	0x08006d47
 8006d18:	08006d71 	.word	0x08006d71
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006d22:	b2db      	uxtb	r3, r3
 8006d24:	2b03      	cmp	r3, #3
 8006d26:	d107      	bne.n	8006d38 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006d28:	f107 030a 	add.w	r3, r7, #10
 8006d2c:	2202      	movs	r2, #2
 8006d2e:	4619      	mov	r1, r3
 8006d30:	6878      	ldr	r0, [r7, #4]
 8006d32:	f001 fd31 	bl	8008798 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006d36:	e032      	b.n	8006d9e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006d38:	6839      	ldr	r1, [r7, #0]
 8006d3a:	6878      	ldr	r0, [r7, #4]
 8006d3c:	f001 fcbb 	bl	80086b6 <USBD_CtlError>
            ret = USBD_FAIL;
 8006d40:	2303      	movs	r3, #3
 8006d42:	75fb      	strb	r3, [r7, #23]
          break;
 8006d44:	e02b      	b.n	8006d9e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006d4c:	b2db      	uxtb	r3, r3
 8006d4e:	2b03      	cmp	r3, #3
 8006d50:	d107      	bne.n	8006d62 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006d52:	f107 030d 	add.w	r3, r7, #13
 8006d56:	2201      	movs	r2, #1
 8006d58:	4619      	mov	r1, r3
 8006d5a:	6878      	ldr	r0, [r7, #4]
 8006d5c:	f001 fd1c 	bl	8008798 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006d60:	e01d      	b.n	8006d9e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006d62:	6839      	ldr	r1, [r7, #0]
 8006d64:	6878      	ldr	r0, [r7, #4]
 8006d66:	f001 fca6 	bl	80086b6 <USBD_CtlError>
            ret = USBD_FAIL;
 8006d6a:	2303      	movs	r3, #3
 8006d6c:	75fb      	strb	r3, [r7, #23]
          break;
 8006d6e:	e016      	b.n	8006d9e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006d76:	b2db      	uxtb	r3, r3
 8006d78:	2b03      	cmp	r3, #3
 8006d7a:	d00f      	beq.n	8006d9c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8006d7c:	6839      	ldr	r1, [r7, #0]
 8006d7e:	6878      	ldr	r0, [r7, #4]
 8006d80:	f001 fc99 	bl	80086b6 <USBD_CtlError>
            ret = USBD_FAIL;
 8006d84:	2303      	movs	r3, #3
 8006d86:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006d88:	e008      	b.n	8006d9c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006d8a:	6839      	ldr	r1, [r7, #0]
 8006d8c:	6878      	ldr	r0, [r7, #4]
 8006d8e:	f001 fc92 	bl	80086b6 <USBD_CtlError>
          ret = USBD_FAIL;
 8006d92:	2303      	movs	r3, #3
 8006d94:	75fb      	strb	r3, [r7, #23]
          break;
 8006d96:	e002      	b.n	8006d9e <USBD_CDC_Setup+0x19e>
          break;
 8006d98:	bf00      	nop
 8006d9a:	e008      	b.n	8006dae <USBD_CDC_Setup+0x1ae>
          break;
 8006d9c:	bf00      	nop
      }
      break;
 8006d9e:	e006      	b.n	8006dae <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8006da0:	6839      	ldr	r1, [r7, #0]
 8006da2:	6878      	ldr	r0, [r7, #4]
 8006da4:	f001 fc87 	bl	80086b6 <USBD_CtlError>
      ret = USBD_FAIL;
 8006da8:	2303      	movs	r3, #3
 8006daa:	75fb      	strb	r3, [r7, #23]
      break;
 8006dac:	bf00      	nop
  }

  return (uint8_t)ret;
 8006dae:	7dfb      	ldrb	r3, [r7, #23]
}
 8006db0:	4618      	mov	r0, r3
 8006db2:	3718      	adds	r7, #24
 8006db4:	46bd      	mov	sp, r7
 8006db6:	bd80      	pop	{r7, pc}

08006db8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006db8:	b580      	push	{r7, lr}
 8006dba:	b084      	sub	sp, #16
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]
 8006dc0:	460b      	mov	r3, r1
 8006dc2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006dca:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	32b0      	adds	r2, #176	@ 0xb0
 8006dd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d101      	bne.n	8006de2 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8006dde:	2303      	movs	r3, #3
 8006de0:	e065      	b.n	8006eae <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	32b0      	adds	r2, #176	@ 0xb0
 8006dec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006df0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006df2:	78fb      	ldrb	r3, [r7, #3]
 8006df4:	f003 020f 	and.w	r2, r3, #15
 8006df8:	6879      	ldr	r1, [r7, #4]
 8006dfa:	4613      	mov	r3, r2
 8006dfc:	009b      	lsls	r3, r3, #2
 8006dfe:	4413      	add	r3, r2
 8006e00:	009b      	lsls	r3, r3, #2
 8006e02:	440b      	add	r3, r1
 8006e04:	3318      	adds	r3, #24
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d02f      	beq.n	8006e6c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8006e0c:	78fb      	ldrb	r3, [r7, #3]
 8006e0e:	f003 020f 	and.w	r2, r3, #15
 8006e12:	6879      	ldr	r1, [r7, #4]
 8006e14:	4613      	mov	r3, r2
 8006e16:	009b      	lsls	r3, r3, #2
 8006e18:	4413      	add	r3, r2
 8006e1a:	009b      	lsls	r3, r3, #2
 8006e1c:	440b      	add	r3, r1
 8006e1e:	3318      	adds	r3, #24
 8006e20:	681a      	ldr	r2, [r3, #0]
 8006e22:	78fb      	ldrb	r3, [r7, #3]
 8006e24:	f003 010f 	and.w	r1, r3, #15
 8006e28:	68f8      	ldr	r0, [r7, #12]
 8006e2a:	460b      	mov	r3, r1
 8006e2c:	00db      	lsls	r3, r3, #3
 8006e2e:	440b      	add	r3, r1
 8006e30:	009b      	lsls	r3, r3, #2
 8006e32:	4403      	add	r3, r0
 8006e34:	331c      	adds	r3, #28
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	fbb2 f1f3 	udiv	r1, r2, r3
 8006e3c:	fb01 f303 	mul.w	r3, r1, r3
 8006e40:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d112      	bne.n	8006e6c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8006e46:	78fb      	ldrb	r3, [r7, #3]
 8006e48:	f003 020f 	and.w	r2, r3, #15
 8006e4c:	6879      	ldr	r1, [r7, #4]
 8006e4e:	4613      	mov	r3, r2
 8006e50:	009b      	lsls	r3, r3, #2
 8006e52:	4413      	add	r3, r2
 8006e54:	009b      	lsls	r3, r3, #2
 8006e56:	440b      	add	r3, r1
 8006e58:	3318      	adds	r3, #24
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006e5e:	78f9      	ldrb	r1, [r7, #3]
 8006e60:	2300      	movs	r3, #0
 8006e62:	2200      	movs	r2, #0
 8006e64:	6878      	ldr	r0, [r7, #4]
 8006e66:	f002 f9b8 	bl	80091da <USBD_LL_Transmit>
 8006e6a:	e01f      	b.n	8006eac <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006e6c:	68bb      	ldr	r3, [r7, #8]
 8006e6e:	2200      	movs	r2, #0
 8006e70:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006e7a:	687a      	ldr	r2, [r7, #4]
 8006e7c:	33b0      	adds	r3, #176	@ 0xb0
 8006e7e:	009b      	lsls	r3, r3, #2
 8006e80:	4413      	add	r3, r2
 8006e82:	685b      	ldr	r3, [r3, #4]
 8006e84:	691b      	ldr	r3, [r3, #16]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d010      	beq.n	8006eac <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006e90:	687a      	ldr	r2, [r7, #4]
 8006e92:	33b0      	adds	r3, #176	@ 0xb0
 8006e94:	009b      	lsls	r3, r3, #2
 8006e96:	4413      	add	r3, r2
 8006e98:	685b      	ldr	r3, [r3, #4]
 8006e9a:	691b      	ldr	r3, [r3, #16]
 8006e9c:	68ba      	ldr	r2, [r7, #8]
 8006e9e:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8006ea2:	68ba      	ldr	r2, [r7, #8]
 8006ea4:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8006ea8:	78fa      	ldrb	r2, [r7, #3]
 8006eaa:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006eac:	2300      	movs	r3, #0
}
 8006eae:	4618      	mov	r0, r3
 8006eb0:	3710      	adds	r7, #16
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	bd80      	pop	{r7, pc}

08006eb6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006eb6:	b580      	push	{r7, lr}
 8006eb8:	b084      	sub	sp, #16
 8006eba:	af00      	add	r7, sp, #0
 8006ebc:	6078      	str	r0, [r7, #4]
 8006ebe:	460b      	mov	r3, r1
 8006ec0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	32b0      	adds	r2, #176	@ 0xb0
 8006ecc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ed0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	32b0      	adds	r2, #176	@ 0xb0
 8006edc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d101      	bne.n	8006ee8 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006ee4:	2303      	movs	r3, #3
 8006ee6:	e01a      	b.n	8006f1e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006ee8:	78fb      	ldrb	r3, [r7, #3]
 8006eea:	4619      	mov	r1, r3
 8006eec:	6878      	ldr	r0, [r7, #4]
 8006eee:	f002 f9b6 	bl	800925e <USBD_LL_GetRxDataSize>
 8006ef2:	4602      	mov	r2, r0
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006f00:	687a      	ldr	r2, [r7, #4]
 8006f02:	33b0      	adds	r3, #176	@ 0xb0
 8006f04:	009b      	lsls	r3, r3, #2
 8006f06:	4413      	add	r3, r2
 8006f08:	685b      	ldr	r3, [r3, #4]
 8006f0a:	68db      	ldr	r3, [r3, #12]
 8006f0c:	68fa      	ldr	r2, [r7, #12]
 8006f0e:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8006f12:	68fa      	ldr	r2, [r7, #12]
 8006f14:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8006f18:	4611      	mov	r1, r2
 8006f1a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006f1c:	2300      	movs	r3, #0
}
 8006f1e:	4618      	mov	r0, r3
 8006f20:	3710      	adds	r7, #16
 8006f22:	46bd      	mov	sp, r7
 8006f24:	bd80      	pop	{r7, pc}

08006f26 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006f26:	b580      	push	{r7, lr}
 8006f28:	b084      	sub	sp, #16
 8006f2a:	af00      	add	r7, sp, #0
 8006f2c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	32b0      	adds	r2, #176	@ 0xb0
 8006f38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f3c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d101      	bne.n	8006f48 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006f44:	2303      	movs	r3, #3
 8006f46:	e024      	b.n	8006f92 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006f4e:	687a      	ldr	r2, [r7, #4]
 8006f50:	33b0      	adds	r3, #176	@ 0xb0
 8006f52:	009b      	lsls	r3, r3, #2
 8006f54:	4413      	add	r3, r2
 8006f56:	685b      	ldr	r3, [r3, #4]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d019      	beq.n	8006f90 <USBD_CDC_EP0_RxReady+0x6a>
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8006f62:	2bff      	cmp	r3, #255	@ 0xff
 8006f64:	d014      	beq.n	8006f90 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006f6c:	687a      	ldr	r2, [r7, #4]
 8006f6e:	33b0      	adds	r3, #176	@ 0xb0
 8006f70:	009b      	lsls	r3, r3, #2
 8006f72:	4413      	add	r3, r2
 8006f74:	685b      	ldr	r3, [r3, #4]
 8006f76:	689b      	ldr	r3, [r3, #8]
 8006f78:	68fa      	ldr	r2, [r7, #12]
 8006f7a:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8006f7e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8006f80:	68fa      	ldr	r2, [r7, #12]
 8006f82:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006f86:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	22ff      	movs	r2, #255	@ 0xff
 8006f8c:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8006f90:	2300      	movs	r3, #0
}
 8006f92:	4618      	mov	r0, r3
 8006f94:	3710      	adds	r7, #16
 8006f96:	46bd      	mov	sp, r7
 8006f98:	bd80      	pop	{r7, pc}
	...

08006f9c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b086      	sub	sp, #24
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006fa4:	2182      	movs	r1, #130	@ 0x82
 8006fa6:	4818      	ldr	r0, [pc, #96]	@ (8007008 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006fa8:	f000 fd4f 	bl	8007a4a <USBD_GetEpDesc>
 8006fac:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006fae:	2101      	movs	r1, #1
 8006fb0:	4815      	ldr	r0, [pc, #84]	@ (8007008 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006fb2:	f000 fd4a 	bl	8007a4a <USBD_GetEpDesc>
 8006fb6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006fb8:	2181      	movs	r1, #129	@ 0x81
 8006fba:	4813      	ldr	r0, [pc, #76]	@ (8007008 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006fbc:	f000 fd45 	bl	8007a4a <USBD_GetEpDesc>
 8006fc0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006fc2:	697b      	ldr	r3, [r7, #20]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d002      	beq.n	8006fce <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006fc8:	697b      	ldr	r3, [r7, #20]
 8006fca:	2210      	movs	r2, #16
 8006fcc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006fce:	693b      	ldr	r3, [r7, #16]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d006      	beq.n	8006fe2 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006fd4:	693b      	ldr	r3, [r7, #16]
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006fdc:	711a      	strb	r2, [r3, #4]
 8006fde:	2200      	movs	r2, #0
 8006fe0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d006      	beq.n	8006ff6 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	2200      	movs	r2, #0
 8006fec:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006ff0:	711a      	strb	r2, [r3, #4]
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	2243      	movs	r2, #67	@ 0x43
 8006ffa:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006ffc:	4b02      	ldr	r3, [pc, #8]	@ (8007008 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8006ffe:	4618      	mov	r0, r3
 8007000:	3718      	adds	r7, #24
 8007002:	46bd      	mov	sp, r7
 8007004:	bd80      	pop	{r7, pc}
 8007006:	bf00      	nop
 8007008:	20000050 	.word	0x20000050

0800700c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800700c:	b580      	push	{r7, lr}
 800700e:	b086      	sub	sp, #24
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007014:	2182      	movs	r1, #130	@ 0x82
 8007016:	4818      	ldr	r0, [pc, #96]	@ (8007078 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007018:	f000 fd17 	bl	8007a4a <USBD_GetEpDesc>
 800701c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800701e:	2101      	movs	r1, #1
 8007020:	4815      	ldr	r0, [pc, #84]	@ (8007078 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007022:	f000 fd12 	bl	8007a4a <USBD_GetEpDesc>
 8007026:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007028:	2181      	movs	r1, #129	@ 0x81
 800702a:	4813      	ldr	r0, [pc, #76]	@ (8007078 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800702c:	f000 fd0d 	bl	8007a4a <USBD_GetEpDesc>
 8007030:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007032:	697b      	ldr	r3, [r7, #20]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d002      	beq.n	800703e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8007038:	697b      	ldr	r3, [r7, #20]
 800703a:	2210      	movs	r2, #16
 800703c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800703e:	693b      	ldr	r3, [r7, #16]
 8007040:	2b00      	cmp	r3, #0
 8007042:	d006      	beq.n	8007052 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007044:	693b      	ldr	r3, [r7, #16]
 8007046:	2200      	movs	r2, #0
 8007048:	711a      	strb	r2, [r3, #4]
 800704a:	2200      	movs	r2, #0
 800704c:	f042 0202 	orr.w	r2, r2, #2
 8007050:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d006      	beq.n	8007066 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	2200      	movs	r2, #0
 800705c:	711a      	strb	r2, [r3, #4]
 800705e:	2200      	movs	r2, #0
 8007060:	f042 0202 	orr.w	r2, r2, #2
 8007064:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	2243      	movs	r2, #67	@ 0x43
 800706a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800706c:	4b02      	ldr	r3, [pc, #8]	@ (8007078 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800706e:	4618      	mov	r0, r3
 8007070:	3718      	adds	r7, #24
 8007072:	46bd      	mov	sp, r7
 8007074:	bd80      	pop	{r7, pc}
 8007076:	bf00      	nop
 8007078:	20000050 	.word	0x20000050

0800707c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800707c:	b580      	push	{r7, lr}
 800707e:	b086      	sub	sp, #24
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007084:	2182      	movs	r1, #130	@ 0x82
 8007086:	4818      	ldr	r0, [pc, #96]	@ (80070e8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007088:	f000 fcdf 	bl	8007a4a <USBD_GetEpDesc>
 800708c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800708e:	2101      	movs	r1, #1
 8007090:	4815      	ldr	r0, [pc, #84]	@ (80070e8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007092:	f000 fcda 	bl	8007a4a <USBD_GetEpDesc>
 8007096:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007098:	2181      	movs	r1, #129	@ 0x81
 800709a:	4813      	ldr	r0, [pc, #76]	@ (80070e8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800709c:	f000 fcd5 	bl	8007a4a <USBD_GetEpDesc>
 80070a0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80070a2:	697b      	ldr	r3, [r7, #20]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d002      	beq.n	80070ae <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80070a8:	697b      	ldr	r3, [r7, #20]
 80070aa:	2210      	movs	r2, #16
 80070ac:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80070ae:	693b      	ldr	r3, [r7, #16]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d006      	beq.n	80070c2 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80070b4:	693b      	ldr	r3, [r7, #16]
 80070b6:	2200      	movs	r2, #0
 80070b8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80070bc:	711a      	strb	r2, [r3, #4]
 80070be:	2200      	movs	r2, #0
 80070c0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d006      	beq.n	80070d6 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	2200      	movs	r2, #0
 80070cc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80070d0:	711a      	strb	r2, [r3, #4]
 80070d2:	2200      	movs	r2, #0
 80070d4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	2243      	movs	r2, #67	@ 0x43
 80070da:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80070dc:	4b02      	ldr	r3, [pc, #8]	@ (80070e8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80070de:	4618      	mov	r0, r3
 80070e0:	3718      	adds	r7, #24
 80070e2:	46bd      	mov	sp, r7
 80070e4:	bd80      	pop	{r7, pc}
 80070e6:	bf00      	nop
 80070e8:	20000050 	.word	0x20000050

080070ec <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80070ec:	b480      	push	{r7}
 80070ee:	b083      	sub	sp, #12
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	220a      	movs	r2, #10
 80070f8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80070fa:	4b03      	ldr	r3, [pc, #12]	@ (8007108 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80070fc:	4618      	mov	r0, r3
 80070fe:	370c      	adds	r7, #12
 8007100:	46bd      	mov	sp, r7
 8007102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007106:	4770      	bx	lr
 8007108:	2000000c 	.word	0x2000000c

0800710c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800710c:	b480      	push	{r7}
 800710e:	b083      	sub	sp, #12
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
 8007114:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007116:	683b      	ldr	r3, [r7, #0]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d101      	bne.n	8007120 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800711c:	2303      	movs	r3, #3
 800711e:	e009      	b.n	8007134 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007126:	687a      	ldr	r2, [r7, #4]
 8007128:	33b0      	adds	r3, #176	@ 0xb0
 800712a:	009b      	lsls	r3, r3, #2
 800712c:	4413      	add	r3, r2
 800712e:	683a      	ldr	r2, [r7, #0]
 8007130:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8007132:	2300      	movs	r3, #0
}
 8007134:	4618      	mov	r0, r3
 8007136:	370c      	adds	r7, #12
 8007138:	46bd      	mov	sp, r7
 800713a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713e:	4770      	bx	lr

08007140 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007140:	b480      	push	{r7}
 8007142:	b087      	sub	sp, #28
 8007144:	af00      	add	r7, sp, #0
 8007146:	60f8      	str	r0, [r7, #12]
 8007148:	60b9      	str	r1, [r7, #8]
 800714a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	32b0      	adds	r2, #176	@ 0xb0
 8007156:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800715a:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800715c:	697b      	ldr	r3, [r7, #20]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d101      	bne.n	8007166 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8007162:	2303      	movs	r3, #3
 8007164:	e008      	b.n	8007178 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8007166:	697b      	ldr	r3, [r7, #20]
 8007168:	68ba      	ldr	r2, [r7, #8]
 800716a:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800716e:	697b      	ldr	r3, [r7, #20]
 8007170:	687a      	ldr	r2, [r7, #4]
 8007172:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8007176:	2300      	movs	r3, #0
}
 8007178:	4618      	mov	r0, r3
 800717a:	371c      	adds	r7, #28
 800717c:	46bd      	mov	sp, r7
 800717e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007182:	4770      	bx	lr

08007184 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007184:	b480      	push	{r7}
 8007186:	b085      	sub	sp, #20
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
 800718c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	32b0      	adds	r2, #176	@ 0xb0
 8007198:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800719c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d101      	bne.n	80071a8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80071a4:	2303      	movs	r3, #3
 80071a6:	e004      	b.n	80071b2 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	683a      	ldr	r2, [r7, #0]
 80071ac:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 80071b0:	2300      	movs	r3, #0
}
 80071b2:	4618      	mov	r0, r3
 80071b4:	3714      	adds	r7, #20
 80071b6:	46bd      	mov	sp, r7
 80071b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071bc:	4770      	bx	lr
	...

080071c0 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b084      	sub	sp, #16
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	32b0      	adds	r2, #176	@ 0xb0
 80071d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071d6:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 80071d8:	2301      	movs	r3, #1
 80071da:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80071dc:	68bb      	ldr	r3, [r7, #8]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d101      	bne.n	80071e6 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80071e2:	2303      	movs	r3, #3
 80071e4:	e025      	b.n	8007232 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 80071e6:	68bb      	ldr	r3, [r7, #8]
 80071e8:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d11f      	bne.n	8007230 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80071f0:	68bb      	ldr	r3, [r7, #8]
 80071f2:	2201      	movs	r2, #1
 80071f4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80071f8:	4b10      	ldr	r3, [pc, #64]	@ (800723c <USBD_CDC_TransmitPacket+0x7c>)
 80071fa:	781b      	ldrb	r3, [r3, #0]
 80071fc:	f003 020f 	and.w	r2, r3, #15
 8007200:	68bb      	ldr	r3, [r7, #8]
 8007202:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8007206:	6878      	ldr	r0, [r7, #4]
 8007208:	4613      	mov	r3, r2
 800720a:	009b      	lsls	r3, r3, #2
 800720c:	4413      	add	r3, r2
 800720e:	009b      	lsls	r3, r3, #2
 8007210:	4403      	add	r3, r0
 8007212:	3318      	adds	r3, #24
 8007214:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8007216:	4b09      	ldr	r3, [pc, #36]	@ (800723c <USBD_CDC_TransmitPacket+0x7c>)
 8007218:	7819      	ldrb	r1, [r3, #0]
 800721a:	68bb      	ldr	r3, [r7, #8]
 800721c:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8007220:	68bb      	ldr	r3, [r7, #8]
 8007222:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8007226:	6878      	ldr	r0, [r7, #4]
 8007228:	f001 ffd7 	bl	80091da <USBD_LL_Transmit>

    ret = USBD_OK;
 800722c:	2300      	movs	r3, #0
 800722e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8007230:	7bfb      	ldrb	r3, [r7, #15]
}
 8007232:	4618      	mov	r0, r3
 8007234:	3710      	adds	r7, #16
 8007236:	46bd      	mov	sp, r7
 8007238:	bd80      	pop	{r7, pc}
 800723a:	bf00      	nop
 800723c:	20000093 	.word	0x20000093

08007240 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007240:	b580      	push	{r7, lr}
 8007242:	b084      	sub	sp, #16
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	32b0      	adds	r2, #176	@ 0xb0
 8007252:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007256:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	32b0      	adds	r2, #176	@ 0xb0
 8007262:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d101      	bne.n	800726e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800726a:	2303      	movs	r3, #3
 800726c:	e018      	b.n	80072a0 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	7c1b      	ldrb	r3, [r3, #16]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d10a      	bne.n	800728c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007276:	4b0c      	ldr	r3, [pc, #48]	@ (80072a8 <USBD_CDC_ReceivePacket+0x68>)
 8007278:	7819      	ldrb	r1, [r3, #0]
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007280:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007284:	6878      	ldr	r0, [r7, #4]
 8007286:	f001 ffc9 	bl	800921c <USBD_LL_PrepareReceive>
 800728a:	e008      	b.n	800729e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800728c:	4b06      	ldr	r3, [pc, #24]	@ (80072a8 <USBD_CDC_ReceivePacket+0x68>)
 800728e:	7819      	ldrb	r1, [r3, #0]
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007296:	2340      	movs	r3, #64	@ 0x40
 8007298:	6878      	ldr	r0, [r7, #4]
 800729a:	f001 ffbf 	bl	800921c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800729e:	2300      	movs	r3, #0
}
 80072a0:	4618      	mov	r0, r3
 80072a2:	3710      	adds	r7, #16
 80072a4:	46bd      	mov	sp, r7
 80072a6:	bd80      	pop	{r7, pc}
 80072a8:	20000094 	.word	0x20000094

080072ac <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80072ac:	b580      	push	{r7, lr}
 80072ae:	b086      	sub	sp, #24
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	60f8      	str	r0, [r7, #12]
 80072b4:	60b9      	str	r1, [r7, #8]
 80072b6:	4613      	mov	r3, r2
 80072b8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d101      	bne.n	80072c4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80072c0:	2303      	movs	r3, #3
 80072c2:	e01f      	b.n	8007304 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	2200      	movs	r2, #0
 80072c8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	2200      	movs	r2, #0
 80072d0:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	2200      	movs	r2, #0
 80072d8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80072dc:	68bb      	ldr	r3, [r7, #8]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d003      	beq.n	80072ea <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	68ba      	ldr	r2, [r7, #8]
 80072e6:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	2201      	movs	r2, #1
 80072ee:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	79fa      	ldrb	r2, [r7, #7]
 80072f6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80072f8:	68f8      	ldr	r0, [r7, #12]
 80072fa:	f001 fe39 	bl	8008f70 <USBD_LL_Init>
 80072fe:	4603      	mov	r3, r0
 8007300:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007302:	7dfb      	ldrb	r3, [r7, #23]
}
 8007304:	4618      	mov	r0, r3
 8007306:	3718      	adds	r7, #24
 8007308:	46bd      	mov	sp, r7
 800730a:	bd80      	pop	{r7, pc}

0800730c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800730c:	b580      	push	{r7, lr}
 800730e:	b084      	sub	sp, #16
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
 8007314:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007316:	2300      	movs	r3, #0
 8007318:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800731a:	683b      	ldr	r3, [r7, #0]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d101      	bne.n	8007324 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007320:	2303      	movs	r3, #3
 8007322:	e025      	b.n	8007370 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	683a      	ldr	r2, [r7, #0]
 8007328:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	32ae      	adds	r2, #174	@ 0xae
 8007336:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800733a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800733c:	2b00      	cmp	r3, #0
 800733e:	d00f      	beq.n	8007360 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	32ae      	adds	r2, #174	@ 0xae
 800734a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800734e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007350:	f107 020e 	add.w	r2, r7, #14
 8007354:	4610      	mov	r0, r2
 8007356:	4798      	blx	r3
 8007358:	4602      	mov	r2, r0
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8007366:	1c5a      	adds	r2, r3, #1
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800736e:	2300      	movs	r3, #0
}
 8007370:	4618      	mov	r0, r3
 8007372:	3710      	adds	r7, #16
 8007374:	46bd      	mov	sp, r7
 8007376:	bd80      	pop	{r7, pc}

08007378 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007378:	b580      	push	{r7, lr}
 800737a:	b082      	sub	sp, #8
 800737c:	af00      	add	r7, sp, #0
 800737e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007380:	6878      	ldr	r0, [r7, #4]
 8007382:	f001 fe41 	bl	8009008 <USBD_LL_Start>
 8007386:	4603      	mov	r3, r0
}
 8007388:	4618      	mov	r0, r3
 800738a:	3708      	adds	r7, #8
 800738c:	46bd      	mov	sp, r7
 800738e:	bd80      	pop	{r7, pc}

08007390 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007390:	b480      	push	{r7}
 8007392:	b083      	sub	sp, #12
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007398:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800739a:	4618      	mov	r0, r3
 800739c:	370c      	adds	r7, #12
 800739e:	46bd      	mov	sp, r7
 80073a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a4:	4770      	bx	lr

080073a6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80073a6:	b580      	push	{r7, lr}
 80073a8:	b084      	sub	sp, #16
 80073aa:	af00      	add	r7, sp, #0
 80073ac:	6078      	str	r0, [r7, #4]
 80073ae:	460b      	mov	r3, r1
 80073b0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80073b2:	2300      	movs	r3, #0
 80073b4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d009      	beq.n	80073d4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	78fa      	ldrb	r2, [r7, #3]
 80073ca:	4611      	mov	r1, r2
 80073cc:	6878      	ldr	r0, [r7, #4]
 80073ce:	4798      	blx	r3
 80073d0:	4603      	mov	r3, r0
 80073d2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80073d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80073d6:	4618      	mov	r0, r3
 80073d8:	3710      	adds	r7, #16
 80073da:	46bd      	mov	sp, r7
 80073dc:	bd80      	pop	{r7, pc}

080073de <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80073de:	b580      	push	{r7, lr}
 80073e0:	b084      	sub	sp, #16
 80073e2:	af00      	add	r7, sp, #0
 80073e4:	6078      	str	r0, [r7, #4]
 80073e6:	460b      	mov	r3, r1
 80073e8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80073ea:	2300      	movs	r3, #0
 80073ec:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80073f4:	685b      	ldr	r3, [r3, #4]
 80073f6:	78fa      	ldrb	r2, [r7, #3]
 80073f8:	4611      	mov	r1, r2
 80073fa:	6878      	ldr	r0, [r7, #4]
 80073fc:	4798      	blx	r3
 80073fe:	4603      	mov	r3, r0
 8007400:	2b00      	cmp	r3, #0
 8007402:	d001      	beq.n	8007408 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8007404:	2303      	movs	r3, #3
 8007406:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007408:	7bfb      	ldrb	r3, [r7, #15]
}
 800740a:	4618      	mov	r0, r3
 800740c:	3710      	adds	r7, #16
 800740e:	46bd      	mov	sp, r7
 8007410:	bd80      	pop	{r7, pc}

08007412 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007412:	b580      	push	{r7, lr}
 8007414:	b084      	sub	sp, #16
 8007416:	af00      	add	r7, sp, #0
 8007418:	6078      	str	r0, [r7, #4]
 800741a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007422:	6839      	ldr	r1, [r7, #0]
 8007424:	4618      	mov	r0, r3
 8007426:	f001 f90c 	bl	8008642 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	2201      	movs	r2, #1
 800742e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8007438:	461a      	mov	r2, r3
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007446:	f003 031f 	and.w	r3, r3, #31
 800744a:	2b02      	cmp	r3, #2
 800744c:	d01a      	beq.n	8007484 <USBD_LL_SetupStage+0x72>
 800744e:	2b02      	cmp	r3, #2
 8007450:	d822      	bhi.n	8007498 <USBD_LL_SetupStage+0x86>
 8007452:	2b00      	cmp	r3, #0
 8007454:	d002      	beq.n	800745c <USBD_LL_SetupStage+0x4a>
 8007456:	2b01      	cmp	r3, #1
 8007458:	d00a      	beq.n	8007470 <USBD_LL_SetupStage+0x5e>
 800745a:	e01d      	b.n	8007498 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007462:	4619      	mov	r1, r3
 8007464:	6878      	ldr	r0, [r7, #4]
 8007466:	f000 fb63 	bl	8007b30 <USBD_StdDevReq>
 800746a:	4603      	mov	r3, r0
 800746c:	73fb      	strb	r3, [r7, #15]
      break;
 800746e:	e020      	b.n	80074b2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007476:	4619      	mov	r1, r3
 8007478:	6878      	ldr	r0, [r7, #4]
 800747a:	f000 fbcb 	bl	8007c14 <USBD_StdItfReq>
 800747e:	4603      	mov	r3, r0
 8007480:	73fb      	strb	r3, [r7, #15]
      break;
 8007482:	e016      	b.n	80074b2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800748a:	4619      	mov	r1, r3
 800748c:	6878      	ldr	r0, [r7, #4]
 800748e:	f000 fc2d 	bl	8007cec <USBD_StdEPReq>
 8007492:	4603      	mov	r3, r0
 8007494:	73fb      	strb	r3, [r7, #15]
      break;
 8007496:	e00c      	b.n	80074b2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800749e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80074a2:	b2db      	uxtb	r3, r3
 80074a4:	4619      	mov	r1, r3
 80074a6:	6878      	ldr	r0, [r7, #4]
 80074a8:	f001 fe0e 	bl	80090c8 <USBD_LL_StallEP>
 80074ac:	4603      	mov	r3, r0
 80074ae:	73fb      	strb	r3, [r7, #15]
      break;
 80074b0:	bf00      	nop
  }

  return ret;
 80074b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80074b4:	4618      	mov	r0, r3
 80074b6:	3710      	adds	r7, #16
 80074b8:	46bd      	mov	sp, r7
 80074ba:	bd80      	pop	{r7, pc}

080074bc <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80074bc:	b580      	push	{r7, lr}
 80074be:	b086      	sub	sp, #24
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	60f8      	str	r0, [r7, #12]
 80074c4:	460b      	mov	r3, r1
 80074c6:	607a      	str	r2, [r7, #4]
 80074c8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80074ca:	2300      	movs	r3, #0
 80074cc:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80074ce:	7afb      	ldrb	r3, [r7, #11]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d16e      	bne.n	80075b2 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80074da:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80074e2:	2b03      	cmp	r3, #3
 80074e4:	f040 8098 	bne.w	8007618 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80074e8:	693b      	ldr	r3, [r7, #16]
 80074ea:	689a      	ldr	r2, [r3, #8]
 80074ec:	693b      	ldr	r3, [r7, #16]
 80074ee:	68db      	ldr	r3, [r3, #12]
 80074f0:	429a      	cmp	r2, r3
 80074f2:	d913      	bls.n	800751c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80074f4:	693b      	ldr	r3, [r7, #16]
 80074f6:	689a      	ldr	r2, [r3, #8]
 80074f8:	693b      	ldr	r3, [r7, #16]
 80074fa:	68db      	ldr	r3, [r3, #12]
 80074fc:	1ad2      	subs	r2, r2, r3
 80074fe:	693b      	ldr	r3, [r7, #16]
 8007500:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007502:	693b      	ldr	r3, [r7, #16]
 8007504:	68da      	ldr	r2, [r3, #12]
 8007506:	693b      	ldr	r3, [r7, #16]
 8007508:	689b      	ldr	r3, [r3, #8]
 800750a:	4293      	cmp	r3, r2
 800750c:	bf28      	it	cs
 800750e:	4613      	movcs	r3, r2
 8007510:	461a      	mov	r2, r3
 8007512:	6879      	ldr	r1, [r7, #4]
 8007514:	68f8      	ldr	r0, [r7, #12]
 8007516:	f001 f988 	bl	800882a <USBD_CtlContinueRx>
 800751a:	e07d      	b.n	8007618 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007522:	f003 031f 	and.w	r3, r3, #31
 8007526:	2b02      	cmp	r3, #2
 8007528:	d014      	beq.n	8007554 <USBD_LL_DataOutStage+0x98>
 800752a:	2b02      	cmp	r3, #2
 800752c:	d81d      	bhi.n	800756a <USBD_LL_DataOutStage+0xae>
 800752e:	2b00      	cmp	r3, #0
 8007530:	d002      	beq.n	8007538 <USBD_LL_DataOutStage+0x7c>
 8007532:	2b01      	cmp	r3, #1
 8007534:	d003      	beq.n	800753e <USBD_LL_DataOutStage+0x82>
 8007536:	e018      	b.n	800756a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8007538:	2300      	movs	r3, #0
 800753a:	75bb      	strb	r3, [r7, #22]
            break;
 800753c:	e018      	b.n	8007570 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8007544:	b2db      	uxtb	r3, r3
 8007546:	4619      	mov	r1, r3
 8007548:	68f8      	ldr	r0, [r7, #12]
 800754a:	f000 fa64 	bl	8007a16 <USBD_CoreFindIF>
 800754e:	4603      	mov	r3, r0
 8007550:	75bb      	strb	r3, [r7, #22]
            break;
 8007552:	e00d      	b.n	8007570 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800755a:	b2db      	uxtb	r3, r3
 800755c:	4619      	mov	r1, r3
 800755e:	68f8      	ldr	r0, [r7, #12]
 8007560:	f000 fa66 	bl	8007a30 <USBD_CoreFindEP>
 8007564:	4603      	mov	r3, r0
 8007566:	75bb      	strb	r3, [r7, #22]
            break;
 8007568:	e002      	b.n	8007570 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800756a:	2300      	movs	r3, #0
 800756c:	75bb      	strb	r3, [r7, #22]
            break;
 800756e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007570:	7dbb      	ldrb	r3, [r7, #22]
 8007572:	2b00      	cmp	r3, #0
 8007574:	d119      	bne.n	80075aa <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800757c:	b2db      	uxtb	r3, r3
 800757e:	2b03      	cmp	r3, #3
 8007580:	d113      	bne.n	80075aa <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8007582:	7dba      	ldrb	r2, [r7, #22]
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	32ae      	adds	r2, #174	@ 0xae
 8007588:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800758c:	691b      	ldr	r3, [r3, #16]
 800758e:	2b00      	cmp	r3, #0
 8007590:	d00b      	beq.n	80075aa <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8007592:	7dba      	ldrb	r2, [r7, #22]
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800759a:	7dba      	ldrb	r2, [r7, #22]
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	32ae      	adds	r2, #174	@ 0xae
 80075a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075a4:	691b      	ldr	r3, [r3, #16]
 80075a6:	68f8      	ldr	r0, [r7, #12]
 80075a8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80075aa:	68f8      	ldr	r0, [r7, #12]
 80075ac:	f001 f94e 	bl	800884c <USBD_CtlSendStatus>
 80075b0:	e032      	b.n	8007618 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80075b2:	7afb      	ldrb	r3, [r7, #11]
 80075b4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80075b8:	b2db      	uxtb	r3, r3
 80075ba:	4619      	mov	r1, r3
 80075bc:	68f8      	ldr	r0, [r7, #12]
 80075be:	f000 fa37 	bl	8007a30 <USBD_CoreFindEP>
 80075c2:	4603      	mov	r3, r0
 80075c4:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80075c6:	7dbb      	ldrb	r3, [r7, #22]
 80075c8:	2bff      	cmp	r3, #255	@ 0xff
 80075ca:	d025      	beq.n	8007618 <USBD_LL_DataOutStage+0x15c>
 80075cc:	7dbb      	ldrb	r3, [r7, #22]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d122      	bne.n	8007618 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80075d8:	b2db      	uxtb	r3, r3
 80075da:	2b03      	cmp	r3, #3
 80075dc:	d117      	bne.n	800760e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80075de:	7dba      	ldrb	r2, [r7, #22]
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	32ae      	adds	r2, #174	@ 0xae
 80075e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075e8:	699b      	ldr	r3, [r3, #24]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d00f      	beq.n	800760e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80075ee:	7dba      	ldrb	r2, [r7, #22]
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80075f6:	7dba      	ldrb	r2, [r7, #22]
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	32ae      	adds	r2, #174	@ 0xae
 80075fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007600:	699b      	ldr	r3, [r3, #24]
 8007602:	7afa      	ldrb	r2, [r7, #11]
 8007604:	4611      	mov	r1, r2
 8007606:	68f8      	ldr	r0, [r7, #12]
 8007608:	4798      	blx	r3
 800760a:	4603      	mov	r3, r0
 800760c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800760e:	7dfb      	ldrb	r3, [r7, #23]
 8007610:	2b00      	cmp	r3, #0
 8007612:	d001      	beq.n	8007618 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8007614:	7dfb      	ldrb	r3, [r7, #23]
 8007616:	e000      	b.n	800761a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8007618:	2300      	movs	r3, #0
}
 800761a:	4618      	mov	r0, r3
 800761c:	3718      	adds	r7, #24
 800761e:	46bd      	mov	sp, r7
 8007620:	bd80      	pop	{r7, pc}

08007622 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007622:	b580      	push	{r7, lr}
 8007624:	b086      	sub	sp, #24
 8007626:	af00      	add	r7, sp, #0
 8007628:	60f8      	str	r0, [r7, #12]
 800762a:	460b      	mov	r3, r1
 800762c:	607a      	str	r2, [r7, #4]
 800762e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8007630:	7afb      	ldrb	r3, [r7, #11]
 8007632:	2b00      	cmp	r3, #0
 8007634:	d16f      	bne.n	8007716 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	3314      	adds	r3, #20
 800763a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007642:	2b02      	cmp	r3, #2
 8007644:	d15a      	bne.n	80076fc <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8007646:	693b      	ldr	r3, [r7, #16]
 8007648:	689a      	ldr	r2, [r3, #8]
 800764a:	693b      	ldr	r3, [r7, #16]
 800764c:	68db      	ldr	r3, [r3, #12]
 800764e:	429a      	cmp	r2, r3
 8007650:	d914      	bls.n	800767c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007652:	693b      	ldr	r3, [r7, #16]
 8007654:	689a      	ldr	r2, [r3, #8]
 8007656:	693b      	ldr	r3, [r7, #16]
 8007658:	68db      	ldr	r3, [r3, #12]
 800765a:	1ad2      	subs	r2, r2, r3
 800765c:	693b      	ldr	r3, [r7, #16]
 800765e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007660:	693b      	ldr	r3, [r7, #16]
 8007662:	689b      	ldr	r3, [r3, #8]
 8007664:	461a      	mov	r2, r3
 8007666:	6879      	ldr	r1, [r7, #4]
 8007668:	68f8      	ldr	r0, [r7, #12]
 800766a:	f001 f8b0 	bl	80087ce <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800766e:	2300      	movs	r3, #0
 8007670:	2200      	movs	r2, #0
 8007672:	2100      	movs	r1, #0
 8007674:	68f8      	ldr	r0, [r7, #12]
 8007676:	f001 fdd1 	bl	800921c <USBD_LL_PrepareReceive>
 800767a:	e03f      	b.n	80076fc <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800767c:	693b      	ldr	r3, [r7, #16]
 800767e:	68da      	ldr	r2, [r3, #12]
 8007680:	693b      	ldr	r3, [r7, #16]
 8007682:	689b      	ldr	r3, [r3, #8]
 8007684:	429a      	cmp	r2, r3
 8007686:	d11c      	bne.n	80076c2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007688:	693b      	ldr	r3, [r7, #16]
 800768a:	685a      	ldr	r2, [r3, #4]
 800768c:	693b      	ldr	r3, [r7, #16]
 800768e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007690:	429a      	cmp	r2, r3
 8007692:	d316      	bcc.n	80076c2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007694:	693b      	ldr	r3, [r7, #16]
 8007696:	685a      	ldr	r2, [r3, #4]
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800769e:	429a      	cmp	r2, r3
 80076a0:	d20f      	bcs.n	80076c2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80076a2:	2200      	movs	r2, #0
 80076a4:	2100      	movs	r1, #0
 80076a6:	68f8      	ldr	r0, [r7, #12]
 80076a8:	f001 f891 	bl	80087ce <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	2200      	movs	r2, #0
 80076b0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80076b4:	2300      	movs	r3, #0
 80076b6:	2200      	movs	r2, #0
 80076b8:	2100      	movs	r1, #0
 80076ba:	68f8      	ldr	r0, [r7, #12]
 80076bc:	f001 fdae 	bl	800921c <USBD_LL_PrepareReceive>
 80076c0:	e01c      	b.n	80076fc <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80076c8:	b2db      	uxtb	r3, r3
 80076ca:	2b03      	cmp	r3, #3
 80076cc:	d10f      	bne.n	80076ee <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80076d4:	68db      	ldr	r3, [r3, #12]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d009      	beq.n	80076ee <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	2200      	movs	r2, #0
 80076de:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80076e8:	68db      	ldr	r3, [r3, #12]
 80076ea:	68f8      	ldr	r0, [r7, #12]
 80076ec:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80076ee:	2180      	movs	r1, #128	@ 0x80
 80076f0:	68f8      	ldr	r0, [r7, #12]
 80076f2:	f001 fce9 	bl	80090c8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80076f6:	68f8      	ldr	r0, [r7, #12]
 80076f8:	f001 f8bb 	bl	8008872 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8007702:	2b00      	cmp	r3, #0
 8007704:	d03a      	beq.n	800777c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8007706:	68f8      	ldr	r0, [r7, #12]
 8007708:	f7ff fe42 	bl	8007390 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	2200      	movs	r2, #0
 8007710:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8007714:	e032      	b.n	800777c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8007716:	7afb      	ldrb	r3, [r7, #11]
 8007718:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800771c:	b2db      	uxtb	r3, r3
 800771e:	4619      	mov	r1, r3
 8007720:	68f8      	ldr	r0, [r7, #12]
 8007722:	f000 f985 	bl	8007a30 <USBD_CoreFindEP>
 8007726:	4603      	mov	r3, r0
 8007728:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800772a:	7dfb      	ldrb	r3, [r7, #23]
 800772c:	2bff      	cmp	r3, #255	@ 0xff
 800772e:	d025      	beq.n	800777c <USBD_LL_DataInStage+0x15a>
 8007730:	7dfb      	ldrb	r3, [r7, #23]
 8007732:	2b00      	cmp	r3, #0
 8007734:	d122      	bne.n	800777c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800773c:	b2db      	uxtb	r3, r3
 800773e:	2b03      	cmp	r3, #3
 8007740:	d11c      	bne.n	800777c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8007742:	7dfa      	ldrb	r2, [r7, #23]
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	32ae      	adds	r2, #174	@ 0xae
 8007748:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800774c:	695b      	ldr	r3, [r3, #20]
 800774e:	2b00      	cmp	r3, #0
 8007750:	d014      	beq.n	800777c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8007752:	7dfa      	ldrb	r2, [r7, #23]
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800775a:	7dfa      	ldrb	r2, [r7, #23]
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	32ae      	adds	r2, #174	@ 0xae
 8007760:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007764:	695b      	ldr	r3, [r3, #20]
 8007766:	7afa      	ldrb	r2, [r7, #11]
 8007768:	4611      	mov	r1, r2
 800776a:	68f8      	ldr	r0, [r7, #12]
 800776c:	4798      	blx	r3
 800776e:	4603      	mov	r3, r0
 8007770:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8007772:	7dbb      	ldrb	r3, [r7, #22]
 8007774:	2b00      	cmp	r3, #0
 8007776:	d001      	beq.n	800777c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8007778:	7dbb      	ldrb	r3, [r7, #22]
 800777a:	e000      	b.n	800777e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800777c:	2300      	movs	r3, #0
}
 800777e:	4618      	mov	r0, r3
 8007780:	3718      	adds	r7, #24
 8007782:	46bd      	mov	sp, r7
 8007784:	bd80      	pop	{r7, pc}

08007786 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007786:	b580      	push	{r7, lr}
 8007788:	b084      	sub	sp, #16
 800778a:	af00      	add	r7, sp, #0
 800778c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800778e:	2300      	movs	r3, #0
 8007790:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	2201      	movs	r2, #1
 8007796:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	2200      	movs	r2, #0
 800779e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	2200      	movs	r2, #0
 80077a6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	2200      	movs	r2, #0
 80077ac:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	2200      	movs	r2, #0
 80077b4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d014      	beq.n	80077ec <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80077c8:	685b      	ldr	r3, [r3, #4]
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d00e      	beq.n	80077ec <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80077d4:	685b      	ldr	r3, [r3, #4]
 80077d6:	687a      	ldr	r2, [r7, #4]
 80077d8:	6852      	ldr	r2, [r2, #4]
 80077da:	b2d2      	uxtb	r2, r2
 80077dc:	4611      	mov	r1, r2
 80077de:	6878      	ldr	r0, [r7, #4]
 80077e0:	4798      	blx	r3
 80077e2:	4603      	mov	r3, r0
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d001      	beq.n	80077ec <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80077e8:	2303      	movs	r3, #3
 80077ea:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80077ec:	2340      	movs	r3, #64	@ 0x40
 80077ee:	2200      	movs	r2, #0
 80077f0:	2100      	movs	r1, #0
 80077f2:	6878      	ldr	r0, [r7, #4]
 80077f4:	f001 fc23 	bl	800903e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2201      	movs	r2, #1
 80077fc:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	2240      	movs	r2, #64	@ 0x40
 8007804:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007808:	2340      	movs	r3, #64	@ 0x40
 800780a:	2200      	movs	r2, #0
 800780c:	2180      	movs	r1, #128	@ 0x80
 800780e:	6878      	ldr	r0, [r7, #4]
 8007810:	f001 fc15 	bl	800903e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	2201      	movs	r2, #1
 8007818:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	2240      	movs	r2, #64	@ 0x40
 800781e:	621a      	str	r2, [r3, #32]

  return ret;
 8007820:	7bfb      	ldrb	r3, [r7, #15]
}
 8007822:	4618      	mov	r0, r3
 8007824:	3710      	adds	r7, #16
 8007826:	46bd      	mov	sp, r7
 8007828:	bd80      	pop	{r7, pc}

0800782a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800782a:	b480      	push	{r7}
 800782c:	b083      	sub	sp, #12
 800782e:	af00      	add	r7, sp, #0
 8007830:	6078      	str	r0, [r7, #4]
 8007832:	460b      	mov	r3, r1
 8007834:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	78fa      	ldrb	r2, [r7, #3]
 800783a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800783c:	2300      	movs	r3, #0
}
 800783e:	4618      	mov	r0, r3
 8007840:	370c      	adds	r7, #12
 8007842:	46bd      	mov	sp, r7
 8007844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007848:	4770      	bx	lr

0800784a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800784a:	b480      	push	{r7}
 800784c:	b083      	sub	sp, #12
 800784e:	af00      	add	r7, sp, #0
 8007850:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007858:	b2db      	uxtb	r3, r3
 800785a:	2b04      	cmp	r3, #4
 800785c:	d006      	beq.n	800786c <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007864:	b2da      	uxtb	r2, r3
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2204      	movs	r2, #4
 8007870:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8007874:	2300      	movs	r3, #0
}
 8007876:	4618      	mov	r0, r3
 8007878:	370c      	adds	r7, #12
 800787a:	46bd      	mov	sp, r7
 800787c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007880:	4770      	bx	lr

08007882 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007882:	b480      	push	{r7}
 8007884:	b083      	sub	sp, #12
 8007886:	af00      	add	r7, sp, #0
 8007888:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007890:	b2db      	uxtb	r3, r3
 8007892:	2b04      	cmp	r3, #4
 8007894:	d106      	bne.n	80078a4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800789c:	b2da      	uxtb	r2, r3
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80078a4:	2300      	movs	r3, #0
}
 80078a6:	4618      	mov	r0, r3
 80078a8:	370c      	adds	r7, #12
 80078aa:	46bd      	mov	sp, r7
 80078ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b0:	4770      	bx	lr

080078b2 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80078b2:	b580      	push	{r7, lr}
 80078b4:	b082      	sub	sp, #8
 80078b6:	af00      	add	r7, sp, #0
 80078b8:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80078c0:	b2db      	uxtb	r3, r3
 80078c2:	2b03      	cmp	r3, #3
 80078c4:	d110      	bne.n	80078e8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d00b      	beq.n	80078e8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80078d6:	69db      	ldr	r3, [r3, #28]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d005      	beq.n	80078e8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80078e2:	69db      	ldr	r3, [r3, #28]
 80078e4:	6878      	ldr	r0, [r7, #4]
 80078e6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80078e8:	2300      	movs	r3, #0
}
 80078ea:	4618      	mov	r0, r3
 80078ec:	3708      	adds	r7, #8
 80078ee:	46bd      	mov	sp, r7
 80078f0:	bd80      	pop	{r7, pc}

080078f2 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80078f2:	b580      	push	{r7, lr}
 80078f4:	b082      	sub	sp, #8
 80078f6:	af00      	add	r7, sp, #0
 80078f8:	6078      	str	r0, [r7, #4]
 80078fa:	460b      	mov	r3, r1
 80078fc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	32ae      	adds	r2, #174	@ 0xae
 8007908:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800790c:	2b00      	cmp	r3, #0
 800790e:	d101      	bne.n	8007914 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8007910:	2303      	movs	r3, #3
 8007912:	e01c      	b.n	800794e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800791a:	b2db      	uxtb	r3, r3
 800791c:	2b03      	cmp	r3, #3
 800791e:	d115      	bne.n	800794c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	32ae      	adds	r2, #174	@ 0xae
 800792a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800792e:	6a1b      	ldr	r3, [r3, #32]
 8007930:	2b00      	cmp	r3, #0
 8007932:	d00b      	beq.n	800794c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	32ae      	adds	r2, #174	@ 0xae
 800793e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007942:	6a1b      	ldr	r3, [r3, #32]
 8007944:	78fa      	ldrb	r2, [r7, #3]
 8007946:	4611      	mov	r1, r2
 8007948:	6878      	ldr	r0, [r7, #4]
 800794a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800794c:	2300      	movs	r3, #0
}
 800794e:	4618      	mov	r0, r3
 8007950:	3708      	adds	r7, #8
 8007952:	46bd      	mov	sp, r7
 8007954:	bd80      	pop	{r7, pc}

08007956 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007956:	b580      	push	{r7, lr}
 8007958:	b082      	sub	sp, #8
 800795a:	af00      	add	r7, sp, #0
 800795c:	6078      	str	r0, [r7, #4]
 800795e:	460b      	mov	r3, r1
 8007960:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	32ae      	adds	r2, #174	@ 0xae
 800796c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007970:	2b00      	cmp	r3, #0
 8007972:	d101      	bne.n	8007978 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007974:	2303      	movs	r3, #3
 8007976:	e01c      	b.n	80079b2 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800797e:	b2db      	uxtb	r3, r3
 8007980:	2b03      	cmp	r3, #3
 8007982:	d115      	bne.n	80079b0 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	32ae      	adds	r2, #174	@ 0xae
 800798e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007992:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007994:	2b00      	cmp	r3, #0
 8007996:	d00b      	beq.n	80079b0 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	32ae      	adds	r2, #174	@ 0xae
 80079a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079a8:	78fa      	ldrb	r2, [r7, #3]
 80079aa:	4611      	mov	r1, r2
 80079ac:	6878      	ldr	r0, [r7, #4]
 80079ae:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80079b0:	2300      	movs	r3, #0
}
 80079b2:	4618      	mov	r0, r3
 80079b4:	3708      	adds	r7, #8
 80079b6:	46bd      	mov	sp, r7
 80079b8:	bd80      	pop	{r7, pc}

080079ba <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80079ba:	b480      	push	{r7}
 80079bc:	b083      	sub	sp, #12
 80079be:	af00      	add	r7, sp, #0
 80079c0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80079c2:	2300      	movs	r3, #0
}
 80079c4:	4618      	mov	r0, r3
 80079c6:	370c      	adds	r7, #12
 80079c8:	46bd      	mov	sp, r7
 80079ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ce:	4770      	bx	lr

080079d0 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80079d0:	b580      	push	{r7, lr}
 80079d2:	b084      	sub	sp, #16
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80079d8:	2300      	movs	r3, #0
 80079da:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	2201      	movs	r2, #1
 80079e0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d00e      	beq.n	8007a0c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80079f4:	685b      	ldr	r3, [r3, #4]
 80079f6:	687a      	ldr	r2, [r7, #4]
 80079f8:	6852      	ldr	r2, [r2, #4]
 80079fa:	b2d2      	uxtb	r2, r2
 80079fc:	4611      	mov	r1, r2
 80079fe:	6878      	ldr	r0, [r7, #4]
 8007a00:	4798      	blx	r3
 8007a02:	4603      	mov	r3, r0
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d001      	beq.n	8007a0c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007a08:	2303      	movs	r3, #3
 8007a0a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007a0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a0e:	4618      	mov	r0, r3
 8007a10:	3710      	adds	r7, #16
 8007a12:	46bd      	mov	sp, r7
 8007a14:	bd80      	pop	{r7, pc}

08007a16 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007a16:	b480      	push	{r7}
 8007a18:	b083      	sub	sp, #12
 8007a1a:	af00      	add	r7, sp, #0
 8007a1c:	6078      	str	r0, [r7, #4]
 8007a1e:	460b      	mov	r3, r1
 8007a20:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007a22:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007a24:	4618      	mov	r0, r3
 8007a26:	370c      	adds	r7, #12
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2e:	4770      	bx	lr

08007a30 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007a30:	b480      	push	{r7}
 8007a32:	b083      	sub	sp, #12
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
 8007a38:	460b      	mov	r3, r1
 8007a3a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007a3c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007a3e:	4618      	mov	r0, r3
 8007a40:	370c      	adds	r7, #12
 8007a42:	46bd      	mov	sp, r7
 8007a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a48:	4770      	bx	lr

08007a4a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8007a4a:	b580      	push	{r7, lr}
 8007a4c:	b086      	sub	sp, #24
 8007a4e:	af00      	add	r7, sp, #0
 8007a50:	6078      	str	r0, [r7, #4]
 8007a52:	460b      	mov	r3, r1
 8007a54:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007a5e:	2300      	movs	r3, #0
 8007a60:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	885b      	ldrh	r3, [r3, #2]
 8007a66:	b29b      	uxth	r3, r3
 8007a68:	68fa      	ldr	r2, [r7, #12]
 8007a6a:	7812      	ldrb	r2, [r2, #0]
 8007a6c:	4293      	cmp	r3, r2
 8007a6e:	d91f      	bls.n	8007ab0 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	781b      	ldrb	r3, [r3, #0]
 8007a74:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8007a76:	e013      	b.n	8007aa0 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007a78:	f107 030a 	add.w	r3, r7, #10
 8007a7c:	4619      	mov	r1, r3
 8007a7e:	6978      	ldr	r0, [r7, #20]
 8007a80:	f000 f81b 	bl	8007aba <USBD_GetNextDesc>
 8007a84:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007a86:	697b      	ldr	r3, [r7, #20]
 8007a88:	785b      	ldrb	r3, [r3, #1]
 8007a8a:	2b05      	cmp	r3, #5
 8007a8c:	d108      	bne.n	8007aa0 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8007a8e:	697b      	ldr	r3, [r7, #20]
 8007a90:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8007a92:	693b      	ldr	r3, [r7, #16]
 8007a94:	789b      	ldrb	r3, [r3, #2]
 8007a96:	78fa      	ldrb	r2, [r7, #3]
 8007a98:	429a      	cmp	r2, r3
 8007a9a:	d008      	beq.n	8007aae <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007a9c:	2300      	movs	r3, #0
 8007a9e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	885b      	ldrh	r3, [r3, #2]
 8007aa4:	b29a      	uxth	r2, r3
 8007aa6:	897b      	ldrh	r3, [r7, #10]
 8007aa8:	429a      	cmp	r2, r3
 8007aaa:	d8e5      	bhi.n	8007a78 <USBD_GetEpDesc+0x2e>
 8007aac:	e000      	b.n	8007ab0 <USBD_GetEpDesc+0x66>
          break;
 8007aae:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007ab0:	693b      	ldr	r3, [r7, #16]
}
 8007ab2:	4618      	mov	r0, r3
 8007ab4:	3718      	adds	r7, #24
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	bd80      	pop	{r7, pc}

08007aba <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007aba:	b480      	push	{r7}
 8007abc:	b085      	sub	sp, #20
 8007abe:	af00      	add	r7, sp, #0
 8007ac0:	6078      	str	r0, [r7, #4]
 8007ac2:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007ac8:	683b      	ldr	r3, [r7, #0]
 8007aca:	881b      	ldrh	r3, [r3, #0]
 8007acc:	68fa      	ldr	r2, [r7, #12]
 8007ace:	7812      	ldrb	r2, [r2, #0]
 8007ad0:	4413      	add	r3, r2
 8007ad2:	b29a      	uxth	r2, r3
 8007ad4:	683b      	ldr	r3, [r7, #0]
 8007ad6:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	781b      	ldrb	r3, [r3, #0]
 8007adc:	461a      	mov	r2, r3
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	4413      	add	r3, r2
 8007ae2:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007ae4:	68fb      	ldr	r3, [r7, #12]
}
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	3714      	adds	r7, #20
 8007aea:	46bd      	mov	sp, r7
 8007aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af0:	4770      	bx	lr

08007af2 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007af2:	b480      	push	{r7}
 8007af4:	b087      	sub	sp, #28
 8007af6:	af00      	add	r7, sp, #0
 8007af8:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007afe:	697b      	ldr	r3, [r7, #20]
 8007b00:	781b      	ldrb	r3, [r3, #0]
 8007b02:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007b04:	697b      	ldr	r3, [r7, #20]
 8007b06:	3301      	adds	r3, #1
 8007b08:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007b0a:	697b      	ldr	r3, [r7, #20]
 8007b0c:	781b      	ldrb	r3, [r3, #0]
 8007b0e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007b10:	8a3b      	ldrh	r3, [r7, #16]
 8007b12:	021b      	lsls	r3, r3, #8
 8007b14:	b21a      	sxth	r2, r3
 8007b16:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007b1a:	4313      	orrs	r3, r2
 8007b1c:	b21b      	sxth	r3, r3
 8007b1e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007b20:	89fb      	ldrh	r3, [r7, #14]
}
 8007b22:	4618      	mov	r0, r3
 8007b24:	371c      	adds	r7, #28
 8007b26:	46bd      	mov	sp, r7
 8007b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2c:	4770      	bx	lr
	...

08007b30 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b30:	b580      	push	{r7, lr}
 8007b32:	b084      	sub	sp, #16
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	6078      	str	r0, [r7, #4]
 8007b38:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007b3a:	2300      	movs	r3, #0
 8007b3c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007b3e:	683b      	ldr	r3, [r7, #0]
 8007b40:	781b      	ldrb	r3, [r3, #0]
 8007b42:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007b46:	2b40      	cmp	r3, #64	@ 0x40
 8007b48:	d005      	beq.n	8007b56 <USBD_StdDevReq+0x26>
 8007b4a:	2b40      	cmp	r3, #64	@ 0x40
 8007b4c:	d857      	bhi.n	8007bfe <USBD_StdDevReq+0xce>
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d00f      	beq.n	8007b72 <USBD_StdDevReq+0x42>
 8007b52:	2b20      	cmp	r3, #32
 8007b54:	d153      	bne.n	8007bfe <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	32ae      	adds	r2, #174	@ 0xae
 8007b60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b64:	689b      	ldr	r3, [r3, #8]
 8007b66:	6839      	ldr	r1, [r7, #0]
 8007b68:	6878      	ldr	r0, [r7, #4]
 8007b6a:	4798      	blx	r3
 8007b6c:	4603      	mov	r3, r0
 8007b6e:	73fb      	strb	r3, [r7, #15]
      break;
 8007b70:	e04a      	b.n	8007c08 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007b72:	683b      	ldr	r3, [r7, #0]
 8007b74:	785b      	ldrb	r3, [r3, #1]
 8007b76:	2b09      	cmp	r3, #9
 8007b78:	d83b      	bhi.n	8007bf2 <USBD_StdDevReq+0xc2>
 8007b7a:	a201      	add	r2, pc, #4	@ (adr r2, 8007b80 <USBD_StdDevReq+0x50>)
 8007b7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b80:	08007bd5 	.word	0x08007bd5
 8007b84:	08007be9 	.word	0x08007be9
 8007b88:	08007bf3 	.word	0x08007bf3
 8007b8c:	08007bdf 	.word	0x08007bdf
 8007b90:	08007bf3 	.word	0x08007bf3
 8007b94:	08007bb3 	.word	0x08007bb3
 8007b98:	08007ba9 	.word	0x08007ba9
 8007b9c:	08007bf3 	.word	0x08007bf3
 8007ba0:	08007bcb 	.word	0x08007bcb
 8007ba4:	08007bbd 	.word	0x08007bbd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007ba8:	6839      	ldr	r1, [r7, #0]
 8007baa:	6878      	ldr	r0, [r7, #4]
 8007bac:	f000 fa3c 	bl	8008028 <USBD_GetDescriptor>
          break;
 8007bb0:	e024      	b.n	8007bfc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007bb2:	6839      	ldr	r1, [r7, #0]
 8007bb4:	6878      	ldr	r0, [r7, #4]
 8007bb6:	f000 fba1 	bl	80082fc <USBD_SetAddress>
          break;
 8007bba:	e01f      	b.n	8007bfc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007bbc:	6839      	ldr	r1, [r7, #0]
 8007bbe:	6878      	ldr	r0, [r7, #4]
 8007bc0:	f000 fbe0 	bl	8008384 <USBD_SetConfig>
 8007bc4:	4603      	mov	r3, r0
 8007bc6:	73fb      	strb	r3, [r7, #15]
          break;
 8007bc8:	e018      	b.n	8007bfc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007bca:	6839      	ldr	r1, [r7, #0]
 8007bcc:	6878      	ldr	r0, [r7, #4]
 8007bce:	f000 fc83 	bl	80084d8 <USBD_GetConfig>
          break;
 8007bd2:	e013      	b.n	8007bfc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007bd4:	6839      	ldr	r1, [r7, #0]
 8007bd6:	6878      	ldr	r0, [r7, #4]
 8007bd8:	f000 fcb4 	bl	8008544 <USBD_GetStatus>
          break;
 8007bdc:	e00e      	b.n	8007bfc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007bde:	6839      	ldr	r1, [r7, #0]
 8007be0:	6878      	ldr	r0, [r7, #4]
 8007be2:	f000 fce3 	bl	80085ac <USBD_SetFeature>
          break;
 8007be6:	e009      	b.n	8007bfc <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007be8:	6839      	ldr	r1, [r7, #0]
 8007bea:	6878      	ldr	r0, [r7, #4]
 8007bec:	f000 fd07 	bl	80085fe <USBD_ClrFeature>
          break;
 8007bf0:	e004      	b.n	8007bfc <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8007bf2:	6839      	ldr	r1, [r7, #0]
 8007bf4:	6878      	ldr	r0, [r7, #4]
 8007bf6:	f000 fd5e 	bl	80086b6 <USBD_CtlError>
          break;
 8007bfa:	bf00      	nop
      }
      break;
 8007bfc:	e004      	b.n	8007c08 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8007bfe:	6839      	ldr	r1, [r7, #0]
 8007c00:	6878      	ldr	r0, [r7, #4]
 8007c02:	f000 fd58 	bl	80086b6 <USBD_CtlError>
      break;
 8007c06:	bf00      	nop
  }

  return ret;
 8007c08:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	3710      	adds	r7, #16
 8007c0e:	46bd      	mov	sp, r7
 8007c10:	bd80      	pop	{r7, pc}
 8007c12:	bf00      	nop

08007c14 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c14:	b580      	push	{r7, lr}
 8007c16:	b084      	sub	sp, #16
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	6078      	str	r0, [r7, #4]
 8007c1c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007c1e:	2300      	movs	r3, #0
 8007c20:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007c22:	683b      	ldr	r3, [r7, #0]
 8007c24:	781b      	ldrb	r3, [r3, #0]
 8007c26:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007c2a:	2b40      	cmp	r3, #64	@ 0x40
 8007c2c:	d005      	beq.n	8007c3a <USBD_StdItfReq+0x26>
 8007c2e:	2b40      	cmp	r3, #64	@ 0x40
 8007c30:	d852      	bhi.n	8007cd8 <USBD_StdItfReq+0xc4>
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d001      	beq.n	8007c3a <USBD_StdItfReq+0x26>
 8007c36:	2b20      	cmp	r3, #32
 8007c38:	d14e      	bne.n	8007cd8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007c40:	b2db      	uxtb	r3, r3
 8007c42:	3b01      	subs	r3, #1
 8007c44:	2b02      	cmp	r3, #2
 8007c46:	d840      	bhi.n	8007cca <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007c48:	683b      	ldr	r3, [r7, #0]
 8007c4a:	889b      	ldrh	r3, [r3, #4]
 8007c4c:	b2db      	uxtb	r3, r3
 8007c4e:	2b01      	cmp	r3, #1
 8007c50:	d836      	bhi.n	8007cc0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8007c52:	683b      	ldr	r3, [r7, #0]
 8007c54:	889b      	ldrh	r3, [r3, #4]
 8007c56:	b2db      	uxtb	r3, r3
 8007c58:	4619      	mov	r1, r3
 8007c5a:	6878      	ldr	r0, [r7, #4]
 8007c5c:	f7ff fedb 	bl	8007a16 <USBD_CoreFindIF>
 8007c60:	4603      	mov	r3, r0
 8007c62:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007c64:	7bbb      	ldrb	r3, [r7, #14]
 8007c66:	2bff      	cmp	r3, #255	@ 0xff
 8007c68:	d01d      	beq.n	8007ca6 <USBD_StdItfReq+0x92>
 8007c6a:	7bbb      	ldrb	r3, [r7, #14]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d11a      	bne.n	8007ca6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007c70:	7bba      	ldrb	r2, [r7, #14]
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	32ae      	adds	r2, #174	@ 0xae
 8007c76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c7a:	689b      	ldr	r3, [r3, #8]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d00f      	beq.n	8007ca0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007c80:	7bba      	ldrb	r2, [r7, #14]
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007c88:	7bba      	ldrb	r2, [r7, #14]
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	32ae      	adds	r2, #174	@ 0xae
 8007c8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c92:	689b      	ldr	r3, [r3, #8]
 8007c94:	6839      	ldr	r1, [r7, #0]
 8007c96:	6878      	ldr	r0, [r7, #4]
 8007c98:	4798      	blx	r3
 8007c9a:	4603      	mov	r3, r0
 8007c9c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007c9e:	e004      	b.n	8007caa <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007ca0:	2303      	movs	r3, #3
 8007ca2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007ca4:	e001      	b.n	8007caa <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8007ca6:	2303      	movs	r3, #3
 8007ca8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007caa:	683b      	ldr	r3, [r7, #0]
 8007cac:	88db      	ldrh	r3, [r3, #6]
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d110      	bne.n	8007cd4 <USBD_StdItfReq+0xc0>
 8007cb2:	7bfb      	ldrb	r3, [r7, #15]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d10d      	bne.n	8007cd4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007cb8:	6878      	ldr	r0, [r7, #4]
 8007cba:	f000 fdc7 	bl	800884c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007cbe:	e009      	b.n	8007cd4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007cc0:	6839      	ldr	r1, [r7, #0]
 8007cc2:	6878      	ldr	r0, [r7, #4]
 8007cc4:	f000 fcf7 	bl	80086b6 <USBD_CtlError>
          break;
 8007cc8:	e004      	b.n	8007cd4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007cca:	6839      	ldr	r1, [r7, #0]
 8007ccc:	6878      	ldr	r0, [r7, #4]
 8007cce:	f000 fcf2 	bl	80086b6 <USBD_CtlError>
          break;
 8007cd2:	e000      	b.n	8007cd6 <USBD_StdItfReq+0xc2>
          break;
 8007cd4:	bf00      	nop
      }
      break;
 8007cd6:	e004      	b.n	8007ce2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007cd8:	6839      	ldr	r1, [r7, #0]
 8007cda:	6878      	ldr	r0, [r7, #4]
 8007cdc:	f000 fceb 	bl	80086b6 <USBD_CtlError>
      break;
 8007ce0:	bf00      	nop
  }

  return ret;
 8007ce2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	3710      	adds	r7, #16
 8007ce8:	46bd      	mov	sp, r7
 8007cea:	bd80      	pop	{r7, pc}

08007cec <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007cec:	b580      	push	{r7, lr}
 8007cee:	b084      	sub	sp, #16
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	6078      	str	r0, [r7, #4]
 8007cf4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8007cfa:	683b      	ldr	r3, [r7, #0]
 8007cfc:	889b      	ldrh	r3, [r3, #4]
 8007cfe:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007d00:	683b      	ldr	r3, [r7, #0]
 8007d02:	781b      	ldrb	r3, [r3, #0]
 8007d04:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007d08:	2b40      	cmp	r3, #64	@ 0x40
 8007d0a:	d007      	beq.n	8007d1c <USBD_StdEPReq+0x30>
 8007d0c:	2b40      	cmp	r3, #64	@ 0x40
 8007d0e:	f200 817f 	bhi.w	8008010 <USBD_StdEPReq+0x324>
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d02a      	beq.n	8007d6c <USBD_StdEPReq+0x80>
 8007d16:	2b20      	cmp	r3, #32
 8007d18:	f040 817a 	bne.w	8008010 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007d1c:	7bbb      	ldrb	r3, [r7, #14]
 8007d1e:	4619      	mov	r1, r3
 8007d20:	6878      	ldr	r0, [r7, #4]
 8007d22:	f7ff fe85 	bl	8007a30 <USBD_CoreFindEP>
 8007d26:	4603      	mov	r3, r0
 8007d28:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007d2a:	7b7b      	ldrb	r3, [r7, #13]
 8007d2c:	2bff      	cmp	r3, #255	@ 0xff
 8007d2e:	f000 8174 	beq.w	800801a <USBD_StdEPReq+0x32e>
 8007d32:	7b7b      	ldrb	r3, [r7, #13]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	f040 8170 	bne.w	800801a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8007d3a:	7b7a      	ldrb	r2, [r7, #13]
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8007d42:	7b7a      	ldrb	r2, [r7, #13]
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	32ae      	adds	r2, #174	@ 0xae
 8007d48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d4c:	689b      	ldr	r3, [r3, #8]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	f000 8163 	beq.w	800801a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007d54:	7b7a      	ldrb	r2, [r7, #13]
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	32ae      	adds	r2, #174	@ 0xae
 8007d5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d5e:	689b      	ldr	r3, [r3, #8]
 8007d60:	6839      	ldr	r1, [r7, #0]
 8007d62:	6878      	ldr	r0, [r7, #4]
 8007d64:	4798      	blx	r3
 8007d66:	4603      	mov	r3, r0
 8007d68:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007d6a:	e156      	b.n	800801a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007d6c:	683b      	ldr	r3, [r7, #0]
 8007d6e:	785b      	ldrb	r3, [r3, #1]
 8007d70:	2b03      	cmp	r3, #3
 8007d72:	d008      	beq.n	8007d86 <USBD_StdEPReq+0x9a>
 8007d74:	2b03      	cmp	r3, #3
 8007d76:	f300 8145 	bgt.w	8008004 <USBD_StdEPReq+0x318>
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	f000 809b 	beq.w	8007eb6 <USBD_StdEPReq+0x1ca>
 8007d80:	2b01      	cmp	r3, #1
 8007d82:	d03c      	beq.n	8007dfe <USBD_StdEPReq+0x112>
 8007d84:	e13e      	b.n	8008004 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007d8c:	b2db      	uxtb	r3, r3
 8007d8e:	2b02      	cmp	r3, #2
 8007d90:	d002      	beq.n	8007d98 <USBD_StdEPReq+0xac>
 8007d92:	2b03      	cmp	r3, #3
 8007d94:	d016      	beq.n	8007dc4 <USBD_StdEPReq+0xd8>
 8007d96:	e02c      	b.n	8007df2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007d98:	7bbb      	ldrb	r3, [r7, #14]
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d00d      	beq.n	8007dba <USBD_StdEPReq+0xce>
 8007d9e:	7bbb      	ldrb	r3, [r7, #14]
 8007da0:	2b80      	cmp	r3, #128	@ 0x80
 8007da2:	d00a      	beq.n	8007dba <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007da4:	7bbb      	ldrb	r3, [r7, #14]
 8007da6:	4619      	mov	r1, r3
 8007da8:	6878      	ldr	r0, [r7, #4]
 8007daa:	f001 f98d 	bl	80090c8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007dae:	2180      	movs	r1, #128	@ 0x80
 8007db0:	6878      	ldr	r0, [r7, #4]
 8007db2:	f001 f989 	bl	80090c8 <USBD_LL_StallEP>
 8007db6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007db8:	e020      	b.n	8007dfc <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007dba:	6839      	ldr	r1, [r7, #0]
 8007dbc:	6878      	ldr	r0, [r7, #4]
 8007dbe:	f000 fc7a 	bl	80086b6 <USBD_CtlError>
              break;
 8007dc2:	e01b      	b.n	8007dfc <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007dc4:	683b      	ldr	r3, [r7, #0]
 8007dc6:	885b      	ldrh	r3, [r3, #2]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d10e      	bne.n	8007dea <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007dcc:	7bbb      	ldrb	r3, [r7, #14]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d00b      	beq.n	8007dea <USBD_StdEPReq+0xfe>
 8007dd2:	7bbb      	ldrb	r3, [r7, #14]
 8007dd4:	2b80      	cmp	r3, #128	@ 0x80
 8007dd6:	d008      	beq.n	8007dea <USBD_StdEPReq+0xfe>
 8007dd8:	683b      	ldr	r3, [r7, #0]
 8007dda:	88db      	ldrh	r3, [r3, #6]
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d104      	bne.n	8007dea <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007de0:	7bbb      	ldrb	r3, [r7, #14]
 8007de2:	4619      	mov	r1, r3
 8007de4:	6878      	ldr	r0, [r7, #4]
 8007de6:	f001 f96f 	bl	80090c8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007dea:	6878      	ldr	r0, [r7, #4]
 8007dec:	f000 fd2e 	bl	800884c <USBD_CtlSendStatus>

              break;
 8007df0:	e004      	b.n	8007dfc <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8007df2:	6839      	ldr	r1, [r7, #0]
 8007df4:	6878      	ldr	r0, [r7, #4]
 8007df6:	f000 fc5e 	bl	80086b6 <USBD_CtlError>
              break;
 8007dfa:	bf00      	nop
          }
          break;
 8007dfc:	e107      	b.n	800800e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007e04:	b2db      	uxtb	r3, r3
 8007e06:	2b02      	cmp	r3, #2
 8007e08:	d002      	beq.n	8007e10 <USBD_StdEPReq+0x124>
 8007e0a:	2b03      	cmp	r3, #3
 8007e0c:	d016      	beq.n	8007e3c <USBD_StdEPReq+0x150>
 8007e0e:	e04b      	b.n	8007ea8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007e10:	7bbb      	ldrb	r3, [r7, #14]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d00d      	beq.n	8007e32 <USBD_StdEPReq+0x146>
 8007e16:	7bbb      	ldrb	r3, [r7, #14]
 8007e18:	2b80      	cmp	r3, #128	@ 0x80
 8007e1a:	d00a      	beq.n	8007e32 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007e1c:	7bbb      	ldrb	r3, [r7, #14]
 8007e1e:	4619      	mov	r1, r3
 8007e20:	6878      	ldr	r0, [r7, #4]
 8007e22:	f001 f951 	bl	80090c8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007e26:	2180      	movs	r1, #128	@ 0x80
 8007e28:	6878      	ldr	r0, [r7, #4]
 8007e2a:	f001 f94d 	bl	80090c8 <USBD_LL_StallEP>
 8007e2e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007e30:	e040      	b.n	8007eb4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8007e32:	6839      	ldr	r1, [r7, #0]
 8007e34:	6878      	ldr	r0, [r7, #4]
 8007e36:	f000 fc3e 	bl	80086b6 <USBD_CtlError>
              break;
 8007e3a:	e03b      	b.n	8007eb4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007e3c:	683b      	ldr	r3, [r7, #0]
 8007e3e:	885b      	ldrh	r3, [r3, #2]
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d136      	bne.n	8007eb2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007e44:	7bbb      	ldrb	r3, [r7, #14]
 8007e46:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d004      	beq.n	8007e58 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007e4e:	7bbb      	ldrb	r3, [r7, #14]
 8007e50:	4619      	mov	r1, r3
 8007e52:	6878      	ldr	r0, [r7, #4]
 8007e54:	f001 f957 	bl	8009106 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007e58:	6878      	ldr	r0, [r7, #4]
 8007e5a:	f000 fcf7 	bl	800884c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8007e5e:	7bbb      	ldrb	r3, [r7, #14]
 8007e60:	4619      	mov	r1, r3
 8007e62:	6878      	ldr	r0, [r7, #4]
 8007e64:	f7ff fde4 	bl	8007a30 <USBD_CoreFindEP>
 8007e68:	4603      	mov	r3, r0
 8007e6a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007e6c:	7b7b      	ldrb	r3, [r7, #13]
 8007e6e:	2bff      	cmp	r3, #255	@ 0xff
 8007e70:	d01f      	beq.n	8007eb2 <USBD_StdEPReq+0x1c6>
 8007e72:	7b7b      	ldrb	r3, [r7, #13]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d11c      	bne.n	8007eb2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007e78:	7b7a      	ldrb	r2, [r7, #13]
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007e80:	7b7a      	ldrb	r2, [r7, #13]
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	32ae      	adds	r2, #174	@ 0xae
 8007e86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e8a:	689b      	ldr	r3, [r3, #8]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d010      	beq.n	8007eb2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007e90:	7b7a      	ldrb	r2, [r7, #13]
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	32ae      	adds	r2, #174	@ 0xae
 8007e96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e9a:	689b      	ldr	r3, [r3, #8]
 8007e9c:	6839      	ldr	r1, [r7, #0]
 8007e9e:	6878      	ldr	r0, [r7, #4]
 8007ea0:	4798      	blx	r3
 8007ea2:	4603      	mov	r3, r0
 8007ea4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8007ea6:	e004      	b.n	8007eb2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007ea8:	6839      	ldr	r1, [r7, #0]
 8007eaa:	6878      	ldr	r0, [r7, #4]
 8007eac:	f000 fc03 	bl	80086b6 <USBD_CtlError>
              break;
 8007eb0:	e000      	b.n	8007eb4 <USBD_StdEPReq+0x1c8>
              break;
 8007eb2:	bf00      	nop
          }
          break;
 8007eb4:	e0ab      	b.n	800800e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007ebc:	b2db      	uxtb	r3, r3
 8007ebe:	2b02      	cmp	r3, #2
 8007ec0:	d002      	beq.n	8007ec8 <USBD_StdEPReq+0x1dc>
 8007ec2:	2b03      	cmp	r3, #3
 8007ec4:	d032      	beq.n	8007f2c <USBD_StdEPReq+0x240>
 8007ec6:	e097      	b.n	8007ff8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007ec8:	7bbb      	ldrb	r3, [r7, #14]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d007      	beq.n	8007ede <USBD_StdEPReq+0x1f2>
 8007ece:	7bbb      	ldrb	r3, [r7, #14]
 8007ed0:	2b80      	cmp	r3, #128	@ 0x80
 8007ed2:	d004      	beq.n	8007ede <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007ed4:	6839      	ldr	r1, [r7, #0]
 8007ed6:	6878      	ldr	r0, [r7, #4]
 8007ed8:	f000 fbed 	bl	80086b6 <USBD_CtlError>
                break;
 8007edc:	e091      	b.n	8008002 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007ede:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	da0b      	bge.n	8007efe <USBD_StdEPReq+0x212>
 8007ee6:	7bbb      	ldrb	r3, [r7, #14]
 8007ee8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007eec:	4613      	mov	r3, r2
 8007eee:	009b      	lsls	r3, r3, #2
 8007ef0:	4413      	add	r3, r2
 8007ef2:	009b      	lsls	r3, r3, #2
 8007ef4:	3310      	adds	r3, #16
 8007ef6:	687a      	ldr	r2, [r7, #4]
 8007ef8:	4413      	add	r3, r2
 8007efa:	3304      	adds	r3, #4
 8007efc:	e00b      	b.n	8007f16 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007efe:	7bbb      	ldrb	r3, [r7, #14]
 8007f00:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007f04:	4613      	mov	r3, r2
 8007f06:	009b      	lsls	r3, r3, #2
 8007f08:	4413      	add	r3, r2
 8007f0a:	009b      	lsls	r3, r3, #2
 8007f0c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007f10:	687a      	ldr	r2, [r7, #4]
 8007f12:	4413      	add	r3, r2
 8007f14:	3304      	adds	r3, #4
 8007f16:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007f18:	68bb      	ldr	r3, [r7, #8]
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007f1e:	68bb      	ldr	r3, [r7, #8]
 8007f20:	2202      	movs	r2, #2
 8007f22:	4619      	mov	r1, r3
 8007f24:	6878      	ldr	r0, [r7, #4]
 8007f26:	f000 fc37 	bl	8008798 <USBD_CtlSendData>
              break;
 8007f2a:	e06a      	b.n	8008002 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007f2c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	da11      	bge.n	8007f58 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007f34:	7bbb      	ldrb	r3, [r7, #14]
 8007f36:	f003 020f 	and.w	r2, r3, #15
 8007f3a:	6879      	ldr	r1, [r7, #4]
 8007f3c:	4613      	mov	r3, r2
 8007f3e:	009b      	lsls	r3, r3, #2
 8007f40:	4413      	add	r3, r2
 8007f42:	009b      	lsls	r3, r3, #2
 8007f44:	440b      	add	r3, r1
 8007f46:	3324      	adds	r3, #36	@ 0x24
 8007f48:	881b      	ldrh	r3, [r3, #0]
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d117      	bne.n	8007f7e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007f4e:	6839      	ldr	r1, [r7, #0]
 8007f50:	6878      	ldr	r0, [r7, #4]
 8007f52:	f000 fbb0 	bl	80086b6 <USBD_CtlError>
                  break;
 8007f56:	e054      	b.n	8008002 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007f58:	7bbb      	ldrb	r3, [r7, #14]
 8007f5a:	f003 020f 	and.w	r2, r3, #15
 8007f5e:	6879      	ldr	r1, [r7, #4]
 8007f60:	4613      	mov	r3, r2
 8007f62:	009b      	lsls	r3, r3, #2
 8007f64:	4413      	add	r3, r2
 8007f66:	009b      	lsls	r3, r3, #2
 8007f68:	440b      	add	r3, r1
 8007f6a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007f6e:	881b      	ldrh	r3, [r3, #0]
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d104      	bne.n	8007f7e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007f74:	6839      	ldr	r1, [r7, #0]
 8007f76:	6878      	ldr	r0, [r7, #4]
 8007f78:	f000 fb9d 	bl	80086b6 <USBD_CtlError>
                  break;
 8007f7c:	e041      	b.n	8008002 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007f7e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	da0b      	bge.n	8007f9e <USBD_StdEPReq+0x2b2>
 8007f86:	7bbb      	ldrb	r3, [r7, #14]
 8007f88:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007f8c:	4613      	mov	r3, r2
 8007f8e:	009b      	lsls	r3, r3, #2
 8007f90:	4413      	add	r3, r2
 8007f92:	009b      	lsls	r3, r3, #2
 8007f94:	3310      	adds	r3, #16
 8007f96:	687a      	ldr	r2, [r7, #4]
 8007f98:	4413      	add	r3, r2
 8007f9a:	3304      	adds	r3, #4
 8007f9c:	e00b      	b.n	8007fb6 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007f9e:	7bbb      	ldrb	r3, [r7, #14]
 8007fa0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007fa4:	4613      	mov	r3, r2
 8007fa6:	009b      	lsls	r3, r3, #2
 8007fa8:	4413      	add	r3, r2
 8007faa:	009b      	lsls	r3, r3, #2
 8007fac:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007fb0:	687a      	ldr	r2, [r7, #4]
 8007fb2:	4413      	add	r3, r2
 8007fb4:	3304      	adds	r3, #4
 8007fb6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007fb8:	7bbb      	ldrb	r3, [r7, #14]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d002      	beq.n	8007fc4 <USBD_StdEPReq+0x2d8>
 8007fbe:	7bbb      	ldrb	r3, [r7, #14]
 8007fc0:	2b80      	cmp	r3, #128	@ 0x80
 8007fc2:	d103      	bne.n	8007fcc <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8007fc4:	68bb      	ldr	r3, [r7, #8]
 8007fc6:	2200      	movs	r2, #0
 8007fc8:	601a      	str	r2, [r3, #0]
 8007fca:	e00e      	b.n	8007fea <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007fcc:	7bbb      	ldrb	r3, [r7, #14]
 8007fce:	4619      	mov	r1, r3
 8007fd0:	6878      	ldr	r0, [r7, #4]
 8007fd2:	f001 f8b7 	bl	8009144 <USBD_LL_IsStallEP>
 8007fd6:	4603      	mov	r3, r0
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d003      	beq.n	8007fe4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8007fdc:	68bb      	ldr	r3, [r7, #8]
 8007fde:	2201      	movs	r2, #1
 8007fe0:	601a      	str	r2, [r3, #0]
 8007fe2:	e002      	b.n	8007fea <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8007fe4:	68bb      	ldr	r3, [r7, #8]
 8007fe6:	2200      	movs	r2, #0
 8007fe8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007fea:	68bb      	ldr	r3, [r7, #8]
 8007fec:	2202      	movs	r2, #2
 8007fee:	4619      	mov	r1, r3
 8007ff0:	6878      	ldr	r0, [r7, #4]
 8007ff2:	f000 fbd1 	bl	8008798 <USBD_CtlSendData>
              break;
 8007ff6:	e004      	b.n	8008002 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8007ff8:	6839      	ldr	r1, [r7, #0]
 8007ffa:	6878      	ldr	r0, [r7, #4]
 8007ffc:	f000 fb5b 	bl	80086b6 <USBD_CtlError>
              break;
 8008000:	bf00      	nop
          }
          break;
 8008002:	e004      	b.n	800800e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8008004:	6839      	ldr	r1, [r7, #0]
 8008006:	6878      	ldr	r0, [r7, #4]
 8008008:	f000 fb55 	bl	80086b6 <USBD_CtlError>
          break;
 800800c:	bf00      	nop
      }
      break;
 800800e:	e005      	b.n	800801c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8008010:	6839      	ldr	r1, [r7, #0]
 8008012:	6878      	ldr	r0, [r7, #4]
 8008014:	f000 fb4f 	bl	80086b6 <USBD_CtlError>
      break;
 8008018:	e000      	b.n	800801c <USBD_StdEPReq+0x330>
      break;
 800801a:	bf00      	nop
  }

  return ret;
 800801c:	7bfb      	ldrb	r3, [r7, #15]
}
 800801e:	4618      	mov	r0, r3
 8008020:	3710      	adds	r7, #16
 8008022:	46bd      	mov	sp, r7
 8008024:	bd80      	pop	{r7, pc}
	...

08008028 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008028:	b580      	push	{r7, lr}
 800802a:	b084      	sub	sp, #16
 800802c:	af00      	add	r7, sp, #0
 800802e:	6078      	str	r0, [r7, #4]
 8008030:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008032:	2300      	movs	r3, #0
 8008034:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008036:	2300      	movs	r3, #0
 8008038:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800803a:	2300      	movs	r3, #0
 800803c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800803e:	683b      	ldr	r3, [r7, #0]
 8008040:	885b      	ldrh	r3, [r3, #2]
 8008042:	0a1b      	lsrs	r3, r3, #8
 8008044:	b29b      	uxth	r3, r3
 8008046:	3b01      	subs	r3, #1
 8008048:	2b06      	cmp	r3, #6
 800804a:	f200 8128 	bhi.w	800829e <USBD_GetDescriptor+0x276>
 800804e:	a201      	add	r2, pc, #4	@ (adr r2, 8008054 <USBD_GetDescriptor+0x2c>)
 8008050:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008054:	08008071 	.word	0x08008071
 8008058:	08008089 	.word	0x08008089
 800805c:	080080c9 	.word	0x080080c9
 8008060:	0800829f 	.word	0x0800829f
 8008064:	0800829f 	.word	0x0800829f
 8008068:	0800823f 	.word	0x0800823f
 800806c:	0800826b 	.word	0x0800826b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	687a      	ldr	r2, [r7, #4]
 800807a:	7c12      	ldrb	r2, [r2, #16]
 800807c:	f107 0108 	add.w	r1, r7, #8
 8008080:	4610      	mov	r0, r2
 8008082:	4798      	blx	r3
 8008084:	60f8      	str	r0, [r7, #12]
      break;
 8008086:	e112      	b.n	80082ae <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	7c1b      	ldrb	r3, [r3, #16]
 800808c:	2b00      	cmp	r3, #0
 800808e:	d10d      	bne.n	80080ac <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008096:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008098:	f107 0208 	add.w	r2, r7, #8
 800809c:	4610      	mov	r0, r2
 800809e:	4798      	blx	r3
 80080a0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	3301      	adds	r3, #1
 80080a6:	2202      	movs	r2, #2
 80080a8:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80080aa:	e100      	b.n	80082ae <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80080b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080b4:	f107 0208 	add.w	r2, r7, #8
 80080b8:	4610      	mov	r0, r2
 80080ba:	4798      	blx	r3
 80080bc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	3301      	adds	r3, #1
 80080c2:	2202      	movs	r2, #2
 80080c4:	701a      	strb	r2, [r3, #0]
      break;
 80080c6:	e0f2      	b.n	80082ae <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80080c8:	683b      	ldr	r3, [r7, #0]
 80080ca:	885b      	ldrh	r3, [r3, #2]
 80080cc:	b2db      	uxtb	r3, r3
 80080ce:	2b05      	cmp	r3, #5
 80080d0:	f200 80ac 	bhi.w	800822c <USBD_GetDescriptor+0x204>
 80080d4:	a201      	add	r2, pc, #4	@ (adr r2, 80080dc <USBD_GetDescriptor+0xb4>)
 80080d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080da:	bf00      	nop
 80080dc:	080080f5 	.word	0x080080f5
 80080e0:	08008129 	.word	0x08008129
 80080e4:	0800815d 	.word	0x0800815d
 80080e8:	08008191 	.word	0x08008191
 80080ec:	080081c5 	.word	0x080081c5
 80080f0:	080081f9 	.word	0x080081f9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80080fa:	685b      	ldr	r3, [r3, #4]
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d00b      	beq.n	8008118 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008106:	685b      	ldr	r3, [r3, #4]
 8008108:	687a      	ldr	r2, [r7, #4]
 800810a:	7c12      	ldrb	r2, [r2, #16]
 800810c:	f107 0108 	add.w	r1, r7, #8
 8008110:	4610      	mov	r0, r2
 8008112:	4798      	blx	r3
 8008114:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008116:	e091      	b.n	800823c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008118:	6839      	ldr	r1, [r7, #0]
 800811a:	6878      	ldr	r0, [r7, #4]
 800811c:	f000 facb 	bl	80086b6 <USBD_CtlError>
            err++;
 8008120:	7afb      	ldrb	r3, [r7, #11]
 8008122:	3301      	adds	r3, #1
 8008124:	72fb      	strb	r3, [r7, #11]
          break;
 8008126:	e089      	b.n	800823c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800812e:	689b      	ldr	r3, [r3, #8]
 8008130:	2b00      	cmp	r3, #0
 8008132:	d00b      	beq.n	800814c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800813a:	689b      	ldr	r3, [r3, #8]
 800813c:	687a      	ldr	r2, [r7, #4]
 800813e:	7c12      	ldrb	r2, [r2, #16]
 8008140:	f107 0108 	add.w	r1, r7, #8
 8008144:	4610      	mov	r0, r2
 8008146:	4798      	blx	r3
 8008148:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800814a:	e077      	b.n	800823c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800814c:	6839      	ldr	r1, [r7, #0]
 800814e:	6878      	ldr	r0, [r7, #4]
 8008150:	f000 fab1 	bl	80086b6 <USBD_CtlError>
            err++;
 8008154:	7afb      	ldrb	r3, [r7, #11]
 8008156:	3301      	adds	r3, #1
 8008158:	72fb      	strb	r3, [r7, #11]
          break;
 800815a:	e06f      	b.n	800823c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008162:	68db      	ldr	r3, [r3, #12]
 8008164:	2b00      	cmp	r3, #0
 8008166:	d00b      	beq.n	8008180 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800816e:	68db      	ldr	r3, [r3, #12]
 8008170:	687a      	ldr	r2, [r7, #4]
 8008172:	7c12      	ldrb	r2, [r2, #16]
 8008174:	f107 0108 	add.w	r1, r7, #8
 8008178:	4610      	mov	r0, r2
 800817a:	4798      	blx	r3
 800817c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800817e:	e05d      	b.n	800823c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008180:	6839      	ldr	r1, [r7, #0]
 8008182:	6878      	ldr	r0, [r7, #4]
 8008184:	f000 fa97 	bl	80086b6 <USBD_CtlError>
            err++;
 8008188:	7afb      	ldrb	r3, [r7, #11]
 800818a:	3301      	adds	r3, #1
 800818c:	72fb      	strb	r3, [r7, #11]
          break;
 800818e:	e055      	b.n	800823c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008196:	691b      	ldr	r3, [r3, #16]
 8008198:	2b00      	cmp	r3, #0
 800819a:	d00b      	beq.n	80081b4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80081a2:	691b      	ldr	r3, [r3, #16]
 80081a4:	687a      	ldr	r2, [r7, #4]
 80081a6:	7c12      	ldrb	r2, [r2, #16]
 80081a8:	f107 0108 	add.w	r1, r7, #8
 80081ac:	4610      	mov	r0, r2
 80081ae:	4798      	blx	r3
 80081b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80081b2:	e043      	b.n	800823c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80081b4:	6839      	ldr	r1, [r7, #0]
 80081b6:	6878      	ldr	r0, [r7, #4]
 80081b8:	f000 fa7d 	bl	80086b6 <USBD_CtlError>
            err++;
 80081bc:	7afb      	ldrb	r3, [r7, #11]
 80081be:	3301      	adds	r3, #1
 80081c0:	72fb      	strb	r3, [r7, #11]
          break;
 80081c2:	e03b      	b.n	800823c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80081ca:	695b      	ldr	r3, [r3, #20]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d00b      	beq.n	80081e8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80081d6:	695b      	ldr	r3, [r3, #20]
 80081d8:	687a      	ldr	r2, [r7, #4]
 80081da:	7c12      	ldrb	r2, [r2, #16]
 80081dc:	f107 0108 	add.w	r1, r7, #8
 80081e0:	4610      	mov	r0, r2
 80081e2:	4798      	blx	r3
 80081e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80081e6:	e029      	b.n	800823c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80081e8:	6839      	ldr	r1, [r7, #0]
 80081ea:	6878      	ldr	r0, [r7, #4]
 80081ec:	f000 fa63 	bl	80086b6 <USBD_CtlError>
            err++;
 80081f0:	7afb      	ldrb	r3, [r7, #11]
 80081f2:	3301      	adds	r3, #1
 80081f4:	72fb      	strb	r3, [r7, #11]
          break;
 80081f6:	e021      	b.n	800823c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80081fe:	699b      	ldr	r3, [r3, #24]
 8008200:	2b00      	cmp	r3, #0
 8008202:	d00b      	beq.n	800821c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800820a:	699b      	ldr	r3, [r3, #24]
 800820c:	687a      	ldr	r2, [r7, #4]
 800820e:	7c12      	ldrb	r2, [r2, #16]
 8008210:	f107 0108 	add.w	r1, r7, #8
 8008214:	4610      	mov	r0, r2
 8008216:	4798      	blx	r3
 8008218:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800821a:	e00f      	b.n	800823c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800821c:	6839      	ldr	r1, [r7, #0]
 800821e:	6878      	ldr	r0, [r7, #4]
 8008220:	f000 fa49 	bl	80086b6 <USBD_CtlError>
            err++;
 8008224:	7afb      	ldrb	r3, [r7, #11]
 8008226:	3301      	adds	r3, #1
 8008228:	72fb      	strb	r3, [r7, #11]
          break;
 800822a:	e007      	b.n	800823c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800822c:	6839      	ldr	r1, [r7, #0]
 800822e:	6878      	ldr	r0, [r7, #4]
 8008230:	f000 fa41 	bl	80086b6 <USBD_CtlError>
          err++;
 8008234:	7afb      	ldrb	r3, [r7, #11]
 8008236:	3301      	adds	r3, #1
 8008238:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800823a:	bf00      	nop
      }
      break;
 800823c:	e037      	b.n	80082ae <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	7c1b      	ldrb	r3, [r3, #16]
 8008242:	2b00      	cmp	r3, #0
 8008244:	d109      	bne.n	800825a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800824c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800824e:	f107 0208 	add.w	r2, r7, #8
 8008252:	4610      	mov	r0, r2
 8008254:	4798      	blx	r3
 8008256:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008258:	e029      	b.n	80082ae <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800825a:	6839      	ldr	r1, [r7, #0]
 800825c:	6878      	ldr	r0, [r7, #4]
 800825e:	f000 fa2a 	bl	80086b6 <USBD_CtlError>
        err++;
 8008262:	7afb      	ldrb	r3, [r7, #11]
 8008264:	3301      	adds	r3, #1
 8008266:	72fb      	strb	r3, [r7, #11]
      break;
 8008268:	e021      	b.n	80082ae <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	7c1b      	ldrb	r3, [r3, #16]
 800826e:	2b00      	cmp	r3, #0
 8008270:	d10d      	bne.n	800828e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008278:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800827a:	f107 0208 	add.w	r2, r7, #8
 800827e:	4610      	mov	r0, r2
 8008280:	4798      	blx	r3
 8008282:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	3301      	adds	r3, #1
 8008288:	2207      	movs	r2, #7
 800828a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800828c:	e00f      	b.n	80082ae <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800828e:	6839      	ldr	r1, [r7, #0]
 8008290:	6878      	ldr	r0, [r7, #4]
 8008292:	f000 fa10 	bl	80086b6 <USBD_CtlError>
        err++;
 8008296:	7afb      	ldrb	r3, [r7, #11]
 8008298:	3301      	adds	r3, #1
 800829a:	72fb      	strb	r3, [r7, #11]
      break;
 800829c:	e007      	b.n	80082ae <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800829e:	6839      	ldr	r1, [r7, #0]
 80082a0:	6878      	ldr	r0, [r7, #4]
 80082a2:	f000 fa08 	bl	80086b6 <USBD_CtlError>
      err++;
 80082a6:	7afb      	ldrb	r3, [r7, #11]
 80082a8:	3301      	adds	r3, #1
 80082aa:	72fb      	strb	r3, [r7, #11]
      break;
 80082ac:	bf00      	nop
  }

  if (err != 0U)
 80082ae:	7afb      	ldrb	r3, [r7, #11]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d11e      	bne.n	80082f2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80082b4:	683b      	ldr	r3, [r7, #0]
 80082b6:	88db      	ldrh	r3, [r3, #6]
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d016      	beq.n	80082ea <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80082bc:	893b      	ldrh	r3, [r7, #8]
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d00e      	beq.n	80082e0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80082c2:	683b      	ldr	r3, [r7, #0]
 80082c4:	88da      	ldrh	r2, [r3, #6]
 80082c6:	893b      	ldrh	r3, [r7, #8]
 80082c8:	4293      	cmp	r3, r2
 80082ca:	bf28      	it	cs
 80082cc:	4613      	movcs	r3, r2
 80082ce:	b29b      	uxth	r3, r3
 80082d0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80082d2:	893b      	ldrh	r3, [r7, #8]
 80082d4:	461a      	mov	r2, r3
 80082d6:	68f9      	ldr	r1, [r7, #12]
 80082d8:	6878      	ldr	r0, [r7, #4]
 80082da:	f000 fa5d 	bl	8008798 <USBD_CtlSendData>
 80082de:	e009      	b.n	80082f4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80082e0:	6839      	ldr	r1, [r7, #0]
 80082e2:	6878      	ldr	r0, [r7, #4]
 80082e4:	f000 f9e7 	bl	80086b6 <USBD_CtlError>
 80082e8:	e004      	b.n	80082f4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80082ea:	6878      	ldr	r0, [r7, #4]
 80082ec:	f000 faae 	bl	800884c <USBD_CtlSendStatus>
 80082f0:	e000      	b.n	80082f4 <USBD_GetDescriptor+0x2cc>
    return;
 80082f2:	bf00      	nop
  }
}
 80082f4:	3710      	adds	r7, #16
 80082f6:	46bd      	mov	sp, r7
 80082f8:	bd80      	pop	{r7, pc}
 80082fa:	bf00      	nop

080082fc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80082fc:	b580      	push	{r7, lr}
 80082fe:	b084      	sub	sp, #16
 8008300:	af00      	add	r7, sp, #0
 8008302:	6078      	str	r0, [r7, #4]
 8008304:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008306:	683b      	ldr	r3, [r7, #0]
 8008308:	889b      	ldrh	r3, [r3, #4]
 800830a:	2b00      	cmp	r3, #0
 800830c:	d131      	bne.n	8008372 <USBD_SetAddress+0x76>
 800830e:	683b      	ldr	r3, [r7, #0]
 8008310:	88db      	ldrh	r3, [r3, #6]
 8008312:	2b00      	cmp	r3, #0
 8008314:	d12d      	bne.n	8008372 <USBD_SetAddress+0x76>
 8008316:	683b      	ldr	r3, [r7, #0]
 8008318:	885b      	ldrh	r3, [r3, #2]
 800831a:	2b7f      	cmp	r3, #127	@ 0x7f
 800831c:	d829      	bhi.n	8008372 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800831e:	683b      	ldr	r3, [r7, #0]
 8008320:	885b      	ldrh	r3, [r3, #2]
 8008322:	b2db      	uxtb	r3, r3
 8008324:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008328:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008330:	b2db      	uxtb	r3, r3
 8008332:	2b03      	cmp	r3, #3
 8008334:	d104      	bne.n	8008340 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008336:	6839      	ldr	r1, [r7, #0]
 8008338:	6878      	ldr	r0, [r7, #4]
 800833a:	f000 f9bc 	bl	80086b6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800833e:	e01d      	b.n	800837c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	7bfa      	ldrb	r2, [r7, #15]
 8008344:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008348:	7bfb      	ldrb	r3, [r7, #15]
 800834a:	4619      	mov	r1, r3
 800834c:	6878      	ldr	r0, [r7, #4]
 800834e:	f000 ff25 	bl	800919c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008352:	6878      	ldr	r0, [r7, #4]
 8008354:	f000 fa7a 	bl	800884c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008358:	7bfb      	ldrb	r3, [r7, #15]
 800835a:	2b00      	cmp	r3, #0
 800835c:	d004      	beq.n	8008368 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	2202      	movs	r2, #2
 8008362:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008366:	e009      	b.n	800837c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	2201      	movs	r2, #1
 800836c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008370:	e004      	b.n	800837c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008372:	6839      	ldr	r1, [r7, #0]
 8008374:	6878      	ldr	r0, [r7, #4]
 8008376:	f000 f99e 	bl	80086b6 <USBD_CtlError>
  }
}
 800837a:	bf00      	nop
 800837c:	bf00      	nop
 800837e:	3710      	adds	r7, #16
 8008380:	46bd      	mov	sp, r7
 8008382:	bd80      	pop	{r7, pc}

08008384 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008384:	b580      	push	{r7, lr}
 8008386:	b084      	sub	sp, #16
 8008388:	af00      	add	r7, sp, #0
 800838a:	6078      	str	r0, [r7, #4]
 800838c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800838e:	2300      	movs	r3, #0
 8008390:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008392:	683b      	ldr	r3, [r7, #0]
 8008394:	885b      	ldrh	r3, [r3, #2]
 8008396:	b2da      	uxtb	r2, r3
 8008398:	4b4e      	ldr	r3, [pc, #312]	@ (80084d4 <USBD_SetConfig+0x150>)
 800839a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800839c:	4b4d      	ldr	r3, [pc, #308]	@ (80084d4 <USBD_SetConfig+0x150>)
 800839e:	781b      	ldrb	r3, [r3, #0]
 80083a0:	2b01      	cmp	r3, #1
 80083a2:	d905      	bls.n	80083b0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80083a4:	6839      	ldr	r1, [r7, #0]
 80083a6:	6878      	ldr	r0, [r7, #4]
 80083a8:	f000 f985 	bl	80086b6 <USBD_CtlError>
    return USBD_FAIL;
 80083ac:	2303      	movs	r3, #3
 80083ae:	e08c      	b.n	80084ca <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80083b6:	b2db      	uxtb	r3, r3
 80083b8:	2b02      	cmp	r3, #2
 80083ba:	d002      	beq.n	80083c2 <USBD_SetConfig+0x3e>
 80083bc:	2b03      	cmp	r3, #3
 80083be:	d029      	beq.n	8008414 <USBD_SetConfig+0x90>
 80083c0:	e075      	b.n	80084ae <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80083c2:	4b44      	ldr	r3, [pc, #272]	@ (80084d4 <USBD_SetConfig+0x150>)
 80083c4:	781b      	ldrb	r3, [r3, #0]
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d020      	beq.n	800840c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80083ca:	4b42      	ldr	r3, [pc, #264]	@ (80084d4 <USBD_SetConfig+0x150>)
 80083cc:	781b      	ldrb	r3, [r3, #0]
 80083ce:	461a      	mov	r2, r3
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80083d4:	4b3f      	ldr	r3, [pc, #252]	@ (80084d4 <USBD_SetConfig+0x150>)
 80083d6:	781b      	ldrb	r3, [r3, #0]
 80083d8:	4619      	mov	r1, r3
 80083da:	6878      	ldr	r0, [r7, #4]
 80083dc:	f7fe ffe3 	bl	80073a6 <USBD_SetClassConfig>
 80083e0:	4603      	mov	r3, r0
 80083e2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80083e4:	7bfb      	ldrb	r3, [r7, #15]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d008      	beq.n	80083fc <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80083ea:	6839      	ldr	r1, [r7, #0]
 80083ec:	6878      	ldr	r0, [r7, #4]
 80083ee:	f000 f962 	bl	80086b6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	2202      	movs	r2, #2
 80083f6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80083fa:	e065      	b.n	80084c8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80083fc:	6878      	ldr	r0, [r7, #4]
 80083fe:	f000 fa25 	bl	800884c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	2203      	movs	r2, #3
 8008406:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800840a:	e05d      	b.n	80084c8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800840c:	6878      	ldr	r0, [r7, #4]
 800840e:	f000 fa1d 	bl	800884c <USBD_CtlSendStatus>
      break;
 8008412:	e059      	b.n	80084c8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008414:	4b2f      	ldr	r3, [pc, #188]	@ (80084d4 <USBD_SetConfig+0x150>)
 8008416:	781b      	ldrb	r3, [r3, #0]
 8008418:	2b00      	cmp	r3, #0
 800841a:	d112      	bne.n	8008442 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	2202      	movs	r2, #2
 8008420:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8008424:	4b2b      	ldr	r3, [pc, #172]	@ (80084d4 <USBD_SetConfig+0x150>)
 8008426:	781b      	ldrb	r3, [r3, #0]
 8008428:	461a      	mov	r2, r3
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800842e:	4b29      	ldr	r3, [pc, #164]	@ (80084d4 <USBD_SetConfig+0x150>)
 8008430:	781b      	ldrb	r3, [r3, #0]
 8008432:	4619      	mov	r1, r3
 8008434:	6878      	ldr	r0, [r7, #4]
 8008436:	f7fe ffd2 	bl	80073de <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800843a:	6878      	ldr	r0, [r7, #4]
 800843c:	f000 fa06 	bl	800884c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008440:	e042      	b.n	80084c8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8008442:	4b24      	ldr	r3, [pc, #144]	@ (80084d4 <USBD_SetConfig+0x150>)
 8008444:	781b      	ldrb	r3, [r3, #0]
 8008446:	461a      	mov	r2, r3
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	685b      	ldr	r3, [r3, #4]
 800844c:	429a      	cmp	r2, r3
 800844e:	d02a      	beq.n	80084a6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	685b      	ldr	r3, [r3, #4]
 8008454:	b2db      	uxtb	r3, r3
 8008456:	4619      	mov	r1, r3
 8008458:	6878      	ldr	r0, [r7, #4]
 800845a:	f7fe ffc0 	bl	80073de <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800845e:	4b1d      	ldr	r3, [pc, #116]	@ (80084d4 <USBD_SetConfig+0x150>)
 8008460:	781b      	ldrb	r3, [r3, #0]
 8008462:	461a      	mov	r2, r3
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008468:	4b1a      	ldr	r3, [pc, #104]	@ (80084d4 <USBD_SetConfig+0x150>)
 800846a:	781b      	ldrb	r3, [r3, #0]
 800846c:	4619      	mov	r1, r3
 800846e:	6878      	ldr	r0, [r7, #4]
 8008470:	f7fe ff99 	bl	80073a6 <USBD_SetClassConfig>
 8008474:	4603      	mov	r3, r0
 8008476:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008478:	7bfb      	ldrb	r3, [r7, #15]
 800847a:	2b00      	cmp	r3, #0
 800847c:	d00f      	beq.n	800849e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800847e:	6839      	ldr	r1, [r7, #0]
 8008480:	6878      	ldr	r0, [r7, #4]
 8008482:	f000 f918 	bl	80086b6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	685b      	ldr	r3, [r3, #4]
 800848a:	b2db      	uxtb	r3, r3
 800848c:	4619      	mov	r1, r3
 800848e:	6878      	ldr	r0, [r7, #4]
 8008490:	f7fe ffa5 	bl	80073de <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	2202      	movs	r2, #2
 8008498:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800849c:	e014      	b.n	80084c8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800849e:	6878      	ldr	r0, [r7, #4]
 80084a0:	f000 f9d4 	bl	800884c <USBD_CtlSendStatus>
      break;
 80084a4:	e010      	b.n	80084c8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80084a6:	6878      	ldr	r0, [r7, #4]
 80084a8:	f000 f9d0 	bl	800884c <USBD_CtlSendStatus>
      break;
 80084ac:	e00c      	b.n	80084c8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80084ae:	6839      	ldr	r1, [r7, #0]
 80084b0:	6878      	ldr	r0, [r7, #4]
 80084b2:	f000 f900 	bl	80086b6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80084b6:	4b07      	ldr	r3, [pc, #28]	@ (80084d4 <USBD_SetConfig+0x150>)
 80084b8:	781b      	ldrb	r3, [r3, #0]
 80084ba:	4619      	mov	r1, r3
 80084bc:	6878      	ldr	r0, [r7, #4]
 80084be:	f7fe ff8e 	bl	80073de <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80084c2:	2303      	movs	r3, #3
 80084c4:	73fb      	strb	r3, [r7, #15]
      break;
 80084c6:	bf00      	nop
  }

  return ret;
 80084c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80084ca:	4618      	mov	r0, r3
 80084cc:	3710      	adds	r7, #16
 80084ce:	46bd      	mov	sp, r7
 80084d0:	bd80      	pop	{r7, pc}
 80084d2:	bf00      	nop
 80084d4:	20000918 	.word	0x20000918

080084d8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80084d8:	b580      	push	{r7, lr}
 80084da:	b082      	sub	sp, #8
 80084dc:	af00      	add	r7, sp, #0
 80084de:	6078      	str	r0, [r7, #4]
 80084e0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80084e2:	683b      	ldr	r3, [r7, #0]
 80084e4:	88db      	ldrh	r3, [r3, #6]
 80084e6:	2b01      	cmp	r3, #1
 80084e8:	d004      	beq.n	80084f4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80084ea:	6839      	ldr	r1, [r7, #0]
 80084ec:	6878      	ldr	r0, [r7, #4]
 80084ee:	f000 f8e2 	bl	80086b6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80084f2:	e023      	b.n	800853c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80084fa:	b2db      	uxtb	r3, r3
 80084fc:	2b02      	cmp	r3, #2
 80084fe:	dc02      	bgt.n	8008506 <USBD_GetConfig+0x2e>
 8008500:	2b00      	cmp	r3, #0
 8008502:	dc03      	bgt.n	800850c <USBD_GetConfig+0x34>
 8008504:	e015      	b.n	8008532 <USBD_GetConfig+0x5a>
 8008506:	2b03      	cmp	r3, #3
 8008508:	d00b      	beq.n	8008522 <USBD_GetConfig+0x4a>
 800850a:	e012      	b.n	8008532 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	2200      	movs	r2, #0
 8008510:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	3308      	adds	r3, #8
 8008516:	2201      	movs	r2, #1
 8008518:	4619      	mov	r1, r3
 800851a:	6878      	ldr	r0, [r7, #4]
 800851c:	f000 f93c 	bl	8008798 <USBD_CtlSendData>
        break;
 8008520:	e00c      	b.n	800853c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	3304      	adds	r3, #4
 8008526:	2201      	movs	r2, #1
 8008528:	4619      	mov	r1, r3
 800852a:	6878      	ldr	r0, [r7, #4]
 800852c:	f000 f934 	bl	8008798 <USBD_CtlSendData>
        break;
 8008530:	e004      	b.n	800853c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008532:	6839      	ldr	r1, [r7, #0]
 8008534:	6878      	ldr	r0, [r7, #4]
 8008536:	f000 f8be 	bl	80086b6 <USBD_CtlError>
        break;
 800853a:	bf00      	nop
}
 800853c:	bf00      	nop
 800853e:	3708      	adds	r7, #8
 8008540:	46bd      	mov	sp, r7
 8008542:	bd80      	pop	{r7, pc}

08008544 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008544:	b580      	push	{r7, lr}
 8008546:	b082      	sub	sp, #8
 8008548:	af00      	add	r7, sp, #0
 800854a:	6078      	str	r0, [r7, #4]
 800854c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008554:	b2db      	uxtb	r3, r3
 8008556:	3b01      	subs	r3, #1
 8008558:	2b02      	cmp	r3, #2
 800855a:	d81e      	bhi.n	800859a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800855c:	683b      	ldr	r3, [r7, #0]
 800855e:	88db      	ldrh	r3, [r3, #6]
 8008560:	2b02      	cmp	r3, #2
 8008562:	d004      	beq.n	800856e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008564:	6839      	ldr	r1, [r7, #0]
 8008566:	6878      	ldr	r0, [r7, #4]
 8008568:	f000 f8a5 	bl	80086b6 <USBD_CtlError>
        break;
 800856c:	e01a      	b.n	80085a4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	2201      	movs	r2, #1
 8008572:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800857a:	2b00      	cmp	r3, #0
 800857c:	d005      	beq.n	800858a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	68db      	ldr	r3, [r3, #12]
 8008582:	f043 0202 	orr.w	r2, r3, #2
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	330c      	adds	r3, #12
 800858e:	2202      	movs	r2, #2
 8008590:	4619      	mov	r1, r3
 8008592:	6878      	ldr	r0, [r7, #4]
 8008594:	f000 f900 	bl	8008798 <USBD_CtlSendData>
      break;
 8008598:	e004      	b.n	80085a4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800859a:	6839      	ldr	r1, [r7, #0]
 800859c:	6878      	ldr	r0, [r7, #4]
 800859e:	f000 f88a 	bl	80086b6 <USBD_CtlError>
      break;
 80085a2:	bf00      	nop
  }
}
 80085a4:	bf00      	nop
 80085a6:	3708      	adds	r7, #8
 80085a8:	46bd      	mov	sp, r7
 80085aa:	bd80      	pop	{r7, pc}

080085ac <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80085ac:	b580      	push	{r7, lr}
 80085ae:	b082      	sub	sp, #8
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	6078      	str	r0, [r7, #4]
 80085b4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80085b6:	683b      	ldr	r3, [r7, #0]
 80085b8:	885b      	ldrh	r3, [r3, #2]
 80085ba:	2b01      	cmp	r3, #1
 80085bc:	d107      	bne.n	80085ce <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	2201      	movs	r2, #1
 80085c2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80085c6:	6878      	ldr	r0, [r7, #4]
 80085c8:	f000 f940 	bl	800884c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80085cc:	e013      	b.n	80085f6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80085ce:	683b      	ldr	r3, [r7, #0]
 80085d0:	885b      	ldrh	r3, [r3, #2]
 80085d2:	2b02      	cmp	r3, #2
 80085d4:	d10b      	bne.n	80085ee <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80085d6:	683b      	ldr	r3, [r7, #0]
 80085d8:	889b      	ldrh	r3, [r3, #4]
 80085da:	0a1b      	lsrs	r3, r3, #8
 80085dc:	b29b      	uxth	r3, r3
 80085de:	b2da      	uxtb	r2, r3
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80085e6:	6878      	ldr	r0, [r7, #4]
 80085e8:	f000 f930 	bl	800884c <USBD_CtlSendStatus>
}
 80085ec:	e003      	b.n	80085f6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80085ee:	6839      	ldr	r1, [r7, #0]
 80085f0:	6878      	ldr	r0, [r7, #4]
 80085f2:	f000 f860 	bl	80086b6 <USBD_CtlError>
}
 80085f6:	bf00      	nop
 80085f8:	3708      	adds	r7, #8
 80085fa:	46bd      	mov	sp, r7
 80085fc:	bd80      	pop	{r7, pc}

080085fe <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80085fe:	b580      	push	{r7, lr}
 8008600:	b082      	sub	sp, #8
 8008602:	af00      	add	r7, sp, #0
 8008604:	6078      	str	r0, [r7, #4]
 8008606:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800860e:	b2db      	uxtb	r3, r3
 8008610:	3b01      	subs	r3, #1
 8008612:	2b02      	cmp	r3, #2
 8008614:	d80b      	bhi.n	800862e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008616:	683b      	ldr	r3, [r7, #0]
 8008618:	885b      	ldrh	r3, [r3, #2]
 800861a:	2b01      	cmp	r3, #1
 800861c:	d10c      	bne.n	8008638 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	2200      	movs	r2, #0
 8008622:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008626:	6878      	ldr	r0, [r7, #4]
 8008628:	f000 f910 	bl	800884c <USBD_CtlSendStatus>
      }
      break;
 800862c:	e004      	b.n	8008638 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800862e:	6839      	ldr	r1, [r7, #0]
 8008630:	6878      	ldr	r0, [r7, #4]
 8008632:	f000 f840 	bl	80086b6 <USBD_CtlError>
      break;
 8008636:	e000      	b.n	800863a <USBD_ClrFeature+0x3c>
      break;
 8008638:	bf00      	nop
  }
}
 800863a:	bf00      	nop
 800863c:	3708      	adds	r7, #8
 800863e:	46bd      	mov	sp, r7
 8008640:	bd80      	pop	{r7, pc}

08008642 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008642:	b580      	push	{r7, lr}
 8008644:	b084      	sub	sp, #16
 8008646:	af00      	add	r7, sp, #0
 8008648:	6078      	str	r0, [r7, #4]
 800864a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800864c:	683b      	ldr	r3, [r7, #0]
 800864e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	781a      	ldrb	r2, [r3, #0]
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	3301      	adds	r3, #1
 800865c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	781a      	ldrb	r2, [r3, #0]
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	3301      	adds	r3, #1
 800866a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800866c:	68f8      	ldr	r0, [r7, #12]
 800866e:	f7ff fa40 	bl	8007af2 <SWAPBYTE>
 8008672:	4603      	mov	r3, r0
 8008674:	461a      	mov	r2, r3
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	3301      	adds	r3, #1
 800867e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	3301      	adds	r3, #1
 8008684:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008686:	68f8      	ldr	r0, [r7, #12]
 8008688:	f7ff fa33 	bl	8007af2 <SWAPBYTE>
 800868c:	4603      	mov	r3, r0
 800868e:	461a      	mov	r2, r3
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	3301      	adds	r3, #1
 8008698:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	3301      	adds	r3, #1
 800869e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80086a0:	68f8      	ldr	r0, [r7, #12]
 80086a2:	f7ff fa26 	bl	8007af2 <SWAPBYTE>
 80086a6:	4603      	mov	r3, r0
 80086a8:	461a      	mov	r2, r3
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	80da      	strh	r2, [r3, #6]
}
 80086ae:	bf00      	nop
 80086b0:	3710      	adds	r7, #16
 80086b2:	46bd      	mov	sp, r7
 80086b4:	bd80      	pop	{r7, pc}

080086b6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80086b6:	b580      	push	{r7, lr}
 80086b8:	b082      	sub	sp, #8
 80086ba:	af00      	add	r7, sp, #0
 80086bc:	6078      	str	r0, [r7, #4]
 80086be:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80086c0:	2180      	movs	r1, #128	@ 0x80
 80086c2:	6878      	ldr	r0, [r7, #4]
 80086c4:	f000 fd00 	bl	80090c8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80086c8:	2100      	movs	r1, #0
 80086ca:	6878      	ldr	r0, [r7, #4]
 80086cc:	f000 fcfc 	bl	80090c8 <USBD_LL_StallEP>
}
 80086d0:	bf00      	nop
 80086d2:	3708      	adds	r7, #8
 80086d4:	46bd      	mov	sp, r7
 80086d6:	bd80      	pop	{r7, pc}

080086d8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80086d8:	b580      	push	{r7, lr}
 80086da:	b086      	sub	sp, #24
 80086dc:	af00      	add	r7, sp, #0
 80086de:	60f8      	str	r0, [r7, #12]
 80086e0:	60b9      	str	r1, [r7, #8]
 80086e2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80086e4:	2300      	movs	r3, #0
 80086e6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d036      	beq.n	800875c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80086f2:	6938      	ldr	r0, [r7, #16]
 80086f4:	f000 f836 	bl	8008764 <USBD_GetLen>
 80086f8:	4603      	mov	r3, r0
 80086fa:	3301      	adds	r3, #1
 80086fc:	b29b      	uxth	r3, r3
 80086fe:	005b      	lsls	r3, r3, #1
 8008700:	b29a      	uxth	r2, r3
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008706:	7dfb      	ldrb	r3, [r7, #23]
 8008708:	68ba      	ldr	r2, [r7, #8]
 800870a:	4413      	add	r3, r2
 800870c:	687a      	ldr	r2, [r7, #4]
 800870e:	7812      	ldrb	r2, [r2, #0]
 8008710:	701a      	strb	r2, [r3, #0]
  idx++;
 8008712:	7dfb      	ldrb	r3, [r7, #23]
 8008714:	3301      	adds	r3, #1
 8008716:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008718:	7dfb      	ldrb	r3, [r7, #23]
 800871a:	68ba      	ldr	r2, [r7, #8]
 800871c:	4413      	add	r3, r2
 800871e:	2203      	movs	r2, #3
 8008720:	701a      	strb	r2, [r3, #0]
  idx++;
 8008722:	7dfb      	ldrb	r3, [r7, #23]
 8008724:	3301      	adds	r3, #1
 8008726:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008728:	e013      	b.n	8008752 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800872a:	7dfb      	ldrb	r3, [r7, #23]
 800872c:	68ba      	ldr	r2, [r7, #8]
 800872e:	4413      	add	r3, r2
 8008730:	693a      	ldr	r2, [r7, #16]
 8008732:	7812      	ldrb	r2, [r2, #0]
 8008734:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008736:	693b      	ldr	r3, [r7, #16]
 8008738:	3301      	adds	r3, #1
 800873a:	613b      	str	r3, [r7, #16]
    idx++;
 800873c:	7dfb      	ldrb	r3, [r7, #23]
 800873e:	3301      	adds	r3, #1
 8008740:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008742:	7dfb      	ldrb	r3, [r7, #23]
 8008744:	68ba      	ldr	r2, [r7, #8]
 8008746:	4413      	add	r3, r2
 8008748:	2200      	movs	r2, #0
 800874a:	701a      	strb	r2, [r3, #0]
    idx++;
 800874c:	7dfb      	ldrb	r3, [r7, #23]
 800874e:	3301      	adds	r3, #1
 8008750:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008752:	693b      	ldr	r3, [r7, #16]
 8008754:	781b      	ldrb	r3, [r3, #0]
 8008756:	2b00      	cmp	r3, #0
 8008758:	d1e7      	bne.n	800872a <USBD_GetString+0x52>
 800875a:	e000      	b.n	800875e <USBD_GetString+0x86>
    return;
 800875c:	bf00      	nop
  }
}
 800875e:	3718      	adds	r7, #24
 8008760:	46bd      	mov	sp, r7
 8008762:	bd80      	pop	{r7, pc}

08008764 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008764:	b480      	push	{r7}
 8008766:	b085      	sub	sp, #20
 8008768:	af00      	add	r7, sp, #0
 800876a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800876c:	2300      	movs	r3, #0
 800876e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008774:	e005      	b.n	8008782 <USBD_GetLen+0x1e>
  {
    len++;
 8008776:	7bfb      	ldrb	r3, [r7, #15]
 8008778:	3301      	adds	r3, #1
 800877a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800877c:	68bb      	ldr	r3, [r7, #8]
 800877e:	3301      	adds	r3, #1
 8008780:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008782:	68bb      	ldr	r3, [r7, #8]
 8008784:	781b      	ldrb	r3, [r3, #0]
 8008786:	2b00      	cmp	r3, #0
 8008788:	d1f5      	bne.n	8008776 <USBD_GetLen+0x12>
  }

  return len;
 800878a:	7bfb      	ldrb	r3, [r7, #15]
}
 800878c:	4618      	mov	r0, r3
 800878e:	3714      	adds	r7, #20
 8008790:	46bd      	mov	sp, r7
 8008792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008796:	4770      	bx	lr

08008798 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008798:	b580      	push	{r7, lr}
 800879a:	b084      	sub	sp, #16
 800879c:	af00      	add	r7, sp, #0
 800879e:	60f8      	str	r0, [r7, #12]
 80087a0:	60b9      	str	r1, [r7, #8]
 80087a2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	2202      	movs	r2, #2
 80087a8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	687a      	ldr	r2, [r7, #4]
 80087b0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	687a      	ldr	r2, [r7, #4]
 80087b6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	68ba      	ldr	r2, [r7, #8]
 80087bc:	2100      	movs	r1, #0
 80087be:	68f8      	ldr	r0, [r7, #12]
 80087c0:	f000 fd0b 	bl	80091da <USBD_LL_Transmit>

  return USBD_OK;
 80087c4:	2300      	movs	r3, #0
}
 80087c6:	4618      	mov	r0, r3
 80087c8:	3710      	adds	r7, #16
 80087ca:	46bd      	mov	sp, r7
 80087cc:	bd80      	pop	{r7, pc}

080087ce <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80087ce:	b580      	push	{r7, lr}
 80087d0:	b084      	sub	sp, #16
 80087d2:	af00      	add	r7, sp, #0
 80087d4:	60f8      	str	r0, [r7, #12]
 80087d6:	60b9      	str	r1, [r7, #8]
 80087d8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	68ba      	ldr	r2, [r7, #8]
 80087de:	2100      	movs	r1, #0
 80087e0:	68f8      	ldr	r0, [r7, #12]
 80087e2:	f000 fcfa 	bl	80091da <USBD_LL_Transmit>

  return USBD_OK;
 80087e6:	2300      	movs	r3, #0
}
 80087e8:	4618      	mov	r0, r3
 80087ea:	3710      	adds	r7, #16
 80087ec:	46bd      	mov	sp, r7
 80087ee:	bd80      	pop	{r7, pc}

080087f0 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80087f0:	b580      	push	{r7, lr}
 80087f2:	b084      	sub	sp, #16
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	60f8      	str	r0, [r7, #12]
 80087f8:	60b9      	str	r1, [r7, #8]
 80087fa:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	2203      	movs	r2, #3
 8008800:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	687a      	ldr	r2, [r7, #4]
 8008808:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	687a      	ldr	r2, [r7, #4]
 8008810:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	68ba      	ldr	r2, [r7, #8]
 8008818:	2100      	movs	r1, #0
 800881a:	68f8      	ldr	r0, [r7, #12]
 800881c:	f000 fcfe 	bl	800921c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008820:	2300      	movs	r3, #0
}
 8008822:	4618      	mov	r0, r3
 8008824:	3710      	adds	r7, #16
 8008826:	46bd      	mov	sp, r7
 8008828:	bd80      	pop	{r7, pc}

0800882a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800882a:	b580      	push	{r7, lr}
 800882c:	b084      	sub	sp, #16
 800882e:	af00      	add	r7, sp, #0
 8008830:	60f8      	str	r0, [r7, #12]
 8008832:	60b9      	str	r1, [r7, #8]
 8008834:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	68ba      	ldr	r2, [r7, #8]
 800883a:	2100      	movs	r1, #0
 800883c:	68f8      	ldr	r0, [r7, #12]
 800883e:	f000 fced 	bl	800921c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008842:	2300      	movs	r3, #0
}
 8008844:	4618      	mov	r0, r3
 8008846:	3710      	adds	r7, #16
 8008848:	46bd      	mov	sp, r7
 800884a:	bd80      	pop	{r7, pc}

0800884c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800884c:	b580      	push	{r7, lr}
 800884e:	b082      	sub	sp, #8
 8008850:	af00      	add	r7, sp, #0
 8008852:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	2204      	movs	r2, #4
 8008858:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800885c:	2300      	movs	r3, #0
 800885e:	2200      	movs	r2, #0
 8008860:	2100      	movs	r1, #0
 8008862:	6878      	ldr	r0, [r7, #4]
 8008864:	f000 fcb9 	bl	80091da <USBD_LL_Transmit>

  return USBD_OK;
 8008868:	2300      	movs	r3, #0
}
 800886a:	4618      	mov	r0, r3
 800886c:	3708      	adds	r7, #8
 800886e:	46bd      	mov	sp, r7
 8008870:	bd80      	pop	{r7, pc}

08008872 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008872:	b580      	push	{r7, lr}
 8008874:	b082      	sub	sp, #8
 8008876:	af00      	add	r7, sp, #0
 8008878:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	2205      	movs	r2, #5
 800887e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008882:	2300      	movs	r3, #0
 8008884:	2200      	movs	r2, #0
 8008886:	2100      	movs	r1, #0
 8008888:	6878      	ldr	r0, [r7, #4]
 800888a:	f000 fcc7 	bl	800921c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800888e:	2300      	movs	r3, #0
}
 8008890:	4618      	mov	r0, r3
 8008892:	3708      	adds	r7, #8
 8008894:	46bd      	mov	sp, r7
 8008896:	bd80      	pop	{r7, pc}

08008898 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008898:	b580      	push	{r7, lr}
 800889a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800889c:	2200      	movs	r2, #0
 800889e:	4912      	ldr	r1, [pc, #72]	@ (80088e8 <MX_USB_DEVICE_Init+0x50>)
 80088a0:	4812      	ldr	r0, [pc, #72]	@ (80088ec <MX_USB_DEVICE_Init+0x54>)
 80088a2:	f7fe fd03 	bl	80072ac <USBD_Init>
 80088a6:	4603      	mov	r3, r0
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d001      	beq.n	80088b0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80088ac:	f7f7 ffce 	bl	800084c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80088b0:	490f      	ldr	r1, [pc, #60]	@ (80088f0 <MX_USB_DEVICE_Init+0x58>)
 80088b2:	480e      	ldr	r0, [pc, #56]	@ (80088ec <MX_USB_DEVICE_Init+0x54>)
 80088b4:	f7fe fd2a 	bl	800730c <USBD_RegisterClass>
 80088b8:	4603      	mov	r3, r0
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d001      	beq.n	80088c2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80088be:	f7f7 ffc5 	bl	800084c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80088c2:	490c      	ldr	r1, [pc, #48]	@ (80088f4 <MX_USB_DEVICE_Init+0x5c>)
 80088c4:	4809      	ldr	r0, [pc, #36]	@ (80088ec <MX_USB_DEVICE_Init+0x54>)
 80088c6:	f7fe fc21 	bl	800710c <USBD_CDC_RegisterInterface>
 80088ca:	4603      	mov	r3, r0
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d001      	beq.n	80088d4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80088d0:	f7f7 ffbc 	bl	800084c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80088d4:	4805      	ldr	r0, [pc, #20]	@ (80088ec <MX_USB_DEVICE_Init+0x54>)
 80088d6:	f7fe fd4f 	bl	8007378 <USBD_Start>
 80088da:	4603      	mov	r3, r0
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d001      	beq.n	80088e4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80088e0:	f7f7 ffb4 	bl	800084c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80088e4:	bf00      	nop
 80088e6:	bd80      	pop	{r7, pc}
 80088e8:	200000ac 	.word	0x200000ac
 80088ec:	2000091c 	.word	0x2000091c
 80088f0:	20000018 	.word	0x20000018
 80088f4:	20000098 	.word	0x20000098

080088f8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80088f8:	b580      	push	{r7, lr}
 80088fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80088fc:	2200      	movs	r2, #0
 80088fe:	4905      	ldr	r1, [pc, #20]	@ (8008914 <CDC_Init_FS+0x1c>)
 8008900:	4805      	ldr	r0, [pc, #20]	@ (8008918 <CDC_Init_FS+0x20>)
 8008902:	f7fe fc1d 	bl	8007140 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008906:	4905      	ldr	r1, [pc, #20]	@ (800891c <CDC_Init_FS+0x24>)
 8008908:	4803      	ldr	r0, [pc, #12]	@ (8008918 <CDC_Init_FS+0x20>)
 800890a:	f7fe fc3b 	bl	8007184 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800890e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008910:	4618      	mov	r0, r3
 8008912:	bd80      	pop	{r7, pc}
 8008914:	200013f8 	.word	0x200013f8
 8008918:	2000091c 	.word	0x2000091c
 800891c:	20000bf8 	.word	0x20000bf8

08008920 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008920:	b480      	push	{r7}
 8008922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008924:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008926:	4618      	mov	r0, r3
 8008928:	46bd      	mov	sp, r7
 800892a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800892e:	4770      	bx	lr

08008930 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008930:	b480      	push	{r7}
 8008932:	b083      	sub	sp, #12
 8008934:	af00      	add	r7, sp, #0
 8008936:	4603      	mov	r3, r0
 8008938:	6039      	str	r1, [r7, #0]
 800893a:	71fb      	strb	r3, [r7, #7]
 800893c:	4613      	mov	r3, r2
 800893e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008940:	79fb      	ldrb	r3, [r7, #7]
 8008942:	2b23      	cmp	r3, #35	@ 0x23
 8008944:	d84a      	bhi.n	80089dc <CDC_Control_FS+0xac>
 8008946:	a201      	add	r2, pc, #4	@ (adr r2, 800894c <CDC_Control_FS+0x1c>)
 8008948:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800894c:	080089dd 	.word	0x080089dd
 8008950:	080089dd 	.word	0x080089dd
 8008954:	080089dd 	.word	0x080089dd
 8008958:	080089dd 	.word	0x080089dd
 800895c:	080089dd 	.word	0x080089dd
 8008960:	080089dd 	.word	0x080089dd
 8008964:	080089dd 	.word	0x080089dd
 8008968:	080089dd 	.word	0x080089dd
 800896c:	080089dd 	.word	0x080089dd
 8008970:	080089dd 	.word	0x080089dd
 8008974:	080089dd 	.word	0x080089dd
 8008978:	080089dd 	.word	0x080089dd
 800897c:	080089dd 	.word	0x080089dd
 8008980:	080089dd 	.word	0x080089dd
 8008984:	080089dd 	.word	0x080089dd
 8008988:	080089dd 	.word	0x080089dd
 800898c:	080089dd 	.word	0x080089dd
 8008990:	080089dd 	.word	0x080089dd
 8008994:	080089dd 	.word	0x080089dd
 8008998:	080089dd 	.word	0x080089dd
 800899c:	080089dd 	.word	0x080089dd
 80089a0:	080089dd 	.word	0x080089dd
 80089a4:	080089dd 	.word	0x080089dd
 80089a8:	080089dd 	.word	0x080089dd
 80089ac:	080089dd 	.word	0x080089dd
 80089b0:	080089dd 	.word	0x080089dd
 80089b4:	080089dd 	.word	0x080089dd
 80089b8:	080089dd 	.word	0x080089dd
 80089bc:	080089dd 	.word	0x080089dd
 80089c0:	080089dd 	.word	0x080089dd
 80089c4:	080089dd 	.word	0x080089dd
 80089c8:	080089dd 	.word	0x080089dd
 80089cc:	080089dd 	.word	0x080089dd
 80089d0:	080089dd 	.word	0x080089dd
 80089d4:	080089dd 	.word	0x080089dd
 80089d8:	080089dd 	.word	0x080089dd
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80089dc:	bf00      	nop
  }

  return (USBD_OK);
 80089de:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80089e0:	4618      	mov	r0, r3
 80089e2:	370c      	adds	r7, #12
 80089e4:	46bd      	mov	sp, r7
 80089e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ea:	4770      	bx	lr

080089ec <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80089ec:	b580      	push	{r7, lr}
 80089ee:	b082      	sub	sp, #8
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	6078      	str	r0, [r7, #4]
 80089f4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USB_CdcRxBuffer_FS_cnt = *Len;
 80089f6:	683b      	ldr	r3, [r7, #0]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	4a0a      	ldr	r2, [pc, #40]	@ (8008a24 <CDC_Receive_FS+0x38>)
 80089fc:	6013      	str	r3, [r2, #0]
  strncpy(USB_CdcRxBuffer_FS, Buf, *Len);
 80089fe:	683b      	ldr	r3, [r7, #0]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	461a      	mov	r2, r3
 8008a04:	6879      	ldr	r1, [r7, #4]
 8008a06:	4808      	ldr	r0, [pc, #32]	@ (8008a28 <CDC_Receive_FS+0x3c>)
 8008a08:	f000 fcba 	bl	8009380 <strncpy>

  // memcpy((uint8_t *) USB_CdcRxBuffer_FS, (uint8_t *) Buf, sizeof(*Len));

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008a0c:	6879      	ldr	r1, [r7, #4]
 8008a0e:	4807      	ldr	r0, [pc, #28]	@ (8008a2c <CDC_Receive_FS+0x40>)
 8008a10:	f7fe fbb8 	bl	8007184 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008a14:	4805      	ldr	r0, [pc, #20]	@ (8008a2c <CDC_Receive_FS+0x40>)
 8008a16:	f7fe fc13 	bl	8007240 <USBD_CDC_ReceivePacket>

  return (USBD_OK);
 8008a1a:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008a1c:	4618      	mov	r0, r3
 8008a1e:	3708      	adds	r7, #8
 8008a20:	46bd      	mov	sp, r7
 8008a22:	bd80      	pop	{r7, pc}
 8008a24:	2000050c 	.word	0x2000050c
 8008a28:	2000030c 	.word	0x2000030c
 8008a2c:	2000091c 	.word	0x2000091c

08008a30 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008a30:	b580      	push	{r7, lr}
 8008a32:	b086      	sub	sp, #24
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	6078      	str	r0, [r7, #4]
 8008a38:	460b      	mov	r3, r1
 8008a3a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008a3c:	2300      	movs	r3, #0
 8008a3e:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 7 */
  uint32_t startTick = HAL_GetTick();
 8008a40:	f7f8 fc4c 	bl	80012dc <HAL_GetTick>
 8008a44:	6138      	str	r0, [r7, #16]
  uint32_t TIMEOUT_VALUE = 1U;
 8008a46:	2301      	movs	r3, #1
 8008a48:	60fb      	str	r3, [r7, #12]

  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008a4a:	4b14      	ldr	r3, [pc, #80]	@ (8008a9c <CDC_Transmit_FS+0x6c>)
 8008a4c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008a50:	60bb      	str	r3, [r7, #8]
  if (hcdc == NULL)
 8008a52:	68bb      	ldr	r3, [r7, #8]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d10b      	bne.n	8008a70 <CDC_Transmit_FS+0x40>
  {
    return USBD_FAIL;
 8008a58:	2303      	movs	r3, #3
 8008a5a:	e01a      	b.n	8008a92 <CDC_Transmit_FS+0x62>
  }

  while (hcdc->TxState != 0)
  {
    if ((HAL_GetTick() - startTick) > TIMEOUT_VALUE)
 8008a5c:	f7f8 fc3e 	bl	80012dc <HAL_GetTick>
 8008a60:	4602      	mov	r2, r0
 8008a62:	693b      	ldr	r3, [r7, #16]
 8008a64:	1ad3      	subs	r3, r2, r3
 8008a66:	68fa      	ldr	r2, [r7, #12]
 8008a68:	429a      	cmp	r2, r3
 8008a6a:	d201      	bcs.n	8008a70 <CDC_Transmit_FS+0x40>
    {
      return USBD_FAIL;
 8008a6c:	2303      	movs	r3, #3
 8008a6e:	e010      	b.n	8008a92 <CDC_Transmit_FS+0x62>
  while (hcdc->TxState != 0)
 8008a70:	68bb      	ldr	r3, [r7, #8]
 8008a72:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d1f0      	bne.n	8008a5c <CDC_Transmit_FS+0x2c>
    }
  }

  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008a7a:	887b      	ldrh	r3, [r7, #2]
 8008a7c:	461a      	mov	r2, r3
 8008a7e:	6879      	ldr	r1, [r7, #4]
 8008a80:	4806      	ldr	r0, [pc, #24]	@ (8008a9c <CDC_Transmit_FS+0x6c>)
 8008a82:	f7fe fb5d 	bl	8007140 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008a86:	4805      	ldr	r0, [pc, #20]	@ (8008a9c <CDC_Transmit_FS+0x6c>)
 8008a88:	f7fe fb9a 	bl	80071c0 <USBD_CDC_TransmitPacket>
 8008a8c:	4603      	mov	r3, r0
 8008a8e:	75fb      	strb	r3, [r7, #23]
  /* USER CODE END 7 */
  return result;
 8008a90:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a92:	4618      	mov	r0, r3
 8008a94:	3718      	adds	r7, #24
 8008a96:	46bd      	mov	sp, r7
 8008a98:	bd80      	pop	{r7, pc}
 8008a9a:	bf00      	nop
 8008a9c:	2000091c 	.word	0x2000091c

08008aa0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008aa0:	b480      	push	{r7}
 8008aa2:	b087      	sub	sp, #28
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	60f8      	str	r0, [r7, #12]
 8008aa8:	60b9      	str	r1, [r7, #8]
 8008aaa:	4613      	mov	r3, r2
 8008aac:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008aae:	2300      	movs	r3, #0
 8008ab0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8008ab2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008ab6:	4618      	mov	r0, r3
 8008ab8:	371c      	adds	r7, #28
 8008aba:	46bd      	mov	sp, r7
 8008abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac0:	4770      	bx	lr
	...

08008ac4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ac4:	b480      	push	{r7}
 8008ac6:	b083      	sub	sp, #12
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	4603      	mov	r3, r0
 8008acc:	6039      	str	r1, [r7, #0]
 8008ace:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008ad0:	683b      	ldr	r3, [r7, #0]
 8008ad2:	2212      	movs	r2, #18
 8008ad4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008ad6:	4b03      	ldr	r3, [pc, #12]	@ (8008ae4 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008ad8:	4618      	mov	r0, r3
 8008ada:	370c      	adds	r7, #12
 8008adc:	46bd      	mov	sp, r7
 8008ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae2:	4770      	bx	lr
 8008ae4:	200000c8 	.word	0x200000c8

08008ae8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ae8:	b480      	push	{r7}
 8008aea:	b083      	sub	sp, #12
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	4603      	mov	r3, r0
 8008af0:	6039      	str	r1, [r7, #0]
 8008af2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008af4:	683b      	ldr	r3, [r7, #0]
 8008af6:	2204      	movs	r2, #4
 8008af8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008afa:	4b03      	ldr	r3, [pc, #12]	@ (8008b08 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008afc:	4618      	mov	r0, r3
 8008afe:	370c      	adds	r7, #12
 8008b00:	46bd      	mov	sp, r7
 8008b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b06:	4770      	bx	lr
 8008b08:	200000dc 	.word	0x200000dc

08008b0c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b0c:	b580      	push	{r7, lr}
 8008b0e:	b082      	sub	sp, #8
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	4603      	mov	r3, r0
 8008b14:	6039      	str	r1, [r7, #0]
 8008b16:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008b18:	79fb      	ldrb	r3, [r7, #7]
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d105      	bne.n	8008b2a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008b1e:	683a      	ldr	r2, [r7, #0]
 8008b20:	4907      	ldr	r1, [pc, #28]	@ (8008b40 <USBD_FS_ProductStrDescriptor+0x34>)
 8008b22:	4808      	ldr	r0, [pc, #32]	@ (8008b44 <USBD_FS_ProductStrDescriptor+0x38>)
 8008b24:	f7ff fdd8 	bl	80086d8 <USBD_GetString>
 8008b28:	e004      	b.n	8008b34 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008b2a:	683a      	ldr	r2, [r7, #0]
 8008b2c:	4904      	ldr	r1, [pc, #16]	@ (8008b40 <USBD_FS_ProductStrDescriptor+0x34>)
 8008b2e:	4805      	ldr	r0, [pc, #20]	@ (8008b44 <USBD_FS_ProductStrDescriptor+0x38>)
 8008b30:	f7ff fdd2 	bl	80086d8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008b34:	4b02      	ldr	r3, [pc, #8]	@ (8008b40 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008b36:	4618      	mov	r0, r3
 8008b38:	3708      	adds	r7, #8
 8008b3a:	46bd      	mov	sp, r7
 8008b3c:	bd80      	pop	{r7, pc}
 8008b3e:	bf00      	nop
 8008b40:	20001bf8 	.word	0x20001bf8
 8008b44:	08009f0c 	.word	0x08009f0c

08008b48 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b48:	b580      	push	{r7, lr}
 8008b4a:	b082      	sub	sp, #8
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	4603      	mov	r3, r0
 8008b50:	6039      	str	r1, [r7, #0]
 8008b52:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008b54:	683a      	ldr	r2, [r7, #0]
 8008b56:	4904      	ldr	r1, [pc, #16]	@ (8008b68 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008b58:	4804      	ldr	r0, [pc, #16]	@ (8008b6c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008b5a:	f7ff fdbd 	bl	80086d8 <USBD_GetString>
  return USBD_StrDesc;
 8008b5e:	4b02      	ldr	r3, [pc, #8]	@ (8008b68 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008b60:	4618      	mov	r0, r3
 8008b62:	3708      	adds	r7, #8
 8008b64:	46bd      	mov	sp, r7
 8008b66:	bd80      	pop	{r7, pc}
 8008b68:	20001bf8 	.word	0x20001bf8
 8008b6c:	08009f24 	.word	0x08009f24

08008b70 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b70:	b580      	push	{r7, lr}
 8008b72:	b082      	sub	sp, #8
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	4603      	mov	r3, r0
 8008b78:	6039      	str	r1, [r7, #0]
 8008b7a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008b7c:	683b      	ldr	r3, [r7, #0]
 8008b7e:	221a      	movs	r2, #26
 8008b80:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008b82:	f000 f843 	bl	8008c0c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008b86:	4b02      	ldr	r3, [pc, #8]	@ (8008b90 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008b88:	4618      	mov	r0, r3
 8008b8a:	3708      	adds	r7, #8
 8008b8c:	46bd      	mov	sp, r7
 8008b8e:	bd80      	pop	{r7, pc}
 8008b90:	200000e0 	.word	0x200000e0

08008b94 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b94:	b580      	push	{r7, lr}
 8008b96:	b082      	sub	sp, #8
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	4603      	mov	r3, r0
 8008b9c:	6039      	str	r1, [r7, #0]
 8008b9e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008ba0:	79fb      	ldrb	r3, [r7, #7]
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d105      	bne.n	8008bb2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008ba6:	683a      	ldr	r2, [r7, #0]
 8008ba8:	4907      	ldr	r1, [pc, #28]	@ (8008bc8 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008baa:	4808      	ldr	r0, [pc, #32]	@ (8008bcc <USBD_FS_ConfigStrDescriptor+0x38>)
 8008bac:	f7ff fd94 	bl	80086d8 <USBD_GetString>
 8008bb0:	e004      	b.n	8008bbc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008bb2:	683a      	ldr	r2, [r7, #0]
 8008bb4:	4904      	ldr	r1, [pc, #16]	@ (8008bc8 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008bb6:	4805      	ldr	r0, [pc, #20]	@ (8008bcc <USBD_FS_ConfigStrDescriptor+0x38>)
 8008bb8:	f7ff fd8e 	bl	80086d8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008bbc:	4b02      	ldr	r3, [pc, #8]	@ (8008bc8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008bbe:	4618      	mov	r0, r3
 8008bc0:	3708      	adds	r7, #8
 8008bc2:	46bd      	mov	sp, r7
 8008bc4:	bd80      	pop	{r7, pc}
 8008bc6:	bf00      	nop
 8008bc8:	20001bf8 	.word	0x20001bf8
 8008bcc:	08009f38 	.word	0x08009f38

08008bd0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008bd0:	b580      	push	{r7, lr}
 8008bd2:	b082      	sub	sp, #8
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	4603      	mov	r3, r0
 8008bd8:	6039      	str	r1, [r7, #0]
 8008bda:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008bdc:	79fb      	ldrb	r3, [r7, #7]
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d105      	bne.n	8008bee <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008be2:	683a      	ldr	r2, [r7, #0]
 8008be4:	4907      	ldr	r1, [pc, #28]	@ (8008c04 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008be6:	4808      	ldr	r0, [pc, #32]	@ (8008c08 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008be8:	f7ff fd76 	bl	80086d8 <USBD_GetString>
 8008bec:	e004      	b.n	8008bf8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008bee:	683a      	ldr	r2, [r7, #0]
 8008bf0:	4904      	ldr	r1, [pc, #16]	@ (8008c04 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008bf2:	4805      	ldr	r0, [pc, #20]	@ (8008c08 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008bf4:	f7ff fd70 	bl	80086d8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008bf8:	4b02      	ldr	r3, [pc, #8]	@ (8008c04 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008bfa:	4618      	mov	r0, r3
 8008bfc:	3708      	adds	r7, #8
 8008bfe:	46bd      	mov	sp, r7
 8008c00:	bd80      	pop	{r7, pc}
 8008c02:	bf00      	nop
 8008c04:	20001bf8 	.word	0x20001bf8
 8008c08:	08009f44 	.word	0x08009f44

08008c0c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008c0c:	b580      	push	{r7, lr}
 8008c0e:	b084      	sub	sp, #16
 8008c10:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008c12:	4b0f      	ldr	r3, [pc, #60]	@ (8008c50 <Get_SerialNum+0x44>)
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008c18:	4b0e      	ldr	r3, [pc, #56]	@ (8008c54 <Get_SerialNum+0x48>)
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008c1e:	4b0e      	ldr	r3, [pc, #56]	@ (8008c58 <Get_SerialNum+0x4c>)
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008c24:	68fa      	ldr	r2, [r7, #12]
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	4413      	add	r3, r2
 8008c2a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d009      	beq.n	8008c46 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008c32:	2208      	movs	r2, #8
 8008c34:	4909      	ldr	r1, [pc, #36]	@ (8008c5c <Get_SerialNum+0x50>)
 8008c36:	68f8      	ldr	r0, [r7, #12]
 8008c38:	f000 f814 	bl	8008c64 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008c3c:	2204      	movs	r2, #4
 8008c3e:	4908      	ldr	r1, [pc, #32]	@ (8008c60 <Get_SerialNum+0x54>)
 8008c40:	68b8      	ldr	r0, [r7, #8]
 8008c42:	f000 f80f 	bl	8008c64 <IntToUnicode>
  }
}
 8008c46:	bf00      	nop
 8008c48:	3710      	adds	r7, #16
 8008c4a:	46bd      	mov	sp, r7
 8008c4c:	bd80      	pop	{r7, pc}
 8008c4e:	bf00      	nop
 8008c50:	1fff7a10 	.word	0x1fff7a10
 8008c54:	1fff7a14 	.word	0x1fff7a14
 8008c58:	1fff7a18 	.word	0x1fff7a18
 8008c5c:	200000e2 	.word	0x200000e2
 8008c60:	200000f2 	.word	0x200000f2

08008c64 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008c64:	b480      	push	{r7}
 8008c66:	b087      	sub	sp, #28
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	60f8      	str	r0, [r7, #12]
 8008c6c:	60b9      	str	r1, [r7, #8]
 8008c6e:	4613      	mov	r3, r2
 8008c70:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008c72:	2300      	movs	r3, #0
 8008c74:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008c76:	2300      	movs	r3, #0
 8008c78:	75fb      	strb	r3, [r7, #23]
 8008c7a:	e027      	b.n	8008ccc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	0f1b      	lsrs	r3, r3, #28
 8008c80:	2b09      	cmp	r3, #9
 8008c82:	d80b      	bhi.n	8008c9c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	0f1b      	lsrs	r3, r3, #28
 8008c88:	b2da      	uxtb	r2, r3
 8008c8a:	7dfb      	ldrb	r3, [r7, #23]
 8008c8c:	005b      	lsls	r3, r3, #1
 8008c8e:	4619      	mov	r1, r3
 8008c90:	68bb      	ldr	r3, [r7, #8]
 8008c92:	440b      	add	r3, r1
 8008c94:	3230      	adds	r2, #48	@ 0x30
 8008c96:	b2d2      	uxtb	r2, r2
 8008c98:	701a      	strb	r2, [r3, #0]
 8008c9a:	e00a      	b.n	8008cb2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	0f1b      	lsrs	r3, r3, #28
 8008ca0:	b2da      	uxtb	r2, r3
 8008ca2:	7dfb      	ldrb	r3, [r7, #23]
 8008ca4:	005b      	lsls	r3, r3, #1
 8008ca6:	4619      	mov	r1, r3
 8008ca8:	68bb      	ldr	r3, [r7, #8]
 8008caa:	440b      	add	r3, r1
 8008cac:	3237      	adds	r2, #55	@ 0x37
 8008cae:	b2d2      	uxtb	r2, r2
 8008cb0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	011b      	lsls	r3, r3, #4
 8008cb6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008cb8:	7dfb      	ldrb	r3, [r7, #23]
 8008cba:	005b      	lsls	r3, r3, #1
 8008cbc:	3301      	adds	r3, #1
 8008cbe:	68ba      	ldr	r2, [r7, #8]
 8008cc0:	4413      	add	r3, r2
 8008cc2:	2200      	movs	r2, #0
 8008cc4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008cc6:	7dfb      	ldrb	r3, [r7, #23]
 8008cc8:	3301      	adds	r3, #1
 8008cca:	75fb      	strb	r3, [r7, #23]
 8008ccc:	7dfa      	ldrb	r2, [r7, #23]
 8008cce:	79fb      	ldrb	r3, [r7, #7]
 8008cd0:	429a      	cmp	r2, r3
 8008cd2:	d3d3      	bcc.n	8008c7c <IntToUnicode+0x18>
  }
}
 8008cd4:	bf00      	nop
 8008cd6:	bf00      	nop
 8008cd8:	371c      	adds	r7, #28
 8008cda:	46bd      	mov	sp, r7
 8008cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce0:	4770      	bx	lr
	...

08008ce4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008ce4:	b580      	push	{r7, lr}
 8008ce6:	b08a      	sub	sp, #40	@ 0x28
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008cec:	f107 0314 	add.w	r3, r7, #20
 8008cf0:	2200      	movs	r2, #0
 8008cf2:	601a      	str	r2, [r3, #0]
 8008cf4:	605a      	str	r2, [r3, #4]
 8008cf6:	609a      	str	r2, [r3, #8]
 8008cf8:	60da      	str	r2, [r3, #12]
 8008cfa:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008d04:	d13a      	bne.n	8008d7c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008d06:	2300      	movs	r3, #0
 8008d08:	613b      	str	r3, [r7, #16]
 8008d0a:	4b1e      	ldr	r3, [pc, #120]	@ (8008d84 <HAL_PCD_MspInit+0xa0>)
 8008d0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d0e:	4a1d      	ldr	r2, [pc, #116]	@ (8008d84 <HAL_PCD_MspInit+0xa0>)
 8008d10:	f043 0301 	orr.w	r3, r3, #1
 8008d14:	6313      	str	r3, [r2, #48]	@ 0x30
 8008d16:	4b1b      	ldr	r3, [pc, #108]	@ (8008d84 <HAL_PCD_MspInit+0xa0>)
 8008d18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d1a:	f003 0301 	and.w	r3, r3, #1
 8008d1e:	613b      	str	r3, [r7, #16]
 8008d20:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA8     ------> USB_OTG_FS_SOF
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8008d22:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8008d26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008d28:	2302      	movs	r3, #2
 8008d2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008d2c:	2300      	movs	r3, #0
 8008d2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008d30:	2303      	movs	r3, #3
 8008d32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008d34:	230a      	movs	r3, #10
 8008d36:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008d38:	f107 0314 	add.w	r3, r7, #20
 8008d3c:	4619      	mov	r1, r3
 8008d3e:	4812      	ldr	r0, [pc, #72]	@ (8008d88 <HAL_PCD_MspInit+0xa4>)
 8008d40:	f7f8 ff98 	bl	8001c74 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008d44:	4b0f      	ldr	r3, [pc, #60]	@ (8008d84 <HAL_PCD_MspInit+0xa0>)
 8008d46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008d48:	4a0e      	ldr	r2, [pc, #56]	@ (8008d84 <HAL_PCD_MspInit+0xa0>)
 8008d4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008d4e:	6353      	str	r3, [r2, #52]	@ 0x34
 8008d50:	2300      	movs	r3, #0
 8008d52:	60fb      	str	r3, [r7, #12]
 8008d54:	4b0b      	ldr	r3, [pc, #44]	@ (8008d84 <HAL_PCD_MspInit+0xa0>)
 8008d56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008d58:	4a0a      	ldr	r2, [pc, #40]	@ (8008d84 <HAL_PCD_MspInit+0xa0>)
 8008d5a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008d5e:	6453      	str	r3, [r2, #68]	@ 0x44
 8008d60:	4b08      	ldr	r3, [pc, #32]	@ (8008d84 <HAL_PCD_MspInit+0xa0>)
 8008d62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008d64:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008d68:	60fb      	str	r3, [r7, #12]
 8008d6a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008d6c:	2200      	movs	r2, #0
 8008d6e:	2100      	movs	r1, #0
 8008d70:	2043      	movs	r0, #67	@ 0x43
 8008d72:	f7f8 fbd4 	bl	800151e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008d76:	2043      	movs	r0, #67	@ 0x43
 8008d78:	f7f8 fbed 	bl	8001556 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008d7c:	bf00      	nop
 8008d7e:	3728      	adds	r7, #40	@ 0x28
 8008d80:	46bd      	mov	sp, r7
 8008d82:	bd80      	pop	{r7, pc}
 8008d84:	40023800 	.word	0x40023800
 8008d88:	40020000 	.word	0x40020000

08008d8c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d8c:	b580      	push	{r7, lr}
 8008d8e:	b082      	sub	sp, #8
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8008da0:	4619      	mov	r1, r3
 8008da2:	4610      	mov	r0, r2
 8008da4:	f7fe fb35 	bl	8007412 <USBD_LL_SetupStage>
}
 8008da8:	bf00      	nop
 8008daa:	3708      	adds	r7, #8
 8008dac:	46bd      	mov	sp, r7
 8008dae:	bd80      	pop	{r7, pc}

08008db0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008db0:	b580      	push	{r7, lr}
 8008db2:	b082      	sub	sp, #8
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	6078      	str	r0, [r7, #4]
 8008db8:	460b      	mov	r3, r1
 8008dba:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8008dc2:	78fa      	ldrb	r2, [r7, #3]
 8008dc4:	6879      	ldr	r1, [r7, #4]
 8008dc6:	4613      	mov	r3, r2
 8008dc8:	00db      	lsls	r3, r3, #3
 8008dca:	4413      	add	r3, r2
 8008dcc:	009b      	lsls	r3, r3, #2
 8008dce:	440b      	add	r3, r1
 8008dd0:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8008dd4:	681a      	ldr	r2, [r3, #0]
 8008dd6:	78fb      	ldrb	r3, [r7, #3]
 8008dd8:	4619      	mov	r1, r3
 8008dda:	f7fe fb6f 	bl	80074bc <USBD_LL_DataOutStage>
}
 8008dde:	bf00      	nop
 8008de0:	3708      	adds	r7, #8
 8008de2:	46bd      	mov	sp, r7
 8008de4:	bd80      	pop	{r7, pc}

08008de6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008de6:	b580      	push	{r7, lr}
 8008de8:	b082      	sub	sp, #8
 8008dea:	af00      	add	r7, sp, #0
 8008dec:	6078      	str	r0, [r7, #4]
 8008dee:	460b      	mov	r3, r1
 8008df0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8008df8:	78fa      	ldrb	r2, [r7, #3]
 8008dfa:	6879      	ldr	r1, [r7, #4]
 8008dfc:	4613      	mov	r3, r2
 8008dfe:	00db      	lsls	r3, r3, #3
 8008e00:	4413      	add	r3, r2
 8008e02:	009b      	lsls	r3, r3, #2
 8008e04:	440b      	add	r3, r1
 8008e06:	3320      	adds	r3, #32
 8008e08:	681a      	ldr	r2, [r3, #0]
 8008e0a:	78fb      	ldrb	r3, [r7, #3]
 8008e0c:	4619      	mov	r1, r3
 8008e0e:	f7fe fc08 	bl	8007622 <USBD_LL_DataInStage>
}
 8008e12:	bf00      	nop
 8008e14:	3708      	adds	r7, #8
 8008e16:	46bd      	mov	sp, r7
 8008e18:	bd80      	pop	{r7, pc}

08008e1a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e1a:	b580      	push	{r7, lr}
 8008e1c:	b082      	sub	sp, #8
 8008e1e:	af00      	add	r7, sp, #0
 8008e20:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008e28:	4618      	mov	r0, r3
 8008e2a:	f7fe fd42 	bl	80078b2 <USBD_LL_SOF>
}
 8008e2e:	bf00      	nop
 8008e30:	3708      	adds	r7, #8
 8008e32:	46bd      	mov	sp, r7
 8008e34:	bd80      	pop	{r7, pc}

08008e36 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e36:	b580      	push	{r7, lr}
 8008e38:	b084      	sub	sp, #16
 8008e3a:	af00      	add	r7, sp, #0
 8008e3c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008e3e:	2301      	movs	r3, #1
 8008e40:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	79db      	ldrb	r3, [r3, #7]
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d102      	bne.n	8008e50 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8008e4a:	2300      	movs	r3, #0
 8008e4c:	73fb      	strb	r3, [r7, #15]
 8008e4e:	e008      	b.n	8008e62 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	79db      	ldrb	r3, [r3, #7]
 8008e54:	2b02      	cmp	r3, #2
 8008e56:	d102      	bne.n	8008e5e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8008e58:	2301      	movs	r3, #1
 8008e5a:	73fb      	strb	r3, [r7, #15]
 8008e5c:	e001      	b.n	8008e62 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8008e5e:	f7f7 fcf5 	bl	800084c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008e68:	7bfa      	ldrb	r2, [r7, #15]
 8008e6a:	4611      	mov	r1, r2
 8008e6c:	4618      	mov	r0, r3
 8008e6e:	f7fe fcdc 	bl	800782a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008e78:	4618      	mov	r0, r3
 8008e7a:	f7fe fc84 	bl	8007786 <USBD_LL_Reset>
}
 8008e7e:	bf00      	nop
 8008e80:	3710      	adds	r7, #16
 8008e82:	46bd      	mov	sp, r7
 8008e84:	bd80      	pop	{r7, pc}
	...

08008e88 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e88:	b580      	push	{r7, lr}
 8008e8a:	b082      	sub	sp, #8
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008e96:	4618      	mov	r0, r3
 8008e98:	f7fe fcd7 	bl	800784a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	687a      	ldr	r2, [r7, #4]
 8008ea8:	6812      	ldr	r2, [r2, #0]
 8008eaa:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008eae:	f043 0301 	orr.w	r3, r3, #1
 8008eb2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	7adb      	ldrb	r3, [r3, #11]
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d005      	beq.n	8008ec8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008ebc:	4b04      	ldr	r3, [pc, #16]	@ (8008ed0 <HAL_PCD_SuspendCallback+0x48>)
 8008ebe:	691b      	ldr	r3, [r3, #16]
 8008ec0:	4a03      	ldr	r2, [pc, #12]	@ (8008ed0 <HAL_PCD_SuspendCallback+0x48>)
 8008ec2:	f043 0306 	orr.w	r3, r3, #6
 8008ec6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008ec8:	bf00      	nop
 8008eca:	3708      	adds	r7, #8
 8008ecc:	46bd      	mov	sp, r7
 8008ece:	bd80      	pop	{r7, pc}
 8008ed0:	e000ed00 	.word	0xe000ed00

08008ed4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ed4:	b580      	push	{r7, lr}
 8008ed6:	b082      	sub	sp, #8
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008ee2:	4618      	mov	r0, r3
 8008ee4:	f7fe fccd 	bl	8007882 <USBD_LL_Resume>
}
 8008ee8:	bf00      	nop
 8008eea:	3708      	adds	r7, #8
 8008eec:	46bd      	mov	sp, r7
 8008eee:	bd80      	pop	{r7, pc}

08008ef0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ef0:	b580      	push	{r7, lr}
 8008ef2:	b082      	sub	sp, #8
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	6078      	str	r0, [r7, #4]
 8008ef8:	460b      	mov	r3, r1
 8008efa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008f02:	78fa      	ldrb	r2, [r7, #3]
 8008f04:	4611      	mov	r1, r2
 8008f06:	4618      	mov	r0, r3
 8008f08:	f7fe fd25 	bl	8007956 <USBD_LL_IsoOUTIncomplete>
}
 8008f0c:	bf00      	nop
 8008f0e:	3708      	adds	r7, #8
 8008f10:	46bd      	mov	sp, r7
 8008f12:	bd80      	pop	{r7, pc}

08008f14 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f14:	b580      	push	{r7, lr}
 8008f16:	b082      	sub	sp, #8
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	6078      	str	r0, [r7, #4]
 8008f1c:	460b      	mov	r3, r1
 8008f1e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008f26:	78fa      	ldrb	r2, [r7, #3]
 8008f28:	4611      	mov	r1, r2
 8008f2a:	4618      	mov	r0, r3
 8008f2c:	f7fe fce1 	bl	80078f2 <USBD_LL_IsoINIncomplete>
}
 8008f30:	bf00      	nop
 8008f32:	3708      	adds	r7, #8
 8008f34:	46bd      	mov	sp, r7
 8008f36:	bd80      	pop	{r7, pc}

08008f38 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f38:	b580      	push	{r7, lr}
 8008f3a:	b082      	sub	sp, #8
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008f46:	4618      	mov	r0, r3
 8008f48:	f7fe fd37 	bl	80079ba <USBD_LL_DevConnected>
}
 8008f4c:	bf00      	nop
 8008f4e:	3708      	adds	r7, #8
 8008f50:	46bd      	mov	sp, r7
 8008f52:	bd80      	pop	{r7, pc}

08008f54 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f54:	b580      	push	{r7, lr}
 8008f56:	b082      	sub	sp, #8
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008f62:	4618      	mov	r0, r3
 8008f64:	f7fe fd34 	bl	80079d0 <USBD_LL_DevDisconnected>
}
 8008f68:	bf00      	nop
 8008f6a:	3708      	adds	r7, #8
 8008f6c:	46bd      	mov	sp, r7
 8008f6e:	bd80      	pop	{r7, pc}

08008f70 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008f70:	b580      	push	{r7, lr}
 8008f72:	b082      	sub	sp, #8
 8008f74:	af00      	add	r7, sp, #0
 8008f76:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	781b      	ldrb	r3, [r3, #0]
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d13c      	bne.n	8008ffa <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008f80:	4a20      	ldr	r2, [pc, #128]	@ (8009004 <USBD_LL_Init+0x94>)
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	4a1e      	ldr	r2, [pc, #120]	@ (8009004 <USBD_LL_Init+0x94>)
 8008f8c:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008f90:	4b1c      	ldr	r3, [pc, #112]	@ (8009004 <USBD_LL_Init+0x94>)
 8008f92:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8008f96:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008f98:	4b1a      	ldr	r3, [pc, #104]	@ (8009004 <USBD_LL_Init+0x94>)
 8008f9a:	2204      	movs	r2, #4
 8008f9c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008f9e:	4b19      	ldr	r3, [pc, #100]	@ (8009004 <USBD_LL_Init+0x94>)
 8008fa0:	2202      	movs	r2, #2
 8008fa2:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008fa4:	4b17      	ldr	r3, [pc, #92]	@ (8009004 <USBD_LL_Init+0x94>)
 8008fa6:	2200      	movs	r2, #0
 8008fa8:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008faa:	4b16      	ldr	r3, [pc, #88]	@ (8009004 <USBD_LL_Init+0x94>)
 8008fac:	2202      	movs	r2, #2
 8008fae:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8008fb0:	4b14      	ldr	r3, [pc, #80]	@ (8009004 <USBD_LL_Init+0x94>)
 8008fb2:	2201      	movs	r2, #1
 8008fb4:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008fb6:	4b13      	ldr	r3, [pc, #76]	@ (8009004 <USBD_LL_Init+0x94>)
 8008fb8:	2200      	movs	r2, #0
 8008fba:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008fbc:	4b11      	ldr	r3, [pc, #68]	@ (8009004 <USBD_LL_Init+0x94>)
 8008fbe:	2200      	movs	r2, #0
 8008fc0:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008fc2:	4b10      	ldr	r3, [pc, #64]	@ (8009004 <USBD_LL_Init+0x94>)
 8008fc4:	2200      	movs	r2, #0
 8008fc6:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008fc8:	4b0e      	ldr	r3, [pc, #56]	@ (8009004 <USBD_LL_Init+0x94>)
 8008fca:	2200      	movs	r2, #0
 8008fcc:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008fce:	480d      	ldr	r0, [pc, #52]	@ (8009004 <USBD_LL_Init+0x94>)
 8008fd0:	f7f9 f82f 	bl	8002032 <HAL_PCD_Init>
 8008fd4:	4603      	mov	r3, r0
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d001      	beq.n	8008fde <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008fda:	f7f7 fc37 	bl	800084c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008fde:	2180      	movs	r1, #128	@ 0x80
 8008fe0:	4808      	ldr	r0, [pc, #32]	@ (8009004 <USBD_LL_Init+0x94>)
 8008fe2:	f7fa fa5a 	bl	800349a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008fe6:	2240      	movs	r2, #64	@ 0x40
 8008fe8:	2100      	movs	r1, #0
 8008fea:	4806      	ldr	r0, [pc, #24]	@ (8009004 <USBD_LL_Init+0x94>)
 8008fec:	f7fa fa0e 	bl	800340c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008ff0:	2280      	movs	r2, #128	@ 0x80
 8008ff2:	2101      	movs	r1, #1
 8008ff4:	4803      	ldr	r0, [pc, #12]	@ (8009004 <USBD_LL_Init+0x94>)
 8008ff6:	f7fa fa09 	bl	800340c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008ffa:	2300      	movs	r3, #0
}
 8008ffc:	4618      	mov	r0, r3
 8008ffe:	3708      	adds	r7, #8
 8009000:	46bd      	mov	sp, r7
 8009002:	bd80      	pop	{r7, pc}
 8009004:	20001df8 	.word	0x20001df8

08009008 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009008:	b580      	push	{r7, lr}
 800900a:	b084      	sub	sp, #16
 800900c:	af00      	add	r7, sp, #0
 800900e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009010:	2300      	movs	r3, #0
 8009012:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009014:	2300      	movs	r3, #0
 8009016:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800901e:	4618      	mov	r0, r3
 8009020:	f7f9 f916 	bl	8002250 <HAL_PCD_Start>
 8009024:	4603      	mov	r3, r0
 8009026:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009028:	7bfb      	ldrb	r3, [r7, #15]
 800902a:	4618      	mov	r0, r3
 800902c:	f000 f942 	bl	80092b4 <USBD_Get_USB_Status>
 8009030:	4603      	mov	r3, r0
 8009032:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009034:	7bbb      	ldrb	r3, [r7, #14]
}
 8009036:	4618      	mov	r0, r3
 8009038:	3710      	adds	r7, #16
 800903a:	46bd      	mov	sp, r7
 800903c:	bd80      	pop	{r7, pc}

0800903e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800903e:	b580      	push	{r7, lr}
 8009040:	b084      	sub	sp, #16
 8009042:	af00      	add	r7, sp, #0
 8009044:	6078      	str	r0, [r7, #4]
 8009046:	4608      	mov	r0, r1
 8009048:	4611      	mov	r1, r2
 800904a:	461a      	mov	r2, r3
 800904c:	4603      	mov	r3, r0
 800904e:	70fb      	strb	r3, [r7, #3]
 8009050:	460b      	mov	r3, r1
 8009052:	70bb      	strb	r3, [r7, #2]
 8009054:	4613      	mov	r3, r2
 8009056:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009058:	2300      	movs	r3, #0
 800905a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800905c:	2300      	movs	r3, #0
 800905e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8009066:	78bb      	ldrb	r3, [r7, #2]
 8009068:	883a      	ldrh	r2, [r7, #0]
 800906a:	78f9      	ldrb	r1, [r7, #3]
 800906c:	f7f9 fdea 	bl	8002c44 <HAL_PCD_EP_Open>
 8009070:	4603      	mov	r3, r0
 8009072:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009074:	7bfb      	ldrb	r3, [r7, #15]
 8009076:	4618      	mov	r0, r3
 8009078:	f000 f91c 	bl	80092b4 <USBD_Get_USB_Status>
 800907c:	4603      	mov	r3, r0
 800907e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009080:	7bbb      	ldrb	r3, [r7, #14]
}
 8009082:	4618      	mov	r0, r3
 8009084:	3710      	adds	r7, #16
 8009086:	46bd      	mov	sp, r7
 8009088:	bd80      	pop	{r7, pc}

0800908a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800908a:	b580      	push	{r7, lr}
 800908c:	b084      	sub	sp, #16
 800908e:	af00      	add	r7, sp, #0
 8009090:	6078      	str	r0, [r7, #4]
 8009092:	460b      	mov	r3, r1
 8009094:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009096:	2300      	movs	r3, #0
 8009098:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800909a:	2300      	movs	r3, #0
 800909c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80090a4:	78fa      	ldrb	r2, [r7, #3]
 80090a6:	4611      	mov	r1, r2
 80090a8:	4618      	mov	r0, r3
 80090aa:	f7f9 fe33 	bl	8002d14 <HAL_PCD_EP_Close>
 80090ae:	4603      	mov	r3, r0
 80090b0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80090b2:	7bfb      	ldrb	r3, [r7, #15]
 80090b4:	4618      	mov	r0, r3
 80090b6:	f000 f8fd 	bl	80092b4 <USBD_Get_USB_Status>
 80090ba:	4603      	mov	r3, r0
 80090bc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80090be:	7bbb      	ldrb	r3, [r7, #14]
}
 80090c0:	4618      	mov	r0, r3
 80090c2:	3710      	adds	r7, #16
 80090c4:	46bd      	mov	sp, r7
 80090c6:	bd80      	pop	{r7, pc}

080090c8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80090c8:	b580      	push	{r7, lr}
 80090ca:	b084      	sub	sp, #16
 80090cc:	af00      	add	r7, sp, #0
 80090ce:	6078      	str	r0, [r7, #4]
 80090d0:	460b      	mov	r3, r1
 80090d2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80090d4:	2300      	movs	r3, #0
 80090d6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80090d8:	2300      	movs	r3, #0
 80090da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80090e2:	78fa      	ldrb	r2, [r7, #3]
 80090e4:	4611      	mov	r1, r2
 80090e6:	4618      	mov	r0, r3
 80090e8:	f7f9 feeb 	bl	8002ec2 <HAL_PCD_EP_SetStall>
 80090ec:	4603      	mov	r3, r0
 80090ee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80090f0:	7bfb      	ldrb	r3, [r7, #15]
 80090f2:	4618      	mov	r0, r3
 80090f4:	f000 f8de 	bl	80092b4 <USBD_Get_USB_Status>
 80090f8:	4603      	mov	r3, r0
 80090fa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80090fc:	7bbb      	ldrb	r3, [r7, #14]
}
 80090fe:	4618      	mov	r0, r3
 8009100:	3710      	adds	r7, #16
 8009102:	46bd      	mov	sp, r7
 8009104:	bd80      	pop	{r7, pc}

08009106 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009106:	b580      	push	{r7, lr}
 8009108:	b084      	sub	sp, #16
 800910a:	af00      	add	r7, sp, #0
 800910c:	6078      	str	r0, [r7, #4]
 800910e:	460b      	mov	r3, r1
 8009110:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009112:	2300      	movs	r3, #0
 8009114:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009116:	2300      	movs	r3, #0
 8009118:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009120:	78fa      	ldrb	r2, [r7, #3]
 8009122:	4611      	mov	r1, r2
 8009124:	4618      	mov	r0, r3
 8009126:	f7f9 ff2f 	bl	8002f88 <HAL_PCD_EP_ClrStall>
 800912a:	4603      	mov	r3, r0
 800912c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800912e:	7bfb      	ldrb	r3, [r7, #15]
 8009130:	4618      	mov	r0, r3
 8009132:	f000 f8bf 	bl	80092b4 <USBD_Get_USB_Status>
 8009136:	4603      	mov	r3, r0
 8009138:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800913a:	7bbb      	ldrb	r3, [r7, #14]
}
 800913c:	4618      	mov	r0, r3
 800913e:	3710      	adds	r7, #16
 8009140:	46bd      	mov	sp, r7
 8009142:	bd80      	pop	{r7, pc}

08009144 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009144:	b480      	push	{r7}
 8009146:	b085      	sub	sp, #20
 8009148:	af00      	add	r7, sp, #0
 800914a:	6078      	str	r0, [r7, #4]
 800914c:	460b      	mov	r3, r1
 800914e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009156:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009158:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800915c:	2b00      	cmp	r3, #0
 800915e:	da0b      	bge.n	8009178 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009160:	78fb      	ldrb	r3, [r7, #3]
 8009162:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009166:	68f9      	ldr	r1, [r7, #12]
 8009168:	4613      	mov	r3, r2
 800916a:	00db      	lsls	r3, r3, #3
 800916c:	4413      	add	r3, r2
 800916e:	009b      	lsls	r3, r3, #2
 8009170:	440b      	add	r3, r1
 8009172:	3316      	adds	r3, #22
 8009174:	781b      	ldrb	r3, [r3, #0]
 8009176:	e00b      	b.n	8009190 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009178:	78fb      	ldrb	r3, [r7, #3]
 800917a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800917e:	68f9      	ldr	r1, [r7, #12]
 8009180:	4613      	mov	r3, r2
 8009182:	00db      	lsls	r3, r3, #3
 8009184:	4413      	add	r3, r2
 8009186:	009b      	lsls	r3, r3, #2
 8009188:	440b      	add	r3, r1
 800918a:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800918e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009190:	4618      	mov	r0, r3
 8009192:	3714      	adds	r7, #20
 8009194:	46bd      	mov	sp, r7
 8009196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800919a:	4770      	bx	lr

0800919c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800919c:	b580      	push	{r7, lr}
 800919e:	b084      	sub	sp, #16
 80091a0:	af00      	add	r7, sp, #0
 80091a2:	6078      	str	r0, [r7, #4]
 80091a4:	460b      	mov	r3, r1
 80091a6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80091a8:	2300      	movs	r3, #0
 80091aa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80091ac:	2300      	movs	r3, #0
 80091ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80091b6:	78fa      	ldrb	r2, [r7, #3]
 80091b8:	4611      	mov	r1, r2
 80091ba:	4618      	mov	r0, r3
 80091bc:	f7f9 fd1e 	bl	8002bfc <HAL_PCD_SetAddress>
 80091c0:	4603      	mov	r3, r0
 80091c2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80091c4:	7bfb      	ldrb	r3, [r7, #15]
 80091c6:	4618      	mov	r0, r3
 80091c8:	f000 f874 	bl	80092b4 <USBD_Get_USB_Status>
 80091cc:	4603      	mov	r3, r0
 80091ce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80091d0:	7bbb      	ldrb	r3, [r7, #14]
}
 80091d2:	4618      	mov	r0, r3
 80091d4:	3710      	adds	r7, #16
 80091d6:	46bd      	mov	sp, r7
 80091d8:	bd80      	pop	{r7, pc}

080091da <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80091da:	b580      	push	{r7, lr}
 80091dc:	b086      	sub	sp, #24
 80091de:	af00      	add	r7, sp, #0
 80091e0:	60f8      	str	r0, [r7, #12]
 80091e2:	607a      	str	r2, [r7, #4]
 80091e4:	603b      	str	r3, [r7, #0]
 80091e6:	460b      	mov	r3, r1
 80091e8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80091ea:	2300      	movs	r3, #0
 80091ec:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80091ee:	2300      	movs	r3, #0
 80091f0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80091f8:	7af9      	ldrb	r1, [r7, #11]
 80091fa:	683b      	ldr	r3, [r7, #0]
 80091fc:	687a      	ldr	r2, [r7, #4]
 80091fe:	f7f9 fe26 	bl	8002e4e <HAL_PCD_EP_Transmit>
 8009202:	4603      	mov	r3, r0
 8009204:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009206:	7dfb      	ldrb	r3, [r7, #23]
 8009208:	4618      	mov	r0, r3
 800920a:	f000 f853 	bl	80092b4 <USBD_Get_USB_Status>
 800920e:	4603      	mov	r3, r0
 8009210:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009212:	7dbb      	ldrb	r3, [r7, #22]
}
 8009214:	4618      	mov	r0, r3
 8009216:	3718      	adds	r7, #24
 8009218:	46bd      	mov	sp, r7
 800921a:	bd80      	pop	{r7, pc}

0800921c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800921c:	b580      	push	{r7, lr}
 800921e:	b086      	sub	sp, #24
 8009220:	af00      	add	r7, sp, #0
 8009222:	60f8      	str	r0, [r7, #12]
 8009224:	607a      	str	r2, [r7, #4]
 8009226:	603b      	str	r3, [r7, #0]
 8009228:	460b      	mov	r3, r1
 800922a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800922c:	2300      	movs	r3, #0
 800922e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009230:	2300      	movs	r3, #0
 8009232:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800923a:	7af9      	ldrb	r1, [r7, #11]
 800923c:	683b      	ldr	r3, [r7, #0]
 800923e:	687a      	ldr	r2, [r7, #4]
 8009240:	f7f9 fdb2 	bl	8002da8 <HAL_PCD_EP_Receive>
 8009244:	4603      	mov	r3, r0
 8009246:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009248:	7dfb      	ldrb	r3, [r7, #23]
 800924a:	4618      	mov	r0, r3
 800924c:	f000 f832 	bl	80092b4 <USBD_Get_USB_Status>
 8009250:	4603      	mov	r3, r0
 8009252:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009254:	7dbb      	ldrb	r3, [r7, #22]
}
 8009256:	4618      	mov	r0, r3
 8009258:	3718      	adds	r7, #24
 800925a:	46bd      	mov	sp, r7
 800925c:	bd80      	pop	{r7, pc}

0800925e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800925e:	b580      	push	{r7, lr}
 8009260:	b082      	sub	sp, #8
 8009262:	af00      	add	r7, sp, #0
 8009264:	6078      	str	r0, [r7, #4]
 8009266:	460b      	mov	r3, r1
 8009268:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009270:	78fa      	ldrb	r2, [r7, #3]
 8009272:	4611      	mov	r1, r2
 8009274:	4618      	mov	r0, r3
 8009276:	f7f9 fdd2 	bl	8002e1e <HAL_PCD_EP_GetRxCount>
 800927a:	4603      	mov	r3, r0
}
 800927c:	4618      	mov	r0, r3
 800927e:	3708      	adds	r7, #8
 8009280:	46bd      	mov	sp, r7
 8009282:	bd80      	pop	{r7, pc}

08009284 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009284:	b480      	push	{r7}
 8009286:	b083      	sub	sp, #12
 8009288:	af00      	add	r7, sp, #0
 800928a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800928c:	4b03      	ldr	r3, [pc, #12]	@ (800929c <USBD_static_malloc+0x18>)
}
 800928e:	4618      	mov	r0, r3
 8009290:	370c      	adds	r7, #12
 8009292:	46bd      	mov	sp, r7
 8009294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009298:	4770      	bx	lr
 800929a:	bf00      	nop
 800929c:	200022dc 	.word	0x200022dc

080092a0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80092a0:	b480      	push	{r7}
 80092a2:	b083      	sub	sp, #12
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	6078      	str	r0, [r7, #4]

}
 80092a8:	bf00      	nop
 80092aa:	370c      	adds	r7, #12
 80092ac:	46bd      	mov	sp, r7
 80092ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b2:	4770      	bx	lr

080092b4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80092b4:	b480      	push	{r7}
 80092b6:	b085      	sub	sp, #20
 80092b8:	af00      	add	r7, sp, #0
 80092ba:	4603      	mov	r3, r0
 80092bc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80092be:	2300      	movs	r3, #0
 80092c0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80092c2:	79fb      	ldrb	r3, [r7, #7]
 80092c4:	2b03      	cmp	r3, #3
 80092c6:	d817      	bhi.n	80092f8 <USBD_Get_USB_Status+0x44>
 80092c8:	a201      	add	r2, pc, #4	@ (adr r2, 80092d0 <USBD_Get_USB_Status+0x1c>)
 80092ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092ce:	bf00      	nop
 80092d0:	080092e1 	.word	0x080092e1
 80092d4:	080092e7 	.word	0x080092e7
 80092d8:	080092ed 	.word	0x080092ed
 80092dc:	080092f3 	.word	0x080092f3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80092e0:	2300      	movs	r3, #0
 80092e2:	73fb      	strb	r3, [r7, #15]
    break;
 80092e4:	e00b      	b.n	80092fe <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80092e6:	2303      	movs	r3, #3
 80092e8:	73fb      	strb	r3, [r7, #15]
    break;
 80092ea:	e008      	b.n	80092fe <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80092ec:	2301      	movs	r3, #1
 80092ee:	73fb      	strb	r3, [r7, #15]
    break;
 80092f0:	e005      	b.n	80092fe <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80092f2:	2303      	movs	r3, #3
 80092f4:	73fb      	strb	r3, [r7, #15]
    break;
 80092f6:	e002      	b.n	80092fe <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80092f8:	2303      	movs	r3, #3
 80092fa:	73fb      	strb	r3, [r7, #15]
    break;
 80092fc:	bf00      	nop
  }
  return usb_status;
 80092fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8009300:	4618      	mov	r0, r3
 8009302:	3714      	adds	r7, #20
 8009304:	46bd      	mov	sp, r7
 8009306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800930a:	4770      	bx	lr

0800930c <siprintf>:
 800930c:	b40e      	push	{r1, r2, r3}
 800930e:	b500      	push	{lr}
 8009310:	b09c      	sub	sp, #112	@ 0x70
 8009312:	ab1d      	add	r3, sp, #116	@ 0x74
 8009314:	9002      	str	r0, [sp, #8]
 8009316:	9006      	str	r0, [sp, #24]
 8009318:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800931c:	4809      	ldr	r0, [pc, #36]	@ (8009344 <siprintf+0x38>)
 800931e:	9107      	str	r1, [sp, #28]
 8009320:	9104      	str	r1, [sp, #16]
 8009322:	4909      	ldr	r1, [pc, #36]	@ (8009348 <siprintf+0x3c>)
 8009324:	f853 2b04 	ldr.w	r2, [r3], #4
 8009328:	9105      	str	r1, [sp, #20]
 800932a:	6800      	ldr	r0, [r0, #0]
 800932c:	9301      	str	r3, [sp, #4]
 800932e:	a902      	add	r1, sp, #8
 8009330:	f000 f9ba 	bl	80096a8 <_svfiprintf_r>
 8009334:	9b02      	ldr	r3, [sp, #8]
 8009336:	2200      	movs	r2, #0
 8009338:	701a      	strb	r2, [r3, #0]
 800933a:	b01c      	add	sp, #112	@ 0x70
 800933c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009340:	b003      	add	sp, #12
 8009342:	4770      	bx	lr
 8009344:	200000fc 	.word	0x200000fc
 8009348:	ffff0208 	.word	0xffff0208

0800934c <memset>:
 800934c:	4402      	add	r2, r0
 800934e:	4603      	mov	r3, r0
 8009350:	4293      	cmp	r3, r2
 8009352:	d100      	bne.n	8009356 <memset+0xa>
 8009354:	4770      	bx	lr
 8009356:	f803 1b01 	strb.w	r1, [r3], #1
 800935a:	e7f9      	b.n	8009350 <memset+0x4>

0800935c <strncmp>:
 800935c:	b510      	push	{r4, lr}
 800935e:	b16a      	cbz	r2, 800937c <strncmp+0x20>
 8009360:	3901      	subs	r1, #1
 8009362:	1884      	adds	r4, r0, r2
 8009364:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009368:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800936c:	429a      	cmp	r2, r3
 800936e:	d103      	bne.n	8009378 <strncmp+0x1c>
 8009370:	42a0      	cmp	r0, r4
 8009372:	d001      	beq.n	8009378 <strncmp+0x1c>
 8009374:	2a00      	cmp	r2, #0
 8009376:	d1f5      	bne.n	8009364 <strncmp+0x8>
 8009378:	1ad0      	subs	r0, r2, r3
 800937a:	bd10      	pop	{r4, pc}
 800937c:	4610      	mov	r0, r2
 800937e:	e7fc      	b.n	800937a <strncmp+0x1e>

08009380 <strncpy>:
 8009380:	b510      	push	{r4, lr}
 8009382:	3901      	subs	r1, #1
 8009384:	4603      	mov	r3, r0
 8009386:	b132      	cbz	r2, 8009396 <strncpy+0x16>
 8009388:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800938c:	f803 4b01 	strb.w	r4, [r3], #1
 8009390:	3a01      	subs	r2, #1
 8009392:	2c00      	cmp	r4, #0
 8009394:	d1f7      	bne.n	8009386 <strncpy+0x6>
 8009396:	441a      	add	r2, r3
 8009398:	2100      	movs	r1, #0
 800939a:	4293      	cmp	r3, r2
 800939c:	d100      	bne.n	80093a0 <strncpy+0x20>
 800939e:	bd10      	pop	{r4, pc}
 80093a0:	f803 1b01 	strb.w	r1, [r3], #1
 80093a4:	e7f9      	b.n	800939a <strncpy+0x1a>
	...

080093a8 <__errno>:
 80093a8:	4b01      	ldr	r3, [pc, #4]	@ (80093b0 <__errno+0x8>)
 80093aa:	6818      	ldr	r0, [r3, #0]
 80093ac:	4770      	bx	lr
 80093ae:	bf00      	nop
 80093b0:	200000fc 	.word	0x200000fc

080093b4 <__libc_init_array>:
 80093b4:	b570      	push	{r4, r5, r6, lr}
 80093b6:	4d0d      	ldr	r5, [pc, #52]	@ (80093ec <__libc_init_array+0x38>)
 80093b8:	4c0d      	ldr	r4, [pc, #52]	@ (80093f0 <__libc_init_array+0x3c>)
 80093ba:	1b64      	subs	r4, r4, r5
 80093bc:	10a4      	asrs	r4, r4, #2
 80093be:	2600      	movs	r6, #0
 80093c0:	42a6      	cmp	r6, r4
 80093c2:	d109      	bne.n	80093d8 <__libc_init_array+0x24>
 80093c4:	4d0b      	ldr	r5, [pc, #44]	@ (80093f4 <__libc_init_array+0x40>)
 80093c6:	4c0c      	ldr	r4, [pc, #48]	@ (80093f8 <__libc_init_array+0x44>)
 80093c8:	f000 fc66 	bl	8009c98 <_init>
 80093cc:	1b64      	subs	r4, r4, r5
 80093ce:	10a4      	asrs	r4, r4, #2
 80093d0:	2600      	movs	r6, #0
 80093d2:	42a6      	cmp	r6, r4
 80093d4:	d105      	bne.n	80093e2 <__libc_init_array+0x2e>
 80093d6:	bd70      	pop	{r4, r5, r6, pc}
 80093d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80093dc:	4798      	blx	r3
 80093de:	3601      	adds	r6, #1
 80093e0:	e7ee      	b.n	80093c0 <__libc_init_array+0xc>
 80093e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80093e6:	4798      	blx	r3
 80093e8:	3601      	adds	r6, #1
 80093ea:	e7f2      	b.n	80093d2 <__libc_init_array+0x1e>
 80093ec:	08009fb0 	.word	0x08009fb0
 80093f0:	08009fb0 	.word	0x08009fb0
 80093f4:	08009fb0 	.word	0x08009fb0
 80093f8:	08009fb4 	.word	0x08009fb4

080093fc <__retarget_lock_acquire_recursive>:
 80093fc:	4770      	bx	lr

080093fe <__retarget_lock_release_recursive>:
 80093fe:	4770      	bx	lr

08009400 <_free_r>:
 8009400:	b538      	push	{r3, r4, r5, lr}
 8009402:	4605      	mov	r5, r0
 8009404:	2900      	cmp	r1, #0
 8009406:	d041      	beq.n	800948c <_free_r+0x8c>
 8009408:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800940c:	1f0c      	subs	r4, r1, #4
 800940e:	2b00      	cmp	r3, #0
 8009410:	bfb8      	it	lt
 8009412:	18e4      	addlt	r4, r4, r3
 8009414:	f000 f8e0 	bl	80095d8 <__malloc_lock>
 8009418:	4a1d      	ldr	r2, [pc, #116]	@ (8009490 <_free_r+0x90>)
 800941a:	6813      	ldr	r3, [r2, #0]
 800941c:	b933      	cbnz	r3, 800942c <_free_r+0x2c>
 800941e:	6063      	str	r3, [r4, #4]
 8009420:	6014      	str	r4, [r2, #0]
 8009422:	4628      	mov	r0, r5
 8009424:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009428:	f000 b8dc 	b.w	80095e4 <__malloc_unlock>
 800942c:	42a3      	cmp	r3, r4
 800942e:	d908      	bls.n	8009442 <_free_r+0x42>
 8009430:	6820      	ldr	r0, [r4, #0]
 8009432:	1821      	adds	r1, r4, r0
 8009434:	428b      	cmp	r3, r1
 8009436:	bf01      	itttt	eq
 8009438:	6819      	ldreq	r1, [r3, #0]
 800943a:	685b      	ldreq	r3, [r3, #4]
 800943c:	1809      	addeq	r1, r1, r0
 800943e:	6021      	streq	r1, [r4, #0]
 8009440:	e7ed      	b.n	800941e <_free_r+0x1e>
 8009442:	461a      	mov	r2, r3
 8009444:	685b      	ldr	r3, [r3, #4]
 8009446:	b10b      	cbz	r3, 800944c <_free_r+0x4c>
 8009448:	42a3      	cmp	r3, r4
 800944a:	d9fa      	bls.n	8009442 <_free_r+0x42>
 800944c:	6811      	ldr	r1, [r2, #0]
 800944e:	1850      	adds	r0, r2, r1
 8009450:	42a0      	cmp	r0, r4
 8009452:	d10b      	bne.n	800946c <_free_r+0x6c>
 8009454:	6820      	ldr	r0, [r4, #0]
 8009456:	4401      	add	r1, r0
 8009458:	1850      	adds	r0, r2, r1
 800945a:	4283      	cmp	r3, r0
 800945c:	6011      	str	r1, [r2, #0]
 800945e:	d1e0      	bne.n	8009422 <_free_r+0x22>
 8009460:	6818      	ldr	r0, [r3, #0]
 8009462:	685b      	ldr	r3, [r3, #4]
 8009464:	6053      	str	r3, [r2, #4]
 8009466:	4408      	add	r0, r1
 8009468:	6010      	str	r0, [r2, #0]
 800946a:	e7da      	b.n	8009422 <_free_r+0x22>
 800946c:	d902      	bls.n	8009474 <_free_r+0x74>
 800946e:	230c      	movs	r3, #12
 8009470:	602b      	str	r3, [r5, #0]
 8009472:	e7d6      	b.n	8009422 <_free_r+0x22>
 8009474:	6820      	ldr	r0, [r4, #0]
 8009476:	1821      	adds	r1, r4, r0
 8009478:	428b      	cmp	r3, r1
 800947a:	bf04      	itt	eq
 800947c:	6819      	ldreq	r1, [r3, #0]
 800947e:	685b      	ldreq	r3, [r3, #4]
 8009480:	6063      	str	r3, [r4, #4]
 8009482:	bf04      	itt	eq
 8009484:	1809      	addeq	r1, r1, r0
 8009486:	6021      	streq	r1, [r4, #0]
 8009488:	6054      	str	r4, [r2, #4]
 800948a:	e7ca      	b.n	8009422 <_free_r+0x22>
 800948c:	bd38      	pop	{r3, r4, r5, pc}
 800948e:	bf00      	nop
 8009490:	20002640 	.word	0x20002640

08009494 <sbrk_aligned>:
 8009494:	b570      	push	{r4, r5, r6, lr}
 8009496:	4e0f      	ldr	r6, [pc, #60]	@ (80094d4 <sbrk_aligned+0x40>)
 8009498:	460c      	mov	r4, r1
 800949a:	6831      	ldr	r1, [r6, #0]
 800949c:	4605      	mov	r5, r0
 800949e:	b911      	cbnz	r1, 80094a6 <sbrk_aligned+0x12>
 80094a0:	f000 fba6 	bl	8009bf0 <_sbrk_r>
 80094a4:	6030      	str	r0, [r6, #0]
 80094a6:	4621      	mov	r1, r4
 80094a8:	4628      	mov	r0, r5
 80094aa:	f000 fba1 	bl	8009bf0 <_sbrk_r>
 80094ae:	1c43      	adds	r3, r0, #1
 80094b0:	d103      	bne.n	80094ba <sbrk_aligned+0x26>
 80094b2:	f04f 34ff 	mov.w	r4, #4294967295
 80094b6:	4620      	mov	r0, r4
 80094b8:	bd70      	pop	{r4, r5, r6, pc}
 80094ba:	1cc4      	adds	r4, r0, #3
 80094bc:	f024 0403 	bic.w	r4, r4, #3
 80094c0:	42a0      	cmp	r0, r4
 80094c2:	d0f8      	beq.n	80094b6 <sbrk_aligned+0x22>
 80094c4:	1a21      	subs	r1, r4, r0
 80094c6:	4628      	mov	r0, r5
 80094c8:	f000 fb92 	bl	8009bf0 <_sbrk_r>
 80094cc:	3001      	adds	r0, #1
 80094ce:	d1f2      	bne.n	80094b6 <sbrk_aligned+0x22>
 80094d0:	e7ef      	b.n	80094b2 <sbrk_aligned+0x1e>
 80094d2:	bf00      	nop
 80094d4:	2000263c 	.word	0x2000263c

080094d8 <_malloc_r>:
 80094d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80094dc:	1ccd      	adds	r5, r1, #3
 80094de:	f025 0503 	bic.w	r5, r5, #3
 80094e2:	3508      	adds	r5, #8
 80094e4:	2d0c      	cmp	r5, #12
 80094e6:	bf38      	it	cc
 80094e8:	250c      	movcc	r5, #12
 80094ea:	2d00      	cmp	r5, #0
 80094ec:	4606      	mov	r6, r0
 80094ee:	db01      	blt.n	80094f4 <_malloc_r+0x1c>
 80094f0:	42a9      	cmp	r1, r5
 80094f2:	d904      	bls.n	80094fe <_malloc_r+0x26>
 80094f4:	230c      	movs	r3, #12
 80094f6:	6033      	str	r3, [r6, #0]
 80094f8:	2000      	movs	r0, #0
 80094fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80094fe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80095d4 <_malloc_r+0xfc>
 8009502:	f000 f869 	bl	80095d8 <__malloc_lock>
 8009506:	f8d8 3000 	ldr.w	r3, [r8]
 800950a:	461c      	mov	r4, r3
 800950c:	bb44      	cbnz	r4, 8009560 <_malloc_r+0x88>
 800950e:	4629      	mov	r1, r5
 8009510:	4630      	mov	r0, r6
 8009512:	f7ff ffbf 	bl	8009494 <sbrk_aligned>
 8009516:	1c43      	adds	r3, r0, #1
 8009518:	4604      	mov	r4, r0
 800951a:	d158      	bne.n	80095ce <_malloc_r+0xf6>
 800951c:	f8d8 4000 	ldr.w	r4, [r8]
 8009520:	4627      	mov	r7, r4
 8009522:	2f00      	cmp	r7, #0
 8009524:	d143      	bne.n	80095ae <_malloc_r+0xd6>
 8009526:	2c00      	cmp	r4, #0
 8009528:	d04b      	beq.n	80095c2 <_malloc_r+0xea>
 800952a:	6823      	ldr	r3, [r4, #0]
 800952c:	4639      	mov	r1, r7
 800952e:	4630      	mov	r0, r6
 8009530:	eb04 0903 	add.w	r9, r4, r3
 8009534:	f000 fb5c 	bl	8009bf0 <_sbrk_r>
 8009538:	4581      	cmp	r9, r0
 800953a:	d142      	bne.n	80095c2 <_malloc_r+0xea>
 800953c:	6821      	ldr	r1, [r4, #0]
 800953e:	1a6d      	subs	r5, r5, r1
 8009540:	4629      	mov	r1, r5
 8009542:	4630      	mov	r0, r6
 8009544:	f7ff ffa6 	bl	8009494 <sbrk_aligned>
 8009548:	3001      	adds	r0, #1
 800954a:	d03a      	beq.n	80095c2 <_malloc_r+0xea>
 800954c:	6823      	ldr	r3, [r4, #0]
 800954e:	442b      	add	r3, r5
 8009550:	6023      	str	r3, [r4, #0]
 8009552:	f8d8 3000 	ldr.w	r3, [r8]
 8009556:	685a      	ldr	r2, [r3, #4]
 8009558:	bb62      	cbnz	r2, 80095b4 <_malloc_r+0xdc>
 800955a:	f8c8 7000 	str.w	r7, [r8]
 800955e:	e00f      	b.n	8009580 <_malloc_r+0xa8>
 8009560:	6822      	ldr	r2, [r4, #0]
 8009562:	1b52      	subs	r2, r2, r5
 8009564:	d420      	bmi.n	80095a8 <_malloc_r+0xd0>
 8009566:	2a0b      	cmp	r2, #11
 8009568:	d917      	bls.n	800959a <_malloc_r+0xc2>
 800956a:	1961      	adds	r1, r4, r5
 800956c:	42a3      	cmp	r3, r4
 800956e:	6025      	str	r5, [r4, #0]
 8009570:	bf18      	it	ne
 8009572:	6059      	strne	r1, [r3, #4]
 8009574:	6863      	ldr	r3, [r4, #4]
 8009576:	bf08      	it	eq
 8009578:	f8c8 1000 	streq.w	r1, [r8]
 800957c:	5162      	str	r2, [r4, r5]
 800957e:	604b      	str	r3, [r1, #4]
 8009580:	4630      	mov	r0, r6
 8009582:	f000 f82f 	bl	80095e4 <__malloc_unlock>
 8009586:	f104 000b 	add.w	r0, r4, #11
 800958a:	1d23      	adds	r3, r4, #4
 800958c:	f020 0007 	bic.w	r0, r0, #7
 8009590:	1ac2      	subs	r2, r0, r3
 8009592:	bf1c      	itt	ne
 8009594:	1a1b      	subne	r3, r3, r0
 8009596:	50a3      	strne	r3, [r4, r2]
 8009598:	e7af      	b.n	80094fa <_malloc_r+0x22>
 800959a:	6862      	ldr	r2, [r4, #4]
 800959c:	42a3      	cmp	r3, r4
 800959e:	bf0c      	ite	eq
 80095a0:	f8c8 2000 	streq.w	r2, [r8]
 80095a4:	605a      	strne	r2, [r3, #4]
 80095a6:	e7eb      	b.n	8009580 <_malloc_r+0xa8>
 80095a8:	4623      	mov	r3, r4
 80095aa:	6864      	ldr	r4, [r4, #4]
 80095ac:	e7ae      	b.n	800950c <_malloc_r+0x34>
 80095ae:	463c      	mov	r4, r7
 80095b0:	687f      	ldr	r7, [r7, #4]
 80095b2:	e7b6      	b.n	8009522 <_malloc_r+0x4a>
 80095b4:	461a      	mov	r2, r3
 80095b6:	685b      	ldr	r3, [r3, #4]
 80095b8:	42a3      	cmp	r3, r4
 80095ba:	d1fb      	bne.n	80095b4 <_malloc_r+0xdc>
 80095bc:	2300      	movs	r3, #0
 80095be:	6053      	str	r3, [r2, #4]
 80095c0:	e7de      	b.n	8009580 <_malloc_r+0xa8>
 80095c2:	230c      	movs	r3, #12
 80095c4:	6033      	str	r3, [r6, #0]
 80095c6:	4630      	mov	r0, r6
 80095c8:	f000 f80c 	bl	80095e4 <__malloc_unlock>
 80095cc:	e794      	b.n	80094f8 <_malloc_r+0x20>
 80095ce:	6005      	str	r5, [r0, #0]
 80095d0:	e7d6      	b.n	8009580 <_malloc_r+0xa8>
 80095d2:	bf00      	nop
 80095d4:	20002640 	.word	0x20002640

080095d8 <__malloc_lock>:
 80095d8:	4801      	ldr	r0, [pc, #4]	@ (80095e0 <__malloc_lock+0x8>)
 80095da:	f7ff bf0f 	b.w	80093fc <__retarget_lock_acquire_recursive>
 80095de:	bf00      	nop
 80095e0:	20002638 	.word	0x20002638

080095e4 <__malloc_unlock>:
 80095e4:	4801      	ldr	r0, [pc, #4]	@ (80095ec <__malloc_unlock+0x8>)
 80095e6:	f7ff bf0a 	b.w	80093fe <__retarget_lock_release_recursive>
 80095ea:	bf00      	nop
 80095ec:	20002638 	.word	0x20002638

080095f0 <__ssputs_r>:
 80095f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80095f4:	688e      	ldr	r6, [r1, #8]
 80095f6:	461f      	mov	r7, r3
 80095f8:	42be      	cmp	r6, r7
 80095fa:	680b      	ldr	r3, [r1, #0]
 80095fc:	4682      	mov	sl, r0
 80095fe:	460c      	mov	r4, r1
 8009600:	4690      	mov	r8, r2
 8009602:	d82d      	bhi.n	8009660 <__ssputs_r+0x70>
 8009604:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009608:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800960c:	d026      	beq.n	800965c <__ssputs_r+0x6c>
 800960e:	6965      	ldr	r5, [r4, #20]
 8009610:	6909      	ldr	r1, [r1, #16]
 8009612:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009616:	eba3 0901 	sub.w	r9, r3, r1
 800961a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800961e:	1c7b      	adds	r3, r7, #1
 8009620:	444b      	add	r3, r9
 8009622:	106d      	asrs	r5, r5, #1
 8009624:	429d      	cmp	r5, r3
 8009626:	bf38      	it	cc
 8009628:	461d      	movcc	r5, r3
 800962a:	0553      	lsls	r3, r2, #21
 800962c:	d527      	bpl.n	800967e <__ssputs_r+0x8e>
 800962e:	4629      	mov	r1, r5
 8009630:	f7ff ff52 	bl	80094d8 <_malloc_r>
 8009634:	4606      	mov	r6, r0
 8009636:	b360      	cbz	r0, 8009692 <__ssputs_r+0xa2>
 8009638:	6921      	ldr	r1, [r4, #16]
 800963a:	464a      	mov	r2, r9
 800963c:	f000 fae8 	bl	8009c10 <memcpy>
 8009640:	89a3      	ldrh	r3, [r4, #12]
 8009642:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009646:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800964a:	81a3      	strh	r3, [r4, #12]
 800964c:	6126      	str	r6, [r4, #16]
 800964e:	6165      	str	r5, [r4, #20]
 8009650:	444e      	add	r6, r9
 8009652:	eba5 0509 	sub.w	r5, r5, r9
 8009656:	6026      	str	r6, [r4, #0]
 8009658:	60a5      	str	r5, [r4, #8]
 800965a:	463e      	mov	r6, r7
 800965c:	42be      	cmp	r6, r7
 800965e:	d900      	bls.n	8009662 <__ssputs_r+0x72>
 8009660:	463e      	mov	r6, r7
 8009662:	6820      	ldr	r0, [r4, #0]
 8009664:	4632      	mov	r2, r6
 8009666:	4641      	mov	r1, r8
 8009668:	f000 faa8 	bl	8009bbc <memmove>
 800966c:	68a3      	ldr	r3, [r4, #8]
 800966e:	1b9b      	subs	r3, r3, r6
 8009670:	60a3      	str	r3, [r4, #8]
 8009672:	6823      	ldr	r3, [r4, #0]
 8009674:	4433      	add	r3, r6
 8009676:	6023      	str	r3, [r4, #0]
 8009678:	2000      	movs	r0, #0
 800967a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800967e:	462a      	mov	r2, r5
 8009680:	f000 fad4 	bl	8009c2c <_realloc_r>
 8009684:	4606      	mov	r6, r0
 8009686:	2800      	cmp	r0, #0
 8009688:	d1e0      	bne.n	800964c <__ssputs_r+0x5c>
 800968a:	6921      	ldr	r1, [r4, #16]
 800968c:	4650      	mov	r0, sl
 800968e:	f7ff feb7 	bl	8009400 <_free_r>
 8009692:	230c      	movs	r3, #12
 8009694:	f8ca 3000 	str.w	r3, [sl]
 8009698:	89a3      	ldrh	r3, [r4, #12]
 800969a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800969e:	81a3      	strh	r3, [r4, #12]
 80096a0:	f04f 30ff 	mov.w	r0, #4294967295
 80096a4:	e7e9      	b.n	800967a <__ssputs_r+0x8a>
	...

080096a8 <_svfiprintf_r>:
 80096a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096ac:	4698      	mov	r8, r3
 80096ae:	898b      	ldrh	r3, [r1, #12]
 80096b0:	061b      	lsls	r3, r3, #24
 80096b2:	b09d      	sub	sp, #116	@ 0x74
 80096b4:	4607      	mov	r7, r0
 80096b6:	460d      	mov	r5, r1
 80096b8:	4614      	mov	r4, r2
 80096ba:	d510      	bpl.n	80096de <_svfiprintf_r+0x36>
 80096bc:	690b      	ldr	r3, [r1, #16]
 80096be:	b973      	cbnz	r3, 80096de <_svfiprintf_r+0x36>
 80096c0:	2140      	movs	r1, #64	@ 0x40
 80096c2:	f7ff ff09 	bl	80094d8 <_malloc_r>
 80096c6:	6028      	str	r0, [r5, #0]
 80096c8:	6128      	str	r0, [r5, #16]
 80096ca:	b930      	cbnz	r0, 80096da <_svfiprintf_r+0x32>
 80096cc:	230c      	movs	r3, #12
 80096ce:	603b      	str	r3, [r7, #0]
 80096d0:	f04f 30ff 	mov.w	r0, #4294967295
 80096d4:	b01d      	add	sp, #116	@ 0x74
 80096d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096da:	2340      	movs	r3, #64	@ 0x40
 80096dc:	616b      	str	r3, [r5, #20]
 80096de:	2300      	movs	r3, #0
 80096e0:	9309      	str	r3, [sp, #36]	@ 0x24
 80096e2:	2320      	movs	r3, #32
 80096e4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80096e8:	f8cd 800c 	str.w	r8, [sp, #12]
 80096ec:	2330      	movs	r3, #48	@ 0x30
 80096ee:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800988c <_svfiprintf_r+0x1e4>
 80096f2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80096f6:	f04f 0901 	mov.w	r9, #1
 80096fa:	4623      	mov	r3, r4
 80096fc:	469a      	mov	sl, r3
 80096fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009702:	b10a      	cbz	r2, 8009708 <_svfiprintf_r+0x60>
 8009704:	2a25      	cmp	r2, #37	@ 0x25
 8009706:	d1f9      	bne.n	80096fc <_svfiprintf_r+0x54>
 8009708:	ebba 0b04 	subs.w	fp, sl, r4
 800970c:	d00b      	beq.n	8009726 <_svfiprintf_r+0x7e>
 800970e:	465b      	mov	r3, fp
 8009710:	4622      	mov	r2, r4
 8009712:	4629      	mov	r1, r5
 8009714:	4638      	mov	r0, r7
 8009716:	f7ff ff6b 	bl	80095f0 <__ssputs_r>
 800971a:	3001      	adds	r0, #1
 800971c:	f000 80a7 	beq.w	800986e <_svfiprintf_r+0x1c6>
 8009720:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009722:	445a      	add	r2, fp
 8009724:	9209      	str	r2, [sp, #36]	@ 0x24
 8009726:	f89a 3000 	ldrb.w	r3, [sl]
 800972a:	2b00      	cmp	r3, #0
 800972c:	f000 809f 	beq.w	800986e <_svfiprintf_r+0x1c6>
 8009730:	2300      	movs	r3, #0
 8009732:	f04f 32ff 	mov.w	r2, #4294967295
 8009736:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800973a:	f10a 0a01 	add.w	sl, sl, #1
 800973e:	9304      	str	r3, [sp, #16]
 8009740:	9307      	str	r3, [sp, #28]
 8009742:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009746:	931a      	str	r3, [sp, #104]	@ 0x68
 8009748:	4654      	mov	r4, sl
 800974a:	2205      	movs	r2, #5
 800974c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009750:	484e      	ldr	r0, [pc, #312]	@ (800988c <_svfiprintf_r+0x1e4>)
 8009752:	f7f6 fd55 	bl	8000200 <memchr>
 8009756:	9a04      	ldr	r2, [sp, #16]
 8009758:	b9d8      	cbnz	r0, 8009792 <_svfiprintf_r+0xea>
 800975a:	06d0      	lsls	r0, r2, #27
 800975c:	bf44      	itt	mi
 800975e:	2320      	movmi	r3, #32
 8009760:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009764:	0711      	lsls	r1, r2, #28
 8009766:	bf44      	itt	mi
 8009768:	232b      	movmi	r3, #43	@ 0x2b
 800976a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800976e:	f89a 3000 	ldrb.w	r3, [sl]
 8009772:	2b2a      	cmp	r3, #42	@ 0x2a
 8009774:	d015      	beq.n	80097a2 <_svfiprintf_r+0xfa>
 8009776:	9a07      	ldr	r2, [sp, #28]
 8009778:	4654      	mov	r4, sl
 800977a:	2000      	movs	r0, #0
 800977c:	f04f 0c0a 	mov.w	ip, #10
 8009780:	4621      	mov	r1, r4
 8009782:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009786:	3b30      	subs	r3, #48	@ 0x30
 8009788:	2b09      	cmp	r3, #9
 800978a:	d94b      	bls.n	8009824 <_svfiprintf_r+0x17c>
 800978c:	b1b0      	cbz	r0, 80097bc <_svfiprintf_r+0x114>
 800978e:	9207      	str	r2, [sp, #28]
 8009790:	e014      	b.n	80097bc <_svfiprintf_r+0x114>
 8009792:	eba0 0308 	sub.w	r3, r0, r8
 8009796:	fa09 f303 	lsl.w	r3, r9, r3
 800979a:	4313      	orrs	r3, r2
 800979c:	9304      	str	r3, [sp, #16]
 800979e:	46a2      	mov	sl, r4
 80097a0:	e7d2      	b.n	8009748 <_svfiprintf_r+0xa0>
 80097a2:	9b03      	ldr	r3, [sp, #12]
 80097a4:	1d19      	adds	r1, r3, #4
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	9103      	str	r1, [sp, #12]
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	bfbb      	ittet	lt
 80097ae:	425b      	neglt	r3, r3
 80097b0:	f042 0202 	orrlt.w	r2, r2, #2
 80097b4:	9307      	strge	r3, [sp, #28]
 80097b6:	9307      	strlt	r3, [sp, #28]
 80097b8:	bfb8      	it	lt
 80097ba:	9204      	strlt	r2, [sp, #16]
 80097bc:	7823      	ldrb	r3, [r4, #0]
 80097be:	2b2e      	cmp	r3, #46	@ 0x2e
 80097c0:	d10a      	bne.n	80097d8 <_svfiprintf_r+0x130>
 80097c2:	7863      	ldrb	r3, [r4, #1]
 80097c4:	2b2a      	cmp	r3, #42	@ 0x2a
 80097c6:	d132      	bne.n	800982e <_svfiprintf_r+0x186>
 80097c8:	9b03      	ldr	r3, [sp, #12]
 80097ca:	1d1a      	adds	r2, r3, #4
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	9203      	str	r2, [sp, #12]
 80097d0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80097d4:	3402      	adds	r4, #2
 80097d6:	9305      	str	r3, [sp, #20]
 80097d8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800989c <_svfiprintf_r+0x1f4>
 80097dc:	7821      	ldrb	r1, [r4, #0]
 80097de:	2203      	movs	r2, #3
 80097e0:	4650      	mov	r0, sl
 80097e2:	f7f6 fd0d 	bl	8000200 <memchr>
 80097e6:	b138      	cbz	r0, 80097f8 <_svfiprintf_r+0x150>
 80097e8:	9b04      	ldr	r3, [sp, #16]
 80097ea:	eba0 000a 	sub.w	r0, r0, sl
 80097ee:	2240      	movs	r2, #64	@ 0x40
 80097f0:	4082      	lsls	r2, r0
 80097f2:	4313      	orrs	r3, r2
 80097f4:	3401      	adds	r4, #1
 80097f6:	9304      	str	r3, [sp, #16]
 80097f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80097fc:	4824      	ldr	r0, [pc, #144]	@ (8009890 <_svfiprintf_r+0x1e8>)
 80097fe:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009802:	2206      	movs	r2, #6
 8009804:	f7f6 fcfc 	bl	8000200 <memchr>
 8009808:	2800      	cmp	r0, #0
 800980a:	d036      	beq.n	800987a <_svfiprintf_r+0x1d2>
 800980c:	4b21      	ldr	r3, [pc, #132]	@ (8009894 <_svfiprintf_r+0x1ec>)
 800980e:	bb1b      	cbnz	r3, 8009858 <_svfiprintf_r+0x1b0>
 8009810:	9b03      	ldr	r3, [sp, #12]
 8009812:	3307      	adds	r3, #7
 8009814:	f023 0307 	bic.w	r3, r3, #7
 8009818:	3308      	adds	r3, #8
 800981a:	9303      	str	r3, [sp, #12]
 800981c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800981e:	4433      	add	r3, r6
 8009820:	9309      	str	r3, [sp, #36]	@ 0x24
 8009822:	e76a      	b.n	80096fa <_svfiprintf_r+0x52>
 8009824:	fb0c 3202 	mla	r2, ip, r2, r3
 8009828:	460c      	mov	r4, r1
 800982a:	2001      	movs	r0, #1
 800982c:	e7a8      	b.n	8009780 <_svfiprintf_r+0xd8>
 800982e:	2300      	movs	r3, #0
 8009830:	3401      	adds	r4, #1
 8009832:	9305      	str	r3, [sp, #20]
 8009834:	4619      	mov	r1, r3
 8009836:	f04f 0c0a 	mov.w	ip, #10
 800983a:	4620      	mov	r0, r4
 800983c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009840:	3a30      	subs	r2, #48	@ 0x30
 8009842:	2a09      	cmp	r2, #9
 8009844:	d903      	bls.n	800984e <_svfiprintf_r+0x1a6>
 8009846:	2b00      	cmp	r3, #0
 8009848:	d0c6      	beq.n	80097d8 <_svfiprintf_r+0x130>
 800984a:	9105      	str	r1, [sp, #20]
 800984c:	e7c4      	b.n	80097d8 <_svfiprintf_r+0x130>
 800984e:	fb0c 2101 	mla	r1, ip, r1, r2
 8009852:	4604      	mov	r4, r0
 8009854:	2301      	movs	r3, #1
 8009856:	e7f0      	b.n	800983a <_svfiprintf_r+0x192>
 8009858:	ab03      	add	r3, sp, #12
 800985a:	9300      	str	r3, [sp, #0]
 800985c:	462a      	mov	r2, r5
 800985e:	4b0e      	ldr	r3, [pc, #56]	@ (8009898 <_svfiprintf_r+0x1f0>)
 8009860:	a904      	add	r1, sp, #16
 8009862:	4638      	mov	r0, r7
 8009864:	f3af 8000 	nop.w
 8009868:	1c42      	adds	r2, r0, #1
 800986a:	4606      	mov	r6, r0
 800986c:	d1d6      	bne.n	800981c <_svfiprintf_r+0x174>
 800986e:	89ab      	ldrh	r3, [r5, #12]
 8009870:	065b      	lsls	r3, r3, #25
 8009872:	f53f af2d 	bmi.w	80096d0 <_svfiprintf_r+0x28>
 8009876:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009878:	e72c      	b.n	80096d4 <_svfiprintf_r+0x2c>
 800987a:	ab03      	add	r3, sp, #12
 800987c:	9300      	str	r3, [sp, #0]
 800987e:	462a      	mov	r2, r5
 8009880:	4b05      	ldr	r3, [pc, #20]	@ (8009898 <_svfiprintf_r+0x1f0>)
 8009882:	a904      	add	r1, sp, #16
 8009884:	4638      	mov	r0, r7
 8009886:	f000 f879 	bl	800997c <_printf_i>
 800988a:	e7ed      	b.n	8009868 <_svfiprintf_r+0x1c0>
 800988c:	08009f74 	.word	0x08009f74
 8009890:	08009f7e 	.word	0x08009f7e
 8009894:	00000000 	.word	0x00000000
 8009898:	080095f1 	.word	0x080095f1
 800989c:	08009f7a 	.word	0x08009f7a

080098a0 <_printf_common>:
 80098a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80098a4:	4616      	mov	r6, r2
 80098a6:	4698      	mov	r8, r3
 80098a8:	688a      	ldr	r2, [r1, #8]
 80098aa:	690b      	ldr	r3, [r1, #16]
 80098ac:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80098b0:	4293      	cmp	r3, r2
 80098b2:	bfb8      	it	lt
 80098b4:	4613      	movlt	r3, r2
 80098b6:	6033      	str	r3, [r6, #0]
 80098b8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80098bc:	4607      	mov	r7, r0
 80098be:	460c      	mov	r4, r1
 80098c0:	b10a      	cbz	r2, 80098c6 <_printf_common+0x26>
 80098c2:	3301      	adds	r3, #1
 80098c4:	6033      	str	r3, [r6, #0]
 80098c6:	6823      	ldr	r3, [r4, #0]
 80098c8:	0699      	lsls	r1, r3, #26
 80098ca:	bf42      	ittt	mi
 80098cc:	6833      	ldrmi	r3, [r6, #0]
 80098ce:	3302      	addmi	r3, #2
 80098d0:	6033      	strmi	r3, [r6, #0]
 80098d2:	6825      	ldr	r5, [r4, #0]
 80098d4:	f015 0506 	ands.w	r5, r5, #6
 80098d8:	d106      	bne.n	80098e8 <_printf_common+0x48>
 80098da:	f104 0a19 	add.w	sl, r4, #25
 80098de:	68e3      	ldr	r3, [r4, #12]
 80098e0:	6832      	ldr	r2, [r6, #0]
 80098e2:	1a9b      	subs	r3, r3, r2
 80098e4:	42ab      	cmp	r3, r5
 80098e6:	dc26      	bgt.n	8009936 <_printf_common+0x96>
 80098e8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80098ec:	6822      	ldr	r2, [r4, #0]
 80098ee:	3b00      	subs	r3, #0
 80098f0:	bf18      	it	ne
 80098f2:	2301      	movne	r3, #1
 80098f4:	0692      	lsls	r2, r2, #26
 80098f6:	d42b      	bmi.n	8009950 <_printf_common+0xb0>
 80098f8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80098fc:	4641      	mov	r1, r8
 80098fe:	4638      	mov	r0, r7
 8009900:	47c8      	blx	r9
 8009902:	3001      	adds	r0, #1
 8009904:	d01e      	beq.n	8009944 <_printf_common+0xa4>
 8009906:	6823      	ldr	r3, [r4, #0]
 8009908:	6922      	ldr	r2, [r4, #16]
 800990a:	f003 0306 	and.w	r3, r3, #6
 800990e:	2b04      	cmp	r3, #4
 8009910:	bf02      	ittt	eq
 8009912:	68e5      	ldreq	r5, [r4, #12]
 8009914:	6833      	ldreq	r3, [r6, #0]
 8009916:	1aed      	subeq	r5, r5, r3
 8009918:	68a3      	ldr	r3, [r4, #8]
 800991a:	bf0c      	ite	eq
 800991c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009920:	2500      	movne	r5, #0
 8009922:	4293      	cmp	r3, r2
 8009924:	bfc4      	itt	gt
 8009926:	1a9b      	subgt	r3, r3, r2
 8009928:	18ed      	addgt	r5, r5, r3
 800992a:	2600      	movs	r6, #0
 800992c:	341a      	adds	r4, #26
 800992e:	42b5      	cmp	r5, r6
 8009930:	d11a      	bne.n	8009968 <_printf_common+0xc8>
 8009932:	2000      	movs	r0, #0
 8009934:	e008      	b.n	8009948 <_printf_common+0xa8>
 8009936:	2301      	movs	r3, #1
 8009938:	4652      	mov	r2, sl
 800993a:	4641      	mov	r1, r8
 800993c:	4638      	mov	r0, r7
 800993e:	47c8      	blx	r9
 8009940:	3001      	adds	r0, #1
 8009942:	d103      	bne.n	800994c <_printf_common+0xac>
 8009944:	f04f 30ff 	mov.w	r0, #4294967295
 8009948:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800994c:	3501      	adds	r5, #1
 800994e:	e7c6      	b.n	80098de <_printf_common+0x3e>
 8009950:	18e1      	adds	r1, r4, r3
 8009952:	1c5a      	adds	r2, r3, #1
 8009954:	2030      	movs	r0, #48	@ 0x30
 8009956:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800995a:	4422      	add	r2, r4
 800995c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009960:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009964:	3302      	adds	r3, #2
 8009966:	e7c7      	b.n	80098f8 <_printf_common+0x58>
 8009968:	2301      	movs	r3, #1
 800996a:	4622      	mov	r2, r4
 800996c:	4641      	mov	r1, r8
 800996e:	4638      	mov	r0, r7
 8009970:	47c8      	blx	r9
 8009972:	3001      	adds	r0, #1
 8009974:	d0e6      	beq.n	8009944 <_printf_common+0xa4>
 8009976:	3601      	adds	r6, #1
 8009978:	e7d9      	b.n	800992e <_printf_common+0x8e>
	...

0800997c <_printf_i>:
 800997c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009980:	7e0f      	ldrb	r7, [r1, #24]
 8009982:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009984:	2f78      	cmp	r7, #120	@ 0x78
 8009986:	4691      	mov	r9, r2
 8009988:	4680      	mov	r8, r0
 800998a:	460c      	mov	r4, r1
 800998c:	469a      	mov	sl, r3
 800998e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009992:	d807      	bhi.n	80099a4 <_printf_i+0x28>
 8009994:	2f62      	cmp	r7, #98	@ 0x62
 8009996:	d80a      	bhi.n	80099ae <_printf_i+0x32>
 8009998:	2f00      	cmp	r7, #0
 800999a:	f000 80d2 	beq.w	8009b42 <_printf_i+0x1c6>
 800999e:	2f58      	cmp	r7, #88	@ 0x58
 80099a0:	f000 80b9 	beq.w	8009b16 <_printf_i+0x19a>
 80099a4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80099a8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80099ac:	e03a      	b.n	8009a24 <_printf_i+0xa8>
 80099ae:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80099b2:	2b15      	cmp	r3, #21
 80099b4:	d8f6      	bhi.n	80099a4 <_printf_i+0x28>
 80099b6:	a101      	add	r1, pc, #4	@ (adr r1, 80099bc <_printf_i+0x40>)
 80099b8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80099bc:	08009a15 	.word	0x08009a15
 80099c0:	08009a29 	.word	0x08009a29
 80099c4:	080099a5 	.word	0x080099a5
 80099c8:	080099a5 	.word	0x080099a5
 80099cc:	080099a5 	.word	0x080099a5
 80099d0:	080099a5 	.word	0x080099a5
 80099d4:	08009a29 	.word	0x08009a29
 80099d8:	080099a5 	.word	0x080099a5
 80099dc:	080099a5 	.word	0x080099a5
 80099e0:	080099a5 	.word	0x080099a5
 80099e4:	080099a5 	.word	0x080099a5
 80099e8:	08009b29 	.word	0x08009b29
 80099ec:	08009a53 	.word	0x08009a53
 80099f0:	08009ae3 	.word	0x08009ae3
 80099f4:	080099a5 	.word	0x080099a5
 80099f8:	080099a5 	.word	0x080099a5
 80099fc:	08009b4b 	.word	0x08009b4b
 8009a00:	080099a5 	.word	0x080099a5
 8009a04:	08009a53 	.word	0x08009a53
 8009a08:	080099a5 	.word	0x080099a5
 8009a0c:	080099a5 	.word	0x080099a5
 8009a10:	08009aeb 	.word	0x08009aeb
 8009a14:	6833      	ldr	r3, [r6, #0]
 8009a16:	1d1a      	adds	r2, r3, #4
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	6032      	str	r2, [r6, #0]
 8009a1c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009a20:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009a24:	2301      	movs	r3, #1
 8009a26:	e09d      	b.n	8009b64 <_printf_i+0x1e8>
 8009a28:	6833      	ldr	r3, [r6, #0]
 8009a2a:	6820      	ldr	r0, [r4, #0]
 8009a2c:	1d19      	adds	r1, r3, #4
 8009a2e:	6031      	str	r1, [r6, #0]
 8009a30:	0606      	lsls	r6, r0, #24
 8009a32:	d501      	bpl.n	8009a38 <_printf_i+0xbc>
 8009a34:	681d      	ldr	r5, [r3, #0]
 8009a36:	e003      	b.n	8009a40 <_printf_i+0xc4>
 8009a38:	0645      	lsls	r5, r0, #25
 8009a3a:	d5fb      	bpl.n	8009a34 <_printf_i+0xb8>
 8009a3c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009a40:	2d00      	cmp	r5, #0
 8009a42:	da03      	bge.n	8009a4c <_printf_i+0xd0>
 8009a44:	232d      	movs	r3, #45	@ 0x2d
 8009a46:	426d      	negs	r5, r5
 8009a48:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009a4c:	4859      	ldr	r0, [pc, #356]	@ (8009bb4 <_printf_i+0x238>)
 8009a4e:	230a      	movs	r3, #10
 8009a50:	e011      	b.n	8009a76 <_printf_i+0xfa>
 8009a52:	6821      	ldr	r1, [r4, #0]
 8009a54:	6833      	ldr	r3, [r6, #0]
 8009a56:	0608      	lsls	r0, r1, #24
 8009a58:	f853 5b04 	ldr.w	r5, [r3], #4
 8009a5c:	d402      	bmi.n	8009a64 <_printf_i+0xe8>
 8009a5e:	0649      	lsls	r1, r1, #25
 8009a60:	bf48      	it	mi
 8009a62:	b2ad      	uxthmi	r5, r5
 8009a64:	2f6f      	cmp	r7, #111	@ 0x6f
 8009a66:	4853      	ldr	r0, [pc, #332]	@ (8009bb4 <_printf_i+0x238>)
 8009a68:	6033      	str	r3, [r6, #0]
 8009a6a:	bf14      	ite	ne
 8009a6c:	230a      	movne	r3, #10
 8009a6e:	2308      	moveq	r3, #8
 8009a70:	2100      	movs	r1, #0
 8009a72:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009a76:	6866      	ldr	r6, [r4, #4]
 8009a78:	60a6      	str	r6, [r4, #8]
 8009a7a:	2e00      	cmp	r6, #0
 8009a7c:	bfa2      	ittt	ge
 8009a7e:	6821      	ldrge	r1, [r4, #0]
 8009a80:	f021 0104 	bicge.w	r1, r1, #4
 8009a84:	6021      	strge	r1, [r4, #0]
 8009a86:	b90d      	cbnz	r5, 8009a8c <_printf_i+0x110>
 8009a88:	2e00      	cmp	r6, #0
 8009a8a:	d04b      	beq.n	8009b24 <_printf_i+0x1a8>
 8009a8c:	4616      	mov	r6, r2
 8009a8e:	fbb5 f1f3 	udiv	r1, r5, r3
 8009a92:	fb03 5711 	mls	r7, r3, r1, r5
 8009a96:	5dc7      	ldrb	r7, [r0, r7]
 8009a98:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009a9c:	462f      	mov	r7, r5
 8009a9e:	42bb      	cmp	r3, r7
 8009aa0:	460d      	mov	r5, r1
 8009aa2:	d9f4      	bls.n	8009a8e <_printf_i+0x112>
 8009aa4:	2b08      	cmp	r3, #8
 8009aa6:	d10b      	bne.n	8009ac0 <_printf_i+0x144>
 8009aa8:	6823      	ldr	r3, [r4, #0]
 8009aaa:	07df      	lsls	r7, r3, #31
 8009aac:	d508      	bpl.n	8009ac0 <_printf_i+0x144>
 8009aae:	6923      	ldr	r3, [r4, #16]
 8009ab0:	6861      	ldr	r1, [r4, #4]
 8009ab2:	4299      	cmp	r1, r3
 8009ab4:	bfde      	ittt	le
 8009ab6:	2330      	movle	r3, #48	@ 0x30
 8009ab8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009abc:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009ac0:	1b92      	subs	r2, r2, r6
 8009ac2:	6122      	str	r2, [r4, #16]
 8009ac4:	f8cd a000 	str.w	sl, [sp]
 8009ac8:	464b      	mov	r3, r9
 8009aca:	aa03      	add	r2, sp, #12
 8009acc:	4621      	mov	r1, r4
 8009ace:	4640      	mov	r0, r8
 8009ad0:	f7ff fee6 	bl	80098a0 <_printf_common>
 8009ad4:	3001      	adds	r0, #1
 8009ad6:	d14a      	bne.n	8009b6e <_printf_i+0x1f2>
 8009ad8:	f04f 30ff 	mov.w	r0, #4294967295
 8009adc:	b004      	add	sp, #16
 8009ade:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ae2:	6823      	ldr	r3, [r4, #0]
 8009ae4:	f043 0320 	orr.w	r3, r3, #32
 8009ae8:	6023      	str	r3, [r4, #0]
 8009aea:	4833      	ldr	r0, [pc, #204]	@ (8009bb8 <_printf_i+0x23c>)
 8009aec:	2778      	movs	r7, #120	@ 0x78
 8009aee:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009af2:	6823      	ldr	r3, [r4, #0]
 8009af4:	6831      	ldr	r1, [r6, #0]
 8009af6:	061f      	lsls	r7, r3, #24
 8009af8:	f851 5b04 	ldr.w	r5, [r1], #4
 8009afc:	d402      	bmi.n	8009b04 <_printf_i+0x188>
 8009afe:	065f      	lsls	r7, r3, #25
 8009b00:	bf48      	it	mi
 8009b02:	b2ad      	uxthmi	r5, r5
 8009b04:	6031      	str	r1, [r6, #0]
 8009b06:	07d9      	lsls	r1, r3, #31
 8009b08:	bf44      	itt	mi
 8009b0a:	f043 0320 	orrmi.w	r3, r3, #32
 8009b0e:	6023      	strmi	r3, [r4, #0]
 8009b10:	b11d      	cbz	r5, 8009b1a <_printf_i+0x19e>
 8009b12:	2310      	movs	r3, #16
 8009b14:	e7ac      	b.n	8009a70 <_printf_i+0xf4>
 8009b16:	4827      	ldr	r0, [pc, #156]	@ (8009bb4 <_printf_i+0x238>)
 8009b18:	e7e9      	b.n	8009aee <_printf_i+0x172>
 8009b1a:	6823      	ldr	r3, [r4, #0]
 8009b1c:	f023 0320 	bic.w	r3, r3, #32
 8009b20:	6023      	str	r3, [r4, #0]
 8009b22:	e7f6      	b.n	8009b12 <_printf_i+0x196>
 8009b24:	4616      	mov	r6, r2
 8009b26:	e7bd      	b.n	8009aa4 <_printf_i+0x128>
 8009b28:	6833      	ldr	r3, [r6, #0]
 8009b2a:	6825      	ldr	r5, [r4, #0]
 8009b2c:	6961      	ldr	r1, [r4, #20]
 8009b2e:	1d18      	adds	r0, r3, #4
 8009b30:	6030      	str	r0, [r6, #0]
 8009b32:	062e      	lsls	r6, r5, #24
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	d501      	bpl.n	8009b3c <_printf_i+0x1c0>
 8009b38:	6019      	str	r1, [r3, #0]
 8009b3a:	e002      	b.n	8009b42 <_printf_i+0x1c6>
 8009b3c:	0668      	lsls	r0, r5, #25
 8009b3e:	d5fb      	bpl.n	8009b38 <_printf_i+0x1bc>
 8009b40:	8019      	strh	r1, [r3, #0]
 8009b42:	2300      	movs	r3, #0
 8009b44:	6123      	str	r3, [r4, #16]
 8009b46:	4616      	mov	r6, r2
 8009b48:	e7bc      	b.n	8009ac4 <_printf_i+0x148>
 8009b4a:	6833      	ldr	r3, [r6, #0]
 8009b4c:	1d1a      	adds	r2, r3, #4
 8009b4e:	6032      	str	r2, [r6, #0]
 8009b50:	681e      	ldr	r6, [r3, #0]
 8009b52:	6862      	ldr	r2, [r4, #4]
 8009b54:	2100      	movs	r1, #0
 8009b56:	4630      	mov	r0, r6
 8009b58:	f7f6 fb52 	bl	8000200 <memchr>
 8009b5c:	b108      	cbz	r0, 8009b62 <_printf_i+0x1e6>
 8009b5e:	1b80      	subs	r0, r0, r6
 8009b60:	6060      	str	r0, [r4, #4]
 8009b62:	6863      	ldr	r3, [r4, #4]
 8009b64:	6123      	str	r3, [r4, #16]
 8009b66:	2300      	movs	r3, #0
 8009b68:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009b6c:	e7aa      	b.n	8009ac4 <_printf_i+0x148>
 8009b6e:	6923      	ldr	r3, [r4, #16]
 8009b70:	4632      	mov	r2, r6
 8009b72:	4649      	mov	r1, r9
 8009b74:	4640      	mov	r0, r8
 8009b76:	47d0      	blx	sl
 8009b78:	3001      	adds	r0, #1
 8009b7a:	d0ad      	beq.n	8009ad8 <_printf_i+0x15c>
 8009b7c:	6823      	ldr	r3, [r4, #0]
 8009b7e:	079b      	lsls	r3, r3, #30
 8009b80:	d413      	bmi.n	8009baa <_printf_i+0x22e>
 8009b82:	68e0      	ldr	r0, [r4, #12]
 8009b84:	9b03      	ldr	r3, [sp, #12]
 8009b86:	4298      	cmp	r0, r3
 8009b88:	bfb8      	it	lt
 8009b8a:	4618      	movlt	r0, r3
 8009b8c:	e7a6      	b.n	8009adc <_printf_i+0x160>
 8009b8e:	2301      	movs	r3, #1
 8009b90:	4632      	mov	r2, r6
 8009b92:	4649      	mov	r1, r9
 8009b94:	4640      	mov	r0, r8
 8009b96:	47d0      	blx	sl
 8009b98:	3001      	adds	r0, #1
 8009b9a:	d09d      	beq.n	8009ad8 <_printf_i+0x15c>
 8009b9c:	3501      	adds	r5, #1
 8009b9e:	68e3      	ldr	r3, [r4, #12]
 8009ba0:	9903      	ldr	r1, [sp, #12]
 8009ba2:	1a5b      	subs	r3, r3, r1
 8009ba4:	42ab      	cmp	r3, r5
 8009ba6:	dcf2      	bgt.n	8009b8e <_printf_i+0x212>
 8009ba8:	e7eb      	b.n	8009b82 <_printf_i+0x206>
 8009baa:	2500      	movs	r5, #0
 8009bac:	f104 0619 	add.w	r6, r4, #25
 8009bb0:	e7f5      	b.n	8009b9e <_printf_i+0x222>
 8009bb2:	bf00      	nop
 8009bb4:	08009f85 	.word	0x08009f85
 8009bb8:	08009f96 	.word	0x08009f96

08009bbc <memmove>:
 8009bbc:	4288      	cmp	r0, r1
 8009bbe:	b510      	push	{r4, lr}
 8009bc0:	eb01 0402 	add.w	r4, r1, r2
 8009bc4:	d902      	bls.n	8009bcc <memmove+0x10>
 8009bc6:	4284      	cmp	r4, r0
 8009bc8:	4623      	mov	r3, r4
 8009bca:	d807      	bhi.n	8009bdc <memmove+0x20>
 8009bcc:	1e43      	subs	r3, r0, #1
 8009bce:	42a1      	cmp	r1, r4
 8009bd0:	d008      	beq.n	8009be4 <memmove+0x28>
 8009bd2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009bd6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009bda:	e7f8      	b.n	8009bce <memmove+0x12>
 8009bdc:	4402      	add	r2, r0
 8009bde:	4601      	mov	r1, r0
 8009be0:	428a      	cmp	r2, r1
 8009be2:	d100      	bne.n	8009be6 <memmove+0x2a>
 8009be4:	bd10      	pop	{r4, pc}
 8009be6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009bea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009bee:	e7f7      	b.n	8009be0 <memmove+0x24>

08009bf0 <_sbrk_r>:
 8009bf0:	b538      	push	{r3, r4, r5, lr}
 8009bf2:	4d06      	ldr	r5, [pc, #24]	@ (8009c0c <_sbrk_r+0x1c>)
 8009bf4:	2300      	movs	r3, #0
 8009bf6:	4604      	mov	r4, r0
 8009bf8:	4608      	mov	r0, r1
 8009bfa:	602b      	str	r3, [r5, #0]
 8009bfc:	f7f6 fef2 	bl	80009e4 <_sbrk>
 8009c00:	1c43      	adds	r3, r0, #1
 8009c02:	d102      	bne.n	8009c0a <_sbrk_r+0x1a>
 8009c04:	682b      	ldr	r3, [r5, #0]
 8009c06:	b103      	cbz	r3, 8009c0a <_sbrk_r+0x1a>
 8009c08:	6023      	str	r3, [r4, #0]
 8009c0a:	bd38      	pop	{r3, r4, r5, pc}
 8009c0c:	20002634 	.word	0x20002634

08009c10 <memcpy>:
 8009c10:	440a      	add	r2, r1
 8009c12:	4291      	cmp	r1, r2
 8009c14:	f100 33ff 	add.w	r3, r0, #4294967295
 8009c18:	d100      	bne.n	8009c1c <memcpy+0xc>
 8009c1a:	4770      	bx	lr
 8009c1c:	b510      	push	{r4, lr}
 8009c1e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009c22:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009c26:	4291      	cmp	r1, r2
 8009c28:	d1f9      	bne.n	8009c1e <memcpy+0xe>
 8009c2a:	bd10      	pop	{r4, pc}

08009c2c <_realloc_r>:
 8009c2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c30:	4680      	mov	r8, r0
 8009c32:	4615      	mov	r5, r2
 8009c34:	460c      	mov	r4, r1
 8009c36:	b921      	cbnz	r1, 8009c42 <_realloc_r+0x16>
 8009c38:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009c3c:	4611      	mov	r1, r2
 8009c3e:	f7ff bc4b 	b.w	80094d8 <_malloc_r>
 8009c42:	b92a      	cbnz	r2, 8009c50 <_realloc_r+0x24>
 8009c44:	f7ff fbdc 	bl	8009400 <_free_r>
 8009c48:	2400      	movs	r4, #0
 8009c4a:	4620      	mov	r0, r4
 8009c4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c50:	f000 f81a 	bl	8009c88 <_malloc_usable_size_r>
 8009c54:	4285      	cmp	r5, r0
 8009c56:	4606      	mov	r6, r0
 8009c58:	d802      	bhi.n	8009c60 <_realloc_r+0x34>
 8009c5a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8009c5e:	d8f4      	bhi.n	8009c4a <_realloc_r+0x1e>
 8009c60:	4629      	mov	r1, r5
 8009c62:	4640      	mov	r0, r8
 8009c64:	f7ff fc38 	bl	80094d8 <_malloc_r>
 8009c68:	4607      	mov	r7, r0
 8009c6a:	2800      	cmp	r0, #0
 8009c6c:	d0ec      	beq.n	8009c48 <_realloc_r+0x1c>
 8009c6e:	42b5      	cmp	r5, r6
 8009c70:	462a      	mov	r2, r5
 8009c72:	4621      	mov	r1, r4
 8009c74:	bf28      	it	cs
 8009c76:	4632      	movcs	r2, r6
 8009c78:	f7ff ffca 	bl	8009c10 <memcpy>
 8009c7c:	4621      	mov	r1, r4
 8009c7e:	4640      	mov	r0, r8
 8009c80:	f7ff fbbe 	bl	8009400 <_free_r>
 8009c84:	463c      	mov	r4, r7
 8009c86:	e7e0      	b.n	8009c4a <_realloc_r+0x1e>

08009c88 <_malloc_usable_size_r>:
 8009c88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009c8c:	1f18      	subs	r0, r3, #4
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	bfbc      	itt	lt
 8009c92:	580b      	ldrlt	r3, [r1, r0]
 8009c94:	18c0      	addlt	r0, r0, r3
 8009c96:	4770      	bx	lr

08009c98 <_init>:
 8009c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c9a:	bf00      	nop
 8009c9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c9e:	bc08      	pop	{r3}
 8009ca0:	469e      	mov	lr, r3
 8009ca2:	4770      	bx	lr

08009ca4 <_fini>:
 8009ca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ca6:	bf00      	nop
 8009ca8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009caa:	bc08      	pop	{r3}
 8009cac:	469e      	mov	lr, r3
 8009cae:	4770      	bx	lr
