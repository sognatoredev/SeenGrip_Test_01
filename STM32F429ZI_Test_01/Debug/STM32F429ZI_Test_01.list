
STM32F429ZI_Test_01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ad84  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000012c  0800af34  0800af34  0000bf34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b060  0800b060  0000d158  2**0
                  CONTENTS
  4 .ARM          00000008  0800b060  0800b060  0000c060  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b068  0800b068  0000d158  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b068  0800b068  0000c068  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b06c  0800b06c  0000c06c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000158  20000000  0800b070  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000d158  2**0
                  CONTENTS
 10 .bss          0000d784  20000158  20000158  0000d158  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000d8dc  2000d8dc  0000d158  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000d158  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a237  00000000  00000000  0000d188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004662  00000000  00000000  000273bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001648  00000000  00000000  0002ba28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000010fb  00000000  00000000  0002d070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000293b3  00000000  00000000  0002e16b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f00c  00000000  00000000  0005751e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e0c74  00000000  00000000  0007652a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0015719e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000648c  00000000  00000000  001571e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006d  00000000  00000000  0015d670  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000158 	.word	0x20000158
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800af1c 	.word	0x0800af1c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000015c 	.word	0x2000015c
 80001ec:	0800af1c 	.word	0x0800af1c

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b96a 	b.w	800058c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	460c      	mov	r4, r1
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d14e      	bne.n	800037a <__udivmoddi4+0xaa>
 80002dc:	4694      	mov	ip, r2
 80002de:	458c      	cmp	ip, r1
 80002e0:	4686      	mov	lr, r0
 80002e2:	fab2 f282 	clz	r2, r2
 80002e6:	d962      	bls.n	80003ae <__udivmoddi4+0xde>
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0320 	rsb	r3, r2, #32
 80002ee:	4091      	lsls	r1, r2
 80002f0:	fa20 f303 	lsr.w	r3, r0, r3
 80002f4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002f8:	4319      	orrs	r1, r3
 80002fa:	fa00 fe02 	lsl.w	lr, r0, r2
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f f68c 	uxth.w	r6, ip
 8000306:	fbb1 f4f7 	udiv	r4, r1, r7
 800030a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030e:	fb07 1114 	mls	r1, r7, r4, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb04 f106 	mul.w	r1, r4, r6
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f104 30ff 	add.w	r0, r4, #4294967295
 8000326:	f080 8112 	bcs.w	800054e <__udivmoddi4+0x27e>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 810f 	bls.w	800054e <__udivmoddi4+0x27e>
 8000330:	3c02      	subs	r4, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	fa1f f38e 	uxth.w	r3, lr
 800033a:	fbb1 f0f7 	udiv	r0, r1, r7
 800033e:	fb07 1110 	mls	r1, r7, r0, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb00 f606 	mul.w	r6, r0, r6
 800034a:	429e      	cmp	r6, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x94>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f100 31ff 	add.w	r1, r0, #4294967295
 8000356:	f080 80fc 	bcs.w	8000552 <__udivmoddi4+0x282>
 800035a:	429e      	cmp	r6, r3
 800035c:	f240 80f9 	bls.w	8000552 <__udivmoddi4+0x282>
 8000360:	4463      	add	r3, ip
 8000362:	3802      	subs	r0, #2
 8000364:	1b9b      	subs	r3, r3, r6
 8000366:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800036a:	2100      	movs	r1, #0
 800036c:	b11d      	cbz	r5, 8000376 <__udivmoddi4+0xa6>
 800036e:	40d3      	lsrs	r3, r2
 8000370:	2200      	movs	r2, #0
 8000372:	e9c5 3200 	strd	r3, r2, [r5]
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d905      	bls.n	800038a <__udivmoddi4+0xba>
 800037e:	b10d      	cbz	r5, 8000384 <__udivmoddi4+0xb4>
 8000380:	e9c5 0100 	strd	r0, r1, [r5]
 8000384:	2100      	movs	r1, #0
 8000386:	4608      	mov	r0, r1
 8000388:	e7f5      	b.n	8000376 <__udivmoddi4+0xa6>
 800038a:	fab3 f183 	clz	r1, r3
 800038e:	2900      	cmp	r1, #0
 8000390:	d146      	bne.n	8000420 <__udivmoddi4+0x150>
 8000392:	42a3      	cmp	r3, r4
 8000394:	d302      	bcc.n	800039c <__udivmoddi4+0xcc>
 8000396:	4290      	cmp	r0, r2
 8000398:	f0c0 80f0 	bcc.w	800057c <__udivmoddi4+0x2ac>
 800039c:	1a86      	subs	r6, r0, r2
 800039e:	eb64 0303 	sbc.w	r3, r4, r3
 80003a2:	2001      	movs	r0, #1
 80003a4:	2d00      	cmp	r5, #0
 80003a6:	d0e6      	beq.n	8000376 <__udivmoddi4+0xa6>
 80003a8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ac:	e7e3      	b.n	8000376 <__udivmoddi4+0xa6>
 80003ae:	2a00      	cmp	r2, #0
 80003b0:	f040 8090 	bne.w	80004d4 <__udivmoddi4+0x204>
 80003b4:	eba1 040c 	sub.w	r4, r1, ip
 80003b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003bc:	fa1f f78c 	uxth.w	r7, ip
 80003c0:	2101      	movs	r1, #1
 80003c2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003c6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ca:	fb08 4416 	mls	r4, r8, r6, r4
 80003ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003d2:	fb07 f006 	mul.w	r0, r7, r6
 80003d6:	4298      	cmp	r0, r3
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x11c>
 80003da:	eb1c 0303 	adds.w	r3, ip, r3
 80003de:	f106 34ff 	add.w	r4, r6, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x11a>
 80003e4:	4298      	cmp	r0, r3
 80003e6:	f200 80cd 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003ea:	4626      	mov	r6, r4
 80003ec:	1a1c      	subs	r4, r3, r0
 80003ee:	fa1f f38e 	uxth.w	r3, lr
 80003f2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003f6:	fb08 4410 	mls	r4, r8, r0, r4
 80003fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003fe:	fb00 f707 	mul.w	r7, r0, r7
 8000402:	429f      	cmp	r7, r3
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x148>
 8000406:	eb1c 0303 	adds.w	r3, ip, r3
 800040a:	f100 34ff 	add.w	r4, r0, #4294967295
 800040e:	d202      	bcs.n	8000416 <__udivmoddi4+0x146>
 8000410:	429f      	cmp	r7, r3
 8000412:	f200 80b0 	bhi.w	8000576 <__udivmoddi4+0x2a6>
 8000416:	4620      	mov	r0, r4
 8000418:	1bdb      	subs	r3, r3, r7
 800041a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800041e:	e7a5      	b.n	800036c <__udivmoddi4+0x9c>
 8000420:	f1c1 0620 	rsb	r6, r1, #32
 8000424:	408b      	lsls	r3, r1
 8000426:	fa22 f706 	lsr.w	r7, r2, r6
 800042a:	431f      	orrs	r7, r3
 800042c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000430:	fa04 f301 	lsl.w	r3, r4, r1
 8000434:	ea43 030c 	orr.w	r3, r3, ip
 8000438:	40f4      	lsrs	r4, r6
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	0c38      	lsrs	r0, r7, #16
 8000440:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000444:	fbb4 fef0 	udiv	lr, r4, r0
 8000448:	fa1f fc87 	uxth.w	ip, r7
 800044c:	fb00 441e 	mls	r4, r0, lr, r4
 8000450:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000454:	fb0e f90c 	mul.w	r9, lr, ip
 8000458:	45a1      	cmp	r9, r4
 800045a:	fa02 f201 	lsl.w	r2, r2, r1
 800045e:	d90a      	bls.n	8000476 <__udivmoddi4+0x1a6>
 8000460:	193c      	adds	r4, r7, r4
 8000462:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000466:	f080 8084 	bcs.w	8000572 <__udivmoddi4+0x2a2>
 800046a:	45a1      	cmp	r9, r4
 800046c:	f240 8081 	bls.w	8000572 <__udivmoddi4+0x2a2>
 8000470:	f1ae 0e02 	sub.w	lr, lr, #2
 8000474:	443c      	add	r4, r7
 8000476:	eba4 0409 	sub.w	r4, r4, r9
 800047a:	fa1f f983 	uxth.w	r9, r3
 800047e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000482:	fb00 4413 	mls	r4, r0, r3, r4
 8000486:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048a:	fb03 fc0c 	mul.w	ip, r3, ip
 800048e:	45a4      	cmp	ip, r4
 8000490:	d907      	bls.n	80004a2 <__udivmoddi4+0x1d2>
 8000492:	193c      	adds	r4, r7, r4
 8000494:	f103 30ff 	add.w	r0, r3, #4294967295
 8000498:	d267      	bcs.n	800056a <__udivmoddi4+0x29a>
 800049a:	45a4      	cmp	ip, r4
 800049c:	d965      	bls.n	800056a <__udivmoddi4+0x29a>
 800049e:	3b02      	subs	r3, #2
 80004a0:	443c      	add	r4, r7
 80004a2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004a6:	fba0 9302 	umull	r9, r3, r0, r2
 80004aa:	eba4 040c 	sub.w	r4, r4, ip
 80004ae:	429c      	cmp	r4, r3
 80004b0:	46ce      	mov	lr, r9
 80004b2:	469c      	mov	ip, r3
 80004b4:	d351      	bcc.n	800055a <__udivmoddi4+0x28a>
 80004b6:	d04e      	beq.n	8000556 <__udivmoddi4+0x286>
 80004b8:	b155      	cbz	r5, 80004d0 <__udivmoddi4+0x200>
 80004ba:	ebb8 030e 	subs.w	r3, r8, lr
 80004be:	eb64 040c 	sbc.w	r4, r4, ip
 80004c2:	fa04 f606 	lsl.w	r6, r4, r6
 80004c6:	40cb      	lsrs	r3, r1
 80004c8:	431e      	orrs	r6, r3
 80004ca:	40cc      	lsrs	r4, r1
 80004cc:	e9c5 6400 	strd	r6, r4, [r5]
 80004d0:	2100      	movs	r1, #0
 80004d2:	e750      	b.n	8000376 <__udivmoddi4+0xa6>
 80004d4:	f1c2 0320 	rsb	r3, r2, #32
 80004d8:	fa20 f103 	lsr.w	r1, r0, r3
 80004dc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e0:	fa24 f303 	lsr.w	r3, r4, r3
 80004e4:	4094      	lsls	r4, r2
 80004e6:	430c      	orrs	r4, r1
 80004e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ec:	fa00 fe02 	lsl.w	lr, r0, r2
 80004f0:	fa1f f78c 	uxth.w	r7, ip
 80004f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004f8:	fb08 3110 	mls	r1, r8, r0, r3
 80004fc:	0c23      	lsrs	r3, r4, #16
 80004fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000502:	fb00 f107 	mul.w	r1, r0, r7
 8000506:	4299      	cmp	r1, r3
 8000508:	d908      	bls.n	800051c <__udivmoddi4+0x24c>
 800050a:	eb1c 0303 	adds.w	r3, ip, r3
 800050e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000512:	d22c      	bcs.n	800056e <__udivmoddi4+0x29e>
 8000514:	4299      	cmp	r1, r3
 8000516:	d92a      	bls.n	800056e <__udivmoddi4+0x29e>
 8000518:	3802      	subs	r0, #2
 800051a:	4463      	add	r3, ip
 800051c:	1a5b      	subs	r3, r3, r1
 800051e:	b2a4      	uxth	r4, r4
 8000520:	fbb3 f1f8 	udiv	r1, r3, r8
 8000524:	fb08 3311 	mls	r3, r8, r1, r3
 8000528:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800052c:	fb01 f307 	mul.w	r3, r1, r7
 8000530:	42a3      	cmp	r3, r4
 8000532:	d908      	bls.n	8000546 <__udivmoddi4+0x276>
 8000534:	eb1c 0404 	adds.w	r4, ip, r4
 8000538:	f101 36ff 	add.w	r6, r1, #4294967295
 800053c:	d213      	bcs.n	8000566 <__udivmoddi4+0x296>
 800053e:	42a3      	cmp	r3, r4
 8000540:	d911      	bls.n	8000566 <__udivmoddi4+0x296>
 8000542:	3902      	subs	r1, #2
 8000544:	4464      	add	r4, ip
 8000546:	1ae4      	subs	r4, r4, r3
 8000548:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800054c:	e739      	b.n	80003c2 <__udivmoddi4+0xf2>
 800054e:	4604      	mov	r4, r0
 8000550:	e6f0      	b.n	8000334 <__udivmoddi4+0x64>
 8000552:	4608      	mov	r0, r1
 8000554:	e706      	b.n	8000364 <__udivmoddi4+0x94>
 8000556:	45c8      	cmp	r8, r9
 8000558:	d2ae      	bcs.n	80004b8 <__udivmoddi4+0x1e8>
 800055a:	ebb9 0e02 	subs.w	lr, r9, r2
 800055e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000562:	3801      	subs	r0, #1
 8000564:	e7a8      	b.n	80004b8 <__udivmoddi4+0x1e8>
 8000566:	4631      	mov	r1, r6
 8000568:	e7ed      	b.n	8000546 <__udivmoddi4+0x276>
 800056a:	4603      	mov	r3, r0
 800056c:	e799      	b.n	80004a2 <__udivmoddi4+0x1d2>
 800056e:	4630      	mov	r0, r6
 8000570:	e7d4      	b.n	800051c <__udivmoddi4+0x24c>
 8000572:	46d6      	mov	lr, sl
 8000574:	e77f      	b.n	8000476 <__udivmoddi4+0x1a6>
 8000576:	4463      	add	r3, ip
 8000578:	3802      	subs	r0, #2
 800057a:	e74d      	b.n	8000418 <__udivmoddi4+0x148>
 800057c:	4606      	mov	r6, r0
 800057e:	4623      	mov	r3, r4
 8000580:	4608      	mov	r0, r1
 8000582:	e70f      	b.n	80003a4 <__udivmoddi4+0xd4>
 8000584:	3e02      	subs	r6, #2
 8000586:	4463      	add	r3, ip
 8000588:	e730      	b.n	80003ec <__udivmoddi4+0x11c>
 800058a:	bf00      	nop

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PC9   ------> RCC_MCO_2
*/
void MX_GPIO_Init(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b08a      	sub	sp, #40	@ 0x28
 8000594:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000596:	f107 0314 	add.w	r3, r7, #20
 800059a:	2200      	movs	r2, #0
 800059c:	601a      	str	r2, [r3, #0]
 800059e:	605a      	str	r2, [r3, #4]
 80005a0:	609a      	str	r2, [r3, #8]
 80005a2:	60da      	str	r2, [r3, #12]
 80005a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005a6:	2300      	movs	r3, #0
 80005a8:	613b      	str	r3, [r7, #16]
 80005aa:	4b56      	ldr	r3, [pc, #344]	@ (8000704 <MX_GPIO_Init+0x174>)
 80005ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ae:	4a55      	ldr	r2, [pc, #340]	@ (8000704 <MX_GPIO_Init+0x174>)
 80005b0:	f043 0304 	orr.w	r3, r3, #4
 80005b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80005b6:	4b53      	ldr	r3, [pc, #332]	@ (8000704 <MX_GPIO_Init+0x174>)
 80005b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ba:	f003 0304 	and.w	r3, r3, #4
 80005be:	613b      	str	r3, [r7, #16]
 80005c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005c2:	2300      	movs	r3, #0
 80005c4:	60fb      	str	r3, [r7, #12]
 80005c6:	4b4f      	ldr	r3, [pc, #316]	@ (8000704 <MX_GPIO_Init+0x174>)
 80005c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ca:	4a4e      	ldr	r2, [pc, #312]	@ (8000704 <MX_GPIO_Init+0x174>)
 80005cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80005d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80005d2:	4b4c      	ldr	r3, [pc, #304]	@ (8000704 <MX_GPIO_Init+0x174>)
 80005d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80005da:	60fb      	str	r3, [r7, #12]
 80005dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005de:	2300      	movs	r3, #0
 80005e0:	60bb      	str	r3, [r7, #8]
 80005e2:	4b48      	ldr	r3, [pc, #288]	@ (8000704 <MX_GPIO_Init+0x174>)
 80005e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005e6:	4a47      	ldr	r2, [pc, #284]	@ (8000704 <MX_GPIO_Init+0x174>)
 80005e8:	f043 0301 	orr.w	r3, r3, #1
 80005ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80005ee:	4b45      	ldr	r3, [pc, #276]	@ (8000704 <MX_GPIO_Init+0x174>)
 80005f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005f2:	f003 0301 	and.w	r3, r3, #1
 80005f6:	60bb      	str	r3, [r7, #8]
 80005f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005fa:	2300      	movs	r3, #0
 80005fc:	607b      	str	r3, [r7, #4]
 80005fe:	4b41      	ldr	r3, [pc, #260]	@ (8000704 <MX_GPIO_Init+0x174>)
 8000600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000602:	4a40      	ldr	r2, [pc, #256]	@ (8000704 <MX_GPIO_Init+0x174>)
 8000604:	f043 0302 	orr.w	r3, r3, #2
 8000608:	6313      	str	r3, [r2, #48]	@ 0x30
 800060a:	4b3e      	ldr	r3, [pc, #248]	@ (8000704 <MX_GPIO_Init+0x174>)
 800060c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800060e:	f003 0302 	and.w	r3, r3, #2
 8000612:	607b      	str	r3, [r7, #4]
 8000614:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000616:	2300      	movs	r3, #0
 8000618:	603b      	str	r3, [r7, #0]
 800061a:	4b3a      	ldr	r3, [pc, #232]	@ (8000704 <MX_GPIO_Init+0x174>)
 800061c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800061e:	4a39      	ldr	r2, [pc, #228]	@ (8000704 <MX_GPIO_Init+0x174>)
 8000620:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000624:	6313      	str	r3, [r2, #48]	@ 0x30
 8000626:	4b37      	ldr	r3, [pc, #220]	@ (8000704 <MX_GPIO_Init+0x174>)
 8000628:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800062a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800062e:	603b      	str	r3, [r7, #0]
 8000630:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_7, GPIO_PIN_RESET);
 8000632:	2200      	movs	r2, #0
 8000634:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000638:	4833      	ldr	r0, [pc, #204]	@ (8000708 <MX_GPIO_Init+0x178>)
 800063a:	f001 fcfd 	bl	8002038 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 800063e:	2200      	movs	r2, #0
 8000640:	2160      	movs	r1, #96	@ 0x60
 8000642:	4832      	ldr	r0, [pc, #200]	@ (800070c <MX_GPIO_Init+0x17c>)
 8000644:	f001 fcf8 	bl	8002038 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000648:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800064c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800064e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000652:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000654:	2300      	movs	r3, #0
 8000656:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000658:	f107 0314 	add.w	r3, r7, #20
 800065c:	4619      	mov	r1, r3
 800065e:	482c      	ldr	r0, [pc, #176]	@ (8000710 <MX_GPIO_Init+0x180>)
 8000660:	f001 fb3e 	bl	8001ce0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB14 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_7;
 8000664:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000668:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800066a:	2301      	movs	r3, #1
 800066c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800066e:	2300      	movs	r3, #0
 8000670:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000672:	2300      	movs	r3, #0
 8000674:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000676:	f107 0314 	add.w	r3, r7, #20
 800067a:	4619      	mov	r1, r3
 800067c:	4822      	ldr	r0, [pc, #136]	@ (8000708 <MX_GPIO_Init+0x178>)
 800067e:	f001 fb2f 	bl	8001ce0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG5 PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000682:	2360      	movs	r3, #96	@ 0x60
 8000684:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000686:	2301      	movs	r3, #1
 8000688:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800068a:	2300      	movs	r3, #0
 800068c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800068e:	2303      	movs	r3, #3
 8000690:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000692:	f107 0314 	add.w	r3, r7, #20
 8000696:	4619      	mov	r1, r3
 8000698:	481c      	ldr	r0, [pc, #112]	@ (800070c <MX_GPIO_Init+0x17c>)
 800069a:	f001 fb21 	bl	8001ce0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800069e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80006a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006a4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80006a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006aa:	2300      	movs	r3, #0
 80006ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80006ae:	f107 0314 	add.w	r3, r7, #20
 80006b2:	4619      	mov	r1, r3
 80006b4:	4815      	ldr	r0, [pc, #84]	@ (800070c <MX_GPIO_Init+0x17c>)
 80006b6:	f001 fb13 	bl	8001ce0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80006ba:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80006be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006c0:	2302      	movs	r3, #2
 80006c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c4:	2300      	movs	r3, #0
 80006c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006c8:	2300      	movs	r3, #0
 80006ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80006cc:	2300      	movs	r3, #0
 80006ce:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006d0:	f107 0314 	add.w	r3, r7, #20
 80006d4:	4619      	mov	r1, r3
 80006d6:	480e      	ldr	r0, [pc, #56]	@ (8000710 <MX_GPIO_Init+0x180>)
 80006d8:	f001 fb02 	bl	8001ce0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80006dc:	2200      	movs	r2, #0
 80006de:	2100      	movs	r1, #0
 80006e0:	2017      	movs	r0, #23
 80006e2:	f001 f9aa 	bl	8001a3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80006e6:	2017      	movs	r0, #23
 80006e8:	f001 f9c3 	bl	8001a72 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80006ec:	2200      	movs	r2, #0
 80006ee:	2100      	movs	r1, #0
 80006f0:	2028      	movs	r0, #40	@ 0x28
 80006f2:	f001 f9a2 	bl	8001a3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80006f6:	2028      	movs	r0, #40	@ 0x28
 80006f8:	f001 f9bb 	bl	8001a72 <HAL_NVIC_EnableIRQ>

}
 80006fc:	bf00      	nop
 80006fe:	3728      	adds	r7, #40	@ 0x28
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}
 8000704:	40023800 	.word	0x40023800
 8000708:	40020400 	.word	0x40020400
 800070c:	40021800 	.word	0x40021800
 8000710:	40020800 	.word	0x40020800

08000714 <_write>:

/* USER CODE BEGIN PV */

extern uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len);

int _write(int file, char *ptr, int len){
 8000714:	b580      	push	{r7, lr}
 8000716:	b084      	sub	sp, #16
 8000718:	af00      	add	r7, sp, #0
 800071a:	60f8      	str	r0, [r7, #12]
 800071c:	60b9      	str	r1, [r7, #8]
 800071e:	607a      	str	r2, [r7, #4]
    // CDC_Transmit_FS(ptr, len);
    Q_Write(&USB_TX_Q, ptr, len);
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	b29b      	uxth	r3, r3
 8000724:	461a      	mov	r2, r3
 8000726:	68b9      	ldr	r1, [r7, #8]
 8000728:	4803      	ldr	r0, [pc, #12]	@ (8000738 <_write+0x24>)
 800072a:	f000 f8e2 	bl	80008f2 <Q_Write>
    // User_CDC_Transmit_FS(ptr, len);
    return (len);
 800072e:	687b      	ldr	r3, [r7, #4]
}
 8000730:	4618      	mov	r0, r3
 8000732:	3710      	adds	r7, #16
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}
 8000738:	20000ad4 	.word	0x20000ad4

0800073c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000740:	f000 fff4 	bl	800172c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000744:	f000 f840 	bl	80007c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000748:	f7ff ff22 	bl	8000590 <MX_GPIO_Init>
  MX_TIM1_Init();
 800074c:	f000 fc22 	bl	8000f94 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 8000750:	f000 fc98 	bl	8001084 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000754:	f000 fcc2 	bl	80010dc <MX_USART3_UART_Init>
  MX_USB_DEVICE_Init();
 8000758:	f008 fd0c 	bl	8009174 <MX_USB_DEVICE_Init>
  MX_USART6_UART_Init();
 800075c:	f000 fcea 	bl	8001134 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  debug_buf_init();
 8000760:	f000 fe0c 	bl	800137c <debug_buf_init>
  Q_Init(&USB_TX_Q, (uint8_t *) USB_TX_Data, 2400);
 8000764:	f44f 6216 	mov.w	r2, #2400	@ 0x960
 8000768:	4910      	ldr	r1, [pc, #64]	@ (80007ac <main+0x70>)
 800076a:	4811      	ldr	r0, [pc, #68]	@ (80007b0 <main+0x74>)
 800076c:	f000 f8a2 	bl	80008b4 <Q_Init>

  HAL_Delay(500);
 8000770:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000774:	f001 f84c 	bl	8001810 <HAL_Delay>
  // __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
  // __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_TC);
  // // __HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_HT);
  // __HAL_DMA_DISABLE_IT(&hdma_usart6_rx, DMA_IT_HT);
  // __HAL_DMA_DISABLE_IT(&hdma_usart6_rx, DMA_IT_TC);
  HAL_UARTEx_ReceiveToIdle_IT(&huart2, uart2_rx_IDLE_buf, UART_RX_IDLE_BUFSIZE);
 8000778:	f241 3288 	movw	r2, #5000	@ 0x1388
 800077c:	490d      	ldr	r1, [pc, #52]	@ (80007b4 <main+0x78>)
 800077e:	480e      	ldr	r0, [pc, #56]	@ (80007b8 <main+0x7c>)
 8000780:	f004 f8e1 	bl	8004946 <HAL_UARTEx_ReceiveToIdle_IT>
  HAL_UARTEx_ReceiveToIdle_IT(&huart6, uart6_rx_IDLE_buf, UART_RX_IDLE_BUFSIZE);
 8000784:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000788:	490c      	ldr	r1, [pc, #48]	@ (80007bc <main+0x80>)
 800078a:	480d      	ldr	r0, [pc, #52]	@ (80007c0 <main+0x84>)
 800078c:	f004 f8db 	bl	8004946 <HAL_UARTEx_ReceiveToIdle_IT>

  HAL_TIM_Base_Start_IT(&htim1);
 8000790:	480c      	ldr	r0, [pc, #48]	@ (80007c4 <main+0x88>)
 8000792:	f003 fc3d 	bl	8004010 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    GPIO_Proc();
 8000796:	f000 fdeb 	bl	8001370 <GPIO_Proc>
    USB_CDC_Proc();
 800079a:	f000 ff25 	bl	80015e8 <USB_CDC_Proc>
    USB_CDC_RX_Proc();
 800079e:	f000 ff2b 	bl	80015f8 <USB_CDC_RX_Proc>
    UART_RX_Proc();
 80007a2:	f000 fedb 	bl	800155c <UART_RX_Proc>
  {
 80007a6:	bf00      	nop
 80007a8:	e7f5      	b.n	8000796 <main+0x5a>
 80007aa:	bf00      	nop
 80007ac:	20000174 	.word	0x20000174
 80007b0:	20000ad4 	.word	0x20000ad4
 80007b4:	20001788 	.word	0x20001788
 80007b8:	20001494 	.word	0x20001494
 80007bc:	20002b10 	.word	0x20002b10
 80007c0:	20001524 	.word	0x20001524
 80007c4:	2000144c 	.word	0x2000144c

080007c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b094      	sub	sp, #80	@ 0x50
 80007cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ce:	f107 0320 	add.w	r3, r7, #32
 80007d2:	2230      	movs	r2, #48	@ 0x30
 80007d4:	2100      	movs	r1, #0
 80007d6:	4618      	mov	r0, r3
 80007d8:	f009 fc40 	bl	800a05c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007dc:	f107 030c 	add.w	r3, r7, #12
 80007e0:	2200      	movs	r2, #0
 80007e2:	601a      	str	r2, [r3, #0]
 80007e4:	605a      	str	r2, [r3, #4]
 80007e6:	609a      	str	r2, [r3, #8]
 80007e8:	60da      	str	r2, [r3, #12]
 80007ea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007ec:	2300      	movs	r3, #0
 80007ee:	60bb      	str	r3, [r7, #8]
 80007f0:	4b2b      	ldr	r3, [pc, #172]	@ (80008a0 <SystemClock_Config+0xd8>)
 80007f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007f4:	4a2a      	ldr	r2, [pc, #168]	@ (80008a0 <SystemClock_Config+0xd8>)
 80007f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007fa:	6413      	str	r3, [r2, #64]	@ 0x40
 80007fc:	4b28      	ldr	r3, [pc, #160]	@ (80008a0 <SystemClock_Config+0xd8>)
 80007fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000800:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000804:	60bb      	str	r3, [r7, #8]
 8000806:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000808:	2300      	movs	r3, #0
 800080a:	607b      	str	r3, [r7, #4]
 800080c:	4b25      	ldr	r3, [pc, #148]	@ (80008a4 <SystemClock_Config+0xdc>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	4a24      	ldr	r2, [pc, #144]	@ (80008a4 <SystemClock_Config+0xdc>)
 8000812:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000816:	6013      	str	r3, [r2, #0]
 8000818:	4b22      	ldr	r3, [pc, #136]	@ (80008a4 <SystemClock_Config+0xdc>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000820:	607b      	str	r3, [r7, #4]
 8000822:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000824:	2301      	movs	r3, #1
 8000826:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000828:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 800082c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800082e:	2302      	movs	r3, #2
 8000830:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000832:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000836:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000838:	2304      	movs	r3, #4
 800083a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800083c:	23a8      	movs	r3, #168	@ 0xa8
 800083e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000840:	2302      	movs	r3, #2
 8000842:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000844:	2307      	movs	r3, #7
 8000846:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000848:	f107 0320 	add.w	r3, r7, #32
 800084c:	4618      	mov	r0, r3
 800084e:	f002 fe8f 	bl	8003570 <HAL_RCC_OscConfig>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d001      	beq.n	800085c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000858:	f000 f826 	bl	80008a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800085c:	230f      	movs	r3, #15
 800085e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000860:	2302      	movs	r3, #2
 8000862:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000864:	2300      	movs	r3, #0
 8000866:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000868:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800086c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800086e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000872:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000874:	f107 030c 	add.w	r3, r7, #12
 8000878:	2105      	movs	r1, #5
 800087a:	4618      	mov	r0, r3
 800087c:	f003 f8f0 	bl	8003a60 <HAL_RCC_ClockConfig>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000886:	f000 f80f 	bl	80008a8 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO2, RCC_MCO2SOURCE_HSE, RCC_MCODIV_1);
 800088a:	2200      	movs	r2, #0
 800088c:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8000890:	2001      	movs	r0, #1
 8000892:	f003 f9cb 	bl	8003c2c <HAL_RCC_MCOConfig>
}
 8000896:	bf00      	nop
 8000898:	3750      	adds	r7, #80	@ 0x50
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	40023800 	.word	0x40023800
 80008a4:	40007000 	.word	0x40007000

080008a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008ac:	b672      	cpsid	i
}
 80008ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008b0:	bf00      	nop
 80008b2:	e7fd      	b.n	80008b0 <Error_Handler+0x8>

080008b4 <Q_Init>:
#include "queue.h"

void Q_Init(Q_queue_t *queue, uint8_t *data, uint16_t len){
 80008b4:	b480      	push	{r7}
 80008b6:	b085      	sub	sp, #20
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	60f8      	str	r0, [r7, #12]
 80008bc:	60b9      	str	r1, [r7, #8]
 80008be:	4613      	mov	r3, r2
 80008c0:	80fb      	strh	r3, [r7, #6]
    queue->idx_read = 0;
 80008c2:	68fb      	ldr	r3, [r7, #12]
 80008c4:	2200      	movs	r2, #0
 80008c6:	809a      	strh	r2, [r3, #4]
    queue->idx_write = 0;
 80008c8:	68fb      	ldr	r3, [r7, #12]
 80008ca:	2200      	movs	r2, #0
 80008cc:	805a      	strh	r2, [r3, #2]
    queue->count_full = 0;
 80008ce:	68fb      	ldr	r3, [r7, #12]
 80008d0:	2200      	movs	r2, #0
 80008d2:	80da      	strh	r2, [r3, #6]
    queue->count_empty = 0;
 80008d4:	68fb      	ldr	r3, [r7, #12]
 80008d6:	2200      	movs	r2, #0
 80008d8:	811a      	strh	r2, [r3, #8]
    queue->size = len;
 80008da:	68fb      	ldr	r3, [r7, #12]
 80008dc:	88fa      	ldrh	r2, [r7, #6]
 80008de:	801a      	strh	r2, [r3, #0]
    queue->data = data;
 80008e0:	68fb      	ldr	r3, [r7, #12]
 80008e2:	68ba      	ldr	r2, [r7, #8]
 80008e4:	60da      	str	r2, [r3, #12]
}
 80008e6:	bf00      	nop
 80008e8:	3714      	adds	r7, #20
 80008ea:	46bd      	mov	sp, r7
 80008ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f0:	4770      	bx	lr

080008f2 <Q_Write>:

void Q_Clear(Q_queue_t *queue){
    queue->idx_write = queue->idx_read;
}

bool Q_Write(Q_queue_t *queue, uint8_t *data, uint16_t len){
 80008f2:	b580      	push	{r7, lr}
 80008f4:	b088      	sub	sp, #32
 80008f6:	af00      	add	r7, sp, #0
 80008f8:	60f8      	str	r0, [r7, #12]
 80008fa:	60b9      	str	r1, [r7, #8]
 80008fc:	4613      	mov	r3, r2
 80008fe:	80fb      	strh	r3, [r7, #6]
    int empty_bytes;
    uint16_t next_idx;
    uint16_t num_first;
    bool ret = false;
 8000900:	2300      	movs	r3, #0
 8000902:	77fb      	strb	r3, [r7, #31]
    
    empty_bytes = Q_NumEmptyBytes(queue);  
 8000904:	68f8      	ldr	r0, [r7, #12]
 8000906:	f000 f8ea 	bl	8000ade <Q_NumEmptyBytes>
 800090a:	4603      	mov	r3, r0
 800090c:	61bb      	str	r3, [r7, #24]
    if(empty_bytes >= len){
 800090e:	88fb      	ldrh	r3, [r7, #6]
 8000910:	69ba      	ldr	r2, [r7, #24]
 8000912:	429a      	cmp	r2, r3
 8000914:	db44      	blt.n	80009a0 <Q_Write+0xae>
        next_idx = queue->idx_write + len;
 8000916:	68fb      	ldr	r3, [r7, #12]
 8000918:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800091c:	b29a      	uxth	r2, r3
 800091e:	88fb      	ldrh	r3, [r7, #6]
 8000920:	4413      	add	r3, r2
 8000922:	82fb      	strh	r3, [r7, #22]
        if(next_idx < queue->size){
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	881b      	ldrh	r3, [r3, #0]
 8000928:	8afa      	ldrh	r2, [r7, #22]
 800092a:	429a      	cmp	r2, r3
 800092c:	d20b      	bcs.n	8000946 <Q_Write+0x54>
            memcpy(&(queue->data[queue->idx_write]),data,len);  //memcpy(dest,source,num)
 800092e:	68fb      	ldr	r3, [r7, #12]
 8000930:	68db      	ldr	r3, [r3, #12]
 8000932:	68fa      	ldr	r2, [r7, #12]
 8000934:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8000938:	4413      	add	r3, r2
 800093a:	88fa      	ldrh	r2, [r7, #6]
 800093c:	68b9      	ldr	r1, [r7, #8]
 800093e:	4618      	mov	r0, r3
 8000940:	f009 fc2d 	bl	800a19e <memcpy>
 8000944:	e01d      	b.n	8000982 <Q_Write+0x90>
        }
        else{
            num_first = queue->size-queue->idx_write;
 8000946:	68fb      	ldr	r3, [r7, #12]
 8000948:	881a      	ldrh	r2, [r3, #0]
 800094a:	68fb      	ldr	r3, [r7, #12]
 800094c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000950:	b29b      	uxth	r3, r3
 8000952:	1ad3      	subs	r3, r2, r3
 8000954:	82bb      	strh	r3, [r7, #20]
            memcpy(&(queue->data[queue->idx_write]),data,num_first);
 8000956:	68fb      	ldr	r3, [r7, #12]
 8000958:	68db      	ldr	r3, [r3, #12]
 800095a:	68fa      	ldr	r2, [r7, #12]
 800095c:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8000960:	4413      	add	r3, r2
 8000962:	8aba      	ldrh	r2, [r7, #20]
 8000964:	68b9      	ldr	r1, [r7, #8]
 8000966:	4618      	mov	r0, r3
 8000968:	f009 fc19 	bl	800a19e <memcpy>
            memcpy(&(queue->data[0]),&(data[num_first]),len-num_first);
 800096c:	68fb      	ldr	r3, [r7, #12]
 800096e:	68d8      	ldr	r0, [r3, #12]
 8000970:	8abb      	ldrh	r3, [r7, #20]
 8000972:	68ba      	ldr	r2, [r7, #8]
 8000974:	18d1      	adds	r1, r2, r3
 8000976:	88fa      	ldrh	r2, [r7, #6]
 8000978:	8abb      	ldrh	r3, [r7, #20]
 800097a:	1ad3      	subs	r3, r2, r3
 800097c:	461a      	mov	r2, r3
 800097e:	f009 fc0e 	bl	800a19e <memcpy>
        }        
        queue->idx_write = next_idx % queue->size;
 8000982:	68fb      	ldr	r3, [r7, #12]
 8000984:	881a      	ldrh	r2, [r3, #0]
 8000986:	8afb      	ldrh	r3, [r7, #22]
 8000988:	fbb3 f1f2 	udiv	r1, r3, r2
 800098c:	fb01 f202 	mul.w	r2, r1, r2
 8000990:	1a9b      	subs	r3, r3, r2
 8000992:	b29b      	uxth	r3, r3
 8000994:	b21a      	sxth	r2, r3
 8000996:	68fb      	ldr	r3, [r7, #12]
 8000998:	805a      	strh	r2, [r3, #2]
        ret = true;        
 800099a:	2301      	movs	r3, #1
 800099c:	77fb      	strb	r3, [r7, #31]
 800099e:	e00e      	b.n	80009be <Q_Write+0xcc>
    }
    else    queue->count_full = _upperlimit(queue->count_full+1,0xFFFF);      
 80009a0:	68fb      	ldr	r3, [r7, #12]
 80009a2:	88db      	ldrh	r3, [r3, #6]
 80009a4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80009a8:	4293      	cmp	r3, r2
 80009aa:	d004      	beq.n	80009b6 <Q_Write+0xc4>
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	88db      	ldrh	r3, [r3, #6]
 80009b0:	3301      	adds	r3, #1
 80009b2:	b29a      	uxth	r2, r3
 80009b4:	e001      	b.n	80009ba <Q_Write+0xc8>
 80009b6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80009ba:	68fb      	ldr	r3, [r7, #12]
 80009bc:	80da      	strh	r2, [r3, #6]
    return ret;    
 80009be:	7ffb      	ldrb	r3, [r7, #31]
}
 80009c0:	4618      	mov	r0, r3
 80009c2:	3720      	adds	r7, #32
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}

080009c8 <Q_Read>:
    }
    else    queue->count_full = _upperlimit(queue->count_full+1,0xFFFF);
    return ret;    
}

bool Q_Read(Q_queue_t *queue, uint8_t *data, uint16_t len){
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b086      	sub	sp, #24
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	60f8      	str	r0, [r7, #12]
 80009d0:	60b9      	str	r1, [r7, #8]
 80009d2:	4613      	mov	r3, r2
 80009d4:	80fb      	strh	r3, [r7, #6]
    bool ret;
    uint16_t next_idx;
    uint16_t num_first;

    if(Q_NumContents(queue) >= len){
 80009d6:	68f8      	ldr	r0, [r7, #12]
 80009d8:	f000 f864 	bl	8000aa4 <Q_NumContents>
 80009dc:	4603      	mov	r3, r0
 80009de:	461a      	mov	r2, r3
 80009e0:	88fb      	ldrh	r3, [r7, #6]
 80009e2:	4293      	cmp	r3, r2
 80009e4:	d848      	bhi.n	8000a78 <Q_Read+0xb0>
        next_idx = queue->idx_read + len;
 80009e6:	68fb      	ldr	r3, [r7, #12]
 80009e8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80009ec:	b29a      	uxth	r2, r3
 80009ee:	88fb      	ldrh	r3, [r7, #6]
 80009f0:	4413      	add	r3, r2
 80009f2:	82bb      	strh	r3, [r7, #20]
        if(next_idx < queue->size){
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	881b      	ldrh	r3, [r3, #0]
 80009f8:	8aba      	ldrh	r2, [r7, #20]
 80009fa:	429a      	cmp	r2, r3
 80009fc:	d20b      	bcs.n	8000a16 <Q_Read+0x4e>
            memcpy(data,&(queue->data[queue->idx_read]),len);  //memcpy(dest,source,num)
 80009fe:	68fb      	ldr	r3, [r7, #12]
 8000a00:	68db      	ldr	r3, [r3, #12]
 8000a02:	68fa      	ldr	r2, [r7, #12]
 8000a04:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8000a08:	4413      	add	r3, r2
 8000a0a:	88fa      	ldrh	r2, [r7, #6]
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	68b8      	ldr	r0, [r7, #8]
 8000a10:	f009 fbc5 	bl	800a19e <memcpy>
 8000a14:	e01d      	b.n	8000a52 <Q_Read+0x8a>
        }
        else{
            num_first = queue->size-queue->idx_read;
 8000a16:	68fb      	ldr	r3, [r7, #12]
 8000a18:	881a      	ldrh	r2, [r3, #0]
 8000a1a:	68fb      	ldr	r3, [r7, #12]
 8000a1c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000a20:	b29b      	uxth	r3, r3
 8000a22:	1ad3      	subs	r3, r2, r3
 8000a24:	827b      	strh	r3, [r7, #18]
            memcpy(data,&(queue->data[queue->idx_read]),num_first);  //memcpy(dest,source,num)
 8000a26:	68fb      	ldr	r3, [r7, #12]
 8000a28:	68db      	ldr	r3, [r3, #12]
 8000a2a:	68fa      	ldr	r2, [r7, #12]
 8000a2c:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8000a30:	4413      	add	r3, r2
 8000a32:	8a7a      	ldrh	r2, [r7, #18]
 8000a34:	4619      	mov	r1, r3
 8000a36:	68b8      	ldr	r0, [r7, #8]
 8000a38:	f009 fbb1 	bl	800a19e <memcpy>
            memcpy(&(data[num_first]),&(queue->data[0]),len-num_first);
 8000a3c:	8a7b      	ldrh	r3, [r7, #18]
 8000a3e:	68ba      	ldr	r2, [r7, #8]
 8000a40:	18d0      	adds	r0, r2, r3
 8000a42:	68fb      	ldr	r3, [r7, #12]
 8000a44:	68d9      	ldr	r1, [r3, #12]
 8000a46:	88fa      	ldrh	r2, [r7, #6]
 8000a48:	8a7b      	ldrh	r3, [r7, #18]
 8000a4a:	1ad3      	subs	r3, r2, r3
 8000a4c:	461a      	mov	r2, r3
 8000a4e:	f009 fba6 	bl	800a19e <memcpy>
        }        
        queue->idx_read = (queue->idx_read+len)%queue->size;
 8000a52:	68fb      	ldr	r3, [r7, #12]
 8000a54:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000a58:	461a      	mov	r2, r3
 8000a5a:	88fb      	ldrh	r3, [r7, #6]
 8000a5c:	4413      	add	r3, r2
 8000a5e:	68fa      	ldr	r2, [r7, #12]
 8000a60:	8812      	ldrh	r2, [r2, #0]
 8000a62:	fb93 f1f2 	sdiv	r1, r3, r2
 8000a66:	fb01 f202 	mul.w	r2, r1, r2
 8000a6a:	1a9b      	subs	r3, r3, r2
 8000a6c:	b21a      	sxth	r2, r3
 8000a6e:	68fb      	ldr	r3, [r7, #12]
 8000a70:	809a      	strh	r2, [r3, #4]
        ret = true;
 8000a72:	2301      	movs	r3, #1
 8000a74:	75fb      	strb	r3, [r7, #23]
 8000a76:	e010      	b.n	8000a9a <Q_Read+0xd2>
    }
    else{
        queue->count_empty = _upperlimit(queue->count_empty+1,0xFFFF);
 8000a78:	68fb      	ldr	r3, [r7, #12]
 8000a7a:	891b      	ldrh	r3, [r3, #8]
 8000a7c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000a80:	4293      	cmp	r3, r2
 8000a82:	d004      	beq.n	8000a8e <Q_Read+0xc6>
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	891b      	ldrh	r3, [r3, #8]
 8000a88:	3301      	adds	r3, #1
 8000a8a:	b29a      	uxth	r2, r3
 8000a8c:	e001      	b.n	8000a92 <Q_Read+0xca>
 8000a8e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000a92:	68fb      	ldr	r3, [r7, #12]
 8000a94:	811a      	strh	r2, [r3, #8]
        ret = false;
 8000a96:	2300      	movs	r3, #0
 8000a98:	75fb      	strb	r3, [r7, #23]
    }
    return ret;
 8000a9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	3718      	adds	r7, #24
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}

08000aa4 <Q_NumContents>:
    else    queue->count_empty = _upperlimit(queue->count_empty+1,0xFFFF);
    return ret;
}


uint16_t Q_NumContents(Q_queue_t *queue){
 8000aa4:	b480      	push	{r7}
 8000aa6:	b083      	sub	sp, #12
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
    return (uint16_t)((queue->size + queue->idx_write - queue->idx_read)%(queue->size));    
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	881b      	ldrh	r3, [r3, #0]
 8000ab0:	461a      	mov	r2, r3
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000ab8:	4413      	add	r3, r2
 8000aba:	687a      	ldr	r2, [r7, #4]
 8000abc:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8000ac0:	1a9b      	subs	r3, r3, r2
 8000ac2:	687a      	ldr	r2, [r7, #4]
 8000ac4:	8812      	ldrh	r2, [r2, #0]
 8000ac6:	fb93 f1f2 	sdiv	r1, r3, r2
 8000aca:	fb01 f202 	mul.w	r2, r1, r2
 8000ace:	1a9b      	subs	r3, r3, r2
 8000ad0:	b29b      	uxth	r3, r3
}
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	370c      	adds	r7, #12
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr

08000ade <Q_NumEmptyBytes>:

uint16_t Q_NumEmptyBytes(Q_queue_t *queue){
 8000ade:	b590      	push	{r4, r7, lr}
 8000ae0:	b083      	sub	sp, #12
 8000ae2:	af00      	add	r7, sp, #0
 8000ae4:	6078      	str	r0, [r7, #4]
    return queue->size - (int)Q_NumContents(queue) - 1;
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	881c      	ldrh	r4, [r3, #0]
 8000aea:	6878      	ldr	r0, [r7, #4]
 8000aec:	f7ff ffda 	bl	8000aa4 <Q_NumContents>
 8000af0:	4603      	mov	r3, r0
 8000af2:	1ae3      	subs	r3, r4, r3
 8000af4:	b29b      	uxth	r3, r3
 8000af6:	3b01      	subs	r3, #1
 8000af8:	b29b      	uxth	r3, r3
}
 8000afa:	4618      	mov	r0, r3
 8000afc:	370c      	adds	r7, #12
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd90      	pop	{r4, r7, pc}
	...

08000b04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	b083      	sub	sp, #12
 8000b08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	607b      	str	r3, [r7, #4]
 8000b0e:	4b10      	ldr	r3, [pc, #64]	@ (8000b50 <HAL_MspInit+0x4c>)
 8000b10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b12:	4a0f      	ldr	r2, [pc, #60]	@ (8000b50 <HAL_MspInit+0x4c>)
 8000b14:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b18:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b1a:	4b0d      	ldr	r3, [pc, #52]	@ (8000b50 <HAL_MspInit+0x4c>)
 8000b1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b1e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b22:	607b      	str	r3, [r7, #4]
 8000b24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b26:	2300      	movs	r3, #0
 8000b28:	603b      	str	r3, [r7, #0]
 8000b2a:	4b09      	ldr	r3, [pc, #36]	@ (8000b50 <HAL_MspInit+0x4c>)
 8000b2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b2e:	4a08      	ldr	r2, [pc, #32]	@ (8000b50 <HAL_MspInit+0x4c>)
 8000b30:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b34:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b36:	4b06      	ldr	r3, [pc, #24]	@ (8000b50 <HAL_MspInit+0x4c>)
 8000b38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b3e:	603b      	str	r3, [r7, #0]
 8000b40:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b42:	bf00      	nop
 8000b44:	370c      	adds	r7, #12
 8000b46:	46bd      	mov	sp, r7
 8000b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop
 8000b50:	40023800 	.word	0x40023800

08000b54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b58:	bf00      	nop
 8000b5a:	e7fd      	b.n	8000b58 <NMI_Handler+0x4>

08000b5c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b60:	bf00      	nop
 8000b62:	e7fd      	b.n	8000b60 <HardFault_Handler+0x4>

08000b64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b68:	bf00      	nop
 8000b6a:	e7fd      	b.n	8000b68 <MemManage_Handler+0x4>

08000b6c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b70:	bf00      	nop
 8000b72:	e7fd      	b.n	8000b70 <BusFault_Handler+0x4>

08000b74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b78:	bf00      	nop
 8000b7a:	e7fd      	b.n	8000b78 <UsageFault_Handler+0x4>

08000b7c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b80:	bf00      	nop
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr

08000b8a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b8a:	b480      	push	{r7}
 8000b8c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b8e:	bf00      	nop
 8000b90:	46bd      	mov	sp, r7
 8000b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b96:	4770      	bx	lr

08000b98 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b9c:	bf00      	nop
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr

08000ba6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ba6:	b580      	push	{r7, lr}
 8000ba8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000baa:	f000 fe11 	bl	80017d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bae:	bf00      	nop
 8000bb0:	bd80      	pop	{r7, pc}

08000bb2 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000bb2:	b580      	push	{r7, lr}
 8000bb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8000bb6:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8000bba:	f001 fa71 	bl	80020a0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000bbe:	bf00      	nop
 8000bc0:	bd80      	pop	{r7, pc}
	...

08000bc4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000bc8:	4802      	ldr	r0, [pc, #8]	@ (8000bd4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000bca:	f003 fa91 	bl	80040f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000bce:	bf00      	nop
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	2000144c 	.word	0x2000144c

08000bd8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000bdc:	4802      	ldr	r0, [pc, #8]	@ (8000be8 <USART2_IRQHandler+0x10>)
 8000bde:	f003 ff0f 	bl	8004a00 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000be2:	bf00      	nop
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	20001494 	.word	0x20001494

08000bec <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000bf0:	4802      	ldr	r0, [pc, #8]	@ (8000bfc <USART3_IRQHandler+0x10>)
 8000bf2:	f003 ff05 	bl	8004a00 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000bf6:	bf00      	nop
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	200014dc 	.word	0x200014dc

08000c00 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000c04:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000c08:	f001 fa4a 	bl	80020a0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000c0c:	bf00      	nop
 8000c0e:	bd80      	pop	{r7, pc}

08000c10 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000c14:	4802      	ldr	r0, [pc, #8]	@ (8000c20 <OTG_FS_IRQHandler+0x10>)
 8000c16:	f001 fb9f 	bl	8002358 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000c1a:	bf00      	nop
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	2000d08c 	.word	0x2000d08c

08000c24 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8000c28:	4802      	ldr	r0, [pc, #8]	@ (8000c34 <USART6_IRQHandler+0x10>)
 8000c2a:	f003 fee9 	bl	8004a00 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8000c2e:	bf00      	nop
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	20001524 	.word	0x20001524

08000c38 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b084      	sub	sp, #16
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  uint16_t num = 0;
 8000c40:	2300      	movs	r3, #0
 8000c42:	81fb      	strh	r3, [r7, #14]
  
  if ((num = Q_NumContents(&USB_TX_Q)) > 0 )
 8000c44:	4818      	ldr	r0, [pc, #96]	@ (8000ca8 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000c46:	f7ff ff2d 	bl	8000aa4 <Q_NumContents>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	81fb      	strh	r3, [r7, #14]
 8000c4e:	89fb      	ldrh	r3, [r7, #14]
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d016      	beq.n	8000c82 <HAL_TIM_PeriodElapsedCallback+0x4a>
  {
    if (CDC_Transmit_Is_Busy() != USBD_BUSY)
 8000c54:	f008 fb9c 	bl	8009390 <CDC_Transmit_Is_Busy>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b01      	cmp	r3, #1
 8000c5c:	d011      	beq.n	8000c82 <HAL_TIM_PeriodElapsedCallback+0x4a>
    {
      queDataNum += num;
 8000c5e:	4b13      	ldr	r3, [pc, #76]	@ (8000cac <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000c60:	881a      	ldrh	r2, [r3, #0]
 8000c62:	89fb      	ldrh	r3, [r7, #14]
 8000c64:	4413      	add	r3, r2
 8000c66:	b29a      	uxth	r2, r3
 8000c68:	4b10      	ldr	r3, [pc, #64]	@ (8000cac <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000c6a:	801a      	strh	r2, [r3, #0]

      Q_Read(&USB_TX_Q, (uint8_t *)queData, num);
 8000c6c:	89fb      	ldrh	r3, [r7, #14]
 8000c6e:	461a      	mov	r2, r3
 8000c70:	490f      	ldr	r1, [pc, #60]	@ (8000cb0 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000c72:	480d      	ldr	r0, [pc, #52]	@ (8000ca8 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000c74:	f7ff fea8 	bl	80009c8 <Q_Read>

      CDC_Transmit_FS(queData, num);
 8000c78:	89fb      	ldrh	r3, [r7, #14]
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	480c      	ldr	r0, [pc, #48]	@ (8000cb0 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000c7e:	f008 fb45 	bl	800930c <CDC_Transmit_FS>
    }
  }

  TIM1_CNT_1++; // LED ?���???? 
 8000c82:	4b0c      	ldr	r3, [pc, #48]	@ (8000cb4 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	3301      	adds	r3, #1
 8000c88:	4a0a      	ldr	r2, [pc, #40]	@ (8000cb4 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000c8a:	6013      	str	r3, [r2, #0]
  TIM1_CNT_2++; //
 8000c8c:	4b0a      	ldr	r3, [pc, #40]	@ (8000cb8 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	3301      	adds	r3, #1
 8000c92:	4a09      	ldr	r2, [pc, #36]	@ (8000cb8 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000c94:	6013      	str	r3, [r2, #0]
  TIM1_CNT_3++; //
 8000c96:	4b09      	ldr	r3, [pc, #36]	@ (8000cbc <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	3301      	adds	r3, #1
 8000c9c:	4a07      	ldr	r2, [pc, #28]	@ (8000cbc <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000c9e:	6013      	str	r3, [r2, #0]
}
 8000ca0:	bf00      	nop
 8000ca2:	3710      	adds	r7, #16
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	20000ad4 	.word	0x20000ad4
 8000cac:	20001444 	.word	0x20001444
 8000cb0:	20000ae4 	.word	0x20000ae4
 8000cb4:	2000156c 	.word	0x2000156c
 8000cb8:	20001570 	.word	0x20001570
 8000cbc:	20001574 	.word	0x20001574

08000cc0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b083      	sub	sp, #12
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  uart_rx_cnt_total++;
 8000cc8:	4b05      	ldr	r3, [pc, #20]	@ (8000ce0 <HAL_UART_RxCpltCallback+0x20>)
 8000cca:	881b      	ldrh	r3, [r3, #0]
 8000ccc:	3301      	adds	r3, #1
 8000cce:	b29a      	uxth	r2, r3
 8000cd0:	4b03      	ldr	r3, [pc, #12]	@ (8000ce0 <HAL_UART_RxCpltCallback+0x20>)
 8000cd2:	801a      	strh	r2, [r3, #0]
  // }
  // else if (__HAL_UART_GET_FLAG(&huart3, UART_FLAG_FE))
  // {
  //   __HAL_UART_CLEAR_FEFLAG(&huart3);
  // }
}
 8000cd4:	bf00      	nop
 8000cd6:	370c      	adds	r7, #12
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cde:	4770      	bx	lr
 8000ce0:	20003e9c 	.word	0x20003e9c

08000ce4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	b087      	sub	sp, #28
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  if (__HAL_UART_GET_FLAG(&huart2, UART_FLAG_ORE))
 8000cec:	4b28      	ldr	r3, [pc, #160]	@ (8000d90 <HAL_UART_ErrorCallback+0xac>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	f003 0308 	and.w	r3, r3, #8
 8000cf6:	2b08      	cmp	r3, #8
 8000cf8:	d10b      	bne.n	8000d12 <HAL_UART_ErrorCallback+0x2e>
  {
    __HAL_UART_CLEAR_OREFLAG(&huart2);
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	617b      	str	r3, [r7, #20]
 8000cfe:	4b24      	ldr	r3, [pc, #144]	@ (8000d90 <HAL_UART_ErrorCallback+0xac>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	617b      	str	r3, [r7, #20]
 8000d06:	4b22      	ldr	r3, [pc, #136]	@ (8000d90 <HAL_UART_ErrorCallback+0xac>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	685b      	ldr	r3, [r3, #4]
 8000d0c:	617b      	str	r3, [r7, #20]
 8000d0e:	697b      	ldr	r3, [r7, #20]
  }
  else if (__HAL_UART_GET_FLAG(&huart3, UART_FLAG_FE))
  {
    __HAL_UART_CLEAR_FEFLAG(&huart3);
  }
}
 8000d10:	e037      	b.n	8000d82 <HAL_UART_ErrorCallback+0x9e>
  else if (__HAL_UART_GET_FLAG(&huart3, UART_FLAG_ORE))
 8000d12:	4b20      	ldr	r3, [pc, #128]	@ (8000d94 <HAL_UART_ErrorCallback+0xb0>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	f003 0308 	and.w	r3, r3, #8
 8000d1c:	2b08      	cmp	r3, #8
 8000d1e:	d10b      	bne.n	8000d38 <HAL_UART_ErrorCallback+0x54>
    __HAL_UART_CLEAR_OREFLAG(&huart3);
 8000d20:	2300      	movs	r3, #0
 8000d22:	613b      	str	r3, [r7, #16]
 8000d24:	4b1b      	ldr	r3, [pc, #108]	@ (8000d94 <HAL_UART_ErrorCallback+0xb0>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	613b      	str	r3, [r7, #16]
 8000d2c:	4b19      	ldr	r3, [pc, #100]	@ (8000d94 <HAL_UART_ErrorCallback+0xb0>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	685b      	ldr	r3, [r3, #4]
 8000d32:	613b      	str	r3, [r7, #16]
 8000d34:	693b      	ldr	r3, [r7, #16]
}
 8000d36:	e024      	b.n	8000d82 <HAL_UART_ErrorCallback+0x9e>
  else if (__HAL_UART_GET_FLAG(&huart2, UART_FLAG_FE))
 8000d38:	4b15      	ldr	r3, [pc, #84]	@ (8000d90 <HAL_UART_ErrorCallback+0xac>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	f003 0302 	and.w	r3, r3, #2
 8000d42:	2b02      	cmp	r3, #2
 8000d44:	d10b      	bne.n	8000d5e <HAL_UART_ErrorCallback+0x7a>
    __HAL_UART_CLEAR_FEFLAG(&huart2);
 8000d46:	2300      	movs	r3, #0
 8000d48:	60fb      	str	r3, [r7, #12]
 8000d4a:	4b11      	ldr	r3, [pc, #68]	@ (8000d90 <HAL_UART_ErrorCallback+0xac>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	60fb      	str	r3, [r7, #12]
 8000d52:	4b0f      	ldr	r3, [pc, #60]	@ (8000d90 <HAL_UART_ErrorCallback+0xac>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	685b      	ldr	r3, [r3, #4]
 8000d58:	60fb      	str	r3, [r7, #12]
 8000d5a:	68fb      	ldr	r3, [r7, #12]
}
 8000d5c:	e011      	b.n	8000d82 <HAL_UART_ErrorCallback+0x9e>
  else if (__HAL_UART_GET_FLAG(&huart3, UART_FLAG_FE))
 8000d5e:	4b0d      	ldr	r3, [pc, #52]	@ (8000d94 <HAL_UART_ErrorCallback+0xb0>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	f003 0302 	and.w	r3, r3, #2
 8000d68:	2b02      	cmp	r3, #2
 8000d6a:	d10a      	bne.n	8000d82 <HAL_UART_ErrorCallback+0x9e>
    __HAL_UART_CLEAR_FEFLAG(&huart3);
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	60bb      	str	r3, [r7, #8]
 8000d70:	4b08      	ldr	r3, [pc, #32]	@ (8000d94 <HAL_UART_ErrorCallback+0xb0>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	60bb      	str	r3, [r7, #8]
 8000d78:	4b06      	ldr	r3, [pc, #24]	@ (8000d94 <HAL_UART_ErrorCallback+0xb0>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	685b      	ldr	r3, [r3, #4]
 8000d7e:	60bb      	str	r3, [r7, #8]
 8000d80:	68bb      	ldr	r3, [r7, #8]
}
 8000d82:	bf00      	nop
 8000d84:	371c      	adds	r7, #28
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop
 8000d90:	20001494 	.word	0x20001494
 8000d94:	200014dc 	.word	0x200014dc

08000d98 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b083      	sub	sp, #12
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	4603      	mov	r3, r0
 8000da0:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == GPIO_PIN_13)
 8000da2:	88fb      	ldrh	r3, [r7, #6]
 8000da4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000da8:	d102      	bne.n	8000db0 <HAL_GPIO_EXTI_Callback+0x18>
  {
    UserButton_Flag = 1;
 8000daa:	4b04      	ldr	r3, [pc, #16]	@ (8000dbc <HAL_GPIO_EXTI_Callback+0x24>)
 8000dac:	2201      	movs	r2, #1
 8000dae:	701a      	strb	r2, [r3, #0]
  }
}
 8000db0:	bf00      	nop
 8000db2:	370c      	adds	r7, #12
 8000db4:	46bd      	mov	sp, r7
 8000db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dba:	4770      	bx	lr
 8000dbc:	20001578 	.word	0x20001578

08000dc0 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
 8000dc8:	460b      	mov	r3, r1
 8000dca:	807b      	strh	r3, [r7, #2]
  uart_rx_IDLE_TotalCnt += Size;
 8000dcc:	4b1c      	ldr	r3, [pc, #112]	@ (8000e40 <HAL_UARTEx_RxEventCallback+0x80>)
 8000dce:	881a      	ldrh	r2, [r3, #0]
 8000dd0:	887b      	ldrh	r3, [r7, #2]
 8000dd2:	4413      	add	r3, r2
 8000dd4:	b29a      	uxth	r2, r3
 8000dd6:	4b1a      	ldr	r3, [pc, #104]	@ (8000e40 <HAL_UARTEx_RxEventCallback+0x80>)
 8000dd8:	801a      	strh	r2, [r3, #0]

  if (huart->Instance == USART2)
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	4a19      	ldr	r2, [pc, #100]	@ (8000e44 <HAL_UARTEx_RxEventCallback+0x84>)
 8000de0:	4293      	cmp	r3, r2
 8000de2:	d10f      	bne.n	8000e04 <HAL_UARTEx_RxEventCallback+0x44>
  {
    mseq_upload_master(Size);
 8000de4:	887b      	ldrh	r3, [r7, #2]
 8000de6:	4618      	mov	r0, r3
 8000de8:	f000 faee 	bl	80013c8 <mseq_upload_master>
    
    while( uart2_rx_IDLE_buf[0] == 0xA2)
 8000dec:	e005      	b.n	8000dfa <HAL_UARTEx_RxEventCallback+0x3a>
    HAL_UARTEx_ReceiveToIdle_IT(&huart2, uart2_rx_IDLE_buf, UART_RX_IDLE_BUFSIZE);
 8000dee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000df2:	4915      	ldr	r1, [pc, #84]	@ (8000e48 <HAL_UARTEx_RxEventCallback+0x88>)
 8000df4:	4815      	ldr	r0, [pc, #84]	@ (8000e4c <HAL_UARTEx_RxEventCallback+0x8c>)
 8000df6:	f003 fda6 	bl	8004946 <HAL_UARTEx_ReceiveToIdle_IT>
    while( uart2_rx_IDLE_buf[0] == 0xA2)
 8000dfa:	4b13      	ldr	r3, [pc, #76]	@ (8000e48 <HAL_UARTEx_RxEventCallback+0x88>)
 8000dfc:	781b      	ldrb	r3, [r3, #0]
 8000dfe:	2ba2      	cmp	r3, #162	@ 0xa2
 8000e00:	d0f5      	beq.n	8000dee <HAL_UARTEx_RxEventCallback+0x2e>
    // ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);

    // HAL_UARTEx_ReceiveToIdle_DMA(&huart6, uart6_rx_IDLE_buf, UART_RX_IDLE_BUFSIZE);
  }
  
}
 8000e02:	e018      	b.n	8000e36 <HAL_UARTEx_RxEventCallback+0x76>
  else if (huart->Instance == USART3)
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	4a11      	ldr	r2, [pc, #68]	@ (8000e50 <HAL_UARTEx_RxEventCallback+0x90>)
 8000e0a:	4293      	cmp	r3, r2
 8000e0c:	d104      	bne.n	8000e18 <HAL_UARTEx_RxEventCallback+0x58>
    mseq_upload_device(Size);
 8000e0e:	887b      	ldrh	r3, [r7, #2]
 8000e10:	4618      	mov	r0, r3
 8000e12:	f000 fb0b 	bl	800142c <mseq_upload_device>
}
 8000e16:	e00e      	b.n	8000e36 <HAL_UARTEx_RxEventCallback+0x76>
  else if (huart->Instance == USART6)
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4a0d      	ldr	r2, [pc, #52]	@ (8000e54 <HAL_UARTEx_RxEventCallback+0x94>)
 8000e1e:	4293      	cmp	r3, r2
 8000e20:	d109      	bne.n	8000e36 <HAL_UARTEx_RxEventCallback+0x76>
    mseq_upload_device(Size);
 8000e22:	887b      	ldrh	r3, [r7, #2]
 8000e24:	4618      	mov	r0, r3
 8000e26:	f000 fb01 	bl	800142c <mseq_upload_device>
    HAL_UARTEx_ReceiveToIdle_IT(&huart6, uart6_rx_IDLE_buf, UART_RX_IDLE_BUFSIZE);
 8000e2a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000e2e:	490a      	ldr	r1, [pc, #40]	@ (8000e58 <HAL_UARTEx_RxEventCallback+0x98>)
 8000e30:	480a      	ldr	r0, [pc, #40]	@ (8000e5c <HAL_UARTEx_RxEventCallback+0x9c>)
 8000e32:	f003 fd88 	bl	8004946 <HAL_UARTEx_ReceiveToIdle_IT>
}
 8000e36:	bf00      	nop
 8000e38:	3708      	adds	r7, #8
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	20003e98 	.word	0x20003e98
 8000e44:	40004400 	.word	0x40004400
 8000e48:	20001788 	.word	0x20001788
 8000e4c:	20001494 	.word	0x20001494
 8000e50:	40004800 	.word	0x40004800
 8000e54:	40011400 	.word	0x40011400
 8000e58:	20002b10 	.word	0x20002b10
 8000e5c:	20001524 	.word	0x20001524

08000e60 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b086      	sub	sp, #24
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	60f8      	str	r0, [r7, #12]
 8000e68:	60b9      	str	r1, [r7, #8]
 8000e6a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	617b      	str	r3, [r7, #20]
 8000e70:	e00a      	b.n	8000e88 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000e72:	f3af 8000 	nop.w
 8000e76:	4601      	mov	r1, r0
 8000e78:	68bb      	ldr	r3, [r7, #8]
 8000e7a:	1c5a      	adds	r2, r3, #1
 8000e7c:	60ba      	str	r2, [r7, #8]
 8000e7e:	b2ca      	uxtb	r2, r1
 8000e80:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e82:	697b      	ldr	r3, [r7, #20]
 8000e84:	3301      	adds	r3, #1
 8000e86:	617b      	str	r3, [r7, #20]
 8000e88:	697a      	ldr	r2, [r7, #20]
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	429a      	cmp	r2, r3
 8000e8e:	dbf0      	blt.n	8000e72 <_read+0x12>
  }

  return len;
 8000e90:	687b      	ldr	r3, [r7, #4]
}
 8000e92:	4618      	mov	r0, r3
 8000e94:	3718      	adds	r7, #24
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}

08000e9a <_close>:
  }
  return len;
}

int _close(int file)
{
 8000e9a:	b480      	push	{r7}
 8000e9c:	b083      	sub	sp, #12
 8000e9e:	af00      	add	r7, sp, #0
 8000ea0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000ea2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	370c      	adds	r7, #12
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr

08000eb2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000eb2:	b480      	push	{r7}
 8000eb4:	b083      	sub	sp, #12
 8000eb6:	af00      	add	r7, sp, #0
 8000eb8:	6078      	str	r0, [r7, #4]
 8000eba:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000ec2:	605a      	str	r2, [r3, #4]
  return 0;
 8000ec4:	2300      	movs	r3, #0
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	370c      	adds	r7, #12
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr

08000ed2 <_isatty>:

int _isatty(int file)
{
 8000ed2:	b480      	push	{r7}
 8000ed4:	b083      	sub	sp, #12
 8000ed6:	af00      	add	r7, sp, #0
 8000ed8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000eda:	2301      	movs	r3, #1
}
 8000edc:	4618      	mov	r0, r3
 8000ede:	370c      	adds	r7, #12
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee6:	4770      	bx	lr

08000ee8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b085      	sub	sp, #20
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	60f8      	str	r0, [r7, #12]
 8000ef0:	60b9      	str	r1, [r7, #8]
 8000ef2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000ef4:	2300      	movs	r3, #0
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	3714      	adds	r7, #20
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr
	...

08000f04 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b086      	sub	sp, #24
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f0c:	4a14      	ldr	r2, [pc, #80]	@ (8000f60 <_sbrk+0x5c>)
 8000f0e:	4b15      	ldr	r3, [pc, #84]	@ (8000f64 <_sbrk+0x60>)
 8000f10:	1ad3      	subs	r3, r2, r3
 8000f12:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f14:	697b      	ldr	r3, [r7, #20]
 8000f16:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f18:	4b13      	ldr	r3, [pc, #76]	@ (8000f68 <_sbrk+0x64>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d102      	bne.n	8000f26 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f20:	4b11      	ldr	r3, [pc, #68]	@ (8000f68 <_sbrk+0x64>)
 8000f22:	4a12      	ldr	r2, [pc, #72]	@ (8000f6c <_sbrk+0x68>)
 8000f24:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f26:	4b10      	ldr	r3, [pc, #64]	@ (8000f68 <_sbrk+0x64>)
 8000f28:	681a      	ldr	r2, [r3, #0]
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	4413      	add	r3, r2
 8000f2e:	693a      	ldr	r2, [r7, #16]
 8000f30:	429a      	cmp	r2, r3
 8000f32:	d207      	bcs.n	8000f44 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f34:	f009 f906 	bl	800a144 <__errno>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	220c      	movs	r2, #12
 8000f3c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f3e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f42:	e009      	b.n	8000f58 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f44:	4b08      	ldr	r3, [pc, #32]	@ (8000f68 <_sbrk+0x64>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f4a:	4b07      	ldr	r3, [pc, #28]	@ (8000f68 <_sbrk+0x64>)
 8000f4c:	681a      	ldr	r2, [r3, #0]
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	4413      	add	r3, r2
 8000f52:	4a05      	ldr	r2, [pc, #20]	@ (8000f68 <_sbrk+0x64>)
 8000f54:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f56:	68fb      	ldr	r3, [r7, #12]
}
 8000f58:	4618      	mov	r0, r3
 8000f5a:	3718      	adds	r7, #24
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	20030000 	.word	0x20030000
 8000f64:	00000400 	.word	0x00000400
 8000f68:	20001448 	.word	0x20001448
 8000f6c:	2000d8e0 	.word	0x2000d8e0

08000f70 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f74:	4b06      	ldr	r3, [pc, #24]	@ (8000f90 <SystemInit+0x20>)
 8000f76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f7a:	4a05      	ldr	r2, [pc, #20]	@ (8000f90 <SystemInit+0x20>)
 8000f7c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f80:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f84:	bf00      	nop
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop
 8000f90:	e000ed00 	.word	0xe000ed00

08000f94 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b086      	sub	sp, #24
 8000f98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f9a:	f107 0308 	add.w	r3, r7, #8
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	601a      	str	r2, [r3, #0]
 8000fa2:	605a      	str	r2, [r3, #4]
 8000fa4:	609a      	str	r2, [r3, #8]
 8000fa6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fa8:	463b      	mov	r3, r7
 8000faa:	2200      	movs	r2, #0
 8000fac:	601a      	str	r2, [r3, #0]
 8000fae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000fb0:	4b1e      	ldr	r3, [pc, #120]	@ (800102c <MX_TIM1_Init+0x98>)
 8000fb2:	4a1f      	ldr	r2, [pc, #124]	@ (8001030 <MX_TIM1_Init+0x9c>)
 8000fb4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 999;
 8000fb6:	4b1d      	ldr	r3, [pc, #116]	@ (800102c <MX_TIM1_Init+0x98>)
 8000fb8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000fbc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fbe:	4b1b      	ldr	r3, [pc, #108]	@ (800102c <MX_TIM1_Init+0x98>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 168-1;
 8000fc4:	4b19      	ldr	r3, [pc, #100]	@ (800102c <MX_TIM1_Init+0x98>)
 8000fc6:	22a7      	movs	r2, #167	@ 0xa7
 8000fc8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fca:	4b18      	ldr	r3, [pc, #96]	@ (800102c <MX_TIM1_Init+0x98>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000fd0:	4b16      	ldr	r3, [pc, #88]	@ (800102c <MX_TIM1_Init+0x98>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fd6:	4b15      	ldr	r3, [pc, #84]	@ (800102c <MX_TIM1_Init+0x98>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000fdc:	4813      	ldr	r0, [pc, #76]	@ (800102c <MX_TIM1_Init+0x98>)
 8000fde:	f002 ffc7 	bl	8003f70 <HAL_TIM_Base_Init>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d001      	beq.n	8000fec <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000fe8:	f7ff fc5e 	bl	80008a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ff0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000ff2:	f107 0308 	add.w	r3, r7, #8
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	480c      	ldr	r0, [pc, #48]	@ (800102c <MX_TIM1_Init+0x98>)
 8000ffa:	f003 f969 	bl	80042d0 <HAL_TIM_ConfigClockSource>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d001      	beq.n	8001008 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001004:	f7ff fc50 	bl	80008a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001008:	2300      	movs	r3, #0
 800100a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800100c:	2300      	movs	r3, #0
 800100e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001010:	463b      	mov	r3, r7
 8001012:	4619      	mov	r1, r3
 8001014:	4805      	ldr	r0, [pc, #20]	@ (800102c <MX_TIM1_Init+0x98>)
 8001016:	f003 fb91 	bl	800473c <HAL_TIMEx_MasterConfigSynchronization>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d001      	beq.n	8001024 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001020:	f7ff fc42 	bl	80008a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001024:	bf00      	nop
 8001026:	3718      	adds	r7, #24
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	2000144c 	.word	0x2000144c
 8001030:	40010000 	.word	0x40010000

08001034 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b084      	sub	sp, #16
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a0e      	ldr	r2, [pc, #56]	@ (800107c <HAL_TIM_Base_MspInit+0x48>)
 8001042:	4293      	cmp	r3, r2
 8001044:	d115      	bne.n	8001072 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001046:	2300      	movs	r3, #0
 8001048:	60fb      	str	r3, [r7, #12]
 800104a:	4b0d      	ldr	r3, [pc, #52]	@ (8001080 <HAL_TIM_Base_MspInit+0x4c>)
 800104c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800104e:	4a0c      	ldr	r2, [pc, #48]	@ (8001080 <HAL_TIM_Base_MspInit+0x4c>)
 8001050:	f043 0301 	orr.w	r3, r3, #1
 8001054:	6453      	str	r3, [r2, #68]	@ 0x44
 8001056:	4b0a      	ldr	r3, [pc, #40]	@ (8001080 <HAL_TIM_Base_MspInit+0x4c>)
 8001058:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800105a:	f003 0301 	and.w	r3, r3, #1
 800105e:	60fb      	str	r3, [r7, #12]
 8001060:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001062:	2200      	movs	r2, #0
 8001064:	2100      	movs	r1, #0
 8001066:	2019      	movs	r0, #25
 8001068:	f000 fce7 	bl	8001a3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800106c:	2019      	movs	r0, #25
 800106e:	f000 fd00 	bl	8001a72 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001072:	bf00      	nop
 8001074:	3710      	adds	r7, #16
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	40010000 	.word	0x40010000
 8001080:	40023800 	.word	0x40023800

08001084 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart6;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001088:	4b12      	ldr	r3, [pc, #72]	@ (80010d4 <MX_USART2_UART_Init+0x50>)
 800108a:	4a13      	ldr	r2, [pc, #76]	@ (80010d8 <MX_USART2_UART_Init+0x54>)
 800108c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 230400;
 800108e:	4b11      	ldr	r3, [pc, #68]	@ (80010d4 <MX_USART2_UART_Init+0x50>)
 8001090:	f44f 3261 	mov.w	r2, #230400	@ 0x38400
 8001094:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8001096:	4b0f      	ldr	r3, [pc, #60]	@ (80010d4 <MX_USART2_UART_Init+0x50>)
 8001098:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800109c:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800109e:	4b0d      	ldr	r3, [pc, #52]	@ (80010d4 <MX_USART2_UART_Init+0x50>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 80010a4:	4b0b      	ldr	r3, [pc, #44]	@ (80010d4 <MX_USART2_UART_Init+0x50>)
 80010a6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80010aa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80010ac:	4b09      	ldr	r3, [pc, #36]	@ (80010d4 <MX_USART2_UART_Init+0x50>)
 80010ae:	220c      	movs	r2, #12
 80010b0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010b2:	4b08      	ldr	r3, [pc, #32]	@ (80010d4 <MX_USART2_UART_Init+0x50>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80010b8:	4b06      	ldr	r3, [pc, #24]	@ (80010d4 <MX_USART2_UART_Init+0x50>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80010be:	4805      	ldr	r0, [pc, #20]	@ (80010d4 <MX_USART2_UART_Init+0x50>)
 80010c0:	f003 fbcc 	bl	800485c <HAL_UART_Init>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d001      	beq.n	80010ce <MX_USART2_UART_Init+0x4a>
  {
    Error_Handler();
 80010ca:	f7ff fbed 	bl	80008a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80010ce:	bf00      	nop
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	20001494 	.word	0x20001494
 80010d8:	40004400 	.word	0x40004400

080010dc <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80010e0:	4b12      	ldr	r3, [pc, #72]	@ (800112c <MX_USART3_UART_Init+0x50>)
 80010e2:	4a13      	ldr	r2, [pc, #76]	@ (8001130 <MX_USART3_UART_Init+0x54>)
 80010e4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 230400;
 80010e6:	4b11      	ldr	r3, [pc, #68]	@ (800112c <MX_USART3_UART_Init+0x50>)
 80010e8:	f44f 3261 	mov.w	r2, #230400	@ 0x38400
 80010ec:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_9B;
 80010ee:	4b0f      	ldr	r3, [pc, #60]	@ (800112c <MX_USART3_UART_Init+0x50>)
 80010f0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80010f4:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80010f6:	4b0d      	ldr	r3, [pc, #52]	@ (800112c <MX_USART3_UART_Init+0x50>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_EVEN;
 80010fc:	4b0b      	ldr	r3, [pc, #44]	@ (800112c <MX_USART3_UART_Init+0x50>)
 80010fe:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001102:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001104:	4b09      	ldr	r3, [pc, #36]	@ (800112c <MX_USART3_UART_Init+0x50>)
 8001106:	220c      	movs	r2, #12
 8001108:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800110a:	4b08      	ldr	r3, [pc, #32]	@ (800112c <MX_USART3_UART_Init+0x50>)
 800110c:	2200      	movs	r2, #0
 800110e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001110:	4b06      	ldr	r3, [pc, #24]	@ (800112c <MX_USART3_UART_Init+0x50>)
 8001112:	2200      	movs	r2, #0
 8001114:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001116:	4805      	ldr	r0, [pc, #20]	@ (800112c <MX_USART3_UART_Init+0x50>)
 8001118:	f003 fba0 	bl	800485c <HAL_UART_Init>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d001      	beq.n	8001126 <MX_USART3_UART_Init+0x4a>
  {
    Error_Handler();
 8001122:	f7ff fbc1 	bl	80008a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001126:	bf00      	nop
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	200014dc 	.word	0x200014dc
 8001130:	40004800 	.word	0x40004800

08001134 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001138:	4b12      	ldr	r3, [pc, #72]	@ (8001184 <MX_USART6_UART_Init+0x50>)
 800113a:	4a13      	ldr	r2, [pc, #76]	@ (8001188 <MX_USART6_UART_Init+0x54>)
 800113c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 230400;
 800113e:	4b11      	ldr	r3, [pc, #68]	@ (8001184 <MX_USART6_UART_Init+0x50>)
 8001140:	f44f 3261 	mov.w	r2, #230400	@ 0x38400
 8001144:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_9B;
 8001146:	4b0f      	ldr	r3, [pc, #60]	@ (8001184 <MX_USART6_UART_Init+0x50>)
 8001148:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800114c:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800114e:	4b0d      	ldr	r3, [pc, #52]	@ (8001184 <MX_USART6_UART_Init+0x50>)
 8001150:	2200      	movs	r2, #0
 8001152:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_EVEN;
 8001154:	4b0b      	ldr	r3, [pc, #44]	@ (8001184 <MX_USART6_UART_Init+0x50>)
 8001156:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800115a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800115c:	4b09      	ldr	r3, [pc, #36]	@ (8001184 <MX_USART6_UART_Init+0x50>)
 800115e:	220c      	movs	r2, #12
 8001160:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001162:	4b08      	ldr	r3, [pc, #32]	@ (8001184 <MX_USART6_UART_Init+0x50>)
 8001164:	2200      	movs	r2, #0
 8001166:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001168:	4b06      	ldr	r3, [pc, #24]	@ (8001184 <MX_USART6_UART_Init+0x50>)
 800116a:	2200      	movs	r2, #0
 800116c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800116e:	4805      	ldr	r0, [pc, #20]	@ (8001184 <MX_USART6_UART_Init+0x50>)
 8001170:	f003 fb74 	bl	800485c <HAL_UART_Init>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <MX_USART6_UART_Init+0x4a>
  {
    Error_Handler();
 800117a:	f7ff fb95 	bl	80008a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800117e:	bf00      	nop
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	20001524 	.word	0x20001524
 8001188:	40011400 	.word	0x40011400

0800118c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b08e      	sub	sp, #56	@ 0x38
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001194:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001198:	2200      	movs	r2, #0
 800119a:	601a      	str	r2, [r3, #0]
 800119c:	605a      	str	r2, [r3, #4]
 800119e:	609a      	str	r2, [r3, #8]
 80011a0:	60da      	str	r2, [r3, #12]
 80011a2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4a57      	ldr	r2, [pc, #348]	@ (8001308 <HAL_UART_MspInit+0x17c>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d134      	bne.n	8001218 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80011ae:	2300      	movs	r3, #0
 80011b0:	623b      	str	r3, [r7, #32]
 80011b2:	4b56      	ldr	r3, [pc, #344]	@ (800130c <HAL_UART_MspInit+0x180>)
 80011b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011b6:	4a55      	ldr	r2, [pc, #340]	@ (800130c <HAL_UART_MspInit+0x180>)
 80011b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80011be:	4b53      	ldr	r3, [pc, #332]	@ (800130c <HAL_UART_MspInit+0x180>)
 80011c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011c6:	623b      	str	r3, [r7, #32]
 80011c8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ca:	2300      	movs	r3, #0
 80011cc:	61fb      	str	r3, [r7, #28]
 80011ce:	4b4f      	ldr	r3, [pc, #316]	@ (800130c <HAL_UART_MspInit+0x180>)
 80011d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011d2:	4a4e      	ldr	r2, [pc, #312]	@ (800130c <HAL_UART_MspInit+0x180>)
 80011d4:	f043 0301 	orr.w	r3, r3, #1
 80011d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80011da:	4b4c      	ldr	r3, [pc, #304]	@ (800130c <HAL_UART_MspInit+0x180>)
 80011dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011de:	f003 0301 	and.w	r3, r3, #1
 80011e2:	61fb      	str	r3, [r7, #28]
 80011e4:	69fb      	ldr	r3, [r7, #28]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80011e6:	230c      	movs	r3, #12
 80011e8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ea:	2302      	movs	r3, #2
 80011ec:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ee:	2300      	movs	r3, #0
 80011f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011f2:	2303      	movs	r3, #3
 80011f4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80011f6:	2307      	movs	r3, #7
 80011f8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011fe:	4619      	mov	r1, r3
 8001200:	4843      	ldr	r0, [pc, #268]	@ (8001310 <HAL_UART_MspInit+0x184>)
 8001202:	f000 fd6d 	bl	8001ce0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001206:	2200      	movs	r2, #0
 8001208:	2100      	movs	r1, #0
 800120a:	2026      	movs	r0, #38	@ 0x26
 800120c:	f000 fc15 	bl	8001a3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001210:	2026      	movs	r0, #38	@ 0x26
 8001212:	f000 fc2e 	bl	8001a72 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8001216:	e073      	b.n	8001300 <HAL_UART_MspInit+0x174>
  else if(uartHandle->Instance==USART3)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4a3d      	ldr	r2, [pc, #244]	@ (8001314 <HAL_UART_MspInit+0x188>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d135      	bne.n	800128e <HAL_UART_MspInit+0x102>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001222:	2300      	movs	r3, #0
 8001224:	61bb      	str	r3, [r7, #24]
 8001226:	4b39      	ldr	r3, [pc, #228]	@ (800130c <HAL_UART_MspInit+0x180>)
 8001228:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800122a:	4a38      	ldr	r2, [pc, #224]	@ (800130c <HAL_UART_MspInit+0x180>)
 800122c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001230:	6413      	str	r3, [r2, #64]	@ 0x40
 8001232:	4b36      	ldr	r3, [pc, #216]	@ (800130c <HAL_UART_MspInit+0x180>)
 8001234:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001236:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800123a:	61bb      	str	r3, [r7, #24]
 800123c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800123e:	2300      	movs	r3, #0
 8001240:	617b      	str	r3, [r7, #20]
 8001242:	4b32      	ldr	r3, [pc, #200]	@ (800130c <HAL_UART_MspInit+0x180>)
 8001244:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001246:	4a31      	ldr	r2, [pc, #196]	@ (800130c <HAL_UART_MspInit+0x180>)
 8001248:	f043 0302 	orr.w	r3, r3, #2
 800124c:	6313      	str	r3, [r2, #48]	@ 0x30
 800124e:	4b2f      	ldr	r3, [pc, #188]	@ (800130c <HAL_UART_MspInit+0x180>)
 8001250:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001252:	f003 0302 	and.w	r3, r3, #2
 8001256:	617b      	str	r3, [r7, #20]
 8001258:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800125a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800125e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001260:	2302      	movs	r3, #2
 8001262:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001264:	2300      	movs	r3, #0
 8001266:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001268:	2303      	movs	r3, #3
 800126a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800126c:	2307      	movs	r3, #7
 800126e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001270:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001274:	4619      	mov	r1, r3
 8001276:	4828      	ldr	r0, [pc, #160]	@ (8001318 <HAL_UART_MspInit+0x18c>)
 8001278:	f000 fd32 	bl	8001ce0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800127c:	2200      	movs	r2, #0
 800127e:	2100      	movs	r1, #0
 8001280:	2027      	movs	r0, #39	@ 0x27
 8001282:	f000 fbda 	bl	8001a3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001286:	2027      	movs	r0, #39	@ 0x27
 8001288:	f000 fbf3 	bl	8001a72 <HAL_NVIC_EnableIRQ>
}
 800128c:	e038      	b.n	8001300 <HAL_UART_MspInit+0x174>
  else if(uartHandle->Instance==USART6)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4a22      	ldr	r2, [pc, #136]	@ (800131c <HAL_UART_MspInit+0x190>)
 8001294:	4293      	cmp	r3, r2
 8001296:	d133      	bne.n	8001300 <HAL_UART_MspInit+0x174>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001298:	2300      	movs	r3, #0
 800129a:	613b      	str	r3, [r7, #16]
 800129c:	4b1b      	ldr	r3, [pc, #108]	@ (800130c <HAL_UART_MspInit+0x180>)
 800129e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012a0:	4a1a      	ldr	r2, [pc, #104]	@ (800130c <HAL_UART_MspInit+0x180>)
 80012a2:	f043 0320 	orr.w	r3, r3, #32
 80012a6:	6453      	str	r3, [r2, #68]	@ 0x44
 80012a8:	4b18      	ldr	r3, [pc, #96]	@ (800130c <HAL_UART_MspInit+0x180>)
 80012aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012ac:	f003 0320 	and.w	r3, r3, #32
 80012b0:	613b      	str	r3, [r7, #16]
 80012b2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012b4:	2300      	movs	r3, #0
 80012b6:	60fb      	str	r3, [r7, #12]
 80012b8:	4b14      	ldr	r3, [pc, #80]	@ (800130c <HAL_UART_MspInit+0x180>)
 80012ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012bc:	4a13      	ldr	r2, [pc, #76]	@ (800130c <HAL_UART_MspInit+0x180>)
 80012be:	f043 0304 	orr.w	r3, r3, #4
 80012c2:	6313      	str	r3, [r2, #48]	@ 0x30
 80012c4:	4b11      	ldr	r3, [pc, #68]	@ (800130c <HAL_UART_MspInit+0x180>)
 80012c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012c8:	f003 0304 	and.w	r3, r3, #4
 80012cc:	60fb      	str	r3, [r7, #12]
 80012ce:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80012d0:	23c0      	movs	r3, #192	@ 0xc0
 80012d2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d4:	2302      	movs	r3, #2
 80012d6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d8:	2300      	movs	r3, #0
 80012da:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012dc:	2303      	movs	r3, #3
 80012de:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80012e0:	2308      	movs	r3, #8
 80012e2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012e4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012e8:	4619      	mov	r1, r3
 80012ea:	480d      	ldr	r0, [pc, #52]	@ (8001320 <HAL_UART_MspInit+0x194>)
 80012ec:	f000 fcf8 	bl	8001ce0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 80012f0:	2200      	movs	r2, #0
 80012f2:	2100      	movs	r1, #0
 80012f4:	2047      	movs	r0, #71	@ 0x47
 80012f6:	f000 fba0 	bl	8001a3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80012fa:	2047      	movs	r0, #71	@ 0x47
 80012fc:	f000 fbb9 	bl	8001a72 <HAL_NVIC_EnableIRQ>
}
 8001300:	bf00      	nop
 8001302:	3738      	adds	r7, #56	@ 0x38
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	40004400 	.word	0x40004400
 800130c:	40023800 	.word	0x40023800
 8001310:	40020000 	.word	0x40020000
 8001314:	40004800 	.word	0x40004800
 8001318:	40020400 	.word	0x40020400
 800131c:	40011400 	.word	0x40011400
 8001320:	40020800 	.word	0x40020800

08001324 <User_CDC_Transmit_FS>:
    sprintf(USB_CdcTxBuffer_FS, "-------------------------------------------\r\n" );
    User_CDC_Transmit_FS((uint8_t *) USB_CdcTxBuffer_FS, strlen(USB_CdcTxBuffer_FS));
}

void User_CDC_Transmit_FS(uint8_t * pdata, uint16_t datalength)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b082      	sub	sp, #8
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
 800132c:	460b      	mov	r3, r1
 800132e:	807b      	strh	r3, [r7, #2]
    // while(CDC_Transmit_FS((uint8_t *) pdata, datalength) == USBD_BUSY);
    CDC_Transmit_FS((uint8_t *) pdata, datalength);
 8001330:	887b      	ldrh	r3, [r7, #2]
 8001332:	4619      	mov	r1, r3
 8001334:	6878      	ldr	r0, [r7, #4]
 8001336:	f007 ffe9 	bl	800930c <CDC_Transmit_FS>
    
}
 800133a:	bf00      	nop
 800133c:	3708      	adds	r7, #8
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
	...

08001344 <LED_Proc>:
    LED_RED_PIN         GPIO_PIN_14
    LED_GREEN_PIN       GPIO_PIN_0
    LED_BLUE_PIN        GPIO_PIN_7
*/
static void LED_Proc (void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0
    if(TIM1_CNT_1 >= 500)
 8001348:	4b07      	ldr	r3, [pc, #28]	@ (8001368 <LED_Proc+0x24>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001350:	d307      	bcc.n	8001362 <LED_Proc+0x1e>
    {
        TIM1_CNT_1 = 0;
 8001352:	4b05      	ldr	r3, [pc, #20]	@ (8001368 <LED_Proc+0x24>)
 8001354:	2200      	movs	r2, #0
 8001356:	601a      	str	r2, [r3, #0]
        
        HAL_GPIO_TogglePin(LED_ALL_PORT, LED_ALL_PIN);
 8001358:	f244 0181 	movw	r1, #16513	@ 0x4081
 800135c:	4803      	ldr	r0, [pc, #12]	@ (800136c <LED_Proc+0x28>)
 800135e:	f000 fe84 	bl	800206a <HAL_GPIO_TogglePin>
    }    
}
 8001362:	bf00      	nop
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	2000156c 	.word	0x2000156c
 800136c:	40020400 	.word	0x40020400

08001370 <GPIO_Proc>:

void GPIO_Proc (void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	af00      	add	r7, sp, #0
    LED_Proc();
 8001374:	f7ff ffe6 	bl	8001344 <LED_Proc>
}
 8001378:	bf00      	nop
 800137a:	bd80      	pop	{r7, pc}

0800137c <debug_buf_init>:
static uint8_t cnt1, cnt2;
static uint16_t seq;
static bool flag_end;

void debug_buf_init(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	af00      	add	r7, sp, #0
	seq = 0;
 8001380:	4b07      	ldr	r3, [pc, #28]	@ (80013a0 <debug_buf_init+0x24>)
 8001382:	2200      	movs	r2, #0
 8001384:	801a      	strh	r2, [r3, #0]
	cnt1 = 0;
 8001386:	4b07      	ldr	r3, [pc, #28]	@ (80013a4 <debug_buf_init+0x28>)
 8001388:	2200      	movs	r2, #0
 800138a:	701a      	strb	r2, [r3, #0]
	cnt2 = 0;
 800138c:	4b06      	ldr	r3, [pc, #24]	@ (80013a8 <debug_buf_init+0x2c>)
 800138e:	2200      	movs	r2, #0
 8001390:	701a      	strb	r2, [r3, #0]
	flag_end = false;
 8001392:	4b06      	ldr	r3, [pc, #24]	@ (80013ac <debug_buf_init+0x30>)
 8001394:	2200      	movs	r2, #0
 8001396:	701a      	strb	r2, [r3, #0]

    mseq_init();
 8001398:	f000 f80a 	bl	80013b0 <mseq_init>
}
 800139c:	bf00      	nop
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	2000bba2 	.word	0x2000bba2
 80013a4:	2000bba0 	.word	0x2000bba0
 80013a8:	2000bba1 	.word	0x2000bba1
 80013ac:	2000bba4 	.word	0x2000bba4

080013b0 <mseq_init>:
	
    return flag_end;
}

void mseq_init (void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
    mseq_cnt = 0;
 80013b4:	4b03      	ldr	r3, [pc, #12]	@ (80013c4 <mseq_init+0x14>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	801a      	strh	r2, [r3, #0]
}
 80013ba:	bf00      	nop
 80013bc:	46bd      	mov	sp, r7
 80013be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c2:	4770      	bx	lr
 80013c4:	20003e9e 	.word	0x20003e9e

080013c8 <mseq_upload_master>:

    mseq_cnt++;
}
#else
void mseq_upload_master (uint16_t size)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b085      	sub	sp, #20
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	4603      	mov	r3, r0
 80013d0:	80fb      	strh	r3, [r7, #6]
    uint16_t rxdataSize = 0;
 80013d2:	2300      	movs	r3, #0
 80013d4:	81fb      	strh	r3, [r7, #14]

    rxdataSize = size;
 80013d6:	88fb      	ldrh	r3, [r7, #6]
 80013d8:	81fb      	strh	r3, [r7, #14]

    mseq[mseq_cnt].MC = uart2_rx_IDLE_buf[0];
 80013da:	4b11      	ldr	r3, [pc, #68]	@ (8001420 <mseq_upload_master+0x58>)
 80013dc:	881b      	ldrh	r3, [r3, #0]
 80013de:	4619      	mov	r1, r3
 80013e0:	4b10      	ldr	r3, [pc, #64]	@ (8001424 <mseq_upload_master+0x5c>)
 80013e2:	7818      	ldrb	r0, [r3, #0]
 80013e4:	4a10      	ldr	r2, [pc, #64]	@ (8001428 <mseq_upload_master+0x60>)
 80013e6:	460b      	mov	r3, r1
 80013e8:	005b      	lsls	r3, r3, #1
 80013ea:	440b      	add	r3, r1
 80013ec:	009b      	lsls	r3, r3, #2
 80013ee:	4413      	add	r3, r2
 80013f0:	3301      	adds	r3, #1
 80013f2:	4602      	mov	r2, r0
 80013f4:	701a      	strb	r2, [r3, #0]
    mseq[mseq_cnt].CKT = uart2_rx_IDLE_buf[1];
 80013f6:	4b0a      	ldr	r3, [pc, #40]	@ (8001420 <mseq_upload_master+0x58>)
 80013f8:	881b      	ldrh	r3, [r3, #0]
 80013fa:	4619      	mov	r1, r3
 80013fc:	4b09      	ldr	r3, [pc, #36]	@ (8001424 <mseq_upload_master+0x5c>)
 80013fe:	7858      	ldrb	r0, [r3, #1]
 8001400:	4a09      	ldr	r2, [pc, #36]	@ (8001428 <mseq_upload_master+0x60>)
 8001402:	460b      	mov	r3, r1
 8001404:	005b      	lsls	r3, r3, #1
 8001406:	440b      	add	r3, r1
 8001408:	009b      	lsls	r3, r3, #2
 800140a:	4413      	add	r3, r2
 800140c:	3302      	adds	r3, #2
 800140e:	4602      	mov	r2, r0
 8001410:	701a      	strb	r2, [r3, #0]
}
 8001412:	bf00      	nop
 8001414:	3714      	adds	r7, #20
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr
 800141e:	bf00      	nop
 8001420:	20003e9e 	.word	0x20003e9e
 8001424:	20001788 	.word	0x20001788
 8001428:	20003ea0 	.word	0x20003ea0

0800142c <mseq_upload_device>:

void mseq_upload_device (uint16_t size)
{
 800142c:	b480      	push	{r7}
 800142e:	b085      	sub	sp, #20
 8001430:	af00      	add	r7, sp, #0
 8001432:	4603      	mov	r3, r0
 8001434:	80fb      	strh	r3, [r7, #6]
    uint16_t rxdataSize = 0;
 8001436:	2300      	movs	r3, #0
 8001438:	81fb      	strh	r3, [r7, #14]

    rxdataSize = size;
 800143a:	88fb      	ldrh	r3, [r7, #6]
 800143c:	81fb      	strh	r3, [r7, #14]

    // mseq[mseq_cnt].CKS = uart3_rx_IDLE_buf[rxdataSize - 1];
    mseq[mseq_cnt].CKS = uart6_rx_IDLE_buf[rxdataSize - 1];
 800143e:	89fb      	ldrh	r3, [r7, #14]
 8001440:	3b01      	subs	r3, #1
 8001442:	4a0d      	ldr	r2, [pc, #52]	@ (8001478 <mseq_upload_device+0x4c>)
 8001444:	8812      	ldrh	r2, [r2, #0]
 8001446:	4611      	mov	r1, r2
 8001448:	4a0c      	ldr	r2, [pc, #48]	@ (800147c <mseq_upload_device+0x50>)
 800144a:	5cd0      	ldrb	r0, [r2, r3]
 800144c:	4a0c      	ldr	r2, [pc, #48]	@ (8001480 <mseq_upload_device+0x54>)
 800144e:	460b      	mov	r3, r1
 8001450:	005b      	lsls	r3, r3, #1
 8001452:	440b      	add	r3, r1
 8001454:	009b      	lsls	r3, r3, #2
 8001456:	4413      	add	r3, r2
 8001458:	3303      	adds	r3, #3
 800145a:	4602      	mov	r2, r0
 800145c:	701a      	strb	r2, [r3, #0]

    mseq_cnt++;
 800145e:	4b06      	ldr	r3, [pc, #24]	@ (8001478 <mseq_upload_device+0x4c>)
 8001460:	881b      	ldrh	r3, [r3, #0]
 8001462:	3301      	adds	r3, #1
 8001464:	b29a      	uxth	r2, r3
 8001466:	4b04      	ldr	r3, [pc, #16]	@ (8001478 <mseq_upload_device+0x4c>)
 8001468:	801a      	strh	r2, [r3, #0]
}
 800146a:	bf00      	nop
 800146c:	3714      	adds	r7, #20
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr
 8001476:	bf00      	nop
 8001478:	20003e9e 	.word	0x20003e9e
 800147c:	20002b10 	.word	0x20002b10
 8001480:	20003ea0 	.word	0x20003ea0

08001484 <mseq_display>:
#endif

void mseq_display (void)
{
 8001484:	b5b0      	push	{r4, r5, r7, lr}
 8001486:	b084      	sub	sp, #16
 8001488:	af02      	add	r7, sp, #8
    uint16_t i = 0;
 800148a:	2300      	movs	r3, #0
 800148c:	80fb      	strh	r3, [r7, #6]

    for (i = 0; i < mseq_cnt; ++i)
 800148e:	2300      	movs	r3, #0
 8001490:	80fb      	strh	r3, [r7, #6]
 8001492:	e026      	b.n	80014e2 <mseq_display+0x5e>
    {
        printf("%d,%d,%d,%d\r\n", i, mseq[i].MC, mseq[i].CKT, mseq[i].CKS);
 8001494:	88f9      	ldrh	r1, [r7, #6]
 8001496:	88fa      	ldrh	r2, [r7, #6]
 8001498:	4817      	ldr	r0, [pc, #92]	@ (80014f8 <mseq_display+0x74>)
 800149a:	4613      	mov	r3, r2
 800149c:	005b      	lsls	r3, r3, #1
 800149e:	4413      	add	r3, r2
 80014a0:	009b      	lsls	r3, r3, #2
 80014a2:	4403      	add	r3, r0
 80014a4:	3301      	adds	r3, #1
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	461c      	mov	r4, r3
 80014aa:	88fa      	ldrh	r2, [r7, #6]
 80014ac:	4812      	ldr	r0, [pc, #72]	@ (80014f8 <mseq_display+0x74>)
 80014ae:	4613      	mov	r3, r2
 80014b0:	005b      	lsls	r3, r3, #1
 80014b2:	4413      	add	r3, r2
 80014b4:	009b      	lsls	r3, r3, #2
 80014b6:	4403      	add	r3, r0
 80014b8:	3302      	adds	r3, #2
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	461d      	mov	r5, r3
 80014be:	88fa      	ldrh	r2, [r7, #6]
 80014c0:	480d      	ldr	r0, [pc, #52]	@ (80014f8 <mseq_display+0x74>)
 80014c2:	4613      	mov	r3, r2
 80014c4:	005b      	lsls	r3, r3, #1
 80014c6:	4413      	add	r3, r2
 80014c8:	009b      	lsls	r3, r3, #2
 80014ca:	4403      	add	r3, r0
 80014cc:	3303      	adds	r3, #3
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	9300      	str	r3, [sp, #0]
 80014d2:	462b      	mov	r3, r5
 80014d4:	4622      	mov	r2, r4
 80014d6:	4809      	ldr	r0, [pc, #36]	@ (80014fc <mseq_display+0x78>)
 80014d8:	f008 fc58 	bl	8009d8c <iprintf>
    for (i = 0; i < mseq_cnt; ++i)
 80014dc:	88fb      	ldrh	r3, [r7, #6]
 80014de:	3301      	adds	r3, #1
 80014e0:	80fb      	strh	r3, [r7, #6]
 80014e2:	4b07      	ldr	r3, [pc, #28]	@ (8001500 <mseq_display+0x7c>)
 80014e4:	881b      	ldrh	r3, [r3, #0]
 80014e6:	88fa      	ldrh	r2, [r7, #6]
 80014e8:	429a      	cmp	r2, r3
 80014ea:	d3d3      	bcc.n	8001494 <mseq_display+0x10>
        // HAL_Delay(1);
    }
}
 80014ec:	bf00      	nop
 80014ee:	bf00      	nop
 80014f0:	3708      	adds	r7, #8
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bdb0      	pop	{r4, r5, r7, pc}
 80014f6:	bf00      	nop
 80014f8:	20003ea0 	.word	0x20003ea0
 80014fc:	0800af40 	.word	0x0800af40
 8001500:	20003e9e 	.word	0x20003e9e

08001504 <UserButton_BufferClear>:
    last_uart_source = current_uart_source;
}
#endif

static uint8_t UserButton_BufferClear (void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b082      	sub	sp, #8
 8001508:	af00      	add	r7, sp, #0
    uint8_t buttonstatus = 0;
 800150a:	2300      	movs	r3, #0
 800150c:	71fb      	strb	r3, [r7, #7]

    if (TIM1_CNT_2 >= 100)
 800150e:	4b10      	ldr	r3, [pc, #64]	@ (8001550 <UserButton_BufferClear+0x4c>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	2b63      	cmp	r3, #99	@ 0x63
 8001514:	d912      	bls.n	800153c <UserButton_BufferClear+0x38>
    {
        TIM1_CNT_2 = 0;
 8001516:	4b0e      	ldr	r3, [pc, #56]	@ (8001550 <UserButton_BufferClear+0x4c>)
 8001518:	2200      	movs	r2, #0
 800151a:	601a      	str	r2, [r3, #0]

        if (UserButton_Flag == 1)
 800151c:	4b0d      	ldr	r3, [pc, #52]	@ (8001554 <UserButton_BufferClear+0x50>)
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	2b01      	cmp	r3, #1
 8001522:	d10b      	bne.n	800153c <UserButton_BufferClear+0x38>
        {
            buttonstatus = UserButton_Flag;
 8001524:	4b0b      	ldr	r3, [pc, #44]	@ (8001554 <UserButton_BufferClear+0x50>)
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	71fb      	strb	r3, [r7, #7]

            UserButton_Flag = 0;
 800152a:	4b0a      	ldr	r3, [pc, #40]	@ (8001554 <UserButton_BufferClear+0x50>)
 800152c:	2200      	movs	r2, #0
 800152e:	701a      	strb	r2, [r3, #0]

            memset(debug_buf, 0, sizeof(debug_buf));
 8001530:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8001534:	2100      	movs	r1, #0
 8001536:	4808      	ldr	r0, [pc, #32]	@ (8001558 <UserButton_BufferClear+0x54>)
 8001538:	f008 fd90 	bl	800a05c <memset>
        }
        
    }
    return !buttonstatus;
 800153c:	79fb      	ldrb	r3, [r7, #7]
 800153e:	2b00      	cmp	r3, #0
 8001540:	bf0c      	ite	eq
 8001542:	2301      	moveq	r3, #1
 8001544:	2300      	movne	r3, #0
 8001546:	b2db      	uxtb	r3, r3
}
 8001548:	4618      	mov	r0, r3
 800154a:	3708      	adds	r7, #8
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}
 8001550:	20001570 	.word	0x20001570
 8001554:	20001578 	.word	0x20001578
 8001558:	20006d80 	.word	0x20006d80

0800155c <UART_RX_Proc>:

#if 1
void UART_RX_Proc (void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b082      	sub	sp, #8
 8001560:	af00      	add	r7, sp, #0
    uint32_t i,j,k = 0;
 8001562:	2300      	movs	r3, #0
 8001564:	607b      	str	r3, [r7, #4]

    #if 1
    // if (uart2_rx_flag != 0)
    if (uart2_rx_flag == 0)
 8001566:	4b17      	ldr	r3, [pc, #92]	@ (80015c4 <UART_RX_Proc+0x68>)
 8001568:	781b      	ldrb	r3, [r3, #0]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d125      	bne.n	80015ba <UART_RX_Proc+0x5e>
    {
        uart2_rx_flag = 0;
 800156e:	4b15      	ldr	r3, [pc, #84]	@ (80015c4 <UART_RX_Proc+0x68>)
 8001570:	2200      	movs	r2, #0
 8001572:	701a      	strb	r2, [r3, #0]

            HAL_UART_DMAStop(&huart2);
            HAL_UART_DMAStop(&huart3);
        }
        #else
        if (uart_rx_IDLE_TotalCnt >= 10000)
 8001574:	4b14      	ldr	r3, [pc, #80]	@ (80015c8 <UART_RX_Proc+0x6c>)
 8001576:	881b      	ldrh	r3, [r3, #0]
 8001578:	f242 720f 	movw	r2, #9999	@ 0x270f
 800157c:	4293      	cmp	r3, r2
 800157e:	d904      	bls.n	800158a <UART_RX_Proc+0x2e>
        {
            uart_rx_IDLE_TotalCnt = 0;
 8001580:	4b11      	ldr	r3, [pc, #68]	@ (80015c8 <UART_RX_Proc+0x6c>)
 8001582:	2200      	movs	r2, #0
 8001584:	801a      	strh	r2, [r3, #0]
            mseq_display();
 8001586:	f7ff ff7d 	bl	8001484 <mseq_display>
        }
        #endif

        if(UserButton_BufferClear() == HAL_OK)
 800158a:	f7ff ffbb 	bl	8001504 <UserButton_BufferClear>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d112      	bne.n	80015ba <UART_RX_Proc+0x5e>
        {
            printf("\r\nUART RX Buffer Clear.\r\n\n");
 8001594:	480d      	ldr	r0, [pc, #52]	@ (80015cc <UART_RX_Proc+0x70>)
 8001596:	f008 fc61 	bl	8009e5c <puts>
            
            seq = 0;
 800159a:	4b0d      	ldr	r3, [pc, #52]	@ (80015d0 <UART_RX_Proc+0x74>)
 800159c:	2200      	movs	r2, #0
 800159e:	801a      	strh	r2, [r3, #0]
            uart_rx_cnt_total = 0;
 80015a0:	4b0c      	ldr	r3, [pc, #48]	@ (80015d4 <UART_RX_Proc+0x78>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	801a      	strh	r2, [r3, #0]

            HAL_UART_Receive_DMA(&huart2, uart2_rx_buf, UART_RXDATA_MAX);
 80015a6:	2201      	movs	r2, #1
 80015a8:	490b      	ldr	r1, [pc, #44]	@ (80015d8 <UART_RX_Proc+0x7c>)
 80015aa:	480c      	ldr	r0, [pc, #48]	@ (80015dc <UART_RX_Proc+0x80>)
 80015ac:	f003 f9a6 	bl	80048fc <HAL_UART_Receive_DMA>
            HAL_UART_Receive_DMA(&huart3, uart3_rx_buf, UART_RXDATA_MAX);
 80015b0:	2201      	movs	r2, #1
 80015b2:	490b      	ldr	r1, [pc, #44]	@ (80015e0 <UART_RX_Proc+0x84>)
 80015b4:	480b      	ldr	r0, [pc, #44]	@ (80015e4 <UART_RX_Proc+0x88>)
 80015b6:	f003 f9a1 	bl	80048fc <HAL_UART_Receive_DMA>
        // hdma_usart2_rx.Instance->NDTR = UART_RXDATA_MAX;
        // __HAL_DMA_ENABLE(&hdma_usart2_rx);

        
    }
}
 80015ba:	bf00      	nop
 80015bc:	3708      	adds	r7, #8
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	20003e9a 	.word	0x20003e9a
 80015c8:	20003e98 	.word	0x20003e98
 80015cc:	0800af50 	.word	0x0800af50
 80015d0:	2000bba2 	.word	0x2000bba2
 80015d4:	20003e9c 	.word	0x20003e9c
 80015d8:	20001780 	.word	0x20001780
 80015dc:	20001494 	.word	0x20001494
 80015e0:	20001784 	.word	0x20001784
 80015e4:	200014dc 	.word	0x200014dc

080015e8 <USB_CDC_Proc>:
/*----------------------------------------------------------------------------*/
static uint16_t count = 0;

/* USER CODE BEGIN 1 */
void USB_CDC_Proc (void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0

    //     sprintf(USB_CdcTxBuffer_FS, "-------------------------------------------\r\n" );
    //     CDC_Transmit_FS(USB_CdcTxBuffer_FS, strlen(USB_CdcTxBuffer_FS));
    // }
    // #endif
}
 80015ec:	bf00      	nop
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr
	...

080015f8 <USB_CDC_RX_Proc>:

void USB_CDC_RX_Proc(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	af00      	add	r7, sp, #0
    if (USB_CdcRxBuffer_FS_cnt != NULL)
 80015fc:	4b2d      	ldr	r3, [pc, #180]	@ (80016b4 <USB_CDC_RX_Proc+0xbc>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d055      	beq.n	80016b0 <USB_CDC_RX_Proc+0xb8>
    {
        if (!strncmp("RXBUF ALL PRINT", USB_CdcRxBuffer_FS, USB_CDC_RX_CNT))
 8001604:	4b2b      	ldr	r3, [pc, #172]	@ (80016b4 <USB_CDC_RX_Proc+0xbc>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	3b02      	subs	r3, #2
 800160a:	461a      	mov	r2, r3
 800160c:	492a      	ldr	r1, [pc, #168]	@ (80016b8 <USB_CDC_RX_Proc+0xc0>)
 800160e:	482b      	ldr	r0, [pc, #172]	@ (80016bc <USB_CDC_RX_Proc+0xc4>)
 8001610:	f008 fd2c 	bl	800a06c <strncmp>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	d10d      	bne.n	8001636 <USB_CDC_RX_Proc+0x3e>
        {
            sprintf(USB_CdcTxBuffer_FS, "USB ALL\r\n");
 800161a:	4929      	ldr	r1, [pc, #164]	@ (80016c0 <USB_CDC_RX_Proc+0xc8>)
 800161c:	4829      	ldr	r0, [pc, #164]	@ (80016c4 <USB_CDC_RX_Proc+0xcc>)
 800161e:	f008 fc25 	bl	8009e6c <siprintf>
            User_CDC_Transmit_FS((uint8_t *) USB_CdcTxBuffer_FS, strlen(USB_CdcTxBuffer_FS));
 8001622:	4828      	ldr	r0, [pc, #160]	@ (80016c4 <USB_CDC_RX_Proc+0xcc>)
 8001624:	f7fe fde4 	bl	80001f0 <strlen>
 8001628:	4603      	mov	r3, r0
 800162a:	b29b      	uxth	r3, r3
 800162c:	4619      	mov	r1, r3
 800162e:	4825      	ldr	r0, [pc, #148]	@ (80016c4 <USB_CDC_RX_Proc+0xcc>)
 8001630:	f7ff fe78 	bl	8001324 <User_CDC_Transmit_FS>
 8001634:	e032      	b.n	800169c <USB_CDC_RX_Proc+0xa4>
        }
        else if (!strncmp("RXBUF CLEAR", USB_CdcRxBuffer_FS, USB_CDC_RX_CNT))
 8001636:	4b1f      	ldr	r3, [pc, #124]	@ (80016b4 <USB_CDC_RX_Proc+0xbc>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	3b02      	subs	r3, #2
 800163c:	461a      	mov	r2, r3
 800163e:	491e      	ldr	r1, [pc, #120]	@ (80016b8 <USB_CDC_RX_Proc+0xc0>)
 8001640:	4821      	ldr	r0, [pc, #132]	@ (80016c8 <USB_CDC_RX_Proc+0xd0>)
 8001642:	f008 fd13 	bl	800a06c <strncmp>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d10d      	bne.n	8001668 <USB_CDC_RX_Proc+0x70>
        {
            sprintf(USB_CdcTxBuffer_FS, "USB RX Buffer Clear\r\n");
 800164c:	491f      	ldr	r1, [pc, #124]	@ (80016cc <USB_CDC_RX_Proc+0xd4>)
 800164e:	481d      	ldr	r0, [pc, #116]	@ (80016c4 <USB_CDC_RX_Proc+0xcc>)
 8001650:	f008 fc0c 	bl	8009e6c <siprintf>
            User_CDC_Transmit_FS((uint8_t *) USB_CdcTxBuffer_FS, strlen(USB_CdcTxBuffer_FS));
 8001654:	481b      	ldr	r0, [pc, #108]	@ (80016c4 <USB_CDC_RX_Proc+0xcc>)
 8001656:	f7fe fdcb 	bl	80001f0 <strlen>
 800165a:	4603      	mov	r3, r0
 800165c:	b29b      	uxth	r3, r3
 800165e:	4619      	mov	r1, r3
 8001660:	4818      	ldr	r0, [pc, #96]	@ (80016c4 <USB_CDC_RX_Proc+0xcc>)
 8001662:	f7ff fe5f 	bl	8001324 <User_CDC_Transmit_FS>
 8001666:	e019      	b.n	800169c <USB_CDC_RX_Proc+0xa4>
        }
        else if (!strncmp("SYSTEM RESET", USB_CdcRxBuffer_FS, USB_CDC_RX_CNT))
 8001668:	4b12      	ldr	r3, [pc, #72]	@ (80016b4 <USB_CDC_RX_Proc+0xbc>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	3b02      	subs	r3, #2
 800166e:	461a      	mov	r2, r3
 8001670:	4911      	ldr	r1, [pc, #68]	@ (80016b8 <USB_CDC_RX_Proc+0xc0>)
 8001672:	4817      	ldr	r0, [pc, #92]	@ (80016d0 <USB_CDC_RX_Proc+0xd8>)
 8001674:	f008 fcfa 	bl	800a06c <strncmp>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d10e      	bne.n	800169c <USB_CDC_RX_Proc+0xa4>
        {
            sprintf(USB_CdcTxBuffer_FS, "SYSTEM RESET\r\n");
 800167e:	4915      	ldr	r1, [pc, #84]	@ (80016d4 <USB_CDC_RX_Proc+0xdc>)
 8001680:	4810      	ldr	r0, [pc, #64]	@ (80016c4 <USB_CDC_RX_Proc+0xcc>)
 8001682:	f008 fbf3 	bl	8009e6c <siprintf>
            User_CDC_Transmit_FS((uint8_t *) USB_CdcTxBuffer_FS, strlen(USB_CdcTxBuffer_FS));
 8001686:	480f      	ldr	r0, [pc, #60]	@ (80016c4 <USB_CDC_RX_Proc+0xcc>)
 8001688:	f7fe fdb2 	bl	80001f0 <strlen>
 800168c:	4603      	mov	r3, r0
 800168e:	b29b      	uxth	r3, r3
 8001690:	4619      	mov	r1, r3
 8001692:	480c      	ldr	r0, [pc, #48]	@ (80016c4 <USB_CDC_RX_Proc+0xcc>)
 8001694:	f7ff fe46 	bl	8001324 <User_CDC_Transmit_FS>
            HAL_NVIC_SystemReset();
 8001698:	f000 f9f9 	bl	8001a8e <HAL_NVIC_SystemReset>
        }

        memset(USB_CdcRxBuffer_FS, 0, USB_CdcRxBuffer_FS_cnt);
 800169c:	4b05      	ldr	r3, [pc, #20]	@ (80016b4 <USB_CDC_RX_Proc+0xbc>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	461a      	mov	r2, r3
 80016a2:	2100      	movs	r1, #0
 80016a4:	4804      	ldr	r0, [pc, #16]	@ (80016b8 <USB_CDC_RX_Proc+0xc0>)
 80016a6:	f008 fcd9 	bl	800a05c <memset>
        USB_CdcRxBuffer_FS_cnt = 0;
 80016aa:	4b02      	ldr	r3, [pc, #8]	@ (80016b4 <USB_CDC_RX_Proc+0xbc>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	601a      	str	r2, [r3, #0]
    }
}
 80016b0:	bf00      	nop
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	2000177c 	.word	0x2000177c
 80016b8:	2000157c 	.word	0x2000157c
 80016bc:	0800af6c 	.word	0x0800af6c
 80016c0:	0800af7c 	.word	0x0800af7c
 80016c4:	2000167c 	.word	0x2000167c
 80016c8:	0800af88 	.word	0x0800af88
 80016cc:	0800af94 	.word	0x0800af94
 80016d0:	0800afac 	.word	0x0800afac
 80016d4:	0800afbc 	.word	0x0800afbc

080016d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80016d8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001710 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80016dc:	f7ff fc48 	bl	8000f70 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80016e0:	480c      	ldr	r0, [pc, #48]	@ (8001714 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80016e2:	490d      	ldr	r1, [pc, #52]	@ (8001718 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80016e4:	4a0d      	ldr	r2, [pc, #52]	@ (800171c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80016e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016e8:	e002      	b.n	80016f0 <LoopCopyDataInit>

080016ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016ee:	3304      	adds	r3, #4

080016f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016f4:	d3f9      	bcc.n	80016ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016f6:	4a0a      	ldr	r2, [pc, #40]	@ (8001720 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80016f8:	4c0a      	ldr	r4, [pc, #40]	@ (8001724 <LoopFillZerobss+0x22>)
  movs r3, #0
 80016fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016fc:	e001      	b.n	8001702 <LoopFillZerobss>

080016fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001700:	3204      	adds	r2, #4

08001702 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001702:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001704:	d3fb      	bcc.n	80016fe <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001706:	f008 fd23 	bl	800a150 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800170a:	f7ff f817 	bl	800073c <main>
  bx  lr    
 800170e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001710:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001714:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001718:	20000158 	.word	0x20000158
  ldr r2, =_sidata
 800171c:	0800b070 	.word	0x0800b070
  ldr r2, =_sbss
 8001720:	20000158 	.word	0x20000158
  ldr r4, =_ebss
 8001724:	2000d8dc 	.word	0x2000d8dc

08001728 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001728:	e7fe      	b.n	8001728 <ADC_IRQHandler>
	...

0800172c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001730:	4b0e      	ldr	r3, [pc, #56]	@ (800176c <HAL_Init+0x40>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a0d      	ldr	r2, [pc, #52]	@ (800176c <HAL_Init+0x40>)
 8001736:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800173a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800173c:	4b0b      	ldr	r3, [pc, #44]	@ (800176c <HAL_Init+0x40>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a0a      	ldr	r2, [pc, #40]	@ (800176c <HAL_Init+0x40>)
 8001742:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001746:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001748:	4b08      	ldr	r3, [pc, #32]	@ (800176c <HAL_Init+0x40>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a07      	ldr	r2, [pc, #28]	@ (800176c <HAL_Init+0x40>)
 800174e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001752:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001754:	2003      	movs	r0, #3
 8001756:	f000 f965 	bl	8001a24 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800175a:	200f      	movs	r0, #15
 800175c:	f000 f808 	bl	8001770 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001760:	f7ff f9d0 	bl	8000b04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001764:	2300      	movs	r3, #0
}
 8001766:	4618      	mov	r0, r3
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	40023c00 	.word	0x40023c00

08001770 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b082      	sub	sp, #8
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001778:	4b12      	ldr	r3, [pc, #72]	@ (80017c4 <HAL_InitTick+0x54>)
 800177a:	681a      	ldr	r2, [r3, #0]
 800177c:	4b12      	ldr	r3, [pc, #72]	@ (80017c8 <HAL_InitTick+0x58>)
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	4619      	mov	r1, r3
 8001782:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001786:	fbb3 f3f1 	udiv	r3, r3, r1
 800178a:	fbb2 f3f3 	udiv	r3, r2, r3
 800178e:	4618      	mov	r0, r3
 8001790:	f000 f981 	bl	8001a96 <HAL_SYSTICK_Config>
 8001794:	4603      	mov	r3, r0
 8001796:	2b00      	cmp	r3, #0
 8001798:	d001      	beq.n	800179e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800179a:	2301      	movs	r3, #1
 800179c:	e00e      	b.n	80017bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2b0f      	cmp	r3, #15
 80017a2:	d80a      	bhi.n	80017ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017a4:	2200      	movs	r2, #0
 80017a6:	6879      	ldr	r1, [r7, #4]
 80017a8:	f04f 30ff 	mov.w	r0, #4294967295
 80017ac:	f000 f945 	bl	8001a3a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017b0:	4a06      	ldr	r2, [pc, #24]	@ (80017cc <HAL_InitTick+0x5c>)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017b6:	2300      	movs	r3, #0
 80017b8:	e000      	b.n	80017bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017ba:	2301      	movs	r3, #1
}
 80017bc:	4618      	mov	r0, r3
 80017be:	3708      	adds	r7, #8
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	20000000 	.word	0x20000000
 80017c8:	20000008 	.word	0x20000008
 80017cc:	20000004 	.word	0x20000004

080017d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017d4:	4b06      	ldr	r3, [pc, #24]	@ (80017f0 <HAL_IncTick+0x20>)
 80017d6:	781b      	ldrb	r3, [r3, #0]
 80017d8:	461a      	mov	r2, r3
 80017da:	4b06      	ldr	r3, [pc, #24]	@ (80017f4 <HAL_IncTick+0x24>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4413      	add	r3, r2
 80017e0:	4a04      	ldr	r2, [pc, #16]	@ (80017f4 <HAL_IncTick+0x24>)
 80017e2:	6013      	str	r3, [r2, #0]
}
 80017e4:	bf00      	nop
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr
 80017ee:	bf00      	nop
 80017f0:	20000008 	.word	0x20000008
 80017f4:	2000bba8 	.word	0x2000bba8

080017f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017f8:	b480      	push	{r7}
 80017fa:	af00      	add	r7, sp, #0
  return uwTick;
 80017fc:	4b03      	ldr	r3, [pc, #12]	@ (800180c <HAL_GetTick+0x14>)
 80017fe:	681b      	ldr	r3, [r3, #0]
}
 8001800:	4618      	mov	r0, r3
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr
 800180a:	bf00      	nop
 800180c:	2000bba8 	.word	0x2000bba8

08001810 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b084      	sub	sp, #16
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001818:	f7ff ffee 	bl	80017f8 <HAL_GetTick>
 800181c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001828:	d005      	beq.n	8001836 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800182a:	4b0a      	ldr	r3, [pc, #40]	@ (8001854 <HAL_Delay+0x44>)
 800182c:	781b      	ldrb	r3, [r3, #0]
 800182e:	461a      	mov	r2, r3
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	4413      	add	r3, r2
 8001834:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001836:	bf00      	nop
 8001838:	f7ff ffde 	bl	80017f8 <HAL_GetTick>
 800183c:	4602      	mov	r2, r0
 800183e:	68bb      	ldr	r3, [r7, #8]
 8001840:	1ad3      	subs	r3, r2, r3
 8001842:	68fa      	ldr	r2, [r7, #12]
 8001844:	429a      	cmp	r2, r3
 8001846:	d8f7      	bhi.n	8001838 <HAL_Delay+0x28>
  {
  }
}
 8001848:	bf00      	nop
 800184a:	bf00      	nop
 800184c:	3710      	adds	r7, #16
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	20000008 	.word	0x20000008

08001858 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001858:	b480      	push	{r7}
 800185a:	b085      	sub	sp, #20
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	f003 0307 	and.w	r3, r3, #7
 8001866:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001868:	4b0c      	ldr	r3, [pc, #48]	@ (800189c <__NVIC_SetPriorityGrouping+0x44>)
 800186a:	68db      	ldr	r3, [r3, #12]
 800186c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800186e:	68ba      	ldr	r2, [r7, #8]
 8001870:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001874:	4013      	ands	r3, r2
 8001876:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800187c:	68bb      	ldr	r3, [r7, #8]
 800187e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001880:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001884:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001888:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800188a:	4a04      	ldr	r2, [pc, #16]	@ (800189c <__NVIC_SetPriorityGrouping+0x44>)
 800188c:	68bb      	ldr	r3, [r7, #8]
 800188e:	60d3      	str	r3, [r2, #12]
}
 8001890:	bf00      	nop
 8001892:	3714      	adds	r7, #20
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr
 800189c:	e000ed00 	.word	0xe000ed00

080018a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018a4:	4b04      	ldr	r3, [pc, #16]	@ (80018b8 <__NVIC_GetPriorityGrouping+0x18>)
 80018a6:	68db      	ldr	r3, [r3, #12]
 80018a8:	0a1b      	lsrs	r3, r3, #8
 80018aa:	f003 0307 	and.w	r3, r3, #7
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr
 80018b8:	e000ed00 	.word	0xe000ed00

080018bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018bc:	b480      	push	{r7}
 80018be:	b083      	sub	sp, #12
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	4603      	mov	r3, r0
 80018c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	db0b      	blt.n	80018e6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018ce:	79fb      	ldrb	r3, [r7, #7]
 80018d0:	f003 021f 	and.w	r2, r3, #31
 80018d4:	4907      	ldr	r1, [pc, #28]	@ (80018f4 <__NVIC_EnableIRQ+0x38>)
 80018d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018da:	095b      	lsrs	r3, r3, #5
 80018dc:	2001      	movs	r0, #1
 80018de:	fa00 f202 	lsl.w	r2, r0, r2
 80018e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80018e6:	bf00      	nop
 80018e8:	370c      	adds	r7, #12
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr
 80018f2:	bf00      	nop
 80018f4:	e000e100 	.word	0xe000e100

080018f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b083      	sub	sp, #12
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	4603      	mov	r3, r0
 8001900:	6039      	str	r1, [r7, #0]
 8001902:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001904:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001908:	2b00      	cmp	r3, #0
 800190a:	db0a      	blt.n	8001922 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	b2da      	uxtb	r2, r3
 8001910:	490c      	ldr	r1, [pc, #48]	@ (8001944 <__NVIC_SetPriority+0x4c>)
 8001912:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001916:	0112      	lsls	r2, r2, #4
 8001918:	b2d2      	uxtb	r2, r2
 800191a:	440b      	add	r3, r1
 800191c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001920:	e00a      	b.n	8001938 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	b2da      	uxtb	r2, r3
 8001926:	4908      	ldr	r1, [pc, #32]	@ (8001948 <__NVIC_SetPriority+0x50>)
 8001928:	79fb      	ldrb	r3, [r7, #7]
 800192a:	f003 030f 	and.w	r3, r3, #15
 800192e:	3b04      	subs	r3, #4
 8001930:	0112      	lsls	r2, r2, #4
 8001932:	b2d2      	uxtb	r2, r2
 8001934:	440b      	add	r3, r1
 8001936:	761a      	strb	r2, [r3, #24]
}
 8001938:	bf00      	nop
 800193a:	370c      	adds	r7, #12
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr
 8001944:	e000e100 	.word	0xe000e100
 8001948:	e000ed00 	.word	0xe000ed00

0800194c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800194c:	b480      	push	{r7}
 800194e:	b089      	sub	sp, #36	@ 0x24
 8001950:	af00      	add	r7, sp, #0
 8001952:	60f8      	str	r0, [r7, #12]
 8001954:	60b9      	str	r1, [r7, #8]
 8001956:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	f003 0307 	and.w	r3, r3, #7
 800195e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001960:	69fb      	ldr	r3, [r7, #28]
 8001962:	f1c3 0307 	rsb	r3, r3, #7
 8001966:	2b04      	cmp	r3, #4
 8001968:	bf28      	it	cs
 800196a:	2304      	movcs	r3, #4
 800196c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800196e:	69fb      	ldr	r3, [r7, #28]
 8001970:	3304      	adds	r3, #4
 8001972:	2b06      	cmp	r3, #6
 8001974:	d902      	bls.n	800197c <NVIC_EncodePriority+0x30>
 8001976:	69fb      	ldr	r3, [r7, #28]
 8001978:	3b03      	subs	r3, #3
 800197a:	e000      	b.n	800197e <NVIC_EncodePriority+0x32>
 800197c:	2300      	movs	r3, #0
 800197e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001980:	f04f 32ff 	mov.w	r2, #4294967295
 8001984:	69bb      	ldr	r3, [r7, #24]
 8001986:	fa02 f303 	lsl.w	r3, r2, r3
 800198a:	43da      	mvns	r2, r3
 800198c:	68bb      	ldr	r3, [r7, #8]
 800198e:	401a      	ands	r2, r3
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001994:	f04f 31ff 	mov.w	r1, #4294967295
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	fa01 f303 	lsl.w	r3, r1, r3
 800199e:	43d9      	mvns	r1, r3
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019a4:	4313      	orrs	r3, r2
         );
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	3724      	adds	r7, #36	@ 0x24
 80019aa:	46bd      	mov	sp, r7
 80019ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b0:	4770      	bx	lr
	...

080019b4 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80019b4:	b480      	push	{r7}
 80019b6:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 80019b8:	f3bf 8f4f 	dsb	sy
}
 80019bc:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80019be:	4b06      	ldr	r3, [pc, #24]	@ (80019d8 <__NVIC_SystemReset+0x24>)
 80019c0:	68db      	ldr	r3, [r3, #12]
 80019c2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80019c6:	4904      	ldr	r1, [pc, #16]	@ (80019d8 <__NVIC_SystemReset+0x24>)
 80019c8:	4b04      	ldr	r3, [pc, #16]	@ (80019dc <__NVIC_SystemReset+0x28>)
 80019ca:	4313      	orrs	r3, r2
 80019cc:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80019ce:	f3bf 8f4f 	dsb	sy
}
 80019d2:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80019d4:	bf00      	nop
 80019d6:	e7fd      	b.n	80019d4 <__NVIC_SystemReset+0x20>
 80019d8:	e000ed00 	.word	0xe000ed00
 80019dc:	05fa0004 	.word	0x05fa0004

080019e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b082      	sub	sp, #8
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	3b01      	subs	r3, #1
 80019ec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80019f0:	d301      	bcc.n	80019f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019f2:	2301      	movs	r3, #1
 80019f4:	e00f      	b.n	8001a16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019f6:	4a0a      	ldr	r2, [pc, #40]	@ (8001a20 <SysTick_Config+0x40>)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	3b01      	subs	r3, #1
 80019fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019fe:	210f      	movs	r1, #15
 8001a00:	f04f 30ff 	mov.w	r0, #4294967295
 8001a04:	f7ff ff78 	bl	80018f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a08:	4b05      	ldr	r3, [pc, #20]	@ (8001a20 <SysTick_Config+0x40>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a0e:	4b04      	ldr	r3, [pc, #16]	@ (8001a20 <SysTick_Config+0x40>)
 8001a10:	2207      	movs	r2, #7
 8001a12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a14:	2300      	movs	r3, #0
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	3708      	adds	r7, #8
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	e000e010 	.word	0xe000e010

08001a24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b082      	sub	sp, #8
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a2c:	6878      	ldr	r0, [r7, #4]
 8001a2e:	f7ff ff13 	bl	8001858 <__NVIC_SetPriorityGrouping>
}
 8001a32:	bf00      	nop
 8001a34:	3708      	adds	r7, #8
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}

08001a3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a3a:	b580      	push	{r7, lr}
 8001a3c:	b086      	sub	sp, #24
 8001a3e:	af00      	add	r7, sp, #0
 8001a40:	4603      	mov	r3, r0
 8001a42:	60b9      	str	r1, [r7, #8]
 8001a44:	607a      	str	r2, [r7, #4]
 8001a46:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a4c:	f7ff ff28 	bl	80018a0 <__NVIC_GetPriorityGrouping>
 8001a50:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a52:	687a      	ldr	r2, [r7, #4]
 8001a54:	68b9      	ldr	r1, [r7, #8]
 8001a56:	6978      	ldr	r0, [r7, #20]
 8001a58:	f7ff ff78 	bl	800194c <NVIC_EncodePriority>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a62:	4611      	mov	r1, r2
 8001a64:	4618      	mov	r0, r3
 8001a66:	f7ff ff47 	bl	80018f8 <__NVIC_SetPriority>
}
 8001a6a:	bf00      	nop
 8001a6c:	3718      	adds	r7, #24
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}

08001a72 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a72:	b580      	push	{r7, lr}
 8001a74:	b082      	sub	sp, #8
 8001a76:	af00      	add	r7, sp, #0
 8001a78:	4603      	mov	r3, r0
 8001a7a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a80:	4618      	mov	r0, r3
 8001a82:	f7ff ff1b 	bl	80018bc <__NVIC_EnableIRQ>
}
 8001a86:	bf00      	nop
 8001a88:	3708      	adds	r7, #8
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}

08001a8e <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8001a8e:	b580      	push	{r7, lr}
 8001a90:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8001a92:	f7ff ff8f 	bl	80019b4 <__NVIC_SystemReset>

08001a96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a96:	b580      	push	{r7, lr}
 8001a98:	b082      	sub	sp, #8
 8001a9a:	af00      	add	r7, sp, #0
 8001a9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a9e:	6878      	ldr	r0, [r7, #4]
 8001aa0:	f7ff ff9e 	bl	80019e0 <SysTick_Config>
 8001aa4:	4603      	mov	r3, r0
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	3708      	adds	r7, #8
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}

08001aae <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001aae:	b580      	push	{r7, lr}
 8001ab0:	b086      	sub	sp, #24
 8001ab2:	af00      	add	r7, sp, #0
 8001ab4:	60f8      	str	r0, [r7, #12]
 8001ab6:	60b9      	str	r1, [r7, #8]
 8001ab8:	607a      	str	r2, [r7, #4]
 8001aba:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001abc:	2300      	movs	r3, #0
 8001abe:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ac4:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001acc:	2b01      	cmp	r3, #1
 8001ace:	d101      	bne.n	8001ad4 <HAL_DMA_Start_IT+0x26>
 8001ad0:	2302      	movs	r3, #2
 8001ad2:	e040      	b.n	8001b56 <HAL_DMA_Start_IT+0xa8>
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	2201      	movs	r2, #1
 8001ad8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001ae2:	b2db      	uxtb	r3, r3
 8001ae4:	2b01      	cmp	r3, #1
 8001ae6:	d12f      	bne.n	8001b48 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	2202      	movs	r2, #2
 8001aec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	2200      	movs	r2, #0
 8001af4:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	687a      	ldr	r2, [r7, #4]
 8001afa:	68b9      	ldr	r1, [r7, #8]
 8001afc:	68f8      	ldr	r0, [r7, #12]
 8001afe:	f000 f8c0 	bl	8001c82 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b06:	223f      	movs	r2, #63	@ 0x3f
 8001b08:	409a      	lsls	r2, r3
 8001b0a:	693b      	ldr	r3, [r7, #16]
 8001b0c:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	681a      	ldr	r2, [r3, #0]
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f042 0216 	orr.w	r2, r2, #22
 8001b1c:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d007      	beq.n	8001b36 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	681a      	ldr	r2, [r3, #0]
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f042 0208 	orr.w	r2, r2, #8
 8001b34:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	681a      	ldr	r2, [r3, #0]
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f042 0201 	orr.w	r2, r2, #1
 8001b44:	601a      	str	r2, [r3, #0]
 8001b46:	e005      	b.n	8001b54 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001b50:	2302      	movs	r3, #2
 8001b52:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001b54:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	3718      	adds	r7, #24
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}

08001b5e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001b5e:	b580      	push	{r7, lr}
 8001b60:	b084      	sub	sp, #16
 8001b62:	af00      	add	r7, sp, #0
 8001b64:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b6a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001b6c:	f7ff fe44 	bl	80017f8 <HAL_GetTick>
 8001b70:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001b78:	b2db      	uxtb	r3, r3
 8001b7a:	2b02      	cmp	r3, #2
 8001b7c:	d008      	beq.n	8001b90 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2280      	movs	r2, #128	@ 0x80
 8001b82:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2200      	movs	r2, #0
 8001b88:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	e052      	b.n	8001c36 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	681a      	ldr	r2, [r3, #0]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f022 0216 	bic.w	r2, r2, #22
 8001b9e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	695a      	ldr	r2, [r3, #20]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001bae:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d103      	bne.n	8001bc0 <HAL_DMA_Abort+0x62>
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d007      	beq.n	8001bd0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	681a      	ldr	r2, [r3, #0]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f022 0208 	bic.w	r2, r2, #8
 8001bce:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	681a      	ldr	r2, [r3, #0]
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f022 0201 	bic.w	r2, r2, #1
 8001bde:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001be0:	e013      	b.n	8001c0a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001be2:	f7ff fe09 	bl	80017f8 <HAL_GetTick>
 8001be6:	4602      	mov	r2, r0
 8001be8:	68bb      	ldr	r3, [r7, #8]
 8001bea:	1ad3      	subs	r3, r2, r3
 8001bec:	2b05      	cmp	r3, #5
 8001bee:	d90c      	bls.n	8001c0a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2220      	movs	r2, #32
 8001bf4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2203      	movs	r2, #3
 8001bfa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2200      	movs	r2, #0
 8001c02:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001c06:	2303      	movs	r3, #3
 8001c08:	e015      	b.n	8001c36 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f003 0301 	and.w	r3, r3, #1
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d1e4      	bne.n	8001be2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c1c:	223f      	movs	r2, #63	@ 0x3f
 8001c1e:	409a      	lsls	r2, r3
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2201      	movs	r2, #1
 8001c28:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2200      	movs	r2, #0
 8001c30:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001c34:	2300      	movs	r3, #0
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	3710      	adds	r7, #16
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}

08001c3e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001c3e:	b480      	push	{r7}
 8001c40:	b083      	sub	sp, #12
 8001c42:	af00      	add	r7, sp, #0
 8001c44:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001c4c:	b2db      	uxtb	r3, r3
 8001c4e:	2b02      	cmp	r3, #2
 8001c50:	d004      	beq.n	8001c5c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2280      	movs	r2, #128	@ 0x80
 8001c56:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	e00c      	b.n	8001c76 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2205      	movs	r2, #5
 8001c60:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	681a      	ldr	r2, [r3, #0]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f022 0201 	bic.w	r2, r2, #1
 8001c72:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001c74:	2300      	movs	r3, #0
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	370c      	adds	r7, #12
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr

08001c82 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001c82:	b480      	push	{r7}
 8001c84:	b085      	sub	sp, #20
 8001c86:	af00      	add	r7, sp, #0
 8001c88:	60f8      	str	r0, [r7, #12]
 8001c8a:	60b9      	str	r1, [r7, #8]
 8001c8c:	607a      	str	r2, [r7, #4]
 8001c8e:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	681a      	ldr	r2, [r3, #0]
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001c9e:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	683a      	ldr	r2, [r7, #0]
 8001ca6:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	689b      	ldr	r3, [r3, #8]
 8001cac:	2b40      	cmp	r3, #64	@ 0x40
 8001cae:	d108      	bne.n	8001cc2 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	687a      	ldr	r2, [r7, #4]
 8001cb6:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	68ba      	ldr	r2, [r7, #8]
 8001cbe:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001cc0:	e007      	b.n	8001cd2 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	68ba      	ldr	r2, [r7, #8]
 8001cc8:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	687a      	ldr	r2, [r7, #4]
 8001cd0:	60da      	str	r2, [r3, #12]
}
 8001cd2:	bf00      	nop
 8001cd4:	3714      	adds	r7, #20
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr
	...

08001ce0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b089      	sub	sp, #36	@ 0x24
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
 8001ce8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001cea:	2300      	movs	r3, #0
 8001cec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	61fb      	str	r3, [r7, #28]
 8001cfa:	e177      	b.n	8001fec <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	69fb      	ldr	r3, [r7, #28]
 8001d00:	fa02 f303 	lsl.w	r3, r2, r3
 8001d04:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	697a      	ldr	r2, [r7, #20]
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d10:	693a      	ldr	r2, [r7, #16]
 8001d12:	697b      	ldr	r3, [r7, #20]
 8001d14:	429a      	cmp	r2, r3
 8001d16:	f040 8166 	bne.w	8001fe6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	f003 0303 	and.w	r3, r3, #3
 8001d22:	2b01      	cmp	r3, #1
 8001d24:	d005      	beq.n	8001d32 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d2e:	2b02      	cmp	r3, #2
 8001d30:	d130      	bne.n	8001d94 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	689b      	ldr	r3, [r3, #8]
 8001d36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d38:	69fb      	ldr	r3, [r7, #28]
 8001d3a:	005b      	lsls	r3, r3, #1
 8001d3c:	2203      	movs	r2, #3
 8001d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d42:	43db      	mvns	r3, r3
 8001d44:	69ba      	ldr	r2, [r7, #24]
 8001d46:	4013      	ands	r3, r2
 8001d48:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	68da      	ldr	r2, [r3, #12]
 8001d4e:	69fb      	ldr	r3, [r7, #28]
 8001d50:	005b      	lsls	r3, r3, #1
 8001d52:	fa02 f303 	lsl.w	r3, r2, r3
 8001d56:	69ba      	ldr	r2, [r7, #24]
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	69ba      	ldr	r2, [r7, #24]
 8001d60:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d68:	2201      	movs	r2, #1
 8001d6a:	69fb      	ldr	r3, [r7, #28]
 8001d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d70:	43db      	mvns	r3, r3
 8001d72:	69ba      	ldr	r2, [r7, #24]
 8001d74:	4013      	ands	r3, r2
 8001d76:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	091b      	lsrs	r3, r3, #4
 8001d7e:	f003 0201 	and.w	r2, r3, #1
 8001d82:	69fb      	ldr	r3, [r7, #28]
 8001d84:	fa02 f303 	lsl.w	r3, r2, r3
 8001d88:	69ba      	ldr	r2, [r7, #24]
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	69ba      	ldr	r2, [r7, #24]
 8001d92:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	f003 0303 	and.w	r3, r3, #3
 8001d9c:	2b03      	cmp	r3, #3
 8001d9e:	d017      	beq.n	8001dd0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	68db      	ldr	r3, [r3, #12]
 8001da4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001da6:	69fb      	ldr	r3, [r7, #28]
 8001da8:	005b      	lsls	r3, r3, #1
 8001daa:	2203      	movs	r2, #3
 8001dac:	fa02 f303 	lsl.w	r3, r2, r3
 8001db0:	43db      	mvns	r3, r3
 8001db2:	69ba      	ldr	r2, [r7, #24]
 8001db4:	4013      	ands	r3, r2
 8001db6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	689a      	ldr	r2, [r3, #8]
 8001dbc:	69fb      	ldr	r3, [r7, #28]
 8001dbe:	005b      	lsls	r3, r3, #1
 8001dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc4:	69ba      	ldr	r2, [r7, #24]
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	69ba      	ldr	r2, [r7, #24]
 8001dce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	f003 0303 	and.w	r3, r3, #3
 8001dd8:	2b02      	cmp	r3, #2
 8001dda:	d123      	bne.n	8001e24 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ddc:	69fb      	ldr	r3, [r7, #28]
 8001dde:	08da      	lsrs	r2, r3, #3
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	3208      	adds	r2, #8
 8001de4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001de8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001dea:	69fb      	ldr	r3, [r7, #28]
 8001dec:	f003 0307 	and.w	r3, r3, #7
 8001df0:	009b      	lsls	r3, r3, #2
 8001df2:	220f      	movs	r2, #15
 8001df4:	fa02 f303 	lsl.w	r3, r2, r3
 8001df8:	43db      	mvns	r3, r3
 8001dfa:	69ba      	ldr	r2, [r7, #24]
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	691a      	ldr	r2, [r3, #16]
 8001e04:	69fb      	ldr	r3, [r7, #28]
 8001e06:	f003 0307 	and.w	r3, r3, #7
 8001e0a:	009b      	lsls	r3, r3, #2
 8001e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e10:	69ba      	ldr	r2, [r7, #24]
 8001e12:	4313      	orrs	r3, r2
 8001e14:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e16:	69fb      	ldr	r3, [r7, #28]
 8001e18:	08da      	lsrs	r2, r3, #3
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	3208      	adds	r2, #8
 8001e1e:	69b9      	ldr	r1, [r7, #24]
 8001e20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e2a:	69fb      	ldr	r3, [r7, #28]
 8001e2c:	005b      	lsls	r3, r3, #1
 8001e2e:	2203      	movs	r2, #3
 8001e30:	fa02 f303 	lsl.w	r3, r2, r3
 8001e34:	43db      	mvns	r3, r3
 8001e36:	69ba      	ldr	r2, [r7, #24]
 8001e38:	4013      	ands	r3, r2
 8001e3a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	f003 0203 	and.w	r2, r3, #3
 8001e44:	69fb      	ldr	r3, [r7, #28]
 8001e46:	005b      	lsls	r3, r3, #1
 8001e48:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4c:	69ba      	ldr	r2, [r7, #24]
 8001e4e:	4313      	orrs	r3, r2
 8001e50:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	69ba      	ldr	r2, [r7, #24]
 8001e56:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	f000 80c0 	beq.w	8001fe6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e66:	2300      	movs	r3, #0
 8001e68:	60fb      	str	r3, [r7, #12]
 8001e6a:	4b66      	ldr	r3, [pc, #408]	@ (8002004 <HAL_GPIO_Init+0x324>)
 8001e6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e6e:	4a65      	ldr	r2, [pc, #404]	@ (8002004 <HAL_GPIO_Init+0x324>)
 8001e70:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e74:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e76:	4b63      	ldr	r3, [pc, #396]	@ (8002004 <HAL_GPIO_Init+0x324>)
 8001e78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e7a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e7e:	60fb      	str	r3, [r7, #12]
 8001e80:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e82:	4a61      	ldr	r2, [pc, #388]	@ (8002008 <HAL_GPIO_Init+0x328>)
 8001e84:	69fb      	ldr	r3, [r7, #28]
 8001e86:	089b      	lsrs	r3, r3, #2
 8001e88:	3302      	adds	r3, #2
 8001e8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e90:	69fb      	ldr	r3, [r7, #28]
 8001e92:	f003 0303 	and.w	r3, r3, #3
 8001e96:	009b      	lsls	r3, r3, #2
 8001e98:	220f      	movs	r2, #15
 8001e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9e:	43db      	mvns	r3, r3
 8001ea0:	69ba      	ldr	r2, [r7, #24]
 8001ea2:	4013      	ands	r3, r2
 8001ea4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	4a58      	ldr	r2, [pc, #352]	@ (800200c <HAL_GPIO_Init+0x32c>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d037      	beq.n	8001f1e <HAL_GPIO_Init+0x23e>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	4a57      	ldr	r2, [pc, #348]	@ (8002010 <HAL_GPIO_Init+0x330>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d031      	beq.n	8001f1a <HAL_GPIO_Init+0x23a>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	4a56      	ldr	r2, [pc, #344]	@ (8002014 <HAL_GPIO_Init+0x334>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d02b      	beq.n	8001f16 <HAL_GPIO_Init+0x236>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	4a55      	ldr	r2, [pc, #340]	@ (8002018 <HAL_GPIO_Init+0x338>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d025      	beq.n	8001f12 <HAL_GPIO_Init+0x232>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	4a54      	ldr	r2, [pc, #336]	@ (800201c <HAL_GPIO_Init+0x33c>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d01f      	beq.n	8001f0e <HAL_GPIO_Init+0x22e>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	4a53      	ldr	r2, [pc, #332]	@ (8002020 <HAL_GPIO_Init+0x340>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d019      	beq.n	8001f0a <HAL_GPIO_Init+0x22a>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	4a52      	ldr	r2, [pc, #328]	@ (8002024 <HAL_GPIO_Init+0x344>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d013      	beq.n	8001f06 <HAL_GPIO_Init+0x226>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	4a51      	ldr	r2, [pc, #324]	@ (8002028 <HAL_GPIO_Init+0x348>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d00d      	beq.n	8001f02 <HAL_GPIO_Init+0x222>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	4a50      	ldr	r2, [pc, #320]	@ (800202c <HAL_GPIO_Init+0x34c>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d007      	beq.n	8001efe <HAL_GPIO_Init+0x21e>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	4a4f      	ldr	r2, [pc, #316]	@ (8002030 <HAL_GPIO_Init+0x350>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d101      	bne.n	8001efa <HAL_GPIO_Init+0x21a>
 8001ef6:	2309      	movs	r3, #9
 8001ef8:	e012      	b.n	8001f20 <HAL_GPIO_Init+0x240>
 8001efa:	230a      	movs	r3, #10
 8001efc:	e010      	b.n	8001f20 <HAL_GPIO_Init+0x240>
 8001efe:	2308      	movs	r3, #8
 8001f00:	e00e      	b.n	8001f20 <HAL_GPIO_Init+0x240>
 8001f02:	2307      	movs	r3, #7
 8001f04:	e00c      	b.n	8001f20 <HAL_GPIO_Init+0x240>
 8001f06:	2306      	movs	r3, #6
 8001f08:	e00a      	b.n	8001f20 <HAL_GPIO_Init+0x240>
 8001f0a:	2305      	movs	r3, #5
 8001f0c:	e008      	b.n	8001f20 <HAL_GPIO_Init+0x240>
 8001f0e:	2304      	movs	r3, #4
 8001f10:	e006      	b.n	8001f20 <HAL_GPIO_Init+0x240>
 8001f12:	2303      	movs	r3, #3
 8001f14:	e004      	b.n	8001f20 <HAL_GPIO_Init+0x240>
 8001f16:	2302      	movs	r3, #2
 8001f18:	e002      	b.n	8001f20 <HAL_GPIO_Init+0x240>
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e000      	b.n	8001f20 <HAL_GPIO_Init+0x240>
 8001f1e:	2300      	movs	r3, #0
 8001f20:	69fa      	ldr	r2, [r7, #28]
 8001f22:	f002 0203 	and.w	r2, r2, #3
 8001f26:	0092      	lsls	r2, r2, #2
 8001f28:	4093      	lsls	r3, r2
 8001f2a:	69ba      	ldr	r2, [r7, #24]
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f30:	4935      	ldr	r1, [pc, #212]	@ (8002008 <HAL_GPIO_Init+0x328>)
 8001f32:	69fb      	ldr	r3, [r7, #28]
 8001f34:	089b      	lsrs	r3, r3, #2
 8001f36:	3302      	adds	r3, #2
 8001f38:	69ba      	ldr	r2, [r7, #24]
 8001f3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f3e:	4b3d      	ldr	r3, [pc, #244]	@ (8002034 <HAL_GPIO_Init+0x354>)
 8001f40:	689b      	ldr	r3, [r3, #8]
 8001f42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f44:	693b      	ldr	r3, [r7, #16]
 8001f46:	43db      	mvns	r3, r3
 8001f48:	69ba      	ldr	r2, [r7, #24]
 8001f4a:	4013      	ands	r3, r2
 8001f4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d003      	beq.n	8001f62 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001f5a:	69ba      	ldr	r2, [r7, #24]
 8001f5c:	693b      	ldr	r3, [r7, #16]
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f62:	4a34      	ldr	r2, [pc, #208]	@ (8002034 <HAL_GPIO_Init+0x354>)
 8001f64:	69bb      	ldr	r3, [r7, #24]
 8001f66:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f68:	4b32      	ldr	r3, [pc, #200]	@ (8002034 <HAL_GPIO_Init+0x354>)
 8001f6a:	68db      	ldr	r3, [r3, #12]
 8001f6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	43db      	mvns	r3, r3
 8001f72:	69ba      	ldr	r2, [r7, #24]
 8001f74:	4013      	ands	r3, r2
 8001f76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d003      	beq.n	8001f8c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001f84:	69ba      	ldr	r2, [r7, #24]
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f8c:	4a29      	ldr	r2, [pc, #164]	@ (8002034 <HAL_GPIO_Init+0x354>)
 8001f8e:	69bb      	ldr	r3, [r7, #24]
 8001f90:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f92:	4b28      	ldr	r3, [pc, #160]	@ (8002034 <HAL_GPIO_Init+0x354>)
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f98:	693b      	ldr	r3, [r7, #16]
 8001f9a:	43db      	mvns	r3, r3
 8001f9c:	69ba      	ldr	r2, [r7, #24]
 8001f9e:	4013      	ands	r3, r2
 8001fa0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d003      	beq.n	8001fb6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001fae:	69ba      	ldr	r2, [r7, #24]
 8001fb0:	693b      	ldr	r3, [r7, #16]
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001fb6:	4a1f      	ldr	r2, [pc, #124]	@ (8002034 <HAL_GPIO_Init+0x354>)
 8001fb8:	69bb      	ldr	r3, [r7, #24]
 8001fba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001fbc:	4b1d      	ldr	r3, [pc, #116]	@ (8002034 <HAL_GPIO_Init+0x354>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	43db      	mvns	r3, r3
 8001fc6:	69ba      	ldr	r2, [r7, #24]
 8001fc8:	4013      	ands	r3, r2
 8001fca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d003      	beq.n	8001fe0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001fd8:	69ba      	ldr	r2, [r7, #24]
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001fe0:	4a14      	ldr	r2, [pc, #80]	@ (8002034 <HAL_GPIO_Init+0x354>)
 8001fe2:	69bb      	ldr	r3, [r7, #24]
 8001fe4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fe6:	69fb      	ldr	r3, [r7, #28]
 8001fe8:	3301      	adds	r3, #1
 8001fea:	61fb      	str	r3, [r7, #28]
 8001fec:	69fb      	ldr	r3, [r7, #28]
 8001fee:	2b0f      	cmp	r3, #15
 8001ff0:	f67f ae84 	bls.w	8001cfc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ff4:	bf00      	nop
 8001ff6:	bf00      	nop
 8001ff8:	3724      	adds	r7, #36	@ 0x24
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr
 8002002:	bf00      	nop
 8002004:	40023800 	.word	0x40023800
 8002008:	40013800 	.word	0x40013800
 800200c:	40020000 	.word	0x40020000
 8002010:	40020400 	.word	0x40020400
 8002014:	40020800 	.word	0x40020800
 8002018:	40020c00 	.word	0x40020c00
 800201c:	40021000 	.word	0x40021000
 8002020:	40021400 	.word	0x40021400
 8002024:	40021800 	.word	0x40021800
 8002028:	40021c00 	.word	0x40021c00
 800202c:	40022000 	.word	0x40022000
 8002030:	40022400 	.word	0x40022400
 8002034:	40013c00 	.word	0x40013c00

08002038 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002038:	b480      	push	{r7}
 800203a:	b083      	sub	sp, #12
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
 8002040:	460b      	mov	r3, r1
 8002042:	807b      	strh	r3, [r7, #2]
 8002044:	4613      	mov	r3, r2
 8002046:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002048:	787b      	ldrb	r3, [r7, #1]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d003      	beq.n	8002056 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800204e:	887a      	ldrh	r2, [r7, #2]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002054:	e003      	b.n	800205e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002056:	887b      	ldrh	r3, [r7, #2]
 8002058:	041a      	lsls	r2, r3, #16
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	619a      	str	r2, [r3, #24]
}
 800205e:	bf00      	nop
 8002060:	370c      	adds	r7, #12
 8002062:	46bd      	mov	sp, r7
 8002064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002068:	4770      	bx	lr

0800206a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800206a:	b480      	push	{r7}
 800206c:	b085      	sub	sp, #20
 800206e:	af00      	add	r7, sp, #0
 8002070:	6078      	str	r0, [r7, #4]
 8002072:	460b      	mov	r3, r1
 8002074:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	695b      	ldr	r3, [r3, #20]
 800207a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800207c:	887a      	ldrh	r2, [r7, #2]
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	4013      	ands	r3, r2
 8002082:	041a      	lsls	r2, r3, #16
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	43d9      	mvns	r1, r3
 8002088:	887b      	ldrh	r3, [r7, #2]
 800208a:	400b      	ands	r3, r1
 800208c:	431a      	orrs	r2, r3
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	619a      	str	r2, [r3, #24]
}
 8002092:	bf00      	nop
 8002094:	3714      	adds	r7, #20
 8002096:	46bd      	mov	sp, r7
 8002098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209c:	4770      	bx	lr
	...

080020a0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b082      	sub	sp, #8
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	4603      	mov	r3, r0
 80020a8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80020aa:	4b08      	ldr	r3, [pc, #32]	@ (80020cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80020ac:	695a      	ldr	r2, [r3, #20]
 80020ae:	88fb      	ldrh	r3, [r7, #6]
 80020b0:	4013      	ands	r3, r2
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d006      	beq.n	80020c4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80020b6:	4a05      	ldr	r2, [pc, #20]	@ (80020cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80020b8:	88fb      	ldrh	r3, [r7, #6]
 80020ba:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80020bc:	88fb      	ldrh	r3, [r7, #6]
 80020be:	4618      	mov	r0, r3
 80020c0:	f7fe fe6a 	bl	8000d98 <HAL_GPIO_EXTI_Callback>
  }
}
 80020c4:	bf00      	nop
 80020c6:	3708      	adds	r7, #8
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}
 80020cc:	40013c00 	.word	0x40013c00

080020d0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b086      	sub	sp, #24
 80020d4:	af02      	add	r7, sp, #8
 80020d6:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d101      	bne.n	80020e2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	e101      	b.n	80022e6 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80020ee:	b2db      	uxtb	r3, r3
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d106      	bne.n	8002102 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2200      	movs	r2, #0
 80020f8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80020fc:	6878      	ldr	r0, [r7, #4]
 80020fe:	f007 fa6f 	bl	80095e0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2203      	movs	r2, #3
 8002106:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800210a:	68bb      	ldr	r3, [r7, #8]
 800210c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002110:	d102      	bne.n	8002118 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2200      	movs	r2, #0
 8002116:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4618      	mov	r0, r3
 800211e:	f003 fe38 	bl	8005d92 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6818      	ldr	r0, [r3, #0]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	7c1a      	ldrb	r2, [r3, #16]
 800212a:	f88d 2000 	strb.w	r2, [sp]
 800212e:	3304      	adds	r3, #4
 8002130:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002132:	f003 fd17 	bl	8005b64 <USB_CoreInit>
 8002136:	4603      	mov	r3, r0
 8002138:	2b00      	cmp	r3, #0
 800213a:	d005      	beq.n	8002148 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2202      	movs	r2, #2
 8002140:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002144:	2301      	movs	r3, #1
 8002146:	e0ce      	b.n	80022e6 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	2100      	movs	r1, #0
 800214e:	4618      	mov	r0, r3
 8002150:	f003 fe30 	bl	8005db4 <USB_SetCurrentMode>
 8002154:	4603      	mov	r3, r0
 8002156:	2b00      	cmp	r3, #0
 8002158:	d005      	beq.n	8002166 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2202      	movs	r2, #2
 800215e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002162:	2301      	movs	r3, #1
 8002164:	e0bf      	b.n	80022e6 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002166:	2300      	movs	r3, #0
 8002168:	73fb      	strb	r3, [r7, #15]
 800216a:	e04a      	b.n	8002202 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800216c:	7bfa      	ldrb	r2, [r7, #15]
 800216e:	6879      	ldr	r1, [r7, #4]
 8002170:	4613      	mov	r3, r2
 8002172:	00db      	lsls	r3, r3, #3
 8002174:	4413      	add	r3, r2
 8002176:	009b      	lsls	r3, r3, #2
 8002178:	440b      	add	r3, r1
 800217a:	3315      	adds	r3, #21
 800217c:	2201      	movs	r2, #1
 800217e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002180:	7bfa      	ldrb	r2, [r7, #15]
 8002182:	6879      	ldr	r1, [r7, #4]
 8002184:	4613      	mov	r3, r2
 8002186:	00db      	lsls	r3, r3, #3
 8002188:	4413      	add	r3, r2
 800218a:	009b      	lsls	r3, r3, #2
 800218c:	440b      	add	r3, r1
 800218e:	3314      	adds	r3, #20
 8002190:	7bfa      	ldrb	r2, [r7, #15]
 8002192:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002194:	7bfa      	ldrb	r2, [r7, #15]
 8002196:	7bfb      	ldrb	r3, [r7, #15]
 8002198:	b298      	uxth	r0, r3
 800219a:	6879      	ldr	r1, [r7, #4]
 800219c:	4613      	mov	r3, r2
 800219e:	00db      	lsls	r3, r3, #3
 80021a0:	4413      	add	r3, r2
 80021a2:	009b      	lsls	r3, r3, #2
 80021a4:	440b      	add	r3, r1
 80021a6:	332e      	adds	r3, #46	@ 0x2e
 80021a8:	4602      	mov	r2, r0
 80021aa:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80021ac:	7bfa      	ldrb	r2, [r7, #15]
 80021ae:	6879      	ldr	r1, [r7, #4]
 80021b0:	4613      	mov	r3, r2
 80021b2:	00db      	lsls	r3, r3, #3
 80021b4:	4413      	add	r3, r2
 80021b6:	009b      	lsls	r3, r3, #2
 80021b8:	440b      	add	r3, r1
 80021ba:	3318      	adds	r3, #24
 80021bc:	2200      	movs	r2, #0
 80021be:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80021c0:	7bfa      	ldrb	r2, [r7, #15]
 80021c2:	6879      	ldr	r1, [r7, #4]
 80021c4:	4613      	mov	r3, r2
 80021c6:	00db      	lsls	r3, r3, #3
 80021c8:	4413      	add	r3, r2
 80021ca:	009b      	lsls	r3, r3, #2
 80021cc:	440b      	add	r3, r1
 80021ce:	331c      	adds	r3, #28
 80021d0:	2200      	movs	r2, #0
 80021d2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80021d4:	7bfa      	ldrb	r2, [r7, #15]
 80021d6:	6879      	ldr	r1, [r7, #4]
 80021d8:	4613      	mov	r3, r2
 80021da:	00db      	lsls	r3, r3, #3
 80021dc:	4413      	add	r3, r2
 80021de:	009b      	lsls	r3, r3, #2
 80021e0:	440b      	add	r3, r1
 80021e2:	3320      	adds	r3, #32
 80021e4:	2200      	movs	r2, #0
 80021e6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80021e8:	7bfa      	ldrb	r2, [r7, #15]
 80021ea:	6879      	ldr	r1, [r7, #4]
 80021ec:	4613      	mov	r3, r2
 80021ee:	00db      	lsls	r3, r3, #3
 80021f0:	4413      	add	r3, r2
 80021f2:	009b      	lsls	r3, r3, #2
 80021f4:	440b      	add	r3, r1
 80021f6:	3324      	adds	r3, #36	@ 0x24
 80021f8:	2200      	movs	r2, #0
 80021fa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021fc:	7bfb      	ldrb	r3, [r7, #15]
 80021fe:	3301      	adds	r3, #1
 8002200:	73fb      	strb	r3, [r7, #15]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	791b      	ldrb	r3, [r3, #4]
 8002206:	7bfa      	ldrb	r2, [r7, #15]
 8002208:	429a      	cmp	r2, r3
 800220a:	d3af      	bcc.n	800216c <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800220c:	2300      	movs	r3, #0
 800220e:	73fb      	strb	r3, [r7, #15]
 8002210:	e044      	b.n	800229c <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002212:	7bfa      	ldrb	r2, [r7, #15]
 8002214:	6879      	ldr	r1, [r7, #4]
 8002216:	4613      	mov	r3, r2
 8002218:	00db      	lsls	r3, r3, #3
 800221a:	4413      	add	r3, r2
 800221c:	009b      	lsls	r3, r3, #2
 800221e:	440b      	add	r3, r1
 8002220:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002224:	2200      	movs	r2, #0
 8002226:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002228:	7bfa      	ldrb	r2, [r7, #15]
 800222a:	6879      	ldr	r1, [r7, #4]
 800222c:	4613      	mov	r3, r2
 800222e:	00db      	lsls	r3, r3, #3
 8002230:	4413      	add	r3, r2
 8002232:	009b      	lsls	r3, r3, #2
 8002234:	440b      	add	r3, r1
 8002236:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800223a:	7bfa      	ldrb	r2, [r7, #15]
 800223c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800223e:	7bfa      	ldrb	r2, [r7, #15]
 8002240:	6879      	ldr	r1, [r7, #4]
 8002242:	4613      	mov	r3, r2
 8002244:	00db      	lsls	r3, r3, #3
 8002246:	4413      	add	r3, r2
 8002248:	009b      	lsls	r3, r3, #2
 800224a:	440b      	add	r3, r1
 800224c:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002250:	2200      	movs	r2, #0
 8002252:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002254:	7bfa      	ldrb	r2, [r7, #15]
 8002256:	6879      	ldr	r1, [r7, #4]
 8002258:	4613      	mov	r3, r2
 800225a:	00db      	lsls	r3, r3, #3
 800225c:	4413      	add	r3, r2
 800225e:	009b      	lsls	r3, r3, #2
 8002260:	440b      	add	r3, r1
 8002262:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002266:	2200      	movs	r2, #0
 8002268:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800226a:	7bfa      	ldrb	r2, [r7, #15]
 800226c:	6879      	ldr	r1, [r7, #4]
 800226e:	4613      	mov	r3, r2
 8002270:	00db      	lsls	r3, r3, #3
 8002272:	4413      	add	r3, r2
 8002274:	009b      	lsls	r3, r3, #2
 8002276:	440b      	add	r3, r1
 8002278:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800227c:	2200      	movs	r2, #0
 800227e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002280:	7bfa      	ldrb	r2, [r7, #15]
 8002282:	6879      	ldr	r1, [r7, #4]
 8002284:	4613      	mov	r3, r2
 8002286:	00db      	lsls	r3, r3, #3
 8002288:	4413      	add	r3, r2
 800228a:	009b      	lsls	r3, r3, #2
 800228c:	440b      	add	r3, r1
 800228e:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002292:	2200      	movs	r2, #0
 8002294:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002296:	7bfb      	ldrb	r3, [r7, #15]
 8002298:	3301      	adds	r3, #1
 800229a:	73fb      	strb	r3, [r7, #15]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	791b      	ldrb	r3, [r3, #4]
 80022a0:	7bfa      	ldrb	r2, [r7, #15]
 80022a2:	429a      	cmp	r2, r3
 80022a4:	d3b5      	bcc.n	8002212 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6818      	ldr	r0, [r3, #0]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	7c1a      	ldrb	r2, [r3, #16]
 80022ae:	f88d 2000 	strb.w	r2, [sp]
 80022b2:	3304      	adds	r3, #4
 80022b4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80022b6:	f003 fdc9 	bl	8005e4c <USB_DevInit>
 80022ba:	4603      	mov	r3, r0
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d005      	beq.n	80022cc <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2202      	movs	r2, #2
 80022c4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80022c8:	2301      	movs	r3, #1
 80022ca:	e00c      	b.n	80022e6 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2200      	movs	r2, #0
 80022d0:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2201      	movs	r2, #1
 80022d6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4618      	mov	r0, r3
 80022e0:	f004 fe0d 	bl	8006efe <USB_DevDisconnect>

  return HAL_OK;
 80022e4:	2300      	movs	r3, #0
}
 80022e6:	4618      	mov	r0, r3
 80022e8:	3710      	adds	r7, #16
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}

080022ee <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80022ee:	b580      	push	{r7, lr}
 80022f0:	b084      	sub	sp, #16
 80022f2:	af00      	add	r7, sp, #0
 80022f4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002302:	2b01      	cmp	r3, #1
 8002304:	d101      	bne.n	800230a <HAL_PCD_Start+0x1c>
 8002306:	2302      	movs	r3, #2
 8002308:	e022      	b.n	8002350 <HAL_PCD_Start+0x62>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2201      	movs	r2, #1
 800230e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	68db      	ldr	r3, [r3, #12]
 8002316:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800231a:	2b00      	cmp	r3, #0
 800231c:	d009      	beq.n	8002332 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002322:	2b01      	cmp	r3, #1
 8002324:	d105      	bne.n	8002332 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800232a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4618      	mov	r0, r3
 8002338:	f003 fd1a 	bl	8005d70 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4618      	mov	r0, r3
 8002342:	f004 fdbb 	bl	8006ebc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2200      	movs	r2, #0
 800234a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800234e:	2300      	movs	r3, #0
}
 8002350:	4618      	mov	r0, r3
 8002352:	3710      	adds	r7, #16
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}

08002358 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002358:	b590      	push	{r4, r7, lr}
 800235a:	b08d      	sub	sp, #52	@ 0x34
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002366:	6a3b      	ldr	r3, [r7, #32]
 8002368:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4618      	mov	r0, r3
 8002370:	f004 fe79 	bl	8007066 <USB_GetMode>
 8002374:	4603      	mov	r3, r0
 8002376:	2b00      	cmp	r3, #0
 8002378:	f040 848c 	bne.w	8002c94 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4618      	mov	r0, r3
 8002382:	f004 fddd 	bl	8006f40 <USB_ReadInterrupts>
 8002386:	4603      	mov	r3, r0
 8002388:	2b00      	cmp	r3, #0
 800238a:	f000 8482 	beq.w	8002c92 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800238e:	69fb      	ldr	r3, [r7, #28]
 8002390:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002394:	689b      	ldr	r3, [r3, #8]
 8002396:	0a1b      	lsrs	r3, r3, #8
 8002398:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4618      	mov	r0, r3
 80023a8:	f004 fdca 	bl	8006f40 <USB_ReadInterrupts>
 80023ac:	4603      	mov	r3, r0
 80023ae:	f003 0302 	and.w	r3, r3, #2
 80023b2:	2b02      	cmp	r3, #2
 80023b4:	d107      	bne.n	80023c6 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	695a      	ldr	r2, [r3, #20]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f002 0202 	and.w	r2, r2, #2
 80023c4:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4618      	mov	r0, r3
 80023cc:	f004 fdb8 	bl	8006f40 <USB_ReadInterrupts>
 80023d0:	4603      	mov	r3, r0
 80023d2:	f003 0310 	and.w	r3, r3, #16
 80023d6:	2b10      	cmp	r3, #16
 80023d8:	d161      	bne.n	800249e <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	699a      	ldr	r2, [r3, #24]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f022 0210 	bic.w	r2, r2, #16
 80023e8:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80023ea:	6a3b      	ldr	r3, [r7, #32]
 80023ec:	6a1b      	ldr	r3, [r3, #32]
 80023ee:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80023f0:	69bb      	ldr	r3, [r7, #24]
 80023f2:	f003 020f 	and.w	r2, r3, #15
 80023f6:	4613      	mov	r3, r2
 80023f8:	00db      	lsls	r3, r3, #3
 80023fa:	4413      	add	r3, r2
 80023fc:	009b      	lsls	r3, r3, #2
 80023fe:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002402:	687a      	ldr	r2, [r7, #4]
 8002404:	4413      	add	r3, r2
 8002406:	3304      	adds	r3, #4
 8002408:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800240a:	69bb      	ldr	r3, [r7, #24]
 800240c:	0c5b      	lsrs	r3, r3, #17
 800240e:	f003 030f 	and.w	r3, r3, #15
 8002412:	2b02      	cmp	r3, #2
 8002414:	d124      	bne.n	8002460 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002416:	69ba      	ldr	r2, [r7, #24]
 8002418:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800241c:	4013      	ands	r3, r2
 800241e:	2b00      	cmp	r3, #0
 8002420:	d035      	beq.n	800248e <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002422:	697b      	ldr	r3, [r7, #20]
 8002424:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002426:	69bb      	ldr	r3, [r7, #24]
 8002428:	091b      	lsrs	r3, r3, #4
 800242a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800242c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002430:	b29b      	uxth	r3, r3
 8002432:	461a      	mov	r2, r3
 8002434:	6a38      	ldr	r0, [r7, #32]
 8002436:	f004 fbef 	bl	8006c18 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	68da      	ldr	r2, [r3, #12]
 800243e:	69bb      	ldr	r3, [r7, #24]
 8002440:	091b      	lsrs	r3, r3, #4
 8002442:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002446:	441a      	add	r2, r3
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	695a      	ldr	r2, [r3, #20]
 8002450:	69bb      	ldr	r3, [r7, #24]
 8002452:	091b      	lsrs	r3, r3, #4
 8002454:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002458:	441a      	add	r2, r3
 800245a:	697b      	ldr	r3, [r7, #20]
 800245c:	615a      	str	r2, [r3, #20]
 800245e:	e016      	b.n	800248e <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002460:	69bb      	ldr	r3, [r7, #24]
 8002462:	0c5b      	lsrs	r3, r3, #17
 8002464:	f003 030f 	and.w	r3, r3, #15
 8002468:	2b06      	cmp	r3, #6
 800246a:	d110      	bne.n	800248e <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002472:	2208      	movs	r2, #8
 8002474:	4619      	mov	r1, r3
 8002476:	6a38      	ldr	r0, [r7, #32]
 8002478:	f004 fbce 	bl	8006c18 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800247c:	697b      	ldr	r3, [r7, #20]
 800247e:	695a      	ldr	r2, [r3, #20]
 8002480:	69bb      	ldr	r3, [r7, #24]
 8002482:	091b      	lsrs	r3, r3, #4
 8002484:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002488:	441a      	add	r2, r3
 800248a:	697b      	ldr	r3, [r7, #20]
 800248c:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	699a      	ldr	r2, [r3, #24]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f042 0210 	orr.w	r2, r2, #16
 800249c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4618      	mov	r0, r3
 80024a4:	f004 fd4c 	bl	8006f40 <USB_ReadInterrupts>
 80024a8:	4603      	mov	r3, r0
 80024aa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80024ae:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80024b2:	f040 80a7 	bne.w	8002604 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80024b6:	2300      	movs	r3, #0
 80024b8:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4618      	mov	r0, r3
 80024c0:	f004 fd51 	bl	8006f66 <USB_ReadDevAllOutEpInterrupt>
 80024c4:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80024c6:	e099      	b.n	80025fc <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80024c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024ca:	f003 0301 	and.w	r3, r3, #1
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	f000 808e 	beq.w	80025f0 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80024da:	b2d2      	uxtb	r2, r2
 80024dc:	4611      	mov	r1, r2
 80024de:	4618      	mov	r0, r3
 80024e0:	f004 fd75 	bl	8006fce <USB_ReadDevOutEPInterrupt>
 80024e4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	f003 0301 	and.w	r3, r3, #1
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d00c      	beq.n	800250a <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80024f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024f2:	015a      	lsls	r2, r3, #5
 80024f4:	69fb      	ldr	r3, [r7, #28]
 80024f6:	4413      	add	r3, r2
 80024f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80024fc:	461a      	mov	r2, r3
 80024fe:	2301      	movs	r3, #1
 8002500:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002502:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002504:	6878      	ldr	r0, [r7, #4]
 8002506:	f000 fea1 	bl	800324c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	f003 0308 	and.w	r3, r3, #8
 8002510:	2b00      	cmp	r3, #0
 8002512:	d00c      	beq.n	800252e <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002514:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002516:	015a      	lsls	r2, r3, #5
 8002518:	69fb      	ldr	r3, [r7, #28]
 800251a:	4413      	add	r3, r2
 800251c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002520:	461a      	mov	r2, r3
 8002522:	2308      	movs	r3, #8
 8002524:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002526:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002528:	6878      	ldr	r0, [r7, #4]
 800252a:	f000 ff77 	bl	800341c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800252e:	693b      	ldr	r3, [r7, #16]
 8002530:	f003 0310 	and.w	r3, r3, #16
 8002534:	2b00      	cmp	r3, #0
 8002536:	d008      	beq.n	800254a <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002538:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800253a:	015a      	lsls	r2, r3, #5
 800253c:	69fb      	ldr	r3, [r7, #28]
 800253e:	4413      	add	r3, r2
 8002540:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002544:	461a      	mov	r2, r3
 8002546:	2310      	movs	r3, #16
 8002548:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	f003 0302 	and.w	r3, r3, #2
 8002550:	2b00      	cmp	r3, #0
 8002552:	d030      	beq.n	80025b6 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002554:	6a3b      	ldr	r3, [r7, #32]
 8002556:	695b      	ldr	r3, [r3, #20]
 8002558:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800255c:	2b80      	cmp	r3, #128	@ 0x80
 800255e:	d109      	bne.n	8002574 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002560:	69fb      	ldr	r3, [r7, #28]
 8002562:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	69fa      	ldr	r2, [r7, #28]
 800256a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800256e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002572:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002574:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002576:	4613      	mov	r3, r2
 8002578:	00db      	lsls	r3, r3, #3
 800257a:	4413      	add	r3, r2
 800257c:	009b      	lsls	r3, r3, #2
 800257e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002582:	687a      	ldr	r2, [r7, #4]
 8002584:	4413      	add	r3, r2
 8002586:	3304      	adds	r3, #4
 8002588:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	78db      	ldrb	r3, [r3, #3]
 800258e:	2b01      	cmp	r3, #1
 8002590:	d108      	bne.n	80025a4 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002592:	697b      	ldr	r3, [r7, #20]
 8002594:	2200      	movs	r2, #0
 8002596:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002598:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800259a:	b2db      	uxtb	r3, r3
 800259c:	4619      	mov	r1, r3
 800259e:	6878      	ldr	r0, [r7, #4]
 80025a0:	f007 f924 	bl	80097ec <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80025a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025a6:	015a      	lsls	r2, r3, #5
 80025a8:	69fb      	ldr	r3, [r7, #28]
 80025aa:	4413      	add	r3, r2
 80025ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80025b0:	461a      	mov	r2, r3
 80025b2:	2302      	movs	r3, #2
 80025b4:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	f003 0320 	and.w	r3, r3, #32
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d008      	beq.n	80025d2 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80025c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025c2:	015a      	lsls	r2, r3, #5
 80025c4:	69fb      	ldr	r3, [r7, #28]
 80025c6:	4413      	add	r3, r2
 80025c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80025cc:	461a      	mov	r2, r3
 80025ce:	2320      	movs	r3, #32
 80025d0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80025d2:	693b      	ldr	r3, [r7, #16]
 80025d4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d009      	beq.n	80025f0 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80025dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025de:	015a      	lsls	r2, r3, #5
 80025e0:	69fb      	ldr	r3, [r7, #28]
 80025e2:	4413      	add	r3, r2
 80025e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80025e8:	461a      	mov	r2, r3
 80025ea:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80025ee:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80025f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025f2:	3301      	adds	r3, #1
 80025f4:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80025f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025f8:	085b      	lsrs	r3, r3, #1
 80025fa:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80025fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025fe:	2b00      	cmp	r3, #0
 8002600:	f47f af62 	bne.w	80024c8 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4618      	mov	r0, r3
 800260a:	f004 fc99 	bl	8006f40 <USB_ReadInterrupts>
 800260e:	4603      	mov	r3, r0
 8002610:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002614:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002618:	f040 80db 	bne.w	80027d2 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4618      	mov	r0, r3
 8002622:	f004 fcba 	bl	8006f9a <USB_ReadDevAllInEpInterrupt>
 8002626:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8002628:	2300      	movs	r3, #0
 800262a:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800262c:	e0cd      	b.n	80027ca <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800262e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002630:	f003 0301 	and.w	r3, r3, #1
 8002634:	2b00      	cmp	r3, #0
 8002636:	f000 80c2 	beq.w	80027be <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002640:	b2d2      	uxtb	r2, r2
 8002642:	4611      	mov	r1, r2
 8002644:	4618      	mov	r0, r3
 8002646:	f004 fce0 	bl	800700a <USB_ReadDevInEPInterrupt>
 800264a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800264c:	693b      	ldr	r3, [r7, #16]
 800264e:	f003 0301 	and.w	r3, r3, #1
 8002652:	2b00      	cmp	r3, #0
 8002654:	d057      	beq.n	8002706 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002656:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002658:	f003 030f 	and.w	r3, r3, #15
 800265c:	2201      	movs	r2, #1
 800265e:	fa02 f303 	lsl.w	r3, r2, r3
 8002662:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002664:	69fb      	ldr	r3, [r7, #28]
 8002666:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800266a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	43db      	mvns	r3, r3
 8002670:	69f9      	ldr	r1, [r7, #28]
 8002672:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002676:	4013      	ands	r3, r2
 8002678:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800267a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800267c:	015a      	lsls	r2, r3, #5
 800267e:	69fb      	ldr	r3, [r7, #28]
 8002680:	4413      	add	r3, r2
 8002682:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002686:	461a      	mov	r2, r3
 8002688:	2301      	movs	r3, #1
 800268a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	799b      	ldrb	r3, [r3, #6]
 8002690:	2b01      	cmp	r3, #1
 8002692:	d132      	bne.n	80026fa <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002694:	6879      	ldr	r1, [r7, #4]
 8002696:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002698:	4613      	mov	r3, r2
 800269a:	00db      	lsls	r3, r3, #3
 800269c:	4413      	add	r3, r2
 800269e:	009b      	lsls	r3, r3, #2
 80026a0:	440b      	add	r3, r1
 80026a2:	3320      	adds	r3, #32
 80026a4:	6819      	ldr	r1, [r3, #0]
 80026a6:	6878      	ldr	r0, [r7, #4]
 80026a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80026aa:	4613      	mov	r3, r2
 80026ac:	00db      	lsls	r3, r3, #3
 80026ae:	4413      	add	r3, r2
 80026b0:	009b      	lsls	r3, r3, #2
 80026b2:	4403      	add	r3, r0
 80026b4:	331c      	adds	r3, #28
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4419      	add	r1, r3
 80026ba:	6878      	ldr	r0, [r7, #4]
 80026bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80026be:	4613      	mov	r3, r2
 80026c0:	00db      	lsls	r3, r3, #3
 80026c2:	4413      	add	r3, r2
 80026c4:	009b      	lsls	r3, r3, #2
 80026c6:	4403      	add	r3, r0
 80026c8:	3320      	adds	r3, #32
 80026ca:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80026cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d113      	bne.n	80026fa <HAL_PCD_IRQHandler+0x3a2>
 80026d2:	6879      	ldr	r1, [r7, #4]
 80026d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80026d6:	4613      	mov	r3, r2
 80026d8:	00db      	lsls	r3, r3, #3
 80026da:	4413      	add	r3, r2
 80026dc:	009b      	lsls	r3, r3, #2
 80026de:	440b      	add	r3, r1
 80026e0:	3324      	adds	r3, #36	@ 0x24
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d108      	bne.n	80026fa <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6818      	ldr	r0, [r3, #0]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80026f2:	461a      	mov	r2, r3
 80026f4:	2101      	movs	r1, #1
 80026f6:	f004 fce7 	bl	80070c8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80026fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026fc:	b2db      	uxtb	r3, r3
 80026fe:	4619      	mov	r1, r3
 8002700:	6878      	ldr	r0, [r7, #4]
 8002702:	f006 ffee 	bl	80096e2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	f003 0308 	and.w	r3, r3, #8
 800270c:	2b00      	cmp	r3, #0
 800270e:	d008      	beq.n	8002722 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002710:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002712:	015a      	lsls	r2, r3, #5
 8002714:	69fb      	ldr	r3, [r7, #28]
 8002716:	4413      	add	r3, r2
 8002718:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800271c:	461a      	mov	r2, r3
 800271e:	2308      	movs	r3, #8
 8002720:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	f003 0310 	and.w	r3, r3, #16
 8002728:	2b00      	cmp	r3, #0
 800272a:	d008      	beq.n	800273e <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800272c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800272e:	015a      	lsls	r2, r3, #5
 8002730:	69fb      	ldr	r3, [r7, #28]
 8002732:	4413      	add	r3, r2
 8002734:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002738:	461a      	mov	r2, r3
 800273a:	2310      	movs	r3, #16
 800273c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800273e:	693b      	ldr	r3, [r7, #16]
 8002740:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002744:	2b00      	cmp	r3, #0
 8002746:	d008      	beq.n	800275a <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002748:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800274a:	015a      	lsls	r2, r3, #5
 800274c:	69fb      	ldr	r3, [r7, #28]
 800274e:	4413      	add	r3, r2
 8002750:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002754:	461a      	mov	r2, r3
 8002756:	2340      	movs	r3, #64	@ 0x40
 8002758:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800275a:	693b      	ldr	r3, [r7, #16]
 800275c:	f003 0302 	and.w	r3, r3, #2
 8002760:	2b00      	cmp	r3, #0
 8002762:	d023      	beq.n	80027ac <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002764:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002766:	6a38      	ldr	r0, [r7, #32]
 8002768:	f003 fcd4 	bl	8006114 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800276c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800276e:	4613      	mov	r3, r2
 8002770:	00db      	lsls	r3, r3, #3
 8002772:	4413      	add	r3, r2
 8002774:	009b      	lsls	r3, r3, #2
 8002776:	3310      	adds	r3, #16
 8002778:	687a      	ldr	r2, [r7, #4]
 800277a:	4413      	add	r3, r2
 800277c:	3304      	adds	r3, #4
 800277e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	78db      	ldrb	r3, [r3, #3]
 8002784:	2b01      	cmp	r3, #1
 8002786:	d108      	bne.n	800279a <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	2200      	movs	r2, #0
 800278c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800278e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002790:	b2db      	uxtb	r3, r3
 8002792:	4619      	mov	r1, r3
 8002794:	6878      	ldr	r0, [r7, #4]
 8002796:	f007 f83b 	bl	8009810 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800279a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800279c:	015a      	lsls	r2, r3, #5
 800279e:	69fb      	ldr	r3, [r7, #28]
 80027a0:	4413      	add	r3, r2
 80027a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80027a6:	461a      	mov	r2, r3
 80027a8:	2302      	movs	r3, #2
 80027aa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80027ac:	693b      	ldr	r3, [r7, #16]
 80027ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d003      	beq.n	80027be <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80027b6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80027b8:	6878      	ldr	r0, [r7, #4]
 80027ba:	f000 fcbb 	bl	8003134 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80027be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027c0:	3301      	adds	r3, #1
 80027c2:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80027c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027c6:	085b      	lsrs	r3, r3, #1
 80027c8:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80027ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	f47f af2e 	bne.w	800262e <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4618      	mov	r0, r3
 80027d8:	f004 fbb2 	bl	8006f40 <USB_ReadInterrupts>
 80027dc:	4603      	mov	r3, r0
 80027de:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80027e2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80027e6:	d122      	bne.n	800282e <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80027e8:	69fb      	ldr	r3, [r7, #28]
 80027ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	69fa      	ldr	r2, [r7, #28]
 80027f2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80027f6:	f023 0301 	bic.w	r3, r3, #1
 80027fa:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8002802:	2b01      	cmp	r3, #1
 8002804:	d108      	bne.n	8002818 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2200      	movs	r2, #0
 800280a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800280e:	2100      	movs	r1, #0
 8002810:	6878      	ldr	r0, [r7, #4]
 8002812:	f000 fea1 	bl	8003558 <HAL_PCDEx_LPM_Callback>
 8002816:	e002      	b.n	800281e <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002818:	6878      	ldr	r0, [r7, #4]
 800281a:	f006 ffd9 	bl	80097d0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	695a      	ldr	r2, [r3, #20]
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800282c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4618      	mov	r0, r3
 8002834:	f004 fb84 	bl	8006f40 <USB_ReadInterrupts>
 8002838:	4603      	mov	r3, r0
 800283a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800283e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002842:	d112      	bne.n	800286a <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002844:	69fb      	ldr	r3, [r7, #28]
 8002846:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	f003 0301 	and.w	r3, r3, #1
 8002850:	2b01      	cmp	r3, #1
 8002852:	d102      	bne.n	800285a <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002854:	6878      	ldr	r0, [r7, #4]
 8002856:	f006 ff95 	bl	8009784 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	695a      	ldr	r2, [r3, #20]
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8002868:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4618      	mov	r0, r3
 8002870:	f004 fb66 	bl	8006f40 <USB_ReadInterrupts>
 8002874:	4603      	mov	r3, r0
 8002876:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800287a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800287e:	f040 80b7 	bne.w	80029f0 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002882:	69fb      	ldr	r3, [r7, #28]
 8002884:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	69fa      	ldr	r2, [r7, #28]
 800288c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002890:	f023 0301 	bic.w	r3, r3, #1
 8002894:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	2110      	movs	r1, #16
 800289c:	4618      	mov	r0, r3
 800289e:	f003 fc39 	bl	8006114 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028a2:	2300      	movs	r3, #0
 80028a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80028a6:	e046      	b.n	8002936 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80028a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028aa:	015a      	lsls	r2, r3, #5
 80028ac:	69fb      	ldr	r3, [r7, #28]
 80028ae:	4413      	add	r3, r2
 80028b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80028b4:	461a      	mov	r2, r3
 80028b6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80028ba:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80028bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028be:	015a      	lsls	r2, r3, #5
 80028c0:	69fb      	ldr	r3, [r7, #28]
 80028c2:	4413      	add	r3, r2
 80028c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80028cc:	0151      	lsls	r1, r2, #5
 80028ce:	69fa      	ldr	r2, [r7, #28]
 80028d0:	440a      	add	r2, r1
 80028d2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80028d6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80028da:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80028dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028de:	015a      	lsls	r2, r3, #5
 80028e0:	69fb      	ldr	r3, [r7, #28]
 80028e2:	4413      	add	r3, r2
 80028e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80028e8:	461a      	mov	r2, r3
 80028ea:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80028ee:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80028f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028f2:	015a      	lsls	r2, r3, #5
 80028f4:	69fb      	ldr	r3, [r7, #28]
 80028f6:	4413      	add	r3, r2
 80028f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002900:	0151      	lsls	r1, r2, #5
 8002902:	69fa      	ldr	r2, [r7, #28]
 8002904:	440a      	add	r2, r1
 8002906:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800290a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800290e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002910:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002912:	015a      	lsls	r2, r3, #5
 8002914:	69fb      	ldr	r3, [r7, #28]
 8002916:	4413      	add	r3, r2
 8002918:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002920:	0151      	lsls	r1, r2, #5
 8002922:	69fa      	ldr	r2, [r7, #28]
 8002924:	440a      	add	r2, r1
 8002926:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800292a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800292e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002930:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002932:	3301      	adds	r3, #1
 8002934:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	791b      	ldrb	r3, [r3, #4]
 800293a:	461a      	mov	r2, r3
 800293c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800293e:	4293      	cmp	r3, r2
 8002940:	d3b2      	bcc.n	80028a8 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002942:	69fb      	ldr	r3, [r7, #28]
 8002944:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002948:	69db      	ldr	r3, [r3, #28]
 800294a:	69fa      	ldr	r2, [r7, #28]
 800294c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002950:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8002954:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	7bdb      	ldrb	r3, [r3, #15]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d016      	beq.n	800298c <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800295e:	69fb      	ldr	r3, [r7, #28]
 8002960:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002964:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002968:	69fa      	ldr	r2, [r7, #28]
 800296a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800296e:	f043 030b 	orr.w	r3, r3, #11
 8002972:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002976:	69fb      	ldr	r3, [r7, #28]
 8002978:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800297c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800297e:	69fa      	ldr	r2, [r7, #28]
 8002980:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002984:	f043 030b 	orr.w	r3, r3, #11
 8002988:	6453      	str	r3, [r2, #68]	@ 0x44
 800298a:	e015      	b.n	80029b8 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800298c:	69fb      	ldr	r3, [r7, #28]
 800298e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002992:	695b      	ldr	r3, [r3, #20]
 8002994:	69fa      	ldr	r2, [r7, #28]
 8002996:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800299a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800299e:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 80029a2:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80029a4:	69fb      	ldr	r3, [r7, #28]
 80029a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80029aa:	691b      	ldr	r3, [r3, #16]
 80029ac:	69fa      	ldr	r2, [r7, #28]
 80029ae:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80029b2:	f043 030b 	orr.w	r3, r3, #11
 80029b6:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80029b8:	69fb      	ldr	r3, [r7, #28]
 80029ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	69fa      	ldr	r2, [r7, #28]
 80029c2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80029c6:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80029ca:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6818      	ldr	r0, [r3, #0]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80029da:	461a      	mov	r2, r3
 80029dc:	f004 fb74 	bl	80070c8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	695a      	ldr	r2, [r3, #20]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80029ee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4618      	mov	r0, r3
 80029f6:	f004 faa3 	bl	8006f40 <USB_ReadInterrupts>
 80029fa:	4603      	mov	r3, r0
 80029fc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002a00:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002a04:	d123      	bne.n	8002a4e <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f004 fb39 	bl	8007082 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4618      	mov	r0, r3
 8002a16:	f003 fbf6 	bl	8006206 <USB_GetDevSpeed>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	461a      	mov	r2, r3
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681c      	ldr	r4, [r3, #0]
 8002a26:	f001 fa6f 	bl	8003f08 <HAL_RCC_GetHCLKFreq>
 8002a2a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002a30:	461a      	mov	r2, r3
 8002a32:	4620      	mov	r0, r4
 8002a34:	f003 f8fa 	bl	8005c2c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002a38:	6878      	ldr	r0, [r7, #4]
 8002a3a:	f006 fe7a 	bl	8009732 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	695a      	ldr	r2, [r3, #20]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8002a4c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4618      	mov	r0, r3
 8002a54:	f004 fa74 	bl	8006f40 <USB_ReadInterrupts>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	f003 0308 	and.w	r3, r3, #8
 8002a5e:	2b08      	cmp	r3, #8
 8002a60:	d10a      	bne.n	8002a78 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002a62:	6878      	ldr	r0, [r7, #4]
 8002a64:	f006 fe57 	bl	8009716 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	695a      	ldr	r2, [r3, #20]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f002 0208 	and.w	r2, r2, #8
 8002a76:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	f004 fa5f 	bl	8006f40 <USB_ReadInterrupts>
 8002a82:	4603      	mov	r3, r0
 8002a84:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a88:	2b80      	cmp	r3, #128	@ 0x80
 8002a8a:	d123      	bne.n	8002ad4 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002a8c:	6a3b      	ldr	r3, [r7, #32]
 8002a8e:	699b      	ldr	r3, [r3, #24]
 8002a90:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002a94:	6a3b      	ldr	r3, [r7, #32]
 8002a96:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002a98:	2301      	movs	r3, #1
 8002a9a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a9c:	e014      	b.n	8002ac8 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002a9e:	6879      	ldr	r1, [r7, #4]
 8002aa0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002aa2:	4613      	mov	r3, r2
 8002aa4:	00db      	lsls	r3, r3, #3
 8002aa6:	4413      	add	r3, r2
 8002aa8:	009b      	lsls	r3, r3, #2
 8002aaa:	440b      	add	r3, r1
 8002aac:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002ab0:	781b      	ldrb	r3, [r3, #0]
 8002ab2:	2b01      	cmp	r3, #1
 8002ab4:	d105      	bne.n	8002ac2 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002ab6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ab8:	b2db      	uxtb	r3, r3
 8002aba:	4619      	mov	r1, r3
 8002abc:	6878      	ldr	r0, [r7, #4]
 8002abe:	f000 fb08 	bl	80030d2 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002ac2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ac4:	3301      	adds	r3, #1
 8002ac6:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	791b      	ldrb	r3, [r3, #4]
 8002acc:	461a      	mov	r2, r3
 8002ace:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d3e4      	bcc.n	8002a9e <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f004 fa31 	bl	8006f40 <USB_ReadInterrupts>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002ae4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002ae8:	d13c      	bne.n	8002b64 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002aea:	2301      	movs	r3, #1
 8002aec:	627b      	str	r3, [r7, #36]	@ 0x24
 8002aee:	e02b      	b.n	8002b48 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002af0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002af2:	015a      	lsls	r2, r3, #5
 8002af4:	69fb      	ldr	r3, [r7, #28]
 8002af6:	4413      	add	r3, r2
 8002af8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002b00:	6879      	ldr	r1, [r7, #4]
 8002b02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b04:	4613      	mov	r3, r2
 8002b06:	00db      	lsls	r3, r3, #3
 8002b08:	4413      	add	r3, r2
 8002b0a:	009b      	lsls	r3, r3, #2
 8002b0c:	440b      	add	r3, r1
 8002b0e:	3318      	adds	r3, #24
 8002b10:	781b      	ldrb	r3, [r3, #0]
 8002b12:	2b01      	cmp	r3, #1
 8002b14:	d115      	bne.n	8002b42 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002b16:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	da12      	bge.n	8002b42 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002b1c:	6879      	ldr	r1, [r7, #4]
 8002b1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b20:	4613      	mov	r3, r2
 8002b22:	00db      	lsls	r3, r3, #3
 8002b24:	4413      	add	r3, r2
 8002b26:	009b      	lsls	r3, r3, #2
 8002b28:	440b      	add	r3, r1
 8002b2a:	3317      	adds	r3, #23
 8002b2c:	2201      	movs	r2, #1
 8002b2e:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002b30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b32:	b2db      	uxtb	r3, r3
 8002b34:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002b38:	b2db      	uxtb	r3, r3
 8002b3a:	4619      	mov	r1, r3
 8002b3c:	6878      	ldr	r0, [r7, #4]
 8002b3e:	f000 fac8 	bl	80030d2 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002b42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b44:	3301      	adds	r3, #1
 8002b46:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	791b      	ldrb	r3, [r3, #4]
 8002b4c:	461a      	mov	r2, r3
 8002b4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d3cd      	bcc.n	8002af0 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	695a      	ldr	r2, [r3, #20]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8002b62:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f004 f9e9 	bl	8006f40 <USB_ReadInterrupts>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b74:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002b78:	d156      	bne.n	8002c28 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b7e:	e045      	b.n	8002c0c <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002b80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b82:	015a      	lsls	r2, r3, #5
 8002b84:	69fb      	ldr	r3, [r7, #28]
 8002b86:	4413      	add	r3, r2
 8002b88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002b90:	6879      	ldr	r1, [r7, #4]
 8002b92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b94:	4613      	mov	r3, r2
 8002b96:	00db      	lsls	r3, r3, #3
 8002b98:	4413      	add	r3, r2
 8002b9a:	009b      	lsls	r3, r3, #2
 8002b9c:	440b      	add	r3, r1
 8002b9e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002ba2:	781b      	ldrb	r3, [r3, #0]
 8002ba4:	2b01      	cmp	r3, #1
 8002ba6:	d12e      	bne.n	8002c06 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002ba8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	da2b      	bge.n	8002c06 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002bae:	69bb      	ldr	r3, [r7, #24]
 8002bb0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8002bba:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002bbe:	429a      	cmp	r2, r3
 8002bc0:	d121      	bne.n	8002c06 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002bc2:	6879      	ldr	r1, [r7, #4]
 8002bc4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002bc6:	4613      	mov	r3, r2
 8002bc8:	00db      	lsls	r3, r3, #3
 8002bca:	4413      	add	r3, r2
 8002bcc:	009b      	lsls	r3, r3, #2
 8002bce:	440b      	add	r3, r1
 8002bd0:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002bd4:	2201      	movs	r2, #1
 8002bd6:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002bd8:	6a3b      	ldr	r3, [r7, #32]
 8002bda:	699b      	ldr	r3, [r3, #24]
 8002bdc:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002be0:	6a3b      	ldr	r3, [r7, #32]
 8002be2:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002be4:	6a3b      	ldr	r3, [r7, #32]
 8002be6:	695b      	ldr	r3, [r3, #20]
 8002be8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d10a      	bne.n	8002c06 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002bf0:	69fb      	ldr	r3, [r7, #28]
 8002bf2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	69fa      	ldr	r2, [r7, #28]
 8002bfa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002bfe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002c02:	6053      	str	r3, [r2, #4]
            break;
 8002c04:	e008      	b.n	8002c18 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002c06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c08:	3301      	adds	r3, #1
 8002c0a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	791b      	ldrb	r3, [r3, #4]
 8002c10:	461a      	mov	r2, r3
 8002c12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d3b3      	bcc.n	8002b80 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	695a      	ldr	r2, [r3, #20]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8002c26:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f004 f987 	bl	8006f40 <USB_ReadInterrupts>
 8002c32:	4603      	mov	r3, r0
 8002c34:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002c38:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c3c:	d10a      	bne.n	8002c54 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002c3e:	6878      	ldr	r0, [r7, #4]
 8002c40:	f006 fdf8 	bl	8009834 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	695a      	ldr	r2, [r3, #20]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8002c52:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f004 f971 	bl	8006f40 <USB_ReadInterrupts>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	f003 0304 	and.w	r3, r3, #4
 8002c64:	2b04      	cmp	r3, #4
 8002c66:	d115      	bne.n	8002c94 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002c70:	69bb      	ldr	r3, [r7, #24]
 8002c72:	f003 0304 	and.w	r3, r3, #4
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d002      	beq.n	8002c80 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002c7a:	6878      	ldr	r0, [r7, #4]
 8002c7c:	f006 fde8 	bl	8009850 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	6859      	ldr	r1, [r3, #4]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	69ba      	ldr	r2, [r7, #24]
 8002c8c:	430a      	orrs	r2, r1
 8002c8e:	605a      	str	r2, [r3, #4]
 8002c90:	e000      	b.n	8002c94 <HAL_PCD_IRQHandler+0x93c>
      return;
 8002c92:	bf00      	nop
    }
  }
}
 8002c94:	3734      	adds	r7, #52	@ 0x34
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd90      	pop	{r4, r7, pc}

08002c9a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002c9a:	b580      	push	{r7, lr}
 8002c9c:	b082      	sub	sp, #8
 8002c9e:	af00      	add	r7, sp, #0
 8002ca0:	6078      	str	r0, [r7, #4]
 8002ca2:	460b      	mov	r3, r1
 8002ca4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002cac:	2b01      	cmp	r3, #1
 8002cae:	d101      	bne.n	8002cb4 <HAL_PCD_SetAddress+0x1a>
 8002cb0:	2302      	movs	r3, #2
 8002cb2:	e012      	b.n	8002cda <HAL_PCD_SetAddress+0x40>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	78fa      	ldrb	r2, [r7, #3]
 8002cc0:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	78fa      	ldrb	r2, [r7, #3]
 8002cc8:	4611      	mov	r1, r2
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f004 f8d0 	bl	8006e70 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002cd8:	2300      	movs	r3, #0
}
 8002cda:	4618      	mov	r0, r3
 8002cdc:	3708      	adds	r7, #8
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}

08002ce2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002ce2:	b580      	push	{r7, lr}
 8002ce4:	b084      	sub	sp, #16
 8002ce6:	af00      	add	r7, sp, #0
 8002ce8:	6078      	str	r0, [r7, #4]
 8002cea:	4608      	mov	r0, r1
 8002cec:	4611      	mov	r1, r2
 8002cee:	461a      	mov	r2, r3
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	70fb      	strb	r3, [r7, #3]
 8002cf4:	460b      	mov	r3, r1
 8002cf6:	803b      	strh	r3, [r7, #0]
 8002cf8:	4613      	mov	r3, r2
 8002cfa:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002d00:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	da0f      	bge.n	8002d28 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d08:	78fb      	ldrb	r3, [r7, #3]
 8002d0a:	f003 020f 	and.w	r2, r3, #15
 8002d0e:	4613      	mov	r3, r2
 8002d10:	00db      	lsls	r3, r3, #3
 8002d12:	4413      	add	r3, r2
 8002d14:	009b      	lsls	r3, r3, #2
 8002d16:	3310      	adds	r3, #16
 8002d18:	687a      	ldr	r2, [r7, #4]
 8002d1a:	4413      	add	r3, r2
 8002d1c:	3304      	adds	r3, #4
 8002d1e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	2201      	movs	r2, #1
 8002d24:	705a      	strb	r2, [r3, #1]
 8002d26:	e00f      	b.n	8002d48 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d28:	78fb      	ldrb	r3, [r7, #3]
 8002d2a:	f003 020f 	and.w	r2, r3, #15
 8002d2e:	4613      	mov	r3, r2
 8002d30:	00db      	lsls	r3, r3, #3
 8002d32:	4413      	add	r3, r2
 8002d34:	009b      	lsls	r3, r3, #2
 8002d36:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002d3a:	687a      	ldr	r2, [r7, #4]
 8002d3c:	4413      	add	r3, r2
 8002d3e:	3304      	adds	r3, #4
 8002d40:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	2200      	movs	r2, #0
 8002d46:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002d48:	78fb      	ldrb	r3, [r7, #3]
 8002d4a:	f003 030f 	and.w	r3, r3, #15
 8002d4e:	b2da      	uxtb	r2, r3
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002d54:	883a      	ldrh	r2, [r7, #0]
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	78ba      	ldrb	r2, [r7, #2]
 8002d5e:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	785b      	ldrb	r3, [r3, #1]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d004      	beq.n	8002d72 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	781b      	ldrb	r3, [r3, #0]
 8002d6c:	461a      	mov	r2, r3
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002d72:	78bb      	ldrb	r3, [r7, #2]
 8002d74:	2b02      	cmp	r3, #2
 8002d76:	d102      	bne.n	8002d7e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002d84:	2b01      	cmp	r3, #1
 8002d86:	d101      	bne.n	8002d8c <HAL_PCD_EP_Open+0xaa>
 8002d88:	2302      	movs	r3, #2
 8002d8a:	e00e      	b.n	8002daa <HAL_PCD_EP_Open+0xc8>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2201      	movs	r2, #1
 8002d90:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	68f9      	ldr	r1, [r7, #12]
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f003 fa58 	bl	8006250 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2200      	movs	r2, #0
 8002da4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8002da8:	7afb      	ldrb	r3, [r7, #11]
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	3710      	adds	r7, #16
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}

08002db2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002db2:	b580      	push	{r7, lr}
 8002db4:	b084      	sub	sp, #16
 8002db6:	af00      	add	r7, sp, #0
 8002db8:	6078      	str	r0, [r7, #4]
 8002dba:	460b      	mov	r3, r1
 8002dbc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002dbe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	da0f      	bge.n	8002de6 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002dc6:	78fb      	ldrb	r3, [r7, #3]
 8002dc8:	f003 020f 	and.w	r2, r3, #15
 8002dcc:	4613      	mov	r3, r2
 8002dce:	00db      	lsls	r3, r3, #3
 8002dd0:	4413      	add	r3, r2
 8002dd2:	009b      	lsls	r3, r3, #2
 8002dd4:	3310      	adds	r3, #16
 8002dd6:	687a      	ldr	r2, [r7, #4]
 8002dd8:	4413      	add	r3, r2
 8002dda:	3304      	adds	r3, #4
 8002ddc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	2201      	movs	r2, #1
 8002de2:	705a      	strb	r2, [r3, #1]
 8002de4:	e00f      	b.n	8002e06 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002de6:	78fb      	ldrb	r3, [r7, #3]
 8002de8:	f003 020f 	and.w	r2, r3, #15
 8002dec:	4613      	mov	r3, r2
 8002dee:	00db      	lsls	r3, r3, #3
 8002df0:	4413      	add	r3, r2
 8002df2:	009b      	lsls	r3, r3, #2
 8002df4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002df8:	687a      	ldr	r2, [r7, #4]
 8002dfa:	4413      	add	r3, r2
 8002dfc:	3304      	adds	r3, #4
 8002dfe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	2200      	movs	r2, #0
 8002e04:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e06:	78fb      	ldrb	r3, [r7, #3]
 8002e08:	f003 030f 	and.w	r3, r3, #15
 8002e0c:	b2da      	uxtb	r2, r3
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002e18:	2b01      	cmp	r3, #1
 8002e1a:	d101      	bne.n	8002e20 <HAL_PCD_EP_Close+0x6e>
 8002e1c:	2302      	movs	r3, #2
 8002e1e:	e00e      	b.n	8002e3e <HAL_PCD_EP_Close+0x8c>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2201      	movs	r2, #1
 8002e24:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	68f9      	ldr	r1, [r7, #12]
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f003 fa96 	bl	8006360 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2200      	movs	r2, #0
 8002e38:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8002e3c:	2300      	movs	r3, #0
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	3710      	adds	r7, #16
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}

08002e46 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002e46:	b580      	push	{r7, lr}
 8002e48:	b086      	sub	sp, #24
 8002e4a:	af00      	add	r7, sp, #0
 8002e4c:	60f8      	str	r0, [r7, #12]
 8002e4e:	607a      	str	r2, [r7, #4]
 8002e50:	603b      	str	r3, [r7, #0]
 8002e52:	460b      	mov	r3, r1
 8002e54:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e56:	7afb      	ldrb	r3, [r7, #11]
 8002e58:	f003 020f 	and.w	r2, r3, #15
 8002e5c:	4613      	mov	r3, r2
 8002e5e:	00db      	lsls	r3, r3, #3
 8002e60:	4413      	add	r3, r2
 8002e62:	009b      	lsls	r3, r3, #2
 8002e64:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002e68:	68fa      	ldr	r2, [r7, #12]
 8002e6a:	4413      	add	r3, r2
 8002e6c:	3304      	adds	r3, #4
 8002e6e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002e70:	697b      	ldr	r3, [r7, #20]
 8002e72:	687a      	ldr	r2, [r7, #4]
 8002e74:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	683a      	ldr	r2, [r7, #0]
 8002e7a:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	2200      	movs	r2, #0
 8002e86:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e88:	7afb      	ldrb	r3, [r7, #11]
 8002e8a:	f003 030f 	and.w	r3, r3, #15
 8002e8e:	b2da      	uxtb	r2, r3
 8002e90:	697b      	ldr	r3, [r7, #20]
 8002e92:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	799b      	ldrb	r3, [r3, #6]
 8002e98:	2b01      	cmp	r3, #1
 8002e9a:	d102      	bne.n	8002ea2 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002e9c:	687a      	ldr	r2, [r7, #4]
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	6818      	ldr	r0, [r3, #0]
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	799b      	ldrb	r3, [r3, #6]
 8002eaa:	461a      	mov	r2, r3
 8002eac:	6979      	ldr	r1, [r7, #20]
 8002eae:	f003 fb33 	bl	8006518 <USB_EPStartXfer>

  return HAL_OK;
 8002eb2:	2300      	movs	r3, #0
}
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	3718      	adds	r7, #24
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bd80      	pop	{r7, pc}

08002ebc <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b083      	sub	sp, #12
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
 8002ec4:	460b      	mov	r3, r1
 8002ec6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002ec8:	78fb      	ldrb	r3, [r7, #3]
 8002eca:	f003 020f 	and.w	r2, r3, #15
 8002ece:	6879      	ldr	r1, [r7, #4]
 8002ed0:	4613      	mov	r3, r2
 8002ed2:	00db      	lsls	r3, r3, #3
 8002ed4:	4413      	add	r3, r2
 8002ed6:	009b      	lsls	r3, r3, #2
 8002ed8:	440b      	add	r3, r1
 8002eda:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8002ede:	681b      	ldr	r3, [r3, #0]
}
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	370c      	adds	r7, #12
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eea:	4770      	bx	lr

08002eec <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b086      	sub	sp, #24
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	60f8      	str	r0, [r7, #12]
 8002ef4:	607a      	str	r2, [r7, #4]
 8002ef6:	603b      	str	r3, [r7, #0]
 8002ef8:	460b      	mov	r3, r1
 8002efa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002efc:	7afb      	ldrb	r3, [r7, #11]
 8002efe:	f003 020f 	and.w	r2, r3, #15
 8002f02:	4613      	mov	r3, r2
 8002f04:	00db      	lsls	r3, r3, #3
 8002f06:	4413      	add	r3, r2
 8002f08:	009b      	lsls	r3, r3, #2
 8002f0a:	3310      	adds	r3, #16
 8002f0c:	68fa      	ldr	r2, [r7, #12]
 8002f0e:	4413      	add	r3, r2
 8002f10:	3304      	adds	r3, #4
 8002f12:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002f14:	697b      	ldr	r3, [r7, #20]
 8002f16:	687a      	ldr	r2, [r7, #4]
 8002f18:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	683a      	ldr	r2, [r7, #0]
 8002f1e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	2200      	movs	r2, #0
 8002f24:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	2201      	movs	r2, #1
 8002f2a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f2c:	7afb      	ldrb	r3, [r7, #11]
 8002f2e:	f003 030f 	and.w	r3, r3, #15
 8002f32:	b2da      	uxtb	r2, r3
 8002f34:	697b      	ldr	r3, [r7, #20]
 8002f36:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	799b      	ldrb	r3, [r3, #6]
 8002f3c:	2b01      	cmp	r3, #1
 8002f3e:	d102      	bne.n	8002f46 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002f40:	687a      	ldr	r2, [r7, #4]
 8002f42:	697b      	ldr	r3, [r7, #20]
 8002f44:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	6818      	ldr	r0, [r3, #0]
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	799b      	ldrb	r3, [r3, #6]
 8002f4e:	461a      	mov	r2, r3
 8002f50:	6979      	ldr	r1, [r7, #20]
 8002f52:	f003 fae1 	bl	8006518 <USB_EPStartXfer>

  return HAL_OK;
 8002f56:	2300      	movs	r3, #0
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	3718      	adds	r7, #24
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bd80      	pop	{r7, pc}

08002f60 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b084      	sub	sp, #16
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
 8002f68:	460b      	mov	r3, r1
 8002f6a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002f6c:	78fb      	ldrb	r3, [r7, #3]
 8002f6e:	f003 030f 	and.w	r3, r3, #15
 8002f72:	687a      	ldr	r2, [r7, #4]
 8002f74:	7912      	ldrb	r2, [r2, #4]
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d901      	bls.n	8002f7e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	e04f      	b.n	800301e <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002f7e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	da0f      	bge.n	8002fa6 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f86:	78fb      	ldrb	r3, [r7, #3]
 8002f88:	f003 020f 	and.w	r2, r3, #15
 8002f8c:	4613      	mov	r3, r2
 8002f8e:	00db      	lsls	r3, r3, #3
 8002f90:	4413      	add	r3, r2
 8002f92:	009b      	lsls	r3, r3, #2
 8002f94:	3310      	adds	r3, #16
 8002f96:	687a      	ldr	r2, [r7, #4]
 8002f98:	4413      	add	r3, r2
 8002f9a:	3304      	adds	r3, #4
 8002f9c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	2201      	movs	r2, #1
 8002fa2:	705a      	strb	r2, [r3, #1]
 8002fa4:	e00d      	b.n	8002fc2 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002fa6:	78fa      	ldrb	r2, [r7, #3]
 8002fa8:	4613      	mov	r3, r2
 8002faa:	00db      	lsls	r3, r3, #3
 8002fac:	4413      	add	r3, r2
 8002fae:	009b      	lsls	r3, r3, #2
 8002fb0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002fb4:	687a      	ldr	r2, [r7, #4]
 8002fb6:	4413      	add	r3, r2
 8002fb8:	3304      	adds	r3, #4
 8002fba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	2201      	movs	r2, #1
 8002fc6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002fc8:	78fb      	ldrb	r3, [r7, #3]
 8002fca:	f003 030f 	and.w	r3, r3, #15
 8002fce:	b2da      	uxtb	r2, r3
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002fda:	2b01      	cmp	r3, #1
 8002fdc:	d101      	bne.n	8002fe2 <HAL_PCD_EP_SetStall+0x82>
 8002fde:	2302      	movs	r3, #2
 8002fe0:	e01d      	b.n	800301e <HAL_PCD_EP_SetStall+0xbe>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2201      	movs	r2, #1
 8002fe6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	68f9      	ldr	r1, [r7, #12]
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	f003 fe69 	bl	8006cc8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002ff6:	78fb      	ldrb	r3, [r7, #3]
 8002ff8:	f003 030f 	and.w	r3, r3, #15
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d109      	bne.n	8003014 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6818      	ldr	r0, [r3, #0]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	7999      	ldrb	r1, [r3, #6]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800300e:	461a      	mov	r2, r3
 8003010:	f004 f85a 	bl	80070c8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2200      	movs	r2, #0
 8003018:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800301c:	2300      	movs	r3, #0
}
 800301e:	4618      	mov	r0, r3
 8003020:	3710      	adds	r7, #16
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}

08003026 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003026:	b580      	push	{r7, lr}
 8003028:	b084      	sub	sp, #16
 800302a:	af00      	add	r7, sp, #0
 800302c:	6078      	str	r0, [r7, #4]
 800302e:	460b      	mov	r3, r1
 8003030:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003032:	78fb      	ldrb	r3, [r7, #3]
 8003034:	f003 030f 	and.w	r3, r3, #15
 8003038:	687a      	ldr	r2, [r7, #4]
 800303a:	7912      	ldrb	r2, [r2, #4]
 800303c:	4293      	cmp	r3, r2
 800303e:	d901      	bls.n	8003044 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	e042      	b.n	80030ca <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003044:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003048:	2b00      	cmp	r3, #0
 800304a:	da0f      	bge.n	800306c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800304c:	78fb      	ldrb	r3, [r7, #3]
 800304e:	f003 020f 	and.w	r2, r3, #15
 8003052:	4613      	mov	r3, r2
 8003054:	00db      	lsls	r3, r3, #3
 8003056:	4413      	add	r3, r2
 8003058:	009b      	lsls	r3, r3, #2
 800305a:	3310      	adds	r3, #16
 800305c:	687a      	ldr	r2, [r7, #4]
 800305e:	4413      	add	r3, r2
 8003060:	3304      	adds	r3, #4
 8003062:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	2201      	movs	r2, #1
 8003068:	705a      	strb	r2, [r3, #1]
 800306a:	e00f      	b.n	800308c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800306c:	78fb      	ldrb	r3, [r7, #3]
 800306e:	f003 020f 	and.w	r2, r3, #15
 8003072:	4613      	mov	r3, r2
 8003074:	00db      	lsls	r3, r3, #3
 8003076:	4413      	add	r3, r2
 8003078:	009b      	lsls	r3, r3, #2
 800307a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800307e:	687a      	ldr	r2, [r7, #4]
 8003080:	4413      	add	r3, r2
 8003082:	3304      	adds	r3, #4
 8003084:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	2200      	movs	r2, #0
 800308a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	2200      	movs	r2, #0
 8003090:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003092:	78fb      	ldrb	r3, [r7, #3]
 8003094:	f003 030f 	and.w	r3, r3, #15
 8003098:	b2da      	uxtb	r2, r3
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80030a4:	2b01      	cmp	r3, #1
 80030a6:	d101      	bne.n	80030ac <HAL_PCD_EP_ClrStall+0x86>
 80030a8:	2302      	movs	r3, #2
 80030aa:	e00e      	b.n	80030ca <HAL_PCD_EP_ClrStall+0xa4>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2201      	movs	r2, #1
 80030b0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	68f9      	ldr	r1, [r7, #12]
 80030ba:	4618      	mov	r0, r3
 80030bc:	f003 fe72 	bl	8006da4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2200      	movs	r2, #0
 80030c4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80030c8:	2300      	movs	r3, #0
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	3710      	adds	r7, #16
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}

080030d2 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80030d2:	b580      	push	{r7, lr}
 80030d4:	b084      	sub	sp, #16
 80030d6:	af00      	add	r7, sp, #0
 80030d8:	6078      	str	r0, [r7, #4]
 80030da:	460b      	mov	r3, r1
 80030dc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80030de:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	da0c      	bge.n	8003100 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80030e6:	78fb      	ldrb	r3, [r7, #3]
 80030e8:	f003 020f 	and.w	r2, r3, #15
 80030ec:	4613      	mov	r3, r2
 80030ee:	00db      	lsls	r3, r3, #3
 80030f0:	4413      	add	r3, r2
 80030f2:	009b      	lsls	r3, r3, #2
 80030f4:	3310      	adds	r3, #16
 80030f6:	687a      	ldr	r2, [r7, #4]
 80030f8:	4413      	add	r3, r2
 80030fa:	3304      	adds	r3, #4
 80030fc:	60fb      	str	r3, [r7, #12]
 80030fe:	e00c      	b.n	800311a <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003100:	78fb      	ldrb	r3, [r7, #3]
 8003102:	f003 020f 	and.w	r2, r3, #15
 8003106:	4613      	mov	r3, r2
 8003108:	00db      	lsls	r3, r3, #3
 800310a:	4413      	add	r3, r2
 800310c:	009b      	lsls	r3, r3, #2
 800310e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003112:	687a      	ldr	r2, [r7, #4]
 8003114:	4413      	add	r3, r2
 8003116:	3304      	adds	r3, #4
 8003118:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	68f9      	ldr	r1, [r7, #12]
 8003120:	4618      	mov	r0, r3
 8003122:	f003 fc91 	bl	8006a48 <USB_EPStopXfer>
 8003126:	4603      	mov	r3, r0
 8003128:	72fb      	strb	r3, [r7, #11]

  return ret;
 800312a:	7afb      	ldrb	r3, [r7, #11]
}
 800312c:	4618      	mov	r0, r3
 800312e:	3710      	adds	r7, #16
 8003130:	46bd      	mov	sp, r7
 8003132:	bd80      	pop	{r7, pc}

08003134 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b08a      	sub	sp, #40	@ 0x28
 8003138:	af02      	add	r7, sp, #8
 800313a:	6078      	str	r0, [r7, #4]
 800313c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003144:	697b      	ldr	r3, [r7, #20]
 8003146:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003148:	683a      	ldr	r2, [r7, #0]
 800314a:	4613      	mov	r3, r2
 800314c:	00db      	lsls	r3, r3, #3
 800314e:	4413      	add	r3, r2
 8003150:	009b      	lsls	r3, r3, #2
 8003152:	3310      	adds	r3, #16
 8003154:	687a      	ldr	r2, [r7, #4]
 8003156:	4413      	add	r3, r2
 8003158:	3304      	adds	r3, #4
 800315a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	695a      	ldr	r2, [r3, #20]
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	691b      	ldr	r3, [r3, #16]
 8003164:	429a      	cmp	r2, r3
 8003166:	d901      	bls.n	800316c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003168:	2301      	movs	r3, #1
 800316a:	e06b      	b.n	8003244 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	691a      	ldr	r2, [r3, #16]
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	695b      	ldr	r3, [r3, #20]
 8003174:	1ad3      	subs	r3, r2, r3
 8003176:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	689b      	ldr	r3, [r3, #8]
 800317c:	69fa      	ldr	r2, [r7, #28]
 800317e:	429a      	cmp	r2, r3
 8003180:	d902      	bls.n	8003188 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	689b      	ldr	r3, [r3, #8]
 8003186:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003188:	69fb      	ldr	r3, [r7, #28]
 800318a:	3303      	adds	r3, #3
 800318c:	089b      	lsrs	r3, r3, #2
 800318e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003190:	e02a      	b.n	80031e8 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	691a      	ldr	r2, [r3, #16]
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	695b      	ldr	r3, [r3, #20]
 800319a:	1ad3      	subs	r3, r2, r3
 800319c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	689b      	ldr	r3, [r3, #8]
 80031a2:	69fa      	ldr	r2, [r7, #28]
 80031a4:	429a      	cmp	r2, r3
 80031a6:	d902      	bls.n	80031ae <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	689b      	ldr	r3, [r3, #8]
 80031ac:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80031ae:	69fb      	ldr	r3, [r7, #28]
 80031b0:	3303      	adds	r3, #3
 80031b2:	089b      	lsrs	r3, r3, #2
 80031b4:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	68d9      	ldr	r1, [r3, #12]
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	b2da      	uxtb	r2, r3
 80031be:	69fb      	ldr	r3, [r7, #28]
 80031c0:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80031c6:	9300      	str	r3, [sp, #0]
 80031c8:	4603      	mov	r3, r0
 80031ca:	6978      	ldr	r0, [r7, #20]
 80031cc:	f003 fce6 	bl	8006b9c <USB_WritePacket>

    ep->xfer_buff  += len;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	68da      	ldr	r2, [r3, #12]
 80031d4:	69fb      	ldr	r3, [r7, #28]
 80031d6:	441a      	add	r2, r3
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	695a      	ldr	r2, [r3, #20]
 80031e0:	69fb      	ldr	r3, [r7, #28]
 80031e2:	441a      	add	r2, r3
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	015a      	lsls	r2, r3, #5
 80031ec:	693b      	ldr	r3, [r7, #16]
 80031ee:	4413      	add	r3, r2
 80031f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80031f4:	699b      	ldr	r3, [r3, #24]
 80031f6:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80031f8:	69ba      	ldr	r2, [r7, #24]
 80031fa:	429a      	cmp	r2, r3
 80031fc:	d809      	bhi.n	8003212 <PCD_WriteEmptyTxFifo+0xde>
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	695a      	ldr	r2, [r3, #20]
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003206:	429a      	cmp	r2, r3
 8003208:	d203      	bcs.n	8003212 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	691b      	ldr	r3, [r3, #16]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d1bf      	bne.n	8003192 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	691a      	ldr	r2, [r3, #16]
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	695b      	ldr	r3, [r3, #20]
 800321a:	429a      	cmp	r2, r3
 800321c:	d811      	bhi.n	8003242 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	f003 030f 	and.w	r3, r3, #15
 8003224:	2201      	movs	r2, #1
 8003226:	fa02 f303 	lsl.w	r3, r2, r3
 800322a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800322c:	693b      	ldr	r3, [r7, #16]
 800322e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003232:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003234:	68bb      	ldr	r3, [r7, #8]
 8003236:	43db      	mvns	r3, r3
 8003238:	6939      	ldr	r1, [r7, #16]
 800323a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800323e:	4013      	ands	r3, r2
 8003240:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8003242:	2300      	movs	r3, #0
}
 8003244:	4618      	mov	r0, r3
 8003246:	3720      	adds	r7, #32
 8003248:	46bd      	mov	sp, r7
 800324a:	bd80      	pop	{r7, pc}

0800324c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b088      	sub	sp, #32
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
 8003254:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800325c:	69fb      	ldr	r3, [r7, #28]
 800325e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003260:	69fb      	ldr	r3, [r7, #28]
 8003262:	333c      	adds	r3, #60	@ 0x3c
 8003264:	3304      	adds	r3, #4
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	015a      	lsls	r2, r3, #5
 800326e:	69bb      	ldr	r3, [r7, #24]
 8003270:	4413      	add	r3, r2
 8003272:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	799b      	ldrb	r3, [r3, #6]
 800327e:	2b01      	cmp	r3, #1
 8003280:	d17b      	bne.n	800337a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	f003 0308 	and.w	r3, r3, #8
 8003288:	2b00      	cmp	r3, #0
 800328a:	d015      	beq.n	80032b8 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800328c:	697b      	ldr	r3, [r7, #20]
 800328e:	4a61      	ldr	r2, [pc, #388]	@ (8003414 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003290:	4293      	cmp	r3, r2
 8003292:	f240 80b9 	bls.w	8003408 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800329c:	2b00      	cmp	r3, #0
 800329e:	f000 80b3 	beq.w	8003408 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	015a      	lsls	r2, r3, #5
 80032a6:	69bb      	ldr	r3, [r7, #24]
 80032a8:	4413      	add	r3, r2
 80032aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80032ae:	461a      	mov	r2, r3
 80032b0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80032b4:	6093      	str	r3, [r2, #8]
 80032b6:	e0a7      	b.n	8003408 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80032b8:	693b      	ldr	r3, [r7, #16]
 80032ba:	f003 0320 	and.w	r3, r3, #32
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d009      	beq.n	80032d6 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	015a      	lsls	r2, r3, #5
 80032c6:	69bb      	ldr	r3, [r7, #24]
 80032c8:	4413      	add	r3, r2
 80032ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80032ce:	461a      	mov	r2, r3
 80032d0:	2320      	movs	r3, #32
 80032d2:	6093      	str	r3, [r2, #8]
 80032d4:	e098      	b.n	8003408 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80032dc:	2b00      	cmp	r3, #0
 80032de:	f040 8093 	bne.w	8003408 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	4a4b      	ldr	r2, [pc, #300]	@ (8003414 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d90f      	bls.n	800330a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d00a      	beq.n	800330a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	015a      	lsls	r2, r3, #5
 80032f8:	69bb      	ldr	r3, [r7, #24]
 80032fa:	4413      	add	r3, r2
 80032fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003300:	461a      	mov	r2, r3
 8003302:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003306:	6093      	str	r3, [r2, #8]
 8003308:	e07e      	b.n	8003408 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800330a:	683a      	ldr	r2, [r7, #0]
 800330c:	4613      	mov	r3, r2
 800330e:	00db      	lsls	r3, r3, #3
 8003310:	4413      	add	r3, r2
 8003312:	009b      	lsls	r3, r3, #2
 8003314:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003318:	687a      	ldr	r2, [r7, #4]
 800331a:	4413      	add	r3, r2
 800331c:	3304      	adds	r3, #4
 800331e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	6a1a      	ldr	r2, [r3, #32]
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	0159      	lsls	r1, r3, #5
 8003328:	69bb      	ldr	r3, [r7, #24]
 800332a:	440b      	add	r3, r1
 800332c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003330:	691b      	ldr	r3, [r3, #16]
 8003332:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003336:	1ad2      	subs	r2, r2, r3
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d114      	bne.n	800336c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	691b      	ldr	r3, [r3, #16]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d109      	bne.n	800335e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6818      	ldr	r0, [r3, #0]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003354:	461a      	mov	r2, r3
 8003356:	2101      	movs	r1, #1
 8003358:	f003 feb6 	bl	80070c8 <USB_EP0_OutStart>
 800335c:	e006      	b.n	800336c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	68da      	ldr	r2, [r3, #12]
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	695b      	ldr	r3, [r3, #20]
 8003366:	441a      	add	r2, r3
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	b2db      	uxtb	r3, r3
 8003370:	4619      	mov	r1, r3
 8003372:	6878      	ldr	r0, [r7, #4]
 8003374:	f006 f99a 	bl	80096ac <HAL_PCD_DataOutStageCallback>
 8003378:	e046      	b.n	8003408 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800337a:	697b      	ldr	r3, [r7, #20]
 800337c:	4a26      	ldr	r2, [pc, #152]	@ (8003418 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d124      	bne.n	80033cc <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003388:	2b00      	cmp	r3, #0
 800338a:	d00a      	beq.n	80033a2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	015a      	lsls	r2, r3, #5
 8003390:	69bb      	ldr	r3, [r7, #24]
 8003392:	4413      	add	r3, r2
 8003394:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003398:	461a      	mov	r2, r3
 800339a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800339e:	6093      	str	r3, [r2, #8]
 80033a0:	e032      	b.n	8003408 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80033a2:	693b      	ldr	r3, [r7, #16]
 80033a4:	f003 0320 	and.w	r3, r3, #32
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d008      	beq.n	80033be <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	015a      	lsls	r2, r3, #5
 80033b0:	69bb      	ldr	r3, [r7, #24]
 80033b2:	4413      	add	r3, r2
 80033b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80033b8:	461a      	mov	r2, r3
 80033ba:	2320      	movs	r3, #32
 80033bc:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	b2db      	uxtb	r3, r3
 80033c2:	4619      	mov	r1, r3
 80033c4:	6878      	ldr	r0, [r7, #4]
 80033c6:	f006 f971 	bl	80096ac <HAL_PCD_DataOutStageCallback>
 80033ca:	e01d      	b.n	8003408 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d114      	bne.n	80033fc <PCD_EP_OutXfrComplete_int+0x1b0>
 80033d2:	6879      	ldr	r1, [r7, #4]
 80033d4:	683a      	ldr	r2, [r7, #0]
 80033d6:	4613      	mov	r3, r2
 80033d8:	00db      	lsls	r3, r3, #3
 80033da:	4413      	add	r3, r2
 80033dc:	009b      	lsls	r3, r3, #2
 80033de:	440b      	add	r3, r1
 80033e0:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d108      	bne.n	80033fc <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6818      	ldr	r0, [r3, #0]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80033f4:	461a      	mov	r2, r3
 80033f6:	2100      	movs	r1, #0
 80033f8:	f003 fe66 	bl	80070c8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	b2db      	uxtb	r3, r3
 8003400:	4619      	mov	r1, r3
 8003402:	6878      	ldr	r0, [r7, #4]
 8003404:	f006 f952 	bl	80096ac <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003408:	2300      	movs	r3, #0
}
 800340a:	4618      	mov	r0, r3
 800340c:	3720      	adds	r7, #32
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}
 8003412:	bf00      	nop
 8003414:	4f54300a 	.word	0x4f54300a
 8003418:	4f54310a 	.word	0x4f54310a

0800341c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b086      	sub	sp, #24
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
 8003424:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003430:	697b      	ldr	r3, [r7, #20]
 8003432:	333c      	adds	r3, #60	@ 0x3c
 8003434:	3304      	adds	r3, #4
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	015a      	lsls	r2, r3, #5
 800343e:	693b      	ldr	r3, [r7, #16]
 8003440:	4413      	add	r3, r2
 8003442:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	4a15      	ldr	r2, [pc, #84]	@ (80034a4 <PCD_EP_OutSetupPacket_int+0x88>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d90e      	bls.n	8003470 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003452:	68bb      	ldr	r3, [r7, #8]
 8003454:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003458:	2b00      	cmp	r3, #0
 800345a:	d009      	beq.n	8003470 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	015a      	lsls	r2, r3, #5
 8003460:	693b      	ldr	r3, [r7, #16]
 8003462:	4413      	add	r3, r2
 8003464:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003468:	461a      	mov	r2, r3
 800346a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800346e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003470:	6878      	ldr	r0, [r7, #4]
 8003472:	f006 f909 	bl	8009688 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	4a0a      	ldr	r2, [pc, #40]	@ (80034a4 <PCD_EP_OutSetupPacket_int+0x88>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d90c      	bls.n	8003498 <PCD_EP_OutSetupPacket_int+0x7c>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	799b      	ldrb	r3, [r3, #6]
 8003482:	2b01      	cmp	r3, #1
 8003484:	d108      	bne.n	8003498 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6818      	ldr	r0, [r3, #0]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003490:	461a      	mov	r2, r3
 8003492:	2101      	movs	r1, #1
 8003494:	f003 fe18 	bl	80070c8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003498:	2300      	movs	r3, #0
}
 800349a:	4618      	mov	r0, r3
 800349c:	3718      	adds	r7, #24
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}
 80034a2:	bf00      	nop
 80034a4:	4f54300a 	.word	0x4f54300a

080034a8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b085      	sub	sp, #20
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
 80034b0:	460b      	mov	r3, r1
 80034b2:	70fb      	strb	r3, [r7, #3]
 80034b4:	4613      	mov	r3, r2
 80034b6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034be:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80034c0:	78fb      	ldrb	r3, [r7, #3]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d107      	bne.n	80034d6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80034c6:	883b      	ldrh	r3, [r7, #0]
 80034c8:	0419      	lsls	r1, r3, #16
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	68ba      	ldr	r2, [r7, #8]
 80034d0:	430a      	orrs	r2, r1
 80034d2:	629a      	str	r2, [r3, #40]	@ 0x28
 80034d4:	e028      	b.n	8003528 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034dc:	0c1b      	lsrs	r3, r3, #16
 80034de:	68ba      	ldr	r2, [r7, #8]
 80034e0:	4413      	add	r3, r2
 80034e2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80034e4:	2300      	movs	r3, #0
 80034e6:	73fb      	strb	r3, [r7, #15]
 80034e8:	e00d      	b.n	8003506 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681a      	ldr	r2, [r3, #0]
 80034ee:	7bfb      	ldrb	r3, [r7, #15]
 80034f0:	3340      	adds	r3, #64	@ 0x40
 80034f2:	009b      	lsls	r3, r3, #2
 80034f4:	4413      	add	r3, r2
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	0c1b      	lsrs	r3, r3, #16
 80034fa:	68ba      	ldr	r2, [r7, #8]
 80034fc:	4413      	add	r3, r2
 80034fe:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003500:	7bfb      	ldrb	r3, [r7, #15]
 8003502:	3301      	adds	r3, #1
 8003504:	73fb      	strb	r3, [r7, #15]
 8003506:	7bfa      	ldrb	r2, [r7, #15]
 8003508:	78fb      	ldrb	r3, [r7, #3]
 800350a:	3b01      	subs	r3, #1
 800350c:	429a      	cmp	r2, r3
 800350e:	d3ec      	bcc.n	80034ea <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003510:	883b      	ldrh	r3, [r7, #0]
 8003512:	0418      	lsls	r0, r3, #16
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6819      	ldr	r1, [r3, #0]
 8003518:	78fb      	ldrb	r3, [r7, #3]
 800351a:	3b01      	subs	r3, #1
 800351c:	68ba      	ldr	r2, [r7, #8]
 800351e:	4302      	orrs	r2, r0
 8003520:	3340      	adds	r3, #64	@ 0x40
 8003522:	009b      	lsls	r3, r3, #2
 8003524:	440b      	add	r3, r1
 8003526:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003528:	2300      	movs	r3, #0
}
 800352a:	4618      	mov	r0, r3
 800352c:	3714      	adds	r7, #20
 800352e:	46bd      	mov	sp, r7
 8003530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003534:	4770      	bx	lr

08003536 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003536:	b480      	push	{r7}
 8003538:	b083      	sub	sp, #12
 800353a:	af00      	add	r7, sp, #0
 800353c:	6078      	str	r0, [r7, #4]
 800353e:	460b      	mov	r3, r1
 8003540:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	887a      	ldrh	r2, [r7, #2]
 8003548:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800354a:	2300      	movs	r3, #0
}
 800354c:	4618      	mov	r0, r3
 800354e:	370c      	adds	r7, #12
 8003550:	46bd      	mov	sp, r7
 8003552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003556:	4770      	bx	lr

08003558 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003558:	b480      	push	{r7}
 800355a:	b083      	sub	sp, #12
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
 8003560:	460b      	mov	r3, r1
 8003562:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003564:	bf00      	nop
 8003566:	370c      	adds	r7, #12
 8003568:	46bd      	mov	sp, r7
 800356a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356e:	4770      	bx	lr

08003570 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b086      	sub	sp, #24
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d101      	bne.n	8003582 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800357e:	2301      	movs	r3, #1
 8003580:	e267      	b.n	8003a52 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f003 0301 	and.w	r3, r3, #1
 800358a:	2b00      	cmp	r3, #0
 800358c:	d075      	beq.n	800367a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800358e:	4b88      	ldr	r3, [pc, #544]	@ (80037b0 <HAL_RCC_OscConfig+0x240>)
 8003590:	689b      	ldr	r3, [r3, #8]
 8003592:	f003 030c 	and.w	r3, r3, #12
 8003596:	2b04      	cmp	r3, #4
 8003598:	d00c      	beq.n	80035b4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800359a:	4b85      	ldr	r3, [pc, #532]	@ (80037b0 <HAL_RCC_OscConfig+0x240>)
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80035a2:	2b08      	cmp	r3, #8
 80035a4:	d112      	bne.n	80035cc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80035a6:	4b82      	ldr	r3, [pc, #520]	@ (80037b0 <HAL_RCC_OscConfig+0x240>)
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80035ae:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80035b2:	d10b      	bne.n	80035cc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035b4:	4b7e      	ldr	r3, [pc, #504]	@ (80037b0 <HAL_RCC_OscConfig+0x240>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d05b      	beq.n	8003678 <HAL_RCC_OscConfig+0x108>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d157      	bne.n	8003678 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80035c8:	2301      	movs	r3, #1
 80035ca:	e242      	b.n	8003a52 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80035d4:	d106      	bne.n	80035e4 <HAL_RCC_OscConfig+0x74>
 80035d6:	4b76      	ldr	r3, [pc, #472]	@ (80037b0 <HAL_RCC_OscConfig+0x240>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a75      	ldr	r2, [pc, #468]	@ (80037b0 <HAL_RCC_OscConfig+0x240>)
 80035dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035e0:	6013      	str	r3, [r2, #0]
 80035e2:	e01d      	b.n	8003620 <HAL_RCC_OscConfig+0xb0>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80035ec:	d10c      	bne.n	8003608 <HAL_RCC_OscConfig+0x98>
 80035ee:	4b70      	ldr	r3, [pc, #448]	@ (80037b0 <HAL_RCC_OscConfig+0x240>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a6f      	ldr	r2, [pc, #444]	@ (80037b0 <HAL_RCC_OscConfig+0x240>)
 80035f4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80035f8:	6013      	str	r3, [r2, #0]
 80035fa:	4b6d      	ldr	r3, [pc, #436]	@ (80037b0 <HAL_RCC_OscConfig+0x240>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a6c      	ldr	r2, [pc, #432]	@ (80037b0 <HAL_RCC_OscConfig+0x240>)
 8003600:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003604:	6013      	str	r3, [r2, #0]
 8003606:	e00b      	b.n	8003620 <HAL_RCC_OscConfig+0xb0>
 8003608:	4b69      	ldr	r3, [pc, #420]	@ (80037b0 <HAL_RCC_OscConfig+0x240>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a68      	ldr	r2, [pc, #416]	@ (80037b0 <HAL_RCC_OscConfig+0x240>)
 800360e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003612:	6013      	str	r3, [r2, #0]
 8003614:	4b66      	ldr	r3, [pc, #408]	@ (80037b0 <HAL_RCC_OscConfig+0x240>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a65      	ldr	r2, [pc, #404]	@ (80037b0 <HAL_RCC_OscConfig+0x240>)
 800361a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800361e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d013      	beq.n	8003650 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003628:	f7fe f8e6 	bl	80017f8 <HAL_GetTick>
 800362c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800362e:	e008      	b.n	8003642 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003630:	f7fe f8e2 	bl	80017f8 <HAL_GetTick>
 8003634:	4602      	mov	r2, r0
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	1ad3      	subs	r3, r2, r3
 800363a:	2b64      	cmp	r3, #100	@ 0x64
 800363c:	d901      	bls.n	8003642 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800363e:	2303      	movs	r3, #3
 8003640:	e207      	b.n	8003a52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003642:	4b5b      	ldr	r3, [pc, #364]	@ (80037b0 <HAL_RCC_OscConfig+0x240>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800364a:	2b00      	cmp	r3, #0
 800364c:	d0f0      	beq.n	8003630 <HAL_RCC_OscConfig+0xc0>
 800364e:	e014      	b.n	800367a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003650:	f7fe f8d2 	bl	80017f8 <HAL_GetTick>
 8003654:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003656:	e008      	b.n	800366a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003658:	f7fe f8ce 	bl	80017f8 <HAL_GetTick>
 800365c:	4602      	mov	r2, r0
 800365e:	693b      	ldr	r3, [r7, #16]
 8003660:	1ad3      	subs	r3, r2, r3
 8003662:	2b64      	cmp	r3, #100	@ 0x64
 8003664:	d901      	bls.n	800366a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003666:	2303      	movs	r3, #3
 8003668:	e1f3      	b.n	8003a52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800366a:	4b51      	ldr	r3, [pc, #324]	@ (80037b0 <HAL_RCC_OscConfig+0x240>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003672:	2b00      	cmp	r3, #0
 8003674:	d1f0      	bne.n	8003658 <HAL_RCC_OscConfig+0xe8>
 8003676:	e000      	b.n	800367a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003678:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f003 0302 	and.w	r3, r3, #2
 8003682:	2b00      	cmp	r3, #0
 8003684:	d063      	beq.n	800374e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003686:	4b4a      	ldr	r3, [pc, #296]	@ (80037b0 <HAL_RCC_OscConfig+0x240>)
 8003688:	689b      	ldr	r3, [r3, #8]
 800368a:	f003 030c 	and.w	r3, r3, #12
 800368e:	2b00      	cmp	r3, #0
 8003690:	d00b      	beq.n	80036aa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003692:	4b47      	ldr	r3, [pc, #284]	@ (80037b0 <HAL_RCC_OscConfig+0x240>)
 8003694:	689b      	ldr	r3, [r3, #8]
 8003696:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800369a:	2b08      	cmp	r3, #8
 800369c:	d11c      	bne.n	80036d8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800369e:	4b44      	ldr	r3, [pc, #272]	@ (80037b0 <HAL_RCC_OscConfig+0x240>)
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d116      	bne.n	80036d8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036aa:	4b41      	ldr	r3, [pc, #260]	@ (80037b0 <HAL_RCC_OscConfig+0x240>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f003 0302 	and.w	r3, r3, #2
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d005      	beq.n	80036c2 <HAL_RCC_OscConfig+0x152>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	68db      	ldr	r3, [r3, #12]
 80036ba:	2b01      	cmp	r3, #1
 80036bc:	d001      	beq.n	80036c2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80036be:	2301      	movs	r3, #1
 80036c0:	e1c7      	b.n	8003a52 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036c2:	4b3b      	ldr	r3, [pc, #236]	@ (80037b0 <HAL_RCC_OscConfig+0x240>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	691b      	ldr	r3, [r3, #16]
 80036ce:	00db      	lsls	r3, r3, #3
 80036d0:	4937      	ldr	r1, [pc, #220]	@ (80037b0 <HAL_RCC_OscConfig+0x240>)
 80036d2:	4313      	orrs	r3, r2
 80036d4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036d6:	e03a      	b.n	800374e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	68db      	ldr	r3, [r3, #12]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d020      	beq.n	8003722 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036e0:	4b34      	ldr	r3, [pc, #208]	@ (80037b4 <HAL_RCC_OscConfig+0x244>)
 80036e2:	2201      	movs	r2, #1
 80036e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036e6:	f7fe f887 	bl	80017f8 <HAL_GetTick>
 80036ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036ec:	e008      	b.n	8003700 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036ee:	f7fe f883 	bl	80017f8 <HAL_GetTick>
 80036f2:	4602      	mov	r2, r0
 80036f4:	693b      	ldr	r3, [r7, #16]
 80036f6:	1ad3      	subs	r3, r2, r3
 80036f8:	2b02      	cmp	r3, #2
 80036fa:	d901      	bls.n	8003700 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80036fc:	2303      	movs	r3, #3
 80036fe:	e1a8      	b.n	8003a52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003700:	4b2b      	ldr	r3, [pc, #172]	@ (80037b0 <HAL_RCC_OscConfig+0x240>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f003 0302 	and.w	r3, r3, #2
 8003708:	2b00      	cmp	r3, #0
 800370a:	d0f0      	beq.n	80036ee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800370c:	4b28      	ldr	r3, [pc, #160]	@ (80037b0 <HAL_RCC_OscConfig+0x240>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	691b      	ldr	r3, [r3, #16]
 8003718:	00db      	lsls	r3, r3, #3
 800371a:	4925      	ldr	r1, [pc, #148]	@ (80037b0 <HAL_RCC_OscConfig+0x240>)
 800371c:	4313      	orrs	r3, r2
 800371e:	600b      	str	r3, [r1, #0]
 8003720:	e015      	b.n	800374e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003722:	4b24      	ldr	r3, [pc, #144]	@ (80037b4 <HAL_RCC_OscConfig+0x244>)
 8003724:	2200      	movs	r2, #0
 8003726:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003728:	f7fe f866 	bl	80017f8 <HAL_GetTick>
 800372c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800372e:	e008      	b.n	8003742 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003730:	f7fe f862 	bl	80017f8 <HAL_GetTick>
 8003734:	4602      	mov	r2, r0
 8003736:	693b      	ldr	r3, [r7, #16]
 8003738:	1ad3      	subs	r3, r2, r3
 800373a:	2b02      	cmp	r3, #2
 800373c:	d901      	bls.n	8003742 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800373e:	2303      	movs	r3, #3
 8003740:	e187      	b.n	8003a52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003742:	4b1b      	ldr	r3, [pc, #108]	@ (80037b0 <HAL_RCC_OscConfig+0x240>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f003 0302 	and.w	r3, r3, #2
 800374a:	2b00      	cmp	r3, #0
 800374c:	d1f0      	bne.n	8003730 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f003 0308 	and.w	r3, r3, #8
 8003756:	2b00      	cmp	r3, #0
 8003758:	d036      	beq.n	80037c8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	695b      	ldr	r3, [r3, #20]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d016      	beq.n	8003790 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003762:	4b15      	ldr	r3, [pc, #84]	@ (80037b8 <HAL_RCC_OscConfig+0x248>)
 8003764:	2201      	movs	r2, #1
 8003766:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003768:	f7fe f846 	bl	80017f8 <HAL_GetTick>
 800376c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800376e:	e008      	b.n	8003782 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003770:	f7fe f842 	bl	80017f8 <HAL_GetTick>
 8003774:	4602      	mov	r2, r0
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	1ad3      	subs	r3, r2, r3
 800377a:	2b02      	cmp	r3, #2
 800377c:	d901      	bls.n	8003782 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800377e:	2303      	movs	r3, #3
 8003780:	e167      	b.n	8003a52 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003782:	4b0b      	ldr	r3, [pc, #44]	@ (80037b0 <HAL_RCC_OscConfig+0x240>)
 8003784:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003786:	f003 0302 	and.w	r3, r3, #2
 800378a:	2b00      	cmp	r3, #0
 800378c:	d0f0      	beq.n	8003770 <HAL_RCC_OscConfig+0x200>
 800378e:	e01b      	b.n	80037c8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003790:	4b09      	ldr	r3, [pc, #36]	@ (80037b8 <HAL_RCC_OscConfig+0x248>)
 8003792:	2200      	movs	r2, #0
 8003794:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003796:	f7fe f82f 	bl	80017f8 <HAL_GetTick>
 800379a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800379c:	e00e      	b.n	80037bc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800379e:	f7fe f82b 	bl	80017f8 <HAL_GetTick>
 80037a2:	4602      	mov	r2, r0
 80037a4:	693b      	ldr	r3, [r7, #16]
 80037a6:	1ad3      	subs	r3, r2, r3
 80037a8:	2b02      	cmp	r3, #2
 80037aa:	d907      	bls.n	80037bc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80037ac:	2303      	movs	r3, #3
 80037ae:	e150      	b.n	8003a52 <HAL_RCC_OscConfig+0x4e2>
 80037b0:	40023800 	.word	0x40023800
 80037b4:	42470000 	.word	0x42470000
 80037b8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037bc:	4b88      	ldr	r3, [pc, #544]	@ (80039e0 <HAL_RCC_OscConfig+0x470>)
 80037be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80037c0:	f003 0302 	and.w	r3, r3, #2
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d1ea      	bne.n	800379e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f003 0304 	and.w	r3, r3, #4
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	f000 8097 	beq.w	8003904 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037d6:	2300      	movs	r3, #0
 80037d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037da:	4b81      	ldr	r3, [pc, #516]	@ (80039e0 <HAL_RCC_OscConfig+0x470>)
 80037dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d10f      	bne.n	8003806 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037e6:	2300      	movs	r3, #0
 80037e8:	60bb      	str	r3, [r7, #8]
 80037ea:	4b7d      	ldr	r3, [pc, #500]	@ (80039e0 <HAL_RCC_OscConfig+0x470>)
 80037ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037ee:	4a7c      	ldr	r2, [pc, #496]	@ (80039e0 <HAL_RCC_OscConfig+0x470>)
 80037f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80037f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80037f6:	4b7a      	ldr	r3, [pc, #488]	@ (80039e0 <HAL_RCC_OscConfig+0x470>)
 80037f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037fe:	60bb      	str	r3, [r7, #8]
 8003800:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003802:	2301      	movs	r3, #1
 8003804:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003806:	4b77      	ldr	r3, [pc, #476]	@ (80039e4 <HAL_RCC_OscConfig+0x474>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800380e:	2b00      	cmp	r3, #0
 8003810:	d118      	bne.n	8003844 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003812:	4b74      	ldr	r3, [pc, #464]	@ (80039e4 <HAL_RCC_OscConfig+0x474>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a73      	ldr	r2, [pc, #460]	@ (80039e4 <HAL_RCC_OscConfig+0x474>)
 8003818:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800381c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800381e:	f7fd ffeb 	bl	80017f8 <HAL_GetTick>
 8003822:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003824:	e008      	b.n	8003838 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003826:	f7fd ffe7 	bl	80017f8 <HAL_GetTick>
 800382a:	4602      	mov	r2, r0
 800382c:	693b      	ldr	r3, [r7, #16]
 800382e:	1ad3      	subs	r3, r2, r3
 8003830:	2b02      	cmp	r3, #2
 8003832:	d901      	bls.n	8003838 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003834:	2303      	movs	r3, #3
 8003836:	e10c      	b.n	8003a52 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003838:	4b6a      	ldr	r3, [pc, #424]	@ (80039e4 <HAL_RCC_OscConfig+0x474>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003840:	2b00      	cmp	r3, #0
 8003842:	d0f0      	beq.n	8003826 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	689b      	ldr	r3, [r3, #8]
 8003848:	2b01      	cmp	r3, #1
 800384a:	d106      	bne.n	800385a <HAL_RCC_OscConfig+0x2ea>
 800384c:	4b64      	ldr	r3, [pc, #400]	@ (80039e0 <HAL_RCC_OscConfig+0x470>)
 800384e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003850:	4a63      	ldr	r2, [pc, #396]	@ (80039e0 <HAL_RCC_OscConfig+0x470>)
 8003852:	f043 0301 	orr.w	r3, r3, #1
 8003856:	6713      	str	r3, [r2, #112]	@ 0x70
 8003858:	e01c      	b.n	8003894 <HAL_RCC_OscConfig+0x324>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	2b05      	cmp	r3, #5
 8003860:	d10c      	bne.n	800387c <HAL_RCC_OscConfig+0x30c>
 8003862:	4b5f      	ldr	r3, [pc, #380]	@ (80039e0 <HAL_RCC_OscConfig+0x470>)
 8003864:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003866:	4a5e      	ldr	r2, [pc, #376]	@ (80039e0 <HAL_RCC_OscConfig+0x470>)
 8003868:	f043 0304 	orr.w	r3, r3, #4
 800386c:	6713      	str	r3, [r2, #112]	@ 0x70
 800386e:	4b5c      	ldr	r3, [pc, #368]	@ (80039e0 <HAL_RCC_OscConfig+0x470>)
 8003870:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003872:	4a5b      	ldr	r2, [pc, #364]	@ (80039e0 <HAL_RCC_OscConfig+0x470>)
 8003874:	f043 0301 	orr.w	r3, r3, #1
 8003878:	6713      	str	r3, [r2, #112]	@ 0x70
 800387a:	e00b      	b.n	8003894 <HAL_RCC_OscConfig+0x324>
 800387c:	4b58      	ldr	r3, [pc, #352]	@ (80039e0 <HAL_RCC_OscConfig+0x470>)
 800387e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003880:	4a57      	ldr	r2, [pc, #348]	@ (80039e0 <HAL_RCC_OscConfig+0x470>)
 8003882:	f023 0301 	bic.w	r3, r3, #1
 8003886:	6713      	str	r3, [r2, #112]	@ 0x70
 8003888:	4b55      	ldr	r3, [pc, #340]	@ (80039e0 <HAL_RCC_OscConfig+0x470>)
 800388a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800388c:	4a54      	ldr	r2, [pc, #336]	@ (80039e0 <HAL_RCC_OscConfig+0x470>)
 800388e:	f023 0304 	bic.w	r3, r3, #4
 8003892:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	689b      	ldr	r3, [r3, #8]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d015      	beq.n	80038c8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800389c:	f7fd ffac 	bl	80017f8 <HAL_GetTick>
 80038a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038a2:	e00a      	b.n	80038ba <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80038a4:	f7fd ffa8 	bl	80017f8 <HAL_GetTick>
 80038a8:	4602      	mov	r2, r0
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	1ad3      	subs	r3, r2, r3
 80038ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d901      	bls.n	80038ba <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80038b6:	2303      	movs	r3, #3
 80038b8:	e0cb      	b.n	8003a52 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038ba:	4b49      	ldr	r3, [pc, #292]	@ (80039e0 <HAL_RCC_OscConfig+0x470>)
 80038bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038be:	f003 0302 	and.w	r3, r3, #2
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d0ee      	beq.n	80038a4 <HAL_RCC_OscConfig+0x334>
 80038c6:	e014      	b.n	80038f2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038c8:	f7fd ff96 	bl	80017f8 <HAL_GetTick>
 80038cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038ce:	e00a      	b.n	80038e6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80038d0:	f7fd ff92 	bl	80017f8 <HAL_GetTick>
 80038d4:	4602      	mov	r2, r0
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	1ad3      	subs	r3, r2, r3
 80038da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038de:	4293      	cmp	r3, r2
 80038e0:	d901      	bls.n	80038e6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80038e2:	2303      	movs	r3, #3
 80038e4:	e0b5      	b.n	8003a52 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038e6:	4b3e      	ldr	r3, [pc, #248]	@ (80039e0 <HAL_RCC_OscConfig+0x470>)
 80038e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038ea:	f003 0302 	and.w	r3, r3, #2
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d1ee      	bne.n	80038d0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80038f2:	7dfb      	ldrb	r3, [r7, #23]
 80038f4:	2b01      	cmp	r3, #1
 80038f6:	d105      	bne.n	8003904 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038f8:	4b39      	ldr	r3, [pc, #228]	@ (80039e0 <HAL_RCC_OscConfig+0x470>)
 80038fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038fc:	4a38      	ldr	r2, [pc, #224]	@ (80039e0 <HAL_RCC_OscConfig+0x470>)
 80038fe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003902:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	699b      	ldr	r3, [r3, #24]
 8003908:	2b00      	cmp	r3, #0
 800390a:	f000 80a1 	beq.w	8003a50 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800390e:	4b34      	ldr	r3, [pc, #208]	@ (80039e0 <HAL_RCC_OscConfig+0x470>)
 8003910:	689b      	ldr	r3, [r3, #8]
 8003912:	f003 030c 	and.w	r3, r3, #12
 8003916:	2b08      	cmp	r3, #8
 8003918:	d05c      	beq.n	80039d4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	699b      	ldr	r3, [r3, #24]
 800391e:	2b02      	cmp	r3, #2
 8003920:	d141      	bne.n	80039a6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003922:	4b31      	ldr	r3, [pc, #196]	@ (80039e8 <HAL_RCC_OscConfig+0x478>)
 8003924:	2200      	movs	r2, #0
 8003926:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003928:	f7fd ff66 	bl	80017f8 <HAL_GetTick>
 800392c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800392e:	e008      	b.n	8003942 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003930:	f7fd ff62 	bl	80017f8 <HAL_GetTick>
 8003934:	4602      	mov	r2, r0
 8003936:	693b      	ldr	r3, [r7, #16]
 8003938:	1ad3      	subs	r3, r2, r3
 800393a:	2b02      	cmp	r3, #2
 800393c:	d901      	bls.n	8003942 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800393e:	2303      	movs	r3, #3
 8003940:	e087      	b.n	8003a52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003942:	4b27      	ldr	r3, [pc, #156]	@ (80039e0 <HAL_RCC_OscConfig+0x470>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800394a:	2b00      	cmp	r3, #0
 800394c:	d1f0      	bne.n	8003930 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	69da      	ldr	r2, [r3, #28]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6a1b      	ldr	r3, [r3, #32]
 8003956:	431a      	orrs	r2, r3
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800395c:	019b      	lsls	r3, r3, #6
 800395e:	431a      	orrs	r2, r3
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003964:	085b      	lsrs	r3, r3, #1
 8003966:	3b01      	subs	r3, #1
 8003968:	041b      	lsls	r3, r3, #16
 800396a:	431a      	orrs	r2, r3
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003970:	061b      	lsls	r3, r3, #24
 8003972:	491b      	ldr	r1, [pc, #108]	@ (80039e0 <HAL_RCC_OscConfig+0x470>)
 8003974:	4313      	orrs	r3, r2
 8003976:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003978:	4b1b      	ldr	r3, [pc, #108]	@ (80039e8 <HAL_RCC_OscConfig+0x478>)
 800397a:	2201      	movs	r2, #1
 800397c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800397e:	f7fd ff3b 	bl	80017f8 <HAL_GetTick>
 8003982:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003984:	e008      	b.n	8003998 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003986:	f7fd ff37 	bl	80017f8 <HAL_GetTick>
 800398a:	4602      	mov	r2, r0
 800398c:	693b      	ldr	r3, [r7, #16]
 800398e:	1ad3      	subs	r3, r2, r3
 8003990:	2b02      	cmp	r3, #2
 8003992:	d901      	bls.n	8003998 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003994:	2303      	movs	r3, #3
 8003996:	e05c      	b.n	8003a52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003998:	4b11      	ldr	r3, [pc, #68]	@ (80039e0 <HAL_RCC_OscConfig+0x470>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d0f0      	beq.n	8003986 <HAL_RCC_OscConfig+0x416>
 80039a4:	e054      	b.n	8003a50 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039a6:	4b10      	ldr	r3, [pc, #64]	@ (80039e8 <HAL_RCC_OscConfig+0x478>)
 80039a8:	2200      	movs	r2, #0
 80039aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039ac:	f7fd ff24 	bl	80017f8 <HAL_GetTick>
 80039b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039b2:	e008      	b.n	80039c6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039b4:	f7fd ff20 	bl	80017f8 <HAL_GetTick>
 80039b8:	4602      	mov	r2, r0
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	1ad3      	subs	r3, r2, r3
 80039be:	2b02      	cmp	r3, #2
 80039c0:	d901      	bls.n	80039c6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80039c2:	2303      	movs	r3, #3
 80039c4:	e045      	b.n	8003a52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039c6:	4b06      	ldr	r3, [pc, #24]	@ (80039e0 <HAL_RCC_OscConfig+0x470>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d1f0      	bne.n	80039b4 <HAL_RCC_OscConfig+0x444>
 80039d2:	e03d      	b.n	8003a50 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	699b      	ldr	r3, [r3, #24]
 80039d8:	2b01      	cmp	r3, #1
 80039da:	d107      	bne.n	80039ec <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80039dc:	2301      	movs	r3, #1
 80039de:	e038      	b.n	8003a52 <HAL_RCC_OscConfig+0x4e2>
 80039e0:	40023800 	.word	0x40023800
 80039e4:	40007000 	.word	0x40007000
 80039e8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80039ec:	4b1b      	ldr	r3, [pc, #108]	@ (8003a5c <HAL_RCC_OscConfig+0x4ec>)
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	699b      	ldr	r3, [r3, #24]
 80039f6:	2b01      	cmp	r3, #1
 80039f8:	d028      	beq.n	8003a4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a04:	429a      	cmp	r2, r3
 8003a06:	d121      	bne.n	8003a4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a12:	429a      	cmp	r2, r3
 8003a14:	d11a      	bne.n	8003a4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a16:	68fa      	ldr	r2, [r7, #12]
 8003a18:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003a1c:	4013      	ands	r3, r2
 8003a1e:	687a      	ldr	r2, [r7, #4]
 8003a20:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003a22:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d111      	bne.n	8003a4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a32:	085b      	lsrs	r3, r3, #1
 8003a34:	3b01      	subs	r3, #1
 8003a36:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a38:	429a      	cmp	r2, r3
 8003a3a:	d107      	bne.n	8003a4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a46:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a48:	429a      	cmp	r2, r3
 8003a4a:	d001      	beq.n	8003a50 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	e000      	b.n	8003a52 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003a50:	2300      	movs	r3, #0
}
 8003a52:	4618      	mov	r0, r3
 8003a54:	3718      	adds	r7, #24
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}
 8003a5a:	bf00      	nop
 8003a5c:	40023800 	.word	0x40023800

08003a60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b084      	sub	sp, #16
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
 8003a68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d101      	bne.n	8003a74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a70:	2301      	movs	r3, #1
 8003a72:	e0cc      	b.n	8003c0e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a74:	4b68      	ldr	r3, [pc, #416]	@ (8003c18 <HAL_RCC_ClockConfig+0x1b8>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f003 030f 	and.w	r3, r3, #15
 8003a7c:	683a      	ldr	r2, [r7, #0]
 8003a7e:	429a      	cmp	r2, r3
 8003a80:	d90c      	bls.n	8003a9c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a82:	4b65      	ldr	r3, [pc, #404]	@ (8003c18 <HAL_RCC_ClockConfig+0x1b8>)
 8003a84:	683a      	ldr	r2, [r7, #0]
 8003a86:	b2d2      	uxtb	r2, r2
 8003a88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a8a:	4b63      	ldr	r3, [pc, #396]	@ (8003c18 <HAL_RCC_ClockConfig+0x1b8>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f003 030f 	and.w	r3, r3, #15
 8003a92:	683a      	ldr	r2, [r7, #0]
 8003a94:	429a      	cmp	r2, r3
 8003a96:	d001      	beq.n	8003a9c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	e0b8      	b.n	8003c0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f003 0302 	and.w	r3, r3, #2
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d020      	beq.n	8003aea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f003 0304 	and.w	r3, r3, #4
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d005      	beq.n	8003ac0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ab4:	4b59      	ldr	r3, [pc, #356]	@ (8003c1c <HAL_RCC_ClockConfig+0x1bc>)
 8003ab6:	689b      	ldr	r3, [r3, #8]
 8003ab8:	4a58      	ldr	r2, [pc, #352]	@ (8003c1c <HAL_RCC_ClockConfig+0x1bc>)
 8003aba:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003abe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f003 0308 	and.w	r3, r3, #8
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d005      	beq.n	8003ad8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003acc:	4b53      	ldr	r3, [pc, #332]	@ (8003c1c <HAL_RCC_ClockConfig+0x1bc>)
 8003ace:	689b      	ldr	r3, [r3, #8]
 8003ad0:	4a52      	ldr	r2, [pc, #328]	@ (8003c1c <HAL_RCC_ClockConfig+0x1bc>)
 8003ad2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003ad6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ad8:	4b50      	ldr	r3, [pc, #320]	@ (8003c1c <HAL_RCC_ClockConfig+0x1bc>)
 8003ada:	689b      	ldr	r3, [r3, #8]
 8003adc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	689b      	ldr	r3, [r3, #8]
 8003ae4:	494d      	ldr	r1, [pc, #308]	@ (8003c1c <HAL_RCC_ClockConfig+0x1bc>)
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f003 0301 	and.w	r3, r3, #1
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d044      	beq.n	8003b80 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	2b01      	cmp	r3, #1
 8003afc:	d107      	bne.n	8003b0e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003afe:	4b47      	ldr	r3, [pc, #284]	@ (8003c1c <HAL_RCC_ClockConfig+0x1bc>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d119      	bne.n	8003b3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	e07f      	b.n	8003c0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	2b02      	cmp	r3, #2
 8003b14:	d003      	beq.n	8003b1e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b1a:	2b03      	cmp	r3, #3
 8003b1c:	d107      	bne.n	8003b2e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b1e:	4b3f      	ldr	r3, [pc, #252]	@ (8003c1c <HAL_RCC_ClockConfig+0x1bc>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d109      	bne.n	8003b3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	e06f      	b.n	8003c0e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b2e:	4b3b      	ldr	r3, [pc, #236]	@ (8003c1c <HAL_RCC_ClockConfig+0x1bc>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f003 0302 	and.w	r3, r3, #2
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d101      	bne.n	8003b3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	e067      	b.n	8003c0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b3e:	4b37      	ldr	r3, [pc, #220]	@ (8003c1c <HAL_RCC_ClockConfig+0x1bc>)
 8003b40:	689b      	ldr	r3, [r3, #8]
 8003b42:	f023 0203 	bic.w	r2, r3, #3
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	4934      	ldr	r1, [pc, #208]	@ (8003c1c <HAL_RCC_ClockConfig+0x1bc>)
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b50:	f7fd fe52 	bl	80017f8 <HAL_GetTick>
 8003b54:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b56:	e00a      	b.n	8003b6e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b58:	f7fd fe4e 	bl	80017f8 <HAL_GetTick>
 8003b5c:	4602      	mov	r2, r0
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	1ad3      	subs	r3, r2, r3
 8003b62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d901      	bls.n	8003b6e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003b6a:	2303      	movs	r3, #3
 8003b6c:	e04f      	b.n	8003c0e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b6e:	4b2b      	ldr	r3, [pc, #172]	@ (8003c1c <HAL_RCC_ClockConfig+0x1bc>)
 8003b70:	689b      	ldr	r3, [r3, #8]
 8003b72:	f003 020c 	and.w	r2, r3, #12
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	009b      	lsls	r3, r3, #2
 8003b7c:	429a      	cmp	r2, r3
 8003b7e:	d1eb      	bne.n	8003b58 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b80:	4b25      	ldr	r3, [pc, #148]	@ (8003c18 <HAL_RCC_ClockConfig+0x1b8>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f003 030f 	and.w	r3, r3, #15
 8003b88:	683a      	ldr	r2, [r7, #0]
 8003b8a:	429a      	cmp	r2, r3
 8003b8c:	d20c      	bcs.n	8003ba8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b8e:	4b22      	ldr	r3, [pc, #136]	@ (8003c18 <HAL_RCC_ClockConfig+0x1b8>)
 8003b90:	683a      	ldr	r2, [r7, #0]
 8003b92:	b2d2      	uxtb	r2, r2
 8003b94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b96:	4b20      	ldr	r3, [pc, #128]	@ (8003c18 <HAL_RCC_ClockConfig+0x1b8>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f003 030f 	and.w	r3, r3, #15
 8003b9e:	683a      	ldr	r2, [r7, #0]
 8003ba0:	429a      	cmp	r2, r3
 8003ba2:	d001      	beq.n	8003ba8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	e032      	b.n	8003c0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f003 0304 	and.w	r3, r3, #4
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d008      	beq.n	8003bc6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003bb4:	4b19      	ldr	r3, [pc, #100]	@ (8003c1c <HAL_RCC_ClockConfig+0x1bc>)
 8003bb6:	689b      	ldr	r3, [r3, #8]
 8003bb8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	68db      	ldr	r3, [r3, #12]
 8003bc0:	4916      	ldr	r1, [pc, #88]	@ (8003c1c <HAL_RCC_ClockConfig+0x1bc>)
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f003 0308 	and.w	r3, r3, #8
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d009      	beq.n	8003be6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003bd2:	4b12      	ldr	r3, [pc, #72]	@ (8003c1c <HAL_RCC_ClockConfig+0x1bc>)
 8003bd4:	689b      	ldr	r3, [r3, #8]
 8003bd6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	691b      	ldr	r3, [r3, #16]
 8003bde:	00db      	lsls	r3, r3, #3
 8003be0:	490e      	ldr	r1, [pc, #56]	@ (8003c1c <HAL_RCC_ClockConfig+0x1bc>)
 8003be2:	4313      	orrs	r3, r2
 8003be4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003be6:	f000 f889 	bl	8003cfc <HAL_RCC_GetSysClockFreq>
 8003bea:	4602      	mov	r2, r0
 8003bec:	4b0b      	ldr	r3, [pc, #44]	@ (8003c1c <HAL_RCC_ClockConfig+0x1bc>)
 8003bee:	689b      	ldr	r3, [r3, #8]
 8003bf0:	091b      	lsrs	r3, r3, #4
 8003bf2:	f003 030f 	and.w	r3, r3, #15
 8003bf6:	490a      	ldr	r1, [pc, #40]	@ (8003c20 <HAL_RCC_ClockConfig+0x1c0>)
 8003bf8:	5ccb      	ldrb	r3, [r1, r3]
 8003bfa:	fa22 f303 	lsr.w	r3, r2, r3
 8003bfe:	4a09      	ldr	r2, [pc, #36]	@ (8003c24 <HAL_RCC_ClockConfig+0x1c4>)
 8003c00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003c02:	4b09      	ldr	r3, [pc, #36]	@ (8003c28 <HAL_RCC_ClockConfig+0x1c8>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4618      	mov	r0, r3
 8003c08:	f7fd fdb2 	bl	8001770 <HAL_InitTick>

  return HAL_OK;
 8003c0c:	2300      	movs	r3, #0
}
 8003c0e:	4618      	mov	r0, r3
 8003c10:	3710      	adds	r7, #16
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}
 8003c16:	bf00      	nop
 8003c18:	40023c00 	.word	0x40023c00
 8003c1c:	40023800 	.word	0x40023800
 8003c20:	0800b014 	.word	0x0800b014
 8003c24:	20000000 	.word	0x20000000
 8003c28:	20000004 	.word	0x20000004

08003c2c <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b08c      	sub	sp, #48	@ 0x30
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	60f8      	str	r0, [r7, #12]
 8003c34:	60b9      	str	r1, [r7, #8]
 8003c36:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d129      	bne.n	8003c92 <HAL_RCC_MCOConfig+0x66>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 8003c3e:	2300      	movs	r3, #0
 8003c40:	61bb      	str	r3, [r7, #24]
 8003c42:	4b2b      	ldr	r3, [pc, #172]	@ (8003cf0 <HAL_RCC_MCOConfig+0xc4>)
 8003c44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c46:	4a2a      	ldr	r2, [pc, #168]	@ (8003cf0 <HAL_RCC_MCOConfig+0xc4>)
 8003c48:	f043 0301 	orr.w	r3, r3, #1
 8003c4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8003c4e:	4b28      	ldr	r3, [pc, #160]	@ (8003cf0 <HAL_RCC_MCOConfig+0xc4>)
 8003c50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c52:	f003 0301 	and.w	r3, r3, #1
 8003c56:	61bb      	str	r3, [r7, #24]
 8003c58:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8003c5a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003c5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c60:	2302      	movs	r3, #2
 8003c62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c64:	2303      	movs	r3, #3
 8003c66:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c68:	2300      	movs	r3, #0
 8003c6a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8003c70:	f107 031c 	add.w	r3, r7, #28
 8003c74:	4619      	mov	r1, r3
 8003c76:	481f      	ldr	r0, [pc, #124]	@ (8003cf4 <HAL_RCC_MCOConfig+0xc8>)
 8003c78:	f7fe f832 	bl	8001ce0 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8003c7c:	4b1c      	ldr	r3, [pc, #112]	@ (8003cf0 <HAL_RCC_MCOConfig+0xc4>)
 8003c7e:	689b      	ldr	r3, [r3, #8]
 8003c80:	f023 62ec 	bic.w	r2, r3, #123731968	@ 0x7600000
 8003c84:	68b9      	ldr	r1, [r7, #8]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	430b      	orrs	r3, r1
 8003c8a:	4919      	ldr	r1, [pc, #100]	@ (8003cf0 <HAL_RCC_MCOConfig+0xc4>)
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	608b      	str	r3, [r1, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 8003c90:	e029      	b.n	8003ce6 <HAL_RCC_MCOConfig+0xba>
    __MCO2_CLK_ENABLE();
 8003c92:	2300      	movs	r3, #0
 8003c94:	617b      	str	r3, [r7, #20]
 8003c96:	4b16      	ldr	r3, [pc, #88]	@ (8003cf0 <HAL_RCC_MCOConfig+0xc4>)
 8003c98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c9a:	4a15      	ldr	r2, [pc, #84]	@ (8003cf0 <HAL_RCC_MCOConfig+0xc4>)
 8003c9c:	f043 0304 	orr.w	r3, r3, #4
 8003ca0:	6313      	str	r3, [r2, #48]	@ 0x30
 8003ca2:	4b13      	ldr	r3, [pc, #76]	@ (8003cf0 <HAL_RCC_MCOConfig+0xc4>)
 8003ca4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ca6:	f003 0304 	and.w	r3, r3, #4
 8003caa:	617b      	str	r3, [r7, #20]
 8003cac:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8003cae:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003cb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cb4:	2302      	movs	r3, #2
 8003cb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003cb8:	2303      	movs	r3, #3
 8003cba:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8003cc4:	f107 031c 	add.w	r3, r7, #28
 8003cc8:	4619      	mov	r1, r3
 8003cca:	480b      	ldr	r0, [pc, #44]	@ (8003cf8 <HAL_RCC_MCOConfig+0xcc>)
 8003ccc:	f7fe f808 	bl	8001ce0 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 8003cd0:	4b07      	ldr	r3, [pc, #28]	@ (8003cf0 <HAL_RCC_MCOConfig+0xc4>)
 8003cd2:	689b      	ldr	r3, [r3, #8]
 8003cd4:	f023 4278 	bic.w	r2, r3, #4160749568	@ 0xf8000000
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	00d9      	lsls	r1, r3, #3
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	430b      	orrs	r3, r1
 8003ce0:	4903      	ldr	r1, [pc, #12]	@ (8003cf0 <HAL_RCC_MCOConfig+0xc4>)
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	608b      	str	r3, [r1, #8]
}
 8003ce6:	bf00      	nop
 8003ce8:	3730      	adds	r7, #48	@ 0x30
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd80      	pop	{r7, pc}
 8003cee:	bf00      	nop
 8003cf0:	40023800 	.word	0x40023800
 8003cf4:	40020000 	.word	0x40020000
 8003cf8:	40020800 	.word	0x40020800

08003cfc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003cfc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d00:	b094      	sub	sp, #80	@ 0x50
 8003d02:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003d04:	2300      	movs	r3, #0
 8003d06:	647b      	str	r3, [r7, #68]	@ 0x44
 8003d08:	2300      	movs	r3, #0
 8003d0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003d10:	2300      	movs	r3, #0
 8003d12:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003d14:	4b79      	ldr	r3, [pc, #484]	@ (8003efc <HAL_RCC_GetSysClockFreq+0x200>)
 8003d16:	689b      	ldr	r3, [r3, #8]
 8003d18:	f003 030c 	and.w	r3, r3, #12
 8003d1c:	2b08      	cmp	r3, #8
 8003d1e:	d00d      	beq.n	8003d3c <HAL_RCC_GetSysClockFreq+0x40>
 8003d20:	2b08      	cmp	r3, #8
 8003d22:	f200 80e1 	bhi.w	8003ee8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d002      	beq.n	8003d30 <HAL_RCC_GetSysClockFreq+0x34>
 8003d2a:	2b04      	cmp	r3, #4
 8003d2c:	d003      	beq.n	8003d36 <HAL_RCC_GetSysClockFreq+0x3a>
 8003d2e:	e0db      	b.n	8003ee8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003d30:	4b73      	ldr	r3, [pc, #460]	@ (8003f00 <HAL_RCC_GetSysClockFreq+0x204>)
 8003d32:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8003d34:	e0db      	b.n	8003eee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003d36:	4b73      	ldr	r3, [pc, #460]	@ (8003f04 <HAL_RCC_GetSysClockFreq+0x208>)
 8003d38:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003d3a:	e0d8      	b.n	8003eee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003d3c:	4b6f      	ldr	r3, [pc, #444]	@ (8003efc <HAL_RCC_GetSysClockFreq+0x200>)
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003d44:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003d46:	4b6d      	ldr	r3, [pc, #436]	@ (8003efc <HAL_RCC_GetSysClockFreq+0x200>)
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d063      	beq.n	8003e1a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d52:	4b6a      	ldr	r3, [pc, #424]	@ (8003efc <HAL_RCC_GetSysClockFreq+0x200>)
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	099b      	lsrs	r3, r3, #6
 8003d58:	2200      	movs	r2, #0
 8003d5a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003d5c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003d5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d64:	633b      	str	r3, [r7, #48]	@ 0x30
 8003d66:	2300      	movs	r3, #0
 8003d68:	637b      	str	r3, [r7, #52]	@ 0x34
 8003d6a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003d6e:	4622      	mov	r2, r4
 8003d70:	462b      	mov	r3, r5
 8003d72:	f04f 0000 	mov.w	r0, #0
 8003d76:	f04f 0100 	mov.w	r1, #0
 8003d7a:	0159      	lsls	r1, r3, #5
 8003d7c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d80:	0150      	lsls	r0, r2, #5
 8003d82:	4602      	mov	r2, r0
 8003d84:	460b      	mov	r3, r1
 8003d86:	4621      	mov	r1, r4
 8003d88:	1a51      	subs	r1, r2, r1
 8003d8a:	6139      	str	r1, [r7, #16]
 8003d8c:	4629      	mov	r1, r5
 8003d8e:	eb63 0301 	sbc.w	r3, r3, r1
 8003d92:	617b      	str	r3, [r7, #20]
 8003d94:	f04f 0200 	mov.w	r2, #0
 8003d98:	f04f 0300 	mov.w	r3, #0
 8003d9c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003da0:	4659      	mov	r1, fp
 8003da2:	018b      	lsls	r3, r1, #6
 8003da4:	4651      	mov	r1, sl
 8003da6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003daa:	4651      	mov	r1, sl
 8003dac:	018a      	lsls	r2, r1, #6
 8003dae:	4651      	mov	r1, sl
 8003db0:	ebb2 0801 	subs.w	r8, r2, r1
 8003db4:	4659      	mov	r1, fp
 8003db6:	eb63 0901 	sbc.w	r9, r3, r1
 8003dba:	f04f 0200 	mov.w	r2, #0
 8003dbe:	f04f 0300 	mov.w	r3, #0
 8003dc2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003dc6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003dca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003dce:	4690      	mov	r8, r2
 8003dd0:	4699      	mov	r9, r3
 8003dd2:	4623      	mov	r3, r4
 8003dd4:	eb18 0303 	adds.w	r3, r8, r3
 8003dd8:	60bb      	str	r3, [r7, #8]
 8003dda:	462b      	mov	r3, r5
 8003ddc:	eb49 0303 	adc.w	r3, r9, r3
 8003de0:	60fb      	str	r3, [r7, #12]
 8003de2:	f04f 0200 	mov.w	r2, #0
 8003de6:	f04f 0300 	mov.w	r3, #0
 8003dea:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003dee:	4629      	mov	r1, r5
 8003df0:	024b      	lsls	r3, r1, #9
 8003df2:	4621      	mov	r1, r4
 8003df4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003df8:	4621      	mov	r1, r4
 8003dfa:	024a      	lsls	r2, r1, #9
 8003dfc:	4610      	mov	r0, r2
 8003dfe:	4619      	mov	r1, r3
 8003e00:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003e02:	2200      	movs	r2, #0
 8003e04:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003e06:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003e08:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003e0c:	f7fc fa48 	bl	80002a0 <__aeabi_uldivmod>
 8003e10:	4602      	mov	r2, r0
 8003e12:	460b      	mov	r3, r1
 8003e14:	4613      	mov	r3, r2
 8003e16:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003e18:	e058      	b.n	8003ecc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e1a:	4b38      	ldr	r3, [pc, #224]	@ (8003efc <HAL_RCC_GetSysClockFreq+0x200>)
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	099b      	lsrs	r3, r3, #6
 8003e20:	2200      	movs	r2, #0
 8003e22:	4618      	mov	r0, r3
 8003e24:	4611      	mov	r1, r2
 8003e26:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003e2a:	623b      	str	r3, [r7, #32]
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e30:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003e34:	4642      	mov	r2, r8
 8003e36:	464b      	mov	r3, r9
 8003e38:	f04f 0000 	mov.w	r0, #0
 8003e3c:	f04f 0100 	mov.w	r1, #0
 8003e40:	0159      	lsls	r1, r3, #5
 8003e42:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e46:	0150      	lsls	r0, r2, #5
 8003e48:	4602      	mov	r2, r0
 8003e4a:	460b      	mov	r3, r1
 8003e4c:	4641      	mov	r1, r8
 8003e4e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003e52:	4649      	mov	r1, r9
 8003e54:	eb63 0b01 	sbc.w	fp, r3, r1
 8003e58:	f04f 0200 	mov.w	r2, #0
 8003e5c:	f04f 0300 	mov.w	r3, #0
 8003e60:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003e64:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003e68:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003e6c:	ebb2 040a 	subs.w	r4, r2, sl
 8003e70:	eb63 050b 	sbc.w	r5, r3, fp
 8003e74:	f04f 0200 	mov.w	r2, #0
 8003e78:	f04f 0300 	mov.w	r3, #0
 8003e7c:	00eb      	lsls	r3, r5, #3
 8003e7e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003e82:	00e2      	lsls	r2, r4, #3
 8003e84:	4614      	mov	r4, r2
 8003e86:	461d      	mov	r5, r3
 8003e88:	4643      	mov	r3, r8
 8003e8a:	18e3      	adds	r3, r4, r3
 8003e8c:	603b      	str	r3, [r7, #0]
 8003e8e:	464b      	mov	r3, r9
 8003e90:	eb45 0303 	adc.w	r3, r5, r3
 8003e94:	607b      	str	r3, [r7, #4]
 8003e96:	f04f 0200 	mov.w	r2, #0
 8003e9a:	f04f 0300 	mov.w	r3, #0
 8003e9e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003ea2:	4629      	mov	r1, r5
 8003ea4:	028b      	lsls	r3, r1, #10
 8003ea6:	4621      	mov	r1, r4
 8003ea8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003eac:	4621      	mov	r1, r4
 8003eae:	028a      	lsls	r2, r1, #10
 8003eb0:	4610      	mov	r0, r2
 8003eb2:	4619      	mov	r1, r3
 8003eb4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	61bb      	str	r3, [r7, #24]
 8003eba:	61fa      	str	r2, [r7, #28]
 8003ebc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003ec0:	f7fc f9ee 	bl	80002a0 <__aeabi_uldivmod>
 8003ec4:	4602      	mov	r2, r0
 8003ec6:	460b      	mov	r3, r1
 8003ec8:	4613      	mov	r3, r2
 8003eca:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003ecc:	4b0b      	ldr	r3, [pc, #44]	@ (8003efc <HAL_RCC_GetSysClockFreq+0x200>)
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	0c1b      	lsrs	r3, r3, #16
 8003ed2:	f003 0303 	and.w	r3, r3, #3
 8003ed6:	3301      	adds	r3, #1
 8003ed8:	005b      	lsls	r3, r3, #1
 8003eda:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8003edc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003ede:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003ee0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ee4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003ee6:	e002      	b.n	8003eee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003ee8:	4b05      	ldr	r3, [pc, #20]	@ (8003f00 <HAL_RCC_GetSysClockFreq+0x204>)
 8003eea:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003eec:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003eee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	3750      	adds	r7, #80	@ 0x50
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003efa:	bf00      	nop
 8003efc:	40023800 	.word	0x40023800
 8003f00:	00f42400 	.word	0x00f42400
 8003f04:	007a1200 	.word	0x007a1200

08003f08 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f08:	b480      	push	{r7}
 8003f0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f0c:	4b03      	ldr	r3, [pc, #12]	@ (8003f1c <HAL_RCC_GetHCLKFreq+0x14>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
}
 8003f10:	4618      	mov	r0, r3
 8003f12:	46bd      	mov	sp, r7
 8003f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f18:	4770      	bx	lr
 8003f1a:	bf00      	nop
 8003f1c:	20000000 	.word	0x20000000

08003f20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003f24:	f7ff fff0 	bl	8003f08 <HAL_RCC_GetHCLKFreq>
 8003f28:	4602      	mov	r2, r0
 8003f2a:	4b05      	ldr	r3, [pc, #20]	@ (8003f40 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003f2c:	689b      	ldr	r3, [r3, #8]
 8003f2e:	0a9b      	lsrs	r3, r3, #10
 8003f30:	f003 0307 	and.w	r3, r3, #7
 8003f34:	4903      	ldr	r1, [pc, #12]	@ (8003f44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f36:	5ccb      	ldrb	r3, [r1, r3]
 8003f38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	bd80      	pop	{r7, pc}
 8003f40:	40023800 	.word	0x40023800
 8003f44:	0800b024 	.word	0x0800b024

08003f48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003f4c:	f7ff ffdc 	bl	8003f08 <HAL_RCC_GetHCLKFreq>
 8003f50:	4602      	mov	r2, r0
 8003f52:	4b05      	ldr	r3, [pc, #20]	@ (8003f68 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003f54:	689b      	ldr	r3, [r3, #8]
 8003f56:	0b5b      	lsrs	r3, r3, #13
 8003f58:	f003 0307 	and.w	r3, r3, #7
 8003f5c:	4903      	ldr	r1, [pc, #12]	@ (8003f6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f5e:	5ccb      	ldrb	r3, [r1, r3]
 8003f60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f64:	4618      	mov	r0, r3
 8003f66:	bd80      	pop	{r7, pc}
 8003f68:	40023800 	.word	0x40023800
 8003f6c:	0800b024 	.word	0x0800b024

08003f70 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b082      	sub	sp, #8
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d101      	bne.n	8003f82 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	e041      	b.n	8004006 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f88:	b2db      	uxtb	r3, r3
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d106      	bne.n	8003f9c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2200      	movs	r2, #0
 8003f92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003f96:	6878      	ldr	r0, [r7, #4]
 8003f98:	f7fd f84c 	bl	8001034 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2202      	movs	r2, #2
 8003fa0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681a      	ldr	r2, [r3, #0]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	3304      	adds	r3, #4
 8003fac:	4619      	mov	r1, r3
 8003fae:	4610      	mov	r0, r2
 8003fb0:	f000 fa7e 	bl	80044b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2201      	movs	r2, #1
 8003fb8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2201      	movs	r2, #1
 8003fc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2201      	movs	r2, #1
 8003fc8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2201      	movs	r2, #1
 8003fd0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2201      	movs	r2, #1
 8003fd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2201      	movs	r2, #1
 8003fe0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2201      	movs	r2, #1
 8003fe8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2201      	movs	r2, #1
 8003ff0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2201      	movs	r2, #1
 8003ff8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2201      	movs	r2, #1
 8004000:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004004:	2300      	movs	r3, #0
}
 8004006:	4618      	mov	r0, r3
 8004008:	3708      	adds	r7, #8
 800400a:	46bd      	mov	sp, r7
 800400c:	bd80      	pop	{r7, pc}
	...

08004010 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004010:	b480      	push	{r7}
 8004012:	b085      	sub	sp, #20
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800401e:	b2db      	uxtb	r3, r3
 8004020:	2b01      	cmp	r3, #1
 8004022:	d001      	beq.n	8004028 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004024:	2301      	movs	r3, #1
 8004026:	e04e      	b.n	80040c6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2202      	movs	r2, #2
 800402c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	68da      	ldr	r2, [r3, #12]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f042 0201 	orr.w	r2, r2, #1
 800403e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a23      	ldr	r2, [pc, #140]	@ (80040d4 <HAL_TIM_Base_Start_IT+0xc4>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d022      	beq.n	8004090 <HAL_TIM_Base_Start_IT+0x80>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004052:	d01d      	beq.n	8004090 <HAL_TIM_Base_Start_IT+0x80>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a1f      	ldr	r2, [pc, #124]	@ (80040d8 <HAL_TIM_Base_Start_IT+0xc8>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d018      	beq.n	8004090 <HAL_TIM_Base_Start_IT+0x80>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4a1e      	ldr	r2, [pc, #120]	@ (80040dc <HAL_TIM_Base_Start_IT+0xcc>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d013      	beq.n	8004090 <HAL_TIM_Base_Start_IT+0x80>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a1c      	ldr	r2, [pc, #112]	@ (80040e0 <HAL_TIM_Base_Start_IT+0xd0>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d00e      	beq.n	8004090 <HAL_TIM_Base_Start_IT+0x80>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4a1b      	ldr	r2, [pc, #108]	@ (80040e4 <HAL_TIM_Base_Start_IT+0xd4>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d009      	beq.n	8004090 <HAL_TIM_Base_Start_IT+0x80>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4a19      	ldr	r2, [pc, #100]	@ (80040e8 <HAL_TIM_Base_Start_IT+0xd8>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d004      	beq.n	8004090 <HAL_TIM_Base_Start_IT+0x80>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4a18      	ldr	r2, [pc, #96]	@ (80040ec <HAL_TIM_Base_Start_IT+0xdc>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d111      	bne.n	80040b4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	689b      	ldr	r3, [r3, #8]
 8004096:	f003 0307 	and.w	r3, r3, #7
 800409a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	2b06      	cmp	r3, #6
 80040a0:	d010      	beq.n	80040c4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	681a      	ldr	r2, [r3, #0]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f042 0201 	orr.w	r2, r2, #1
 80040b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040b2:	e007      	b.n	80040c4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	681a      	ldr	r2, [r3, #0]
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f042 0201 	orr.w	r2, r2, #1
 80040c2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80040c4:	2300      	movs	r3, #0
}
 80040c6:	4618      	mov	r0, r3
 80040c8:	3714      	adds	r7, #20
 80040ca:	46bd      	mov	sp, r7
 80040cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d0:	4770      	bx	lr
 80040d2:	bf00      	nop
 80040d4:	40010000 	.word	0x40010000
 80040d8:	40000400 	.word	0x40000400
 80040dc:	40000800 	.word	0x40000800
 80040e0:	40000c00 	.word	0x40000c00
 80040e4:	40010400 	.word	0x40010400
 80040e8:	40014000 	.word	0x40014000
 80040ec:	40001800 	.word	0x40001800

080040f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b084      	sub	sp, #16
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	68db      	ldr	r3, [r3, #12]
 80040fe:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	691b      	ldr	r3, [r3, #16]
 8004106:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004108:	68bb      	ldr	r3, [r7, #8]
 800410a:	f003 0302 	and.w	r3, r3, #2
 800410e:	2b00      	cmp	r3, #0
 8004110:	d020      	beq.n	8004154 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	f003 0302 	and.w	r3, r3, #2
 8004118:	2b00      	cmp	r3, #0
 800411a:	d01b      	beq.n	8004154 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f06f 0202 	mvn.w	r2, #2
 8004124:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2201      	movs	r2, #1
 800412a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	699b      	ldr	r3, [r3, #24]
 8004132:	f003 0303 	and.w	r3, r3, #3
 8004136:	2b00      	cmp	r3, #0
 8004138:	d003      	beq.n	8004142 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800413a:	6878      	ldr	r0, [r7, #4]
 800413c:	f000 f999 	bl	8004472 <HAL_TIM_IC_CaptureCallback>
 8004140:	e005      	b.n	800414e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004142:	6878      	ldr	r0, [r7, #4]
 8004144:	f000 f98b 	bl	800445e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004148:	6878      	ldr	r0, [r7, #4]
 800414a:	f000 f99c 	bl	8004486 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2200      	movs	r2, #0
 8004152:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	f003 0304 	and.w	r3, r3, #4
 800415a:	2b00      	cmp	r3, #0
 800415c:	d020      	beq.n	80041a0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	f003 0304 	and.w	r3, r3, #4
 8004164:	2b00      	cmp	r3, #0
 8004166:	d01b      	beq.n	80041a0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f06f 0204 	mvn.w	r2, #4
 8004170:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2202      	movs	r2, #2
 8004176:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	699b      	ldr	r3, [r3, #24]
 800417e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004182:	2b00      	cmp	r3, #0
 8004184:	d003      	beq.n	800418e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004186:	6878      	ldr	r0, [r7, #4]
 8004188:	f000 f973 	bl	8004472 <HAL_TIM_IC_CaptureCallback>
 800418c:	e005      	b.n	800419a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800418e:	6878      	ldr	r0, [r7, #4]
 8004190:	f000 f965 	bl	800445e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004194:	6878      	ldr	r0, [r7, #4]
 8004196:	f000 f976 	bl	8004486 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2200      	movs	r2, #0
 800419e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80041a0:	68bb      	ldr	r3, [r7, #8]
 80041a2:	f003 0308 	and.w	r3, r3, #8
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d020      	beq.n	80041ec <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	f003 0308 	and.w	r3, r3, #8
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d01b      	beq.n	80041ec <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f06f 0208 	mvn.w	r2, #8
 80041bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2204      	movs	r2, #4
 80041c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	69db      	ldr	r3, [r3, #28]
 80041ca:	f003 0303 	and.w	r3, r3, #3
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d003      	beq.n	80041da <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041d2:	6878      	ldr	r0, [r7, #4]
 80041d4:	f000 f94d 	bl	8004472 <HAL_TIM_IC_CaptureCallback>
 80041d8:	e005      	b.n	80041e6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041da:	6878      	ldr	r0, [r7, #4]
 80041dc:	f000 f93f 	bl	800445e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041e0:	6878      	ldr	r0, [r7, #4]
 80041e2:	f000 f950 	bl	8004486 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2200      	movs	r2, #0
 80041ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	f003 0310 	and.w	r3, r3, #16
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d020      	beq.n	8004238 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	f003 0310 	and.w	r3, r3, #16
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d01b      	beq.n	8004238 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f06f 0210 	mvn.w	r2, #16
 8004208:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2208      	movs	r2, #8
 800420e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	69db      	ldr	r3, [r3, #28]
 8004216:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800421a:	2b00      	cmp	r3, #0
 800421c:	d003      	beq.n	8004226 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800421e:	6878      	ldr	r0, [r7, #4]
 8004220:	f000 f927 	bl	8004472 <HAL_TIM_IC_CaptureCallback>
 8004224:	e005      	b.n	8004232 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004226:	6878      	ldr	r0, [r7, #4]
 8004228:	f000 f919 	bl	800445e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800422c:	6878      	ldr	r0, [r7, #4]
 800422e:	f000 f92a 	bl	8004486 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2200      	movs	r2, #0
 8004236:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	f003 0301 	and.w	r3, r3, #1
 800423e:	2b00      	cmp	r3, #0
 8004240:	d00c      	beq.n	800425c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	f003 0301 	and.w	r3, r3, #1
 8004248:	2b00      	cmp	r3, #0
 800424a:	d007      	beq.n	800425c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f06f 0201 	mvn.w	r2, #1
 8004254:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004256:	6878      	ldr	r0, [r7, #4]
 8004258:	f7fc fcee 	bl	8000c38 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800425c:	68bb      	ldr	r3, [r7, #8]
 800425e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004262:	2b00      	cmp	r3, #0
 8004264:	d00c      	beq.n	8004280 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800426c:	2b00      	cmp	r3, #0
 800426e:	d007      	beq.n	8004280 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004278:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800427a:	6878      	ldr	r0, [r7, #4]
 800427c:	f000 fae4 	bl	8004848 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004286:	2b00      	cmp	r3, #0
 8004288:	d00c      	beq.n	80042a4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004290:	2b00      	cmp	r3, #0
 8004292:	d007      	beq.n	80042a4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800429c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800429e:	6878      	ldr	r0, [r7, #4]
 80042a0:	f000 f8fb 	bl	800449a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	f003 0320 	and.w	r3, r3, #32
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d00c      	beq.n	80042c8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	f003 0320 	and.w	r3, r3, #32
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d007      	beq.n	80042c8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f06f 0220 	mvn.w	r2, #32
 80042c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80042c2:	6878      	ldr	r0, [r7, #4]
 80042c4:	f000 fab6 	bl	8004834 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80042c8:	bf00      	nop
 80042ca:	3710      	adds	r7, #16
 80042cc:	46bd      	mov	sp, r7
 80042ce:	bd80      	pop	{r7, pc}

080042d0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b084      	sub	sp, #16
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
 80042d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80042da:	2300      	movs	r3, #0
 80042dc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80042e4:	2b01      	cmp	r3, #1
 80042e6:	d101      	bne.n	80042ec <HAL_TIM_ConfigClockSource+0x1c>
 80042e8:	2302      	movs	r3, #2
 80042ea:	e0b4      	b.n	8004456 <HAL_TIM_ConfigClockSource+0x186>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2201      	movs	r2, #1
 80042f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2202      	movs	r2, #2
 80042f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	689b      	ldr	r3, [r3, #8]
 8004302:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800430a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004312:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	68ba      	ldr	r2, [r7, #8]
 800431a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004324:	d03e      	beq.n	80043a4 <HAL_TIM_ConfigClockSource+0xd4>
 8004326:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800432a:	f200 8087 	bhi.w	800443c <HAL_TIM_ConfigClockSource+0x16c>
 800432e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004332:	f000 8086 	beq.w	8004442 <HAL_TIM_ConfigClockSource+0x172>
 8004336:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800433a:	d87f      	bhi.n	800443c <HAL_TIM_ConfigClockSource+0x16c>
 800433c:	2b70      	cmp	r3, #112	@ 0x70
 800433e:	d01a      	beq.n	8004376 <HAL_TIM_ConfigClockSource+0xa6>
 8004340:	2b70      	cmp	r3, #112	@ 0x70
 8004342:	d87b      	bhi.n	800443c <HAL_TIM_ConfigClockSource+0x16c>
 8004344:	2b60      	cmp	r3, #96	@ 0x60
 8004346:	d050      	beq.n	80043ea <HAL_TIM_ConfigClockSource+0x11a>
 8004348:	2b60      	cmp	r3, #96	@ 0x60
 800434a:	d877      	bhi.n	800443c <HAL_TIM_ConfigClockSource+0x16c>
 800434c:	2b50      	cmp	r3, #80	@ 0x50
 800434e:	d03c      	beq.n	80043ca <HAL_TIM_ConfigClockSource+0xfa>
 8004350:	2b50      	cmp	r3, #80	@ 0x50
 8004352:	d873      	bhi.n	800443c <HAL_TIM_ConfigClockSource+0x16c>
 8004354:	2b40      	cmp	r3, #64	@ 0x40
 8004356:	d058      	beq.n	800440a <HAL_TIM_ConfigClockSource+0x13a>
 8004358:	2b40      	cmp	r3, #64	@ 0x40
 800435a:	d86f      	bhi.n	800443c <HAL_TIM_ConfigClockSource+0x16c>
 800435c:	2b30      	cmp	r3, #48	@ 0x30
 800435e:	d064      	beq.n	800442a <HAL_TIM_ConfigClockSource+0x15a>
 8004360:	2b30      	cmp	r3, #48	@ 0x30
 8004362:	d86b      	bhi.n	800443c <HAL_TIM_ConfigClockSource+0x16c>
 8004364:	2b20      	cmp	r3, #32
 8004366:	d060      	beq.n	800442a <HAL_TIM_ConfigClockSource+0x15a>
 8004368:	2b20      	cmp	r3, #32
 800436a:	d867      	bhi.n	800443c <HAL_TIM_ConfigClockSource+0x16c>
 800436c:	2b00      	cmp	r3, #0
 800436e:	d05c      	beq.n	800442a <HAL_TIM_ConfigClockSource+0x15a>
 8004370:	2b10      	cmp	r3, #16
 8004372:	d05a      	beq.n	800442a <HAL_TIM_ConfigClockSource+0x15a>
 8004374:	e062      	b.n	800443c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004386:	f000 f9b9 	bl	80046fc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	689b      	ldr	r3, [r3, #8]
 8004390:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004392:	68bb      	ldr	r3, [r7, #8]
 8004394:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004398:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	68ba      	ldr	r2, [r7, #8]
 80043a0:	609a      	str	r2, [r3, #8]
      break;
 80043a2:	e04f      	b.n	8004444 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80043b4:	f000 f9a2 	bl	80046fc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	689a      	ldr	r2, [r3, #8]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80043c6:	609a      	str	r2, [r3, #8]
      break;
 80043c8:	e03c      	b.n	8004444 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80043d6:	461a      	mov	r2, r3
 80043d8:	f000 f916 	bl	8004608 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	2150      	movs	r1, #80	@ 0x50
 80043e2:	4618      	mov	r0, r3
 80043e4:	f000 f96f 	bl	80046c6 <TIM_ITRx_SetConfig>
      break;
 80043e8:	e02c      	b.n	8004444 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80043f6:	461a      	mov	r2, r3
 80043f8:	f000 f935 	bl	8004666 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	2160      	movs	r1, #96	@ 0x60
 8004402:	4618      	mov	r0, r3
 8004404:	f000 f95f 	bl	80046c6 <TIM_ITRx_SetConfig>
      break;
 8004408:	e01c      	b.n	8004444 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004416:	461a      	mov	r2, r3
 8004418:	f000 f8f6 	bl	8004608 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	2140      	movs	r1, #64	@ 0x40
 8004422:	4618      	mov	r0, r3
 8004424:	f000 f94f 	bl	80046c6 <TIM_ITRx_SetConfig>
      break;
 8004428:	e00c      	b.n	8004444 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681a      	ldr	r2, [r3, #0]
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4619      	mov	r1, r3
 8004434:	4610      	mov	r0, r2
 8004436:	f000 f946 	bl	80046c6 <TIM_ITRx_SetConfig>
      break;
 800443a:	e003      	b.n	8004444 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800443c:	2301      	movs	r3, #1
 800443e:	73fb      	strb	r3, [r7, #15]
      break;
 8004440:	e000      	b.n	8004444 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004442:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2201      	movs	r2, #1
 8004448:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2200      	movs	r2, #0
 8004450:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004454:	7bfb      	ldrb	r3, [r7, #15]
}
 8004456:	4618      	mov	r0, r3
 8004458:	3710      	adds	r7, #16
 800445a:	46bd      	mov	sp, r7
 800445c:	bd80      	pop	{r7, pc}

0800445e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800445e:	b480      	push	{r7}
 8004460:	b083      	sub	sp, #12
 8004462:	af00      	add	r7, sp, #0
 8004464:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004466:	bf00      	nop
 8004468:	370c      	adds	r7, #12
 800446a:	46bd      	mov	sp, r7
 800446c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004470:	4770      	bx	lr

08004472 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004472:	b480      	push	{r7}
 8004474:	b083      	sub	sp, #12
 8004476:	af00      	add	r7, sp, #0
 8004478:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800447a:	bf00      	nop
 800447c:	370c      	adds	r7, #12
 800447e:	46bd      	mov	sp, r7
 8004480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004484:	4770      	bx	lr

08004486 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004486:	b480      	push	{r7}
 8004488:	b083      	sub	sp, #12
 800448a:	af00      	add	r7, sp, #0
 800448c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800448e:	bf00      	nop
 8004490:	370c      	adds	r7, #12
 8004492:	46bd      	mov	sp, r7
 8004494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004498:	4770      	bx	lr

0800449a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800449a:	b480      	push	{r7}
 800449c:	b083      	sub	sp, #12
 800449e:	af00      	add	r7, sp, #0
 80044a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80044a2:	bf00      	nop
 80044a4:	370c      	adds	r7, #12
 80044a6:	46bd      	mov	sp, r7
 80044a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ac:	4770      	bx	lr
	...

080044b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b085      	sub	sp, #20
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
 80044b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	4a46      	ldr	r2, [pc, #280]	@ (80045dc <TIM_Base_SetConfig+0x12c>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d013      	beq.n	80044f0 <TIM_Base_SetConfig+0x40>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80044ce:	d00f      	beq.n	80044f0 <TIM_Base_SetConfig+0x40>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	4a43      	ldr	r2, [pc, #268]	@ (80045e0 <TIM_Base_SetConfig+0x130>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d00b      	beq.n	80044f0 <TIM_Base_SetConfig+0x40>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	4a42      	ldr	r2, [pc, #264]	@ (80045e4 <TIM_Base_SetConfig+0x134>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d007      	beq.n	80044f0 <TIM_Base_SetConfig+0x40>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	4a41      	ldr	r2, [pc, #260]	@ (80045e8 <TIM_Base_SetConfig+0x138>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d003      	beq.n	80044f0 <TIM_Base_SetConfig+0x40>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	4a40      	ldr	r2, [pc, #256]	@ (80045ec <TIM_Base_SetConfig+0x13c>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d108      	bne.n	8004502 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	68fa      	ldr	r2, [r7, #12]
 80044fe:	4313      	orrs	r3, r2
 8004500:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	4a35      	ldr	r2, [pc, #212]	@ (80045dc <TIM_Base_SetConfig+0x12c>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d02b      	beq.n	8004562 <TIM_Base_SetConfig+0xb2>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004510:	d027      	beq.n	8004562 <TIM_Base_SetConfig+0xb2>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	4a32      	ldr	r2, [pc, #200]	@ (80045e0 <TIM_Base_SetConfig+0x130>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d023      	beq.n	8004562 <TIM_Base_SetConfig+0xb2>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	4a31      	ldr	r2, [pc, #196]	@ (80045e4 <TIM_Base_SetConfig+0x134>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d01f      	beq.n	8004562 <TIM_Base_SetConfig+0xb2>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	4a30      	ldr	r2, [pc, #192]	@ (80045e8 <TIM_Base_SetConfig+0x138>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d01b      	beq.n	8004562 <TIM_Base_SetConfig+0xb2>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	4a2f      	ldr	r2, [pc, #188]	@ (80045ec <TIM_Base_SetConfig+0x13c>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d017      	beq.n	8004562 <TIM_Base_SetConfig+0xb2>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	4a2e      	ldr	r2, [pc, #184]	@ (80045f0 <TIM_Base_SetConfig+0x140>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d013      	beq.n	8004562 <TIM_Base_SetConfig+0xb2>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	4a2d      	ldr	r2, [pc, #180]	@ (80045f4 <TIM_Base_SetConfig+0x144>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d00f      	beq.n	8004562 <TIM_Base_SetConfig+0xb2>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	4a2c      	ldr	r2, [pc, #176]	@ (80045f8 <TIM_Base_SetConfig+0x148>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d00b      	beq.n	8004562 <TIM_Base_SetConfig+0xb2>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	4a2b      	ldr	r2, [pc, #172]	@ (80045fc <TIM_Base_SetConfig+0x14c>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d007      	beq.n	8004562 <TIM_Base_SetConfig+0xb2>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	4a2a      	ldr	r2, [pc, #168]	@ (8004600 <TIM_Base_SetConfig+0x150>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d003      	beq.n	8004562 <TIM_Base_SetConfig+0xb2>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	4a29      	ldr	r2, [pc, #164]	@ (8004604 <TIM_Base_SetConfig+0x154>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d108      	bne.n	8004574 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004568:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	68db      	ldr	r3, [r3, #12]
 800456e:	68fa      	ldr	r2, [r7, #12]
 8004570:	4313      	orrs	r3, r2
 8004572:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	695b      	ldr	r3, [r3, #20]
 800457e:	4313      	orrs	r3, r2
 8004580:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	68fa      	ldr	r2, [r7, #12]
 8004586:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	689a      	ldr	r2, [r3, #8]
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	681a      	ldr	r2, [r3, #0]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	4a10      	ldr	r2, [pc, #64]	@ (80045dc <TIM_Base_SetConfig+0x12c>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d003      	beq.n	80045a8 <TIM_Base_SetConfig+0xf8>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	4a12      	ldr	r2, [pc, #72]	@ (80045ec <TIM_Base_SetConfig+0x13c>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d103      	bne.n	80045b0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	691a      	ldr	r2, [r3, #16]
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2201      	movs	r2, #1
 80045b4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	691b      	ldr	r3, [r3, #16]
 80045ba:	f003 0301 	and.w	r3, r3, #1
 80045be:	2b01      	cmp	r3, #1
 80045c0:	d105      	bne.n	80045ce <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	691b      	ldr	r3, [r3, #16]
 80045c6:	f023 0201 	bic.w	r2, r3, #1
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	611a      	str	r2, [r3, #16]
  }
}
 80045ce:	bf00      	nop
 80045d0:	3714      	adds	r7, #20
 80045d2:	46bd      	mov	sp, r7
 80045d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d8:	4770      	bx	lr
 80045da:	bf00      	nop
 80045dc:	40010000 	.word	0x40010000
 80045e0:	40000400 	.word	0x40000400
 80045e4:	40000800 	.word	0x40000800
 80045e8:	40000c00 	.word	0x40000c00
 80045ec:	40010400 	.word	0x40010400
 80045f0:	40014000 	.word	0x40014000
 80045f4:	40014400 	.word	0x40014400
 80045f8:	40014800 	.word	0x40014800
 80045fc:	40001800 	.word	0x40001800
 8004600:	40001c00 	.word	0x40001c00
 8004604:	40002000 	.word	0x40002000

08004608 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004608:	b480      	push	{r7}
 800460a:	b087      	sub	sp, #28
 800460c:	af00      	add	r7, sp, #0
 800460e:	60f8      	str	r0, [r7, #12]
 8004610:	60b9      	str	r1, [r7, #8]
 8004612:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	6a1b      	ldr	r3, [r3, #32]
 8004618:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	6a1b      	ldr	r3, [r3, #32]
 800461e:	f023 0201 	bic.w	r2, r3, #1
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	699b      	ldr	r3, [r3, #24]
 800462a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800462c:	693b      	ldr	r3, [r7, #16]
 800462e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004632:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	011b      	lsls	r3, r3, #4
 8004638:	693a      	ldr	r2, [r7, #16]
 800463a:	4313      	orrs	r3, r2
 800463c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800463e:	697b      	ldr	r3, [r7, #20]
 8004640:	f023 030a 	bic.w	r3, r3, #10
 8004644:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004646:	697a      	ldr	r2, [r7, #20]
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	4313      	orrs	r3, r2
 800464c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	693a      	ldr	r2, [r7, #16]
 8004652:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	697a      	ldr	r2, [r7, #20]
 8004658:	621a      	str	r2, [r3, #32]
}
 800465a:	bf00      	nop
 800465c:	371c      	adds	r7, #28
 800465e:	46bd      	mov	sp, r7
 8004660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004664:	4770      	bx	lr

08004666 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004666:	b480      	push	{r7}
 8004668:	b087      	sub	sp, #28
 800466a:	af00      	add	r7, sp, #0
 800466c:	60f8      	str	r0, [r7, #12]
 800466e:	60b9      	str	r1, [r7, #8]
 8004670:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	6a1b      	ldr	r3, [r3, #32]
 8004676:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	6a1b      	ldr	r3, [r3, #32]
 800467c:	f023 0210 	bic.w	r2, r3, #16
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	699b      	ldr	r3, [r3, #24]
 8004688:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800468a:	693b      	ldr	r3, [r7, #16]
 800468c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004690:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	031b      	lsls	r3, r3, #12
 8004696:	693a      	ldr	r2, [r7, #16]
 8004698:	4313      	orrs	r3, r2
 800469a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800469c:	697b      	ldr	r3, [r7, #20]
 800469e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80046a2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	011b      	lsls	r3, r3, #4
 80046a8:	697a      	ldr	r2, [r7, #20]
 80046aa:	4313      	orrs	r3, r2
 80046ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	693a      	ldr	r2, [r7, #16]
 80046b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	697a      	ldr	r2, [r7, #20]
 80046b8:	621a      	str	r2, [r3, #32]
}
 80046ba:	bf00      	nop
 80046bc:	371c      	adds	r7, #28
 80046be:	46bd      	mov	sp, r7
 80046c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c4:	4770      	bx	lr

080046c6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80046c6:	b480      	push	{r7}
 80046c8:	b085      	sub	sp, #20
 80046ca:	af00      	add	r7, sp, #0
 80046cc:	6078      	str	r0, [r7, #4]
 80046ce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	689b      	ldr	r3, [r3, #8]
 80046d4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046dc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80046de:	683a      	ldr	r2, [r7, #0]
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	4313      	orrs	r3, r2
 80046e4:	f043 0307 	orr.w	r3, r3, #7
 80046e8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	68fa      	ldr	r2, [r7, #12]
 80046ee:	609a      	str	r2, [r3, #8]
}
 80046f0:	bf00      	nop
 80046f2:	3714      	adds	r7, #20
 80046f4:	46bd      	mov	sp, r7
 80046f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fa:	4770      	bx	lr

080046fc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80046fc:	b480      	push	{r7}
 80046fe:	b087      	sub	sp, #28
 8004700:	af00      	add	r7, sp, #0
 8004702:	60f8      	str	r0, [r7, #12]
 8004704:	60b9      	str	r1, [r7, #8]
 8004706:	607a      	str	r2, [r7, #4]
 8004708:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	689b      	ldr	r3, [r3, #8]
 800470e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004710:	697b      	ldr	r3, [r7, #20]
 8004712:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004716:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	021a      	lsls	r2, r3, #8
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	431a      	orrs	r2, r3
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	4313      	orrs	r3, r2
 8004724:	697a      	ldr	r2, [r7, #20]
 8004726:	4313      	orrs	r3, r2
 8004728:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	697a      	ldr	r2, [r7, #20]
 800472e:	609a      	str	r2, [r3, #8]
}
 8004730:	bf00      	nop
 8004732:	371c      	adds	r7, #28
 8004734:	46bd      	mov	sp, r7
 8004736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473a:	4770      	bx	lr

0800473c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800473c:	b480      	push	{r7}
 800473e:	b085      	sub	sp, #20
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
 8004744:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800474c:	2b01      	cmp	r3, #1
 800474e:	d101      	bne.n	8004754 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004750:	2302      	movs	r3, #2
 8004752:	e05a      	b.n	800480a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2201      	movs	r2, #1
 8004758:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2202      	movs	r2, #2
 8004760:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	685b      	ldr	r3, [r3, #4]
 800476a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	689b      	ldr	r3, [r3, #8]
 8004772:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800477a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	68fa      	ldr	r2, [r7, #12]
 8004782:	4313      	orrs	r3, r2
 8004784:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	68fa      	ldr	r2, [r7, #12]
 800478c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4a21      	ldr	r2, [pc, #132]	@ (8004818 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d022      	beq.n	80047de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80047a0:	d01d      	beq.n	80047de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4a1d      	ldr	r2, [pc, #116]	@ (800481c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d018      	beq.n	80047de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a1b      	ldr	r2, [pc, #108]	@ (8004820 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d013      	beq.n	80047de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a1a      	ldr	r2, [pc, #104]	@ (8004824 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d00e      	beq.n	80047de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4a18      	ldr	r2, [pc, #96]	@ (8004828 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d009      	beq.n	80047de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4a17      	ldr	r2, [pc, #92]	@ (800482c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d004      	beq.n	80047de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4a15      	ldr	r2, [pc, #84]	@ (8004830 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d10c      	bne.n	80047f8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80047de:	68bb      	ldr	r3, [r7, #8]
 80047e0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80047e4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	685b      	ldr	r3, [r3, #4]
 80047ea:	68ba      	ldr	r2, [r7, #8]
 80047ec:	4313      	orrs	r3, r2
 80047ee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	68ba      	ldr	r2, [r7, #8]
 80047f6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2201      	movs	r2, #1
 80047fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2200      	movs	r2, #0
 8004804:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004808:	2300      	movs	r3, #0
}
 800480a:	4618      	mov	r0, r3
 800480c:	3714      	adds	r7, #20
 800480e:	46bd      	mov	sp, r7
 8004810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004814:	4770      	bx	lr
 8004816:	bf00      	nop
 8004818:	40010000 	.word	0x40010000
 800481c:	40000400 	.word	0x40000400
 8004820:	40000800 	.word	0x40000800
 8004824:	40000c00 	.word	0x40000c00
 8004828:	40010400 	.word	0x40010400
 800482c:	40014000 	.word	0x40014000
 8004830:	40001800 	.word	0x40001800

08004834 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004834:	b480      	push	{r7}
 8004836:	b083      	sub	sp, #12
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800483c:	bf00      	nop
 800483e:	370c      	adds	r7, #12
 8004840:	46bd      	mov	sp, r7
 8004842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004846:	4770      	bx	lr

08004848 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004848:	b480      	push	{r7}
 800484a:	b083      	sub	sp, #12
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004850:	bf00      	nop
 8004852:	370c      	adds	r7, #12
 8004854:	46bd      	mov	sp, r7
 8004856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485a:	4770      	bx	lr

0800485c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b082      	sub	sp, #8
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d101      	bne.n	800486e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800486a:	2301      	movs	r3, #1
 800486c:	e042      	b.n	80048f4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004874:	b2db      	uxtb	r3, r3
 8004876:	2b00      	cmp	r3, #0
 8004878:	d106      	bne.n	8004888 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2200      	movs	r2, #0
 800487e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004882:	6878      	ldr	r0, [r7, #4]
 8004884:	f7fc fc82 	bl	800118c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2224      	movs	r2, #36	@ 0x24
 800488c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	68da      	ldr	r2, [r3, #12]
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800489e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80048a0:	6878      	ldr	r0, [r7, #4]
 80048a2:	f000 feeb 	bl	800567c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	691a      	ldr	r2, [r3, #16]
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80048b4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	695a      	ldr	r2, [r3, #20]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80048c4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	68da      	ldr	r2, [r3, #12]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80048d4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2200      	movs	r2, #0
 80048da:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2220      	movs	r2, #32
 80048e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2220      	movs	r2, #32
 80048e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2200      	movs	r2, #0
 80048f0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80048f2:	2300      	movs	r3, #0
}
 80048f4:	4618      	mov	r0, r3
 80048f6:	3708      	adds	r7, #8
 80048f8:	46bd      	mov	sp, r7
 80048fa:	bd80      	pop	{r7, pc}

080048fc <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b084      	sub	sp, #16
 8004900:	af00      	add	r7, sp, #0
 8004902:	60f8      	str	r0, [r7, #12]
 8004904:	60b9      	str	r1, [r7, #8]
 8004906:	4613      	mov	r3, r2
 8004908:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004910:	b2db      	uxtb	r3, r3
 8004912:	2b20      	cmp	r3, #32
 8004914:	d112      	bne.n	800493c <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004916:	68bb      	ldr	r3, [r7, #8]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d002      	beq.n	8004922 <HAL_UART_Receive_DMA+0x26>
 800491c:	88fb      	ldrh	r3, [r7, #6]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d101      	bne.n	8004926 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8004922:	2301      	movs	r3, #1
 8004924:	e00b      	b.n	800493e <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	2200      	movs	r2, #0
 800492a:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800492c:	88fb      	ldrh	r3, [r7, #6]
 800492e:	461a      	mov	r2, r3
 8004930:	68b9      	ldr	r1, [r7, #8]
 8004932:	68f8      	ldr	r0, [r7, #12]
 8004934:	f000 fc42 	bl	80051bc <UART_Start_Receive_DMA>
 8004938:	4603      	mov	r3, r0
 800493a:	e000      	b.n	800493e <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 800493c:	2302      	movs	r3, #2
  }
}
 800493e:	4618      	mov	r0, r3
 8004940:	3710      	adds	r7, #16
 8004942:	46bd      	mov	sp, r7
 8004944:	bd80      	pop	{r7, pc}

08004946 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004946:	b580      	push	{r7, lr}
 8004948:	b08c      	sub	sp, #48	@ 0x30
 800494a:	af00      	add	r7, sp, #0
 800494c:	60f8      	str	r0, [r7, #12]
 800494e:	60b9      	str	r1, [r7, #8]
 8004950:	4613      	mov	r3, r2
 8004952:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800495a:	b2db      	uxtb	r3, r3
 800495c:	2b20      	cmp	r3, #32
 800495e:	d14a      	bne.n	80049f6 <HAL_UARTEx_ReceiveToIdle_IT+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8004960:	68bb      	ldr	r3, [r7, #8]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d002      	beq.n	800496c <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 8004966:	88fb      	ldrh	r3, [r7, #6]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d101      	bne.n	8004970 <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 800496c:	2301      	movs	r3, #1
 800496e:	e043      	b.n	80049f8 <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	2201      	movs	r2, #1
 8004974:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	2200      	movs	r2, #0
 800497a:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_IT(huart, pData, Size);
 800497c:	88fb      	ldrh	r3, [r7, #6]
 800497e:	461a      	mov	r2, r3
 8004980:	68b9      	ldr	r1, [r7, #8]
 8004982:	68f8      	ldr	r0, [r7, #12]
 8004984:	f000 fbe0 	bl	8005148 <UART_Start_Receive_IT>
 8004988:	4603      	mov	r3, r0
 800498a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800498e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004992:	2b00      	cmp	r3, #0
 8004994:	d12c      	bne.n	80049f0 <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800499a:	2b01      	cmp	r3, #1
 800499c:	d125      	bne.n	80049ea <HAL_UARTEx_ReceiveToIdle_IT+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 800499e:	2300      	movs	r3, #0
 80049a0:	613b      	str	r3, [r7, #16]
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	613b      	str	r3, [r7, #16]
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	685b      	ldr	r3, [r3, #4]
 80049b0:	613b      	str	r3, [r7, #16]
 80049b2:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	330c      	adds	r3, #12
 80049ba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049bc:	69bb      	ldr	r3, [r7, #24]
 80049be:	e853 3f00 	ldrex	r3, [r3]
 80049c2:	617b      	str	r3, [r7, #20]
   return(result);
 80049c4:	697b      	ldr	r3, [r7, #20]
 80049c6:	f043 0310 	orr.w	r3, r3, #16
 80049ca:	62bb      	str	r3, [r7, #40]	@ 0x28
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	330c      	adds	r3, #12
 80049d2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80049d4:	627a      	str	r2, [r7, #36]	@ 0x24
 80049d6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049d8:	6a39      	ldr	r1, [r7, #32]
 80049da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80049dc:	e841 2300 	strex	r3, r2, [r1]
 80049e0:	61fb      	str	r3, [r7, #28]
   return(result);
 80049e2:	69fb      	ldr	r3, [r7, #28]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d1e5      	bne.n	80049b4 <HAL_UARTEx_ReceiveToIdle_IT+0x6e>
 80049e8:	e002      	b.n	80049f0 <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80049ea:	2301      	movs	r3, #1
 80049ec:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 80049f0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80049f4:	e000      	b.n	80049f8 <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
  }
  else
  {
    return HAL_BUSY;
 80049f6:	2302      	movs	r3, #2
  }
}
 80049f8:	4618      	mov	r0, r3
 80049fa:	3730      	adds	r7, #48	@ 0x30
 80049fc:	46bd      	mov	sp, r7
 80049fe:	bd80      	pop	{r7, pc}

08004a00 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b0ba      	sub	sp, #232	@ 0xe8
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	68db      	ldr	r3, [r3, #12]
 8004a18:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	695b      	ldr	r3, [r3, #20]
 8004a22:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004a26:	2300      	movs	r3, #0
 8004a28:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004a32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a36:	f003 030f 	and.w	r3, r3, #15
 8004a3a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004a3e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d10f      	bne.n	8004a66 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004a46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a4a:	f003 0320 	and.w	r3, r3, #32
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d009      	beq.n	8004a66 <HAL_UART_IRQHandler+0x66>
 8004a52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a56:	f003 0320 	and.w	r3, r3, #32
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d003      	beq.n	8004a66 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004a5e:	6878      	ldr	r0, [r7, #4]
 8004a60:	f000 fd4d 	bl	80054fe <UART_Receive_IT>
      return;
 8004a64:	e25b      	b.n	8004f1e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004a66:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	f000 80de 	beq.w	8004c2c <HAL_UART_IRQHandler+0x22c>
 8004a70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004a74:	f003 0301 	and.w	r3, r3, #1
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d106      	bne.n	8004a8a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004a7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a80:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	f000 80d1 	beq.w	8004c2c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004a8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a8e:	f003 0301 	and.w	r3, r3, #1
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d00b      	beq.n	8004aae <HAL_UART_IRQHandler+0xae>
 8004a96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d005      	beq.n	8004aae <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004aa6:	f043 0201 	orr.w	r2, r3, #1
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004aae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ab2:	f003 0304 	and.w	r3, r3, #4
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d00b      	beq.n	8004ad2 <HAL_UART_IRQHandler+0xd2>
 8004aba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004abe:	f003 0301 	and.w	r3, r3, #1
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d005      	beq.n	8004ad2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004aca:	f043 0202 	orr.w	r2, r3, #2
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004ad2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ad6:	f003 0302 	and.w	r3, r3, #2
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d00b      	beq.n	8004af6 <HAL_UART_IRQHandler+0xf6>
 8004ade:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004ae2:	f003 0301 	and.w	r3, r3, #1
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d005      	beq.n	8004af6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004aee:	f043 0204 	orr.w	r2, r3, #4
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004af6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004afa:	f003 0308 	and.w	r3, r3, #8
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d011      	beq.n	8004b26 <HAL_UART_IRQHandler+0x126>
 8004b02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004b06:	f003 0320 	and.w	r3, r3, #32
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d105      	bne.n	8004b1a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004b0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004b12:	f003 0301 	and.w	r3, r3, #1
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d005      	beq.n	8004b26 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b1e:	f043 0208 	orr.w	r2, r3, #8
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	f000 81f2 	beq.w	8004f14 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004b30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b34:	f003 0320 	and.w	r3, r3, #32
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d008      	beq.n	8004b4e <HAL_UART_IRQHandler+0x14e>
 8004b3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004b40:	f003 0320 	and.w	r3, r3, #32
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d002      	beq.n	8004b4e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004b48:	6878      	ldr	r0, [r7, #4]
 8004b4a:	f000 fcd8 	bl	80054fe <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	695b      	ldr	r3, [r3, #20]
 8004b54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b58:	2b40      	cmp	r3, #64	@ 0x40
 8004b5a:	bf0c      	ite	eq
 8004b5c:	2301      	moveq	r3, #1
 8004b5e:	2300      	movne	r3, #0
 8004b60:	b2db      	uxtb	r3, r3
 8004b62:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b6a:	f003 0308 	and.w	r3, r3, #8
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d103      	bne.n	8004b7a <HAL_UART_IRQHandler+0x17a>
 8004b72:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d04f      	beq.n	8004c1a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004b7a:	6878      	ldr	r0, [r7, #4]
 8004b7c:	f000 fbe0 	bl	8005340 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	695b      	ldr	r3, [r3, #20]
 8004b86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b8a:	2b40      	cmp	r3, #64	@ 0x40
 8004b8c:	d141      	bne.n	8004c12 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	3314      	adds	r3, #20
 8004b94:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b98:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004b9c:	e853 3f00 	ldrex	r3, [r3]
 8004ba0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004ba4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004ba8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004bac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	3314      	adds	r3, #20
 8004bb6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004bba:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004bbe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bc2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004bc6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004bca:	e841 2300 	strex	r3, r2, [r1]
 8004bce:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004bd2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d1d9      	bne.n	8004b8e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d013      	beq.n	8004c0a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004be6:	4a7e      	ldr	r2, [pc, #504]	@ (8004de0 <HAL_UART_IRQHandler+0x3e0>)
 8004be8:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bee:	4618      	mov	r0, r3
 8004bf0:	f7fd f825 	bl	8001c3e <HAL_DMA_Abort_IT>
 8004bf4:	4603      	mov	r3, r0
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d016      	beq.n	8004c28 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bfe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c00:	687a      	ldr	r2, [r7, #4]
 8004c02:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004c04:	4610      	mov	r0, r2
 8004c06:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c08:	e00e      	b.n	8004c28 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004c0a:	6878      	ldr	r0, [r7, #4]
 8004c0c:	f7fc f86a 	bl	8000ce4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c10:	e00a      	b.n	8004c28 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004c12:	6878      	ldr	r0, [r7, #4]
 8004c14:	f7fc f866 	bl	8000ce4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c18:	e006      	b.n	8004c28 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004c1a:	6878      	ldr	r0, [r7, #4]
 8004c1c:	f7fc f862 	bl	8000ce4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2200      	movs	r2, #0
 8004c24:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004c26:	e175      	b.n	8004f14 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c28:	bf00      	nop
    return;
 8004c2a:	e173      	b.n	8004f14 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c30:	2b01      	cmp	r3, #1
 8004c32:	f040 814f 	bne.w	8004ed4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004c36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c3a:	f003 0310 	and.w	r3, r3, #16
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	f000 8148 	beq.w	8004ed4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004c44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004c48:	f003 0310 	and.w	r3, r3, #16
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	f000 8141 	beq.w	8004ed4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004c52:	2300      	movs	r3, #0
 8004c54:	60bb      	str	r3, [r7, #8]
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	60bb      	str	r3, [r7, #8]
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	685b      	ldr	r3, [r3, #4]
 8004c64:	60bb      	str	r3, [r7, #8]
 8004c66:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	695b      	ldr	r3, [r3, #20]
 8004c6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c72:	2b40      	cmp	r3, #64	@ 0x40
 8004c74:	f040 80b6 	bne.w	8004de4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	685b      	ldr	r3, [r3, #4]
 8004c80:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004c84:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	f000 8145 	beq.w	8004f18 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004c92:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004c96:	429a      	cmp	r2, r3
 8004c98:	f080 813e 	bcs.w	8004f18 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004ca2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ca8:	69db      	ldr	r3, [r3, #28]
 8004caa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004cae:	f000 8088 	beq.w	8004dc2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	330c      	adds	r3, #12
 8004cb8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cbc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004cc0:	e853 3f00 	ldrex	r3, [r3]
 8004cc4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004cc8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004ccc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004cd0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	330c      	adds	r3, #12
 8004cda:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004cde:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004ce2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ce6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004cea:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004cee:	e841 2300 	strex	r3, r2, [r1]
 8004cf2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004cf6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d1d9      	bne.n	8004cb2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	3314      	adds	r3, #20
 8004d04:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d06:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004d08:	e853 3f00 	ldrex	r3, [r3]
 8004d0c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004d0e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004d10:	f023 0301 	bic.w	r3, r3, #1
 8004d14:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	3314      	adds	r3, #20
 8004d1e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004d22:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004d26:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d28:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004d2a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004d2e:	e841 2300 	strex	r3, r2, [r1]
 8004d32:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004d34:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d1e1      	bne.n	8004cfe <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	3314      	adds	r3, #20
 8004d40:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d42:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004d44:	e853 3f00 	ldrex	r3, [r3]
 8004d48:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004d4a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004d4c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004d50:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	3314      	adds	r3, #20
 8004d5a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004d5e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004d60:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d62:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004d64:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004d66:	e841 2300 	strex	r3, r2, [r1]
 8004d6a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004d6c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d1e3      	bne.n	8004d3a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2220      	movs	r2, #32
 8004d76:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	330c      	adds	r3, #12
 8004d86:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d88:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004d8a:	e853 3f00 	ldrex	r3, [r3]
 8004d8e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004d90:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004d92:	f023 0310 	bic.w	r3, r3, #16
 8004d96:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	330c      	adds	r3, #12
 8004da0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004da4:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004da6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004da8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004daa:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004dac:	e841 2300 	strex	r3, r2, [r1]
 8004db0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004db2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d1e3      	bne.n	8004d80 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	f7fc fece 	bl	8001b5e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2202      	movs	r2, #2
 8004dc6:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004dd0:	b29b      	uxth	r3, r3
 8004dd2:	1ad3      	subs	r3, r2, r3
 8004dd4:	b29b      	uxth	r3, r3
 8004dd6:	4619      	mov	r1, r3
 8004dd8:	6878      	ldr	r0, [r7, #4]
 8004dda:	f7fb fff1 	bl	8000dc0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004dde:	e09b      	b.n	8004f18 <HAL_UART_IRQHandler+0x518>
 8004de0:	08005407 	.word	0x08005407
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004dec:	b29b      	uxth	r3, r3
 8004dee:	1ad3      	subs	r3, r2, r3
 8004df0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004df8:	b29b      	uxth	r3, r3
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	f000 808e 	beq.w	8004f1c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004e00:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	f000 8089 	beq.w	8004f1c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	330c      	adds	r3, #12
 8004e10:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e14:	e853 3f00 	ldrex	r3, [r3]
 8004e18:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004e1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e1c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004e20:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	330c      	adds	r3, #12
 8004e2a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004e2e:	647a      	str	r2, [r7, #68]	@ 0x44
 8004e30:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e32:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004e34:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004e36:	e841 2300 	strex	r3, r2, [r1]
 8004e3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004e3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d1e3      	bne.n	8004e0a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	3314      	adds	r3, #20
 8004e48:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e4c:	e853 3f00 	ldrex	r3, [r3]
 8004e50:	623b      	str	r3, [r7, #32]
   return(result);
 8004e52:	6a3b      	ldr	r3, [r7, #32]
 8004e54:	f023 0301 	bic.w	r3, r3, #1
 8004e58:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	3314      	adds	r3, #20
 8004e62:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004e66:	633a      	str	r2, [r7, #48]	@ 0x30
 8004e68:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e6a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004e6c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004e6e:	e841 2300 	strex	r3, r2, [r1]
 8004e72:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004e74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d1e3      	bne.n	8004e42 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2220      	movs	r2, #32
 8004e7e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2200      	movs	r2, #0
 8004e86:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	330c      	adds	r3, #12
 8004e8e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e90:	693b      	ldr	r3, [r7, #16]
 8004e92:	e853 3f00 	ldrex	r3, [r3]
 8004e96:	60fb      	str	r3, [r7, #12]
   return(result);
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	f023 0310 	bic.w	r3, r3, #16
 8004e9e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	330c      	adds	r3, #12
 8004ea8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004eac:	61fa      	str	r2, [r7, #28]
 8004eae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eb0:	69b9      	ldr	r1, [r7, #24]
 8004eb2:	69fa      	ldr	r2, [r7, #28]
 8004eb4:	e841 2300 	strex	r3, r2, [r1]
 8004eb8:	617b      	str	r3, [r7, #20]
   return(result);
 8004eba:	697b      	ldr	r3, [r7, #20]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d1e3      	bne.n	8004e88 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2202      	movs	r2, #2
 8004ec4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004ec6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004eca:	4619      	mov	r1, r3
 8004ecc:	6878      	ldr	r0, [r7, #4]
 8004ece:	f7fb ff77 	bl	8000dc0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004ed2:	e023      	b.n	8004f1c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004ed4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ed8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d009      	beq.n	8004ef4 <HAL_UART_IRQHandler+0x4f4>
 8004ee0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ee4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d003      	beq.n	8004ef4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004eec:	6878      	ldr	r0, [r7, #4]
 8004eee:	f000 fa9e 	bl	800542e <UART_Transmit_IT>
    return;
 8004ef2:	e014      	b.n	8004f1e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004ef4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ef8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d00e      	beq.n	8004f1e <HAL_UART_IRQHandler+0x51e>
 8004f00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d008      	beq.n	8004f1e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004f0c:	6878      	ldr	r0, [r7, #4]
 8004f0e:	f000 fade 	bl	80054ce <UART_EndTransmit_IT>
    return;
 8004f12:	e004      	b.n	8004f1e <HAL_UART_IRQHandler+0x51e>
    return;
 8004f14:	bf00      	nop
 8004f16:	e002      	b.n	8004f1e <HAL_UART_IRQHandler+0x51e>
      return;
 8004f18:	bf00      	nop
 8004f1a:	e000      	b.n	8004f1e <HAL_UART_IRQHandler+0x51e>
      return;
 8004f1c:	bf00      	nop
  }
}
 8004f1e:	37e8      	adds	r7, #232	@ 0xe8
 8004f20:	46bd      	mov	sp, r7
 8004f22:	bd80      	pop	{r7, pc}

08004f24 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004f24:	b480      	push	{r7}
 8004f26:	b083      	sub	sp, #12
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004f2c:	bf00      	nop
 8004f2e:	370c      	adds	r7, #12
 8004f30:	46bd      	mov	sp, r7
 8004f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f36:	4770      	bx	lr

08004f38 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004f38:	b480      	push	{r7}
 8004f3a:	b083      	sub	sp, #12
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004f40:	bf00      	nop
 8004f42:	370c      	adds	r7, #12
 8004f44:	46bd      	mov	sp, r7
 8004f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4a:	4770      	bx	lr

08004f4c <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b09c      	sub	sp, #112	@ 0x70
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f58:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d172      	bne.n	800504e <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8004f68:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004f6e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	330c      	adds	r3, #12
 8004f74:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f76:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004f78:	e853 3f00 	ldrex	r3, [r3]
 8004f7c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004f7e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004f80:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004f84:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004f86:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	330c      	adds	r3, #12
 8004f8c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8004f8e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004f90:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f92:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004f94:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004f96:	e841 2300 	strex	r3, r2, [r1]
 8004f9a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004f9c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d1e5      	bne.n	8004f6e <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fa2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	3314      	adds	r3, #20
 8004fa8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004faa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fac:	e853 3f00 	ldrex	r3, [r3]
 8004fb0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004fb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004fb4:	f023 0301 	bic.w	r3, r3, #1
 8004fb8:	667b      	str	r3, [r7, #100]	@ 0x64
 8004fba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	3314      	adds	r3, #20
 8004fc0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004fc2:	647a      	str	r2, [r7, #68]	@ 0x44
 8004fc4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fc6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004fc8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004fca:	e841 2300 	strex	r3, r2, [r1]
 8004fce:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004fd0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d1e5      	bne.n	8004fa2 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004fd6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	3314      	adds	r3, #20
 8004fdc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fe0:	e853 3f00 	ldrex	r3, [r3]
 8004fe4:	623b      	str	r3, [r7, #32]
   return(result);
 8004fe6:	6a3b      	ldr	r3, [r7, #32]
 8004fe8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004fec:	663b      	str	r3, [r7, #96]	@ 0x60
 8004fee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	3314      	adds	r3, #20
 8004ff4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004ff6:	633a      	str	r2, [r7, #48]	@ 0x30
 8004ff8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ffa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004ffc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004ffe:	e841 2300 	strex	r3, r2, [r1]
 8005002:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005004:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005006:	2b00      	cmp	r3, #0
 8005008:	d1e5      	bne.n	8004fd6 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800500a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800500c:	2220      	movs	r2, #32
 800500e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005012:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005014:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005016:	2b01      	cmp	r3, #1
 8005018:	d119      	bne.n	800504e <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800501a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	330c      	adds	r3, #12
 8005020:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005022:	693b      	ldr	r3, [r7, #16]
 8005024:	e853 3f00 	ldrex	r3, [r3]
 8005028:	60fb      	str	r3, [r7, #12]
   return(result);
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	f023 0310 	bic.w	r3, r3, #16
 8005030:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005032:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	330c      	adds	r3, #12
 8005038:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800503a:	61fa      	str	r2, [r7, #28]
 800503c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800503e:	69b9      	ldr	r1, [r7, #24]
 8005040:	69fa      	ldr	r2, [r7, #28]
 8005042:	e841 2300 	strex	r3, r2, [r1]
 8005046:	617b      	str	r3, [r7, #20]
   return(result);
 8005048:	697b      	ldr	r3, [r7, #20]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d1e5      	bne.n	800501a <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800504e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005050:	2200      	movs	r2, #0
 8005052:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005054:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005056:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005058:	2b01      	cmp	r3, #1
 800505a:	d106      	bne.n	800506a <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800505c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800505e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005060:	4619      	mov	r1, r3
 8005062:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005064:	f7fb feac 	bl	8000dc0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005068:	e002      	b.n	8005070 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800506a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800506c:	f7fb fe28 	bl	8000cc0 <HAL_UART_RxCpltCallback>
}
 8005070:	bf00      	nop
 8005072:	3770      	adds	r7, #112	@ 0x70
 8005074:	46bd      	mov	sp, r7
 8005076:	bd80      	pop	{r7, pc}

08005078 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b084      	sub	sp, #16
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005084:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	2201      	movs	r2, #1
 800508a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005090:	2b01      	cmp	r3, #1
 8005092:	d108      	bne.n	80050a6 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005098:	085b      	lsrs	r3, r3, #1
 800509a:	b29b      	uxth	r3, r3
 800509c:	4619      	mov	r1, r3
 800509e:	68f8      	ldr	r0, [r7, #12]
 80050a0:	f7fb fe8e 	bl	8000dc0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80050a4:	e002      	b.n	80050ac <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 80050a6:	68f8      	ldr	r0, [r7, #12]
 80050a8:	f7ff ff46 	bl	8004f38 <HAL_UART_RxHalfCpltCallback>
}
 80050ac:	bf00      	nop
 80050ae:	3710      	adds	r7, #16
 80050b0:	46bd      	mov	sp, r7
 80050b2:	bd80      	pop	{r7, pc}

080050b4 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b084      	sub	sp, #16
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80050bc:	2300      	movs	r3, #0
 80050be:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050c4:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80050c6:	68bb      	ldr	r3, [r7, #8]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	695b      	ldr	r3, [r3, #20]
 80050cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050d0:	2b80      	cmp	r3, #128	@ 0x80
 80050d2:	bf0c      	ite	eq
 80050d4:	2301      	moveq	r3, #1
 80050d6:	2300      	movne	r3, #0
 80050d8:	b2db      	uxtb	r3, r3
 80050da:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80050e2:	b2db      	uxtb	r3, r3
 80050e4:	2b21      	cmp	r3, #33	@ 0x21
 80050e6:	d108      	bne.n	80050fa <UART_DMAError+0x46>
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d005      	beq.n	80050fa <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80050ee:	68bb      	ldr	r3, [r7, #8]
 80050f0:	2200      	movs	r2, #0
 80050f2:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 80050f4:	68b8      	ldr	r0, [r7, #8]
 80050f6:	f000 f8fb 	bl	80052f0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80050fa:	68bb      	ldr	r3, [r7, #8]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	695b      	ldr	r3, [r3, #20]
 8005100:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005104:	2b40      	cmp	r3, #64	@ 0x40
 8005106:	bf0c      	ite	eq
 8005108:	2301      	moveq	r3, #1
 800510a:	2300      	movne	r3, #0
 800510c:	b2db      	uxtb	r3, r3
 800510e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005110:	68bb      	ldr	r3, [r7, #8]
 8005112:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005116:	b2db      	uxtb	r3, r3
 8005118:	2b22      	cmp	r3, #34	@ 0x22
 800511a:	d108      	bne.n	800512e <UART_DMAError+0x7a>
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d005      	beq.n	800512e <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005122:	68bb      	ldr	r3, [r7, #8]
 8005124:	2200      	movs	r2, #0
 8005126:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8005128:	68b8      	ldr	r0, [r7, #8]
 800512a:	f000 f909 	bl	8005340 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800512e:	68bb      	ldr	r3, [r7, #8]
 8005130:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005132:	f043 0210 	orr.w	r2, r3, #16
 8005136:	68bb      	ldr	r3, [r7, #8]
 8005138:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800513a:	68b8      	ldr	r0, [r7, #8]
 800513c:	f7fb fdd2 	bl	8000ce4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005140:	bf00      	nop
 8005142:	3710      	adds	r7, #16
 8005144:	46bd      	mov	sp, r7
 8005146:	bd80      	pop	{r7, pc}

08005148 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005148:	b480      	push	{r7}
 800514a:	b085      	sub	sp, #20
 800514c:	af00      	add	r7, sp, #0
 800514e:	60f8      	str	r0, [r7, #12]
 8005150:	60b9      	str	r1, [r7, #8]
 8005152:	4613      	mov	r3, r2
 8005154:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	68ba      	ldr	r2, [r7, #8]
 800515a:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	88fa      	ldrh	r2, [r7, #6]
 8005160:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	88fa      	ldrh	r2, [r7, #6]
 8005166:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	2200      	movs	r2, #0
 800516c:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	2222      	movs	r2, #34	@ 0x22
 8005172:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	691b      	ldr	r3, [r3, #16]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d007      	beq.n	800518e <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	68da      	ldr	r2, [r3, #12]
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800518c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	695a      	ldr	r2, [r3, #20]
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f042 0201 	orr.w	r2, r2, #1
 800519c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	68da      	ldr	r2, [r3, #12]
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f042 0220 	orr.w	r2, r2, #32
 80051ac:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80051ae:	2300      	movs	r3, #0
}
 80051b0:	4618      	mov	r0, r3
 80051b2:	3714      	adds	r7, #20
 80051b4:	46bd      	mov	sp, r7
 80051b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ba:	4770      	bx	lr

080051bc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b098      	sub	sp, #96	@ 0x60
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	60f8      	str	r0, [r7, #12]
 80051c4:	60b9      	str	r1, [r7, #8]
 80051c6:	4613      	mov	r3, r2
 80051c8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80051ca:	68ba      	ldr	r2, [r7, #8]
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	88fa      	ldrh	r2, [r7, #6]
 80051d4:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	2200      	movs	r2, #0
 80051da:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	2222      	movs	r2, #34	@ 0x22
 80051e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051e8:	4a3e      	ldr	r2, [pc, #248]	@ (80052e4 <UART_Start_Receive_DMA+0x128>)
 80051ea:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051f0:	4a3d      	ldr	r2, [pc, #244]	@ (80052e8 <UART_Start_Receive_DMA+0x12c>)
 80051f2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051f8:	4a3c      	ldr	r2, [pc, #240]	@ (80052ec <UART_Start_Receive_DMA+0x130>)
 80051fa:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005200:	2200      	movs	r2, #0
 8005202:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8005204:	f107 0308 	add.w	r3, r7, #8
 8005208:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	3304      	adds	r3, #4
 8005214:	4619      	mov	r1, r3
 8005216:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005218:	681a      	ldr	r2, [r3, #0]
 800521a:	88fb      	ldrh	r3, [r7, #6]
 800521c:	f7fc fc47 	bl	8001aae <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8005220:	2300      	movs	r3, #0
 8005222:	613b      	str	r3, [r7, #16]
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	613b      	str	r3, [r7, #16]
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	685b      	ldr	r3, [r3, #4]
 8005232:	613b      	str	r3, [r7, #16]
 8005234:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	691b      	ldr	r3, [r3, #16]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d019      	beq.n	8005272 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	330c      	adds	r3, #12
 8005244:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005246:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005248:	e853 3f00 	ldrex	r3, [r3]
 800524c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800524e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005250:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005254:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	330c      	adds	r3, #12
 800525c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800525e:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8005260:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005262:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8005264:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005266:	e841 2300 	strex	r3, r2, [r1]
 800526a:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800526c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800526e:	2b00      	cmp	r3, #0
 8005270:	d1e5      	bne.n	800523e <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	3314      	adds	r3, #20
 8005278:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800527a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800527c:	e853 3f00 	ldrex	r3, [r3]
 8005280:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005282:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005284:	f043 0301 	orr.w	r3, r3, #1
 8005288:	657b      	str	r3, [r7, #84]	@ 0x54
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	3314      	adds	r3, #20
 8005290:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005292:	63ba      	str	r2, [r7, #56]	@ 0x38
 8005294:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005296:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8005298:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800529a:	e841 2300 	strex	r3, r2, [r1]
 800529e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80052a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d1e5      	bne.n	8005272 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	3314      	adds	r3, #20
 80052ac:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052ae:	69bb      	ldr	r3, [r7, #24]
 80052b0:	e853 3f00 	ldrex	r3, [r3]
 80052b4:	617b      	str	r3, [r7, #20]
   return(result);
 80052b6:	697b      	ldr	r3, [r7, #20]
 80052b8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80052bc:	653b      	str	r3, [r7, #80]	@ 0x50
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	3314      	adds	r3, #20
 80052c4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80052c6:	627a      	str	r2, [r7, #36]	@ 0x24
 80052c8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052ca:	6a39      	ldr	r1, [r7, #32]
 80052cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80052ce:	e841 2300 	strex	r3, r2, [r1]
 80052d2:	61fb      	str	r3, [r7, #28]
   return(result);
 80052d4:	69fb      	ldr	r3, [r7, #28]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d1e5      	bne.n	80052a6 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80052da:	2300      	movs	r3, #0
}
 80052dc:	4618      	mov	r0, r3
 80052de:	3760      	adds	r7, #96	@ 0x60
 80052e0:	46bd      	mov	sp, r7
 80052e2:	bd80      	pop	{r7, pc}
 80052e4:	08004f4d 	.word	0x08004f4d
 80052e8:	08005079 	.word	0x08005079
 80052ec:	080050b5 	.word	0x080050b5

080052f0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80052f0:	b480      	push	{r7}
 80052f2:	b089      	sub	sp, #36	@ 0x24
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	330c      	adds	r3, #12
 80052fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	e853 3f00 	ldrex	r3, [r3]
 8005306:	60bb      	str	r3, [r7, #8]
   return(result);
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800530e:	61fb      	str	r3, [r7, #28]
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	330c      	adds	r3, #12
 8005316:	69fa      	ldr	r2, [r7, #28]
 8005318:	61ba      	str	r2, [r7, #24]
 800531a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800531c:	6979      	ldr	r1, [r7, #20]
 800531e:	69ba      	ldr	r2, [r7, #24]
 8005320:	e841 2300 	strex	r3, r2, [r1]
 8005324:	613b      	str	r3, [r7, #16]
   return(result);
 8005326:	693b      	ldr	r3, [r7, #16]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d1e5      	bne.n	80052f8 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2220      	movs	r2, #32
 8005330:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8005334:	bf00      	nop
 8005336:	3724      	adds	r7, #36	@ 0x24
 8005338:	46bd      	mov	sp, r7
 800533a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533e:	4770      	bx	lr

08005340 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005340:	b480      	push	{r7}
 8005342:	b095      	sub	sp, #84	@ 0x54
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	330c      	adds	r3, #12
 800534e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005350:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005352:	e853 3f00 	ldrex	r3, [r3]
 8005356:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005358:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800535a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800535e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	330c      	adds	r3, #12
 8005366:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005368:	643a      	str	r2, [r7, #64]	@ 0x40
 800536a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800536c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800536e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005370:	e841 2300 	strex	r3, r2, [r1]
 8005374:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005376:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005378:	2b00      	cmp	r3, #0
 800537a:	d1e5      	bne.n	8005348 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	3314      	adds	r3, #20
 8005382:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005384:	6a3b      	ldr	r3, [r7, #32]
 8005386:	e853 3f00 	ldrex	r3, [r3]
 800538a:	61fb      	str	r3, [r7, #28]
   return(result);
 800538c:	69fb      	ldr	r3, [r7, #28]
 800538e:	f023 0301 	bic.w	r3, r3, #1
 8005392:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	3314      	adds	r3, #20
 800539a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800539c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800539e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053a0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80053a2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80053a4:	e841 2300 	strex	r3, r2, [r1]
 80053a8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80053aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d1e5      	bne.n	800537c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053b4:	2b01      	cmp	r3, #1
 80053b6:	d119      	bne.n	80053ec <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	330c      	adds	r3, #12
 80053be:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	e853 3f00 	ldrex	r3, [r3]
 80053c6:	60bb      	str	r3, [r7, #8]
   return(result);
 80053c8:	68bb      	ldr	r3, [r7, #8]
 80053ca:	f023 0310 	bic.w	r3, r3, #16
 80053ce:	647b      	str	r3, [r7, #68]	@ 0x44
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	330c      	adds	r3, #12
 80053d6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80053d8:	61ba      	str	r2, [r7, #24]
 80053da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053dc:	6979      	ldr	r1, [r7, #20]
 80053de:	69ba      	ldr	r2, [r7, #24]
 80053e0:	e841 2300 	strex	r3, r2, [r1]
 80053e4:	613b      	str	r3, [r7, #16]
   return(result);
 80053e6:	693b      	ldr	r3, [r7, #16]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d1e5      	bne.n	80053b8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2220      	movs	r2, #32
 80053f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2200      	movs	r2, #0
 80053f8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80053fa:	bf00      	nop
 80053fc:	3754      	adds	r7, #84	@ 0x54
 80053fe:	46bd      	mov	sp, r7
 8005400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005404:	4770      	bx	lr

08005406 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005406:	b580      	push	{r7, lr}
 8005408:	b084      	sub	sp, #16
 800540a:	af00      	add	r7, sp, #0
 800540c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005412:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	2200      	movs	r2, #0
 8005418:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	2200      	movs	r2, #0
 800541e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005420:	68f8      	ldr	r0, [r7, #12]
 8005422:	f7fb fc5f 	bl	8000ce4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005426:	bf00      	nop
 8005428:	3710      	adds	r7, #16
 800542a:	46bd      	mov	sp, r7
 800542c:	bd80      	pop	{r7, pc}

0800542e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800542e:	b480      	push	{r7}
 8005430:	b085      	sub	sp, #20
 8005432:	af00      	add	r7, sp, #0
 8005434:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800543c:	b2db      	uxtb	r3, r3
 800543e:	2b21      	cmp	r3, #33	@ 0x21
 8005440:	d13e      	bne.n	80054c0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	689b      	ldr	r3, [r3, #8]
 8005446:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800544a:	d114      	bne.n	8005476 <UART_Transmit_IT+0x48>
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	691b      	ldr	r3, [r3, #16]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d110      	bne.n	8005476 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6a1b      	ldr	r3, [r3, #32]
 8005458:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	881b      	ldrh	r3, [r3, #0]
 800545e:	461a      	mov	r2, r3
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005468:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6a1b      	ldr	r3, [r3, #32]
 800546e:	1c9a      	adds	r2, r3, #2
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	621a      	str	r2, [r3, #32]
 8005474:	e008      	b.n	8005488 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6a1b      	ldr	r3, [r3, #32]
 800547a:	1c59      	adds	r1, r3, #1
 800547c:	687a      	ldr	r2, [r7, #4]
 800547e:	6211      	str	r1, [r2, #32]
 8005480:	781a      	ldrb	r2, [r3, #0]
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800548c:	b29b      	uxth	r3, r3
 800548e:	3b01      	subs	r3, #1
 8005490:	b29b      	uxth	r3, r3
 8005492:	687a      	ldr	r2, [r7, #4]
 8005494:	4619      	mov	r1, r3
 8005496:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005498:	2b00      	cmp	r3, #0
 800549a:	d10f      	bne.n	80054bc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	68da      	ldr	r2, [r3, #12]
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80054aa:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	68da      	ldr	r2, [r3, #12]
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80054ba:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80054bc:	2300      	movs	r3, #0
 80054be:	e000      	b.n	80054c2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80054c0:	2302      	movs	r3, #2
  }
}
 80054c2:	4618      	mov	r0, r3
 80054c4:	3714      	adds	r7, #20
 80054c6:	46bd      	mov	sp, r7
 80054c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054cc:	4770      	bx	lr

080054ce <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80054ce:	b580      	push	{r7, lr}
 80054d0:	b082      	sub	sp, #8
 80054d2:	af00      	add	r7, sp, #0
 80054d4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	68da      	ldr	r2, [r3, #12]
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80054e4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2220      	movs	r2, #32
 80054ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80054ee:	6878      	ldr	r0, [r7, #4]
 80054f0:	f7ff fd18 	bl	8004f24 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80054f4:	2300      	movs	r3, #0
}
 80054f6:	4618      	mov	r0, r3
 80054f8:	3708      	adds	r7, #8
 80054fa:	46bd      	mov	sp, r7
 80054fc:	bd80      	pop	{r7, pc}

080054fe <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80054fe:	b580      	push	{r7, lr}
 8005500:	b08c      	sub	sp, #48	@ 0x30
 8005502:	af00      	add	r7, sp, #0
 8005504:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800550c:	b2db      	uxtb	r3, r3
 800550e:	2b22      	cmp	r3, #34	@ 0x22
 8005510:	f040 80ae 	bne.w	8005670 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	689b      	ldr	r3, [r3, #8]
 8005518:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800551c:	d117      	bne.n	800554e <UART_Receive_IT+0x50>
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	691b      	ldr	r3, [r3, #16]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d113      	bne.n	800554e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005526:	2300      	movs	r3, #0
 8005528:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800552e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	685b      	ldr	r3, [r3, #4]
 8005536:	b29b      	uxth	r3, r3
 8005538:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800553c:	b29a      	uxth	r2, r3
 800553e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005540:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005546:	1c9a      	adds	r2, r3, #2
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	629a      	str	r2, [r3, #40]	@ 0x28
 800554c:	e026      	b.n	800559c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005552:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005554:	2300      	movs	r3, #0
 8005556:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	689b      	ldr	r3, [r3, #8]
 800555c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005560:	d007      	beq.n	8005572 <UART_Receive_IT+0x74>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	689b      	ldr	r3, [r3, #8]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d10a      	bne.n	8005580 <UART_Receive_IT+0x82>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	691b      	ldr	r3, [r3, #16]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d106      	bne.n	8005580 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	685b      	ldr	r3, [r3, #4]
 8005578:	b2da      	uxtb	r2, r3
 800557a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800557c:	701a      	strb	r2, [r3, #0]
 800557e:	e008      	b.n	8005592 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	685b      	ldr	r3, [r3, #4]
 8005586:	b2db      	uxtb	r3, r3
 8005588:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800558c:	b2da      	uxtb	r2, r3
 800558e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005590:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005596:	1c5a      	adds	r2, r3, #1
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80055a0:	b29b      	uxth	r3, r3
 80055a2:	3b01      	subs	r3, #1
 80055a4:	b29b      	uxth	r3, r3
 80055a6:	687a      	ldr	r2, [r7, #4]
 80055a8:	4619      	mov	r1, r3
 80055aa:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d15d      	bne.n	800566c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	68da      	ldr	r2, [r3, #12]
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f022 0220 	bic.w	r2, r2, #32
 80055be:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	68da      	ldr	r2, [r3, #12]
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80055ce:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	695a      	ldr	r2, [r3, #20]
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f022 0201 	bic.w	r2, r2, #1
 80055de:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2220      	movs	r2, #32
 80055e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2200      	movs	r2, #0
 80055ec:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055f2:	2b01      	cmp	r3, #1
 80055f4:	d135      	bne.n	8005662 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2200      	movs	r2, #0
 80055fa:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	330c      	adds	r3, #12
 8005602:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005604:	697b      	ldr	r3, [r7, #20]
 8005606:	e853 3f00 	ldrex	r3, [r3]
 800560a:	613b      	str	r3, [r7, #16]
   return(result);
 800560c:	693b      	ldr	r3, [r7, #16]
 800560e:	f023 0310 	bic.w	r3, r3, #16
 8005612:	627b      	str	r3, [r7, #36]	@ 0x24
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	330c      	adds	r3, #12
 800561a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800561c:	623a      	str	r2, [r7, #32]
 800561e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005620:	69f9      	ldr	r1, [r7, #28]
 8005622:	6a3a      	ldr	r2, [r7, #32]
 8005624:	e841 2300 	strex	r3, r2, [r1]
 8005628:	61bb      	str	r3, [r7, #24]
   return(result);
 800562a:	69bb      	ldr	r3, [r7, #24]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d1e5      	bne.n	80055fc <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f003 0310 	and.w	r3, r3, #16
 800563a:	2b10      	cmp	r3, #16
 800563c:	d10a      	bne.n	8005654 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800563e:	2300      	movs	r3, #0
 8005640:	60fb      	str	r3, [r7, #12]
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	60fb      	str	r3, [r7, #12]
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	685b      	ldr	r3, [r3, #4]
 8005650:	60fb      	str	r3, [r7, #12]
 8005652:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005658:	4619      	mov	r1, r3
 800565a:	6878      	ldr	r0, [r7, #4]
 800565c:	f7fb fbb0 	bl	8000dc0 <HAL_UARTEx_RxEventCallback>
 8005660:	e002      	b.n	8005668 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005662:	6878      	ldr	r0, [r7, #4]
 8005664:	f7fb fb2c 	bl	8000cc0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005668:	2300      	movs	r3, #0
 800566a:	e002      	b.n	8005672 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800566c:	2300      	movs	r3, #0
 800566e:	e000      	b.n	8005672 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005670:	2302      	movs	r3, #2
  }
}
 8005672:	4618      	mov	r0, r3
 8005674:	3730      	adds	r7, #48	@ 0x30
 8005676:	46bd      	mov	sp, r7
 8005678:	bd80      	pop	{r7, pc}
	...

0800567c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800567c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005680:	b0c0      	sub	sp, #256	@ 0x100
 8005682:	af00      	add	r7, sp, #0
 8005684:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005688:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	691b      	ldr	r3, [r3, #16]
 8005690:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005694:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005698:	68d9      	ldr	r1, [r3, #12]
 800569a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800569e:	681a      	ldr	r2, [r3, #0]
 80056a0:	ea40 0301 	orr.w	r3, r0, r1
 80056a4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80056a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056aa:	689a      	ldr	r2, [r3, #8]
 80056ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056b0:	691b      	ldr	r3, [r3, #16]
 80056b2:	431a      	orrs	r2, r3
 80056b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056b8:	695b      	ldr	r3, [r3, #20]
 80056ba:	431a      	orrs	r2, r3
 80056bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056c0:	69db      	ldr	r3, [r3, #28]
 80056c2:	4313      	orrs	r3, r2
 80056c4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80056c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	68db      	ldr	r3, [r3, #12]
 80056d0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80056d4:	f021 010c 	bic.w	r1, r1, #12
 80056d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056dc:	681a      	ldr	r2, [r3, #0]
 80056de:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80056e2:	430b      	orrs	r3, r1
 80056e4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80056e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	695b      	ldr	r3, [r3, #20]
 80056ee:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80056f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056f6:	6999      	ldr	r1, [r3, #24]
 80056f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056fc:	681a      	ldr	r2, [r3, #0]
 80056fe:	ea40 0301 	orr.w	r3, r0, r1
 8005702:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005704:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005708:	681a      	ldr	r2, [r3, #0]
 800570a:	4b8f      	ldr	r3, [pc, #572]	@ (8005948 <UART_SetConfig+0x2cc>)
 800570c:	429a      	cmp	r2, r3
 800570e:	d005      	beq.n	800571c <UART_SetConfig+0xa0>
 8005710:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005714:	681a      	ldr	r2, [r3, #0]
 8005716:	4b8d      	ldr	r3, [pc, #564]	@ (800594c <UART_SetConfig+0x2d0>)
 8005718:	429a      	cmp	r2, r3
 800571a:	d104      	bne.n	8005726 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800571c:	f7fe fc14 	bl	8003f48 <HAL_RCC_GetPCLK2Freq>
 8005720:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005724:	e003      	b.n	800572e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005726:	f7fe fbfb 	bl	8003f20 <HAL_RCC_GetPCLK1Freq>
 800572a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800572e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005732:	69db      	ldr	r3, [r3, #28]
 8005734:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005738:	f040 810c 	bne.w	8005954 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800573c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005740:	2200      	movs	r2, #0
 8005742:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005746:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800574a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800574e:	4622      	mov	r2, r4
 8005750:	462b      	mov	r3, r5
 8005752:	1891      	adds	r1, r2, r2
 8005754:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005756:	415b      	adcs	r3, r3
 8005758:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800575a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800575e:	4621      	mov	r1, r4
 8005760:	eb12 0801 	adds.w	r8, r2, r1
 8005764:	4629      	mov	r1, r5
 8005766:	eb43 0901 	adc.w	r9, r3, r1
 800576a:	f04f 0200 	mov.w	r2, #0
 800576e:	f04f 0300 	mov.w	r3, #0
 8005772:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005776:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800577a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800577e:	4690      	mov	r8, r2
 8005780:	4699      	mov	r9, r3
 8005782:	4623      	mov	r3, r4
 8005784:	eb18 0303 	adds.w	r3, r8, r3
 8005788:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800578c:	462b      	mov	r3, r5
 800578e:	eb49 0303 	adc.w	r3, r9, r3
 8005792:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005796:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800579a:	685b      	ldr	r3, [r3, #4]
 800579c:	2200      	movs	r2, #0
 800579e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80057a2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80057a6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80057aa:	460b      	mov	r3, r1
 80057ac:	18db      	adds	r3, r3, r3
 80057ae:	653b      	str	r3, [r7, #80]	@ 0x50
 80057b0:	4613      	mov	r3, r2
 80057b2:	eb42 0303 	adc.w	r3, r2, r3
 80057b6:	657b      	str	r3, [r7, #84]	@ 0x54
 80057b8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80057bc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80057c0:	f7fa fd6e 	bl	80002a0 <__aeabi_uldivmod>
 80057c4:	4602      	mov	r2, r0
 80057c6:	460b      	mov	r3, r1
 80057c8:	4b61      	ldr	r3, [pc, #388]	@ (8005950 <UART_SetConfig+0x2d4>)
 80057ca:	fba3 2302 	umull	r2, r3, r3, r2
 80057ce:	095b      	lsrs	r3, r3, #5
 80057d0:	011c      	lsls	r4, r3, #4
 80057d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80057d6:	2200      	movs	r2, #0
 80057d8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80057dc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80057e0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80057e4:	4642      	mov	r2, r8
 80057e6:	464b      	mov	r3, r9
 80057e8:	1891      	adds	r1, r2, r2
 80057ea:	64b9      	str	r1, [r7, #72]	@ 0x48
 80057ec:	415b      	adcs	r3, r3
 80057ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80057f0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80057f4:	4641      	mov	r1, r8
 80057f6:	eb12 0a01 	adds.w	sl, r2, r1
 80057fa:	4649      	mov	r1, r9
 80057fc:	eb43 0b01 	adc.w	fp, r3, r1
 8005800:	f04f 0200 	mov.w	r2, #0
 8005804:	f04f 0300 	mov.w	r3, #0
 8005808:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800580c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005810:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005814:	4692      	mov	sl, r2
 8005816:	469b      	mov	fp, r3
 8005818:	4643      	mov	r3, r8
 800581a:	eb1a 0303 	adds.w	r3, sl, r3
 800581e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005822:	464b      	mov	r3, r9
 8005824:	eb4b 0303 	adc.w	r3, fp, r3
 8005828:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800582c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005830:	685b      	ldr	r3, [r3, #4]
 8005832:	2200      	movs	r2, #0
 8005834:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005838:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800583c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005840:	460b      	mov	r3, r1
 8005842:	18db      	adds	r3, r3, r3
 8005844:	643b      	str	r3, [r7, #64]	@ 0x40
 8005846:	4613      	mov	r3, r2
 8005848:	eb42 0303 	adc.w	r3, r2, r3
 800584c:	647b      	str	r3, [r7, #68]	@ 0x44
 800584e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005852:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005856:	f7fa fd23 	bl	80002a0 <__aeabi_uldivmod>
 800585a:	4602      	mov	r2, r0
 800585c:	460b      	mov	r3, r1
 800585e:	4611      	mov	r1, r2
 8005860:	4b3b      	ldr	r3, [pc, #236]	@ (8005950 <UART_SetConfig+0x2d4>)
 8005862:	fba3 2301 	umull	r2, r3, r3, r1
 8005866:	095b      	lsrs	r3, r3, #5
 8005868:	2264      	movs	r2, #100	@ 0x64
 800586a:	fb02 f303 	mul.w	r3, r2, r3
 800586e:	1acb      	subs	r3, r1, r3
 8005870:	00db      	lsls	r3, r3, #3
 8005872:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005876:	4b36      	ldr	r3, [pc, #216]	@ (8005950 <UART_SetConfig+0x2d4>)
 8005878:	fba3 2302 	umull	r2, r3, r3, r2
 800587c:	095b      	lsrs	r3, r3, #5
 800587e:	005b      	lsls	r3, r3, #1
 8005880:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005884:	441c      	add	r4, r3
 8005886:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800588a:	2200      	movs	r2, #0
 800588c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005890:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005894:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005898:	4642      	mov	r2, r8
 800589a:	464b      	mov	r3, r9
 800589c:	1891      	adds	r1, r2, r2
 800589e:	63b9      	str	r1, [r7, #56]	@ 0x38
 80058a0:	415b      	adcs	r3, r3
 80058a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80058a4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80058a8:	4641      	mov	r1, r8
 80058aa:	1851      	adds	r1, r2, r1
 80058ac:	6339      	str	r1, [r7, #48]	@ 0x30
 80058ae:	4649      	mov	r1, r9
 80058b0:	414b      	adcs	r3, r1
 80058b2:	637b      	str	r3, [r7, #52]	@ 0x34
 80058b4:	f04f 0200 	mov.w	r2, #0
 80058b8:	f04f 0300 	mov.w	r3, #0
 80058bc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80058c0:	4659      	mov	r1, fp
 80058c2:	00cb      	lsls	r3, r1, #3
 80058c4:	4651      	mov	r1, sl
 80058c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80058ca:	4651      	mov	r1, sl
 80058cc:	00ca      	lsls	r2, r1, #3
 80058ce:	4610      	mov	r0, r2
 80058d0:	4619      	mov	r1, r3
 80058d2:	4603      	mov	r3, r0
 80058d4:	4642      	mov	r2, r8
 80058d6:	189b      	adds	r3, r3, r2
 80058d8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80058dc:	464b      	mov	r3, r9
 80058de:	460a      	mov	r2, r1
 80058e0:	eb42 0303 	adc.w	r3, r2, r3
 80058e4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80058e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058ec:	685b      	ldr	r3, [r3, #4]
 80058ee:	2200      	movs	r2, #0
 80058f0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80058f4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80058f8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80058fc:	460b      	mov	r3, r1
 80058fe:	18db      	adds	r3, r3, r3
 8005900:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005902:	4613      	mov	r3, r2
 8005904:	eb42 0303 	adc.w	r3, r2, r3
 8005908:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800590a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800590e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005912:	f7fa fcc5 	bl	80002a0 <__aeabi_uldivmod>
 8005916:	4602      	mov	r2, r0
 8005918:	460b      	mov	r3, r1
 800591a:	4b0d      	ldr	r3, [pc, #52]	@ (8005950 <UART_SetConfig+0x2d4>)
 800591c:	fba3 1302 	umull	r1, r3, r3, r2
 8005920:	095b      	lsrs	r3, r3, #5
 8005922:	2164      	movs	r1, #100	@ 0x64
 8005924:	fb01 f303 	mul.w	r3, r1, r3
 8005928:	1ad3      	subs	r3, r2, r3
 800592a:	00db      	lsls	r3, r3, #3
 800592c:	3332      	adds	r3, #50	@ 0x32
 800592e:	4a08      	ldr	r2, [pc, #32]	@ (8005950 <UART_SetConfig+0x2d4>)
 8005930:	fba2 2303 	umull	r2, r3, r2, r3
 8005934:	095b      	lsrs	r3, r3, #5
 8005936:	f003 0207 	and.w	r2, r3, #7
 800593a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	4422      	add	r2, r4
 8005942:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005944:	e106      	b.n	8005b54 <UART_SetConfig+0x4d8>
 8005946:	bf00      	nop
 8005948:	40011000 	.word	0x40011000
 800594c:	40011400 	.word	0x40011400
 8005950:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005954:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005958:	2200      	movs	r2, #0
 800595a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800595e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005962:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005966:	4642      	mov	r2, r8
 8005968:	464b      	mov	r3, r9
 800596a:	1891      	adds	r1, r2, r2
 800596c:	6239      	str	r1, [r7, #32]
 800596e:	415b      	adcs	r3, r3
 8005970:	627b      	str	r3, [r7, #36]	@ 0x24
 8005972:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005976:	4641      	mov	r1, r8
 8005978:	1854      	adds	r4, r2, r1
 800597a:	4649      	mov	r1, r9
 800597c:	eb43 0501 	adc.w	r5, r3, r1
 8005980:	f04f 0200 	mov.w	r2, #0
 8005984:	f04f 0300 	mov.w	r3, #0
 8005988:	00eb      	lsls	r3, r5, #3
 800598a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800598e:	00e2      	lsls	r2, r4, #3
 8005990:	4614      	mov	r4, r2
 8005992:	461d      	mov	r5, r3
 8005994:	4643      	mov	r3, r8
 8005996:	18e3      	adds	r3, r4, r3
 8005998:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800599c:	464b      	mov	r3, r9
 800599e:	eb45 0303 	adc.w	r3, r5, r3
 80059a2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80059a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059aa:	685b      	ldr	r3, [r3, #4]
 80059ac:	2200      	movs	r2, #0
 80059ae:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80059b2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80059b6:	f04f 0200 	mov.w	r2, #0
 80059ba:	f04f 0300 	mov.w	r3, #0
 80059be:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80059c2:	4629      	mov	r1, r5
 80059c4:	008b      	lsls	r3, r1, #2
 80059c6:	4621      	mov	r1, r4
 80059c8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80059cc:	4621      	mov	r1, r4
 80059ce:	008a      	lsls	r2, r1, #2
 80059d0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80059d4:	f7fa fc64 	bl	80002a0 <__aeabi_uldivmod>
 80059d8:	4602      	mov	r2, r0
 80059da:	460b      	mov	r3, r1
 80059dc:	4b60      	ldr	r3, [pc, #384]	@ (8005b60 <UART_SetConfig+0x4e4>)
 80059de:	fba3 2302 	umull	r2, r3, r3, r2
 80059e2:	095b      	lsrs	r3, r3, #5
 80059e4:	011c      	lsls	r4, r3, #4
 80059e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80059ea:	2200      	movs	r2, #0
 80059ec:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80059f0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80059f4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80059f8:	4642      	mov	r2, r8
 80059fa:	464b      	mov	r3, r9
 80059fc:	1891      	adds	r1, r2, r2
 80059fe:	61b9      	str	r1, [r7, #24]
 8005a00:	415b      	adcs	r3, r3
 8005a02:	61fb      	str	r3, [r7, #28]
 8005a04:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005a08:	4641      	mov	r1, r8
 8005a0a:	1851      	adds	r1, r2, r1
 8005a0c:	6139      	str	r1, [r7, #16]
 8005a0e:	4649      	mov	r1, r9
 8005a10:	414b      	adcs	r3, r1
 8005a12:	617b      	str	r3, [r7, #20]
 8005a14:	f04f 0200 	mov.w	r2, #0
 8005a18:	f04f 0300 	mov.w	r3, #0
 8005a1c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005a20:	4659      	mov	r1, fp
 8005a22:	00cb      	lsls	r3, r1, #3
 8005a24:	4651      	mov	r1, sl
 8005a26:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005a2a:	4651      	mov	r1, sl
 8005a2c:	00ca      	lsls	r2, r1, #3
 8005a2e:	4610      	mov	r0, r2
 8005a30:	4619      	mov	r1, r3
 8005a32:	4603      	mov	r3, r0
 8005a34:	4642      	mov	r2, r8
 8005a36:	189b      	adds	r3, r3, r2
 8005a38:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005a3c:	464b      	mov	r3, r9
 8005a3e:	460a      	mov	r2, r1
 8005a40:	eb42 0303 	adc.w	r3, r2, r3
 8005a44:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005a48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a4c:	685b      	ldr	r3, [r3, #4]
 8005a4e:	2200      	movs	r2, #0
 8005a50:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005a52:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005a54:	f04f 0200 	mov.w	r2, #0
 8005a58:	f04f 0300 	mov.w	r3, #0
 8005a5c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005a60:	4649      	mov	r1, r9
 8005a62:	008b      	lsls	r3, r1, #2
 8005a64:	4641      	mov	r1, r8
 8005a66:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005a6a:	4641      	mov	r1, r8
 8005a6c:	008a      	lsls	r2, r1, #2
 8005a6e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005a72:	f7fa fc15 	bl	80002a0 <__aeabi_uldivmod>
 8005a76:	4602      	mov	r2, r0
 8005a78:	460b      	mov	r3, r1
 8005a7a:	4611      	mov	r1, r2
 8005a7c:	4b38      	ldr	r3, [pc, #224]	@ (8005b60 <UART_SetConfig+0x4e4>)
 8005a7e:	fba3 2301 	umull	r2, r3, r3, r1
 8005a82:	095b      	lsrs	r3, r3, #5
 8005a84:	2264      	movs	r2, #100	@ 0x64
 8005a86:	fb02 f303 	mul.w	r3, r2, r3
 8005a8a:	1acb      	subs	r3, r1, r3
 8005a8c:	011b      	lsls	r3, r3, #4
 8005a8e:	3332      	adds	r3, #50	@ 0x32
 8005a90:	4a33      	ldr	r2, [pc, #204]	@ (8005b60 <UART_SetConfig+0x4e4>)
 8005a92:	fba2 2303 	umull	r2, r3, r2, r3
 8005a96:	095b      	lsrs	r3, r3, #5
 8005a98:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005a9c:	441c      	add	r4, r3
 8005a9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	673b      	str	r3, [r7, #112]	@ 0x70
 8005aa6:	677a      	str	r2, [r7, #116]	@ 0x74
 8005aa8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005aac:	4642      	mov	r2, r8
 8005aae:	464b      	mov	r3, r9
 8005ab0:	1891      	adds	r1, r2, r2
 8005ab2:	60b9      	str	r1, [r7, #8]
 8005ab4:	415b      	adcs	r3, r3
 8005ab6:	60fb      	str	r3, [r7, #12]
 8005ab8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005abc:	4641      	mov	r1, r8
 8005abe:	1851      	adds	r1, r2, r1
 8005ac0:	6039      	str	r1, [r7, #0]
 8005ac2:	4649      	mov	r1, r9
 8005ac4:	414b      	adcs	r3, r1
 8005ac6:	607b      	str	r3, [r7, #4]
 8005ac8:	f04f 0200 	mov.w	r2, #0
 8005acc:	f04f 0300 	mov.w	r3, #0
 8005ad0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005ad4:	4659      	mov	r1, fp
 8005ad6:	00cb      	lsls	r3, r1, #3
 8005ad8:	4651      	mov	r1, sl
 8005ada:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005ade:	4651      	mov	r1, sl
 8005ae0:	00ca      	lsls	r2, r1, #3
 8005ae2:	4610      	mov	r0, r2
 8005ae4:	4619      	mov	r1, r3
 8005ae6:	4603      	mov	r3, r0
 8005ae8:	4642      	mov	r2, r8
 8005aea:	189b      	adds	r3, r3, r2
 8005aec:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005aee:	464b      	mov	r3, r9
 8005af0:	460a      	mov	r2, r1
 8005af2:	eb42 0303 	adc.w	r3, r2, r3
 8005af6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005af8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005afc:	685b      	ldr	r3, [r3, #4]
 8005afe:	2200      	movs	r2, #0
 8005b00:	663b      	str	r3, [r7, #96]	@ 0x60
 8005b02:	667a      	str	r2, [r7, #100]	@ 0x64
 8005b04:	f04f 0200 	mov.w	r2, #0
 8005b08:	f04f 0300 	mov.w	r3, #0
 8005b0c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005b10:	4649      	mov	r1, r9
 8005b12:	008b      	lsls	r3, r1, #2
 8005b14:	4641      	mov	r1, r8
 8005b16:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005b1a:	4641      	mov	r1, r8
 8005b1c:	008a      	lsls	r2, r1, #2
 8005b1e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005b22:	f7fa fbbd 	bl	80002a0 <__aeabi_uldivmod>
 8005b26:	4602      	mov	r2, r0
 8005b28:	460b      	mov	r3, r1
 8005b2a:	4b0d      	ldr	r3, [pc, #52]	@ (8005b60 <UART_SetConfig+0x4e4>)
 8005b2c:	fba3 1302 	umull	r1, r3, r3, r2
 8005b30:	095b      	lsrs	r3, r3, #5
 8005b32:	2164      	movs	r1, #100	@ 0x64
 8005b34:	fb01 f303 	mul.w	r3, r1, r3
 8005b38:	1ad3      	subs	r3, r2, r3
 8005b3a:	011b      	lsls	r3, r3, #4
 8005b3c:	3332      	adds	r3, #50	@ 0x32
 8005b3e:	4a08      	ldr	r2, [pc, #32]	@ (8005b60 <UART_SetConfig+0x4e4>)
 8005b40:	fba2 2303 	umull	r2, r3, r2, r3
 8005b44:	095b      	lsrs	r3, r3, #5
 8005b46:	f003 020f 	and.w	r2, r3, #15
 8005b4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	4422      	add	r2, r4
 8005b52:	609a      	str	r2, [r3, #8]
}
 8005b54:	bf00      	nop
 8005b56:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005b60:	51eb851f 	.word	0x51eb851f

08005b64 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005b64:	b084      	sub	sp, #16
 8005b66:	b580      	push	{r7, lr}
 8005b68:	b084      	sub	sp, #16
 8005b6a:	af00      	add	r7, sp, #0
 8005b6c:	6078      	str	r0, [r7, #4]
 8005b6e:	f107 001c 	add.w	r0, r7, #28
 8005b72:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005b76:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8005b7a:	2b01      	cmp	r3, #1
 8005b7c:	d123      	bne.n	8005bc6 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b82:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	68db      	ldr	r3, [r3, #12]
 8005b8e:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8005b92:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005b96:	687a      	ldr	r2, [r7, #4]
 8005b98:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	68db      	ldr	r3, [r3, #12]
 8005b9e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005ba6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005baa:	2b01      	cmp	r3, #1
 8005bac:	d105      	bne.n	8005bba <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	68db      	ldr	r3, [r3, #12]
 8005bb2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005bba:	6878      	ldr	r0, [r7, #4]
 8005bbc:	f001 fae2 	bl	8007184 <USB_CoreReset>
 8005bc0:	4603      	mov	r3, r0
 8005bc2:	73fb      	strb	r3, [r7, #15]
 8005bc4:	e01b      	b.n	8005bfe <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	68db      	ldr	r3, [r3, #12]
 8005bca:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005bd2:	6878      	ldr	r0, [r7, #4]
 8005bd4:	f001 fad6 	bl	8007184 <USB_CoreReset>
 8005bd8:	4603      	mov	r3, r0
 8005bda:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005bdc:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d106      	bne.n	8005bf2 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005be8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	639a      	str	r2, [r3, #56]	@ 0x38
 8005bf0:	e005      	b.n	8005bfe <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bf6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005bfe:	7fbb      	ldrb	r3, [r7, #30]
 8005c00:	2b01      	cmp	r3, #1
 8005c02:	d10b      	bne.n	8005c1c <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	689b      	ldr	r3, [r3, #8]
 8005c08:	f043 0206 	orr.w	r2, r3, #6
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	689b      	ldr	r3, [r3, #8]
 8005c14:	f043 0220 	orr.w	r2, r3, #32
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005c1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c1e:	4618      	mov	r0, r3
 8005c20:	3710      	adds	r7, #16
 8005c22:	46bd      	mov	sp, r7
 8005c24:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005c28:	b004      	add	sp, #16
 8005c2a:	4770      	bx	lr

08005c2c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	b087      	sub	sp, #28
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	60f8      	str	r0, [r7, #12]
 8005c34:	60b9      	str	r1, [r7, #8]
 8005c36:	4613      	mov	r3, r2
 8005c38:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005c3a:	79fb      	ldrb	r3, [r7, #7]
 8005c3c:	2b02      	cmp	r3, #2
 8005c3e:	d165      	bne.n	8005d0c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005c40:	68bb      	ldr	r3, [r7, #8]
 8005c42:	4a41      	ldr	r2, [pc, #260]	@ (8005d48 <USB_SetTurnaroundTime+0x11c>)
 8005c44:	4293      	cmp	r3, r2
 8005c46:	d906      	bls.n	8005c56 <USB_SetTurnaroundTime+0x2a>
 8005c48:	68bb      	ldr	r3, [r7, #8]
 8005c4a:	4a40      	ldr	r2, [pc, #256]	@ (8005d4c <USB_SetTurnaroundTime+0x120>)
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d202      	bcs.n	8005c56 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005c50:	230f      	movs	r3, #15
 8005c52:	617b      	str	r3, [r7, #20]
 8005c54:	e062      	b.n	8005d1c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005c56:	68bb      	ldr	r3, [r7, #8]
 8005c58:	4a3c      	ldr	r2, [pc, #240]	@ (8005d4c <USB_SetTurnaroundTime+0x120>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d306      	bcc.n	8005c6c <USB_SetTurnaroundTime+0x40>
 8005c5e:	68bb      	ldr	r3, [r7, #8]
 8005c60:	4a3b      	ldr	r2, [pc, #236]	@ (8005d50 <USB_SetTurnaroundTime+0x124>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d202      	bcs.n	8005c6c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005c66:	230e      	movs	r3, #14
 8005c68:	617b      	str	r3, [r7, #20]
 8005c6a:	e057      	b.n	8005d1c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005c6c:	68bb      	ldr	r3, [r7, #8]
 8005c6e:	4a38      	ldr	r2, [pc, #224]	@ (8005d50 <USB_SetTurnaroundTime+0x124>)
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d306      	bcc.n	8005c82 <USB_SetTurnaroundTime+0x56>
 8005c74:	68bb      	ldr	r3, [r7, #8]
 8005c76:	4a37      	ldr	r2, [pc, #220]	@ (8005d54 <USB_SetTurnaroundTime+0x128>)
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	d202      	bcs.n	8005c82 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005c7c:	230d      	movs	r3, #13
 8005c7e:	617b      	str	r3, [r7, #20]
 8005c80:	e04c      	b.n	8005d1c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005c82:	68bb      	ldr	r3, [r7, #8]
 8005c84:	4a33      	ldr	r2, [pc, #204]	@ (8005d54 <USB_SetTurnaroundTime+0x128>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d306      	bcc.n	8005c98 <USB_SetTurnaroundTime+0x6c>
 8005c8a:	68bb      	ldr	r3, [r7, #8]
 8005c8c:	4a32      	ldr	r2, [pc, #200]	@ (8005d58 <USB_SetTurnaroundTime+0x12c>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d802      	bhi.n	8005c98 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005c92:	230c      	movs	r3, #12
 8005c94:	617b      	str	r3, [r7, #20]
 8005c96:	e041      	b.n	8005d1c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005c98:	68bb      	ldr	r3, [r7, #8]
 8005c9a:	4a2f      	ldr	r2, [pc, #188]	@ (8005d58 <USB_SetTurnaroundTime+0x12c>)
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	d906      	bls.n	8005cae <USB_SetTurnaroundTime+0x82>
 8005ca0:	68bb      	ldr	r3, [r7, #8]
 8005ca2:	4a2e      	ldr	r2, [pc, #184]	@ (8005d5c <USB_SetTurnaroundTime+0x130>)
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	d802      	bhi.n	8005cae <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005ca8:	230b      	movs	r3, #11
 8005caa:	617b      	str	r3, [r7, #20]
 8005cac:	e036      	b.n	8005d1c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005cae:	68bb      	ldr	r3, [r7, #8]
 8005cb0:	4a2a      	ldr	r2, [pc, #168]	@ (8005d5c <USB_SetTurnaroundTime+0x130>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d906      	bls.n	8005cc4 <USB_SetTurnaroundTime+0x98>
 8005cb6:	68bb      	ldr	r3, [r7, #8]
 8005cb8:	4a29      	ldr	r2, [pc, #164]	@ (8005d60 <USB_SetTurnaroundTime+0x134>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d802      	bhi.n	8005cc4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005cbe:	230a      	movs	r3, #10
 8005cc0:	617b      	str	r3, [r7, #20]
 8005cc2:	e02b      	b.n	8005d1c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005cc4:	68bb      	ldr	r3, [r7, #8]
 8005cc6:	4a26      	ldr	r2, [pc, #152]	@ (8005d60 <USB_SetTurnaroundTime+0x134>)
 8005cc8:	4293      	cmp	r3, r2
 8005cca:	d906      	bls.n	8005cda <USB_SetTurnaroundTime+0xae>
 8005ccc:	68bb      	ldr	r3, [r7, #8]
 8005cce:	4a25      	ldr	r2, [pc, #148]	@ (8005d64 <USB_SetTurnaroundTime+0x138>)
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	d202      	bcs.n	8005cda <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005cd4:	2309      	movs	r3, #9
 8005cd6:	617b      	str	r3, [r7, #20]
 8005cd8:	e020      	b.n	8005d1c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005cda:	68bb      	ldr	r3, [r7, #8]
 8005cdc:	4a21      	ldr	r2, [pc, #132]	@ (8005d64 <USB_SetTurnaroundTime+0x138>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d306      	bcc.n	8005cf0 <USB_SetTurnaroundTime+0xc4>
 8005ce2:	68bb      	ldr	r3, [r7, #8]
 8005ce4:	4a20      	ldr	r2, [pc, #128]	@ (8005d68 <USB_SetTurnaroundTime+0x13c>)
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d802      	bhi.n	8005cf0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005cea:	2308      	movs	r3, #8
 8005cec:	617b      	str	r3, [r7, #20]
 8005cee:	e015      	b.n	8005d1c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005cf0:	68bb      	ldr	r3, [r7, #8]
 8005cf2:	4a1d      	ldr	r2, [pc, #116]	@ (8005d68 <USB_SetTurnaroundTime+0x13c>)
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	d906      	bls.n	8005d06 <USB_SetTurnaroundTime+0xda>
 8005cf8:	68bb      	ldr	r3, [r7, #8]
 8005cfa:	4a1c      	ldr	r2, [pc, #112]	@ (8005d6c <USB_SetTurnaroundTime+0x140>)
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	d202      	bcs.n	8005d06 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005d00:	2307      	movs	r3, #7
 8005d02:	617b      	str	r3, [r7, #20]
 8005d04:	e00a      	b.n	8005d1c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005d06:	2306      	movs	r3, #6
 8005d08:	617b      	str	r3, [r7, #20]
 8005d0a:	e007      	b.n	8005d1c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005d0c:	79fb      	ldrb	r3, [r7, #7]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d102      	bne.n	8005d18 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005d12:	2309      	movs	r3, #9
 8005d14:	617b      	str	r3, [r7, #20]
 8005d16:	e001      	b.n	8005d1c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005d18:	2309      	movs	r3, #9
 8005d1a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	68db      	ldr	r3, [r3, #12]
 8005d20:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	68da      	ldr	r2, [r3, #12]
 8005d2c:	697b      	ldr	r3, [r7, #20]
 8005d2e:	029b      	lsls	r3, r3, #10
 8005d30:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8005d34:	431a      	orrs	r2, r3
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005d3a:	2300      	movs	r3, #0
}
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	371c      	adds	r7, #28
 8005d40:	46bd      	mov	sp, r7
 8005d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d46:	4770      	bx	lr
 8005d48:	00d8acbf 	.word	0x00d8acbf
 8005d4c:	00e4e1c0 	.word	0x00e4e1c0
 8005d50:	00f42400 	.word	0x00f42400
 8005d54:	01067380 	.word	0x01067380
 8005d58:	011a499f 	.word	0x011a499f
 8005d5c:	01312cff 	.word	0x01312cff
 8005d60:	014ca43f 	.word	0x014ca43f
 8005d64:	016e3600 	.word	0x016e3600
 8005d68:	01a6ab1f 	.word	0x01a6ab1f
 8005d6c:	01e84800 	.word	0x01e84800

08005d70 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005d70:	b480      	push	{r7}
 8005d72:	b083      	sub	sp, #12
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	689b      	ldr	r3, [r3, #8]
 8005d7c:	f043 0201 	orr.w	r2, r3, #1
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005d84:	2300      	movs	r3, #0
}
 8005d86:	4618      	mov	r0, r3
 8005d88:	370c      	adds	r7, #12
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d90:	4770      	bx	lr

08005d92 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005d92:	b480      	push	{r7}
 8005d94:	b083      	sub	sp, #12
 8005d96:	af00      	add	r7, sp, #0
 8005d98:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	689b      	ldr	r3, [r3, #8]
 8005d9e:	f023 0201 	bic.w	r2, r3, #1
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005da6:	2300      	movs	r3, #0
}
 8005da8:	4618      	mov	r0, r3
 8005daa:	370c      	adds	r7, #12
 8005dac:	46bd      	mov	sp, r7
 8005dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db2:	4770      	bx	lr

08005db4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b084      	sub	sp, #16
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
 8005dbc:	460b      	mov	r3, r1
 8005dbe:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	68db      	ldr	r3, [r3, #12]
 8005dc8:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005dd0:	78fb      	ldrb	r3, [r7, #3]
 8005dd2:	2b01      	cmp	r3, #1
 8005dd4:	d115      	bne.n	8005e02 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	68db      	ldr	r3, [r3, #12]
 8005dda:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005de2:	200a      	movs	r0, #10
 8005de4:	f7fb fd14 	bl	8001810 <HAL_Delay>
      ms += 10U;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	330a      	adds	r3, #10
 8005dec:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005dee:	6878      	ldr	r0, [r7, #4]
 8005df0:	f001 f939 	bl	8007066 <USB_GetMode>
 8005df4:	4603      	mov	r3, r0
 8005df6:	2b01      	cmp	r3, #1
 8005df8:	d01e      	beq.n	8005e38 <USB_SetCurrentMode+0x84>
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	2bc7      	cmp	r3, #199	@ 0xc7
 8005dfe:	d9f0      	bls.n	8005de2 <USB_SetCurrentMode+0x2e>
 8005e00:	e01a      	b.n	8005e38 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005e02:	78fb      	ldrb	r3, [r7, #3]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d115      	bne.n	8005e34 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	68db      	ldr	r3, [r3, #12]
 8005e0c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005e14:	200a      	movs	r0, #10
 8005e16:	f7fb fcfb 	bl	8001810 <HAL_Delay>
      ms += 10U;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	330a      	adds	r3, #10
 8005e1e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005e20:	6878      	ldr	r0, [r7, #4]
 8005e22:	f001 f920 	bl	8007066 <USB_GetMode>
 8005e26:	4603      	mov	r3, r0
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d005      	beq.n	8005e38 <USB_SetCurrentMode+0x84>
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	2bc7      	cmp	r3, #199	@ 0xc7
 8005e30:	d9f0      	bls.n	8005e14 <USB_SetCurrentMode+0x60>
 8005e32:	e001      	b.n	8005e38 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005e34:	2301      	movs	r3, #1
 8005e36:	e005      	b.n	8005e44 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	2bc8      	cmp	r3, #200	@ 0xc8
 8005e3c:	d101      	bne.n	8005e42 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005e3e:	2301      	movs	r3, #1
 8005e40:	e000      	b.n	8005e44 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005e42:	2300      	movs	r3, #0
}
 8005e44:	4618      	mov	r0, r3
 8005e46:	3710      	adds	r7, #16
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	bd80      	pop	{r7, pc}

08005e4c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005e4c:	b084      	sub	sp, #16
 8005e4e:	b580      	push	{r7, lr}
 8005e50:	b086      	sub	sp, #24
 8005e52:	af00      	add	r7, sp, #0
 8005e54:	6078      	str	r0, [r7, #4]
 8005e56:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8005e5a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005e5e:	2300      	movs	r3, #0
 8005e60:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005e66:	2300      	movs	r3, #0
 8005e68:	613b      	str	r3, [r7, #16]
 8005e6a:	e009      	b.n	8005e80 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005e6c:	687a      	ldr	r2, [r7, #4]
 8005e6e:	693b      	ldr	r3, [r7, #16]
 8005e70:	3340      	adds	r3, #64	@ 0x40
 8005e72:	009b      	lsls	r3, r3, #2
 8005e74:	4413      	add	r3, r2
 8005e76:	2200      	movs	r2, #0
 8005e78:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005e7a:	693b      	ldr	r3, [r7, #16]
 8005e7c:	3301      	adds	r3, #1
 8005e7e:	613b      	str	r3, [r7, #16]
 8005e80:	693b      	ldr	r3, [r7, #16]
 8005e82:	2b0e      	cmp	r3, #14
 8005e84:	d9f2      	bls.n	8005e6c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005e86:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d11c      	bne.n	8005ec8 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e94:	685b      	ldr	r3, [r3, #4]
 8005e96:	68fa      	ldr	r2, [r7, #12]
 8005e98:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005e9c:	f043 0302 	orr.w	r3, r3, #2
 8005ea0:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ea6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005eb2:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ebe:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	639a      	str	r2, [r3, #56]	@ 0x38
 8005ec6:	e00b      	b.n	8005ee0 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ecc:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ed8:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005ee6:	461a      	mov	r2, r3
 8005ee8:	2300      	movs	r3, #0
 8005eea:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005eec:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8005ef0:	2b01      	cmp	r3, #1
 8005ef2:	d10d      	bne.n	8005f10 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005ef4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d104      	bne.n	8005f06 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005efc:	2100      	movs	r1, #0
 8005efe:	6878      	ldr	r0, [r7, #4]
 8005f00:	f000 f968 	bl	80061d4 <USB_SetDevSpeed>
 8005f04:	e008      	b.n	8005f18 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005f06:	2101      	movs	r1, #1
 8005f08:	6878      	ldr	r0, [r7, #4]
 8005f0a:	f000 f963 	bl	80061d4 <USB_SetDevSpeed>
 8005f0e:	e003      	b.n	8005f18 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005f10:	2103      	movs	r1, #3
 8005f12:	6878      	ldr	r0, [r7, #4]
 8005f14:	f000 f95e 	bl	80061d4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005f18:	2110      	movs	r1, #16
 8005f1a:	6878      	ldr	r0, [r7, #4]
 8005f1c:	f000 f8fa 	bl	8006114 <USB_FlushTxFifo>
 8005f20:	4603      	mov	r3, r0
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d001      	beq.n	8005f2a <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8005f26:	2301      	movs	r3, #1
 8005f28:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005f2a:	6878      	ldr	r0, [r7, #4]
 8005f2c:	f000 f924 	bl	8006178 <USB_FlushRxFifo>
 8005f30:	4603      	mov	r3, r0
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d001      	beq.n	8005f3a <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8005f36:	2301      	movs	r3, #1
 8005f38:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f40:	461a      	mov	r2, r3
 8005f42:	2300      	movs	r3, #0
 8005f44:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f4c:	461a      	mov	r2, r3
 8005f4e:	2300      	movs	r3, #0
 8005f50:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f58:	461a      	mov	r2, r3
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005f5e:	2300      	movs	r3, #0
 8005f60:	613b      	str	r3, [r7, #16]
 8005f62:	e043      	b.n	8005fec <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005f64:	693b      	ldr	r3, [r7, #16]
 8005f66:	015a      	lsls	r2, r3, #5
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	4413      	add	r3, r2
 8005f6c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005f76:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005f7a:	d118      	bne.n	8005fae <USB_DevInit+0x162>
    {
      if (i == 0U)
 8005f7c:	693b      	ldr	r3, [r7, #16]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d10a      	bne.n	8005f98 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005f82:	693b      	ldr	r3, [r7, #16]
 8005f84:	015a      	lsls	r2, r3, #5
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	4413      	add	r3, r2
 8005f8a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f8e:	461a      	mov	r2, r3
 8005f90:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005f94:	6013      	str	r3, [r2, #0]
 8005f96:	e013      	b.n	8005fc0 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005f98:	693b      	ldr	r3, [r7, #16]
 8005f9a:	015a      	lsls	r2, r3, #5
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	4413      	add	r3, r2
 8005fa0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005fa4:	461a      	mov	r2, r3
 8005fa6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005faa:	6013      	str	r3, [r2, #0]
 8005fac:	e008      	b.n	8005fc0 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005fae:	693b      	ldr	r3, [r7, #16]
 8005fb0:	015a      	lsls	r2, r3, #5
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	4413      	add	r3, r2
 8005fb6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005fba:	461a      	mov	r2, r3
 8005fbc:	2300      	movs	r3, #0
 8005fbe:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005fc0:	693b      	ldr	r3, [r7, #16]
 8005fc2:	015a      	lsls	r2, r3, #5
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	4413      	add	r3, r2
 8005fc8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005fcc:	461a      	mov	r2, r3
 8005fce:	2300      	movs	r3, #0
 8005fd0:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005fd2:	693b      	ldr	r3, [r7, #16]
 8005fd4:	015a      	lsls	r2, r3, #5
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	4413      	add	r3, r2
 8005fda:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005fde:	461a      	mov	r2, r3
 8005fe0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005fe4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005fe6:	693b      	ldr	r3, [r7, #16]
 8005fe8:	3301      	adds	r3, #1
 8005fea:	613b      	str	r3, [r7, #16]
 8005fec:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005ff0:	461a      	mov	r2, r3
 8005ff2:	693b      	ldr	r3, [r7, #16]
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d3b5      	bcc.n	8005f64 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005ff8:	2300      	movs	r3, #0
 8005ffa:	613b      	str	r3, [r7, #16]
 8005ffc:	e043      	b.n	8006086 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005ffe:	693b      	ldr	r3, [r7, #16]
 8006000:	015a      	lsls	r2, r3, #5
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	4413      	add	r3, r2
 8006006:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006010:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006014:	d118      	bne.n	8006048 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8006016:	693b      	ldr	r3, [r7, #16]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d10a      	bne.n	8006032 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800601c:	693b      	ldr	r3, [r7, #16]
 800601e:	015a      	lsls	r2, r3, #5
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	4413      	add	r3, r2
 8006024:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006028:	461a      	mov	r2, r3
 800602a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800602e:	6013      	str	r3, [r2, #0]
 8006030:	e013      	b.n	800605a <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006032:	693b      	ldr	r3, [r7, #16]
 8006034:	015a      	lsls	r2, r3, #5
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	4413      	add	r3, r2
 800603a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800603e:	461a      	mov	r2, r3
 8006040:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006044:	6013      	str	r3, [r2, #0]
 8006046:	e008      	b.n	800605a <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006048:	693b      	ldr	r3, [r7, #16]
 800604a:	015a      	lsls	r2, r3, #5
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	4413      	add	r3, r2
 8006050:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006054:	461a      	mov	r2, r3
 8006056:	2300      	movs	r3, #0
 8006058:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800605a:	693b      	ldr	r3, [r7, #16]
 800605c:	015a      	lsls	r2, r3, #5
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	4413      	add	r3, r2
 8006062:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006066:	461a      	mov	r2, r3
 8006068:	2300      	movs	r3, #0
 800606a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800606c:	693b      	ldr	r3, [r7, #16]
 800606e:	015a      	lsls	r2, r3, #5
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	4413      	add	r3, r2
 8006074:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006078:	461a      	mov	r2, r3
 800607a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800607e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006080:	693b      	ldr	r3, [r7, #16]
 8006082:	3301      	adds	r3, #1
 8006084:	613b      	str	r3, [r7, #16]
 8006086:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800608a:	461a      	mov	r2, r3
 800608c:	693b      	ldr	r3, [r7, #16]
 800608e:	4293      	cmp	r3, r2
 8006090:	d3b5      	bcc.n	8005ffe <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006098:	691b      	ldr	r3, [r3, #16]
 800609a:	68fa      	ldr	r2, [r7, #12]
 800609c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80060a0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80060a4:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2200      	movs	r2, #0
 80060aa:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80060b2:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80060b4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d105      	bne.n	80060c8 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	699b      	ldr	r3, [r3, #24]
 80060c0:	f043 0210 	orr.w	r2, r3, #16
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	699a      	ldr	r2, [r3, #24]
 80060cc:	4b10      	ldr	r3, [pc, #64]	@ (8006110 <USB_DevInit+0x2c4>)
 80060ce:	4313      	orrs	r3, r2
 80060d0:	687a      	ldr	r2, [r7, #4]
 80060d2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80060d4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d005      	beq.n	80060e8 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	699b      	ldr	r3, [r3, #24]
 80060e0:	f043 0208 	orr.w	r2, r3, #8
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80060e8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80060ec:	2b01      	cmp	r3, #1
 80060ee:	d107      	bne.n	8006100 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	699b      	ldr	r3, [r3, #24]
 80060f4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80060f8:	f043 0304 	orr.w	r3, r3, #4
 80060fc:	687a      	ldr	r2, [r7, #4]
 80060fe:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006100:	7dfb      	ldrb	r3, [r7, #23]
}
 8006102:	4618      	mov	r0, r3
 8006104:	3718      	adds	r7, #24
 8006106:	46bd      	mov	sp, r7
 8006108:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800610c:	b004      	add	sp, #16
 800610e:	4770      	bx	lr
 8006110:	803c3800 	.word	0x803c3800

08006114 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006114:	b480      	push	{r7}
 8006116:	b085      	sub	sp, #20
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
 800611c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800611e:	2300      	movs	r3, #0
 8006120:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	3301      	adds	r3, #1
 8006126:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800612e:	d901      	bls.n	8006134 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006130:	2303      	movs	r3, #3
 8006132:	e01b      	b.n	800616c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	691b      	ldr	r3, [r3, #16]
 8006138:	2b00      	cmp	r3, #0
 800613a:	daf2      	bge.n	8006122 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800613c:	2300      	movs	r3, #0
 800613e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	019b      	lsls	r3, r3, #6
 8006144:	f043 0220 	orr.w	r2, r3, #32
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	3301      	adds	r3, #1
 8006150:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006158:	d901      	bls.n	800615e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800615a:	2303      	movs	r3, #3
 800615c:	e006      	b.n	800616c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	691b      	ldr	r3, [r3, #16]
 8006162:	f003 0320 	and.w	r3, r3, #32
 8006166:	2b20      	cmp	r3, #32
 8006168:	d0f0      	beq.n	800614c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800616a:	2300      	movs	r3, #0
}
 800616c:	4618      	mov	r0, r3
 800616e:	3714      	adds	r7, #20
 8006170:	46bd      	mov	sp, r7
 8006172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006176:	4770      	bx	lr

08006178 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006178:	b480      	push	{r7}
 800617a:	b085      	sub	sp, #20
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006180:	2300      	movs	r3, #0
 8006182:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	3301      	adds	r3, #1
 8006188:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006190:	d901      	bls.n	8006196 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006192:	2303      	movs	r3, #3
 8006194:	e018      	b.n	80061c8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	691b      	ldr	r3, [r3, #16]
 800619a:	2b00      	cmp	r3, #0
 800619c:	daf2      	bge.n	8006184 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800619e:	2300      	movs	r3, #0
 80061a0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	2210      	movs	r2, #16
 80061a6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	3301      	adds	r3, #1
 80061ac:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80061b4:	d901      	bls.n	80061ba <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80061b6:	2303      	movs	r3, #3
 80061b8:	e006      	b.n	80061c8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	691b      	ldr	r3, [r3, #16]
 80061be:	f003 0310 	and.w	r3, r3, #16
 80061c2:	2b10      	cmp	r3, #16
 80061c4:	d0f0      	beq.n	80061a8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80061c6:	2300      	movs	r3, #0
}
 80061c8:	4618      	mov	r0, r3
 80061ca:	3714      	adds	r7, #20
 80061cc:	46bd      	mov	sp, r7
 80061ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d2:	4770      	bx	lr

080061d4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80061d4:	b480      	push	{r7}
 80061d6:	b085      	sub	sp, #20
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
 80061dc:	460b      	mov	r3, r1
 80061de:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80061ea:	681a      	ldr	r2, [r3, #0]
 80061ec:	78fb      	ldrb	r3, [r7, #3]
 80061ee:	68f9      	ldr	r1, [r7, #12]
 80061f0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80061f4:	4313      	orrs	r3, r2
 80061f6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80061f8:	2300      	movs	r3, #0
}
 80061fa:	4618      	mov	r0, r3
 80061fc:	3714      	adds	r7, #20
 80061fe:	46bd      	mov	sp, r7
 8006200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006204:	4770      	bx	lr

08006206 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8006206:	b480      	push	{r7}
 8006208:	b087      	sub	sp, #28
 800620a:	af00      	add	r7, sp, #0
 800620c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006212:	693b      	ldr	r3, [r7, #16]
 8006214:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006218:	689b      	ldr	r3, [r3, #8]
 800621a:	f003 0306 	and.w	r3, r3, #6
 800621e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d102      	bne.n	800622c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006226:	2300      	movs	r3, #0
 8006228:	75fb      	strb	r3, [r7, #23]
 800622a:	e00a      	b.n	8006242 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	2b02      	cmp	r3, #2
 8006230:	d002      	beq.n	8006238 <USB_GetDevSpeed+0x32>
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	2b06      	cmp	r3, #6
 8006236:	d102      	bne.n	800623e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006238:	2302      	movs	r3, #2
 800623a:	75fb      	strb	r3, [r7, #23]
 800623c:	e001      	b.n	8006242 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800623e:	230f      	movs	r3, #15
 8006240:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006242:	7dfb      	ldrb	r3, [r7, #23]
}
 8006244:	4618      	mov	r0, r3
 8006246:	371c      	adds	r7, #28
 8006248:	46bd      	mov	sp, r7
 800624a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624e:	4770      	bx	lr

08006250 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006250:	b480      	push	{r7}
 8006252:	b085      	sub	sp, #20
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
 8006258:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	781b      	ldrb	r3, [r3, #0]
 8006262:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	785b      	ldrb	r3, [r3, #1]
 8006268:	2b01      	cmp	r3, #1
 800626a:	d13a      	bne.n	80062e2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006272:	69da      	ldr	r2, [r3, #28]
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	781b      	ldrb	r3, [r3, #0]
 8006278:	f003 030f 	and.w	r3, r3, #15
 800627c:	2101      	movs	r1, #1
 800627e:	fa01 f303 	lsl.w	r3, r1, r3
 8006282:	b29b      	uxth	r3, r3
 8006284:	68f9      	ldr	r1, [r7, #12]
 8006286:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800628a:	4313      	orrs	r3, r2
 800628c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800628e:	68bb      	ldr	r3, [r7, #8]
 8006290:	015a      	lsls	r2, r3, #5
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	4413      	add	r3, r2
 8006296:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d155      	bne.n	8006350 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80062a4:	68bb      	ldr	r3, [r7, #8]
 80062a6:	015a      	lsls	r2, r3, #5
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	4413      	add	r3, r2
 80062ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80062b0:	681a      	ldr	r2, [r3, #0]
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	689b      	ldr	r3, [r3, #8]
 80062b6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	791b      	ldrb	r3, [r3, #4]
 80062be:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80062c0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80062c2:	68bb      	ldr	r3, [r7, #8]
 80062c4:	059b      	lsls	r3, r3, #22
 80062c6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80062c8:	4313      	orrs	r3, r2
 80062ca:	68ba      	ldr	r2, [r7, #8]
 80062cc:	0151      	lsls	r1, r2, #5
 80062ce:	68fa      	ldr	r2, [r7, #12]
 80062d0:	440a      	add	r2, r1
 80062d2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80062d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80062da:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80062de:	6013      	str	r3, [r2, #0]
 80062e0:	e036      	b.n	8006350 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80062e8:	69da      	ldr	r2, [r3, #28]
 80062ea:	683b      	ldr	r3, [r7, #0]
 80062ec:	781b      	ldrb	r3, [r3, #0]
 80062ee:	f003 030f 	and.w	r3, r3, #15
 80062f2:	2101      	movs	r1, #1
 80062f4:	fa01 f303 	lsl.w	r3, r1, r3
 80062f8:	041b      	lsls	r3, r3, #16
 80062fa:	68f9      	ldr	r1, [r7, #12]
 80062fc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006300:	4313      	orrs	r3, r2
 8006302:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006304:	68bb      	ldr	r3, [r7, #8]
 8006306:	015a      	lsls	r2, r3, #5
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	4413      	add	r3, r2
 800630c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006316:	2b00      	cmp	r3, #0
 8006318:	d11a      	bne.n	8006350 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800631a:	68bb      	ldr	r3, [r7, #8]
 800631c:	015a      	lsls	r2, r3, #5
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	4413      	add	r3, r2
 8006322:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006326:	681a      	ldr	r2, [r3, #0]
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	689b      	ldr	r3, [r3, #8]
 800632c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	791b      	ldrb	r3, [r3, #4]
 8006334:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006336:	430b      	orrs	r3, r1
 8006338:	4313      	orrs	r3, r2
 800633a:	68ba      	ldr	r2, [r7, #8]
 800633c:	0151      	lsls	r1, r2, #5
 800633e:	68fa      	ldr	r2, [r7, #12]
 8006340:	440a      	add	r2, r1
 8006342:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006346:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800634a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800634e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006350:	2300      	movs	r3, #0
}
 8006352:	4618      	mov	r0, r3
 8006354:	3714      	adds	r7, #20
 8006356:	46bd      	mov	sp, r7
 8006358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635c:	4770      	bx	lr
	...

08006360 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006360:	b480      	push	{r7}
 8006362:	b085      	sub	sp, #20
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
 8006368:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	781b      	ldrb	r3, [r3, #0]
 8006372:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	785b      	ldrb	r3, [r3, #1]
 8006378:	2b01      	cmp	r3, #1
 800637a:	d161      	bne.n	8006440 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800637c:	68bb      	ldr	r3, [r7, #8]
 800637e:	015a      	lsls	r2, r3, #5
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	4413      	add	r3, r2
 8006384:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800638e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006392:	d11f      	bne.n	80063d4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006394:	68bb      	ldr	r3, [r7, #8]
 8006396:	015a      	lsls	r2, r3, #5
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	4413      	add	r3, r2
 800639c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	68ba      	ldr	r2, [r7, #8]
 80063a4:	0151      	lsls	r1, r2, #5
 80063a6:	68fa      	ldr	r2, [r7, #12]
 80063a8:	440a      	add	r2, r1
 80063aa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80063ae:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80063b2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80063b4:	68bb      	ldr	r3, [r7, #8]
 80063b6:	015a      	lsls	r2, r3, #5
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	4413      	add	r3, r2
 80063bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	68ba      	ldr	r2, [r7, #8]
 80063c4:	0151      	lsls	r1, r2, #5
 80063c6:	68fa      	ldr	r2, [r7, #12]
 80063c8:	440a      	add	r2, r1
 80063ca:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80063ce:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80063d2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80063da:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	781b      	ldrb	r3, [r3, #0]
 80063e0:	f003 030f 	and.w	r3, r3, #15
 80063e4:	2101      	movs	r1, #1
 80063e6:	fa01 f303 	lsl.w	r3, r1, r3
 80063ea:	b29b      	uxth	r3, r3
 80063ec:	43db      	mvns	r3, r3
 80063ee:	68f9      	ldr	r1, [r7, #12]
 80063f0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80063f4:	4013      	ands	r3, r2
 80063f6:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80063fe:	69da      	ldr	r2, [r3, #28]
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	781b      	ldrb	r3, [r3, #0]
 8006404:	f003 030f 	and.w	r3, r3, #15
 8006408:	2101      	movs	r1, #1
 800640a:	fa01 f303 	lsl.w	r3, r1, r3
 800640e:	b29b      	uxth	r3, r3
 8006410:	43db      	mvns	r3, r3
 8006412:	68f9      	ldr	r1, [r7, #12]
 8006414:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006418:	4013      	ands	r3, r2
 800641a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800641c:	68bb      	ldr	r3, [r7, #8]
 800641e:	015a      	lsls	r2, r3, #5
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	4413      	add	r3, r2
 8006424:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006428:	681a      	ldr	r2, [r3, #0]
 800642a:	68bb      	ldr	r3, [r7, #8]
 800642c:	0159      	lsls	r1, r3, #5
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	440b      	add	r3, r1
 8006432:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006436:	4619      	mov	r1, r3
 8006438:	4b35      	ldr	r3, [pc, #212]	@ (8006510 <USB_DeactivateEndpoint+0x1b0>)
 800643a:	4013      	ands	r3, r2
 800643c:	600b      	str	r3, [r1, #0]
 800643e:	e060      	b.n	8006502 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006440:	68bb      	ldr	r3, [r7, #8]
 8006442:	015a      	lsls	r2, r3, #5
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	4413      	add	r3, r2
 8006448:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006452:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006456:	d11f      	bne.n	8006498 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006458:	68bb      	ldr	r3, [r7, #8]
 800645a:	015a      	lsls	r2, r3, #5
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	4413      	add	r3, r2
 8006460:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	68ba      	ldr	r2, [r7, #8]
 8006468:	0151      	lsls	r1, r2, #5
 800646a:	68fa      	ldr	r2, [r7, #12]
 800646c:	440a      	add	r2, r1
 800646e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006472:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006476:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006478:	68bb      	ldr	r3, [r7, #8]
 800647a:	015a      	lsls	r2, r3, #5
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	4413      	add	r3, r2
 8006480:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	68ba      	ldr	r2, [r7, #8]
 8006488:	0151      	lsls	r1, r2, #5
 800648a:	68fa      	ldr	r2, [r7, #12]
 800648c:	440a      	add	r2, r1
 800648e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006492:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006496:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800649e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	781b      	ldrb	r3, [r3, #0]
 80064a4:	f003 030f 	and.w	r3, r3, #15
 80064a8:	2101      	movs	r1, #1
 80064aa:	fa01 f303 	lsl.w	r3, r1, r3
 80064ae:	041b      	lsls	r3, r3, #16
 80064b0:	43db      	mvns	r3, r3
 80064b2:	68f9      	ldr	r1, [r7, #12]
 80064b4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80064b8:	4013      	ands	r3, r2
 80064ba:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80064c2:	69da      	ldr	r2, [r3, #28]
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	781b      	ldrb	r3, [r3, #0]
 80064c8:	f003 030f 	and.w	r3, r3, #15
 80064cc:	2101      	movs	r1, #1
 80064ce:	fa01 f303 	lsl.w	r3, r1, r3
 80064d2:	041b      	lsls	r3, r3, #16
 80064d4:	43db      	mvns	r3, r3
 80064d6:	68f9      	ldr	r1, [r7, #12]
 80064d8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80064dc:	4013      	ands	r3, r2
 80064de:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80064e0:	68bb      	ldr	r3, [r7, #8]
 80064e2:	015a      	lsls	r2, r3, #5
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	4413      	add	r3, r2
 80064e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064ec:	681a      	ldr	r2, [r3, #0]
 80064ee:	68bb      	ldr	r3, [r7, #8]
 80064f0:	0159      	lsls	r1, r3, #5
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	440b      	add	r3, r1
 80064f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064fa:	4619      	mov	r1, r3
 80064fc:	4b05      	ldr	r3, [pc, #20]	@ (8006514 <USB_DeactivateEndpoint+0x1b4>)
 80064fe:	4013      	ands	r3, r2
 8006500:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006502:	2300      	movs	r3, #0
}
 8006504:	4618      	mov	r0, r3
 8006506:	3714      	adds	r7, #20
 8006508:	46bd      	mov	sp, r7
 800650a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650e:	4770      	bx	lr
 8006510:	ec337800 	.word	0xec337800
 8006514:	eff37800 	.word	0xeff37800

08006518 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006518:	b580      	push	{r7, lr}
 800651a:	b08a      	sub	sp, #40	@ 0x28
 800651c:	af02      	add	r7, sp, #8
 800651e:	60f8      	str	r0, [r7, #12]
 8006520:	60b9      	str	r1, [r7, #8]
 8006522:	4613      	mov	r3, r2
 8006524:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800652a:	68bb      	ldr	r3, [r7, #8]
 800652c:	781b      	ldrb	r3, [r3, #0]
 800652e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006530:	68bb      	ldr	r3, [r7, #8]
 8006532:	785b      	ldrb	r3, [r3, #1]
 8006534:	2b01      	cmp	r3, #1
 8006536:	f040 817a 	bne.w	800682e <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800653a:	68bb      	ldr	r3, [r7, #8]
 800653c:	691b      	ldr	r3, [r3, #16]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d132      	bne.n	80065a8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006542:	69bb      	ldr	r3, [r7, #24]
 8006544:	015a      	lsls	r2, r3, #5
 8006546:	69fb      	ldr	r3, [r7, #28]
 8006548:	4413      	add	r3, r2
 800654a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800654e:	691b      	ldr	r3, [r3, #16]
 8006550:	69ba      	ldr	r2, [r7, #24]
 8006552:	0151      	lsls	r1, r2, #5
 8006554:	69fa      	ldr	r2, [r7, #28]
 8006556:	440a      	add	r2, r1
 8006558:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800655c:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006560:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006564:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006566:	69bb      	ldr	r3, [r7, #24]
 8006568:	015a      	lsls	r2, r3, #5
 800656a:	69fb      	ldr	r3, [r7, #28]
 800656c:	4413      	add	r3, r2
 800656e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006572:	691b      	ldr	r3, [r3, #16]
 8006574:	69ba      	ldr	r2, [r7, #24]
 8006576:	0151      	lsls	r1, r2, #5
 8006578:	69fa      	ldr	r2, [r7, #28]
 800657a:	440a      	add	r2, r1
 800657c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006580:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006584:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006586:	69bb      	ldr	r3, [r7, #24]
 8006588:	015a      	lsls	r2, r3, #5
 800658a:	69fb      	ldr	r3, [r7, #28]
 800658c:	4413      	add	r3, r2
 800658e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006592:	691b      	ldr	r3, [r3, #16]
 8006594:	69ba      	ldr	r2, [r7, #24]
 8006596:	0151      	lsls	r1, r2, #5
 8006598:	69fa      	ldr	r2, [r7, #28]
 800659a:	440a      	add	r2, r1
 800659c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80065a0:	0cdb      	lsrs	r3, r3, #19
 80065a2:	04db      	lsls	r3, r3, #19
 80065a4:	6113      	str	r3, [r2, #16]
 80065a6:	e092      	b.n	80066ce <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80065a8:	69bb      	ldr	r3, [r7, #24]
 80065aa:	015a      	lsls	r2, r3, #5
 80065ac:	69fb      	ldr	r3, [r7, #28]
 80065ae:	4413      	add	r3, r2
 80065b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80065b4:	691b      	ldr	r3, [r3, #16]
 80065b6:	69ba      	ldr	r2, [r7, #24]
 80065b8:	0151      	lsls	r1, r2, #5
 80065ba:	69fa      	ldr	r2, [r7, #28]
 80065bc:	440a      	add	r2, r1
 80065be:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80065c2:	0cdb      	lsrs	r3, r3, #19
 80065c4:	04db      	lsls	r3, r3, #19
 80065c6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80065c8:	69bb      	ldr	r3, [r7, #24]
 80065ca:	015a      	lsls	r2, r3, #5
 80065cc:	69fb      	ldr	r3, [r7, #28]
 80065ce:	4413      	add	r3, r2
 80065d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80065d4:	691b      	ldr	r3, [r3, #16]
 80065d6:	69ba      	ldr	r2, [r7, #24]
 80065d8:	0151      	lsls	r1, r2, #5
 80065da:	69fa      	ldr	r2, [r7, #28]
 80065dc:	440a      	add	r2, r1
 80065de:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80065e2:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80065e6:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80065ea:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 80065ec:	69bb      	ldr	r3, [r7, #24]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d11a      	bne.n	8006628 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80065f2:	68bb      	ldr	r3, [r7, #8]
 80065f4:	691a      	ldr	r2, [r3, #16]
 80065f6:	68bb      	ldr	r3, [r7, #8]
 80065f8:	689b      	ldr	r3, [r3, #8]
 80065fa:	429a      	cmp	r2, r3
 80065fc:	d903      	bls.n	8006606 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80065fe:	68bb      	ldr	r3, [r7, #8]
 8006600:	689a      	ldr	r2, [r3, #8]
 8006602:	68bb      	ldr	r3, [r7, #8]
 8006604:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006606:	69bb      	ldr	r3, [r7, #24]
 8006608:	015a      	lsls	r2, r3, #5
 800660a:	69fb      	ldr	r3, [r7, #28]
 800660c:	4413      	add	r3, r2
 800660e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006612:	691b      	ldr	r3, [r3, #16]
 8006614:	69ba      	ldr	r2, [r7, #24]
 8006616:	0151      	lsls	r1, r2, #5
 8006618:	69fa      	ldr	r2, [r7, #28]
 800661a:	440a      	add	r2, r1
 800661c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006620:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006624:	6113      	str	r3, [r2, #16]
 8006626:	e01b      	b.n	8006660 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006628:	69bb      	ldr	r3, [r7, #24]
 800662a:	015a      	lsls	r2, r3, #5
 800662c:	69fb      	ldr	r3, [r7, #28]
 800662e:	4413      	add	r3, r2
 8006630:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006634:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006636:	68bb      	ldr	r3, [r7, #8]
 8006638:	6919      	ldr	r1, [r3, #16]
 800663a:	68bb      	ldr	r3, [r7, #8]
 800663c:	689b      	ldr	r3, [r3, #8]
 800663e:	440b      	add	r3, r1
 8006640:	1e59      	subs	r1, r3, #1
 8006642:	68bb      	ldr	r3, [r7, #8]
 8006644:	689b      	ldr	r3, [r3, #8]
 8006646:	fbb1 f3f3 	udiv	r3, r1, r3
 800664a:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800664c:	4ba2      	ldr	r3, [pc, #648]	@ (80068d8 <USB_EPStartXfer+0x3c0>)
 800664e:	400b      	ands	r3, r1
 8006650:	69b9      	ldr	r1, [r7, #24]
 8006652:	0148      	lsls	r0, r1, #5
 8006654:	69f9      	ldr	r1, [r7, #28]
 8006656:	4401      	add	r1, r0
 8006658:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800665c:	4313      	orrs	r3, r2
 800665e:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006660:	69bb      	ldr	r3, [r7, #24]
 8006662:	015a      	lsls	r2, r3, #5
 8006664:	69fb      	ldr	r3, [r7, #28]
 8006666:	4413      	add	r3, r2
 8006668:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800666c:	691a      	ldr	r2, [r3, #16]
 800666e:	68bb      	ldr	r3, [r7, #8]
 8006670:	691b      	ldr	r3, [r3, #16]
 8006672:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006676:	69b9      	ldr	r1, [r7, #24]
 8006678:	0148      	lsls	r0, r1, #5
 800667a:	69f9      	ldr	r1, [r7, #28]
 800667c:	4401      	add	r1, r0
 800667e:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006682:	4313      	orrs	r3, r2
 8006684:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8006686:	68bb      	ldr	r3, [r7, #8]
 8006688:	791b      	ldrb	r3, [r3, #4]
 800668a:	2b01      	cmp	r3, #1
 800668c:	d11f      	bne.n	80066ce <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800668e:	69bb      	ldr	r3, [r7, #24]
 8006690:	015a      	lsls	r2, r3, #5
 8006692:	69fb      	ldr	r3, [r7, #28]
 8006694:	4413      	add	r3, r2
 8006696:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800669a:	691b      	ldr	r3, [r3, #16]
 800669c:	69ba      	ldr	r2, [r7, #24]
 800669e:	0151      	lsls	r1, r2, #5
 80066a0:	69fa      	ldr	r2, [r7, #28]
 80066a2:	440a      	add	r2, r1
 80066a4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80066a8:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80066ac:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80066ae:	69bb      	ldr	r3, [r7, #24]
 80066b0:	015a      	lsls	r2, r3, #5
 80066b2:	69fb      	ldr	r3, [r7, #28]
 80066b4:	4413      	add	r3, r2
 80066b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80066ba:	691b      	ldr	r3, [r3, #16]
 80066bc:	69ba      	ldr	r2, [r7, #24]
 80066be:	0151      	lsls	r1, r2, #5
 80066c0:	69fa      	ldr	r2, [r7, #28]
 80066c2:	440a      	add	r2, r1
 80066c4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80066c8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80066cc:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80066ce:	79fb      	ldrb	r3, [r7, #7]
 80066d0:	2b01      	cmp	r3, #1
 80066d2:	d14b      	bne.n	800676c <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80066d4:	68bb      	ldr	r3, [r7, #8]
 80066d6:	69db      	ldr	r3, [r3, #28]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d009      	beq.n	80066f0 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80066dc:	69bb      	ldr	r3, [r7, #24]
 80066de:	015a      	lsls	r2, r3, #5
 80066e0:	69fb      	ldr	r3, [r7, #28]
 80066e2:	4413      	add	r3, r2
 80066e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80066e8:	461a      	mov	r2, r3
 80066ea:	68bb      	ldr	r3, [r7, #8]
 80066ec:	69db      	ldr	r3, [r3, #28]
 80066ee:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80066f0:	68bb      	ldr	r3, [r7, #8]
 80066f2:	791b      	ldrb	r3, [r3, #4]
 80066f4:	2b01      	cmp	r3, #1
 80066f6:	d128      	bne.n	800674a <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80066f8:	69fb      	ldr	r3, [r7, #28]
 80066fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80066fe:	689b      	ldr	r3, [r3, #8]
 8006700:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006704:	2b00      	cmp	r3, #0
 8006706:	d110      	bne.n	800672a <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006708:	69bb      	ldr	r3, [r7, #24]
 800670a:	015a      	lsls	r2, r3, #5
 800670c:	69fb      	ldr	r3, [r7, #28]
 800670e:	4413      	add	r3, r2
 8006710:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	69ba      	ldr	r2, [r7, #24]
 8006718:	0151      	lsls	r1, r2, #5
 800671a:	69fa      	ldr	r2, [r7, #28]
 800671c:	440a      	add	r2, r1
 800671e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006722:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006726:	6013      	str	r3, [r2, #0]
 8006728:	e00f      	b.n	800674a <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800672a:	69bb      	ldr	r3, [r7, #24]
 800672c:	015a      	lsls	r2, r3, #5
 800672e:	69fb      	ldr	r3, [r7, #28]
 8006730:	4413      	add	r3, r2
 8006732:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	69ba      	ldr	r2, [r7, #24]
 800673a:	0151      	lsls	r1, r2, #5
 800673c:	69fa      	ldr	r2, [r7, #28]
 800673e:	440a      	add	r2, r1
 8006740:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006744:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006748:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800674a:	69bb      	ldr	r3, [r7, #24]
 800674c:	015a      	lsls	r2, r3, #5
 800674e:	69fb      	ldr	r3, [r7, #28]
 8006750:	4413      	add	r3, r2
 8006752:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	69ba      	ldr	r2, [r7, #24]
 800675a:	0151      	lsls	r1, r2, #5
 800675c:	69fa      	ldr	r2, [r7, #28]
 800675e:	440a      	add	r2, r1
 8006760:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006764:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006768:	6013      	str	r3, [r2, #0]
 800676a:	e165      	b.n	8006a38 <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800676c:	69bb      	ldr	r3, [r7, #24]
 800676e:	015a      	lsls	r2, r3, #5
 8006770:	69fb      	ldr	r3, [r7, #28]
 8006772:	4413      	add	r3, r2
 8006774:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	69ba      	ldr	r2, [r7, #24]
 800677c:	0151      	lsls	r1, r2, #5
 800677e:	69fa      	ldr	r2, [r7, #28]
 8006780:	440a      	add	r2, r1
 8006782:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006786:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800678a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800678c:	68bb      	ldr	r3, [r7, #8]
 800678e:	791b      	ldrb	r3, [r3, #4]
 8006790:	2b01      	cmp	r3, #1
 8006792:	d015      	beq.n	80067c0 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006794:	68bb      	ldr	r3, [r7, #8]
 8006796:	691b      	ldr	r3, [r3, #16]
 8006798:	2b00      	cmp	r3, #0
 800679a:	f000 814d 	beq.w	8006a38 <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800679e:	69fb      	ldr	r3, [r7, #28]
 80067a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80067a4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80067a6:	68bb      	ldr	r3, [r7, #8]
 80067a8:	781b      	ldrb	r3, [r3, #0]
 80067aa:	f003 030f 	and.w	r3, r3, #15
 80067ae:	2101      	movs	r1, #1
 80067b0:	fa01 f303 	lsl.w	r3, r1, r3
 80067b4:	69f9      	ldr	r1, [r7, #28]
 80067b6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80067ba:	4313      	orrs	r3, r2
 80067bc:	634b      	str	r3, [r1, #52]	@ 0x34
 80067be:	e13b      	b.n	8006a38 <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80067c0:	69fb      	ldr	r3, [r7, #28]
 80067c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80067c6:	689b      	ldr	r3, [r3, #8]
 80067c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d110      	bne.n	80067f2 <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80067d0:	69bb      	ldr	r3, [r7, #24]
 80067d2:	015a      	lsls	r2, r3, #5
 80067d4:	69fb      	ldr	r3, [r7, #28]
 80067d6:	4413      	add	r3, r2
 80067d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	69ba      	ldr	r2, [r7, #24]
 80067e0:	0151      	lsls	r1, r2, #5
 80067e2:	69fa      	ldr	r2, [r7, #28]
 80067e4:	440a      	add	r2, r1
 80067e6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80067ea:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80067ee:	6013      	str	r3, [r2, #0]
 80067f0:	e00f      	b.n	8006812 <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80067f2:	69bb      	ldr	r3, [r7, #24]
 80067f4:	015a      	lsls	r2, r3, #5
 80067f6:	69fb      	ldr	r3, [r7, #28]
 80067f8:	4413      	add	r3, r2
 80067fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	69ba      	ldr	r2, [r7, #24]
 8006802:	0151      	lsls	r1, r2, #5
 8006804:	69fa      	ldr	r2, [r7, #28]
 8006806:	440a      	add	r2, r1
 8006808:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800680c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006810:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006812:	68bb      	ldr	r3, [r7, #8]
 8006814:	68d9      	ldr	r1, [r3, #12]
 8006816:	68bb      	ldr	r3, [r7, #8]
 8006818:	781a      	ldrb	r2, [r3, #0]
 800681a:	68bb      	ldr	r3, [r7, #8]
 800681c:	691b      	ldr	r3, [r3, #16]
 800681e:	b298      	uxth	r0, r3
 8006820:	79fb      	ldrb	r3, [r7, #7]
 8006822:	9300      	str	r3, [sp, #0]
 8006824:	4603      	mov	r3, r0
 8006826:	68f8      	ldr	r0, [r7, #12]
 8006828:	f000 f9b8 	bl	8006b9c <USB_WritePacket>
 800682c:	e104      	b.n	8006a38 <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800682e:	69bb      	ldr	r3, [r7, #24]
 8006830:	015a      	lsls	r2, r3, #5
 8006832:	69fb      	ldr	r3, [r7, #28]
 8006834:	4413      	add	r3, r2
 8006836:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800683a:	691b      	ldr	r3, [r3, #16]
 800683c:	69ba      	ldr	r2, [r7, #24]
 800683e:	0151      	lsls	r1, r2, #5
 8006840:	69fa      	ldr	r2, [r7, #28]
 8006842:	440a      	add	r2, r1
 8006844:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006848:	0cdb      	lsrs	r3, r3, #19
 800684a:	04db      	lsls	r3, r3, #19
 800684c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800684e:	69bb      	ldr	r3, [r7, #24]
 8006850:	015a      	lsls	r2, r3, #5
 8006852:	69fb      	ldr	r3, [r7, #28]
 8006854:	4413      	add	r3, r2
 8006856:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800685a:	691b      	ldr	r3, [r3, #16]
 800685c:	69ba      	ldr	r2, [r7, #24]
 800685e:	0151      	lsls	r1, r2, #5
 8006860:	69fa      	ldr	r2, [r7, #28]
 8006862:	440a      	add	r2, r1
 8006864:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006868:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800686c:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006870:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8006872:	69bb      	ldr	r3, [r7, #24]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d131      	bne.n	80068dc <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 8006878:	68bb      	ldr	r3, [r7, #8]
 800687a:	691b      	ldr	r3, [r3, #16]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d003      	beq.n	8006888 <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 8006880:	68bb      	ldr	r3, [r7, #8]
 8006882:	689a      	ldr	r2, [r3, #8]
 8006884:	68bb      	ldr	r3, [r7, #8]
 8006886:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8006888:	68bb      	ldr	r3, [r7, #8]
 800688a:	689a      	ldr	r2, [r3, #8]
 800688c:	68bb      	ldr	r3, [r7, #8]
 800688e:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8006890:	69bb      	ldr	r3, [r7, #24]
 8006892:	015a      	lsls	r2, r3, #5
 8006894:	69fb      	ldr	r3, [r7, #28]
 8006896:	4413      	add	r3, r2
 8006898:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800689c:	691a      	ldr	r2, [r3, #16]
 800689e:	68bb      	ldr	r3, [r7, #8]
 80068a0:	6a1b      	ldr	r3, [r3, #32]
 80068a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80068a6:	69b9      	ldr	r1, [r7, #24]
 80068a8:	0148      	lsls	r0, r1, #5
 80068aa:	69f9      	ldr	r1, [r7, #28]
 80068ac:	4401      	add	r1, r0
 80068ae:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80068b2:	4313      	orrs	r3, r2
 80068b4:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80068b6:	69bb      	ldr	r3, [r7, #24]
 80068b8:	015a      	lsls	r2, r3, #5
 80068ba:	69fb      	ldr	r3, [r7, #28]
 80068bc:	4413      	add	r3, r2
 80068be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80068c2:	691b      	ldr	r3, [r3, #16]
 80068c4:	69ba      	ldr	r2, [r7, #24]
 80068c6:	0151      	lsls	r1, r2, #5
 80068c8:	69fa      	ldr	r2, [r7, #28]
 80068ca:	440a      	add	r2, r1
 80068cc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80068d0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80068d4:	6113      	str	r3, [r2, #16]
 80068d6:	e061      	b.n	800699c <USB_EPStartXfer+0x484>
 80068d8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 80068dc:	68bb      	ldr	r3, [r7, #8]
 80068de:	691b      	ldr	r3, [r3, #16]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d123      	bne.n	800692c <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80068e4:	69bb      	ldr	r3, [r7, #24]
 80068e6:	015a      	lsls	r2, r3, #5
 80068e8:	69fb      	ldr	r3, [r7, #28]
 80068ea:	4413      	add	r3, r2
 80068ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80068f0:	691a      	ldr	r2, [r3, #16]
 80068f2:	68bb      	ldr	r3, [r7, #8]
 80068f4:	689b      	ldr	r3, [r3, #8]
 80068f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80068fa:	69b9      	ldr	r1, [r7, #24]
 80068fc:	0148      	lsls	r0, r1, #5
 80068fe:	69f9      	ldr	r1, [r7, #28]
 8006900:	4401      	add	r1, r0
 8006902:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006906:	4313      	orrs	r3, r2
 8006908:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800690a:	69bb      	ldr	r3, [r7, #24]
 800690c:	015a      	lsls	r2, r3, #5
 800690e:	69fb      	ldr	r3, [r7, #28]
 8006910:	4413      	add	r3, r2
 8006912:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006916:	691b      	ldr	r3, [r3, #16]
 8006918:	69ba      	ldr	r2, [r7, #24]
 800691a:	0151      	lsls	r1, r2, #5
 800691c:	69fa      	ldr	r2, [r7, #28]
 800691e:	440a      	add	r2, r1
 8006920:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006924:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006928:	6113      	str	r3, [r2, #16]
 800692a:	e037      	b.n	800699c <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800692c:	68bb      	ldr	r3, [r7, #8]
 800692e:	691a      	ldr	r2, [r3, #16]
 8006930:	68bb      	ldr	r3, [r7, #8]
 8006932:	689b      	ldr	r3, [r3, #8]
 8006934:	4413      	add	r3, r2
 8006936:	1e5a      	subs	r2, r3, #1
 8006938:	68bb      	ldr	r3, [r7, #8]
 800693a:	689b      	ldr	r3, [r3, #8]
 800693c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006940:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8006942:	68bb      	ldr	r3, [r7, #8]
 8006944:	689b      	ldr	r3, [r3, #8]
 8006946:	8afa      	ldrh	r2, [r7, #22]
 8006948:	fb03 f202 	mul.w	r2, r3, r2
 800694c:	68bb      	ldr	r3, [r7, #8]
 800694e:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006950:	69bb      	ldr	r3, [r7, #24]
 8006952:	015a      	lsls	r2, r3, #5
 8006954:	69fb      	ldr	r3, [r7, #28]
 8006956:	4413      	add	r3, r2
 8006958:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800695c:	691a      	ldr	r2, [r3, #16]
 800695e:	8afb      	ldrh	r3, [r7, #22]
 8006960:	04d9      	lsls	r1, r3, #19
 8006962:	4b38      	ldr	r3, [pc, #224]	@ (8006a44 <USB_EPStartXfer+0x52c>)
 8006964:	400b      	ands	r3, r1
 8006966:	69b9      	ldr	r1, [r7, #24]
 8006968:	0148      	lsls	r0, r1, #5
 800696a:	69f9      	ldr	r1, [r7, #28]
 800696c:	4401      	add	r1, r0
 800696e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006972:	4313      	orrs	r3, r2
 8006974:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8006976:	69bb      	ldr	r3, [r7, #24]
 8006978:	015a      	lsls	r2, r3, #5
 800697a:	69fb      	ldr	r3, [r7, #28]
 800697c:	4413      	add	r3, r2
 800697e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006982:	691a      	ldr	r2, [r3, #16]
 8006984:	68bb      	ldr	r3, [r7, #8]
 8006986:	6a1b      	ldr	r3, [r3, #32]
 8006988:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800698c:	69b9      	ldr	r1, [r7, #24]
 800698e:	0148      	lsls	r0, r1, #5
 8006990:	69f9      	ldr	r1, [r7, #28]
 8006992:	4401      	add	r1, r0
 8006994:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006998:	4313      	orrs	r3, r2
 800699a:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800699c:	79fb      	ldrb	r3, [r7, #7]
 800699e:	2b01      	cmp	r3, #1
 80069a0:	d10d      	bne.n	80069be <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80069a2:	68bb      	ldr	r3, [r7, #8]
 80069a4:	68db      	ldr	r3, [r3, #12]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d009      	beq.n	80069be <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80069aa:	68bb      	ldr	r3, [r7, #8]
 80069ac:	68d9      	ldr	r1, [r3, #12]
 80069ae:	69bb      	ldr	r3, [r7, #24]
 80069b0:	015a      	lsls	r2, r3, #5
 80069b2:	69fb      	ldr	r3, [r7, #28]
 80069b4:	4413      	add	r3, r2
 80069b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80069ba:	460a      	mov	r2, r1
 80069bc:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80069be:	68bb      	ldr	r3, [r7, #8]
 80069c0:	791b      	ldrb	r3, [r3, #4]
 80069c2:	2b01      	cmp	r3, #1
 80069c4:	d128      	bne.n	8006a18 <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80069c6:	69fb      	ldr	r3, [r7, #28]
 80069c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80069cc:	689b      	ldr	r3, [r3, #8]
 80069ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d110      	bne.n	80069f8 <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80069d6:	69bb      	ldr	r3, [r7, #24]
 80069d8:	015a      	lsls	r2, r3, #5
 80069da:	69fb      	ldr	r3, [r7, #28]
 80069dc:	4413      	add	r3, r2
 80069de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	69ba      	ldr	r2, [r7, #24]
 80069e6:	0151      	lsls	r1, r2, #5
 80069e8:	69fa      	ldr	r2, [r7, #28]
 80069ea:	440a      	add	r2, r1
 80069ec:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80069f0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80069f4:	6013      	str	r3, [r2, #0]
 80069f6:	e00f      	b.n	8006a18 <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80069f8:	69bb      	ldr	r3, [r7, #24]
 80069fa:	015a      	lsls	r2, r3, #5
 80069fc:	69fb      	ldr	r3, [r7, #28]
 80069fe:	4413      	add	r3, r2
 8006a00:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	69ba      	ldr	r2, [r7, #24]
 8006a08:	0151      	lsls	r1, r2, #5
 8006a0a:	69fa      	ldr	r2, [r7, #28]
 8006a0c:	440a      	add	r2, r1
 8006a0e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006a12:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006a16:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006a18:	69bb      	ldr	r3, [r7, #24]
 8006a1a:	015a      	lsls	r2, r3, #5
 8006a1c:	69fb      	ldr	r3, [r7, #28]
 8006a1e:	4413      	add	r3, r2
 8006a20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	69ba      	ldr	r2, [r7, #24]
 8006a28:	0151      	lsls	r1, r2, #5
 8006a2a:	69fa      	ldr	r2, [r7, #28]
 8006a2c:	440a      	add	r2, r1
 8006a2e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006a32:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006a36:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006a38:	2300      	movs	r3, #0
}
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	3720      	adds	r7, #32
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	bd80      	pop	{r7, pc}
 8006a42:	bf00      	nop
 8006a44:	1ff80000 	.word	0x1ff80000

08006a48 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006a48:	b480      	push	{r7}
 8006a4a:	b087      	sub	sp, #28
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
 8006a50:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006a52:	2300      	movs	r3, #0
 8006a54:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8006a56:	2300      	movs	r3, #0
 8006a58:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	785b      	ldrb	r3, [r3, #1]
 8006a62:	2b01      	cmp	r3, #1
 8006a64:	d14a      	bne.n	8006afc <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006a66:	683b      	ldr	r3, [r7, #0]
 8006a68:	781b      	ldrb	r3, [r3, #0]
 8006a6a:	015a      	lsls	r2, r3, #5
 8006a6c:	693b      	ldr	r3, [r7, #16]
 8006a6e:	4413      	add	r3, r2
 8006a70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006a7a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006a7e:	f040 8086 	bne.w	8006b8e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8006a82:	683b      	ldr	r3, [r7, #0]
 8006a84:	781b      	ldrb	r3, [r3, #0]
 8006a86:	015a      	lsls	r2, r3, #5
 8006a88:	693b      	ldr	r3, [r7, #16]
 8006a8a:	4413      	add	r3, r2
 8006a8c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	683a      	ldr	r2, [r7, #0]
 8006a94:	7812      	ldrb	r2, [r2, #0]
 8006a96:	0151      	lsls	r1, r2, #5
 8006a98:	693a      	ldr	r2, [r7, #16]
 8006a9a:	440a      	add	r2, r1
 8006a9c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006aa0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006aa4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	781b      	ldrb	r3, [r3, #0]
 8006aaa:	015a      	lsls	r2, r3, #5
 8006aac:	693b      	ldr	r3, [r7, #16]
 8006aae:	4413      	add	r3, r2
 8006ab0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	683a      	ldr	r2, [r7, #0]
 8006ab8:	7812      	ldrb	r2, [r2, #0]
 8006aba:	0151      	lsls	r1, r2, #5
 8006abc:	693a      	ldr	r2, [r7, #16]
 8006abe:	440a      	add	r2, r1
 8006ac0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006ac4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006ac8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	3301      	adds	r3, #1
 8006ace:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	f242 7210 	movw	r2, #10000	@ 0x2710
 8006ad6:	4293      	cmp	r3, r2
 8006ad8:	d902      	bls.n	8006ae0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8006ada:	2301      	movs	r3, #1
 8006adc:	75fb      	strb	r3, [r7, #23]
          break;
 8006ade:	e056      	b.n	8006b8e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	781b      	ldrb	r3, [r3, #0]
 8006ae4:	015a      	lsls	r2, r3, #5
 8006ae6:	693b      	ldr	r3, [r7, #16]
 8006ae8:	4413      	add	r3, r2
 8006aea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006af4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006af8:	d0e7      	beq.n	8006aca <USB_EPStopXfer+0x82>
 8006afa:	e048      	b.n	8006b8e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006afc:	683b      	ldr	r3, [r7, #0]
 8006afe:	781b      	ldrb	r3, [r3, #0]
 8006b00:	015a      	lsls	r2, r3, #5
 8006b02:	693b      	ldr	r3, [r7, #16]
 8006b04:	4413      	add	r3, r2
 8006b06:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006b10:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006b14:	d13b      	bne.n	8006b8e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	781b      	ldrb	r3, [r3, #0]
 8006b1a:	015a      	lsls	r2, r3, #5
 8006b1c:	693b      	ldr	r3, [r7, #16]
 8006b1e:	4413      	add	r3, r2
 8006b20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	683a      	ldr	r2, [r7, #0]
 8006b28:	7812      	ldrb	r2, [r2, #0]
 8006b2a:	0151      	lsls	r1, r2, #5
 8006b2c:	693a      	ldr	r2, [r7, #16]
 8006b2e:	440a      	add	r2, r1
 8006b30:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006b34:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006b38:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	781b      	ldrb	r3, [r3, #0]
 8006b3e:	015a      	lsls	r2, r3, #5
 8006b40:	693b      	ldr	r3, [r7, #16]
 8006b42:	4413      	add	r3, r2
 8006b44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	683a      	ldr	r2, [r7, #0]
 8006b4c:	7812      	ldrb	r2, [r2, #0]
 8006b4e:	0151      	lsls	r1, r2, #5
 8006b50:	693a      	ldr	r2, [r7, #16]
 8006b52:	440a      	add	r2, r1
 8006b54:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006b58:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006b5c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	3301      	adds	r3, #1
 8006b62:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	f242 7210 	movw	r2, #10000	@ 0x2710
 8006b6a:	4293      	cmp	r3, r2
 8006b6c:	d902      	bls.n	8006b74 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8006b6e:	2301      	movs	r3, #1
 8006b70:	75fb      	strb	r3, [r7, #23]
          break;
 8006b72:	e00c      	b.n	8006b8e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	781b      	ldrb	r3, [r3, #0]
 8006b78:	015a      	lsls	r2, r3, #5
 8006b7a:	693b      	ldr	r3, [r7, #16]
 8006b7c:	4413      	add	r3, r2
 8006b7e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006b88:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006b8c:	d0e7      	beq.n	8006b5e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8006b8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b90:	4618      	mov	r0, r3
 8006b92:	371c      	adds	r7, #28
 8006b94:	46bd      	mov	sp, r7
 8006b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9a:	4770      	bx	lr

08006b9c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006b9c:	b480      	push	{r7}
 8006b9e:	b089      	sub	sp, #36	@ 0x24
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	60f8      	str	r0, [r7, #12]
 8006ba4:	60b9      	str	r1, [r7, #8]
 8006ba6:	4611      	mov	r1, r2
 8006ba8:	461a      	mov	r2, r3
 8006baa:	460b      	mov	r3, r1
 8006bac:	71fb      	strb	r3, [r7, #7]
 8006bae:	4613      	mov	r3, r2
 8006bb0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006bb6:	68bb      	ldr	r3, [r7, #8]
 8006bb8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006bba:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d123      	bne.n	8006c0a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006bc2:	88bb      	ldrh	r3, [r7, #4]
 8006bc4:	3303      	adds	r3, #3
 8006bc6:	089b      	lsrs	r3, r3, #2
 8006bc8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006bca:	2300      	movs	r3, #0
 8006bcc:	61bb      	str	r3, [r7, #24]
 8006bce:	e018      	b.n	8006c02 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006bd0:	79fb      	ldrb	r3, [r7, #7]
 8006bd2:	031a      	lsls	r2, r3, #12
 8006bd4:	697b      	ldr	r3, [r7, #20]
 8006bd6:	4413      	add	r3, r2
 8006bd8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006bdc:	461a      	mov	r2, r3
 8006bde:	69fb      	ldr	r3, [r7, #28]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006be4:	69fb      	ldr	r3, [r7, #28]
 8006be6:	3301      	adds	r3, #1
 8006be8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006bea:	69fb      	ldr	r3, [r7, #28]
 8006bec:	3301      	adds	r3, #1
 8006bee:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006bf0:	69fb      	ldr	r3, [r7, #28]
 8006bf2:	3301      	adds	r3, #1
 8006bf4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006bf6:	69fb      	ldr	r3, [r7, #28]
 8006bf8:	3301      	adds	r3, #1
 8006bfa:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006bfc:	69bb      	ldr	r3, [r7, #24]
 8006bfe:	3301      	adds	r3, #1
 8006c00:	61bb      	str	r3, [r7, #24]
 8006c02:	69ba      	ldr	r2, [r7, #24]
 8006c04:	693b      	ldr	r3, [r7, #16]
 8006c06:	429a      	cmp	r2, r3
 8006c08:	d3e2      	bcc.n	8006bd0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006c0a:	2300      	movs	r3, #0
}
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	3724      	adds	r7, #36	@ 0x24
 8006c10:	46bd      	mov	sp, r7
 8006c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c16:	4770      	bx	lr

08006c18 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006c18:	b480      	push	{r7}
 8006c1a:	b08b      	sub	sp, #44	@ 0x2c
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	60f8      	str	r0, [r7, #12]
 8006c20:	60b9      	str	r1, [r7, #8]
 8006c22:	4613      	mov	r3, r2
 8006c24:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006c2a:	68bb      	ldr	r3, [r7, #8]
 8006c2c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006c2e:	88fb      	ldrh	r3, [r7, #6]
 8006c30:	089b      	lsrs	r3, r3, #2
 8006c32:	b29b      	uxth	r3, r3
 8006c34:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006c36:	88fb      	ldrh	r3, [r7, #6]
 8006c38:	f003 0303 	and.w	r3, r3, #3
 8006c3c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006c3e:	2300      	movs	r3, #0
 8006c40:	623b      	str	r3, [r7, #32]
 8006c42:	e014      	b.n	8006c6e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006c44:	69bb      	ldr	r3, [r7, #24]
 8006c46:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006c4a:	681a      	ldr	r2, [r3, #0]
 8006c4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c4e:	601a      	str	r2, [r3, #0]
    pDest++;
 8006c50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c52:	3301      	adds	r3, #1
 8006c54:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006c56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c58:	3301      	adds	r3, #1
 8006c5a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006c5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c5e:	3301      	adds	r3, #1
 8006c60:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006c62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c64:	3301      	adds	r3, #1
 8006c66:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8006c68:	6a3b      	ldr	r3, [r7, #32]
 8006c6a:	3301      	adds	r3, #1
 8006c6c:	623b      	str	r3, [r7, #32]
 8006c6e:	6a3a      	ldr	r2, [r7, #32]
 8006c70:	697b      	ldr	r3, [r7, #20]
 8006c72:	429a      	cmp	r2, r3
 8006c74:	d3e6      	bcc.n	8006c44 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006c76:	8bfb      	ldrh	r3, [r7, #30]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d01e      	beq.n	8006cba <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006c80:	69bb      	ldr	r3, [r7, #24]
 8006c82:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006c86:	461a      	mov	r2, r3
 8006c88:	f107 0310 	add.w	r3, r7, #16
 8006c8c:	6812      	ldr	r2, [r2, #0]
 8006c8e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006c90:	693a      	ldr	r2, [r7, #16]
 8006c92:	6a3b      	ldr	r3, [r7, #32]
 8006c94:	b2db      	uxtb	r3, r3
 8006c96:	00db      	lsls	r3, r3, #3
 8006c98:	fa22 f303 	lsr.w	r3, r2, r3
 8006c9c:	b2da      	uxtb	r2, r3
 8006c9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ca0:	701a      	strb	r2, [r3, #0]
      i++;
 8006ca2:	6a3b      	ldr	r3, [r7, #32]
 8006ca4:	3301      	adds	r3, #1
 8006ca6:	623b      	str	r3, [r7, #32]
      pDest++;
 8006ca8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006caa:	3301      	adds	r3, #1
 8006cac:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8006cae:	8bfb      	ldrh	r3, [r7, #30]
 8006cb0:	3b01      	subs	r3, #1
 8006cb2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006cb4:	8bfb      	ldrh	r3, [r7, #30]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d1ea      	bne.n	8006c90 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006cba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	372c      	adds	r7, #44	@ 0x2c
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc6:	4770      	bx	lr

08006cc8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006cc8:	b480      	push	{r7}
 8006cca:	b085      	sub	sp, #20
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
 8006cd0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006cd6:	683b      	ldr	r3, [r7, #0]
 8006cd8:	781b      	ldrb	r3, [r3, #0]
 8006cda:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006cdc:	683b      	ldr	r3, [r7, #0]
 8006cde:	785b      	ldrb	r3, [r3, #1]
 8006ce0:	2b01      	cmp	r3, #1
 8006ce2:	d12c      	bne.n	8006d3e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006ce4:	68bb      	ldr	r3, [r7, #8]
 8006ce6:	015a      	lsls	r2, r3, #5
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	4413      	add	r3, r2
 8006cec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	db12      	blt.n	8006d1c <USB_EPSetStall+0x54>
 8006cf6:	68bb      	ldr	r3, [r7, #8]
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d00f      	beq.n	8006d1c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006cfc:	68bb      	ldr	r3, [r7, #8]
 8006cfe:	015a      	lsls	r2, r3, #5
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	4413      	add	r3, r2
 8006d04:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	68ba      	ldr	r2, [r7, #8]
 8006d0c:	0151      	lsls	r1, r2, #5
 8006d0e:	68fa      	ldr	r2, [r7, #12]
 8006d10:	440a      	add	r2, r1
 8006d12:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006d16:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006d1a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006d1c:	68bb      	ldr	r3, [r7, #8]
 8006d1e:	015a      	lsls	r2, r3, #5
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	4413      	add	r3, r2
 8006d24:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	68ba      	ldr	r2, [r7, #8]
 8006d2c:	0151      	lsls	r1, r2, #5
 8006d2e:	68fa      	ldr	r2, [r7, #12]
 8006d30:	440a      	add	r2, r1
 8006d32:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006d36:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006d3a:	6013      	str	r3, [r2, #0]
 8006d3c:	e02b      	b.n	8006d96 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006d3e:	68bb      	ldr	r3, [r7, #8]
 8006d40:	015a      	lsls	r2, r3, #5
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	4413      	add	r3, r2
 8006d46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	db12      	blt.n	8006d76 <USB_EPSetStall+0xae>
 8006d50:	68bb      	ldr	r3, [r7, #8]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d00f      	beq.n	8006d76 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006d56:	68bb      	ldr	r3, [r7, #8]
 8006d58:	015a      	lsls	r2, r3, #5
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	4413      	add	r3, r2
 8006d5e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	68ba      	ldr	r2, [r7, #8]
 8006d66:	0151      	lsls	r1, r2, #5
 8006d68:	68fa      	ldr	r2, [r7, #12]
 8006d6a:	440a      	add	r2, r1
 8006d6c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006d70:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006d74:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006d76:	68bb      	ldr	r3, [r7, #8]
 8006d78:	015a      	lsls	r2, r3, #5
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	4413      	add	r3, r2
 8006d7e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	68ba      	ldr	r2, [r7, #8]
 8006d86:	0151      	lsls	r1, r2, #5
 8006d88:	68fa      	ldr	r2, [r7, #12]
 8006d8a:	440a      	add	r2, r1
 8006d8c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006d90:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006d94:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006d96:	2300      	movs	r3, #0
}
 8006d98:	4618      	mov	r0, r3
 8006d9a:	3714      	adds	r7, #20
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da2:	4770      	bx	lr

08006da4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006da4:	b480      	push	{r7}
 8006da6:	b085      	sub	sp, #20
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
 8006dac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	781b      	ldrb	r3, [r3, #0]
 8006db6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	785b      	ldrb	r3, [r3, #1]
 8006dbc:	2b01      	cmp	r3, #1
 8006dbe:	d128      	bne.n	8006e12 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006dc0:	68bb      	ldr	r3, [r7, #8]
 8006dc2:	015a      	lsls	r2, r3, #5
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	4413      	add	r3, r2
 8006dc8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	68ba      	ldr	r2, [r7, #8]
 8006dd0:	0151      	lsls	r1, r2, #5
 8006dd2:	68fa      	ldr	r2, [r7, #12]
 8006dd4:	440a      	add	r2, r1
 8006dd6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006dda:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006dde:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006de0:	683b      	ldr	r3, [r7, #0]
 8006de2:	791b      	ldrb	r3, [r3, #4]
 8006de4:	2b03      	cmp	r3, #3
 8006de6:	d003      	beq.n	8006df0 <USB_EPClearStall+0x4c>
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	791b      	ldrb	r3, [r3, #4]
 8006dec:	2b02      	cmp	r3, #2
 8006dee:	d138      	bne.n	8006e62 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006df0:	68bb      	ldr	r3, [r7, #8]
 8006df2:	015a      	lsls	r2, r3, #5
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	4413      	add	r3, r2
 8006df8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	68ba      	ldr	r2, [r7, #8]
 8006e00:	0151      	lsls	r1, r2, #5
 8006e02:	68fa      	ldr	r2, [r7, #12]
 8006e04:	440a      	add	r2, r1
 8006e06:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006e0a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006e0e:	6013      	str	r3, [r2, #0]
 8006e10:	e027      	b.n	8006e62 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006e12:	68bb      	ldr	r3, [r7, #8]
 8006e14:	015a      	lsls	r2, r3, #5
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	4413      	add	r3, r2
 8006e1a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	68ba      	ldr	r2, [r7, #8]
 8006e22:	0151      	lsls	r1, r2, #5
 8006e24:	68fa      	ldr	r2, [r7, #12]
 8006e26:	440a      	add	r2, r1
 8006e28:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006e2c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006e30:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006e32:	683b      	ldr	r3, [r7, #0]
 8006e34:	791b      	ldrb	r3, [r3, #4]
 8006e36:	2b03      	cmp	r3, #3
 8006e38:	d003      	beq.n	8006e42 <USB_EPClearStall+0x9e>
 8006e3a:	683b      	ldr	r3, [r7, #0]
 8006e3c:	791b      	ldrb	r3, [r3, #4]
 8006e3e:	2b02      	cmp	r3, #2
 8006e40:	d10f      	bne.n	8006e62 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006e42:	68bb      	ldr	r3, [r7, #8]
 8006e44:	015a      	lsls	r2, r3, #5
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	4413      	add	r3, r2
 8006e4a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	68ba      	ldr	r2, [r7, #8]
 8006e52:	0151      	lsls	r1, r2, #5
 8006e54:	68fa      	ldr	r2, [r7, #12]
 8006e56:	440a      	add	r2, r1
 8006e58:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006e5c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006e60:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006e62:	2300      	movs	r3, #0
}
 8006e64:	4618      	mov	r0, r3
 8006e66:	3714      	adds	r7, #20
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6e:	4770      	bx	lr

08006e70 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006e70:	b480      	push	{r7}
 8006e72:	b085      	sub	sp, #20
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
 8006e78:	460b      	mov	r3, r1
 8006e7a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	68fa      	ldr	r2, [r7, #12]
 8006e8a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006e8e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8006e92:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e9a:	681a      	ldr	r2, [r3, #0]
 8006e9c:	78fb      	ldrb	r3, [r7, #3]
 8006e9e:	011b      	lsls	r3, r3, #4
 8006ea0:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8006ea4:	68f9      	ldr	r1, [r7, #12]
 8006ea6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006eaa:	4313      	orrs	r3, r2
 8006eac:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006eae:	2300      	movs	r3, #0
}
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	3714      	adds	r7, #20
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eba:	4770      	bx	lr

08006ebc <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006ebc:	b480      	push	{r7}
 8006ebe:	b085      	sub	sp, #20
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	68fa      	ldr	r2, [r7, #12]
 8006ed2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006ed6:	f023 0303 	bic.w	r3, r3, #3
 8006eda:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ee2:	685b      	ldr	r3, [r3, #4]
 8006ee4:	68fa      	ldr	r2, [r7, #12]
 8006ee6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006eea:	f023 0302 	bic.w	r3, r3, #2
 8006eee:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006ef0:	2300      	movs	r3, #0
}
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	3714      	adds	r7, #20
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efc:	4770      	bx	lr

08006efe <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006efe:	b480      	push	{r7}
 8006f00:	b085      	sub	sp, #20
 8006f02:	af00      	add	r7, sp, #0
 8006f04:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	68fa      	ldr	r2, [r7, #12]
 8006f14:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006f18:	f023 0303 	bic.w	r3, r3, #3
 8006f1c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006f24:	685b      	ldr	r3, [r3, #4]
 8006f26:	68fa      	ldr	r2, [r7, #12]
 8006f28:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006f2c:	f043 0302 	orr.w	r3, r3, #2
 8006f30:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006f32:	2300      	movs	r3, #0
}
 8006f34:	4618      	mov	r0, r3
 8006f36:	3714      	adds	r7, #20
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3e:	4770      	bx	lr

08006f40 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8006f40:	b480      	push	{r7}
 8006f42:	b085      	sub	sp, #20
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	695b      	ldr	r3, [r3, #20]
 8006f4c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	699b      	ldr	r3, [r3, #24]
 8006f52:	68fa      	ldr	r2, [r7, #12]
 8006f54:	4013      	ands	r3, r2
 8006f56:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006f58:	68fb      	ldr	r3, [r7, #12]
}
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	3714      	adds	r7, #20
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f64:	4770      	bx	lr

08006f66 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006f66:	b480      	push	{r7}
 8006f68:	b085      	sub	sp, #20
 8006f6a:	af00      	add	r7, sp, #0
 8006f6c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006f78:	699b      	ldr	r3, [r3, #24]
 8006f7a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006f82:	69db      	ldr	r3, [r3, #28]
 8006f84:	68ba      	ldr	r2, [r7, #8]
 8006f86:	4013      	ands	r3, r2
 8006f88:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006f8a:	68bb      	ldr	r3, [r7, #8]
 8006f8c:	0c1b      	lsrs	r3, r3, #16
}
 8006f8e:	4618      	mov	r0, r3
 8006f90:	3714      	adds	r7, #20
 8006f92:	46bd      	mov	sp, r7
 8006f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f98:	4770      	bx	lr

08006f9a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006f9a:	b480      	push	{r7}
 8006f9c:	b085      	sub	sp, #20
 8006f9e:	af00      	add	r7, sp, #0
 8006fa0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006fac:	699b      	ldr	r3, [r3, #24]
 8006fae:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006fb6:	69db      	ldr	r3, [r3, #28]
 8006fb8:	68ba      	ldr	r2, [r7, #8]
 8006fba:	4013      	ands	r3, r2
 8006fbc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006fbe:	68bb      	ldr	r3, [r7, #8]
 8006fc0:	b29b      	uxth	r3, r3
}
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	3714      	adds	r7, #20
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fcc:	4770      	bx	lr

08006fce <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006fce:	b480      	push	{r7}
 8006fd0:	b085      	sub	sp, #20
 8006fd2:	af00      	add	r7, sp, #0
 8006fd4:	6078      	str	r0, [r7, #4]
 8006fd6:	460b      	mov	r3, r1
 8006fd8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006fde:	78fb      	ldrb	r3, [r7, #3]
 8006fe0:	015a      	lsls	r2, r3, #5
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	4413      	add	r3, r2
 8006fe6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006fea:	689b      	ldr	r3, [r3, #8]
 8006fec:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ff4:	695b      	ldr	r3, [r3, #20]
 8006ff6:	68ba      	ldr	r2, [r7, #8]
 8006ff8:	4013      	ands	r3, r2
 8006ffa:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006ffc:	68bb      	ldr	r3, [r7, #8]
}
 8006ffe:	4618      	mov	r0, r3
 8007000:	3714      	adds	r7, #20
 8007002:	46bd      	mov	sp, r7
 8007004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007008:	4770      	bx	lr

0800700a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800700a:	b480      	push	{r7}
 800700c:	b087      	sub	sp, #28
 800700e:	af00      	add	r7, sp, #0
 8007010:	6078      	str	r0, [r7, #4]
 8007012:	460b      	mov	r3, r1
 8007014:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800701a:	697b      	ldr	r3, [r7, #20]
 800701c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007020:	691b      	ldr	r3, [r3, #16]
 8007022:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007024:	697b      	ldr	r3, [r7, #20]
 8007026:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800702a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800702c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800702e:	78fb      	ldrb	r3, [r7, #3]
 8007030:	f003 030f 	and.w	r3, r3, #15
 8007034:	68fa      	ldr	r2, [r7, #12]
 8007036:	fa22 f303 	lsr.w	r3, r2, r3
 800703a:	01db      	lsls	r3, r3, #7
 800703c:	b2db      	uxtb	r3, r3
 800703e:	693a      	ldr	r2, [r7, #16]
 8007040:	4313      	orrs	r3, r2
 8007042:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007044:	78fb      	ldrb	r3, [r7, #3]
 8007046:	015a      	lsls	r2, r3, #5
 8007048:	697b      	ldr	r3, [r7, #20]
 800704a:	4413      	add	r3, r2
 800704c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007050:	689b      	ldr	r3, [r3, #8]
 8007052:	693a      	ldr	r2, [r7, #16]
 8007054:	4013      	ands	r3, r2
 8007056:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007058:	68bb      	ldr	r3, [r7, #8]
}
 800705a:	4618      	mov	r0, r3
 800705c:	371c      	adds	r7, #28
 800705e:	46bd      	mov	sp, r7
 8007060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007064:	4770      	bx	lr

08007066 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8007066:	b480      	push	{r7}
 8007068:	b083      	sub	sp, #12
 800706a:	af00      	add	r7, sp, #0
 800706c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	695b      	ldr	r3, [r3, #20]
 8007072:	f003 0301 	and.w	r3, r3, #1
}
 8007076:	4618      	mov	r0, r3
 8007078:	370c      	adds	r7, #12
 800707a:	46bd      	mov	sp, r7
 800707c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007080:	4770      	bx	lr

08007082 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8007082:	b480      	push	{r7}
 8007084:	b085      	sub	sp, #20
 8007086:	af00      	add	r7, sp, #0
 8007088:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	68fa      	ldr	r2, [r7, #12]
 8007098:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800709c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80070a0:	f023 0307 	bic.w	r3, r3, #7
 80070a4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80070ac:	685b      	ldr	r3, [r3, #4]
 80070ae:	68fa      	ldr	r2, [r7, #12]
 80070b0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80070b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80070b8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80070ba:	2300      	movs	r3, #0
}
 80070bc:	4618      	mov	r0, r3
 80070be:	3714      	adds	r7, #20
 80070c0:	46bd      	mov	sp, r7
 80070c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c6:	4770      	bx	lr

080070c8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80070c8:	b480      	push	{r7}
 80070ca:	b087      	sub	sp, #28
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	60f8      	str	r0, [r7, #12]
 80070d0:	460b      	mov	r3, r1
 80070d2:	607a      	str	r2, [r7, #4]
 80070d4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	333c      	adds	r3, #60	@ 0x3c
 80070de:	3304      	adds	r3, #4
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80070e4:	693b      	ldr	r3, [r7, #16]
 80070e6:	4a26      	ldr	r2, [pc, #152]	@ (8007180 <USB_EP0_OutStart+0xb8>)
 80070e8:	4293      	cmp	r3, r2
 80070ea:	d90a      	bls.n	8007102 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80070ec:	697b      	ldr	r3, [r7, #20]
 80070ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80070f8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80070fc:	d101      	bne.n	8007102 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80070fe:	2300      	movs	r3, #0
 8007100:	e037      	b.n	8007172 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007102:	697b      	ldr	r3, [r7, #20]
 8007104:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007108:	461a      	mov	r2, r3
 800710a:	2300      	movs	r3, #0
 800710c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800710e:	697b      	ldr	r3, [r7, #20]
 8007110:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007114:	691b      	ldr	r3, [r3, #16]
 8007116:	697a      	ldr	r2, [r7, #20]
 8007118:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800711c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007120:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007122:	697b      	ldr	r3, [r7, #20]
 8007124:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007128:	691b      	ldr	r3, [r3, #16]
 800712a:	697a      	ldr	r2, [r7, #20]
 800712c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007130:	f043 0318 	orr.w	r3, r3, #24
 8007134:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007136:	697b      	ldr	r3, [r7, #20]
 8007138:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800713c:	691b      	ldr	r3, [r3, #16]
 800713e:	697a      	ldr	r2, [r7, #20]
 8007140:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007144:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8007148:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800714a:	7afb      	ldrb	r3, [r7, #11]
 800714c:	2b01      	cmp	r3, #1
 800714e:	d10f      	bne.n	8007170 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007150:	697b      	ldr	r3, [r7, #20]
 8007152:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007156:	461a      	mov	r2, r3
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800715c:	697b      	ldr	r3, [r7, #20]
 800715e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	697a      	ldr	r2, [r7, #20]
 8007166:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800716a:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800716e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007170:	2300      	movs	r3, #0
}
 8007172:	4618      	mov	r0, r3
 8007174:	371c      	adds	r7, #28
 8007176:	46bd      	mov	sp, r7
 8007178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717c:	4770      	bx	lr
 800717e:	bf00      	nop
 8007180:	4f54300a 	.word	0x4f54300a

08007184 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007184:	b480      	push	{r7}
 8007186:	b085      	sub	sp, #20
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800718c:	2300      	movs	r3, #0
 800718e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	3301      	adds	r3, #1
 8007194:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800719c:	d901      	bls.n	80071a2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800719e:	2303      	movs	r3, #3
 80071a0:	e01b      	b.n	80071da <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	691b      	ldr	r3, [r3, #16]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	daf2      	bge.n	8007190 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80071aa:	2300      	movs	r3, #0
 80071ac:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	691b      	ldr	r3, [r3, #16]
 80071b2:	f043 0201 	orr.w	r2, r3, #1
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	3301      	adds	r3, #1
 80071be:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80071c6:	d901      	bls.n	80071cc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80071c8:	2303      	movs	r3, #3
 80071ca:	e006      	b.n	80071da <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	691b      	ldr	r3, [r3, #16]
 80071d0:	f003 0301 	and.w	r3, r3, #1
 80071d4:	2b01      	cmp	r3, #1
 80071d6:	d0f0      	beq.n	80071ba <USB_CoreReset+0x36>

  return HAL_OK;
 80071d8:	2300      	movs	r3, #0
}
 80071da:	4618      	mov	r0, r3
 80071dc:	3714      	adds	r7, #20
 80071de:	46bd      	mov	sp, r7
 80071e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e4:	4770      	bx	lr
	...

080071e8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80071e8:	b580      	push	{r7, lr}
 80071ea:	b084      	sub	sp, #16
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
 80071f0:	460b      	mov	r3, r1
 80071f2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80071f4:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80071f8:	f002 fcc2 	bl	8009b80 <USBD_static_malloc>
 80071fc:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	2b00      	cmp	r3, #0
 8007202:	d109      	bne.n	8007218 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	32b0      	adds	r2, #176	@ 0xb0
 800720e:	2100      	movs	r1, #0
 8007210:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8007214:	2302      	movs	r3, #2
 8007216:	e0d4      	b.n	80073c2 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8007218:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800721c:	2100      	movs	r1, #0
 800721e:	68f8      	ldr	r0, [r7, #12]
 8007220:	f002 ff1c 	bl	800a05c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	32b0      	adds	r2, #176	@ 0xb0
 800722e:	68f9      	ldr	r1, [r7, #12]
 8007230:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	32b0      	adds	r2, #176	@ 0xb0
 800723e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	7c1b      	ldrb	r3, [r3, #16]
 800724c:	2b00      	cmp	r3, #0
 800724e:	d138      	bne.n	80072c2 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007250:	4b5e      	ldr	r3, [pc, #376]	@ (80073cc <USBD_CDC_Init+0x1e4>)
 8007252:	7819      	ldrb	r1, [r3, #0]
 8007254:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007258:	2202      	movs	r2, #2
 800725a:	6878      	ldr	r0, [r7, #4]
 800725c:	f002 fb6d 	bl	800993a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007260:	4b5a      	ldr	r3, [pc, #360]	@ (80073cc <USBD_CDC_Init+0x1e4>)
 8007262:	781b      	ldrb	r3, [r3, #0]
 8007264:	f003 020f 	and.w	r2, r3, #15
 8007268:	6879      	ldr	r1, [r7, #4]
 800726a:	4613      	mov	r3, r2
 800726c:	009b      	lsls	r3, r3, #2
 800726e:	4413      	add	r3, r2
 8007270:	009b      	lsls	r3, r3, #2
 8007272:	440b      	add	r3, r1
 8007274:	3324      	adds	r3, #36	@ 0x24
 8007276:	2201      	movs	r2, #1
 8007278:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800727a:	4b55      	ldr	r3, [pc, #340]	@ (80073d0 <USBD_CDC_Init+0x1e8>)
 800727c:	7819      	ldrb	r1, [r3, #0]
 800727e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007282:	2202      	movs	r2, #2
 8007284:	6878      	ldr	r0, [r7, #4]
 8007286:	f002 fb58 	bl	800993a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800728a:	4b51      	ldr	r3, [pc, #324]	@ (80073d0 <USBD_CDC_Init+0x1e8>)
 800728c:	781b      	ldrb	r3, [r3, #0]
 800728e:	f003 020f 	and.w	r2, r3, #15
 8007292:	6879      	ldr	r1, [r7, #4]
 8007294:	4613      	mov	r3, r2
 8007296:	009b      	lsls	r3, r3, #2
 8007298:	4413      	add	r3, r2
 800729a:	009b      	lsls	r3, r3, #2
 800729c:	440b      	add	r3, r1
 800729e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80072a2:	2201      	movs	r2, #1
 80072a4:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80072a6:	4b4b      	ldr	r3, [pc, #300]	@ (80073d4 <USBD_CDC_Init+0x1ec>)
 80072a8:	781b      	ldrb	r3, [r3, #0]
 80072aa:	f003 020f 	and.w	r2, r3, #15
 80072ae:	6879      	ldr	r1, [r7, #4]
 80072b0:	4613      	mov	r3, r2
 80072b2:	009b      	lsls	r3, r3, #2
 80072b4:	4413      	add	r3, r2
 80072b6:	009b      	lsls	r3, r3, #2
 80072b8:	440b      	add	r3, r1
 80072ba:	3326      	adds	r3, #38	@ 0x26
 80072bc:	2210      	movs	r2, #16
 80072be:	801a      	strh	r2, [r3, #0]
 80072c0:	e035      	b.n	800732e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80072c2:	4b42      	ldr	r3, [pc, #264]	@ (80073cc <USBD_CDC_Init+0x1e4>)
 80072c4:	7819      	ldrb	r1, [r3, #0]
 80072c6:	2340      	movs	r3, #64	@ 0x40
 80072c8:	2202      	movs	r2, #2
 80072ca:	6878      	ldr	r0, [r7, #4]
 80072cc:	f002 fb35 	bl	800993a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80072d0:	4b3e      	ldr	r3, [pc, #248]	@ (80073cc <USBD_CDC_Init+0x1e4>)
 80072d2:	781b      	ldrb	r3, [r3, #0]
 80072d4:	f003 020f 	and.w	r2, r3, #15
 80072d8:	6879      	ldr	r1, [r7, #4]
 80072da:	4613      	mov	r3, r2
 80072dc:	009b      	lsls	r3, r3, #2
 80072de:	4413      	add	r3, r2
 80072e0:	009b      	lsls	r3, r3, #2
 80072e2:	440b      	add	r3, r1
 80072e4:	3324      	adds	r3, #36	@ 0x24
 80072e6:	2201      	movs	r2, #1
 80072e8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80072ea:	4b39      	ldr	r3, [pc, #228]	@ (80073d0 <USBD_CDC_Init+0x1e8>)
 80072ec:	7819      	ldrb	r1, [r3, #0]
 80072ee:	2340      	movs	r3, #64	@ 0x40
 80072f0:	2202      	movs	r2, #2
 80072f2:	6878      	ldr	r0, [r7, #4]
 80072f4:	f002 fb21 	bl	800993a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80072f8:	4b35      	ldr	r3, [pc, #212]	@ (80073d0 <USBD_CDC_Init+0x1e8>)
 80072fa:	781b      	ldrb	r3, [r3, #0]
 80072fc:	f003 020f 	and.w	r2, r3, #15
 8007300:	6879      	ldr	r1, [r7, #4]
 8007302:	4613      	mov	r3, r2
 8007304:	009b      	lsls	r3, r3, #2
 8007306:	4413      	add	r3, r2
 8007308:	009b      	lsls	r3, r3, #2
 800730a:	440b      	add	r3, r1
 800730c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007310:	2201      	movs	r2, #1
 8007312:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007314:	4b2f      	ldr	r3, [pc, #188]	@ (80073d4 <USBD_CDC_Init+0x1ec>)
 8007316:	781b      	ldrb	r3, [r3, #0]
 8007318:	f003 020f 	and.w	r2, r3, #15
 800731c:	6879      	ldr	r1, [r7, #4]
 800731e:	4613      	mov	r3, r2
 8007320:	009b      	lsls	r3, r3, #2
 8007322:	4413      	add	r3, r2
 8007324:	009b      	lsls	r3, r3, #2
 8007326:	440b      	add	r3, r1
 8007328:	3326      	adds	r3, #38	@ 0x26
 800732a:	2210      	movs	r2, #16
 800732c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800732e:	4b29      	ldr	r3, [pc, #164]	@ (80073d4 <USBD_CDC_Init+0x1ec>)
 8007330:	7819      	ldrb	r1, [r3, #0]
 8007332:	2308      	movs	r3, #8
 8007334:	2203      	movs	r2, #3
 8007336:	6878      	ldr	r0, [r7, #4]
 8007338:	f002 faff 	bl	800993a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800733c:	4b25      	ldr	r3, [pc, #148]	@ (80073d4 <USBD_CDC_Init+0x1ec>)
 800733e:	781b      	ldrb	r3, [r3, #0]
 8007340:	f003 020f 	and.w	r2, r3, #15
 8007344:	6879      	ldr	r1, [r7, #4]
 8007346:	4613      	mov	r3, r2
 8007348:	009b      	lsls	r3, r3, #2
 800734a:	4413      	add	r3, r2
 800734c:	009b      	lsls	r3, r3, #2
 800734e:	440b      	add	r3, r1
 8007350:	3324      	adds	r3, #36	@ 0x24
 8007352:	2201      	movs	r2, #1
 8007354:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	2200      	movs	r2, #0
 800735a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007364:	687a      	ldr	r2, [r7, #4]
 8007366:	33b0      	adds	r3, #176	@ 0xb0
 8007368:	009b      	lsls	r3, r3, #2
 800736a:	4413      	add	r3, r2
 800736c:	685b      	ldr	r3, [r3, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	2200      	movs	r2, #0
 8007376:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	2200      	movs	r2, #0
 800737e:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8007388:	2b00      	cmp	r3, #0
 800738a:	d101      	bne.n	8007390 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800738c:	2302      	movs	r3, #2
 800738e:	e018      	b.n	80073c2 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	7c1b      	ldrb	r3, [r3, #16]
 8007394:	2b00      	cmp	r3, #0
 8007396:	d10a      	bne.n	80073ae <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007398:	4b0d      	ldr	r3, [pc, #52]	@ (80073d0 <USBD_CDC_Init+0x1e8>)
 800739a:	7819      	ldrb	r1, [r3, #0]
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80073a2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80073a6:	6878      	ldr	r0, [r7, #4]
 80073a8:	f002 fbb6 	bl	8009b18 <USBD_LL_PrepareReceive>
 80073ac:	e008      	b.n	80073c0 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80073ae:	4b08      	ldr	r3, [pc, #32]	@ (80073d0 <USBD_CDC_Init+0x1e8>)
 80073b0:	7819      	ldrb	r1, [r3, #0]
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80073b8:	2340      	movs	r3, #64	@ 0x40
 80073ba:	6878      	ldr	r0, [r7, #4]
 80073bc:	f002 fbac 	bl	8009b18 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80073c0:	2300      	movs	r3, #0
}
 80073c2:	4618      	mov	r0, r3
 80073c4:	3710      	adds	r7, #16
 80073c6:	46bd      	mov	sp, r7
 80073c8:	bd80      	pop	{r7, pc}
 80073ca:	bf00      	nop
 80073cc:	20000093 	.word	0x20000093
 80073d0:	20000094 	.word	0x20000094
 80073d4:	20000095 	.word	0x20000095

080073d8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	b082      	sub	sp, #8
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
 80073e0:	460b      	mov	r3, r1
 80073e2:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80073e4:	4b3a      	ldr	r3, [pc, #232]	@ (80074d0 <USBD_CDC_DeInit+0xf8>)
 80073e6:	781b      	ldrb	r3, [r3, #0]
 80073e8:	4619      	mov	r1, r3
 80073ea:	6878      	ldr	r0, [r7, #4]
 80073ec:	f002 facb 	bl	8009986 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80073f0:	4b37      	ldr	r3, [pc, #220]	@ (80074d0 <USBD_CDC_DeInit+0xf8>)
 80073f2:	781b      	ldrb	r3, [r3, #0]
 80073f4:	f003 020f 	and.w	r2, r3, #15
 80073f8:	6879      	ldr	r1, [r7, #4]
 80073fa:	4613      	mov	r3, r2
 80073fc:	009b      	lsls	r3, r3, #2
 80073fe:	4413      	add	r3, r2
 8007400:	009b      	lsls	r3, r3, #2
 8007402:	440b      	add	r3, r1
 8007404:	3324      	adds	r3, #36	@ 0x24
 8007406:	2200      	movs	r2, #0
 8007408:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800740a:	4b32      	ldr	r3, [pc, #200]	@ (80074d4 <USBD_CDC_DeInit+0xfc>)
 800740c:	781b      	ldrb	r3, [r3, #0]
 800740e:	4619      	mov	r1, r3
 8007410:	6878      	ldr	r0, [r7, #4]
 8007412:	f002 fab8 	bl	8009986 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8007416:	4b2f      	ldr	r3, [pc, #188]	@ (80074d4 <USBD_CDC_DeInit+0xfc>)
 8007418:	781b      	ldrb	r3, [r3, #0]
 800741a:	f003 020f 	and.w	r2, r3, #15
 800741e:	6879      	ldr	r1, [r7, #4]
 8007420:	4613      	mov	r3, r2
 8007422:	009b      	lsls	r3, r3, #2
 8007424:	4413      	add	r3, r2
 8007426:	009b      	lsls	r3, r3, #2
 8007428:	440b      	add	r3, r1
 800742a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800742e:	2200      	movs	r2, #0
 8007430:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8007432:	4b29      	ldr	r3, [pc, #164]	@ (80074d8 <USBD_CDC_DeInit+0x100>)
 8007434:	781b      	ldrb	r3, [r3, #0]
 8007436:	4619      	mov	r1, r3
 8007438:	6878      	ldr	r0, [r7, #4]
 800743a:	f002 faa4 	bl	8009986 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800743e:	4b26      	ldr	r3, [pc, #152]	@ (80074d8 <USBD_CDC_DeInit+0x100>)
 8007440:	781b      	ldrb	r3, [r3, #0]
 8007442:	f003 020f 	and.w	r2, r3, #15
 8007446:	6879      	ldr	r1, [r7, #4]
 8007448:	4613      	mov	r3, r2
 800744a:	009b      	lsls	r3, r3, #2
 800744c:	4413      	add	r3, r2
 800744e:	009b      	lsls	r3, r3, #2
 8007450:	440b      	add	r3, r1
 8007452:	3324      	adds	r3, #36	@ 0x24
 8007454:	2200      	movs	r2, #0
 8007456:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8007458:	4b1f      	ldr	r3, [pc, #124]	@ (80074d8 <USBD_CDC_DeInit+0x100>)
 800745a:	781b      	ldrb	r3, [r3, #0]
 800745c:	f003 020f 	and.w	r2, r3, #15
 8007460:	6879      	ldr	r1, [r7, #4]
 8007462:	4613      	mov	r3, r2
 8007464:	009b      	lsls	r3, r3, #2
 8007466:	4413      	add	r3, r2
 8007468:	009b      	lsls	r3, r3, #2
 800746a:	440b      	add	r3, r1
 800746c:	3326      	adds	r3, #38	@ 0x26
 800746e:	2200      	movs	r2, #0
 8007470:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	32b0      	adds	r2, #176	@ 0xb0
 800747c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007480:	2b00      	cmp	r3, #0
 8007482:	d01f      	beq.n	80074c4 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800748a:	687a      	ldr	r2, [r7, #4]
 800748c:	33b0      	adds	r3, #176	@ 0xb0
 800748e:	009b      	lsls	r3, r3, #2
 8007490:	4413      	add	r3, r2
 8007492:	685b      	ldr	r3, [r3, #4]
 8007494:	685b      	ldr	r3, [r3, #4]
 8007496:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	32b0      	adds	r2, #176	@ 0xb0
 80074a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074a6:	4618      	mov	r0, r3
 80074a8:	f002 fb78 	bl	8009b9c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	32b0      	adds	r2, #176	@ 0xb0
 80074b6:	2100      	movs	r1, #0
 80074b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2200      	movs	r2, #0
 80074c0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 80074c4:	2300      	movs	r3, #0
}
 80074c6:	4618      	mov	r0, r3
 80074c8:	3708      	adds	r7, #8
 80074ca:	46bd      	mov	sp, r7
 80074cc:	bd80      	pop	{r7, pc}
 80074ce:	bf00      	nop
 80074d0:	20000093 	.word	0x20000093
 80074d4:	20000094 	.word	0x20000094
 80074d8:	20000095 	.word	0x20000095

080074dc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80074dc:	b580      	push	{r7, lr}
 80074de:	b086      	sub	sp, #24
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
 80074e4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	32b0      	adds	r2, #176	@ 0xb0
 80074f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074f4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80074f6:	2300      	movs	r3, #0
 80074f8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80074fa:	2300      	movs	r3, #0
 80074fc:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80074fe:	2300      	movs	r3, #0
 8007500:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8007502:	693b      	ldr	r3, [r7, #16]
 8007504:	2b00      	cmp	r3, #0
 8007506:	d101      	bne.n	800750c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8007508:	2303      	movs	r3, #3
 800750a:	e0bf      	b.n	800768c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800750c:	683b      	ldr	r3, [r7, #0]
 800750e:	781b      	ldrb	r3, [r3, #0]
 8007510:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007514:	2b00      	cmp	r3, #0
 8007516:	d050      	beq.n	80075ba <USBD_CDC_Setup+0xde>
 8007518:	2b20      	cmp	r3, #32
 800751a:	f040 80af 	bne.w	800767c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800751e:	683b      	ldr	r3, [r7, #0]
 8007520:	88db      	ldrh	r3, [r3, #6]
 8007522:	2b00      	cmp	r3, #0
 8007524:	d03a      	beq.n	800759c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007526:	683b      	ldr	r3, [r7, #0]
 8007528:	781b      	ldrb	r3, [r3, #0]
 800752a:	b25b      	sxtb	r3, r3
 800752c:	2b00      	cmp	r3, #0
 800752e:	da1b      	bge.n	8007568 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007536:	687a      	ldr	r2, [r7, #4]
 8007538:	33b0      	adds	r3, #176	@ 0xb0
 800753a:	009b      	lsls	r3, r3, #2
 800753c:	4413      	add	r3, r2
 800753e:	685b      	ldr	r3, [r3, #4]
 8007540:	689b      	ldr	r3, [r3, #8]
 8007542:	683a      	ldr	r2, [r7, #0]
 8007544:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8007546:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007548:	683a      	ldr	r2, [r7, #0]
 800754a:	88d2      	ldrh	r2, [r2, #6]
 800754c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800754e:	683b      	ldr	r3, [r7, #0]
 8007550:	88db      	ldrh	r3, [r3, #6]
 8007552:	2b07      	cmp	r3, #7
 8007554:	bf28      	it	cs
 8007556:	2307      	movcs	r3, #7
 8007558:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800755a:	693b      	ldr	r3, [r7, #16]
 800755c:	89fa      	ldrh	r2, [r7, #14]
 800755e:	4619      	mov	r1, r3
 8007560:	6878      	ldr	r0, [r7, #4]
 8007562:	f001 fd87 	bl	8009074 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8007566:	e090      	b.n	800768a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8007568:	683b      	ldr	r3, [r7, #0]
 800756a:	785a      	ldrb	r2, [r3, #1]
 800756c:	693b      	ldr	r3, [r7, #16]
 800756e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8007572:	683b      	ldr	r3, [r7, #0]
 8007574:	88db      	ldrh	r3, [r3, #6]
 8007576:	2b3f      	cmp	r3, #63	@ 0x3f
 8007578:	d803      	bhi.n	8007582 <USBD_CDC_Setup+0xa6>
 800757a:	683b      	ldr	r3, [r7, #0]
 800757c:	88db      	ldrh	r3, [r3, #6]
 800757e:	b2da      	uxtb	r2, r3
 8007580:	e000      	b.n	8007584 <USBD_CDC_Setup+0xa8>
 8007582:	2240      	movs	r2, #64	@ 0x40
 8007584:	693b      	ldr	r3, [r7, #16]
 8007586:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800758a:	6939      	ldr	r1, [r7, #16]
 800758c:	693b      	ldr	r3, [r7, #16]
 800758e:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8007592:	461a      	mov	r2, r3
 8007594:	6878      	ldr	r0, [r7, #4]
 8007596:	f001 fd99 	bl	80090cc <USBD_CtlPrepareRx>
      break;
 800759a:	e076      	b.n	800768a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80075a2:	687a      	ldr	r2, [r7, #4]
 80075a4:	33b0      	adds	r3, #176	@ 0xb0
 80075a6:	009b      	lsls	r3, r3, #2
 80075a8:	4413      	add	r3, r2
 80075aa:	685b      	ldr	r3, [r3, #4]
 80075ac:	689b      	ldr	r3, [r3, #8]
 80075ae:	683a      	ldr	r2, [r7, #0]
 80075b0:	7850      	ldrb	r0, [r2, #1]
 80075b2:	2200      	movs	r2, #0
 80075b4:	6839      	ldr	r1, [r7, #0]
 80075b6:	4798      	blx	r3
      break;
 80075b8:	e067      	b.n	800768a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80075ba:	683b      	ldr	r3, [r7, #0]
 80075bc:	785b      	ldrb	r3, [r3, #1]
 80075be:	2b0b      	cmp	r3, #11
 80075c0:	d851      	bhi.n	8007666 <USBD_CDC_Setup+0x18a>
 80075c2:	a201      	add	r2, pc, #4	@ (adr r2, 80075c8 <USBD_CDC_Setup+0xec>)
 80075c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075c8:	080075f9 	.word	0x080075f9
 80075cc:	08007675 	.word	0x08007675
 80075d0:	08007667 	.word	0x08007667
 80075d4:	08007667 	.word	0x08007667
 80075d8:	08007667 	.word	0x08007667
 80075dc:	08007667 	.word	0x08007667
 80075e0:	08007667 	.word	0x08007667
 80075e4:	08007667 	.word	0x08007667
 80075e8:	08007667 	.word	0x08007667
 80075ec:	08007667 	.word	0x08007667
 80075f0:	08007623 	.word	0x08007623
 80075f4:	0800764d 	.word	0x0800764d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80075fe:	b2db      	uxtb	r3, r3
 8007600:	2b03      	cmp	r3, #3
 8007602:	d107      	bne.n	8007614 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007604:	f107 030a 	add.w	r3, r7, #10
 8007608:	2202      	movs	r2, #2
 800760a:	4619      	mov	r1, r3
 800760c:	6878      	ldr	r0, [r7, #4]
 800760e:	f001 fd31 	bl	8009074 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007612:	e032      	b.n	800767a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007614:	6839      	ldr	r1, [r7, #0]
 8007616:	6878      	ldr	r0, [r7, #4]
 8007618:	f001 fcbb 	bl	8008f92 <USBD_CtlError>
            ret = USBD_FAIL;
 800761c:	2303      	movs	r3, #3
 800761e:	75fb      	strb	r3, [r7, #23]
          break;
 8007620:	e02b      	b.n	800767a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007628:	b2db      	uxtb	r3, r3
 800762a:	2b03      	cmp	r3, #3
 800762c:	d107      	bne.n	800763e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800762e:	f107 030d 	add.w	r3, r7, #13
 8007632:	2201      	movs	r2, #1
 8007634:	4619      	mov	r1, r3
 8007636:	6878      	ldr	r0, [r7, #4]
 8007638:	f001 fd1c 	bl	8009074 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800763c:	e01d      	b.n	800767a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800763e:	6839      	ldr	r1, [r7, #0]
 8007640:	6878      	ldr	r0, [r7, #4]
 8007642:	f001 fca6 	bl	8008f92 <USBD_CtlError>
            ret = USBD_FAIL;
 8007646:	2303      	movs	r3, #3
 8007648:	75fb      	strb	r3, [r7, #23]
          break;
 800764a:	e016      	b.n	800767a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007652:	b2db      	uxtb	r3, r3
 8007654:	2b03      	cmp	r3, #3
 8007656:	d00f      	beq.n	8007678 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8007658:	6839      	ldr	r1, [r7, #0]
 800765a:	6878      	ldr	r0, [r7, #4]
 800765c:	f001 fc99 	bl	8008f92 <USBD_CtlError>
            ret = USBD_FAIL;
 8007660:	2303      	movs	r3, #3
 8007662:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007664:	e008      	b.n	8007678 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007666:	6839      	ldr	r1, [r7, #0]
 8007668:	6878      	ldr	r0, [r7, #4]
 800766a:	f001 fc92 	bl	8008f92 <USBD_CtlError>
          ret = USBD_FAIL;
 800766e:	2303      	movs	r3, #3
 8007670:	75fb      	strb	r3, [r7, #23]
          break;
 8007672:	e002      	b.n	800767a <USBD_CDC_Setup+0x19e>
          break;
 8007674:	bf00      	nop
 8007676:	e008      	b.n	800768a <USBD_CDC_Setup+0x1ae>
          break;
 8007678:	bf00      	nop
      }
      break;
 800767a:	e006      	b.n	800768a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800767c:	6839      	ldr	r1, [r7, #0]
 800767e:	6878      	ldr	r0, [r7, #4]
 8007680:	f001 fc87 	bl	8008f92 <USBD_CtlError>
      ret = USBD_FAIL;
 8007684:	2303      	movs	r3, #3
 8007686:	75fb      	strb	r3, [r7, #23]
      break;
 8007688:	bf00      	nop
  }

  return (uint8_t)ret;
 800768a:	7dfb      	ldrb	r3, [r7, #23]
}
 800768c:	4618      	mov	r0, r3
 800768e:	3718      	adds	r7, #24
 8007690:	46bd      	mov	sp, r7
 8007692:	bd80      	pop	{r7, pc}

08007694 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007694:	b580      	push	{r7, lr}
 8007696:	b084      	sub	sp, #16
 8007698:	af00      	add	r7, sp, #0
 800769a:	6078      	str	r0, [r7, #4]
 800769c:	460b      	mov	r3, r1
 800769e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80076a6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	32b0      	adds	r2, #176	@ 0xb0
 80076b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d101      	bne.n	80076be <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80076ba:	2303      	movs	r3, #3
 80076bc:	e065      	b.n	800778a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	32b0      	adds	r2, #176	@ 0xb0
 80076c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076cc:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80076ce:	78fb      	ldrb	r3, [r7, #3]
 80076d0:	f003 020f 	and.w	r2, r3, #15
 80076d4:	6879      	ldr	r1, [r7, #4]
 80076d6:	4613      	mov	r3, r2
 80076d8:	009b      	lsls	r3, r3, #2
 80076da:	4413      	add	r3, r2
 80076dc:	009b      	lsls	r3, r3, #2
 80076de:	440b      	add	r3, r1
 80076e0:	3318      	adds	r3, #24
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d02f      	beq.n	8007748 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80076e8:	78fb      	ldrb	r3, [r7, #3]
 80076ea:	f003 020f 	and.w	r2, r3, #15
 80076ee:	6879      	ldr	r1, [r7, #4]
 80076f0:	4613      	mov	r3, r2
 80076f2:	009b      	lsls	r3, r3, #2
 80076f4:	4413      	add	r3, r2
 80076f6:	009b      	lsls	r3, r3, #2
 80076f8:	440b      	add	r3, r1
 80076fa:	3318      	adds	r3, #24
 80076fc:	681a      	ldr	r2, [r3, #0]
 80076fe:	78fb      	ldrb	r3, [r7, #3]
 8007700:	f003 010f 	and.w	r1, r3, #15
 8007704:	68f8      	ldr	r0, [r7, #12]
 8007706:	460b      	mov	r3, r1
 8007708:	00db      	lsls	r3, r3, #3
 800770a:	440b      	add	r3, r1
 800770c:	009b      	lsls	r3, r3, #2
 800770e:	4403      	add	r3, r0
 8007710:	331c      	adds	r3, #28
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	fbb2 f1f3 	udiv	r1, r2, r3
 8007718:	fb01 f303 	mul.w	r3, r1, r3
 800771c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800771e:	2b00      	cmp	r3, #0
 8007720:	d112      	bne.n	8007748 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8007722:	78fb      	ldrb	r3, [r7, #3]
 8007724:	f003 020f 	and.w	r2, r3, #15
 8007728:	6879      	ldr	r1, [r7, #4]
 800772a:	4613      	mov	r3, r2
 800772c:	009b      	lsls	r3, r3, #2
 800772e:	4413      	add	r3, r2
 8007730:	009b      	lsls	r3, r3, #2
 8007732:	440b      	add	r3, r1
 8007734:	3318      	adds	r3, #24
 8007736:	2200      	movs	r2, #0
 8007738:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800773a:	78f9      	ldrb	r1, [r7, #3]
 800773c:	2300      	movs	r3, #0
 800773e:	2200      	movs	r2, #0
 8007740:	6878      	ldr	r0, [r7, #4]
 8007742:	f002 f9c8 	bl	8009ad6 <USBD_LL_Transmit>
 8007746:	e01f      	b.n	8007788 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8007748:	68bb      	ldr	r3, [r7, #8]
 800774a:	2200      	movs	r2, #0
 800774c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007756:	687a      	ldr	r2, [r7, #4]
 8007758:	33b0      	adds	r3, #176	@ 0xb0
 800775a:	009b      	lsls	r3, r3, #2
 800775c:	4413      	add	r3, r2
 800775e:	685b      	ldr	r3, [r3, #4]
 8007760:	691b      	ldr	r3, [r3, #16]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d010      	beq.n	8007788 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800776c:	687a      	ldr	r2, [r7, #4]
 800776e:	33b0      	adds	r3, #176	@ 0xb0
 8007770:	009b      	lsls	r3, r3, #2
 8007772:	4413      	add	r3, r2
 8007774:	685b      	ldr	r3, [r3, #4]
 8007776:	691b      	ldr	r3, [r3, #16]
 8007778:	68ba      	ldr	r2, [r7, #8]
 800777a:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800777e:	68ba      	ldr	r2, [r7, #8]
 8007780:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8007784:	78fa      	ldrb	r2, [r7, #3]
 8007786:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007788:	2300      	movs	r3, #0
}
 800778a:	4618      	mov	r0, r3
 800778c:	3710      	adds	r7, #16
 800778e:	46bd      	mov	sp, r7
 8007790:	bd80      	pop	{r7, pc}

08007792 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007792:	b580      	push	{r7, lr}
 8007794:	b084      	sub	sp, #16
 8007796:	af00      	add	r7, sp, #0
 8007798:	6078      	str	r0, [r7, #4]
 800779a:	460b      	mov	r3, r1
 800779c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	32b0      	adds	r2, #176	@ 0xb0
 80077a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077ac:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	32b0      	adds	r2, #176	@ 0xb0
 80077b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d101      	bne.n	80077c4 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80077c0:	2303      	movs	r3, #3
 80077c2:	e01a      	b.n	80077fa <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80077c4:	78fb      	ldrb	r3, [r7, #3]
 80077c6:	4619      	mov	r1, r3
 80077c8:	6878      	ldr	r0, [r7, #4]
 80077ca:	f002 f9c6 	bl	8009b5a <USBD_LL_GetRxDataSize>
 80077ce:	4602      	mov	r2, r0
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80077dc:	687a      	ldr	r2, [r7, #4]
 80077de:	33b0      	adds	r3, #176	@ 0xb0
 80077e0:	009b      	lsls	r3, r3, #2
 80077e2:	4413      	add	r3, r2
 80077e4:	685b      	ldr	r3, [r3, #4]
 80077e6:	68db      	ldr	r3, [r3, #12]
 80077e8:	68fa      	ldr	r2, [r7, #12]
 80077ea:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 80077ee:	68fa      	ldr	r2, [r7, #12]
 80077f0:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 80077f4:	4611      	mov	r1, r2
 80077f6:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80077f8:	2300      	movs	r3, #0
}
 80077fa:	4618      	mov	r0, r3
 80077fc:	3710      	adds	r7, #16
 80077fe:	46bd      	mov	sp, r7
 8007800:	bd80      	pop	{r7, pc}

08007802 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007802:	b580      	push	{r7, lr}
 8007804:	b084      	sub	sp, #16
 8007806:	af00      	add	r7, sp, #0
 8007808:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	32b0      	adds	r2, #176	@ 0xb0
 8007814:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007818:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	2b00      	cmp	r3, #0
 800781e:	d101      	bne.n	8007824 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007820:	2303      	movs	r3, #3
 8007822:	e024      	b.n	800786e <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800782a:	687a      	ldr	r2, [r7, #4]
 800782c:	33b0      	adds	r3, #176	@ 0xb0
 800782e:	009b      	lsls	r3, r3, #2
 8007830:	4413      	add	r3, r2
 8007832:	685b      	ldr	r3, [r3, #4]
 8007834:	2b00      	cmp	r3, #0
 8007836:	d019      	beq.n	800786c <USBD_CDC_EP0_RxReady+0x6a>
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800783e:	2bff      	cmp	r3, #255	@ 0xff
 8007840:	d014      	beq.n	800786c <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007848:	687a      	ldr	r2, [r7, #4]
 800784a:	33b0      	adds	r3, #176	@ 0xb0
 800784c:	009b      	lsls	r3, r3, #2
 800784e:	4413      	add	r3, r2
 8007850:	685b      	ldr	r3, [r3, #4]
 8007852:	689b      	ldr	r3, [r3, #8]
 8007854:	68fa      	ldr	r2, [r7, #12]
 8007856:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800785a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800785c:	68fa      	ldr	r2, [r7, #12]
 800785e:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007862:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	22ff      	movs	r2, #255	@ 0xff
 8007868:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800786c:	2300      	movs	r3, #0
}
 800786e:	4618      	mov	r0, r3
 8007870:	3710      	adds	r7, #16
 8007872:	46bd      	mov	sp, r7
 8007874:	bd80      	pop	{r7, pc}
	...

08007878 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007878:	b580      	push	{r7, lr}
 800787a:	b086      	sub	sp, #24
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007880:	2182      	movs	r1, #130	@ 0x82
 8007882:	4818      	ldr	r0, [pc, #96]	@ (80078e4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007884:	f000 fd4f 	bl	8008326 <USBD_GetEpDesc>
 8007888:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800788a:	2101      	movs	r1, #1
 800788c:	4815      	ldr	r0, [pc, #84]	@ (80078e4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800788e:	f000 fd4a 	bl	8008326 <USBD_GetEpDesc>
 8007892:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007894:	2181      	movs	r1, #129	@ 0x81
 8007896:	4813      	ldr	r0, [pc, #76]	@ (80078e4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007898:	f000 fd45 	bl	8008326 <USBD_GetEpDesc>
 800789c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800789e:	697b      	ldr	r3, [r7, #20]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d002      	beq.n	80078aa <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80078a4:	697b      	ldr	r3, [r7, #20]
 80078a6:	2210      	movs	r2, #16
 80078a8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80078aa:	693b      	ldr	r3, [r7, #16]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d006      	beq.n	80078be <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80078b0:	693b      	ldr	r3, [r7, #16]
 80078b2:	2200      	movs	r2, #0
 80078b4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80078b8:	711a      	strb	r2, [r3, #4]
 80078ba:	2200      	movs	r2, #0
 80078bc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d006      	beq.n	80078d2 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	2200      	movs	r2, #0
 80078c8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80078cc:	711a      	strb	r2, [r3, #4]
 80078ce:	2200      	movs	r2, #0
 80078d0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	2243      	movs	r2, #67	@ 0x43
 80078d6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80078d8:	4b02      	ldr	r3, [pc, #8]	@ (80078e4 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80078da:	4618      	mov	r0, r3
 80078dc:	3718      	adds	r7, #24
 80078de:	46bd      	mov	sp, r7
 80078e0:	bd80      	pop	{r7, pc}
 80078e2:	bf00      	nop
 80078e4:	20000050 	.word	0x20000050

080078e8 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	b086      	sub	sp, #24
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80078f0:	2182      	movs	r1, #130	@ 0x82
 80078f2:	4818      	ldr	r0, [pc, #96]	@ (8007954 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80078f4:	f000 fd17 	bl	8008326 <USBD_GetEpDesc>
 80078f8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80078fa:	2101      	movs	r1, #1
 80078fc:	4815      	ldr	r0, [pc, #84]	@ (8007954 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80078fe:	f000 fd12 	bl	8008326 <USBD_GetEpDesc>
 8007902:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007904:	2181      	movs	r1, #129	@ 0x81
 8007906:	4813      	ldr	r0, [pc, #76]	@ (8007954 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007908:	f000 fd0d 	bl	8008326 <USBD_GetEpDesc>
 800790c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800790e:	697b      	ldr	r3, [r7, #20]
 8007910:	2b00      	cmp	r3, #0
 8007912:	d002      	beq.n	800791a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8007914:	697b      	ldr	r3, [r7, #20]
 8007916:	2210      	movs	r2, #16
 8007918:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800791a:	693b      	ldr	r3, [r7, #16]
 800791c:	2b00      	cmp	r3, #0
 800791e:	d006      	beq.n	800792e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007920:	693b      	ldr	r3, [r7, #16]
 8007922:	2200      	movs	r2, #0
 8007924:	711a      	strb	r2, [r3, #4]
 8007926:	2200      	movs	r2, #0
 8007928:	f042 0202 	orr.w	r2, r2, #2
 800792c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	2b00      	cmp	r3, #0
 8007932:	d006      	beq.n	8007942 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	2200      	movs	r2, #0
 8007938:	711a      	strb	r2, [r3, #4]
 800793a:	2200      	movs	r2, #0
 800793c:	f042 0202 	orr.w	r2, r2, #2
 8007940:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	2243      	movs	r2, #67	@ 0x43
 8007946:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007948:	4b02      	ldr	r3, [pc, #8]	@ (8007954 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800794a:	4618      	mov	r0, r3
 800794c:	3718      	adds	r7, #24
 800794e:	46bd      	mov	sp, r7
 8007950:	bd80      	pop	{r7, pc}
 8007952:	bf00      	nop
 8007954:	20000050 	.word	0x20000050

08007958 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007958:	b580      	push	{r7, lr}
 800795a:	b086      	sub	sp, #24
 800795c:	af00      	add	r7, sp, #0
 800795e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007960:	2182      	movs	r1, #130	@ 0x82
 8007962:	4818      	ldr	r0, [pc, #96]	@ (80079c4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007964:	f000 fcdf 	bl	8008326 <USBD_GetEpDesc>
 8007968:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800796a:	2101      	movs	r1, #1
 800796c:	4815      	ldr	r0, [pc, #84]	@ (80079c4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800796e:	f000 fcda 	bl	8008326 <USBD_GetEpDesc>
 8007972:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007974:	2181      	movs	r1, #129	@ 0x81
 8007976:	4813      	ldr	r0, [pc, #76]	@ (80079c4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007978:	f000 fcd5 	bl	8008326 <USBD_GetEpDesc>
 800797c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800797e:	697b      	ldr	r3, [r7, #20]
 8007980:	2b00      	cmp	r3, #0
 8007982:	d002      	beq.n	800798a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007984:	697b      	ldr	r3, [r7, #20]
 8007986:	2210      	movs	r2, #16
 8007988:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800798a:	693b      	ldr	r3, [r7, #16]
 800798c:	2b00      	cmp	r3, #0
 800798e:	d006      	beq.n	800799e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007990:	693b      	ldr	r3, [r7, #16]
 8007992:	2200      	movs	r2, #0
 8007994:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007998:	711a      	strb	r2, [r3, #4]
 800799a:	2200      	movs	r2, #0
 800799c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d006      	beq.n	80079b2 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	2200      	movs	r2, #0
 80079a8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80079ac:	711a      	strb	r2, [r3, #4]
 80079ae:	2200      	movs	r2, #0
 80079b0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	2243      	movs	r2, #67	@ 0x43
 80079b6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80079b8:	4b02      	ldr	r3, [pc, #8]	@ (80079c4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80079ba:	4618      	mov	r0, r3
 80079bc:	3718      	adds	r7, #24
 80079be:	46bd      	mov	sp, r7
 80079c0:	bd80      	pop	{r7, pc}
 80079c2:	bf00      	nop
 80079c4:	20000050 	.word	0x20000050

080079c8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80079c8:	b480      	push	{r7}
 80079ca:	b083      	sub	sp, #12
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	220a      	movs	r2, #10
 80079d4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80079d6:	4b03      	ldr	r3, [pc, #12]	@ (80079e4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80079d8:	4618      	mov	r0, r3
 80079da:	370c      	adds	r7, #12
 80079dc:	46bd      	mov	sp, r7
 80079de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e2:	4770      	bx	lr
 80079e4:	2000000c 	.word	0x2000000c

080079e8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80079e8:	b480      	push	{r7}
 80079ea:	b083      	sub	sp, #12
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
 80079f0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80079f2:	683b      	ldr	r3, [r7, #0]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d101      	bne.n	80079fc <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80079f8:	2303      	movs	r3, #3
 80079fa:	e009      	b.n	8007a10 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007a02:	687a      	ldr	r2, [r7, #4]
 8007a04:	33b0      	adds	r3, #176	@ 0xb0
 8007a06:	009b      	lsls	r3, r3, #2
 8007a08:	4413      	add	r3, r2
 8007a0a:	683a      	ldr	r2, [r7, #0]
 8007a0c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8007a0e:	2300      	movs	r3, #0
}
 8007a10:	4618      	mov	r0, r3
 8007a12:	370c      	adds	r7, #12
 8007a14:	46bd      	mov	sp, r7
 8007a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1a:	4770      	bx	lr

08007a1c <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007a1c:	b480      	push	{r7}
 8007a1e:	b087      	sub	sp, #28
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	60f8      	str	r0, [r7, #12]
 8007a24:	60b9      	str	r1, [r7, #8]
 8007a26:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	32b0      	adds	r2, #176	@ 0xb0
 8007a32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a36:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8007a38:	697b      	ldr	r3, [r7, #20]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d101      	bne.n	8007a42 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8007a3e:	2303      	movs	r3, #3
 8007a40:	e008      	b.n	8007a54 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8007a42:	697b      	ldr	r3, [r7, #20]
 8007a44:	68ba      	ldr	r2, [r7, #8]
 8007a46:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8007a4a:	697b      	ldr	r3, [r7, #20]
 8007a4c:	687a      	ldr	r2, [r7, #4]
 8007a4e:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8007a52:	2300      	movs	r3, #0
}
 8007a54:	4618      	mov	r0, r3
 8007a56:	371c      	adds	r7, #28
 8007a58:	46bd      	mov	sp, r7
 8007a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5e:	4770      	bx	lr

08007a60 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007a60:	b480      	push	{r7}
 8007a62:	b085      	sub	sp, #20
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	6078      	str	r0, [r7, #4]
 8007a68:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	32b0      	adds	r2, #176	@ 0xb0
 8007a74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a78:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d101      	bne.n	8007a84 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8007a80:	2303      	movs	r3, #3
 8007a82:	e004      	b.n	8007a8e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	683a      	ldr	r2, [r7, #0]
 8007a88:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8007a8c:	2300      	movs	r3, #0
}
 8007a8e:	4618      	mov	r0, r3
 8007a90:	3714      	adds	r7, #20
 8007a92:	46bd      	mov	sp, r7
 8007a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a98:	4770      	bx	lr
	...

08007a9c <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007a9c:	b580      	push	{r7, lr}
 8007a9e:	b084      	sub	sp, #16
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	32b0      	adds	r2, #176	@ 0xb0
 8007aae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ab2:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8007ab4:	2301      	movs	r3, #1
 8007ab6:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8007ab8:	68bb      	ldr	r3, [r7, #8]
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d101      	bne.n	8007ac2 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8007abe:	2303      	movs	r3, #3
 8007ac0:	e025      	b.n	8007b0e <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8007ac2:	68bb      	ldr	r3, [r7, #8]
 8007ac4:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d11f      	bne.n	8007b0c <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8007acc:	68bb      	ldr	r3, [r7, #8]
 8007ace:	2201      	movs	r2, #1
 8007ad0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8007ad4:	4b10      	ldr	r3, [pc, #64]	@ (8007b18 <USBD_CDC_TransmitPacket+0x7c>)
 8007ad6:	781b      	ldrb	r3, [r3, #0]
 8007ad8:	f003 020f 	and.w	r2, r3, #15
 8007adc:	68bb      	ldr	r3, [r7, #8]
 8007ade:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8007ae2:	6878      	ldr	r0, [r7, #4]
 8007ae4:	4613      	mov	r3, r2
 8007ae6:	009b      	lsls	r3, r3, #2
 8007ae8:	4413      	add	r3, r2
 8007aea:	009b      	lsls	r3, r3, #2
 8007aec:	4403      	add	r3, r0
 8007aee:	3318      	adds	r3, #24
 8007af0:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8007af2:	4b09      	ldr	r3, [pc, #36]	@ (8007b18 <USBD_CDC_TransmitPacket+0x7c>)
 8007af4:	7819      	ldrb	r1, [r3, #0]
 8007af6:	68bb      	ldr	r3, [r7, #8]
 8007af8:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8007afc:	68bb      	ldr	r3, [r7, #8]
 8007afe:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8007b02:	6878      	ldr	r0, [r7, #4]
 8007b04:	f001 ffe7 	bl	8009ad6 <USBD_LL_Transmit>

    ret = USBD_OK;
 8007b08:	2300      	movs	r3, #0
 8007b0a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8007b0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b0e:	4618      	mov	r0, r3
 8007b10:	3710      	adds	r7, #16
 8007b12:	46bd      	mov	sp, r7
 8007b14:	bd80      	pop	{r7, pc}
 8007b16:	bf00      	nop
 8007b18:	20000093 	.word	0x20000093

08007b1c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007b1c:	b580      	push	{r7, lr}
 8007b1e:	b084      	sub	sp, #16
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	32b0      	adds	r2, #176	@ 0xb0
 8007b2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b32:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	32b0      	adds	r2, #176	@ 0xb0
 8007b3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d101      	bne.n	8007b4a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8007b46:	2303      	movs	r3, #3
 8007b48:	e018      	b.n	8007b7c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	7c1b      	ldrb	r3, [r3, #16]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d10a      	bne.n	8007b68 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007b52:	4b0c      	ldr	r3, [pc, #48]	@ (8007b84 <USBD_CDC_ReceivePacket+0x68>)
 8007b54:	7819      	ldrb	r1, [r3, #0]
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007b5c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007b60:	6878      	ldr	r0, [r7, #4]
 8007b62:	f001 ffd9 	bl	8009b18 <USBD_LL_PrepareReceive>
 8007b66:	e008      	b.n	8007b7a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007b68:	4b06      	ldr	r3, [pc, #24]	@ (8007b84 <USBD_CDC_ReceivePacket+0x68>)
 8007b6a:	7819      	ldrb	r1, [r3, #0]
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007b72:	2340      	movs	r3, #64	@ 0x40
 8007b74:	6878      	ldr	r0, [r7, #4]
 8007b76:	f001 ffcf 	bl	8009b18 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007b7a:	2300      	movs	r3, #0
}
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	3710      	adds	r7, #16
 8007b80:	46bd      	mov	sp, r7
 8007b82:	bd80      	pop	{r7, pc}
 8007b84:	20000094 	.word	0x20000094

08007b88 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007b88:	b580      	push	{r7, lr}
 8007b8a:	b086      	sub	sp, #24
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	60f8      	str	r0, [r7, #12]
 8007b90:	60b9      	str	r1, [r7, #8]
 8007b92:	4613      	mov	r3, r2
 8007b94:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d101      	bne.n	8007ba0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007b9c:	2303      	movs	r3, #3
 8007b9e:	e01f      	b.n	8007be0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	2200      	movs	r2, #0
 8007ba4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	2200      	movs	r2, #0
 8007bac:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007bb8:	68bb      	ldr	r3, [r7, #8]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d003      	beq.n	8007bc6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	68ba      	ldr	r2, [r7, #8]
 8007bc2:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	2201      	movs	r2, #1
 8007bca:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	79fa      	ldrb	r2, [r7, #7]
 8007bd2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007bd4:	68f8      	ldr	r0, [r7, #12]
 8007bd6:	f001 fe49 	bl	800986c <USBD_LL_Init>
 8007bda:	4603      	mov	r3, r0
 8007bdc:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007bde:	7dfb      	ldrb	r3, [r7, #23]
}
 8007be0:	4618      	mov	r0, r3
 8007be2:	3718      	adds	r7, #24
 8007be4:	46bd      	mov	sp, r7
 8007be6:	bd80      	pop	{r7, pc}

08007be8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007be8:	b580      	push	{r7, lr}
 8007bea:	b084      	sub	sp, #16
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6078      	str	r0, [r7, #4]
 8007bf0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007bf2:	2300      	movs	r3, #0
 8007bf4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007bf6:	683b      	ldr	r3, [r7, #0]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d101      	bne.n	8007c00 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007bfc:	2303      	movs	r3, #3
 8007bfe:	e025      	b.n	8007c4c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	683a      	ldr	r2, [r7, #0]
 8007c04:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	32ae      	adds	r2, #174	@ 0xae
 8007c12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d00f      	beq.n	8007c3c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	32ae      	adds	r2, #174	@ 0xae
 8007c26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c2c:	f107 020e 	add.w	r2, r7, #14
 8007c30:	4610      	mov	r0, r2
 8007c32:	4798      	blx	r3
 8007c34:	4602      	mov	r2, r0
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8007c42:	1c5a      	adds	r2, r3, #1
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8007c4a:	2300      	movs	r3, #0
}
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	3710      	adds	r7, #16
 8007c50:	46bd      	mov	sp, r7
 8007c52:	bd80      	pop	{r7, pc}

08007c54 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007c54:	b580      	push	{r7, lr}
 8007c56:	b082      	sub	sp, #8
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007c5c:	6878      	ldr	r0, [r7, #4]
 8007c5e:	f001 fe51 	bl	8009904 <USBD_LL_Start>
 8007c62:	4603      	mov	r3, r0
}
 8007c64:	4618      	mov	r0, r3
 8007c66:	3708      	adds	r7, #8
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	bd80      	pop	{r7, pc}

08007c6c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007c6c:	b480      	push	{r7}
 8007c6e:	b083      	sub	sp, #12
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007c74:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8007c76:	4618      	mov	r0, r3
 8007c78:	370c      	adds	r7, #12
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c80:	4770      	bx	lr

08007c82 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007c82:	b580      	push	{r7, lr}
 8007c84:	b084      	sub	sp, #16
 8007c86:	af00      	add	r7, sp, #0
 8007c88:	6078      	str	r0, [r7, #4]
 8007c8a:	460b      	mov	r3, r1
 8007c8c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007c8e:	2300      	movs	r3, #0
 8007c90:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d009      	beq.n	8007cb0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	78fa      	ldrb	r2, [r7, #3]
 8007ca6:	4611      	mov	r1, r2
 8007ca8:	6878      	ldr	r0, [r7, #4]
 8007caa:	4798      	blx	r3
 8007cac:	4603      	mov	r3, r0
 8007cae:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007cb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	3710      	adds	r7, #16
 8007cb6:	46bd      	mov	sp, r7
 8007cb8:	bd80      	pop	{r7, pc}

08007cba <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007cba:	b580      	push	{r7, lr}
 8007cbc:	b084      	sub	sp, #16
 8007cbe:	af00      	add	r7, sp, #0
 8007cc0:	6078      	str	r0, [r7, #4]
 8007cc2:	460b      	mov	r3, r1
 8007cc4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007cc6:	2300      	movs	r3, #0
 8007cc8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007cd0:	685b      	ldr	r3, [r3, #4]
 8007cd2:	78fa      	ldrb	r2, [r7, #3]
 8007cd4:	4611      	mov	r1, r2
 8007cd6:	6878      	ldr	r0, [r7, #4]
 8007cd8:	4798      	blx	r3
 8007cda:	4603      	mov	r3, r0
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d001      	beq.n	8007ce4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8007ce0:	2303      	movs	r3, #3
 8007ce2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007ce4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	3710      	adds	r7, #16
 8007cea:	46bd      	mov	sp, r7
 8007cec:	bd80      	pop	{r7, pc}

08007cee <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007cee:	b580      	push	{r7, lr}
 8007cf0:	b084      	sub	sp, #16
 8007cf2:	af00      	add	r7, sp, #0
 8007cf4:	6078      	str	r0, [r7, #4]
 8007cf6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007cfe:	6839      	ldr	r1, [r7, #0]
 8007d00:	4618      	mov	r0, r3
 8007d02:	f001 f90c 	bl	8008f1e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	2201      	movs	r2, #1
 8007d0a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8007d14:	461a      	mov	r2, r3
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007d22:	f003 031f 	and.w	r3, r3, #31
 8007d26:	2b02      	cmp	r3, #2
 8007d28:	d01a      	beq.n	8007d60 <USBD_LL_SetupStage+0x72>
 8007d2a:	2b02      	cmp	r3, #2
 8007d2c:	d822      	bhi.n	8007d74 <USBD_LL_SetupStage+0x86>
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d002      	beq.n	8007d38 <USBD_LL_SetupStage+0x4a>
 8007d32:	2b01      	cmp	r3, #1
 8007d34:	d00a      	beq.n	8007d4c <USBD_LL_SetupStage+0x5e>
 8007d36:	e01d      	b.n	8007d74 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007d3e:	4619      	mov	r1, r3
 8007d40:	6878      	ldr	r0, [r7, #4]
 8007d42:	f000 fb63 	bl	800840c <USBD_StdDevReq>
 8007d46:	4603      	mov	r3, r0
 8007d48:	73fb      	strb	r3, [r7, #15]
      break;
 8007d4a:	e020      	b.n	8007d8e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007d52:	4619      	mov	r1, r3
 8007d54:	6878      	ldr	r0, [r7, #4]
 8007d56:	f000 fbcb 	bl	80084f0 <USBD_StdItfReq>
 8007d5a:	4603      	mov	r3, r0
 8007d5c:	73fb      	strb	r3, [r7, #15]
      break;
 8007d5e:	e016      	b.n	8007d8e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007d66:	4619      	mov	r1, r3
 8007d68:	6878      	ldr	r0, [r7, #4]
 8007d6a:	f000 fc2d 	bl	80085c8 <USBD_StdEPReq>
 8007d6e:	4603      	mov	r3, r0
 8007d70:	73fb      	strb	r3, [r7, #15]
      break;
 8007d72:	e00c      	b.n	8007d8e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007d7a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8007d7e:	b2db      	uxtb	r3, r3
 8007d80:	4619      	mov	r1, r3
 8007d82:	6878      	ldr	r0, [r7, #4]
 8007d84:	f001 fe1e 	bl	80099c4 <USBD_LL_StallEP>
 8007d88:	4603      	mov	r3, r0
 8007d8a:	73fb      	strb	r3, [r7, #15]
      break;
 8007d8c:	bf00      	nop
  }

  return ret;
 8007d8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d90:	4618      	mov	r0, r3
 8007d92:	3710      	adds	r7, #16
 8007d94:	46bd      	mov	sp, r7
 8007d96:	bd80      	pop	{r7, pc}

08007d98 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007d98:	b580      	push	{r7, lr}
 8007d9a:	b086      	sub	sp, #24
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	60f8      	str	r0, [r7, #12]
 8007da0:	460b      	mov	r3, r1
 8007da2:	607a      	str	r2, [r7, #4]
 8007da4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8007da6:	2300      	movs	r3, #0
 8007da8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8007daa:	7afb      	ldrb	r3, [r7, #11]
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d16e      	bne.n	8007e8e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8007db6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007dbe:	2b03      	cmp	r3, #3
 8007dc0:	f040 8098 	bne.w	8007ef4 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8007dc4:	693b      	ldr	r3, [r7, #16]
 8007dc6:	689a      	ldr	r2, [r3, #8]
 8007dc8:	693b      	ldr	r3, [r7, #16]
 8007dca:	68db      	ldr	r3, [r3, #12]
 8007dcc:	429a      	cmp	r2, r3
 8007dce:	d913      	bls.n	8007df8 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8007dd0:	693b      	ldr	r3, [r7, #16]
 8007dd2:	689a      	ldr	r2, [r3, #8]
 8007dd4:	693b      	ldr	r3, [r7, #16]
 8007dd6:	68db      	ldr	r3, [r3, #12]
 8007dd8:	1ad2      	subs	r2, r2, r3
 8007dda:	693b      	ldr	r3, [r7, #16]
 8007ddc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007dde:	693b      	ldr	r3, [r7, #16]
 8007de0:	68da      	ldr	r2, [r3, #12]
 8007de2:	693b      	ldr	r3, [r7, #16]
 8007de4:	689b      	ldr	r3, [r3, #8]
 8007de6:	4293      	cmp	r3, r2
 8007de8:	bf28      	it	cs
 8007dea:	4613      	movcs	r3, r2
 8007dec:	461a      	mov	r2, r3
 8007dee:	6879      	ldr	r1, [r7, #4]
 8007df0:	68f8      	ldr	r0, [r7, #12]
 8007df2:	f001 f988 	bl	8009106 <USBD_CtlContinueRx>
 8007df6:	e07d      	b.n	8007ef4 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007dfe:	f003 031f 	and.w	r3, r3, #31
 8007e02:	2b02      	cmp	r3, #2
 8007e04:	d014      	beq.n	8007e30 <USBD_LL_DataOutStage+0x98>
 8007e06:	2b02      	cmp	r3, #2
 8007e08:	d81d      	bhi.n	8007e46 <USBD_LL_DataOutStage+0xae>
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d002      	beq.n	8007e14 <USBD_LL_DataOutStage+0x7c>
 8007e0e:	2b01      	cmp	r3, #1
 8007e10:	d003      	beq.n	8007e1a <USBD_LL_DataOutStage+0x82>
 8007e12:	e018      	b.n	8007e46 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8007e14:	2300      	movs	r3, #0
 8007e16:	75bb      	strb	r3, [r7, #22]
            break;
 8007e18:	e018      	b.n	8007e4c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8007e20:	b2db      	uxtb	r3, r3
 8007e22:	4619      	mov	r1, r3
 8007e24:	68f8      	ldr	r0, [r7, #12]
 8007e26:	f000 fa64 	bl	80082f2 <USBD_CoreFindIF>
 8007e2a:	4603      	mov	r3, r0
 8007e2c:	75bb      	strb	r3, [r7, #22]
            break;
 8007e2e:	e00d      	b.n	8007e4c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8007e36:	b2db      	uxtb	r3, r3
 8007e38:	4619      	mov	r1, r3
 8007e3a:	68f8      	ldr	r0, [r7, #12]
 8007e3c:	f000 fa66 	bl	800830c <USBD_CoreFindEP>
 8007e40:	4603      	mov	r3, r0
 8007e42:	75bb      	strb	r3, [r7, #22]
            break;
 8007e44:	e002      	b.n	8007e4c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8007e46:	2300      	movs	r3, #0
 8007e48:	75bb      	strb	r3, [r7, #22]
            break;
 8007e4a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007e4c:	7dbb      	ldrb	r3, [r7, #22]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d119      	bne.n	8007e86 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007e58:	b2db      	uxtb	r3, r3
 8007e5a:	2b03      	cmp	r3, #3
 8007e5c:	d113      	bne.n	8007e86 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8007e5e:	7dba      	ldrb	r2, [r7, #22]
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	32ae      	adds	r2, #174	@ 0xae
 8007e64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e68:	691b      	ldr	r3, [r3, #16]
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d00b      	beq.n	8007e86 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8007e6e:	7dba      	ldrb	r2, [r7, #22]
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8007e76:	7dba      	ldrb	r2, [r7, #22]
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	32ae      	adds	r2, #174	@ 0xae
 8007e7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e80:	691b      	ldr	r3, [r3, #16]
 8007e82:	68f8      	ldr	r0, [r7, #12]
 8007e84:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007e86:	68f8      	ldr	r0, [r7, #12]
 8007e88:	f001 f94e 	bl	8009128 <USBD_CtlSendStatus>
 8007e8c:	e032      	b.n	8007ef4 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8007e8e:	7afb      	ldrb	r3, [r7, #11]
 8007e90:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007e94:	b2db      	uxtb	r3, r3
 8007e96:	4619      	mov	r1, r3
 8007e98:	68f8      	ldr	r0, [r7, #12]
 8007e9a:	f000 fa37 	bl	800830c <USBD_CoreFindEP>
 8007e9e:	4603      	mov	r3, r0
 8007ea0:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007ea2:	7dbb      	ldrb	r3, [r7, #22]
 8007ea4:	2bff      	cmp	r3, #255	@ 0xff
 8007ea6:	d025      	beq.n	8007ef4 <USBD_LL_DataOutStage+0x15c>
 8007ea8:	7dbb      	ldrb	r3, [r7, #22]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d122      	bne.n	8007ef4 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007eb4:	b2db      	uxtb	r3, r3
 8007eb6:	2b03      	cmp	r3, #3
 8007eb8:	d117      	bne.n	8007eea <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8007eba:	7dba      	ldrb	r2, [r7, #22]
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	32ae      	adds	r2, #174	@ 0xae
 8007ec0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ec4:	699b      	ldr	r3, [r3, #24]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d00f      	beq.n	8007eea <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8007eca:	7dba      	ldrb	r2, [r7, #22]
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8007ed2:	7dba      	ldrb	r2, [r7, #22]
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	32ae      	adds	r2, #174	@ 0xae
 8007ed8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007edc:	699b      	ldr	r3, [r3, #24]
 8007ede:	7afa      	ldrb	r2, [r7, #11]
 8007ee0:	4611      	mov	r1, r2
 8007ee2:	68f8      	ldr	r0, [r7, #12]
 8007ee4:	4798      	blx	r3
 8007ee6:	4603      	mov	r3, r0
 8007ee8:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8007eea:	7dfb      	ldrb	r3, [r7, #23]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d001      	beq.n	8007ef4 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8007ef0:	7dfb      	ldrb	r3, [r7, #23]
 8007ef2:	e000      	b.n	8007ef6 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8007ef4:	2300      	movs	r3, #0
}
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	3718      	adds	r7, #24
 8007efa:	46bd      	mov	sp, r7
 8007efc:	bd80      	pop	{r7, pc}

08007efe <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007efe:	b580      	push	{r7, lr}
 8007f00:	b086      	sub	sp, #24
 8007f02:	af00      	add	r7, sp, #0
 8007f04:	60f8      	str	r0, [r7, #12]
 8007f06:	460b      	mov	r3, r1
 8007f08:	607a      	str	r2, [r7, #4]
 8007f0a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8007f0c:	7afb      	ldrb	r3, [r7, #11]
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d16f      	bne.n	8007ff2 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	3314      	adds	r3, #20
 8007f16:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007f1e:	2b02      	cmp	r3, #2
 8007f20:	d15a      	bne.n	8007fd8 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8007f22:	693b      	ldr	r3, [r7, #16]
 8007f24:	689a      	ldr	r2, [r3, #8]
 8007f26:	693b      	ldr	r3, [r7, #16]
 8007f28:	68db      	ldr	r3, [r3, #12]
 8007f2a:	429a      	cmp	r2, r3
 8007f2c:	d914      	bls.n	8007f58 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007f2e:	693b      	ldr	r3, [r7, #16]
 8007f30:	689a      	ldr	r2, [r3, #8]
 8007f32:	693b      	ldr	r3, [r7, #16]
 8007f34:	68db      	ldr	r3, [r3, #12]
 8007f36:	1ad2      	subs	r2, r2, r3
 8007f38:	693b      	ldr	r3, [r7, #16]
 8007f3a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007f3c:	693b      	ldr	r3, [r7, #16]
 8007f3e:	689b      	ldr	r3, [r3, #8]
 8007f40:	461a      	mov	r2, r3
 8007f42:	6879      	ldr	r1, [r7, #4]
 8007f44:	68f8      	ldr	r0, [r7, #12]
 8007f46:	f001 f8b0 	bl	80090aa <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	2200      	movs	r2, #0
 8007f4e:	2100      	movs	r1, #0
 8007f50:	68f8      	ldr	r0, [r7, #12]
 8007f52:	f001 fde1 	bl	8009b18 <USBD_LL_PrepareReceive>
 8007f56:	e03f      	b.n	8007fd8 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007f58:	693b      	ldr	r3, [r7, #16]
 8007f5a:	68da      	ldr	r2, [r3, #12]
 8007f5c:	693b      	ldr	r3, [r7, #16]
 8007f5e:	689b      	ldr	r3, [r3, #8]
 8007f60:	429a      	cmp	r2, r3
 8007f62:	d11c      	bne.n	8007f9e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007f64:	693b      	ldr	r3, [r7, #16]
 8007f66:	685a      	ldr	r2, [r3, #4]
 8007f68:	693b      	ldr	r3, [r7, #16]
 8007f6a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007f6c:	429a      	cmp	r2, r3
 8007f6e:	d316      	bcc.n	8007f9e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007f70:	693b      	ldr	r3, [r7, #16]
 8007f72:	685a      	ldr	r2, [r3, #4]
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007f7a:	429a      	cmp	r2, r3
 8007f7c:	d20f      	bcs.n	8007f9e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007f7e:	2200      	movs	r2, #0
 8007f80:	2100      	movs	r1, #0
 8007f82:	68f8      	ldr	r0, [r7, #12]
 8007f84:	f001 f891 	bl	80090aa <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	2200      	movs	r2, #0
 8007f8c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007f90:	2300      	movs	r3, #0
 8007f92:	2200      	movs	r2, #0
 8007f94:	2100      	movs	r1, #0
 8007f96:	68f8      	ldr	r0, [r7, #12]
 8007f98:	f001 fdbe 	bl	8009b18 <USBD_LL_PrepareReceive>
 8007f9c:	e01c      	b.n	8007fd8 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007fa4:	b2db      	uxtb	r3, r3
 8007fa6:	2b03      	cmp	r3, #3
 8007fa8:	d10f      	bne.n	8007fca <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007fb0:	68db      	ldr	r3, [r3, #12]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d009      	beq.n	8007fca <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	2200      	movs	r2, #0
 8007fba:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007fc4:	68db      	ldr	r3, [r3, #12]
 8007fc6:	68f8      	ldr	r0, [r7, #12]
 8007fc8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007fca:	2180      	movs	r1, #128	@ 0x80
 8007fcc:	68f8      	ldr	r0, [r7, #12]
 8007fce:	f001 fcf9 	bl	80099c4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007fd2:	68f8      	ldr	r0, [r7, #12]
 8007fd4:	f001 f8bb 	bl	800914e <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d03a      	beq.n	8008058 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8007fe2:	68f8      	ldr	r0, [r7, #12]
 8007fe4:	f7ff fe42 	bl	8007c6c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	2200      	movs	r2, #0
 8007fec:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8007ff0:	e032      	b.n	8008058 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8007ff2:	7afb      	ldrb	r3, [r7, #11]
 8007ff4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007ff8:	b2db      	uxtb	r3, r3
 8007ffa:	4619      	mov	r1, r3
 8007ffc:	68f8      	ldr	r0, [r7, #12]
 8007ffe:	f000 f985 	bl	800830c <USBD_CoreFindEP>
 8008002:	4603      	mov	r3, r0
 8008004:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008006:	7dfb      	ldrb	r3, [r7, #23]
 8008008:	2bff      	cmp	r3, #255	@ 0xff
 800800a:	d025      	beq.n	8008058 <USBD_LL_DataInStage+0x15a>
 800800c:	7dfb      	ldrb	r3, [r7, #23]
 800800e:	2b00      	cmp	r3, #0
 8008010:	d122      	bne.n	8008058 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008018:	b2db      	uxtb	r3, r3
 800801a:	2b03      	cmp	r3, #3
 800801c:	d11c      	bne.n	8008058 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800801e:	7dfa      	ldrb	r2, [r7, #23]
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	32ae      	adds	r2, #174	@ 0xae
 8008024:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008028:	695b      	ldr	r3, [r3, #20]
 800802a:	2b00      	cmp	r3, #0
 800802c:	d014      	beq.n	8008058 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800802e:	7dfa      	ldrb	r2, [r7, #23]
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8008036:	7dfa      	ldrb	r2, [r7, #23]
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	32ae      	adds	r2, #174	@ 0xae
 800803c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008040:	695b      	ldr	r3, [r3, #20]
 8008042:	7afa      	ldrb	r2, [r7, #11]
 8008044:	4611      	mov	r1, r2
 8008046:	68f8      	ldr	r0, [r7, #12]
 8008048:	4798      	blx	r3
 800804a:	4603      	mov	r3, r0
 800804c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800804e:	7dbb      	ldrb	r3, [r7, #22]
 8008050:	2b00      	cmp	r3, #0
 8008052:	d001      	beq.n	8008058 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8008054:	7dbb      	ldrb	r3, [r7, #22]
 8008056:	e000      	b.n	800805a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8008058:	2300      	movs	r3, #0
}
 800805a:	4618      	mov	r0, r3
 800805c:	3718      	adds	r7, #24
 800805e:	46bd      	mov	sp, r7
 8008060:	bd80      	pop	{r7, pc}

08008062 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008062:	b580      	push	{r7, lr}
 8008064:	b084      	sub	sp, #16
 8008066:	af00      	add	r7, sp, #0
 8008068:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800806a:	2300      	movs	r3, #0
 800806c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	2201      	movs	r2, #1
 8008072:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	2200      	movs	r2, #0
 800807a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	2200      	movs	r2, #0
 8008082:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	2200      	movs	r2, #0
 8008088:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	2200      	movs	r2, #0
 8008090:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800809a:	2b00      	cmp	r3, #0
 800809c:	d014      	beq.n	80080c8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80080a4:	685b      	ldr	r3, [r3, #4]
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d00e      	beq.n	80080c8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80080b0:	685b      	ldr	r3, [r3, #4]
 80080b2:	687a      	ldr	r2, [r7, #4]
 80080b4:	6852      	ldr	r2, [r2, #4]
 80080b6:	b2d2      	uxtb	r2, r2
 80080b8:	4611      	mov	r1, r2
 80080ba:	6878      	ldr	r0, [r7, #4]
 80080bc:	4798      	blx	r3
 80080be:	4603      	mov	r3, r0
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d001      	beq.n	80080c8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80080c4:	2303      	movs	r3, #3
 80080c6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80080c8:	2340      	movs	r3, #64	@ 0x40
 80080ca:	2200      	movs	r2, #0
 80080cc:	2100      	movs	r1, #0
 80080ce:	6878      	ldr	r0, [r7, #4]
 80080d0:	f001 fc33 	bl	800993a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	2201      	movs	r2, #1
 80080d8:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	2240      	movs	r2, #64	@ 0x40
 80080e0:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80080e4:	2340      	movs	r3, #64	@ 0x40
 80080e6:	2200      	movs	r2, #0
 80080e8:	2180      	movs	r1, #128	@ 0x80
 80080ea:	6878      	ldr	r0, [r7, #4]
 80080ec:	f001 fc25 	bl	800993a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	2201      	movs	r2, #1
 80080f4:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	2240      	movs	r2, #64	@ 0x40
 80080fa:	621a      	str	r2, [r3, #32]

  return ret;
 80080fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80080fe:	4618      	mov	r0, r3
 8008100:	3710      	adds	r7, #16
 8008102:	46bd      	mov	sp, r7
 8008104:	bd80      	pop	{r7, pc}

08008106 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008106:	b480      	push	{r7}
 8008108:	b083      	sub	sp, #12
 800810a:	af00      	add	r7, sp, #0
 800810c:	6078      	str	r0, [r7, #4]
 800810e:	460b      	mov	r3, r1
 8008110:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	78fa      	ldrb	r2, [r7, #3]
 8008116:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008118:	2300      	movs	r3, #0
}
 800811a:	4618      	mov	r0, r3
 800811c:	370c      	adds	r7, #12
 800811e:	46bd      	mov	sp, r7
 8008120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008124:	4770      	bx	lr

08008126 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008126:	b480      	push	{r7}
 8008128:	b083      	sub	sp, #12
 800812a:	af00      	add	r7, sp, #0
 800812c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008134:	b2db      	uxtb	r3, r3
 8008136:	2b04      	cmp	r3, #4
 8008138:	d006      	beq.n	8008148 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008140:	b2da      	uxtb	r2, r3
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	2204      	movs	r2, #4
 800814c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8008150:	2300      	movs	r3, #0
}
 8008152:	4618      	mov	r0, r3
 8008154:	370c      	adds	r7, #12
 8008156:	46bd      	mov	sp, r7
 8008158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815c:	4770      	bx	lr

0800815e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800815e:	b480      	push	{r7}
 8008160:	b083      	sub	sp, #12
 8008162:	af00      	add	r7, sp, #0
 8008164:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800816c:	b2db      	uxtb	r3, r3
 800816e:	2b04      	cmp	r3, #4
 8008170:	d106      	bne.n	8008180 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8008178:	b2da      	uxtb	r2, r3
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8008180:	2300      	movs	r3, #0
}
 8008182:	4618      	mov	r0, r3
 8008184:	370c      	adds	r7, #12
 8008186:	46bd      	mov	sp, r7
 8008188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800818c:	4770      	bx	lr

0800818e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800818e:	b580      	push	{r7, lr}
 8008190:	b082      	sub	sp, #8
 8008192:	af00      	add	r7, sp, #0
 8008194:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800819c:	b2db      	uxtb	r3, r3
 800819e:	2b03      	cmp	r3, #3
 80081a0:	d110      	bne.n	80081c4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d00b      	beq.n	80081c4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80081b2:	69db      	ldr	r3, [r3, #28]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d005      	beq.n	80081c4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80081be:	69db      	ldr	r3, [r3, #28]
 80081c0:	6878      	ldr	r0, [r7, #4]
 80081c2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80081c4:	2300      	movs	r3, #0
}
 80081c6:	4618      	mov	r0, r3
 80081c8:	3708      	adds	r7, #8
 80081ca:	46bd      	mov	sp, r7
 80081cc:	bd80      	pop	{r7, pc}

080081ce <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80081ce:	b580      	push	{r7, lr}
 80081d0:	b082      	sub	sp, #8
 80081d2:	af00      	add	r7, sp, #0
 80081d4:	6078      	str	r0, [r7, #4]
 80081d6:	460b      	mov	r3, r1
 80081d8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	32ae      	adds	r2, #174	@ 0xae
 80081e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d101      	bne.n	80081f0 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80081ec:	2303      	movs	r3, #3
 80081ee:	e01c      	b.n	800822a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80081f6:	b2db      	uxtb	r3, r3
 80081f8:	2b03      	cmp	r3, #3
 80081fa:	d115      	bne.n	8008228 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	32ae      	adds	r2, #174	@ 0xae
 8008206:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800820a:	6a1b      	ldr	r3, [r3, #32]
 800820c:	2b00      	cmp	r3, #0
 800820e:	d00b      	beq.n	8008228 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	32ae      	adds	r2, #174	@ 0xae
 800821a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800821e:	6a1b      	ldr	r3, [r3, #32]
 8008220:	78fa      	ldrb	r2, [r7, #3]
 8008222:	4611      	mov	r1, r2
 8008224:	6878      	ldr	r0, [r7, #4]
 8008226:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008228:	2300      	movs	r3, #0
}
 800822a:	4618      	mov	r0, r3
 800822c:	3708      	adds	r7, #8
 800822e:	46bd      	mov	sp, r7
 8008230:	bd80      	pop	{r7, pc}

08008232 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008232:	b580      	push	{r7, lr}
 8008234:	b082      	sub	sp, #8
 8008236:	af00      	add	r7, sp, #0
 8008238:	6078      	str	r0, [r7, #4]
 800823a:	460b      	mov	r3, r1
 800823c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	32ae      	adds	r2, #174	@ 0xae
 8008248:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800824c:	2b00      	cmp	r3, #0
 800824e:	d101      	bne.n	8008254 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8008250:	2303      	movs	r3, #3
 8008252:	e01c      	b.n	800828e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800825a:	b2db      	uxtb	r3, r3
 800825c:	2b03      	cmp	r3, #3
 800825e:	d115      	bne.n	800828c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	32ae      	adds	r2, #174	@ 0xae
 800826a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800826e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008270:	2b00      	cmp	r3, #0
 8008272:	d00b      	beq.n	800828c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	32ae      	adds	r2, #174	@ 0xae
 800827e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008282:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008284:	78fa      	ldrb	r2, [r7, #3]
 8008286:	4611      	mov	r1, r2
 8008288:	6878      	ldr	r0, [r7, #4]
 800828a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800828c:	2300      	movs	r3, #0
}
 800828e:	4618      	mov	r0, r3
 8008290:	3708      	adds	r7, #8
 8008292:	46bd      	mov	sp, r7
 8008294:	bd80      	pop	{r7, pc}

08008296 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008296:	b480      	push	{r7}
 8008298:	b083      	sub	sp, #12
 800829a:	af00      	add	r7, sp, #0
 800829c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800829e:	2300      	movs	r3, #0
}
 80082a0:	4618      	mov	r0, r3
 80082a2:	370c      	adds	r7, #12
 80082a4:	46bd      	mov	sp, r7
 80082a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082aa:	4770      	bx	lr

080082ac <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80082ac:	b580      	push	{r7, lr}
 80082ae:	b084      	sub	sp, #16
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80082b4:	2300      	movs	r3, #0
 80082b6:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	2201      	movs	r2, #1
 80082bc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d00e      	beq.n	80082e8 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80082d0:	685b      	ldr	r3, [r3, #4]
 80082d2:	687a      	ldr	r2, [r7, #4]
 80082d4:	6852      	ldr	r2, [r2, #4]
 80082d6:	b2d2      	uxtb	r2, r2
 80082d8:	4611      	mov	r1, r2
 80082da:	6878      	ldr	r0, [r7, #4]
 80082dc:	4798      	blx	r3
 80082de:	4603      	mov	r3, r0
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d001      	beq.n	80082e8 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80082e4:	2303      	movs	r3, #3
 80082e6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80082e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80082ea:	4618      	mov	r0, r3
 80082ec:	3710      	adds	r7, #16
 80082ee:	46bd      	mov	sp, r7
 80082f0:	bd80      	pop	{r7, pc}

080082f2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80082f2:	b480      	push	{r7}
 80082f4:	b083      	sub	sp, #12
 80082f6:	af00      	add	r7, sp, #0
 80082f8:	6078      	str	r0, [r7, #4]
 80082fa:	460b      	mov	r3, r1
 80082fc:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80082fe:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008300:	4618      	mov	r0, r3
 8008302:	370c      	adds	r7, #12
 8008304:	46bd      	mov	sp, r7
 8008306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830a:	4770      	bx	lr

0800830c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800830c:	b480      	push	{r7}
 800830e:	b083      	sub	sp, #12
 8008310:	af00      	add	r7, sp, #0
 8008312:	6078      	str	r0, [r7, #4]
 8008314:	460b      	mov	r3, r1
 8008316:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008318:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800831a:	4618      	mov	r0, r3
 800831c:	370c      	adds	r7, #12
 800831e:	46bd      	mov	sp, r7
 8008320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008324:	4770      	bx	lr

08008326 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8008326:	b580      	push	{r7, lr}
 8008328:	b086      	sub	sp, #24
 800832a:	af00      	add	r7, sp, #0
 800832c:	6078      	str	r0, [r7, #4]
 800832e:	460b      	mov	r3, r1
 8008330:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800833a:	2300      	movs	r3, #0
 800833c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	885b      	ldrh	r3, [r3, #2]
 8008342:	b29b      	uxth	r3, r3
 8008344:	68fa      	ldr	r2, [r7, #12]
 8008346:	7812      	ldrb	r2, [r2, #0]
 8008348:	4293      	cmp	r3, r2
 800834a:	d91f      	bls.n	800838c <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	781b      	ldrb	r3, [r3, #0]
 8008350:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8008352:	e013      	b.n	800837c <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8008354:	f107 030a 	add.w	r3, r7, #10
 8008358:	4619      	mov	r1, r3
 800835a:	6978      	ldr	r0, [r7, #20]
 800835c:	f000 f81b 	bl	8008396 <USBD_GetNextDesc>
 8008360:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008362:	697b      	ldr	r3, [r7, #20]
 8008364:	785b      	ldrb	r3, [r3, #1]
 8008366:	2b05      	cmp	r3, #5
 8008368:	d108      	bne.n	800837c <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800836a:	697b      	ldr	r3, [r7, #20]
 800836c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800836e:	693b      	ldr	r3, [r7, #16]
 8008370:	789b      	ldrb	r3, [r3, #2]
 8008372:	78fa      	ldrb	r2, [r7, #3]
 8008374:	429a      	cmp	r2, r3
 8008376:	d008      	beq.n	800838a <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8008378:	2300      	movs	r3, #0
 800837a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	885b      	ldrh	r3, [r3, #2]
 8008380:	b29a      	uxth	r2, r3
 8008382:	897b      	ldrh	r3, [r7, #10]
 8008384:	429a      	cmp	r2, r3
 8008386:	d8e5      	bhi.n	8008354 <USBD_GetEpDesc+0x2e>
 8008388:	e000      	b.n	800838c <USBD_GetEpDesc+0x66>
          break;
 800838a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800838c:	693b      	ldr	r3, [r7, #16]
}
 800838e:	4618      	mov	r0, r3
 8008390:	3718      	adds	r7, #24
 8008392:	46bd      	mov	sp, r7
 8008394:	bd80      	pop	{r7, pc}

08008396 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8008396:	b480      	push	{r7}
 8008398:	b085      	sub	sp, #20
 800839a:	af00      	add	r7, sp, #0
 800839c:	6078      	str	r0, [r7, #4]
 800839e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80083a4:	683b      	ldr	r3, [r7, #0]
 80083a6:	881b      	ldrh	r3, [r3, #0]
 80083a8:	68fa      	ldr	r2, [r7, #12]
 80083aa:	7812      	ldrb	r2, [r2, #0]
 80083ac:	4413      	add	r3, r2
 80083ae:	b29a      	uxth	r2, r3
 80083b0:	683b      	ldr	r3, [r7, #0]
 80083b2:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	781b      	ldrb	r3, [r3, #0]
 80083b8:	461a      	mov	r2, r3
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	4413      	add	r3, r2
 80083be:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80083c0:	68fb      	ldr	r3, [r7, #12]
}
 80083c2:	4618      	mov	r0, r3
 80083c4:	3714      	adds	r7, #20
 80083c6:	46bd      	mov	sp, r7
 80083c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083cc:	4770      	bx	lr

080083ce <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80083ce:	b480      	push	{r7}
 80083d0:	b087      	sub	sp, #28
 80083d2:	af00      	add	r7, sp, #0
 80083d4:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80083da:	697b      	ldr	r3, [r7, #20]
 80083dc:	781b      	ldrb	r3, [r3, #0]
 80083de:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80083e0:	697b      	ldr	r3, [r7, #20]
 80083e2:	3301      	adds	r3, #1
 80083e4:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80083e6:	697b      	ldr	r3, [r7, #20]
 80083e8:	781b      	ldrb	r3, [r3, #0]
 80083ea:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80083ec:	8a3b      	ldrh	r3, [r7, #16]
 80083ee:	021b      	lsls	r3, r3, #8
 80083f0:	b21a      	sxth	r2, r3
 80083f2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80083f6:	4313      	orrs	r3, r2
 80083f8:	b21b      	sxth	r3, r3
 80083fa:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80083fc:	89fb      	ldrh	r3, [r7, #14]
}
 80083fe:	4618      	mov	r0, r3
 8008400:	371c      	adds	r7, #28
 8008402:	46bd      	mov	sp, r7
 8008404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008408:	4770      	bx	lr
	...

0800840c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800840c:	b580      	push	{r7, lr}
 800840e:	b084      	sub	sp, #16
 8008410:	af00      	add	r7, sp, #0
 8008412:	6078      	str	r0, [r7, #4]
 8008414:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008416:	2300      	movs	r3, #0
 8008418:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800841a:	683b      	ldr	r3, [r7, #0]
 800841c:	781b      	ldrb	r3, [r3, #0]
 800841e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008422:	2b40      	cmp	r3, #64	@ 0x40
 8008424:	d005      	beq.n	8008432 <USBD_StdDevReq+0x26>
 8008426:	2b40      	cmp	r3, #64	@ 0x40
 8008428:	d857      	bhi.n	80084da <USBD_StdDevReq+0xce>
 800842a:	2b00      	cmp	r3, #0
 800842c:	d00f      	beq.n	800844e <USBD_StdDevReq+0x42>
 800842e:	2b20      	cmp	r3, #32
 8008430:	d153      	bne.n	80084da <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	32ae      	adds	r2, #174	@ 0xae
 800843c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008440:	689b      	ldr	r3, [r3, #8]
 8008442:	6839      	ldr	r1, [r7, #0]
 8008444:	6878      	ldr	r0, [r7, #4]
 8008446:	4798      	blx	r3
 8008448:	4603      	mov	r3, r0
 800844a:	73fb      	strb	r3, [r7, #15]
      break;
 800844c:	e04a      	b.n	80084e4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800844e:	683b      	ldr	r3, [r7, #0]
 8008450:	785b      	ldrb	r3, [r3, #1]
 8008452:	2b09      	cmp	r3, #9
 8008454:	d83b      	bhi.n	80084ce <USBD_StdDevReq+0xc2>
 8008456:	a201      	add	r2, pc, #4	@ (adr r2, 800845c <USBD_StdDevReq+0x50>)
 8008458:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800845c:	080084b1 	.word	0x080084b1
 8008460:	080084c5 	.word	0x080084c5
 8008464:	080084cf 	.word	0x080084cf
 8008468:	080084bb 	.word	0x080084bb
 800846c:	080084cf 	.word	0x080084cf
 8008470:	0800848f 	.word	0x0800848f
 8008474:	08008485 	.word	0x08008485
 8008478:	080084cf 	.word	0x080084cf
 800847c:	080084a7 	.word	0x080084a7
 8008480:	08008499 	.word	0x08008499
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008484:	6839      	ldr	r1, [r7, #0]
 8008486:	6878      	ldr	r0, [r7, #4]
 8008488:	f000 fa3c 	bl	8008904 <USBD_GetDescriptor>
          break;
 800848c:	e024      	b.n	80084d8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800848e:	6839      	ldr	r1, [r7, #0]
 8008490:	6878      	ldr	r0, [r7, #4]
 8008492:	f000 fba1 	bl	8008bd8 <USBD_SetAddress>
          break;
 8008496:	e01f      	b.n	80084d8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008498:	6839      	ldr	r1, [r7, #0]
 800849a:	6878      	ldr	r0, [r7, #4]
 800849c:	f000 fbe0 	bl	8008c60 <USBD_SetConfig>
 80084a0:	4603      	mov	r3, r0
 80084a2:	73fb      	strb	r3, [r7, #15]
          break;
 80084a4:	e018      	b.n	80084d8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80084a6:	6839      	ldr	r1, [r7, #0]
 80084a8:	6878      	ldr	r0, [r7, #4]
 80084aa:	f000 fc83 	bl	8008db4 <USBD_GetConfig>
          break;
 80084ae:	e013      	b.n	80084d8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80084b0:	6839      	ldr	r1, [r7, #0]
 80084b2:	6878      	ldr	r0, [r7, #4]
 80084b4:	f000 fcb4 	bl	8008e20 <USBD_GetStatus>
          break;
 80084b8:	e00e      	b.n	80084d8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80084ba:	6839      	ldr	r1, [r7, #0]
 80084bc:	6878      	ldr	r0, [r7, #4]
 80084be:	f000 fce3 	bl	8008e88 <USBD_SetFeature>
          break;
 80084c2:	e009      	b.n	80084d8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80084c4:	6839      	ldr	r1, [r7, #0]
 80084c6:	6878      	ldr	r0, [r7, #4]
 80084c8:	f000 fd07 	bl	8008eda <USBD_ClrFeature>
          break;
 80084cc:	e004      	b.n	80084d8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80084ce:	6839      	ldr	r1, [r7, #0]
 80084d0:	6878      	ldr	r0, [r7, #4]
 80084d2:	f000 fd5e 	bl	8008f92 <USBD_CtlError>
          break;
 80084d6:	bf00      	nop
      }
      break;
 80084d8:	e004      	b.n	80084e4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80084da:	6839      	ldr	r1, [r7, #0]
 80084dc:	6878      	ldr	r0, [r7, #4]
 80084de:	f000 fd58 	bl	8008f92 <USBD_CtlError>
      break;
 80084e2:	bf00      	nop
  }

  return ret;
 80084e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80084e6:	4618      	mov	r0, r3
 80084e8:	3710      	adds	r7, #16
 80084ea:	46bd      	mov	sp, r7
 80084ec:	bd80      	pop	{r7, pc}
 80084ee:	bf00      	nop

080084f0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80084f0:	b580      	push	{r7, lr}
 80084f2:	b084      	sub	sp, #16
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	6078      	str	r0, [r7, #4]
 80084f8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80084fa:	2300      	movs	r3, #0
 80084fc:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80084fe:	683b      	ldr	r3, [r7, #0]
 8008500:	781b      	ldrb	r3, [r3, #0]
 8008502:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008506:	2b40      	cmp	r3, #64	@ 0x40
 8008508:	d005      	beq.n	8008516 <USBD_StdItfReq+0x26>
 800850a:	2b40      	cmp	r3, #64	@ 0x40
 800850c:	d852      	bhi.n	80085b4 <USBD_StdItfReq+0xc4>
 800850e:	2b00      	cmp	r3, #0
 8008510:	d001      	beq.n	8008516 <USBD_StdItfReq+0x26>
 8008512:	2b20      	cmp	r3, #32
 8008514:	d14e      	bne.n	80085b4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800851c:	b2db      	uxtb	r3, r3
 800851e:	3b01      	subs	r3, #1
 8008520:	2b02      	cmp	r3, #2
 8008522:	d840      	bhi.n	80085a6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008524:	683b      	ldr	r3, [r7, #0]
 8008526:	889b      	ldrh	r3, [r3, #4]
 8008528:	b2db      	uxtb	r3, r3
 800852a:	2b01      	cmp	r3, #1
 800852c:	d836      	bhi.n	800859c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800852e:	683b      	ldr	r3, [r7, #0]
 8008530:	889b      	ldrh	r3, [r3, #4]
 8008532:	b2db      	uxtb	r3, r3
 8008534:	4619      	mov	r1, r3
 8008536:	6878      	ldr	r0, [r7, #4]
 8008538:	f7ff fedb 	bl	80082f2 <USBD_CoreFindIF>
 800853c:	4603      	mov	r3, r0
 800853e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008540:	7bbb      	ldrb	r3, [r7, #14]
 8008542:	2bff      	cmp	r3, #255	@ 0xff
 8008544:	d01d      	beq.n	8008582 <USBD_StdItfReq+0x92>
 8008546:	7bbb      	ldrb	r3, [r7, #14]
 8008548:	2b00      	cmp	r3, #0
 800854a:	d11a      	bne.n	8008582 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800854c:	7bba      	ldrb	r2, [r7, #14]
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	32ae      	adds	r2, #174	@ 0xae
 8008552:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008556:	689b      	ldr	r3, [r3, #8]
 8008558:	2b00      	cmp	r3, #0
 800855a:	d00f      	beq.n	800857c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800855c:	7bba      	ldrb	r2, [r7, #14]
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008564:	7bba      	ldrb	r2, [r7, #14]
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	32ae      	adds	r2, #174	@ 0xae
 800856a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800856e:	689b      	ldr	r3, [r3, #8]
 8008570:	6839      	ldr	r1, [r7, #0]
 8008572:	6878      	ldr	r0, [r7, #4]
 8008574:	4798      	blx	r3
 8008576:	4603      	mov	r3, r0
 8008578:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800857a:	e004      	b.n	8008586 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800857c:	2303      	movs	r3, #3
 800857e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008580:	e001      	b.n	8008586 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8008582:	2303      	movs	r3, #3
 8008584:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008586:	683b      	ldr	r3, [r7, #0]
 8008588:	88db      	ldrh	r3, [r3, #6]
 800858a:	2b00      	cmp	r3, #0
 800858c:	d110      	bne.n	80085b0 <USBD_StdItfReq+0xc0>
 800858e:	7bfb      	ldrb	r3, [r7, #15]
 8008590:	2b00      	cmp	r3, #0
 8008592:	d10d      	bne.n	80085b0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008594:	6878      	ldr	r0, [r7, #4]
 8008596:	f000 fdc7 	bl	8009128 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800859a:	e009      	b.n	80085b0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800859c:	6839      	ldr	r1, [r7, #0]
 800859e:	6878      	ldr	r0, [r7, #4]
 80085a0:	f000 fcf7 	bl	8008f92 <USBD_CtlError>
          break;
 80085a4:	e004      	b.n	80085b0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80085a6:	6839      	ldr	r1, [r7, #0]
 80085a8:	6878      	ldr	r0, [r7, #4]
 80085aa:	f000 fcf2 	bl	8008f92 <USBD_CtlError>
          break;
 80085ae:	e000      	b.n	80085b2 <USBD_StdItfReq+0xc2>
          break;
 80085b0:	bf00      	nop
      }
      break;
 80085b2:	e004      	b.n	80085be <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80085b4:	6839      	ldr	r1, [r7, #0]
 80085b6:	6878      	ldr	r0, [r7, #4]
 80085b8:	f000 fceb 	bl	8008f92 <USBD_CtlError>
      break;
 80085bc:	bf00      	nop
  }

  return ret;
 80085be:	7bfb      	ldrb	r3, [r7, #15]
}
 80085c0:	4618      	mov	r0, r3
 80085c2:	3710      	adds	r7, #16
 80085c4:	46bd      	mov	sp, r7
 80085c6:	bd80      	pop	{r7, pc}

080085c8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80085c8:	b580      	push	{r7, lr}
 80085ca:	b084      	sub	sp, #16
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	6078      	str	r0, [r7, #4]
 80085d0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80085d2:	2300      	movs	r3, #0
 80085d4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80085d6:	683b      	ldr	r3, [r7, #0]
 80085d8:	889b      	ldrh	r3, [r3, #4]
 80085da:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80085dc:	683b      	ldr	r3, [r7, #0]
 80085de:	781b      	ldrb	r3, [r3, #0]
 80085e0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80085e4:	2b40      	cmp	r3, #64	@ 0x40
 80085e6:	d007      	beq.n	80085f8 <USBD_StdEPReq+0x30>
 80085e8:	2b40      	cmp	r3, #64	@ 0x40
 80085ea:	f200 817f 	bhi.w	80088ec <USBD_StdEPReq+0x324>
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d02a      	beq.n	8008648 <USBD_StdEPReq+0x80>
 80085f2:	2b20      	cmp	r3, #32
 80085f4:	f040 817a 	bne.w	80088ec <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80085f8:	7bbb      	ldrb	r3, [r7, #14]
 80085fa:	4619      	mov	r1, r3
 80085fc:	6878      	ldr	r0, [r7, #4]
 80085fe:	f7ff fe85 	bl	800830c <USBD_CoreFindEP>
 8008602:	4603      	mov	r3, r0
 8008604:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008606:	7b7b      	ldrb	r3, [r7, #13]
 8008608:	2bff      	cmp	r3, #255	@ 0xff
 800860a:	f000 8174 	beq.w	80088f6 <USBD_StdEPReq+0x32e>
 800860e:	7b7b      	ldrb	r3, [r7, #13]
 8008610:	2b00      	cmp	r3, #0
 8008612:	f040 8170 	bne.w	80088f6 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8008616:	7b7a      	ldrb	r2, [r7, #13]
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800861e:	7b7a      	ldrb	r2, [r7, #13]
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	32ae      	adds	r2, #174	@ 0xae
 8008624:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008628:	689b      	ldr	r3, [r3, #8]
 800862a:	2b00      	cmp	r3, #0
 800862c:	f000 8163 	beq.w	80088f6 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8008630:	7b7a      	ldrb	r2, [r7, #13]
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	32ae      	adds	r2, #174	@ 0xae
 8008636:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800863a:	689b      	ldr	r3, [r3, #8]
 800863c:	6839      	ldr	r1, [r7, #0]
 800863e:	6878      	ldr	r0, [r7, #4]
 8008640:	4798      	blx	r3
 8008642:	4603      	mov	r3, r0
 8008644:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008646:	e156      	b.n	80088f6 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008648:	683b      	ldr	r3, [r7, #0]
 800864a:	785b      	ldrb	r3, [r3, #1]
 800864c:	2b03      	cmp	r3, #3
 800864e:	d008      	beq.n	8008662 <USBD_StdEPReq+0x9a>
 8008650:	2b03      	cmp	r3, #3
 8008652:	f300 8145 	bgt.w	80088e0 <USBD_StdEPReq+0x318>
 8008656:	2b00      	cmp	r3, #0
 8008658:	f000 809b 	beq.w	8008792 <USBD_StdEPReq+0x1ca>
 800865c:	2b01      	cmp	r3, #1
 800865e:	d03c      	beq.n	80086da <USBD_StdEPReq+0x112>
 8008660:	e13e      	b.n	80088e0 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008668:	b2db      	uxtb	r3, r3
 800866a:	2b02      	cmp	r3, #2
 800866c:	d002      	beq.n	8008674 <USBD_StdEPReq+0xac>
 800866e:	2b03      	cmp	r3, #3
 8008670:	d016      	beq.n	80086a0 <USBD_StdEPReq+0xd8>
 8008672:	e02c      	b.n	80086ce <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008674:	7bbb      	ldrb	r3, [r7, #14]
 8008676:	2b00      	cmp	r3, #0
 8008678:	d00d      	beq.n	8008696 <USBD_StdEPReq+0xce>
 800867a:	7bbb      	ldrb	r3, [r7, #14]
 800867c:	2b80      	cmp	r3, #128	@ 0x80
 800867e:	d00a      	beq.n	8008696 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008680:	7bbb      	ldrb	r3, [r7, #14]
 8008682:	4619      	mov	r1, r3
 8008684:	6878      	ldr	r0, [r7, #4]
 8008686:	f001 f99d 	bl	80099c4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800868a:	2180      	movs	r1, #128	@ 0x80
 800868c:	6878      	ldr	r0, [r7, #4]
 800868e:	f001 f999 	bl	80099c4 <USBD_LL_StallEP>
 8008692:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008694:	e020      	b.n	80086d8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8008696:	6839      	ldr	r1, [r7, #0]
 8008698:	6878      	ldr	r0, [r7, #4]
 800869a:	f000 fc7a 	bl	8008f92 <USBD_CtlError>
              break;
 800869e:	e01b      	b.n	80086d8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80086a0:	683b      	ldr	r3, [r7, #0]
 80086a2:	885b      	ldrh	r3, [r3, #2]
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d10e      	bne.n	80086c6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80086a8:	7bbb      	ldrb	r3, [r7, #14]
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d00b      	beq.n	80086c6 <USBD_StdEPReq+0xfe>
 80086ae:	7bbb      	ldrb	r3, [r7, #14]
 80086b0:	2b80      	cmp	r3, #128	@ 0x80
 80086b2:	d008      	beq.n	80086c6 <USBD_StdEPReq+0xfe>
 80086b4:	683b      	ldr	r3, [r7, #0]
 80086b6:	88db      	ldrh	r3, [r3, #6]
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d104      	bne.n	80086c6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80086bc:	7bbb      	ldrb	r3, [r7, #14]
 80086be:	4619      	mov	r1, r3
 80086c0:	6878      	ldr	r0, [r7, #4]
 80086c2:	f001 f97f 	bl	80099c4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80086c6:	6878      	ldr	r0, [r7, #4]
 80086c8:	f000 fd2e 	bl	8009128 <USBD_CtlSendStatus>

              break;
 80086cc:	e004      	b.n	80086d8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80086ce:	6839      	ldr	r1, [r7, #0]
 80086d0:	6878      	ldr	r0, [r7, #4]
 80086d2:	f000 fc5e 	bl	8008f92 <USBD_CtlError>
              break;
 80086d6:	bf00      	nop
          }
          break;
 80086d8:	e107      	b.n	80088ea <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80086e0:	b2db      	uxtb	r3, r3
 80086e2:	2b02      	cmp	r3, #2
 80086e4:	d002      	beq.n	80086ec <USBD_StdEPReq+0x124>
 80086e6:	2b03      	cmp	r3, #3
 80086e8:	d016      	beq.n	8008718 <USBD_StdEPReq+0x150>
 80086ea:	e04b      	b.n	8008784 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80086ec:	7bbb      	ldrb	r3, [r7, #14]
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d00d      	beq.n	800870e <USBD_StdEPReq+0x146>
 80086f2:	7bbb      	ldrb	r3, [r7, #14]
 80086f4:	2b80      	cmp	r3, #128	@ 0x80
 80086f6:	d00a      	beq.n	800870e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80086f8:	7bbb      	ldrb	r3, [r7, #14]
 80086fa:	4619      	mov	r1, r3
 80086fc:	6878      	ldr	r0, [r7, #4]
 80086fe:	f001 f961 	bl	80099c4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008702:	2180      	movs	r1, #128	@ 0x80
 8008704:	6878      	ldr	r0, [r7, #4]
 8008706:	f001 f95d 	bl	80099c4 <USBD_LL_StallEP>
 800870a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800870c:	e040      	b.n	8008790 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800870e:	6839      	ldr	r1, [r7, #0]
 8008710:	6878      	ldr	r0, [r7, #4]
 8008712:	f000 fc3e 	bl	8008f92 <USBD_CtlError>
              break;
 8008716:	e03b      	b.n	8008790 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008718:	683b      	ldr	r3, [r7, #0]
 800871a:	885b      	ldrh	r3, [r3, #2]
 800871c:	2b00      	cmp	r3, #0
 800871e:	d136      	bne.n	800878e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008720:	7bbb      	ldrb	r3, [r7, #14]
 8008722:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008726:	2b00      	cmp	r3, #0
 8008728:	d004      	beq.n	8008734 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800872a:	7bbb      	ldrb	r3, [r7, #14]
 800872c:	4619      	mov	r1, r3
 800872e:	6878      	ldr	r0, [r7, #4]
 8008730:	f001 f967 	bl	8009a02 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008734:	6878      	ldr	r0, [r7, #4]
 8008736:	f000 fcf7 	bl	8009128 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800873a:	7bbb      	ldrb	r3, [r7, #14]
 800873c:	4619      	mov	r1, r3
 800873e:	6878      	ldr	r0, [r7, #4]
 8008740:	f7ff fde4 	bl	800830c <USBD_CoreFindEP>
 8008744:	4603      	mov	r3, r0
 8008746:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008748:	7b7b      	ldrb	r3, [r7, #13]
 800874a:	2bff      	cmp	r3, #255	@ 0xff
 800874c:	d01f      	beq.n	800878e <USBD_StdEPReq+0x1c6>
 800874e:	7b7b      	ldrb	r3, [r7, #13]
 8008750:	2b00      	cmp	r3, #0
 8008752:	d11c      	bne.n	800878e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8008754:	7b7a      	ldrb	r2, [r7, #13]
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800875c:	7b7a      	ldrb	r2, [r7, #13]
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	32ae      	adds	r2, #174	@ 0xae
 8008762:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008766:	689b      	ldr	r3, [r3, #8]
 8008768:	2b00      	cmp	r3, #0
 800876a:	d010      	beq.n	800878e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800876c:	7b7a      	ldrb	r2, [r7, #13]
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	32ae      	adds	r2, #174	@ 0xae
 8008772:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008776:	689b      	ldr	r3, [r3, #8]
 8008778:	6839      	ldr	r1, [r7, #0]
 800877a:	6878      	ldr	r0, [r7, #4]
 800877c:	4798      	blx	r3
 800877e:	4603      	mov	r3, r0
 8008780:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8008782:	e004      	b.n	800878e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8008784:	6839      	ldr	r1, [r7, #0]
 8008786:	6878      	ldr	r0, [r7, #4]
 8008788:	f000 fc03 	bl	8008f92 <USBD_CtlError>
              break;
 800878c:	e000      	b.n	8008790 <USBD_StdEPReq+0x1c8>
              break;
 800878e:	bf00      	nop
          }
          break;
 8008790:	e0ab      	b.n	80088ea <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008798:	b2db      	uxtb	r3, r3
 800879a:	2b02      	cmp	r3, #2
 800879c:	d002      	beq.n	80087a4 <USBD_StdEPReq+0x1dc>
 800879e:	2b03      	cmp	r3, #3
 80087a0:	d032      	beq.n	8008808 <USBD_StdEPReq+0x240>
 80087a2:	e097      	b.n	80088d4 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80087a4:	7bbb      	ldrb	r3, [r7, #14]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d007      	beq.n	80087ba <USBD_StdEPReq+0x1f2>
 80087aa:	7bbb      	ldrb	r3, [r7, #14]
 80087ac:	2b80      	cmp	r3, #128	@ 0x80
 80087ae:	d004      	beq.n	80087ba <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80087b0:	6839      	ldr	r1, [r7, #0]
 80087b2:	6878      	ldr	r0, [r7, #4]
 80087b4:	f000 fbed 	bl	8008f92 <USBD_CtlError>
                break;
 80087b8:	e091      	b.n	80088de <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80087ba:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80087be:	2b00      	cmp	r3, #0
 80087c0:	da0b      	bge.n	80087da <USBD_StdEPReq+0x212>
 80087c2:	7bbb      	ldrb	r3, [r7, #14]
 80087c4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80087c8:	4613      	mov	r3, r2
 80087ca:	009b      	lsls	r3, r3, #2
 80087cc:	4413      	add	r3, r2
 80087ce:	009b      	lsls	r3, r3, #2
 80087d0:	3310      	adds	r3, #16
 80087d2:	687a      	ldr	r2, [r7, #4]
 80087d4:	4413      	add	r3, r2
 80087d6:	3304      	adds	r3, #4
 80087d8:	e00b      	b.n	80087f2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80087da:	7bbb      	ldrb	r3, [r7, #14]
 80087dc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80087e0:	4613      	mov	r3, r2
 80087e2:	009b      	lsls	r3, r3, #2
 80087e4:	4413      	add	r3, r2
 80087e6:	009b      	lsls	r3, r3, #2
 80087e8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80087ec:	687a      	ldr	r2, [r7, #4]
 80087ee:	4413      	add	r3, r2
 80087f0:	3304      	adds	r3, #4
 80087f2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80087f4:	68bb      	ldr	r3, [r7, #8]
 80087f6:	2200      	movs	r2, #0
 80087f8:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80087fa:	68bb      	ldr	r3, [r7, #8]
 80087fc:	2202      	movs	r2, #2
 80087fe:	4619      	mov	r1, r3
 8008800:	6878      	ldr	r0, [r7, #4]
 8008802:	f000 fc37 	bl	8009074 <USBD_CtlSendData>
              break;
 8008806:	e06a      	b.n	80088de <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008808:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800880c:	2b00      	cmp	r3, #0
 800880e:	da11      	bge.n	8008834 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008810:	7bbb      	ldrb	r3, [r7, #14]
 8008812:	f003 020f 	and.w	r2, r3, #15
 8008816:	6879      	ldr	r1, [r7, #4]
 8008818:	4613      	mov	r3, r2
 800881a:	009b      	lsls	r3, r3, #2
 800881c:	4413      	add	r3, r2
 800881e:	009b      	lsls	r3, r3, #2
 8008820:	440b      	add	r3, r1
 8008822:	3324      	adds	r3, #36	@ 0x24
 8008824:	881b      	ldrh	r3, [r3, #0]
 8008826:	2b00      	cmp	r3, #0
 8008828:	d117      	bne.n	800885a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800882a:	6839      	ldr	r1, [r7, #0]
 800882c:	6878      	ldr	r0, [r7, #4]
 800882e:	f000 fbb0 	bl	8008f92 <USBD_CtlError>
                  break;
 8008832:	e054      	b.n	80088de <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008834:	7bbb      	ldrb	r3, [r7, #14]
 8008836:	f003 020f 	and.w	r2, r3, #15
 800883a:	6879      	ldr	r1, [r7, #4]
 800883c:	4613      	mov	r3, r2
 800883e:	009b      	lsls	r3, r3, #2
 8008840:	4413      	add	r3, r2
 8008842:	009b      	lsls	r3, r3, #2
 8008844:	440b      	add	r3, r1
 8008846:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800884a:	881b      	ldrh	r3, [r3, #0]
 800884c:	2b00      	cmp	r3, #0
 800884e:	d104      	bne.n	800885a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008850:	6839      	ldr	r1, [r7, #0]
 8008852:	6878      	ldr	r0, [r7, #4]
 8008854:	f000 fb9d 	bl	8008f92 <USBD_CtlError>
                  break;
 8008858:	e041      	b.n	80088de <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800885a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800885e:	2b00      	cmp	r3, #0
 8008860:	da0b      	bge.n	800887a <USBD_StdEPReq+0x2b2>
 8008862:	7bbb      	ldrb	r3, [r7, #14]
 8008864:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008868:	4613      	mov	r3, r2
 800886a:	009b      	lsls	r3, r3, #2
 800886c:	4413      	add	r3, r2
 800886e:	009b      	lsls	r3, r3, #2
 8008870:	3310      	adds	r3, #16
 8008872:	687a      	ldr	r2, [r7, #4]
 8008874:	4413      	add	r3, r2
 8008876:	3304      	adds	r3, #4
 8008878:	e00b      	b.n	8008892 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800887a:	7bbb      	ldrb	r3, [r7, #14]
 800887c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008880:	4613      	mov	r3, r2
 8008882:	009b      	lsls	r3, r3, #2
 8008884:	4413      	add	r3, r2
 8008886:	009b      	lsls	r3, r3, #2
 8008888:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800888c:	687a      	ldr	r2, [r7, #4]
 800888e:	4413      	add	r3, r2
 8008890:	3304      	adds	r3, #4
 8008892:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008894:	7bbb      	ldrb	r3, [r7, #14]
 8008896:	2b00      	cmp	r3, #0
 8008898:	d002      	beq.n	80088a0 <USBD_StdEPReq+0x2d8>
 800889a:	7bbb      	ldrb	r3, [r7, #14]
 800889c:	2b80      	cmp	r3, #128	@ 0x80
 800889e:	d103      	bne.n	80088a8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80088a0:	68bb      	ldr	r3, [r7, #8]
 80088a2:	2200      	movs	r2, #0
 80088a4:	601a      	str	r2, [r3, #0]
 80088a6:	e00e      	b.n	80088c6 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80088a8:	7bbb      	ldrb	r3, [r7, #14]
 80088aa:	4619      	mov	r1, r3
 80088ac:	6878      	ldr	r0, [r7, #4]
 80088ae:	f001 f8c7 	bl	8009a40 <USBD_LL_IsStallEP>
 80088b2:	4603      	mov	r3, r0
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d003      	beq.n	80088c0 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80088b8:	68bb      	ldr	r3, [r7, #8]
 80088ba:	2201      	movs	r2, #1
 80088bc:	601a      	str	r2, [r3, #0]
 80088be:	e002      	b.n	80088c6 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80088c0:	68bb      	ldr	r3, [r7, #8]
 80088c2:	2200      	movs	r2, #0
 80088c4:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80088c6:	68bb      	ldr	r3, [r7, #8]
 80088c8:	2202      	movs	r2, #2
 80088ca:	4619      	mov	r1, r3
 80088cc:	6878      	ldr	r0, [r7, #4]
 80088ce:	f000 fbd1 	bl	8009074 <USBD_CtlSendData>
              break;
 80088d2:	e004      	b.n	80088de <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80088d4:	6839      	ldr	r1, [r7, #0]
 80088d6:	6878      	ldr	r0, [r7, #4]
 80088d8:	f000 fb5b 	bl	8008f92 <USBD_CtlError>
              break;
 80088dc:	bf00      	nop
          }
          break;
 80088de:	e004      	b.n	80088ea <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80088e0:	6839      	ldr	r1, [r7, #0]
 80088e2:	6878      	ldr	r0, [r7, #4]
 80088e4:	f000 fb55 	bl	8008f92 <USBD_CtlError>
          break;
 80088e8:	bf00      	nop
      }
      break;
 80088ea:	e005      	b.n	80088f8 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80088ec:	6839      	ldr	r1, [r7, #0]
 80088ee:	6878      	ldr	r0, [r7, #4]
 80088f0:	f000 fb4f 	bl	8008f92 <USBD_CtlError>
      break;
 80088f4:	e000      	b.n	80088f8 <USBD_StdEPReq+0x330>
      break;
 80088f6:	bf00      	nop
  }

  return ret;
 80088f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80088fa:	4618      	mov	r0, r3
 80088fc:	3710      	adds	r7, #16
 80088fe:	46bd      	mov	sp, r7
 8008900:	bd80      	pop	{r7, pc}
	...

08008904 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008904:	b580      	push	{r7, lr}
 8008906:	b084      	sub	sp, #16
 8008908:	af00      	add	r7, sp, #0
 800890a:	6078      	str	r0, [r7, #4]
 800890c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800890e:	2300      	movs	r3, #0
 8008910:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008912:	2300      	movs	r3, #0
 8008914:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008916:	2300      	movs	r3, #0
 8008918:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800891a:	683b      	ldr	r3, [r7, #0]
 800891c:	885b      	ldrh	r3, [r3, #2]
 800891e:	0a1b      	lsrs	r3, r3, #8
 8008920:	b29b      	uxth	r3, r3
 8008922:	3b01      	subs	r3, #1
 8008924:	2b06      	cmp	r3, #6
 8008926:	f200 8128 	bhi.w	8008b7a <USBD_GetDescriptor+0x276>
 800892a:	a201      	add	r2, pc, #4	@ (adr r2, 8008930 <USBD_GetDescriptor+0x2c>)
 800892c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008930:	0800894d 	.word	0x0800894d
 8008934:	08008965 	.word	0x08008965
 8008938:	080089a5 	.word	0x080089a5
 800893c:	08008b7b 	.word	0x08008b7b
 8008940:	08008b7b 	.word	0x08008b7b
 8008944:	08008b1b 	.word	0x08008b1b
 8008948:	08008b47 	.word	0x08008b47
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	687a      	ldr	r2, [r7, #4]
 8008956:	7c12      	ldrb	r2, [r2, #16]
 8008958:	f107 0108 	add.w	r1, r7, #8
 800895c:	4610      	mov	r0, r2
 800895e:	4798      	blx	r3
 8008960:	60f8      	str	r0, [r7, #12]
      break;
 8008962:	e112      	b.n	8008b8a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	7c1b      	ldrb	r3, [r3, #16]
 8008968:	2b00      	cmp	r3, #0
 800896a:	d10d      	bne.n	8008988 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008972:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008974:	f107 0208 	add.w	r2, r7, #8
 8008978:	4610      	mov	r0, r2
 800897a:	4798      	blx	r3
 800897c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	3301      	adds	r3, #1
 8008982:	2202      	movs	r2, #2
 8008984:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008986:	e100      	b.n	8008b8a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800898e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008990:	f107 0208 	add.w	r2, r7, #8
 8008994:	4610      	mov	r0, r2
 8008996:	4798      	blx	r3
 8008998:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	3301      	adds	r3, #1
 800899e:	2202      	movs	r2, #2
 80089a0:	701a      	strb	r2, [r3, #0]
      break;
 80089a2:	e0f2      	b.n	8008b8a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80089a4:	683b      	ldr	r3, [r7, #0]
 80089a6:	885b      	ldrh	r3, [r3, #2]
 80089a8:	b2db      	uxtb	r3, r3
 80089aa:	2b05      	cmp	r3, #5
 80089ac:	f200 80ac 	bhi.w	8008b08 <USBD_GetDescriptor+0x204>
 80089b0:	a201      	add	r2, pc, #4	@ (adr r2, 80089b8 <USBD_GetDescriptor+0xb4>)
 80089b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089b6:	bf00      	nop
 80089b8:	080089d1 	.word	0x080089d1
 80089bc:	08008a05 	.word	0x08008a05
 80089c0:	08008a39 	.word	0x08008a39
 80089c4:	08008a6d 	.word	0x08008a6d
 80089c8:	08008aa1 	.word	0x08008aa1
 80089cc:	08008ad5 	.word	0x08008ad5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80089d6:	685b      	ldr	r3, [r3, #4]
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d00b      	beq.n	80089f4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80089e2:	685b      	ldr	r3, [r3, #4]
 80089e4:	687a      	ldr	r2, [r7, #4]
 80089e6:	7c12      	ldrb	r2, [r2, #16]
 80089e8:	f107 0108 	add.w	r1, r7, #8
 80089ec:	4610      	mov	r0, r2
 80089ee:	4798      	blx	r3
 80089f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80089f2:	e091      	b.n	8008b18 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80089f4:	6839      	ldr	r1, [r7, #0]
 80089f6:	6878      	ldr	r0, [r7, #4]
 80089f8:	f000 facb 	bl	8008f92 <USBD_CtlError>
            err++;
 80089fc:	7afb      	ldrb	r3, [r7, #11]
 80089fe:	3301      	adds	r3, #1
 8008a00:	72fb      	strb	r3, [r7, #11]
          break;
 8008a02:	e089      	b.n	8008b18 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008a0a:	689b      	ldr	r3, [r3, #8]
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d00b      	beq.n	8008a28 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008a16:	689b      	ldr	r3, [r3, #8]
 8008a18:	687a      	ldr	r2, [r7, #4]
 8008a1a:	7c12      	ldrb	r2, [r2, #16]
 8008a1c:	f107 0108 	add.w	r1, r7, #8
 8008a20:	4610      	mov	r0, r2
 8008a22:	4798      	blx	r3
 8008a24:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008a26:	e077      	b.n	8008b18 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008a28:	6839      	ldr	r1, [r7, #0]
 8008a2a:	6878      	ldr	r0, [r7, #4]
 8008a2c:	f000 fab1 	bl	8008f92 <USBD_CtlError>
            err++;
 8008a30:	7afb      	ldrb	r3, [r7, #11]
 8008a32:	3301      	adds	r3, #1
 8008a34:	72fb      	strb	r3, [r7, #11]
          break;
 8008a36:	e06f      	b.n	8008b18 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008a3e:	68db      	ldr	r3, [r3, #12]
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d00b      	beq.n	8008a5c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008a4a:	68db      	ldr	r3, [r3, #12]
 8008a4c:	687a      	ldr	r2, [r7, #4]
 8008a4e:	7c12      	ldrb	r2, [r2, #16]
 8008a50:	f107 0108 	add.w	r1, r7, #8
 8008a54:	4610      	mov	r0, r2
 8008a56:	4798      	blx	r3
 8008a58:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008a5a:	e05d      	b.n	8008b18 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008a5c:	6839      	ldr	r1, [r7, #0]
 8008a5e:	6878      	ldr	r0, [r7, #4]
 8008a60:	f000 fa97 	bl	8008f92 <USBD_CtlError>
            err++;
 8008a64:	7afb      	ldrb	r3, [r7, #11]
 8008a66:	3301      	adds	r3, #1
 8008a68:	72fb      	strb	r3, [r7, #11]
          break;
 8008a6a:	e055      	b.n	8008b18 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008a72:	691b      	ldr	r3, [r3, #16]
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d00b      	beq.n	8008a90 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008a7e:	691b      	ldr	r3, [r3, #16]
 8008a80:	687a      	ldr	r2, [r7, #4]
 8008a82:	7c12      	ldrb	r2, [r2, #16]
 8008a84:	f107 0108 	add.w	r1, r7, #8
 8008a88:	4610      	mov	r0, r2
 8008a8a:	4798      	blx	r3
 8008a8c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008a8e:	e043      	b.n	8008b18 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008a90:	6839      	ldr	r1, [r7, #0]
 8008a92:	6878      	ldr	r0, [r7, #4]
 8008a94:	f000 fa7d 	bl	8008f92 <USBD_CtlError>
            err++;
 8008a98:	7afb      	ldrb	r3, [r7, #11]
 8008a9a:	3301      	adds	r3, #1
 8008a9c:	72fb      	strb	r3, [r7, #11]
          break;
 8008a9e:	e03b      	b.n	8008b18 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008aa6:	695b      	ldr	r3, [r3, #20]
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d00b      	beq.n	8008ac4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008ab2:	695b      	ldr	r3, [r3, #20]
 8008ab4:	687a      	ldr	r2, [r7, #4]
 8008ab6:	7c12      	ldrb	r2, [r2, #16]
 8008ab8:	f107 0108 	add.w	r1, r7, #8
 8008abc:	4610      	mov	r0, r2
 8008abe:	4798      	blx	r3
 8008ac0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008ac2:	e029      	b.n	8008b18 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008ac4:	6839      	ldr	r1, [r7, #0]
 8008ac6:	6878      	ldr	r0, [r7, #4]
 8008ac8:	f000 fa63 	bl	8008f92 <USBD_CtlError>
            err++;
 8008acc:	7afb      	ldrb	r3, [r7, #11]
 8008ace:	3301      	adds	r3, #1
 8008ad0:	72fb      	strb	r3, [r7, #11]
          break;
 8008ad2:	e021      	b.n	8008b18 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008ada:	699b      	ldr	r3, [r3, #24]
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d00b      	beq.n	8008af8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008ae6:	699b      	ldr	r3, [r3, #24]
 8008ae8:	687a      	ldr	r2, [r7, #4]
 8008aea:	7c12      	ldrb	r2, [r2, #16]
 8008aec:	f107 0108 	add.w	r1, r7, #8
 8008af0:	4610      	mov	r0, r2
 8008af2:	4798      	blx	r3
 8008af4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008af6:	e00f      	b.n	8008b18 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008af8:	6839      	ldr	r1, [r7, #0]
 8008afa:	6878      	ldr	r0, [r7, #4]
 8008afc:	f000 fa49 	bl	8008f92 <USBD_CtlError>
            err++;
 8008b00:	7afb      	ldrb	r3, [r7, #11]
 8008b02:	3301      	adds	r3, #1
 8008b04:	72fb      	strb	r3, [r7, #11]
          break;
 8008b06:	e007      	b.n	8008b18 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008b08:	6839      	ldr	r1, [r7, #0]
 8008b0a:	6878      	ldr	r0, [r7, #4]
 8008b0c:	f000 fa41 	bl	8008f92 <USBD_CtlError>
          err++;
 8008b10:	7afb      	ldrb	r3, [r7, #11]
 8008b12:	3301      	adds	r3, #1
 8008b14:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8008b16:	bf00      	nop
      }
      break;
 8008b18:	e037      	b.n	8008b8a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	7c1b      	ldrb	r3, [r3, #16]
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d109      	bne.n	8008b36 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008b28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008b2a:	f107 0208 	add.w	r2, r7, #8
 8008b2e:	4610      	mov	r0, r2
 8008b30:	4798      	blx	r3
 8008b32:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008b34:	e029      	b.n	8008b8a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008b36:	6839      	ldr	r1, [r7, #0]
 8008b38:	6878      	ldr	r0, [r7, #4]
 8008b3a:	f000 fa2a 	bl	8008f92 <USBD_CtlError>
        err++;
 8008b3e:	7afb      	ldrb	r3, [r7, #11]
 8008b40:	3301      	adds	r3, #1
 8008b42:	72fb      	strb	r3, [r7, #11]
      break;
 8008b44:	e021      	b.n	8008b8a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	7c1b      	ldrb	r3, [r3, #16]
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d10d      	bne.n	8008b6a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008b54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b56:	f107 0208 	add.w	r2, r7, #8
 8008b5a:	4610      	mov	r0, r2
 8008b5c:	4798      	blx	r3
 8008b5e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	3301      	adds	r3, #1
 8008b64:	2207      	movs	r2, #7
 8008b66:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008b68:	e00f      	b.n	8008b8a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008b6a:	6839      	ldr	r1, [r7, #0]
 8008b6c:	6878      	ldr	r0, [r7, #4]
 8008b6e:	f000 fa10 	bl	8008f92 <USBD_CtlError>
        err++;
 8008b72:	7afb      	ldrb	r3, [r7, #11]
 8008b74:	3301      	adds	r3, #1
 8008b76:	72fb      	strb	r3, [r7, #11]
      break;
 8008b78:	e007      	b.n	8008b8a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008b7a:	6839      	ldr	r1, [r7, #0]
 8008b7c:	6878      	ldr	r0, [r7, #4]
 8008b7e:	f000 fa08 	bl	8008f92 <USBD_CtlError>
      err++;
 8008b82:	7afb      	ldrb	r3, [r7, #11]
 8008b84:	3301      	adds	r3, #1
 8008b86:	72fb      	strb	r3, [r7, #11]
      break;
 8008b88:	bf00      	nop
  }

  if (err != 0U)
 8008b8a:	7afb      	ldrb	r3, [r7, #11]
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d11e      	bne.n	8008bce <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8008b90:	683b      	ldr	r3, [r7, #0]
 8008b92:	88db      	ldrh	r3, [r3, #6]
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d016      	beq.n	8008bc6 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8008b98:	893b      	ldrh	r3, [r7, #8]
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d00e      	beq.n	8008bbc <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8008b9e:	683b      	ldr	r3, [r7, #0]
 8008ba0:	88da      	ldrh	r2, [r3, #6]
 8008ba2:	893b      	ldrh	r3, [r7, #8]
 8008ba4:	4293      	cmp	r3, r2
 8008ba6:	bf28      	it	cs
 8008ba8:	4613      	movcs	r3, r2
 8008baa:	b29b      	uxth	r3, r3
 8008bac:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008bae:	893b      	ldrh	r3, [r7, #8]
 8008bb0:	461a      	mov	r2, r3
 8008bb2:	68f9      	ldr	r1, [r7, #12]
 8008bb4:	6878      	ldr	r0, [r7, #4]
 8008bb6:	f000 fa5d 	bl	8009074 <USBD_CtlSendData>
 8008bba:	e009      	b.n	8008bd0 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008bbc:	6839      	ldr	r1, [r7, #0]
 8008bbe:	6878      	ldr	r0, [r7, #4]
 8008bc0:	f000 f9e7 	bl	8008f92 <USBD_CtlError>
 8008bc4:	e004      	b.n	8008bd0 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008bc6:	6878      	ldr	r0, [r7, #4]
 8008bc8:	f000 faae 	bl	8009128 <USBD_CtlSendStatus>
 8008bcc:	e000      	b.n	8008bd0 <USBD_GetDescriptor+0x2cc>
    return;
 8008bce:	bf00      	nop
  }
}
 8008bd0:	3710      	adds	r7, #16
 8008bd2:	46bd      	mov	sp, r7
 8008bd4:	bd80      	pop	{r7, pc}
 8008bd6:	bf00      	nop

08008bd8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008bd8:	b580      	push	{r7, lr}
 8008bda:	b084      	sub	sp, #16
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	6078      	str	r0, [r7, #4]
 8008be0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008be2:	683b      	ldr	r3, [r7, #0]
 8008be4:	889b      	ldrh	r3, [r3, #4]
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d131      	bne.n	8008c4e <USBD_SetAddress+0x76>
 8008bea:	683b      	ldr	r3, [r7, #0]
 8008bec:	88db      	ldrh	r3, [r3, #6]
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d12d      	bne.n	8008c4e <USBD_SetAddress+0x76>
 8008bf2:	683b      	ldr	r3, [r7, #0]
 8008bf4:	885b      	ldrh	r3, [r3, #2]
 8008bf6:	2b7f      	cmp	r3, #127	@ 0x7f
 8008bf8:	d829      	bhi.n	8008c4e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008bfa:	683b      	ldr	r3, [r7, #0]
 8008bfc:	885b      	ldrh	r3, [r3, #2]
 8008bfe:	b2db      	uxtb	r3, r3
 8008c00:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008c04:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008c0c:	b2db      	uxtb	r3, r3
 8008c0e:	2b03      	cmp	r3, #3
 8008c10:	d104      	bne.n	8008c1c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008c12:	6839      	ldr	r1, [r7, #0]
 8008c14:	6878      	ldr	r0, [r7, #4]
 8008c16:	f000 f9bc 	bl	8008f92 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c1a:	e01d      	b.n	8008c58 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	7bfa      	ldrb	r2, [r7, #15]
 8008c20:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008c24:	7bfb      	ldrb	r3, [r7, #15]
 8008c26:	4619      	mov	r1, r3
 8008c28:	6878      	ldr	r0, [r7, #4]
 8008c2a:	f000 ff35 	bl	8009a98 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008c2e:	6878      	ldr	r0, [r7, #4]
 8008c30:	f000 fa7a 	bl	8009128 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008c34:	7bfb      	ldrb	r3, [r7, #15]
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d004      	beq.n	8008c44 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	2202      	movs	r2, #2
 8008c3e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c42:	e009      	b.n	8008c58 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	2201      	movs	r2, #1
 8008c48:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c4c:	e004      	b.n	8008c58 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008c4e:	6839      	ldr	r1, [r7, #0]
 8008c50:	6878      	ldr	r0, [r7, #4]
 8008c52:	f000 f99e 	bl	8008f92 <USBD_CtlError>
  }
}
 8008c56:	bf00      	nop
 8008c58:	bf00      	nop
 8008c5a:	3710      	adds	r7, #16
 8008c5c:	46bd      	mov	sp, r7
 8008c5e:	bd80      	pop	{r7, pc}

08008c60 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c60:	b580      	push	{r7, lr}
 8008c62:	b084      	sub	sp, #16
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	6078      	str	r0, [r7, #4]
 8008c68:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008c6a:	2300      	movs	r3, #0
 8008c6c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008c6e:	683b      	ldr	r3, [r7, #0]
 8008c70:	885b      	ldrh	r3, [r3, #2]
 8008c72:	b2da      	uxtb	r2, r3
 8008c74:	4b4e      	ldr	r3, [pc, #312]	@ (8008db0 <USBD_SetConfig+0x150>)
 8008c76:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008c78:	4b4d      	ldr	r3, [pc, #308]	@ (8008db0 <USBD_SetConfig+0x150>)
 8008c7a:	781b      	ldrb	r3, [r3, #0]
 8008c7c:	2b01      	cmp	r3, #1
 8008c7e:	d905      	bls.n	8008c8c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008c80:	6839      	ldr	r1, [r7, #0]
 8008c82:	6878      	ldr	r0, [r7, #4]
 8008c84:	f000 f985 	bl	8008f92 <USBD_CtlError>
    return USBD_FAIL;
 8008c88:	2303      	movs	r3, #3
 8008c8a:	e08c      	b.n	8008da6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008c92:	b2db      	uxtb	r3, r3
 8008c94:	2b02      	cmp	r3, #2
 8008c96:	d002      	beq.n	8008c9e <USBD_SetConfig+0x3e>
 8008c98:	2b03      	cmp	r3, #3
 8008c9a:	d029      	beq.n	8008cf0 <USBD_SetConfig+0x90>
 8008c9c:	e075      	b.n	8008d8a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008c9e:	4b44      	ldr	r3, [pc, #272]	@ (8008db0 <USBD_SetConfig+0x150>)
 8008ca0:	781b      	ldrb	r3, [r3, #0]
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d020      	beq.n	8008ce8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8008ca6:	4b42      	ldr	r3, [pc, #264]	@ (8008db0 <USBD_SetConfig+0x150>)
 8008ca8:	781b      	ldrb	r3, [r3, #0]
 8008caa:	461a      	mov	r2, r3
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008cb0:	4b3f      	ldr	r3, [pc, #252]	@ (8008db0 <USBD_SetConfig+0x150>)
 8008cb2:	781b      	ldrb	r3, [r3, #0]
 8008cb4:	4619      	mov	r1, r3
 8008cb6:	6878      	ldr	r0, [r7, #4]
 8008cb8:	f7fe ffe3 	bl	8007c82 <USBD_SetClassConfig>
 8008cbc:	4603      	mov	r3, r0
 8008cbe:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008cc0:	7bfb      	ldrb	r3, [r7, #15]
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d008      	beq.n	8008cd8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8008cc6:	6839      	ldr	r1, [r7, #0]
 8008cc8:	6878      	ldr	r0, [r7, #4]
 8008cca:	f000 f962 	bl	8008f92 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	2202      	movs	r2, #2
 8008cd2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008cd6:	e065      	b.n	8008da4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008cd8:	6878      	ldr	r0, [r7, #4]
 8008cda:	f000 fa25 	bl	8009128 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	2203      	movs	r2, #3
 8008ce2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8008ce6:	e05d      	b.n	8008da4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008ce8:	6878      	ldr	r0, [r7, #4]
 8008cea:	f000 fa1d 	bl	8009128 <USBD_CtlSendStatus>
      break;
 8008cee:	e059      	b.n	8008da4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008cf0:	4b2f      	ldr	r3, [pc, #188]	@ (8008db0 <USBD_SetConfig+0x150>)
 8008cf2:	781b      	ldrb	r3, [r3, #0]
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d112      	bne.n	8008d1e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	2202      	movs	r2, #2
 8008cfc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8008d00:	4b2b      	ldr	r3, [pc, #172]	@ (8008db0 <USBD_SetConfig+0x150>)
 8008d02:	781b      	ldrb	r3, [r3, #0]
 8008d04:	461a      	mov	r2, r3
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008d0a:	4b29      	ldr	r3, [pc, #164]	@ (8008db0 <USBD_SetConfig+0x150>)
 8008d0c:	781b      	ldrb	r3, [r3, #0]
 8008d0e:	4619      	mov	r1, r3
 8008d10:	6878      	ldr	r0, [r7, #4]
 8008d12:	f7fe ffd2 	bl	8007cba <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008d16:	6878      	ldr	r0, [r7, #4]
 8008d18:	f000 fa06 	bl	8009128 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008d1c:	e042      	b.n	8008da4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8008d1e:	4b24      	ldr	r3, [pc, #144]	@ (8008db0 <USBD_SetConfig+0x150>)
 8008d20:	781b      	ldrb	r3, [r3, #0]
 8008d22:	461a      	mov	r2, r3
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	685b      	ldr	r3, [r3, #4]
 8008d28:	429a      	cmp	r2, r3
 8008d2a:	d02a      	beq.n	8008d82 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	685b      	ldr	r3, [r3, #4]
 8008d30:	b2db      	uxtb	r3, r3
 8008d32:	4619      	mov	r1, r3
 8008d34:	6878      	ldr	r0, [r7, #4]
 8008d36:	f7fe ffc0 	bl	8007cba <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008d3a:	4b1d      	ldr	r3, [pc, #116]	@ (8008db0 <USBD_SetConfig+0x150>)
 8008d3c:	781b      	ldrb	r3, [r3, #0]
 8008d3e:	461a      	mov	r2, r3
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008d44:	4b1a      	ldr	r3, [pc, #104]	@ (8008db0 <USBD_SetConfig+0x150>)
 8008d46:	781b      	ldrb	r3, [r3, #0]
 8008d48:	4619      	mov	r1, r3
 8008d4a:	6878      	ldr	r0, [r7, #4]
 8008d4c:	f7fe ff99 	bl	8007c82 <USBD_SetClassConfig>
 8008d50:	4603      	mov	r3, r0
 8008d52:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008d54:	7bfb      	ldrb	r3, [r7, #15]
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d00f      	beq.n	8008d7a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8008d5a:	6839      	ldr	r1, [r7, #0]
 8008d5c:	6878      	ldr	r0, [r7, #4]
 8008d5e:	f000 f918 	bl	8008f92 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	685b      	ldr	r3, [r3, #4]
 8008d66:	b2db      	uxtb	r3, r3
 8008d68:	4619      	mov	r1, r3
 8008d6a:	6878      	ldr	r0, [r7, #4]
 8008d6c:	f7fe ffa5 	bl	8007cba <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	2202      	movs	r2, #2
 8008d74:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8008d78:	e014      	b.n	8008da4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008d7a:	6878      	ldr	r0, [r7, #4]
 8008d7c:	f000 f9d4 	bl	8009128 <USBD_CtlSendStatus>
      break;
 8008d80:	e010      	b.n	8008da4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008d82:	6878      	ldr	r0, [r7, #4]
 8008d84:	f000 f9d0 	bl	8009128 <USBD_CtlSendStatus>
      break;
 8008d88:	e00c      	b.n	8008da4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8008d8a:	6839      	ldr	r1, [r7, #0]
 8008d8c:	6878      	ldr	r0, [r7, #4]
 8008d8e:	f000 f900 	bl	8008f92 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008d92:	4b07      	ldr	r3, [pc, #28]	@ (8008db0 <USBD_SetConfig+0x150>)
 8008d94:	781b      	ldrb	r3, [r3, #0]
 8008d96:	4619      	mov	r1, r3
 8008d98:	6878      	ldr	r0, [r7, #4]
 8008d9a:	f7fe ff8e 	bl	8007cba <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008d9e:	2303      	movs	r3, #3
 8008da0:	73fb      	strb	r3, [r7, #15]
      break;
 8008da2:	bf00      	nop
  }

  return ret;
 8008da4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008da6:	4618      	mov	r0, r3
 8008da8:	3710      	adds	r7, #16
 8008daa:	46bd      	mov	sp, r7
 8008dac:	bd80      	pop	{r7, pc}
 8008dae:	bf00      	nop
 8008db0:	2000bbac 	.word	0x2000bbac

08008db4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008db4:	b580      	push	{r7, lr}
 8008db6:	b082      	sub	sp, #8
 8008db8:	af00      	add	r7, sp, #0
 8008dba:	6078      	str	r0, [r7, #4]
 8008dbc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008dbe:	683b      	ldr	r3, [r7, #0]
 8008dc0:	88db      	ldrh	r3, [r3, #6]
 8008dc2:	2b01      	cmp	r3, #1
 8008dc4:	d004      	beq.n	8008dd0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008dc6:	6839      	ldr	r1, [r7, #0]
 8008dc8:	6878      	ldr	r0, [r7, #4]
 8008dca:	f000 f8e2 	bl	8008f92 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008dce:	e023      	b.n	8008e18 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008dd6:	b2db      	uxtb	r3, r3
 8008dd8:	2b02      	cmp	r3, #2
 8008dda:	dc02      	bgt.n	8008de2 <USBD_GetConfig+0x2e>
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	dc03      	bgt.n	8008de8 <USBD_GetConfig+0x34>
 8008de0:	e015      	b.n	8008e0e <USBD_GetConfig+0x5a>
 8008de2:	2b03      	cmp	r3, #3
 8008de4:	d00b      	beq.n	8008dfe <USBD_GetConfig+0x4a>
 8008de6:	e012      	b.n	8008e0e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	2200      	movs	r2, #0
 8008dec:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	3308      	adds	r3, #8
 8008df2:	2201      	movs	r2, #1
 8008df4:	4619      	mov	r1, r3
 8008df6:	6878      	ldr	r0, [r7, #4]
 8008df8:	f000 f93c 	bl	8009074 <USBD_CtlSendData>
        break;
 8008dfc:	e00c      	b.n	8008e18 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	3304      	adds	r3, #4
 8008e02:	2201      	movs	r2, #1
 8008e04:	4619      	mov	r1, r3
 8008e06:	6878      	ldr	r0, [r7, #4]
 8008e08:	f000 f934 	bl	8009074 <USBD_CtlSendData>
        break;
 8008e0c:	e004      	b.n	8008e18 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008e0e:	6839      	ldr	r1, [r7, #0]
 8008e10:	6878      	ldr	r0, [r7, #4]
 8008e12:	f000 f8be 	bl	8008f92 <USBD_CtlError>
        break;
 8008e16:	bf00      	nop
}
 8008e18:	bf00      	nop
 8008e1a:	3708      	adds	r7, #8
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	bd80      	pop	{r7, pc}

08008e20 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e20:	b580      	push	{r7, lr}
 8008e22:	b082      	sub	sp, #8
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	6078      	str	r0, [r7, #4]
 8008e28:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008e30:	b2db      	uxtb	r3, r3
 8008e32:	3b01      	subs	r3, #1
 8008e34:	2b02      	cmp	r3, #2
 8008e36:	d81e      	bhi.n	8008e76 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008e38:	683b      	ldr	r3, [r7, #0]
 8008e3a:	88db      	ldrh	r3, [r3, #6]
 8008e3c:	2b02      	cmp	r3, #2
 8008e3e:	d004      	beq.n	8008e4a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008e40:	6839      	ldr	r1, [r7, #0]
 8008e42:	6878      	ldr	r0, [r7, #4]
 8008e44:	f000 f8a5 	bl	8008f92 <USBD_CtlError>
        break;
 8008e48:	e01a      	b.n	8008e80 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	2201      	movs	r2, #1
 8008e4e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d005      	beq.n	8008e66 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	68db      	ldr	r3, [r3, #12]
 8008e5e:	f043 0202 	orr.w	r2, r3, #2
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	330c      	adds	r3, #12
 8008e6a:	2202      	movs	r2, #2
 8008e6c:	4619      	mov	r1, r3
 8008e6e:	6878      	ldr	r0, [r7, #4]
 8008e70:	f000 f900 	bl	8009074 <USBD_CtlSendData>
      break;
 8008e74:	e004      	b.n	8008e80 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008e76:	6839      	ldr	r1, [r7, #0]
 8008e78:	6878      	ldr	r0, [r7, #4]
 8008e7a:	f000 f88a 	bl	8008f92 <USBD_CtlError>
      break;
 8008e7e:	bf00      	nop
  }
}
 8008e80:	bf00      	nop
 8008e82:	3708      	adds	r7, #8
 8008e84:	46bd      	mov	sp, r7
 8008e86:	bd80      	pop	{r7, pc}

08008e88 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e88:	b580      	push	{r7, lr}
 8008e8a:	b082      	sub	sp, #8
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	6078      	str	r0, [r7, #4]
 8008e90:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008e92:	683b      	ldr	r3, [r7, #0]
 8008e94:	885b      	ldrh	r3, [r3, #2]
 8008e96:	2b01      	cmp	r3, #1
 8008e98:	d107      	bne.n	8008eaa <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	2201      	movs	r2, #1
 8008e9e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008ea2:	6878      	ldr	r0, [r7, #4]
 8008ea4:	f000 f940 	bl	8009128 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008ea8:	e013      	b.n	8008ed2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8008eaa:	683b      	ldr	r3, [r7, #0]
 8008eac:	885b      	ldrh	r3, [r3, #2]
 8008eae:	2b02      	cmp	r3, #2
 8008eb0:	d10b      	bne.n	8008eca <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8008eb2:	683b      	ldr	r3, [r7, #0]
 8008eb4:	889b      	ldrh	r3, [r3, #4]
 8008eb6:	0a1b      	lsrs	r3, r3, #8
 8008eb8:	b29b      	uxth	r3, r3
 8008eba:	b2da      	uxtb	r2, r3
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8008ec2:	6878      	ldr	r0, [r7, #4]
 8008ec4:	f000 f930 	bl	8009128 <USBD_CtlSendStatus>
}
 8008ec8:	e003      	b.n	8008ed2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8008eca:	6839      	ldr	r1, [r7, #0]
 8008ecc:	6878      	ldr	r0, [r7, #4]
 8008ece:	f000 f860 	bl	8008f92 <USBD_CtlError>
}
 8008ed2:	bf00      	nop
 8008ed4:	3708      	adds	r7, #8
 8008ed6:	46bd      	mov	sp, r7
 8008ed8:	bd80      	pop	{r7, pc}

08008eda <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008eda:	b580      	push	{r7, lr}
 8008edc:	b082      	sub	sp, #8
 8008ede:	af00      	add	r7, sp, #0
 8008ee0:	6078      	str	r0, [r7, #4]
 8008ee2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008eea:	b2db      	uxtb	r3, r3
 8008eec:	3b01      	subs	r3, #1
 8008eee:	2b02      	cmp	r3, #2
 8008ef0:	d80b      	bhi.n	8008f0a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008ef2:	683b      	ldr	r3, [r7, #0]
 8008ef4:	885b      	ldrh	r3, [r3, #2]
 8008ef6:	2b01      	cmp	r3, #1
 8008ef8:	d10c      	bne.n	8008f14 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	2200      	movs	r2, #0
 8008efe:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008f02:	6878      	ldr	r0, [r7, #4]
 8008f04:	f000 f910 	bl	8009128 <USBD_CtlSendStatus>
      }
      break;
 8008f08:	e004      	b.n	8008f14 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008f0a:	6839      	ldr	r1, [r7, #0]
 8008f0c:	6878      	ldr	r0, [r7, #4]
 8008f0e:	f000 f840 	bl	8008f92 <USBD_CtlError>
      break;
 8008f12:	e000      	b.n	8008f16 <USBD_ClrFeature+0x3c>
      break;
 8008f14:	bf00      	nop
  }
}
 8008f16:	bf00      	nop
 8008f18:	3708      	adds	r7, #8
 8008f1a:	46bd      	mov	sp, r7
 8008f1c:	bd80      	pop	{r7, pc}

08008f1e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008f1e:	b580      	push	{r7, lr}
 8008f20:	b084      	sub	sp, #16
 8008f22:	af00      	add	r7, sp, #0
 8008f24:	6078      	str	r0, [r7, #4]
 8008f26:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008f28:	683b      	ldr	r3, [r7, #0]
 8008f2a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	781a      	ldrb	r2, [r3, #0]
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	3301      	adds	r3, #1
 8008f38:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	781a      	ldrb	r2, [r3, #0]
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	3301      	adds	r3, #1
 8008f46:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008f48:	68f8      	ldr	r0, [r7, #12]
 8008f4a:	f7ff fa40 	bl	80083ce <SWAPBYTE>
 8008f4e:	4603      	mov	r3, r0
 8008f50:	461a      	mov	r2, r3
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	3301      	adds	r3, #1
 8008f5a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	3301      	adds	r3, #1
 8008f60:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008f62:	68f8      	ldr	r0, [r7, #12]
 8008f64:	f7ff fa33 	bl	80083ce <SWAPBYTE>
 8008f68:	4603      	mov	r3, r0
 8008f6a:	461a      	mov	r2, r3
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	3301      	adds	r3, #1
 8008f74:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	3301      	adds	r3, #1
 8008f7a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008f7c:	68f8      	ldr	r0, [r7, #12]
 8008f7e:	f7ff fa26 	bl	80083ce <SWAPBYTE>
 8008f82:	4603      	mov	r3, r0
 8008f84:	461a      	mov	r2, r3
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	80da      	strh	r2, [r3, #6]
}
 8008f8a:	bf00      	nop
 8008f8c:	3710      	adds	r7, #16
 8008f8e:	46bd      	mov	sp, r7
 8008f90:	bd80      	pop	{r7, pc}

08008f92 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f92:	b580      	push	{r7, lr}
 8008f94:	b082      	sub	sp, #8
 8008f96:	af00      	add	r7, sp, #0
 8008f98:	6078      	str	r0, [r7, #4]
 8008f9a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008f9c:	2180      	movs	r1, #128	@ 0x80
 8008f9e:	6878      	ldr	r0, [r7, #4]
 8008fa0:	f000 fd10 	bl	80099c4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008fa4:	2100      	movs	r1, #0
 8008fa6:	6878      	ldr	r0, [r7, #4]
 8008fa8:	f000 fd0c 	bl	80099c4 <USBD_LL_StallEP>
}
 8008fac:	bf00      	nop
 8008fae:	3708      	adds	r7, #8
 8008fb0:	46bd      	mov	sp, r7
 8008fb2:	bd80      	pop	{r7, pc}

08008fb4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008fb4:	b580      	push	{r7, lr}
 8008fb6:	b086      	sub	sp, #24
 8008fb8:	af00      	add	r7, sp, #0
 8008fba:	60f8      	str	r0, [r7, #12]
 8008fbc:	60b9      	str	r1, [r7, #8]
 8008fbe:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008fc0:	2300      	movs	r3, #0
 8008fc2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d036      	beq.n	8009038 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008fce:	6938      	ldr	r0, [r7, #16]
 8008fd0:	f000 f836 	bl	8009040 <USBD_GetLen>
 8008fd4:	4603      	mov	r3, r0
 8008fd6:	3301      	adds	r3, #1
 8008fd8:	b29b      	uxth	r3, r3
 8008fda:	005b      	lsls	r3, r3, #1
 8008fdc:	b29a      	uxth	r2, r3
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008fe2:	7dfb      	ldrb	r3, [r7, #23]
 8008fe4:	68ba      	ldr	r2, [r7, #8]
 8008fe6:	4413      	add	r3, r2
 8008fe8:	687a      	ldr	r2, [r7, #4]
 8008fea:	7812      	ldrb	r2, [r2, #0]
 8008fec:	701a      	strb	r2, [r3, #0]
  idx++;
 8008fee:	7dfb      	ldrb	r3, [r7, #23]
 8008ff0:	3301      	adds	r3, #1
 8008ff2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008ff4:	7dfb      	ldrb	r3, [r7, #23]
 8008ff6:	68ba      	ldr	r2, [r7, #8]
 8008ff8:	4413      	add	r3, r2
 8008ffa:	2203      	movs	r2, #3
 8008ffc:	701a      	strb	r2, [r3, #0]
  idx++;
 8008ffe:	7dfb      	ldrb	r3, [r7, #23]
 8009000:	3301      	adds	r3, #1
 8009002:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009004:	e013      	b.n	800902e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8009006:	7dfb      	ldrb	r3, [r7, #23]
 8009008:	68ba      	ldr	r2, [r7, #8]
 800900a:	4413      	add	r3, r2
 800900c:	693a      	ldr	r2, [r7, #16]
 800900e:	7812      	ldrb	r2, [r2, #0]
 8009010:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009012:	693b      	ldr	r3, [r7, #16]
 8009014:	3301      	adds	r3, #1
 8009016:	613b      	str	r3, [r7, #16]
    idx++;
 8009018:	7dfb      	ldrb	r3, [r7, #23]
 800901a:	3301      	adds	r3, #1
 800901c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800901e:	7dfb      	ldrb	r3, [r7, #23]
 8009020:	68ba      	ldr	r2, [r7, #8]
 8009022:	4413      	add	r3, r2
 8009024:	2200      	movs	r2, #0
 8009026:	701a      	strb	r2, [r3, #0]
    idx++;
 8009028:	7dfb      	ldrb	r3, [r7, #23]
 800902a:	3301      	adds	r3, #1
 800902c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800902e:	693b      	ldr	r3, [r7, #16]
 8009030:	781b      	ldrb	r3, [r3, #0]
 8009032:	2b00      	cmp	r3, #0
 8009034:	d1e7      	bne.n	8009006 <USBD_GetString+0x52>
 8009036:	e000      	b.n	800903a <USBD_GetString+0x86>
    return;
 8009038:	bf00      	nop
  }
}
 800903a:	3718      	adds	r7, #24
 800903c:	46bd      	mov	sp, r7
 800903e:	bd80      	pop	{r7, pc}

08009040 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009040:	b480      	push	{r7}
 8009042:	b085      	sub	sp, #20
 8009044:	af00      	add	r7, sp, #0
 8009046:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009048:	2300      	movs	r3, #0
 800904a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009050:	e005      	b.n	800905e <USBD_GetLen+0x1e>
  {
    len++;
 8009052:	7bfb      	ldrb	r3, [r7, #15]
 8009054:	3301      	adds	r3, #1
 8009056:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009058:	68bb      	ldr	r3, [r7, #8]
 800905a:	3301      	adds	r3, #1
 800905c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800905e:	68bb      	ldr	r3, [r7, #8]
 8009060:	781b      	ldrb	r3, [r3, #0]
 8009062:	2b00      	cmp	r3, #0
 8009064:	d1f5      	bne.n	8009052 <USBD_GetLen+0x12>
  }

  return len;
 8009066:	7bfb      	ldrb	r3, [r7, #15]
}
 8009068:	4618      	mov	r0, r3
 800906a:	3714      	adds	r7, #20
 800906c:	46bd      	mov	sp, r7
 800906e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009072:	4770      	bx	lr

08009074 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009074:	b580      	push	{r7, lr}
 8009076:	b084      	sub	sp, #16
 8009078:	af00      	add	r7, sp, #0
 800907a:	60f8      	str	r0, [r7, #12]
 800907c:	60b9      	str	r1, [r7, #8]
 800907e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	2202      	movs	r2, #2
 8009084:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	687a      	ldr	r2, [r7, #4]
 800908c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	687a      	ldr	r2, [r7, #4]
 8009092:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	68ba      	ldr	r2, [r7, #8]
 8009098:	2100      	movs	r1, #0
 800909a:	68f8      	ldr	r0, [r7, #12]
 800909c:	f000 fd1b 	bl	8009ad6 <USBD_LL_Transmit>

  return USBD_OK;
 80090a0:	2300      	movs	r3, #0
}
 80090a2:	4618      	mov	r0, r3
 80090a4:	3710      	adds	r7, #16
 80090a6:	46bd      	mov	sp, r7
 80090a8:	bd80      	pop	{r7, pc}

080090aa <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80090aa:	b580      	push	{r7, lr}
 80090ac:	b084      	sub	sp, #16
 80090ae:	af00      	add	r7, sp, #0
 80090b0:	60f8      	str	r0, [r7, #12]
 80090b2:	60b9      	str	r1, [r7, #8]
 80090b4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	68ba      	ldr	r2, [r7, #8]
 80090ba:	2100      	movs	r1, #0
 80090bc:	68f8      	ldr	r0, [r7, #12]
 80090be:	f000 fd0a 	bl	8009ad6 <USBD_LL_Transmit>

  return USBD_OK;
 80090c2:	2300      	movs	r3, #0
}
 80090c4:	4618      	mov	r0, r3
 80090c6:	3710      	adds	r7, #16
 80090c8:	46bd      	mov	sp, r7
 80090ca:	bd80      	pop	{r7, pc}

080090cc <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80090cc:	b580      	push	{r7, lr}
 80090ce:	b084      	sub	sp, #16
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	60f8      	str	r0, [r7, #12]
 80090d4:	60b9      	str	r1, [r7, #8]
 80090d6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	2203      	movs	r2, #3
 80090dc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	687a      	ldr	r2, [r7, #4]
 80090e4:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	687a      	ldr	r2, [r7, #4]
 80090ec:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	68ba      	ldr	r2, [r7, #8]
 80090f4:	2100      	movs	r1, #0
 80090f6:	68f8      	ldr	r0, [r7, #12]
 80090f8:	f000 fd0e 	bl	8009b18 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80090fc:	2300      	movs	r3, #0
}
 80090fe:	4618      	mov	r0, r3
 8009100:	3710      	adds	r7, #16
 8009102:	46bd      	mov	sp, r7
 8009104:	bd80      	pop	{r7, pc}

08009106 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009106:	b580      	push	{r7, lr}
 8009108:	b084      	sub	sp, #16
 800910a:	af00      	add	r7, sp, #0
 800910c:	60f8      	str	r0, [r7, #12]
 800910e:	60b9      	str	r1, [r7, #8]
 8009110:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	68ba      	ldr	r2, [r7, #8]
 8009116:	2100      	movs	r1, #0
 8009118:	68f8      	ldr	r0, [r7, #12]
 800911a:	f000 fcfd 	bl	8009b18 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800911e:	2300      	movs	r3, #0
}
 8009120:	4618      	mov	r0, r3
 8009122:	3710      	adds	r7, #16
 8009124:	46bd      	mov	sp, r7
 8009126:	bd80      	pop	{r7, pc}

08009128 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009128:	b580      	push	{r7, lr}
 800912a:	b082      	sub	sp, #8
 800912c:	af00      	add	r7, sp, #0
 800912e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	2204      	movs	r2, #4
 8009134:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009138:	2300      	movs	r3, #0
 800913a:	2200      	movs	r2, #0
 800913c:	2100      	movs	r1, #0
 800913e:	6878      	ldr	r0, [r7, #4]
 8009140:	f000 fcc9 	bl	8009ad6 <USBD_LL_Transmit>

  return USBD_OK;
 8009144:	2300      	movs	r3, #0
}
 8009146:	4618      	mov	r0, r3
 8009148:	3708      	adds	r7, #8
 800914a:	46bd      	mov	sp, r7
 800914c:	bd80      	pop	{r7, pc}

0800914e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800914e:	b580      	push	{r7, lr}
 8009150:	b082      	sub	sp, #8
 8009152:	af00      	add	r7, sp, #0
 8009154:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	2205      	movs	r2, #5
 800915a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800915e:	2300      	movs	r3, #0
 8009160:	2200      	movs	r2, #0
 8009162:	2100      	movs	r1, #0
 8009164:	6878      	ldr	r0, [r7, #4]
 8009166:	f000 fcd7 	bl	8009b18 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800916a:	2300      	movs	r3, #0
}
 800916c:	4618      	mov	r0, r3
 800916e:	3708      	adds	r7, #8
 8009170:	46bd      	mov	sp, r7
 8009172:	bd80      	pop	{r7, pc}

08009174 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009174:	b580      	push	{r7, lr}
 8009176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009178:	2200      	movs	r2, #0
 800917a:	4912      	ldr	r1, [pc, #72]	@ (80091c4 <MX_USB_DEVICE_Init+0x50>)
 800917c:	4812      	ldr	r0, [pc, #72]	@ (80091c8 <MX_USB_DEVICE_Init+0x54>)
 800917e:	f7fe fd03 	bl	8007b88 <USBD_Init>
 8009182:	4603      	mov	r3, r0
 8009184:	2b00      	cmp	r3, #0
 8009186:	d001      	beq.n	800918c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009188:	f7f7 fb8e 	bl	80008a8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800918c:	490f      	ldr	r1, [pc, #60]	@ (80091cc <MX_USB_DEVICE_Init+0x58>)
 800918e:	480e      	ldr	r0, [pc, #56]	@ (80091c8 <MX_USB_DEVICE_Init+0x54>)
 8009190:	f7fe fd2a 	bl	8007be8 <USBD_RegisterClass>
 8009194:	4603      	mov	r3, r0
 8009196:	2b00      	cmp	r3, #0
 8009198:	d001      	beq.n	800919e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800919a:	f7f7 fb85 	bl	80008a8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800919e:	490c      	ldr	r1, [pc, #48]	@ (80091d0 <MX_USB_DEVICE_Init+0x5c>)
 80091a0:	4809      	ldr	r0, [pc, #36]	@ (80091c8 <MX_USB_DEVICE_Init+0x54>)
 80091a2:	f7fe fc21 	bl	80079e8 <USBD_CDC_RegisterInterface>
 80091a6:	4603      	mov	r3, r0
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d001      	beq.n	80091b0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80091ac:	f7f7 fb7c 	bl	80008a8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80091b0:	4805      	ldr	r0, [pc, #20]	@ (80091c8 <MX_USB_DEVICE_Init+0x54>)
 80091b2:	f7fe fd4f 	bl	8007c54 <USBD_Start>
 80091b6:	4603      	mov	r3, r0
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d001      	beq.n	80091c0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80091bc:	f7f7 fb74 	bl	80008a8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80091c0:	bf00      	nop
 80091c2:	bd80      	pop	{r7, pc}
 80091c4:	200000ac 	.word	0x200000ac
 80091c8:	2000bbb0 	.word	0x2000bbb0
 80091cc:	20000018 	.word	0x20000018
 80091d0:	20000098 	.word	0x20000098

080091d4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80091d4:	b580      	push	{r7, lr}
 80091d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80091d8:	2200      	movs	r2, #0
 80091da:	4905      	ldr	r1, [pc, #20]	@ (80091f0 <CDC_Init_FS+0x1c>)
 80091dc:	4805      	ldr	r0, [pc, #20]	@ (80091f4 <CDC_Init_FS+0x20>)
 80091de:	f7fe fc1d 	bl	8007a1c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80091e2:	4905      	ldr	r1, [pc, #20]	@ (80091f8 <CDC_Init_FS+0x24>)
 80091e4:	4803      	ldr	r0, [pc, #12]	@ (80091f4 <CDC_Init_FS+0x20>)
 80091e6:	f7fe fc3b 	bl	8007a60 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80091ea:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80091ec:	4618      	mov	r0, r3
 80091ee:	bd80      	pop	{r7, pc}
 80091f0:	2000c68c 	.word	0x2000c68c
 80091f4:	2000bbb0 	.word	0x2000bbb0
 80091f8:	2000be8c 	.word	0x2000be8c

080091fc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80091fc:	b480      	push	{r7}
 80091fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009200:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009202:	4618      	mov	r0, r3
 8009204:	46bd      	mov	sp, r7
 8009206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800920a:	4770      	bx	lr

0800920c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800920c:	b480      	push	{r7}
 800920e:	b083      	sub	sp, #12
 8009210:	af00      	add	r7, sp, #0
 8009212:	4603      	mov	r3, r0
 8009214:	6039      	str	r1, [r7, #0]
 8009216:	71fb      	strb	r3, [r7, #7]
 8009218:	4613      	mov	r3, r2
 800921a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800921c:	79fb      	ldrb	r3, [r7, #7]
 800921e:	2b23      	cmp	r3, #35	@ 0x23
 8009220:	d84a      	bhi.n	80092b8 <CDC_Control_FS+0xac>
 8009222:	a201      	add	r2, pc, #4	@ (adr r2, 8009228 <CDC_Control_FS+0x1c>)
 8009224:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009228:	080092b9 	.word	0x080092b9
 800922c:	080092b9 	.word	0x080092b9
 8009230:	080092b9 	.word	0x080092b9
 8009234:	080092b9 	.word	0x080092b9
 8009238:	080092b9 	.word	0x080092b9
 800923c:	080092b9 	.word	0x080092b9
 8009240:	080092b9 	.word	0x080092b9
 8009244:	080092b9 	.word	0x080092b9
 8009248:	080092b9 	.word	0x080092b9
 800924c:	080092b9 	.word	0x080092b9
 8009250:	080092b9 	.word	0x080092b9
 8009254:	080092b9 	.word	0x080092b9
 8009258:	080092b9 	.word	0x080092b9
 800925c:	080092b9 	.word	0x080092b9
 8009260:	080092b9 	.word	0x080092b9
 8009264:	080092b9 	.word	0x080092b9
 8009268:	080092b9 	.word	0x080092b9
 800926c:	080092b9 	.word	0x080092b9
 8009270:	080092b9 	.word	0x080092b9
 8009274:	080092b9 	.word	0x080092b9
 8009278:	080092b9 	.word	0x080092b9
 800927c:	080092b9 	.word	0x080092b9
 8009280:	080092b9 	.word	0x080092b9
 8009284:	080092b9 	.word	0x080092b9
 8009288:	080092b9 	.word	0x080092b9
 800928c:	080092b9 	.word	0x080092b9
 8009290:	080092b9 	.word	0x080092b9
 8009294:	080092b9 	.word	0x080092b9
 8009298:	080092b9 	.word	0x080092b9
 800929c:	080092b9 	.word	0x080092b9
 80092a0:	080092b9 	.word	0x080092b9
 80092a4:	080092b9 	.word	0x080092b9
 80092a8:	080092b9 	.word	0x080092b9
 80092ac:	080092b9 	.word	0x080092b9
 80092b0:	080092b9 	.word	0x080092b9
 80092b4:	080092b9 	.word	0x080092b9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80092b8:	bf00      	nop
  }

  return (USBD_OK);
 80092ba:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80092bc:	4618      	mov	r0, r3
 80092be:	370c      	adds	r7, #12
 80092c0:	46bd      	mov	sp, r7
 80092c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c6:	4770      	bx	lr

080092c8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80092c8:	b580      	push	{r7, lr}
 80092ca:	b082      	sub	sp, #8
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	6078      	str	r0, [r7, #4]
 80092d0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USB_CdcRxBuffer_FS_cnt = *Len;
 80092d2:	683b      	ldr	r3, [r7, #0]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	4a0a      	ldr	r2, [pc, #40]	@ (8009300 <CDC_Receive_FS+0x38>)
 80092d8:	6013      	str	r3, [r2, #0]
  strncpy(USB_CdcRxBuffer_FS, Buf, *Len);
 80092da:	683b      	ldr	r3, [r7, #0]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	461a      	mov	r2, r3
 80092e0:	6879      	ldr	r1, [r7, #4]
 80092e2:	4808      	ldr	r0, [pc, #32]	@ (8009304 <CDC_Receive_FS+0x3c>)
 80092e4:	f000 fed4 	bl	800a090 <strncpy>

  // memcpy((uint8_t *) USB_CdcRxBuffer_FS, (uint8_t *) Buf, sizeof(*Len));

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80092e8:	6879      	ldr	r1, [r7, #4]
 80092ea:	4807      	ldr	r0, [pc, #28]	@ (8009308 <CDC_Receive_FS+0x40>)
 80092ec:	f7fe fbb8 	bl	8007a60 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80092f0:	4805      	ldr	r0, [pc, #20]	@ (8009308 <CDC_Receive_FS+0x40>)
 80092f2:	f7fe fc13 	bl	8007b1c <USBD_CDC_ReceivePacket>

  return (USBD_OK);
 80092f6:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80092f8:	4618      	mov	r0, r3
 80092fa:	3708      	adds	r7, #8
 80092fc:	46bd      	mov	sp, r7
 80092fe:	bd80      	pop	{r7, pc}
 8009300:	2000177c 	.word	0x2000177c
 8009304:	2000157c 	.word	0x2000157c
 8009308:	2000bbb0 	.word	0x2000bbb0

0800930c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800930c:	b580      	push	{r7, lr}
 800930e:	b086      	sub	sp, #24
 8009310:	af00      	add	r7, sp, #0
 8009312:	6078      	str	r0, [r7, #4]
 8009314:	460b      	mov	r3, r1
 8009316:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009318:	2300      	movs	r3, #0
 800931a:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 7 */
  uint32_t startTick = HAL_GetTick();
 800931c:	f7f8 fa6c 	bl	80017f8 <HAL_GetTick>
 8009320:	6138      	str	r0, [r7, #16]
  uint32_t TIMEOUT_VALUE = 1U;
 8009322:	2301      	movs	r3, #1
 8009324:	60fb      	str	r3, [r7, #12]

  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009326:	4b10      	ldr	r3, [pc, #64]	@ (8009368 <CDC_Transmit_FS+0x5c>)
 8009328:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800932c:	60bb      	str	r3, [r7, #8]
  #if 1
  if (hcdc == NULL)
 800932e:	68bb      	ldr	r3, [r7, #8]
 8009330:	2b00      	cmp	r3, #0
 8009332:	d101      	bne.n	8009338 <CDC_Transmit_FS+0x2c>
  {
    return USBD_FAIL;
 8009334:	2303      	movs	r3, #3
 8009336:	e012      	b.n	800935e <CDC_Transmit_FS+0x52>
  }

  if (hcdc->TxState != 0)
 8009338:	68bb      	ldr	r3, [r7, #8]
 800933a:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800933e:	2b00      	cmp	r3, #0
 8009340:	d001      	beq.n	8009346 <CDC_Transmit_FS+0x3a>
  {
      return USBD_BUSY;
 8009342:	2301      	movs	r3, #1
 8009344:	e00b      	b.n	800935e <CDC_Transmit_FS+0x52>
  //       return USBD_BUSY;
  //   }
  // }
  #endif
  
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8009346:	887b      	ldrh	r3, [r7, #2]
 8009348:	461a      	mov	r2, r3
 800934a:	6879      	ldr	r1, [r7, #4]
 800934c:	4806      	ldr	r0, [pc, #24]	@ (8009368 <CDC_Transmit_FS+0x5c>)
 800934e:	f7fe fb65 	bl	8007a1c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8009352:	4805      	ldr	r0, [pc, #20]	@ (8009368 <CDC_Transmit_FS+0x5c>)
 8009354:	f7fe fba2 	bl	8007a9c <USBD_CDC_TransmitPacket>
 8009358:	4603      	mov	r3, r0
 800935a:	75fb      	strb	r3, [r7, #23]
  /* USER CODE END 7 */
  return result;
 800935c:	7dfb      	ldrb	r3, [r7, #23]
}
 800935e:	4618      	mov	r0, r3
 8009360:	3718      	adds	r7, #24
 8009362:	46bd      	mov	sp, r7
 8009364:	bd80      	pop	{r7, pc}
 8009366:	bf00      	nop
 8009368:	2000bbb0 	.word	0x2000bbb0

0800936c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800936c:	b480      	push	{r7}
 800936e:	b087      	sub	sp, #28
 8009370:	af00      	add	r7, sp, #0
 8009372:	60f8      	str	r0, [r7, #12]
 8009374:	60b9      	str	r1, [r7, #8]
 8009376:	4613      	mov	r3, r2
 8009378:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800937a:	2300      	movs	r3, #0
 800937c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800937e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009382:	4618      	mov	r0, r3
 8009384:	371c      	adds	r7, #28
 8009386:	46bd      	mov	sp, r7
 8009388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800938c:	4770      	bx	lr
	...

08009390 <CDC_Transmit_Is_Busy>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
uint8_t CDC_Transmit_Is_Busy(void){
 8009390:	b480      	push	{r7}
 8009392:	b083      	sub	sp, #12
 8009394:	af00      	add	r7, sp, #0
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009396:	4b09      	ldr	r3, [pc, #36]	@ (80093bc <CDC_Transmit_Is_Busy+0x2c>)
 8009398:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800939c:	607b      	str	r3, [r7, #4]
  if (hcdc->TxState != 0)
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d001      	beq.n	80093ac <CDC_Transmit_Is_Busy+0x1c>
    return USBD_BUSY;
 80093a8:	2301      	movs	r3, #1
 80093aa:	e000      	b.n	80093ae <CDC_Transmit_Is_Busy+0x1e>
  else
    return USBD_OK;
 80093ac:	2300      	movs	r3, #0
}
 80093ae:	4618      	mov	r0, r3
 80093b0:	370c      	adds	r7, #12
 80093b2:	46bd      	mov	sp, r7
 80093b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b8:	4770      	bx	lr
 80093ba:	bf00      	nop
 80093bc:	2000bbb0 	.word	0x2000bbb0

080093c0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80093c0:	b480      	push	{r7}
 80093c2:	b083      	sub	sp, #12
 80093c4:	af00      	add	r7, sp, #0
 80093c6:	4603      	mov	r3, r0
 80093c8:	6039      	str	r1, [r7, #0]
 80093ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80093cc:	683b      	ldr	r3, [r7, #0]
 80093ce:	2212      	movs	r2, #18
 80093d0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80093d2:	4b03      	ldr	r3, [pc, #12]	@ (80093e0 <USBD_FS_DeviceDescriptor+0x20>)
}
 80093d4:	4618      	mov	r0, r3
 80093d6:	370c      	adds	r7, #12
 80093d8:	46bd      	mov	sp, r7
 80093da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093de:	4770      	bx	lr
 80093e0:	200000c8 	.word	0x200000c8

080093e4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80093e4:	b480      	push	{r7}
 80093e6:	b083      	sub	sp, #12
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	4603      	mov	r3, r0
 80093ec:	6039      	str	r1, [r7, #0]
 80093ee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80093f0:	683b      	ldr	r3, [r7, #0]
 80093f2:	2204      	movs	r2, #4
 80093f4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80093f6:	4b03      	ldr	r3, [pc, #12]	@ (8009404 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80093f8:	4618      	mov	r0, r3
 80093fa:	370c      	adds	r7, #12
 80093fc:	46bd      	mov	sp, r7
 80093fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009402:	4770      	bx	lr
 8009404:	200000dc 	.word	0x200000dc

08009408 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009408:	b580      	push	{r7, lr}
 800940a:	b082      	sub	sp, #8
 800940c:	af00      	add	r7, sp, #0
 800940e:	4603      	mov	r3, r0
 8009410:	6039      	str	r1, [r7, #0]
 8009412:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009414:	79fb      	ldrb	r3, [r7, #7]
 8009416:	2b00      	cmp	r3, #0
 8009418:	d105      	bne.n	8009426 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800941a:	683a      	ldr	r2, [r7, #0]
 800941c:	4907      	ldr	r1, [pc, #28]	@ (800943c <USBD_FS_ProductStrDescriptor+0x34>)
 800941e:	4808      	ldr	r0, [pc, #32]	@ (8009440 <USBD_FS_ProductStrDescriptor+0x38>)
 8009420:	f7ff fdc8 	bl	8008fb4 <USBD_GetString>
 8009424:	e004      	b.n	8009430 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009426:	683a      	ldr	r2, [r7, #0]
 8009428:	4904      	ldr	r1, [pc, #16]	@ (800943c <USBD_FS_ProductStrDescriptor+0x34>)
 800942a:	4805      	ldr	r0, [pc, #20]	@ (8009440 <USBD_FS_ProductStrDescriptor+0x38>)
 800942c:	f7ff fdc2 	bl	8008fb4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009430:	4b02      	ldr	r3, [pc, #8]	@ (800943c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009432:	4618      	mov	r0, r3
 8009434:	3708      	adds	r7, #8
 8009436:	46bd      	mov	sp, r7
 8009438:	bd80      	pop	{r7, pc}
 800943a:	bf00      	nop
 800943c:	2000ce8c 	.word	0x2000ce8c
 8009440:	0800afcc 	.word	0x0800afcc

08009444 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009444:	b580      	push	{r7, lr}
 8009446:	b082      	sub	sp, #8
 8009448:	af00      	add	r7, sp, #0
 800944a:	4603      	mov	r3, r0
 800944c:	6039      	str	r1, [r7, #0]
 800944e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009450:	683a      	ldr	r2, [r7, #0]
 8009452:	4904      	ldr	r1, [pc, #16]	@ (8009464 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009454:	4804      	ldr	r0, [pc, #16]	@ (8009468 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009456:	f7ff fdad 	bl	8008fb4 <USBD_GetString>
  return USBD_StrDesc;
 800945a:	4b02      	ldr	r3, [pc, #8]	@ (8009464 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800945c:	4618      	mov	r0, r3
 800945e:	3708      	adds	r7, #8
 8009460:	46bd      	mov	sp, r7
 8009462:	bd80      	pop	{r7, pc}
 8009464:	2000ce8c 	.word	0x2000ce8c
 8009468:	0800afe4 	.word	0x0800afe4

0800946c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800946c:	b580      	push	{r7, lr}
 800946e:	b082      	sub	sp, #8
 8009470:	af00      	add	r7, sp, #0
 8009472:	4603      	mov	r3, r0
 8009474:	6039      	str	r1, [r7, #0]
 8009476:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009478:	683b      	ldr	r3, [r7, #0]
 800947a:	221a      	movs	r2, #26
 800947c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800947e:	f000 f843 	bl	8009508 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009482:	4b02      	ldr	r3, [pc, #8]	@ (800948c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009484:	4618      	mov	r0, r3
 8009486:	3708      	adds	r7, #8
 8009488:	46bd      	mov	sp, r7
 800948a:	bd80      	pop	{r7, pc}
 800948c:	200000e0 	.word	0x200000e0

08009490 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009490:	b580      	push	{r7, lr}
 8009492:	b082      	sub	sp, #8
 8009494:	af00      	add	r7, sp, #0
 8009496:	4603      	mov	r3, r0
 8009498:	6039      	str	r1, [r7, #0]
 800949a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800949c:	79fb      	ldrb	r3, [r7, #7]
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d105      	bne.n	80094ae <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80094a2:	683a      	ldr	r2, [r7, #0]
 80094a4:	4907      	ldr	r1, [pc, #28]	@ (80094c4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80094a6:	4808      	ldr	r0, [pc, #32]	@ (80094c8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80094a8:	f7ff fd84 	bl	8008fb4 <USBD_GetString>
 80094ac:	e004      	b.n	80094b8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80094ae:	683a      	ldr	r2, [r7, #0]
 80094b0:	4904      	ldr	r1, [pc, #16]	@ (80094c4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80094b2:	4805      	ldr	r0, [pc, #20]	@ (80094c8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80094b4:	f7ff fd7e 	bl	8008fb4 <USBD_GetString>
  }
  return USBD_StrDesc;
 80094b8:	4b02      	ldr	r3, [pc, #8]	@ (80094c4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80094ba:	4618      	mov	r0, r3
 80094bc:	3708      	adds	r7, #8
 80094be:	46bd      	mov	sp, r7
 80094c0:	bd80      	pop	{r7, pc}
 80094c2:	bf00      	nop
 80094c4:	2000ce8c 	.word	0x2000ce8c
 80094c8:	0800aff8 	.word	0x0800aff8

080094cc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80094cc:	b580      	push	{r7, lr}
 80094ce:	b082      	sub	sp, #8
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	4603      	mov	r3, r0
 80094d4:	6039      	str	r1, [r7, #0]
 80094d6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80094d8:	79fb      	ldrb	r3, [r7, #7]
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d105      	bne.n	80094ea <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80094de:	683a      	ldr	r2, [r7, #0]
 80094e0:	4907      	ldr	r1, [pc, #28]	@ (8009500 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80094e2:	4808      	ldr	r0, [pc, #32]	@ (8009504 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80094e4:	f7ff fd66 	bl	8008fb4 <USBD_GetString>
 80094e8:	e004      	b.n	80094f4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80094ea:	683a      	ldr	r2, [r7, #0]
 80094ec:	4904      	ldr	r1, [pc, #16]	@ (8009500 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80094ee:	4805      	ldr	r0, [pc, #20]	@ (8009504 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80094f0:	f7ff fd60 	bl	8008fb4 <USBD_GetString>
  }
  return USBD_StrDesc;
 80094f4:	4b02      	ldr	r3, [pc, #8]	@ (8009500 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80094f6:	4618      	mov	r0, r3
 80094f8:	3708      	adds	r7, #8
 80094fa:	46bd      	mov	sp, r7
 80094fc:	bd80      	pop	{r7, pc}
 80094fe:	bf00      	nop
 8009500:	2000ce8c 	.word	0x2000ce8c
 8009504:	0800b004 	.word	0x0800b004

08009508 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009508:	b580      	push	{r7, lr}
 800950a:	b084      	sub	sp, #16
 800950c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800950e:	4b0f      	ldr	r3, [pc, #60]	@ (800954c <Get_SerialNum+0x44>)
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009514:	4b0e      	ldr	r3, [pc, #56]	@ (8009550 <Get_SerialNum+0x48>)
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800951a:	4b0e      	ldr	r3, [pc, #56]	@ (8009554 <Get_SerialNum+0x4c>)
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009520:	68fa      	ldr	r2, [r7, #12]
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	4413      	add	r3, r2
 8009526:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	2b00      	cmp	r3, #0
 800952c:	d009      	beq.n	8009542 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800952e:	2208      	movs	r2, #8
 8009530:	4909      	ldr	r1, [pc, #36]	@ (8009558 <Get_SerialNum+0x50>)
 8009532:	68f8      	ldr	r0, [r7, #12]
 8009534:	f000 f814 	bl	8009560 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009538:	2204      	movs	r2, #4
 800953a:	4908      	ldr	r1, [pc, #32]	@ (800955c <Get_SerialNum+0x54>)
 800953c:	68b8      	ldr	r0, [r7, #8]
 800953e:	f000 f80f 	bl	8009560 <IntToUnicode>
  }
}
 8009542:	bf00      	nop
 8009544:	3710      	adds	r7, #16
 8009546:	46bd      	mov	sp, r7
 8009548:	bd80      	pop	{r7, pc}
 800954a:	bf00      	nop
 800954c:	1fff7a10 	.word	0x1fff7a10
 8009550:	1fff7a14 	.word	0x1fff7a14
 8009554:	1fff7a18 	.word	0x1fff7a18
 8009558:	200000e2 	.word	0x200000e2
 800955c:	200000f2 	.word	0x200000f2

08009560 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009560:	b480      	push	{r7}
 8009562:	b087      	sub	sp, #28
 8009564:	af00      	add	r7, sp, #0
 8009566:	60f8      	str	r0, [r7, #12]
 8009568:	60b9      	str	r1, [r7, #8]
 800956a:	4613      	mov	r3, r2
 800956c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800956e:	2300      	movs	r3, #0
 8009570:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009572:	2300      	movs	r3, #0
 8009574:	75fb      	strb	r3, [r7, #23]
 8009576:	e027      	b.n	80095c8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	0f1b      	lsrs	r3, r3, #28
 800957c:	2b09      	cmp	r3, #9
 800957e:	d80b      	bhi.n	8009598 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	0f1b      	lsrs	r3, r3, #28
 8009584:	b2da      	uxtb	r2, r3
 8009586:	7dfb      	ldrb	r3, [r7, #23]
 8009588:	005b      	lsls	r3, r3, #1
 800958a:	4619      	mov	r1, r3
 800958c:	68bb      	ldr	r3, [r7, #8]
 800958e:	440b      	add	r3, r1
 8009590:	3230      	adds	r2, #48	@ 0x30
 8009592:	b2d2      	uxtb	r2, r2
 8009594:	701a      	strb	r2, [r3, #0]
 8009596:	e00a      	b.n	80095ae <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	0f1b      	lsrs	r3, r3, #28
 800959c:	b2da      	uxtb	r2, r3
 800959e:	7dfb      	ldrb	r3, [r7, #23]
 80095a0:	005b      	lsls	r3, r3, #1
 80095a2:	4619      	mov	r1, r3
 80095a4:	68bb      	ldr	r3, [r7, #8]
 80095a6:	440b      	add	r3, r1
 80095a8:	3237      	adds	r2, #55	@ 0x37
 80095aa:	b2d2      	uxtb	r2, r2
 80095ac:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	011b      	lsls	r3, r3, #4
 80095b2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80095b4:	7dfb      	ldrb	r3, [r7, #23]
 80095b6:	005b      	lsls	r3, r3, #1
 80095b8:	3301      	adds	r3, #1
 80095ba:	68ba      	ldr	r2, [r7, #8]
 80095bc:	4413      	add	r3, r2
 80095be:	2200      	movs	r2, #0
 80095c0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80095c2:	7dfb      	ldrb	r3, [r7, #23]
 80095c4:	3301      	adds	r3, #1
 80095c6:	75fb      	strb	r3, [r7, #23]
 80095c8:	7dfa      	ldrb	r2, [r7, #23]
 80095ca:	79fb      	ldrb	r3, [r7, #7]
 80095cc:	429a      	cmp	r2, r3
 80095ce:	d3d3      	bcc.n	8009578 <IntToUnicode+0x18>
  }
}
 80095d0:	bf00      	nop
 80095d2:	bf00      	nop
 80095d4:	371c      	adds	r7, #28
 80095d6:	46bd      	mov	sp, r7
 80095d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095dc:	4770      	bx	lr
	...

080095e0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80095e0:	b580      	push	{r7, lr}
 80095e2:	b08a      	sub	sp, #40	@ 0x28
 80095e4:	af00      	add	r7, sp, #0
 80095e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80095e8:	f107 0314 	add.w	r3, r7, #20
 80095ec:	2200      	movs	r2, #0
 80095ee:	601a      	str	r2, [r3, #0]
 80095f0:	605a      	str	r2, [r3, #4]
 80095f2:	609a      	str	r2, [r3, #8]
 80095f4:	60da      	str	r2, [r3, #12]
 80095f6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009600:	d13a      	bne.n	8009678 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009602:	2300      	movs	r3, #0
 8009604:	613b      	str	r3, [r7, #16]
 8009606:	4b1e      	ldr	r3, [pc, #120]	@ (8009680 <HAL_PCD_MspInit+0xa0>)
 8009608:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800960a:	4a1d      	ldr	r2, [pc, #116]	@ (8009680 <HAL_PCD_MspInit+0xa0>)
 800960c:	f043 0301 	orr.w	r3, r3, #1
 8009610:	6313      	str	r3, [r2, #48]	@ 0x30
 8009612:	4b1b      	ldr	r3, [pc, #108]	@ (8009680 <HAL_PCD_MspInit+0xa0>)
 8009614:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009616:	f003 0301 	and.w	r3, r3, #1
 800961a:	613b      	str	r3, [r7, #16]
 800961c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA8     ------> USB_OTG_FS_SOF
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 800961e:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8009622:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009624:	2302      	movs	r3, #2
 8009626:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009628:	2300      	movs	r3, #0
 800962a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800962c:	2303      	movs	r3, #3
 800962e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009630:	230a      	movs	r3, #10
 8009632:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009634:	f107 0314 	add.w	r3, r7, #20
 8009638:	4619      	mov	r1, r3
 800963a:	4812      	ldr	r0, [pc, #72]	@ (8009684 <HAL_PCD_MspInit+0xa4>)
 800963c:	f7f8 fb50 	bl	8001ce0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009640:	4b0f      	ldr	r3, [pc, #60]	@ (8009680 <HAL_PCD_MspInit+0xa0>)
 8009642:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009644:	4a0e      	ldr	r2, [pc, #56]	@ (8009680 <HAL_PCD_MspInit+0xa0>)
 8009646:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800964a:	6353      	str	r3, [r2, #52]	@ 0x34
 800964c:	2300      	movs	r3, #0
 800964e:	60fb      	str	r3, [r7, #12]
 8009650:	4b0b      	ldr	r3, [pc, #44]	@ (8009680 <HAL_PCD_MspInit+0xa0>)
 8009652:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009654:	4a0a      	ldr	r2, [pc, #40]	@ (8009680 <HAL_PCD_MspInit+0xa0>)
 8009656:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800965a:	6453      	str	r3, [r2, #68]	@ 0x44
 800965c:	4b08      	ldr	r3, [pc, #32]	@ (8009680 <HAL_PCD_MspInit+0xa0>)
 800965e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009660:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009664:	60fb      	str	r3, [r7, #12]
 8009666:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009668:	2200      	movs	r2, #0
 800966a:	2100      	movs	r1, #0
 800966c:	2043      	movs	r0, #67	@ 0x43
 800966e:	f7f8 f9e4 	bl	8001a3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009672:	2043      	movs	r0, #67	@ 0x43
 8009674:	f7f8 f9fd 	bl	8001a72 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009678:	bf00      	nop
 800967a:	3728      	adds	r7, #40	@ 0x28
 800967c:	46bd      	mov	sp, r7
 800967e:	bd80      	pop	{r7, pc}
 8009680:	40023800 	.word	0x40023800
 8009684:	40020000 	.word	0x40020000

08009688 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009688:	b580      	push	{r7, lr}
 800968a:	b082      	sub	sp, #8
 800968c:	af00      	add	r7, sp, #0
 800968e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800969c:	4619      	mov	r1, r3
 800969e:	4610      	mov	r0, r2
 80096a0:	f7fe fb25 	bl	8007cee <USBD_LL_SetupStage>
}
 80096a4:	bf00      	nop
 80096a6:	3708      	adds	r7, #8
 80096a8:	46bd      	mov	sp, r7
 80096aa:	bd80      	pop	{r7, pc}

080096ac <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80096ac:	b580      	push	{r7, lr}
 80096ae:	b082      	sub	sp, #8
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	6078      	str	r0, [r7, #4]
 80096b4:	460b      	mov	r3, r1
 80096b6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80096be:	78fa      	ldrb	r2, [r7, #3]
 80096c0:	6879      	ldr	r1, [r7, #4]
 80096c2:	4613      	mov	r3, r2
 80096c4:	00db      	lsls	r3, r3, #3
 80096c6:	4413      	add	r3, r2
 80096c8:	009b      	lsls	r3, r3, #2
 80096ca:	440b      	add	r3, r1
 80096cc:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80096d0:	681a      	ldr	r2, [r3, #0]
 80096d2:	78fb      	ldrb	r3, [r7, #3]
 80096d4:	4619      	mov	r1, r3
 80096d6:	f7fe fb5f 	bl	8007d98 <USBD_LL_DataOutStage>
}
 80096da:	bf00      	nop
 80096dc:	3708      	adds	r7, #8
 80096de:	46bd      	mov	sp, r7
 80096e0:	bd80      	pop	{r7, pc}

080096e2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80096e2:	b580      	push	{r7, lr}
 80096e4:	b082      	sub	sp, #8
 80096e6:	af00      	add	r7, sp, #0
 80096e8:	6078      	str	r0, [r7, #4]
 80096ea:	460b      	mov	r3, r1
 80096ec:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80096f4:	78fa      	ldrb	r2, [r7, #3]
 80096f6:	6879      	ldr	r1, [r7, #4]
 80096f8:	4613      	mov	r3, r2
 80096fa:	00db      	lsls	r3, r3, #3
 80096fc:	4413      	add	r3, r2
 80096fe:	009b      	lsls	r3, r3, #2
 8009700:	440b      	add	r3, r1
 8009702:	3320      	adds	r3, #32
 8009704:	681a      	ldr	r2, [r3, #0]
 8009706:	78fb      	ldrb	r3, [r7, #3]
 8009708:	4619      	mov	r1, r3
 800970a:	f7fe fbf8 	bl	8007efe <USBD_LL_DataInStage>
}
 800970e:	bf00      	nop
 8009710:	3708      	adds	r7, #8
 8009712:	46bd      	mov	sp, r7
 8009714:	bd80      	pop	{r7, pc}

08009716 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009716:	b580      	push	{r7, lr}
 8009718:	b082      	sub	sp, #8
 800971a:	af00      	add	r7, sp, #0
 800971c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009724:	4618      	mov	r0, r3
 8009726:	f7fe fd32 	bl	800818e <USBD_LL_SOF>
}
 800972a:	bf00      	nop
 800972c:	3708      	adds	r7, #8
 800972e:	46bd      	mov	sp, r7
 8009730:	bd80      	pop	{r7, pc}

08009732 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009732:	b580      	push	{r7, lr}
 8009734:	b084      	sub	sp, #16
 8009736:	af00      	add	r7, sp, #0
 8009738:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800973a:	2301      	movs	r3, #1
 800973c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	79db      	ldrb	r3, [r3, #7]
 8009742:	2b00      	cmp	r3, #0
 8009744:	d102      	bne.n	800974c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8009746:	2300      	movs	r3, #0
 8009748:	73fb      	strb	r3, [r7, #15]
 800974a:	e008      	b.n	800975e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	79db      	ldrb	r3, [r3, #7]
 8009750:	2b02      	cmp	r3, #2
 8009752:	d102      	bne.n	800975a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8009754:	2301      	movs	r3, #1
 8009756:	73fb      	strb	r3, [r7, #15]
 8009758:	e001      	b.n	800975e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800975a:	f7f7 f8a5 	bl	80008a8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009764:	7bfa      	ldrb	r2, [r7, #15]
 8009766:	4611      	mov	r1, r2
 8009768:	4618      	mov	r0, r3
 800976a:	f7fe fccc 	bl	8008106 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009774:	4618      	mov	r0, r3
 8009776:	f7fe fc74 	bl	8008062 <USBD_LL_Reset>
}
 800977a:	bf00      	nop
 800977c:	3710      	adds	r7, #16
 800977e:	46bd      	mov	sp, r7
 8009780:	bd80      	pop	{r7, pc}
	...

08009784 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009784:	b580      	push	{r7, lr}
 8009786:	b082      	sub	sp, #8
 8009788:	af00      	add	r7, sp, #0
 800978a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009792:	4618      	mov	r0, r3
 8009794:	f7fe fcc7 	bl	8008126 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	687a      	ldr	r2, [r7, #4]
 80097a4:	6812      	ldr	r2, [r2, #0]
 80097a6:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80097aa:	f043 0301 	orr.w	r3, r3, #1
 80097ae:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	7adb      	ldrb	r3, [r3, #11]
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d005      	beq.n	80097c4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80097b8:	4b04      	ldr	r3, [pc, #16]	@ (80097cc <HAL_PCD_SuspendCallback+0x48>)
 80097ba:	691b      	ldr	r3, [r3, #16]
 80097bc:	4a03      	ldr	r2, [pc, #12]	@ (80097cc <HAL_PCD_SuspendCallback+0x48>)
 80097be:	f043 0306 	orr.w	r3, r3, #6
 80097c2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80097c4:	bf00      	nop
 80097c6:	3708      	adds	r7, #8
 80097c8:	46bd      	mov	sp, r7
 80097ca:	bd80      	pop	{r7, pc}
 80097cc:	e000ed00 	.word	0xe000ed00

080097d0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80097d0:	b580      	push	{r7, lr}
 80097d2:	b082      	sub	sp, #8
 80097d4:	af00      	add	r7, sp, #0
 80097d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80097de:	4618      	mov	r0, r3
 80097e0:	f7fe fcbd 	bl	800815e <USBD_LL_Resume>
}
 80097e4:	bf00      	nop
 80097e6:	3708      	adds	r7, #8
 80097e8:	46bd      	mov	sp, r7
 80097ea:	bd80      	pop	{r7, pc}

080097ec <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80097ec:	b580      	push	{r7, lr}
 80097ee:	b082      	sub	sp, #8
 80097f0:	af00      	add	r7, sp, #0
 80097f2:	6078      	str	r0, [r7, #4]
 80097f4:	460b      	mov	r3, r1
 80097f6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80097fe:	78fa      	ldrb	r2, [r7, #3]
 8009800:	4611      	mov	r1, r2
 8009802:	4618      	mov	r0, r3
 8009804:	f7fe fd15 	bl	8008232 <USBD_LL_IsoOUTIncomplete>
}
 8009808:	bf00      	nop
 800980a:	3708      	adds	r7, #8
 800980c:	46bd      	mov	sp, r7
 800980e:	bd80      	pop	{r7, pc}

08009810 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009810:	b580      	push	{r7, lr}
 8009812:	b082      	sub	sp, #8
 8009814:	af00      	add	r7, sp, #0
 8009816:	6078      	str	r0, [r7, #4]
 8009818:	460b      	mov	r3, r1
 800981a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009822:	78fa      	ldrb	r2, [r7, #3]
 8009824:	4611      	mov	r1, r2
 8009826:	4618      	mov	r0, r3
 8009828:	f7fe fcd1 	bl	80081ce <USBD_LL_IsoINIncomplete>
}
 800982c:	bf00      	nop
 800982e:	3708      	adds	r7, #8
 8009830:	46bd      	mov	sp, r7
 8009832:	bd80      	pop	{r7, pc}

08009834 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009834:	b580      	push	{r7, lr}
 8009836:	b082      	sub	sp, #8
 8009838:	af00      	add	r7, sp, #0
 800983a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009842:	4618      	mov	r0, r3
 8009844:	f7fe fd27 	bl	8008296 <USBD_LL_DevConnected>
}
 8009848:	bf00      	nop
 800984a:	3708      	adds	r7, #8
 800984c:	46bd      	mov	sp, r7
 800984e:	bd80      	pop	{r7, pc}

08009850 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009850:	b580      	push	{r7, lr}
 8009852:	b082      	sub	sp, #8
 8009854:	af00      	add	r7, sp, #0
 8009856:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800985e:	4618      	mov	r0, r3
 8009860:	f7fe fd24 	bl	80082ac <USBD_LL_DevDisconnected>
}
 8009864:	bf00      	nop
 8009866:	3708      	adds	r7, #8
 8009868:	46bd      	mov	sp, r7
 800986a:	bd80      	pop	{r7, pc}

0800986c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800986c:	b580      	push	{r7, lr}
 800986e:	b082      	sub	sp, #8
 8009870:	af00      	add	r7, sp, #0
 8009872:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	781b      	ldrb	r3, [r3, #0]
 8009878:	2b00      	cmp	r3, #0
 800987a:	d13c      	bne.n	80098f6 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800987c:	4a20      	ldr	r2, [pc, #128]	@ (8009900 <USBD_LL_Init+0x94>)
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	4a1e      	ldr	r2, [pc, #120]	@ (8009900 <USBD_LL_Init+0x94>)
 8009888:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800988c:	4b1c      	ldr	r3, [pc, #112]	@ (8009900 <USBD_LL_Init+0x94>)
 800988e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8009892:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8009894:	4b1a      	ldr	r3, [pc, #104]	@ (8009900 <USBD_LL_Init+0x94>)
 8009896:	2204      	movs	r2, #4
 8009898:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800989a:	4b19      	ldr	r3, [pc, #100]	@ (8009900 <USBD_LL_Init+0x94>)
 800989c:	2202      	movs	r2, #2
 800989e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80098a0:	4b17      	ldr	r3, [pc, #92]	@ (8009900 <USBD_LL_Init+0x94>)
 80098a2:	2200      	movs	r2, #0
 80098a4:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80098a6:	4b16      	ldr	r3, [pc, #88]	@ (8009900 <USBD_LL_Init+0x94>)
 80098a8:	2202      	movs	r2, #2
 80098aa:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80098ac:	4b14      	ldr	r3, [pc, #80]	@ (8009900 <USBD_LL_Init+0x94>)
 80098ae:	2201      	movs	r2, #1
 80098b0:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80098b2:	4b13      	ldr	r3, [pc, #76]	@ (8009900 <USBD_LL_Init+0x94>)
 80098b4:	2200      	movs	r2, #0
 80098b6:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80098b8:	4b11      	ldr	r3, [pc, #68]	@ (8009900 <USBD_LL_Init+0x94>)
 80098ba:	2200      	movs	r2, #0
 80098bc:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80098be:	4b10      	ldr	r3, [pc, #64]	@ (8009900 <USBD_LL_Init+0x94>)
 80098c0:	2200      	movs	r2, #0
 80098c2:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80098c4:	4b0e      	ldr	r3, [pc, #56]	@ (8009900 <USBD_LL_Init+0x94>)
 80098c6:	2200      	movs	r2, #0
 80098c8:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80098ca:	480d      	ldr	r0, [pc, #52]	@ (8009900 <USBD_LL_Init+0x94>)
 80098cc:	f7f8 fc00 	bl	80020d0 <HAL_PCD_Init>
 80098d0:	4603      	mov	r3, r0
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d001      	beq.n	80098da <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80098d6:	f7f6 ffe7 	bl	80008a8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80098da:	2180      	movs	r1, #128	@ 0x80
 80098dc:	4808      	ldr	r0, [pc, #32]	@ (8009900 <USBD_LL_Init+0x94>)
 80098de:	f7f9 fe2a 	bl	8003536 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80098e2:	2240      	movs	r2, #64	@ 0x40
 80098e4:	2100      	movs	r1, #0
 80098e6:	4806      	ldr	r0, [pc, #24]	@ (8009900 <USBD_LL_Init+0x94>)
 80098e8:	f7f9 fdde 	bl	80034a8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80098ec:	2280      	movs	r2, #128	@ 0x80
 80098ee:	2101      	movs	r1, #1
 80098f0:	4803      	ldr	r0, [pc, #12]	@ (8009900 <USBD_LL_Init+0x94>)
 80098f2:	f7f9 fdd9 	bl	80034a8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80098f6:	2300      	movs	r3, #0
}
 80098f8:	4618      	mov	r0, r3
 80098fa:	3708      	adds	r7, #8
 80098fc:	46bd      	mov	sp, r7
 80098fe:	bd80      	pop	{r7, pc}
 8009900:	2000d08c 	.word	0x2000d08c

08009904 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009904:	b580      	push	{r7, lr}
 8009906:	b084      	sub	sp, #16
 8009908:	af00      	add	r7, sp, #0
 800990a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800990c:	2300      	movs	r3, #0
 800990e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009910:	2300      	movs	r3, #0
 8009912:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800991a:	4618      	mov	r0, r3
 800991c:	f7f8 fce7 	bl	80022ee <HAL_PCD_Start>
 8009920:	4603      	mov	r3, r0
 8009922:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009924:	7bfb      	ldrb	r3, [r7, #15]
 8009926:	4618      	mov	r0, r3
 8009928:	f000 f942 	bl	8009bb0 <USBD_Get_USB_Status>
 800992c:	4603      	mov	r3, r0
 800992e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009930:	7bbb      	ldrb	r3, [r7, #14]
}
 8009932:	4618      	mov	r0, r3
 8009934:	3710      	adds	r7, #16
 8009936:	46bd      	mov	sp, r7
 8009938:	bd80      	pop	{r7, pc}

0800993a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800993a:	b580      	push	{r7, lr}
 800993c:	b084      	sub	sp, #16
 800993e:	af00      	add	r7, sp, #0
 8009940:	6078      	str	r0, [r7, #4]
 8009942:	4608      	mov	r0, r1
 8009944:	4611      	mov	r1, r2
 8009946:	461a      	mov	r2, r3
 8009948:	4603      	mov	r3, r0
 800994a:	70fb      	strb	r3, [r7, #3]
 800994c:	460b      	mov	r3, r1
 800994e:	70bb      	strb	r3, [r7, #2]
 8009950:	4613      	mov	r3, r2
 8009952:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009954:	2300      	movs	r3, #0
 8009956:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009958:	2300      	movs	r3, #0
 800995a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8009962:	78bb      	ldrb	r3, [r7, #2]
 8009964:	883a      	ldrh	r2, [r7, #0]
 8009966:	78f9      	ldrb	r1, [r7, #3]
 8009968:	f7f9 f9bb 	bl	8002ce2 <HAL_PCD_EP_Open>
 800996c:	4603      	mov	r3, r0
 800996e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009970:	7bfb      	ldrb	r3, [r7, #15]
 8009972:	4618      	mov	r0, r3
 8009974:	f000 f91c 	bl	8009bb0 <USBD_Get_USB_Status>
 8009978:	4603      	mov	r3, r0
 800997a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800997c:	7bbb      	ldrb	r3, [r7, #14]
}
 800997e:	4618      	mov	r0, r3
 8009980:	3710      	adds	r7, #16
 8009982:	46bd      	mov	sp, r7
 8009984:	bd80      	pop	{r7, pc}

08009986 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009986:	b580      	push	{r7, lr}
 8009988:	b084      	sub	sp, #16
 800998a:	af00      	add	r7, sp, #0
 800998c:	6078      	str	r0, [r7, #4]
 800998e:	460b      	mov	r3, r1
 8009990:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009992:	2300      	movs	r3, #0
 8009994:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009996:	2300      	movs	r3, #0
 8009998:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80099a0:	78fa      	ldrb	r2, [r7, #3]
 80099a2:	4611      	mov	r1, r2
 80099a4:	4618      	mov	r0, r3
 80099a6:	f7f9 fa04 	bl	8002db2 <HAL_PCD_EP_Close>
 80099aa:	4603      	mov	r3, r0
 80099ac:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80099ae:	7bfb      	ldrb	r3, [r7, #15]
 80099b0:	4618      	mov	r0, r3
 80099b2:	f000 f8fd 	bl	8009bb0 <USBD_Get_USB_Status>
 80099b6:	4603      	mov	r3, r0
 80099b8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80099ba:	7bbb      	ldrb	r3, [r7, #14]
}
 80099bc:	4618      	mov	r0, r3
 80099be:	3710      	adds	r7, #16
 80099c0:	46bd      	mov	sp, r7
 80099c2:	bd80      	pop	{r7, pc}

080099c4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80099c4:	b580      	push	{r7, lr}
 80099c6:	b084      	sub	sp, #16
 80099c8:	af00      	add	r7, sp, #0
 80099ca:	6078      	str	r0, [r7, #4]
 80099cc:	460b      	mov	r3, r1
 80099ce:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80099d0:	2300      	movs	r3, #0
 80099d2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80099d4:	2300      	movs	r3, #0
 80099d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80099de:	78fa      	ldrb	r2, [r7, #3]
 80099e0:	4611      	mov	r1, r2
 80099e2:	4618      	mov	r0, r3
 80099e4:	f7f9 fabc 	bl	8002f60 <HAL_PCD_EP_SetStall>
 80099e8:	4603      	mov	r3, r0
 80099ea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80099ec:	7bfb      	ldrb	r3, [r7, #15]
 80099ee:	4618      	mov	r0, r3
 80099f0:	f000 f8de 	bl	8009bb0 <USBD_Get_USB_Status>
 80099f4:	4603      	mov	r3, r0
 80099f6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80099f8:	7bbb      	ldrb	r3, [r7, #14]
}
 80099fa:	4618      	mov	r0, r3
 80099fc:	3710      	adds	r7, #16
 80099fe:	46bd      	mov	sp, r7
 8009a00:	bd80      	pop	{r7, pc}

08009a02 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009a02:	b580      	push	{r7, lr}
 8009a04:	b084      	sub	sp, #16
 8009a06:	af00      	add	r7, sp, #0
 8009a08:	6078      	str	r0, [r7, #4]
 8009a0a:	460b      	mov	r3, r1
 8009a0c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a0e:	2300      	movs	r3, #0
 8009a10:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a12:	2300      	movs	r3, #0
 8009a14:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009a1c:	78fa      	ldrb	r2, [r7, #3]
 8009a1e:	4611      	mov	r1, r2
 8009a20:	4618      	mov	r0, r3
 8009a22:	f7f9 fb00 	bl	8003026 <HAL_PCD_EP_ClrStall>
 8009a26:	4603      	mov	r3, r0
 8009a28:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009a2a:	7bfb      	ldrb	r3, [r7, #15]
 8009a2c:	4618      	mov	r0, r3
 8009a2e:	f000 f8bf 	bl	8009bb0 <USBD_Get_USB_Status>
 8009a32:	4603      	mov	r3, r0
 8009a34:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009a36:	7bbb      	ldrb	r3, [r7, #14]
}
 8009a38:	4618      	mov	r0, r3
 8009a3a:	3710      	adds	r7, #16
 8009a3c:	46bd      	mov	sp, r7
 8009a3e:	bd80      	pop	{r7, pc}

08009a40 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009a40:	b480      	push	{r7}
 8009a42:	b085      	sub	sp, #20
 8009a44:	af00      	add	r7, sp, #0
 8009a46:	6078      	str	r0, [r7, #4]
 8009a48:	460b      	mov	r3, r1
 8009a4a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009a52:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009a54:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	da0b      	bge.n	8009a74 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009a5c:	78fb      	ldrb	r3, [r7, #3]
 8009a5e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009a62:	68f9      	ldr	r1, [r7, #12]
 8009a64:	4613      	mov	r3, r2
 8009a66:	00db      	lsls	r3, r3, #3
 8009a68:	4413      	add	r3, r2
 8009a6a:	009b      	lsls	r3, r3, #2
 8009a6c:	440b      	add	r3, r1
 8009a6e:	3316      	adds	r3, #22
 8009a70:	781b      	ldrb	r3, [r3, #0]
 8009a72:	e00b      	b.n	8009a8c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009a74:	78fb      	ldrb	r3, [r7, #3]
 8009a76:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009a7a:	68f9      	ldr	r1, [r7, #12]
 8009a7c:	4613      	mov	r3, r2
 8009a7e:	00db      	lsls	r3, r3, #3
 8009a80:	4413      	add	r3, r2
 8009a82:	009b      	lsls	r3, r3, #2
 8009a84:	440b      	add	r3, r1
 8009a86:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8009a8a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009a8c:	4618      	mov	r0, r3
 8009a8e:	3714      	adds	r7, #20
 8009a90:	46bd      	mov	sp, r7
 8009a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a96:	4770      	bx	lr

08009a98 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009a98:	b580      	push	{r7, lr}
 8009a9a:	b084      	sub	sp, #16
 8009a9c:	af00      	add	r7, sp, #0
 8009a9e:	6078      	str	r0, [r7, #4]
 8009aa0:	460b      	mov	r3, r1
 8009aa2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009aa4:	2300      	movs	r3, #0
 8009aa6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009aa8:	2300      	movs	r3, #0
 8009aaa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009ab2:	78fa      	ldrb	r2, [r7, #3]
 8009ab4:	4611      	mov	r1, r2
 8009ab6:	4618      	mov	r0, r3
 8009ab8:	f7f9 f8ef 	bl	8002c9a <HAL_PCD_SetAddress>
 8009abc:	4603      	mov	r3, r0
 8009abe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009ac0:	7bfb      	ldrb	r3, [r7, #15]
 8009ac2:	4618      	mov	r0, r3
 8009ac4:	f000 f874 	bl	8009bb0 <USBD_Get_USB_Status>
 8009ac8:	4603      	mov	r3, r0
 8009aca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009acc:	7bbb      	ldrb	r3, [r7, #14]
}
 8009ace:	4618      	mov	r0, r3
 8009ad0:	3710      	adds	r7, #16
 8009ad2:	46bd      	mov	sp, r7
 8009ad4:	bd80      	pop	{r7, pc}

08009ad6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009ad6:	b580      	push	{r7, lr}
 8009ad8:	b086      	sub	sp, #24
 8009ada:	af00      	add	r7, sp, #0
 8009adc:	60f8      	str	r0, [r7, #12]
 8009ade:	607a      	str	r2, [r7, #4]
 8009ae0:	603b      	str	r3, [r7, #0]
 8009ae2:	460b      	mov	r3, r1
 8009ae4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ae6:	2300      	movs	r3, #0
 8009ae8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009aea:	2300      	movs	r3, #0
 8009aec:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8009af4:	7af9      	ldrb	r1, [r7, #11]
 8009af6:	683b      	ldr	r3, [r7, #0]
 8009af8:	687a      	ldr	r2, [r7, #4]
 8009afa:	f7f9 f9f7 	bl	8002eec <HAL_PCD_EP_Transmit>
 8009afe:	4603      	mov	r3, r0
 8009b00:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009b02:	7dfb      	ldrb	r3, [r7, #23]
 8009b04:	4618      	mov	r0, r3
 8009b06:	f000 f853 	bl	8009bb0 <USBD_Get_USB_Status>
 8009b0a:	4603      	mov	r3, r0
 8009b0c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009b0e:	7dbb      	ldrb	r3, [r7, #22]
}
 8009b10:	4618      	mov	r0, r3
 8009b12:	3718      	adds	r7, #24
 8009b14:	46bd      	mov	sp, r7
 8009b16:	bd80      	pop	{r7, pc}

08009b18 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009b18:	b580      	push	{r7, lr}
 8009b1a:	b086      	sub	sp, #24
 8009b1c:	af00      	add	r7, sp, #0
 8009b1e:	60f8      	str	r0, [r7, #12]
 8009b20:	607a      	str	r2, [r7, #4]
 8009b22:	603b      	str	r3, [r7, #0]
 8009b24:	460b      	mov	r3, r1
 8009b26:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b28:	2300      	movs	r3, #0
 8009b2a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b2c:	2300      	movs	r3, #0
 8009b2e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8009b36:	7af9      	ldrb	r1, [r7, #11]
 8009b38:	683b      	ldr	r3, [r7, #0]
 8009b3a:	687a      	ldr	r2, [r7, #4]
 8009b3c:	f7f9 f983 	bl	8002e46 <HAL_PCD_EP_Receive>
 8009b40:	4603      	mov	r3, r0
 8009b42:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009b44:	7dfb      	ldrb	r3, [r7, #23]
 8009b46:	4618      	mov	r0, r3
 8009b48:	f000 f832 	bl	8009bb0 <USBD_Get_USB_Status>
 8009b4c:	4603      	mov	r3, r0
 8009b4e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009b50:	7dbb      	ldrb	r3, [r7, #22]
}
 8009b52:	4618      	mov	r0, r3
 8009b54:	3718      	adds	r7, #24
 8009b56:	46bd      	mov	sp, r7
 8009b58:	bd80      	pop	{r7, pc}

08009b5a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009b5a:	b580      	push	{r7, lr}
 8009b5c:	b082      	sub	sp, #8
 8009b5e:	af00      	add	r7, sp, #0
 8009b60:	6078      	str	r0, [r7, #4]
 8009b62:	460b      	mov	r3, r1
 8009b64:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009b6c:	78fa      	ldrb	r2, [r7, #3]
 8009b6e:	4611      	mov	r1, r2
 8009b70:	4618      	mov	r0, r3
 8009b72:	f7f9 f9a3 	bl	8002ebc <HAL_PCD_EP_GetRxCount>
 8009b76:	4603      	mov	r3, r0
}
 8009b78:	4618      	mov	r0, r3
 8009b7a:	3708      	adds	r7, #8
 8009b7c:	46bd      	mov	sp, r7
 8009b7e:	bd80      	pop	{r7, pc}

08009b80 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009b80:	b480      	push	{r7}
 8009b82:	b083      	sub	sp, #12
 8009b84:	af00      	add	r7, sp, #0
 8009b86:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009b88:	4b03      	ldr	r3, [pc, #12]	@ (8009b98 <USBD_static_malloc+0x18>)
}
 8009b8a:	4618      	mov	r0, r3
 8009b8c:	370c      	adds	r7, #12
 8009b8e:	46bd      	mov	sp, r7
 8009b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b94:	4770      	bx	lr
 8009b96:	bf00      	nop
 8009b98:	2000d570 	.word	0x2000d570

08009b9c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009b9c:	b480      	push	{r7}
 8009b9e:	b083      	sub	sp, #12
 8009ba0:	af00      	add	r7, sp, #0
 8009ba2:	6078      	str	r0, [r7, #4]

}
 8009ba4:	bf00      	nop
 8009ba6:	370c      	adds	r7, #12
 8009ba8:	46bd      	mov	sp, r7
 8009baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bae:	4770      	bx	lr

08009bb0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009bb0:	b480      	push	{r7}
 8009bb2:	b085      	sub	sp, #20
 8009bb4:	af00      	add	r7, sp, #0
 8009bb6:	4603      	mov	r3, r0
 8009bb8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009bba:	2300      	movs	r3, #0
 8009bbc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009bbe:	79fb      	ldrb	r3, [r7, #7]
 8009bc0:	2b03      	cmp	r3, #3
 8009bc2:	d817      	bhi.n	8009bf4 <USBD_Get_USB_Status+0x44>
 8009bc4:	a201      	add	r2, pc, #4	@ (adr r2, 8009bcc <USBD_Get_USB_Status+0x1c>)
 8009bc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bca:	bf00      	nop
 8009bcc:	08009bdd 	.word	0x08009bdd
 8009bd0:	08009be3 	.word	0x08009be3
 8009bd4:	08009be9 	.word	0x08009be9
 8009bd8:	08009bef 	.word	0x08009bef
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009bdc:	2300      	movs	r3, #0
 8009bde:	73fb      	strb	r3, [r7, #15]
    break;
 8009be0:	e00b      	b.n	8009bfa <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009be2:	2303      	movs	r3, #3
 8009be4:	73fb      	strb	r3, [r7, #15]
    break;
 8009be6:	e008      	b.n	8009bfa <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009be8:	2301      	movs	r3, #1
 8009bea:	73fb      	strb	r3, [r7, #15]
    break;
 8009bec:	e005      	b.n	8009bfa <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009bee:	2303      	movs	r3, #3
 8009bf0:	73fb      	strb	r3, [r7, #15]
    break;
 8009bf2:	e002      	b.n	8009bfa <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009bf4:	2303      	movs	r3, #3
 8009bf6:	73fb      	strb	r3, [r7, #15]
    break;
 8009bf8:	bf00      	nop
  }
  return usb_status;
 8009bfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bfc:	4618      	mov	r0, r3
 8009bfe:	3714      	adds	r7, #20
 8009c00:	46bd      	mov	sp, r7
 8009c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c06:	4770      	bx	lr

08009c08 <std>:
 8009c08:	2300      	movs	r3, #0
 8009c0a:	b510      	push	{r4, lr}
 8009c0c:	4604      	mov	r4, r0
 8009c0e:	e9c0 3300 	strd	r3, r3, [r0]
 8009c12:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009c16:	6083      	str	r3, [r0, #8]
 8009c18:	8181      	strh	r1, [r0, #12]
 8009c1a:	6643      	str	r3, [r0, #100]	@ 0x64
 8009c1c:	81c2      	strh	r2, [r0, #14]
 8009c1e:	6183      	str	r3, [r0, #24]
 8009c20:	4619      	mov	r1, r3
 8009c22:	2208      	movs	r2, #8
 8009c24:	305c      	adds	r0, #92	@ 0x5c
 8009c26:	f000 fa19 	bl	800a05c <memset>
 8009c2a:	4b0d      	ldr	r3, [pc, #52]	@ (8009c60 <std+0x58>)
 8009c2c:	6263      	str	r3, [r4, #36]	@ 0x24
 8009c2e:	4b0d      	ldr	r3, [pc, #52]	@ (8009c64 <std+0x5c>)
 8009c30:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009c32:	4b0d      	ldr	r3, [pc, #52]	@ (8009c68 <std+0x60>)
 8009c34:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009c36:	4b0d      	ldr	r3, [pc, #52]	@ (8009c6c <std+0x64>)
 8009c38:	6323      	str	r3, [r4, #48]	@ 0x30
 8009c3a:	4b0d      	ldr	r3, [pc, #52]	@ (8009c70 <std+0x68>)
 8009c3c:	6224      	str	r4, [r4, #32]
 8009c3e:	429c      	cmp	r4, r3
 8009c40:	d006      	beq.n	8009c50 <std+0x48>
 8009c42:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009c46:	4294      	cmp	r4, r2
 8009c48:	d002      	beq.n	8009c50 <std+0x48>
 8009c4a:	33d0      	adds	r3, #208	@ 0xd0
 8009c4c:	429c      	cmp	r4, r3
 8009c4e:	d105      	bne.n	8009c5c <std+0x54>
 8009c50:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009c54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009c58:	f000 ba9e 	b.w	800a198 <__retarget_lock_init_recursive>
 8009c5c:	bd10      	pop	{r4, pc}
 8009c5e:	bf00      	nop
 8009c60:	08009ead 	.word	0x08009ead
 8009c64:	08009ecf 	.word	0x08009ecf
 8009c68:	08009f07 	.word	0x08009f07
 8009c6c:	08009f2b 	.word	0x08009f2b
 8009c70:	2000d790 	.word	0x2000d790

08009c74 <stdio_exit_handler>:
 8009c74:	4a02      	ldr	r2, [pc, #8]	@ (8009c80 <stdio_exit_handler+0xc>)
 8009c76:	4903      	ldr	r1, [pc, #12]	@ (8009c84 <stdio_exit_handler+0x10>)
 8009c78:	4803      	ldr	r0, [pc, #12]	@ (8009c88 <stdio_exit_handler+0x14>)
 8009c7a:	f000 b869 	b.w	8009d50 <_fwalk_sglue>
 8009c7e:	bf00      	nop
 8009c80:	200000fc 	.word	0x200000fc
 8009c84:	0800ad05 	.word	0x0800ad05
 8009c88:	2000010c 	.word	0x2000010c

08009c8c <cleanup_stdio>:
 8009c8c:	6841      	ldr	r1, [r0, #4]
 8009c8e:	4b0c      	ldr	r3, [pc, #48]	@ (8009cc0 <cleanup_stdio+0x34>)
 8009c90:	4299      	cmp	r1, r3
 8009c92:	b510      	push	{r4, lr}
 8009c94:	4604      	mov	r4, r0
 8009c96:	d001      	beq.n	8009c9c <cleanup_stdio+0x10>
 8009c98:	f001 f834 	bl	800ad04 <_fflush_r>
 8009c9c:	68a1      	ldr	r1, [r4, #8]
 8009c9e:	4b09      	ldr	r3, [pc, #36]	@ (8009cc4 <cleanup_stdio+0x38>)
 8009ca0:	4299      	cmp	r1, r3
 8009ca2:	d002      	beq.n	8009caa <cleanup_stdio+0x1e>
 8009ca4:	4620      	mov	r0, r4
 8009ca6:	f001 f82d 	bl	800ad04 <_fflush_r>
 8009caa:	68e1      	ldr	r1, [r4, #12]
 8009cac:	4b06      	ldr	r3, [pc, #24]	@ (8009cc8 <cleanup_stdio+0x3c>)
 8009cae:	4299      	cmp	r1, r3
 8009cb0:	d004      	beq.n	8009cbc <cleanup_stdio+0x30>
 8009cb2:	4620      	mov	r0, r4
 8009cb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009cb8:	f001 b824 	b.w	800ad04 <_fflush_r>
 8009cbc:	bd10      	pop	{r4, pc}
 8009cbe:	bf00      	nop
 8009cc0:	2000d790 	.word	0x2000d790
 8009cc4:	2000d7f8 	.word	0x2000d7f8
 8009cc8:	2000d860 	.word	0x2000d860

08009ccc <global_stdio_init.part.0>:
 8009ccc:	b510      	push	{r4, lr}
 8009cce:	4b0b      	ldr	r3, [pc, #44]	@ (8009cfc <global_stdio_init.part.0+0x30>)
 8009cd0:	4c0b      	ldr	r4, [pc, #44]	@ (8009d00 <global_stdio_init.part.0+0x34>)
 8009cd2:	4a0c      	ldr	r2, [pc, #48]	@ (8009d04 <global_stdio_init.part.0+0x38>)
 8009cd4:	601a      	str	r2, [r3, #0]
 8009cd6:	4620      	mov	r0, r4
 8009cd8:	2200      	movs	r2, #0
 8009cda:	2104      	movs	r1, #4
 8009cdc:	f7ff ff94 	bl	8009c08 <std>
 8009ce0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009ce4:	2201      	movs	r2, #1
 8009ce6:	2109      	movs	r1, #9
 8009ce8:	f7ff ff8e 	bl	8009c08 <std>
 8009cec:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009cf0:	2202      	movs	r2, #2
 8009cf2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009cf6:	2112      	movs	r1, #18
 8009cf8:	f7ff bf86 	b.w	8009c08 <std>
 8009cfc:	2000d8c8 	.word	0x2000d8c8
 8009d00:	2000d790 	.word	0x2000d790
 8009d04:	08009c75 	.word	0x08009c75

08009d08 <__sfp_lock_acquire>:
 8009d08:	4801      	ldr	r0, [pc, #4]	@ (8009d10 <__sfp_lock_acquire+0x8>)
 8009d0a:	f000 ba46 	b.w	800a19a <__retarget_lock_acquire_recursive>
 8009d0e:	bf00      	nop
 8009d10:	2000d8d1 	.word	0x2000d8d1

08009d14 <__sfp_lock_release>:
 8009d14:	4801      	ldr	r0, [pc, #4]	@ (8009d1c <__sfp_lock_release+0x8>)
 8009d16:	f000 ba41 	b.w	800a19c <__retarget_lock_release_recursive>
 8009d1a:	bf00      	nop
 8009d1c:	2000d8d1 	.word	0x2000d8d1

08009d20 <__sinit>:
 8009d20:	b510      	push	{r4, lr}
 8009d22:	4604      	mov	r4, r0
 8009d24:	f7ff fff0 	bl	8009d08 <__sfp_lock_acquire>
 8009d28:	6a23      	ldr	r3, [r4, #32]
 8009d2a:	b11b      	cbz	r3, 8009d34 <__sinit+0x14>
 8009d2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009d30:	f7ff bff0 	b.w	8009d14 <__sfp_lock_release>
 8009d34:	4b04      	ldr	r3, [pc, #16]	@ (8009d48 <__sinit+0x28>)
 8009d36:	6223      	str	r3, [r4, #32]
 8009d38:	4b04      	ldr	r3, [pc, #16]	@ (8009d4c <__sinit+0x2c>)
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d1f5      	bne.n	8009d2c <__sinit+0xc>
 8009d40:	f7ff ffc4 	bl	8009ccc <global_stdio_init.part.0>
 8009d44:	e7f2      	b.n	8009d2c <__sinit+0xc>
 8009d46:	bf00      	nop
 8009d48:	08009c8d 	.word	0x08009c8d
 8009d4c:	2000d8c8 	.word	0x2000d8c8

08009d50 <_fwalk_sglue>:
 8009d50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d54:	4607      	mov	r7, r0
 8009d56:	4688      	mov	r8, r1
 8009d58:	4614      	mov	r4, r2
 8009d5a:	2600      	movs	r6, #0
 8009d5c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009d60:	f1b9 0901 	subs.w	r9, r9, #1
 8009d64:	d505      	bpl.n	8009d72 <_fwalk_sglue+0x22>
 8009d66:	6824      	ldr	r4, [r4, #0]
 8009d68:	2c00      	cmp	r4, #0
 8009d6a:	d1f7      	bne.n	8009d5c <_fwalk_sglue+0xc>
 8009d6c:	4630      	mov	r0, r6
 8009d6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009d72:	89ab      	ldrh	r3, [r5, #12]
 8009d74:	2b01      	cmp	r3, #1
 8009d76:	d907      	bls.n	8009d88 <_fwalk_sglue+0x38>
 8009d78:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009d7c:	3301      	adds	r3, #1
 8009d7e:	d003      	beq.n	8009d88 <_fwalk_sglue+0x38>
 8009d80:	4629      	mov	r1, r5
 8009d82:	4638      	mov	r0, r7
 8009d84:	47c0      	blx	r8
 8009d86:	4306      	orrs	r6, r0
 8009d88:	3568      	adds	r5, #104	@ 0x68
 8009d8a:	e7e9      	b.n	8009d60 <_fwalk_sglue+0x10>

08009d8c <iprintf>:
 8009d8c:	b40f      	push	{r0, r1, r2, r3}
 8009d8e:	b507      	push	{r0, r1, r2, lr}
 8009d90:	4906      	ldr	r1, [pc, #24]	@ (8009dac <iprintf+0x20>)
 8009d92:	ab04      	add	r3, sp, #16
 8009d94:	6808      	ldr	r0, [r1, #0]
 8009d96:	f853 2b04 	ldr.w	r2, [r3], #4
 8009d9a:	6881      	ldr	r1, [r0, #8]
 8009d9c:	9301      	str	r3, [sp, #4]
 8009d9e:	f000 fc87 	bl	800a6b0 <_vfiprintf_r>
 8009da2:	b003      	add	sp, #12
 8009da4:	f85d eb04 	ldr.w	lr, [sp], #4
 8009da8:	b004      	add	sp, #16
 8009daa:	4770      	bx	lr
 8009dac:	20000108 	.word	0x20000108

08009db0 <_puts_r>:
 8009db0:	6a03      	ldr	r3, [r0, #32]
 8009db2:	b570      	push	{r4, r5, r6, lr}
 8009db4:	6884      	ldr	r4, [r0, #8]
 8009db6:	4605      	mov	r5, r0
 8009db8:	460e      	mov	r6, r1
 8009dba:	b90b      	cbnz	r3, 8009dc0 <_puts_r+0x10>
 8009dbc:	f7ff ffb0 	bl	8009d20 <__sinit>
 8009dc0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009dc2:	07db      	lsls	r3, r3, #31
 8009dc4:	d405      	bmi.n	8009dd2 <_puts_r+0x22>
 8009dc6:	89a3      	ldrh	r3, [r4, #12]
 8009dc8:	0598      	lsls	r0, r3, #22
 8009dca:	d402      	bmi.n	8009dd2 <_puts_r+0x22>
 8009dcc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009dce:	f000 f9e4 	bl	800a19a <__retarget_lock_acquire_recursive>
 8009dd2:	89a3      	ldrh	r3, [r4, #12]
 8009dd4:	0719      	lsls	r1, r3, #28
 8009dd6:	d502      	bpl.n	8009dde <_puts_r+0x2e>
 8009dd8:	6923      	ldr	r3, [r4, #16]
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d135      	bne.n	8009e4a <_puts_r+0x9a>
 8009dde:	4621      	mov	r1, r4
 8009de0:	4628      	mov	r0, r5
 8009de2:	f000 f8e5 	bl	8009fb0 <__swsetup_r>
 8009de6:	b380      	cbz	r0, 8009e4a <_puts_r+0x9a>
 8009de8:	f04f 35ff 	mov.w	r5, #4294967295
 8009dec:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009dee:	07da      	lsls	r2, r3, #31
 8009df0:	d405      	bmi.n	8009dfe <_puts_r+0x4e>
 8009df2:	89a3      	ldrh	r3, [r4, #12]
 8009df4:	059b      	lsls	r3, r3, #22
 8009df6:	d402      	bmi.n	8009dfe <_puts_r+0x4e>
 8009df8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009dfa:	f000 f9cf 	bl	800a19c <__retarget_lock_release_recursive>
 8009dfe:	4628      	mov	r0, r5
 8009e00:	bd70      	pop	{r4, r5, r6, pc}
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	da04      	bge.n	8009e10 <_puts_r+0x60>
 8009e06:	69a2      	ldr	r2, [r4, #24]
 8009e08:	429a      	cmp	r2, r3
 8009e0a:	dc17      	bgt.n	8009e3c <_puts_r+0x8c>
 8009e0c:	290a      	cmp	r1, #10
 8009e0e:	d015      	beq.n	8009e3c <_puts_r+0x8c>
 8009e10:	6823      	ldr	r3, [r4, #0]
 8009e12:	1c5a      	adds	r2, r3, #1
 8009e14:	6022      	str	r2, [r4, #0]
 8009e16:	7019      	strb	r1, [r3, #0]
 8009e18:	68a3      	ldr	r3, [r4, #8]
 8009e1a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009e1e:	3b01      	subs	r3, #1
 8009e20:	60a3      	str	r3, [r4, #8]
 8009e22:	2900      	cmp	r1, #0
 8009e24:	d1ed      	bne.n	8009e02 <_puts_r+0x52>
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	da11      	bge.n	8009e4e <_puts_r+0x9e>
 8009e2a:	4622      	mov	r2, r4
 8009e2c:	210a      	movs	r1, #10
 8009e2e:	4628      	mov	r0, r5
 8009e30:	f000 f87f 	bl	8009f32 <__swbuf_r>
 8009e34:	3001      	adds	r0, #1
 8009e36:	d0d7      	beq.n	8009de8 <_puts_r+0x38>
 8009e38:	250a      	movs	r5, #10
 8009e3a:	e7d7      	b.n	8009dec <_puts_r+0x3c>
 8009e3c:	4622      	mov	r2, r4
 8009e3e:	4628      	mov	r0, r5
 8009e40:	f000 f877 	bl	8009f32 <__swbuf_r>
 8009e44:	3001      	adds	r0, #1
 8009e46:	d1e7      	bne.n	8009e18 <_puts_r+0x68>
 8009e48:	e7ce      	b.n	8009de8 <_puts_r+0x38>
 8009e4a:	3e01      	subs	r6, #1
 8009e4c:	e7e4      	b.n	8009e18 <_puts_r+0x68>
 8009e4e:	6823      	ldr	r3, [r4, #0]
 8009e50:	1c5a      	adds	r2, r3, #1
 8009e52:	6022      	str	r2, [r4, #0]
 8009e54:	220a      	movs	r2, #10
 8009e56:	701a      	strb	r2, [r3, #0]
 8009e58:	e7ee      	b.n	8009e38 <_puts_r+0x88>
	...

08009e5c <puts>:
 8009e5c:	4b02      	ldr	r3, [pc, #8]	@ (8009e68 <puts+0xc>)
 8009e5e:	4601      	mov	r1, r0
 8009e60:	6818      	ldr	r0, [r3, #0]
 8009e62:	f7ff bfa5 	b.w	8009db0 <_puts_r>
 8009e66:	bf00      	nop
 8009e68:	20000108 	.word	0x20000108

08009e6c <siprintf>:
 8009e6c:	b40e      	push	{r1, r2, r3}
 8009e6e:	b500      	push	{lr}
 8009e70:	b09c      	sub	sp, #112	@ 0x70
 8009e72:	ab1d      	add	r3, sp, #116	@ 0x74
 8009e74:	9002      	str	r0, [sp, #8]
 8009e76:	9006      	str	r0, [sp, #24]
 8009e78:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8009e7c:	4809      	ldr	r0, [pc, #36]	@ (8009ea4 <siprintf+0x38>)
 8009e7e:	9107      	str	r1, [sp, #28]
 8009e80:	9104      	str	r1, [sp, #16]
 8009e82:	4909      	ldr	r1, [pc, #36]	@ (8009ea8 <siprintf+0x3c>)
 8009e84:	f853 2b04 	ldr.w	r2, [r3], #4
 8009e88:	9105      	str	r1, [sp, #20]
 8009e8a:	6800      	ldr	r0, [r0, #0]
 8009e8c:	9301      	str	r3, [sp, #4]
 8009e8e:	a902      	add	r1, sp, #8
 8009e90:	f000 fae8 	bl	800a464 <_svfiprintf_r>
 8009e94:	9b02      	ldr	r3, [sp, #8]
 8009e96:	2200      	movs	r2, #0
 8009e98:	701a      	strb	r2, [r3, #0]
 8009e9a:	b01c      	add	sp, #112	@ 0x70
 8009e9c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009ea0:	b003      	add	sp, #12
 8009ea2:	4770      	bx	lr
 8009ea4:	20000108 	.word	0x20000108
 8009ea8:	ffff0208 	.word	0xffff0208

08009eac <__sread>:
 8009eac:	b510      	push	{r4, lr}
 8009eae:	460c      	mov	r4, r1
 8009eb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009eb4:	f000 f922 	bl	800a0fc <_read_r>
 8009eb8:	2800      	cmp	r0, #0
 8009eba:	bfab      	itete	ge
 8009ebc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009ebe:	89a3      	ldrhlt	r3, [r4, #12]
 8009ec0:	181b      	addge	r3, r3, r0
 8009ec2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009ec6:	bfac      	ite	ge
 8009ec8:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009eca:	81a3      	strhlt	r3, [r4, #12]
 8009ecc:	bd10      	pop	{r4, pc}

08009ece <__swrite>:
 8009ece:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ed2:	461f      	mov	r7, r3
 8009ed4:	898b      	ldrh	r3, [r1, #12]
 8009ed6:	05db      	lsls	r3, r3, #23
 8009ed8:	4605      	mov	r5, r0
 8009eda:	460c      	mov	r4, r1
 8009edc:	4616      	mov	r6, r2
 8009ede:	d505      	bpl.n	8009eec <__swrite+0x1e>
 8009ee0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ee4:	2302      	movs	r3, #2
 8009ee6:	2200      	movs	r2, #0
 8009ee8:	f000 f8f6 	bl	800a0d8 <_lseek_r>
 8009eec:	89a3      	ldrh	r3, [r4, #12]
 8009eee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009ef2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009ef6:	81a3      	strh	r3, [r4, #12]
 8009ef8:	4632      	mov	r2, r6
 8009efa:	463b      	mov	r3, r7
 8009efc:	4628      	mov	r0, r5
 8009efe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009f02:	f000 b90d 	b.w	800a120 <_write_r>

08009f06 <__sseek>:
 8009f06:	b510      	push	{r4, lr}
 8009f08:	460c      	mov	r4, r1
 8009f0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f0e:	f000 f8e3 	bl	800a0d8 <_lseek_r>
 8009f12:	1c43      	adds	r3, r0, #1
 8009f14:	89a3      	ldrh	r3, [r4, #12]
 8009f16:	bf15      	itete	ne
 8009f18:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009f1a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009f1e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009f22:	81a3      	strheq	r3, [r4, #12]
 8009f24:	bf18      	it	ne
 8009f26:	81a3      	strhne	r3, [r4, #12]
 8009f28:	bd10      	pop	{r4, pc}

08009f2a <__sclose>:
 8009f2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f2e:	f000 b8c3 	b.w	800a0b8 <_close_r>

08009f32 <__swbuf_r>:
 8009f32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f34:	460e      	mov	r6, r1
 8009f36:	4614      	mov	r4, r2
 8009f38:	4605      	mov	r5, r0
 8009f3a:	b118      	cbz	r0, 8009f44 <__swbuf_r+0x12>
 8009f3c:	6a03      	ldr	r3, [r0, #32]
 8009f3e:	b90b      	cbnz	r3, 8009f44 <__swbuf_r+0x12>
 8009f40:	f7ff feee 	bl	8009d20 <__sinit>
 8009f44:	69a3      	ldr	r3, [r4, #24]
 8009f46:	60a3      	str	r3, [r4, #8]
 8009f48:	89a3      	ldrh	r3, [r4, #12]
 8009f4a:	071a      	lsls	r2, r3, #28
 8009f4c:	d501      	bpl.n	8009f52 <__swbuf_r+0x20>
 8009f4e:	6923      	ldr	r3, [r4, #16]
 8009f50:	b943      	cbnz	r3, 8009f64 <__swbuf_r+0x32>
 8009f52:	4621      	mov	r1, r4
 8009f54:	4628      	mov	r0, r5
 8009f56:	f000 f82b 	bl	8009fb0 <__swsetup_r>
 8009f5a:	b118      	cbz	r0, 8009f64 <__swbuf_r+0x32>
 8009f5c:	f04f 37ff 	mov.w	r7, #4294967295
 8009f60:	4638      	mov	r0, r7
 8009f62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009f64:	6823      	ldr	r3, [r4, #0]
 8009f66:	6922      	ldr	r2, [r4, #16]
 8009f68:	1a98      	subs	r0, r3, r2
 8009f6a:	6963      	ldr	r3, [r4, #20]
 8009f6c:	b2f6      	uxtb	r6, r6
 8009f6e:	4283      	cmp	r3, r0
 8009f70:	4637      	mov	r7, r6
 8009f72:	dc05      	bgt.n	8009f80 <__swbuf_r+0x4e>
 8009f74:	4621      	mov	r1, r4
 8009f76:	4628      	mov	r0, r5
 8009f78:	f000 fec4 	bl	800ad04 <_fflush_r>
 8009f7c:	2800      	cmp	r0, #0
 8009f7e:	d1ed      	bne.n	8009f5c <__swbuf_r+0x2a>
 8009f80:	68a3      	ldr	r3, [r4, #8]
 8009f82:	3b01      	subs	r3, #1
 8009f84:	60a3      	str	r3, [r4, #8]
 8009f86:	6823      	ldr	r3, [r4, #0]
 8009f88:	1c5a      	adds	r2, r3, #1
 8009f8a:	6022      	str	r2, [r4, #0]
 8009f8c:	701e      	strb	r6, [r3, #0]
 8009f8e:	6962      	ldr	r2, [r4, #20]
 8009f90:	1c43      	adds	r3, r0, #1
 8009f92:	429a      	cmp	r2, r3
 8009f94:	d004      	beq.n	8009fa0 <__swbuf_r+0x6e>
 8009f96:	89a3      	ldrh	r3, [r4, #12]
 8009f98:	07db      	lsls	r3, r3, #31
 8009f9a:	d5e1      	bpl.n	8009f60 <__swbuf_r+0x2e>
 8009f9c:	2e0a      	cmp	r6, #10
 8009f9e:	d1df      	bne.n	8009f60 <__swbuf_r+0x2e>
 8009fa0:	4621      	mov	r1, r4
 8009fa2:	4628      	mov	r0, r5
 8009fa4:	f000 feae 	bl	800ad04 <_fflush_r>
 8009fa8:	2800      	cmp	r0, #0
 8009faa:	d0d9      	beq.n	8009f60 <__swbuf_r+0x2e>
 8009fac:	e7d6      	b.n	8009f5c <__swbuf_r+0x2a>
	...

08009fb0 <__swsetup_r>:
 8009fb0:	b538      	push	{r3, r4, r5, lr}
 8009fb2:	4b29      	ldr	r3, [pc, #164]	@ (800a058 <__swsetup_r+0xa8>)
 8009fb4:	4605      	mov	r5, r0
 8009fb6:	6818      	ldr	r0, [r3, #0]
 8009fb8:	460c      	mov	r4, r1
 8009fba:	b118      	cbz	r0, 8009fc4 <__swsetup_r+0x14>
 8009fbc:	6a03      	ldr	r3, [r0, #32]
 8009fbe:	b90b      	cbnz	r3, 8009fc4 <__swsetup_r+0x14>
 8009fc0:	f7ff feae 	bl	8009d20 <__sinit>
 8009fc4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009fc8:	0719      	lsls	r1, r3, #28
 8009fca:	d422      	bmi.n	800a012 <__swsetup_r+0x62>
 8009fcc:	06da      	lsls	r2, r3, #27
 8009fce:	d407      	bmi.n	8009fe0 <__swsetup_r+0x30>
 8009fd0:	2209      	movs	r2, #9
 8009fd2:	602a      	str	r2, [r5, #0]
 8009fd4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009fd8:	81a3      	strh	r3, [r4, #12]
 8009fda:	f04f 30ff 	mov.w	r0, #4294967295
 8009fde:	e033      	b.n	800a048 <__swsetup_r+0x98>
 8009fe0:	0758      	lsls	r0, r3, #29
 8009fe2:	d512      	bpl.n	800a00a <__swsetup_r+0x5a>
 8009fe4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009fe6:	b141      	cbz	r1, 8009ffa <__swsetup_r+0x4a>
 8009fe8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009fec:	4299      	cmp	r1, r3
 8009fee:	d002      	beq.n	8009ff6 <__swsetup_r+0x46>
 8009ff0:	4628      	mov	r0, r5
 8009ff2:	f000 f8e3 	bl	800a1bc <_free_r>
 8009ff6:	2300      	movs	r3, #0
 8009ff8:	6363      	str	r3, [r4, #52]	@ 0x34
 8009ffa:	89a3      	ldrh	r3, [r4, #12]
 8009ffc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a000:	81a3      	strh	r3, [r4, #12]
 800a002:	2300      	movs	r3, #0
 800a004:	6063      	str	r3, [r4, #4]
 800a006:	6923      	ldr	r3, [r4, #16]
 800a008:	6023      	str	r3, [r4, #0]
 800a00a:	89a3      	ldrh	r3, [r4, #12]
 800a00c:	f043 0308 	orr.w	r3, r3, #8
 800a010:	81a3      	strh	r3, [r4, #12]
 800a012:	6923      	ldr	r3, [r4, #16]
 800a014:	b94b      	cbnz	r3, 800a02a <__swsetup_r+0x7a>
 800a016:	89a3      	ldrh	r3, [r4, #12]
 800a018:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a01c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a020:	d003      	beq.n	800a02a <__swsetup_r+0x7a>
 800a022:	4621      	mov	r1, r4
 800a024:	4628      	mov	r0, r5
 800a026:	f000 febb 	bl	800ada0 <__smakebuf_r>
 800a02a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a02e:	f013 0201 	ands.w	r2, r3, #1
 800a032:	d00a      	beq.n	800a04a <__swsetup_r+0x9a>
 800a034:	2200      	movs	r2, #0
 800a036:	60a2      	str	r2, [r4, #8]
 800a038:	6962      	ldr	r2, [r4, #20]
 800a03a:	4252      	negs	r2, r2
 800a03c:	61a2      	str	r2, [r4, #24]
 800a03e:	6922      	ldr	r2, [r4, #16]
 800a040:	b942      	cbnz	r2, 800a054 <__swsetup_r+0xa4>
 800a042:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a046:	d1c5      	bne.n	8009fd4 <__swsetup_r+0x24>
 800a048:	bd38      	pop	{r3, r4, r5, pc}
 800a04a:	0799      	lsls	r1, r3, #30
 800a04c:	bf58      	it	pl
 800a04e:	6962      	ldrpl	r2, [r4, #20]
 800a050:	60a2      	str	r2, [r4, #8]
 800a052:	e7f4      	b.n	800a03e <__swsetup_r+0x8e>
 800a054:	2000      	movs	r0, #0
 800a056:	e7f7      	b.n	800a048 <__swsetup_r+0x98>
 800a058:	20000108 	.word	0x20000108

0800a05c <memset>:
 800a05c:	4402      	add	r2, r0
 800a05e:	4603      	mov	r3, r0
 800a060:	4293      	cmp	r3, r2
 800a062:	d100      	bne.n	800a066 <memset+0xa>
 800a064:	4770      	bx	lr
 800a066:	f803 1b01 	strb.w	r1, [r3], #1
 800a06a:	e7f9      	b.n	800a060 <memset+0x4>

0800a06c <strncmp>:
 800a06c:	b510      	push	{r4, lr}
 800a06e:	b16a      	cbz	r2, 800a08c <strncmp+0x20>
 800a070:	3901      	subs	r1, #1
 800a072:	1884      	adds	r4, r0, r2
 800a074:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a078:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800a07c:	429a      	cmp	r2, r3
 800a07e:	d103      	bne.n	800a088 <strncmp+0x1c>
 800a080:	42a0      	cmp	r0, r4
 800a082:	d001      	beq.n	800a088 <strncmp+0x1c>
 800a084:	2a00      	cmp	r2, #0
 800a086:	d1f5      	bne.n	800a074 <strncmp+0x8>
 800a088:	1ad0      	subs	r0, r2, r3
 800a08a:	bd10      	pop	{r4, pc}
 800a08c:	4610      	mov	r0, r2
 800a08e:	e7fc      	b.n	800a08a <strncmp+0x1e>

0800a090 <strncpy>:
 800a090:	b510      	push	{r4, lr}
 800a092:	3901      	subs	r1, #1
 800a094:	4603      	mov	r3, r0
 800a096:	b132      	cbz	r2, 800a0a6 <strncpy+0x16>
 800a098:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800a09c:	f803 4b01 	strb.w	r4, [r3], #1
 800a0a0:	3a01      	subs	r2, #1
 800a0a2:	2c00      	cmp	r4, #0
 800a0a4:	d1f7      	bne.n	800a096 <strncpy+0x6>
 800a0a6:	441a      	add	r2, r3
 800a0a8:	2100      	movs	r1, #0
 800a0aa:	4293      	cmp	r3, r2
 800a0ac:	d100      	bne.n	800a0b0 <strncpy+0x20>
 800a0ae:	bd10      	pop	{r4, pc}
 800a0b0:	f803 1b01 	strb.w	r1, [r3], #1
 800a0b4:	e7f9      	b.n	800a0aa <strncpy+0x1a>
	...

0800a0b8 <_close_r>:
 800a0b8:	b538      	push	{r3, r4, r5, lr}
 800a0ba:	4d06      	ldr	r5, [pc, #24]	@ (800a0d4 <_close_r+0x1c>)
 800a0bc:	2300      	movs	r3, #0
 800a0be:	4604      	mov	r4, r0
 800a0c0:	4608      	mov	r0, r1
 800a0c2:	602b      	str	r3, [r5, #0]
 800a0c4:	f7f6 fee9 	bl	8000e9a <_close>
 800a0c8:	1c43      	adds	r3, r0, #1
 800a0ca:	d102      	bne.n	800a0d2 <_close_r+0x1a>
 800a0cc:	682b      	ldr	r3, [r5, #0]
 800a0ce:	b103      	cbz	r3, 800a0d2 <_close_r+0x1a>
 800a0d0:	6023      	str	r3, [r4, #0]
 800a0d2:	bd38      	pop	{r3, r4, r5, pc}
 800a0d4:	2000d8cc 	.word	0x2000d8cc

0800a0d8 <_lseek_r>:
 800a0d8:	b538      	push	{r3, r4, r5, lr}
 800a0da:	4d07      	ldr	r5, [pc, #28]	@ (800a0f8 <_lseek_r+0x20>)
 800a0dc:	4604      	mov	r4, r0
 800a0de:	4608      	mov	r0, r1
 800a0e0:	4611      	mov	r1, r2
 800a0e2:	2200      	movs	r2, #0
 800a0e4:	602a      	str	r2, [r5, #0]
 800a0e6:	461a      	mov	r2, r3
 800a0e8:	f7f6 fefe 	bl	8000ee8 <_lseek>
 800a0ec:	1c43      	adds	r3, r0, #1
 800a0ee:	d102      	bne.n	800a0f6 <_lseek_r+0x1e>
 800a0f0:	682b      	ldr	r3, [r5, #0]
 800a0f2:	b103      	cbz	r3, 800a0f6 <_lseek_r+0x1e>
 800a0f4:	6023      	str	r3, [r4, #0]
 800a0f6:	bd38      	pop	{r3, r4, r5, pc}
 800a0f8:	2000d8cc 	.word	0x2000d8cc

0800a0fc <_read_r>:
 800a0fc:	b538      	push	{r3, r4, r5, lr}
 800a0fe:	4d07      	ldr	r5, [pc, #28]	@ (800a11c <_read_r+0x20>)
 800a100:	4604      	mov	r4, r0
 800a102:	4608      	mov	r0, r1
 800a104:	4611      	mov	r1, r2
 800a106:	2200      	movs	r2, #0
 800a108:	602a      	str	r2, [r5, #0]
 800a10a:	461a      	mov	r2, r3
 800a10c:	f7f6 fea8 	bl	8000e60 <_read>
 800a110:	1c43      	adds	r3, r0, #1
 800a112:	d102      	bne.n	800a11a <_read_r+0x1e>
 800a114:	682b      	ldr	r3, [r5, #0]
 800a116:	b103      	cbz	r3, 800a11a <_read_r+0x1e>
 800a118:	6023      	str	r3, [r4, #0]
 800a11a:	bd38      	pop	{r3, r4, r5, pc}
 800a11c:	2000d8cc 	.word	0x2000d8cc

0800a120 <_write_r>:
 800a120:	b538      	push	{r3, r4, r5, lr}
 800a122:	4d07      	ldr	r5, [pc, #28]	@ (800a140 <_write_r+0x20>)
 800a124:	4604      	mov	r4, r0
 800a126:	4608      	mov	r0, r1
 800a128:	4611      	mov	r1, r2
 800a12a:	2200      	movs	r2, #0
 800a12c:	602a      	str	r2, [r5, #0]
 800a12e:	461a      	mov	r2, r3
 800a130:	f7f6 faf0 	bl	8000714 <_write>
 800a134:	1c43      	adds	r3, r0, #1
 800a136:	d102      	bne.n	800a13e <_write_r+0x1e>
 800a138:	682b      	ldr	r3, [r5, #0]
 800a13a:	b103      	cbz	r3, 800a13e <_write_r+0x1e>
 800a13c:	6023      	str	r3, [r4, #0]
 800a13e:	bd38      	pop	{r3, r4, r5, pc}
 800a140:	2000d8cc 	.word	0x2000d8cc

0800a144 <__errno>:
 800a144:	4b01      	ldr	r3, [pc, #4]	@ (800a14c <__errno+0x8>)
 800a146:	6818      	ldr	r0, [r3, #0]
 800a148:	4770      	bx	lr
 800a14a:	bf00      	nop
 800a14c:	20000108 	.word	0x20000108

0800a150 <__libc_init_array>:
 800a150:	b570      	push	{r4, r5, r6, lr}
 800a152:	4d0d      	ldr	r5, [pc, #52]	@ (800a188 <__libc_init_array+0x38>)
 800a154:	4c0d      	ldr	r4, [pc, #52]	@ (800a18c <__libc_init_array+0x3c>)
 800a156:	1b64      	subs	r4, r4, r5
 800a158:	10a4      	asrs	r4, r4, #2
 800a15a:	2600      	movs	r6, #0
 800a15c:	42a6      	cmp	r6, r4
 800a15e:	d109      	bne.n	800a174 <__libc_init_array+0x24>
 800a160:	4d0b      	ldr	r5, [pc, #44]	@ (800a190 <__libc_init_array+0x40>)
 800a162:	4c0c      	ldr	r4, [pc, #48]	@ (800a194 <__libc_init_array+0x44>)
 800a164:	f000 feda 	bl	800af1c <_init>
 800a168:	1b64      	subs	r4, r4, r5
 800a16a:	10a4      	asrs	r4, r4, #2
 800a16c:	2600      	movs	r6, #0
 800a16e:	42a6      	cmp	r6, r4
 800a170:	d105      	bne.n	800a17e <__libc_init_array+0x2e>
 800a172:	bd70      	pop	{r4, r5, r6, pc}
 800a174:	f855 3b04 	ldr.w	r3, [r5], #4
 800a178:	4798      	blx	r3
 800a17a:	3601      	adds	r6, #1
 800a17c:	e7ee      	b.n	800a15c <__libc_init_array+0xc>
 800a17e:	f855 3b04 	ldr.w	r3, [r5], #4
 800a182:	4798      	blx	r3
 800a184:	3601      	adds	r6, #1
 800a186:	e7f2      	b.n	800a16e <__libc_init_array+0x1e>
 800a188:	0800b068 	.word	0x0800b068
 800a18c:	0800b068 	.word	0x0800b068
 800a190:	0800b068 	.word	0x0800b068
 800a194:	0800b06c 	.word	0x0800b06c

0800a198 <__retarget_lock_init_recursive>:
 800a198:	4770      	bx	lr

0800a19a <__retarget_lock_acquire_recursive>:
 800a19a:	4770      	bx	lr

0800a19c <__retarget_lock_release_recursive>:
 800a19c:	4770      	bx	lr

0800a19e <memcpy>:
 800a19e:	440a      	add	r2, r1
 800a1a0:	4291      	cmp	r1, r2
 800a1a2:	f100 33ff 	add.w	r3, r0, #4294967295
 800a1a6:	d100      	bne.n	800a1aa <memcpy+0xc>
 800a1a8:	4770      	bx	lr
 800a1aa:	b510      	push	{r4, lr}
 800a1ac:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a1b0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a1b4:	4291      	cmp	r1, r2
 800a1b6:	d1f9      	bne.n	800a1ac <memcpy+0xe>
 800a1b8:	bd10      	pop	{r4, pc}
	...

0800a1bc <_free_r>:
 800a1bc:	b538      	push	{r3, r4, r5, lr}
 800a1be:	4605      	mov	r5, r0
 800a1c0:	2900      	cmp	r1, #0
 800a1c2:	d041      	beq.n	800a248 <_free_r+0x8c>
 800a1c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a1c8:	1f0c      	subs	r4, r1, #4
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	bfb8      	it	lt
 800a1ce:	18e4      	addlt	r4, r4, r3
 800a1d0:	f000 f8e0 	bl	800a394 <__malloc_lock>
 800a1d4:	4a1d      	ldr	r2, [pc, #116]	@ (800a24c <_free_r+0x90>)
 800a1d6:	6813      	ldr	r3, [r2, #0]
 800a1d8:	b933      	cbnz	r3, 800a1e8 <_free_r+0x2c>
 800a1da:	6063      	str	r3, [r4, #4]
 800a1dc:	6014      	str	r4, [r2, #0]
 800a1de:	4628      	mov	r0, r5
 800a1e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a1e4:	f000 b8dc 	b.w	800a3a0 <__malloc_unlock>
 800a1e8:	42a3      	cmp	r3, r4
 800a1ea:	d908      	bls.n	800a1fe <_free_r+0x42>
 800a1ec:	6820      	ldr	r0, [r4, #0]
 800a1ee:	1821      	adds	r1, r4, r0
 800a1f0:	428b      	cmp	r3, r1
 800a1f2:	bf01      	itttt	eq
 800a1f4:	6819      	ldreq	r1, [r3, #0]
 800a1f6:	685b      	ldreq	r3, [r3, #4]
 800a1f8:	1809      	addeq	r1, r1, r0
 800a1fa:	6021      	streq	r1, [r4, #0]
 800a1fc:	e7ed      	b.n	800a1da <_free_r+0x1e>
 800a1fe:	461a      	mov	r2, r3
 800a200:	685b      	ldr	r3, [r3, #4]
 800a202:	b10b      	cbz	r3, 800a208 <_free_r+0x4c>
 800a204:	42a3      	cmp	r3, r4
 800a206:	d9fa      	bls.n	800a1fe <_free_r+0x42>
 800a208:	6811      	ldr	r1, [r2, #0]
 800a20a:	1850      	adds	r0, r2, r1
 800a20c:	42a0      	cmp	r0, r4
 800a20e:	d10b      	bne.n	800a228 <_free_r+0x6c>
 800a210:	6820      	ldr	r0, [r4, #0]
 800a212:	4401      	add	r1, r0
 800a214:	1850      	adds	r0, r2, r1
 800a216:	4283      	cmp	r3, r0
 800a218:	6011      	str	r1, [r2, #0]
 800a21a:	d1e0      	bne.n	800a1de <_free_r+0x22>
 800a21c:	6818      	ldr	r0, [r3, #0]
 800a21e:	685b      	ldr	r3, [r3, #4]
 800a220:	6053      	str	r3, [r2, #4]
 800a222:	4408      	add	r0, r1
 800a224:	6010      	str	r0, [r2, #0]
 800a226:	e7da      	b.n	800a1de <_free_r+0x22>
 800a228:	d902      	bls.n	800a230 <_free_r+0x74>
 800a22a:	230c      	movs	r3, #12
 800a22c:	602b      	str	r3, [r5, #0]
 800a22e:	e7d6      	b.n	800a1de <_free_r+0x22>
 800a230:	6820      	ldr	r0, [r4, #0]
 800a232:	1821      	adds	r1, r4, r0
 800a234:	428b      	cmp	r3, r1
 800a236:	bf04      	itt	eq
 800a238:	6819      	ldreq	r1, [r3, #0]
 800a23a:	685b      	ldreq	r3, [r3, #4]
 800a23c:	6063      	str	r3, [r4, #4]
 800a23e:	bf04      	itt	eq
 800a240:	1809      	addeq	r1, r1, r0
 800a242:	6021      	streq	r1, [r4, #0]
 800a244:	6054      	str	r4, [r2, #4]
 800a246:	e7ca      	b.n	800a1de <_free_r+0x22>
 800a248:	bd38      	pop	{r3, r4, r5, pc}
 800a24a:	bf00      	nop
 800a24c:	2000d8d8 	.word	0x2000d8d8

0800a250 <sbrk_aligned>:
 800a250:	b570      	push	{r4, r5, r6, lr}
 800a252:	4e0f      	ldr	r6, [pc, #60]	@ (800a290 <sbrk_aligned+0x40>)
 800a254:	460c      	mov	r4, r1
 800a256:	6831      	ldr	r1, [r6, #0]
 800a258:	4605      	mov	r5, r0
 800a25a:	b911      	cbnz	r1, 800a262 <sbrk_aligned+0x12>
 800a25c:	f000 fe18 	bl	800ae90 <_sbrk_r>
 800a260:	6030      	str	r0, [r6, #0]
 800a262:	4621      	mov	r1, r4
 800a264:	4628      	mov	r0, r5
 800a266:	f000 fe13 	bl	800ae90 <_sbrk_r>
 800a26a:	1c43      	adds	r3, r0, #1
 800a26c:	d103      	bne.n	800a276 <sbrk_aligned+0x26>
 800a26e:	f04f 34ff 	mov.w	r4, #4294967295
 800a272:	4620      	mov	r0, r4
 800a274:	bd70      	pop	{r4, r5, r6, pc}
 800a276:	1cc4      	adds	r4, r0, #3
 800a278:	f024 0403 	bic.w	r4, r4, #3
 800a27c:	42a0      	cmp	r0, r4
 800a27e:	d0f8      	beq.n	800a272 <sbrk_aligned+0x22>
 800a280:	1a21      	subs	r1, r4, r0
 800a282:	4628      	mov	r0, r5
 800a284:	f000 fe04 	bl	800ae90 <_sbrk_r>
 800a288:	3001      	adds	r0, #1
 800a28a:	d1f2      	bne.n	800a272 <sbrk_aligned+0x22>
 800a28c:	e7ef      	b.n	800a26e <sbrk_aligned+0x1e>
 800a28e:	bf00      	nop
 800a290:	2000d8d4 	.word	0x2000d8d4

0800a294 <_malloc_r>:
 800a294:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a298:	1ccd      	adds	r5, r1, #3
 800a29a:	f025 0503 	bic.w	r5, r5, #3
 800a29e:	3508      	adds	r5, #8
 800a2a0:	2d0c      	cmp	r5, #12
 800a2a2:	bf38      	it	cc
 800a2a4:	250c      	movcc	r5, #12
 800a2a6:	2d00      	cmp	r5, #0
 800a2a8:	4606      	mov	r6, r0
 800a2aa:	db01      	blt.n	800a2b0 <_malloc_r+0x1c>
 800a2ac:	42a9      	cmp	r1, r5
 800a2ae:	d904      	bls.n	800a2ba <_malloc_r+0x26>
 800a2b0:	230c      	movs	r3, #12
 800a2b2:	6033      	str	r3, [r6, #0]
 800a2b4:	2000      	movs	r0, #0
 800a2b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a2ba:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a390 <_malloc_r+0xfc>
 800a2be:	f000 f869 	bl	800a394 <__malloc_lock>
 800a2c2:	f8d8 3000 	ldr.w	r3, [r8]
 800a2c6:	461c      	mov	r4, r3
 800a2c8:	bb44      	cbnz	r4, 800a31c <_malloc_r+0x88>
 800a2ca:	4629      	mov	r1, r5
 800a2cc:	4630      	mov	r0, r6
 800a2ce:	f7ff ffbf 	bl	800a250 <sbrk_aligned>
 800a2d2:	1c43      	adds	r3, r0, #1
 800a2d4:	4604      	mov	r4, r0
 800a2d6:	d158      	bne.n	800a38a <_malloc_r+0xf6>
 800a2d8:	f8d8 4000 	ldr.w	r4, [r8]
 800a2dc:	4627      	mov	r7, r4
 800a2de:	2f00      	cmp	r7, #0
 800a2e0:	d143      	bne.n	800a36a <_malloc_r+0xd6>
 800a2e2:	2c00      	cmp	r4, #0
 800a2e4:	d04b      	beq.n	800a37e <_malloc_r+0xea>
 800a2e6:	6823      	ldr	r3, [r4, #0]
 800a2e8:	4639      	mov	r1, r7
 800a2ea:	4630      	mov	r0, r6
 800a2ec:	eb04 0903 	add.w	r9, r4, r3
 800a2f0:	f000 fdce 	bl	800ae90 <_sbrk_r>
 800a2f4:	4581      	cmp	r9, r0
 800a2f6:	d142      	bne.n	800a37e <_malloc_r+0xea>
 800a2f8:	6821      	ldr	r1, [r4, #0]
 800a2fa:	1a6d      	subs	r5, r5, r1
 800a2fc:	4629      	mov	r1, r5
 800a2fe:	4630      	mov	r0, r6
 800a300:	f7ff ffa6 	bl	800a250 <sbrk_aligned>
 800a304:	3001      	adds	r0, #1
 800a306:	d03a      	beq.n	800a37e <_malloc_r+0xea>
 800a308:	6823      	ldr	r3, [r4, #0]
 800a30a:	442b      	add	r3, r5
 800a30c:	6023      	str	r3, [r4, #0]
 800a30e:	f8d8 3000 	ldr.w	r3, [r8]
 800a312:	685a      	ldr	r2, [r3, #4]
 800a314:	bb62      	cbnz	r2, 800a370 <_malloc_r+0xdc>
 800a316:	f8c8 7000 	str.w	r7, [r8]
 800a31a:	e00f      	b.n	800a33c <_malloc_r+0xa8>
 800a31c:	6822      	ldr	r2, [r4, #0]
 800a31e:	1b52      	subs	r2, r2, r5
 800a320:	d420      	bmi.n	800a364 <_malloc_r+0xd0>
 800a322:	2a0b      	cmp	r2, #11
 800a324:	d917      	bls.n	800a356 <_malloc_r+0xc2>
 800a326:	1961      	adds	r1, r4, r5
 800a328:	42a3      	cmp	r3, r4
 800a32a:	6025      	str	r5, [r4, #0]
 800a32c:	bf18      	it	ne
 800a32e:	6059      	strne	r1, [r3, #4]
 800a330:	6863      	ldr	r3, [r4, #4]
 800a332:	bf08      	it	eq
 800a334:	f8c8 1000 	streq.w	r1, [r8]
 800a338:	5162      	str	r2, [r4, r5]
 800a33a:	604b      	str	r3, [r1, #4]
 800a33c:	4630      	mov	r0, r6
 800a33e:	f000 f82f 	bl	800a3a0 <__malloc_unlock>
 800a342:	f104 000b 	add.w	r0, r4, #11
 800a346:	1d23      	adds	r3, r4, #4
 800a348:	f020 0007 	bic.w	r0, r0, #7
 800a34c:	1ac2      	subs	r2, r0, r3
 800a34e:	bf1c      	itt	ne
 800a350:	1a1b      	subne	r3, r3, r0
 800a352:	50a3      	strne	r3, [r4, r2]
 800a354:	e7af      	b.n	800a2b6 <_malloc_r+0x22>
 800a356:	6862      	ldr	r2, [r4, #4]
 800a358:	42a3      	cmp	r3, r4
 800a35a:	bf0c      	ite	eq
 800a35c:	f8c8 2000 	streq.w	r2, [r8]
 800a360:	605a      	strne	r2, [r3, #4]
 800a362:	e7eb      	b.n	800a33c <_malloc_r+0xa8>
 800a364:	4623      	mov	r3, r4
 800a366:	6864      	ldr	r4, [r4, #4]
 800a368:	e7ae      	b.n	800a2c8 <_malloc_r+0x34>
 800a36a:	463c      	mov	r4, r7
 800a36c:	687f      	ldr	r7, [r7, #4]
 800a36e:	e7b6      	b.n	800a2de <_malloc_r+0x4a>
 800a370:	461a      	mov	r2, r3
 800a372:	685b      	ldr	r3, [r3, #4]
 800a374:	42a3      	cmp	r3, r4
 800a376:	d1fb      	bne.n	800a370 <_malloc_r+0xdc>
 800a378:	2300      	movs	r3, #0
 800a37a:	6053      	str	r3, [r2, #4]
 800a37c:	e7de      	b.n	800a33c <_malloc_r+0xa8>
 800a37e:	230c      	movs	r3, #12
 800a380:	6033      	str	r3, [r6, #0]
 800a382:	4630      	mov	r0, r6
 800a384:	f000 f80c 	bl	800a3a0 <__malloc_unlock>
 800a388:	e794      	b.n	800a2b4 <_malloc_r+0x20>
 800a38a:	6005      	str	r5, [r0, #0]
 800a38c:	e7d6      	b.n	800a33c <_malloc_r+0xa8>
 800a38e:	bf00      	nop
 800a390:	2000d8d8 	.word	0x2000d8d8

0800a394 <__malloc_lock>:
 800a394:	4801      	ldr	r0, [pc, #4]	@ (800a39c <__malloc_lock+0x8>)
 800a396:	f7ff bf00 	b.w	800a19a <__retarget_lock_acquire_recursive>
 800a39a:	bf00      	nop
 800a39c:	2000d8d0 	.word	0x2000d8d0

0800a3a0 <__malloc_unlock>:
 800a3a0:	4801      	ldr	r0, [pc, #4]	@ (800a3a8 <__malloc_unlock+0x8>)
 800a3a2:	f7ff befb 	b.w	800a19c <__retarget_lock_release_recursive>
 800a3a6:	bf00      	nop
 800a3a8:	2000d8d0 	.word	0x2000d8d0

0800a3ac <__ssputs_r>:
 800a3ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a3b0:	688e      	ldr	r6, [r1, #8]
 800a3b2:	461f      	mov	r7, r3
 800a3b4:	42be      	cmp	r6, r7
 800a3b6:	680b      	ldr	r3, [r1, #0]
 800a3b8:	4682      	mov	sl, r0
 800a3ba:	460c      	mov	r4, r1
 800a3bc:	4690      	mov	r8, r2
 800a3be:	d82d      	bhi.n	800a41c <__ssputs_r+0x70>
 800a3c0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a3c4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a3c8:	d026      	beq.n	800a418 <__ssputs_r+0x6c>
 800a3ca:	6965      	ldr	r5, [r4, #20]
 800a3cc:	6909      	ldr	r1, [r1, #16]
 800a3ce:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a3d2:	eba3 0901 	sub.w	r9, r3, r1
 800a3d6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a3da:	1c7b      	adds	r3, r7, #1
 800a3dc:	444b      	add	r3, r9
 800a3de:	106d      	asrs	r5, r5, #1
 800a3e0:	429d      	cmp	r5, r3
 800a3e2:	bf38      	it	cc
 800a3e4:	461d      	movcc	r5, r3
 800a3e6:	0553      	lsls	r3, r2, #21
 800a3e8:	d527      	bpl.n	800a43a <__ssputs_r+0x8e>
 800a3ea:	4629      	mov	r1, r5
 800a3ec:	f7ff ff52 	bl	800a294 <_malloc_r>
 800a3f0:	4606      	mov	r6, r0
 800a3f2:	b360      	cbz	r0, 800a44e <__ssputs_r+0xa2>
 800a3f4:	6921      	ldr	r1, [r4, #16]
 800a3f6:	464a      	mov	r2, r9
 800a3f8:	f7ff fed1 	bl	800a19e <memcpy>
 800a3fc:	89a3      	ldrh	r3, [r4, #12]
 800a3fe:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a402:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a406:	81a3      	strh	r3, [r4, #12]
 800a408:	6126      	str	r6, [r4, #16]
 800a40a:	6165      	str	r5, [r4, #20]
 800a40c:	444e      	add	r6, r9
 800a40e:	eba5 0509 	sub.w	r5, r5, r9
 800a412:	6026      	str	r6, [r4, #0]
 800a414:	60a5      	str	r5, [r4, #8]
 800a416:	463e      	mov	r6, r7
 800a418:	42be      	cmp	r6, r7
 800a41a:	d900      	bls.n	800a41e <__ssputs_r+0x72>
 800a41c:	463e      	mov	r6, r7
 800a41e:	6820      	ldr	r0, [r4, #0]
 800a420:	4632      	mov	r2, r6
 800a422:	4641      	mov	r1, r8
 800a424:	f000 fcf8 	bl	800ae18 <memmove>
 800a428:	68a3      	ldr	r3, [r4, #8]
 800a42a:	1b9b      	subs	r3, r3, r6
 800a42c:	60a3      	str	r3, [r4, #8]
 800a42e:	6823      	ldr	r3, [r4, #0]
 800a430:	4433      	add	r3, r6
 800a432:	6023      	str	r3, [r4, #0]
 800a434:	2000      	movs	r0, #0
 800a436:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a43a:	462a      	mov	r2, r5
 800a43c:	f000 fd38 	bl	800aeb0 <_realloc_r>
 800a440:	4606      	mov	r6, r0
 800a442:	2800      	cmp	r0, #0
 800a444:	d1e0      	bne.n	800a408 <__ssputs_r+0x5c>
 800a446:	6921      	ldr	r1, [r4, #16]
 800a448:	4650      	mov	r0, sl
 800a44a:	f7ff feb7 	bl	800a1bc <_free_r>
 800a44e:	230c      	movs	r3, #12
 800a450:	f8ca 3000 	str.w	r3, [sl]
 800a454:	89a3      	ldrh	r3, [r4, #12]
 800a456:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a45a:	81a3      	strh	r3, [r4, #12]
 800a45c:	f04f 30ff 	mov.w	r0, #4294967295
 800a460:	e7e9      	b.n	800a436 <__ssputs_r+0x8a>
	...

0800a464 <_svfiprintf_r>:
 800a464:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a468:	4698      	mov	r8, r3
 800a46a:	898b      	ldrh	r3, [r1, #12]
 800a46c:	061b      	lsls	r3, r3, #24
 800a46e:	b09d      	sub	sp, #116	@ 0x74
 800a470:	4607      	mov	r7, r0
 800a472:	460d      	mov	r5, r1
 800a474:	4614      	mov	r4, r2
 800a476:	d510      	bpl.n	800a49a <_svfiprintf_r+0x36>
 800a478:	690b      	ldr	r3, [r1, #16]
 800a47a:	b973      	cbnz	r3, 800a49a <_svfiprintf_r+0x36>
 800a47c:	2140      	movs	r1, #64	@ 0x40
 800a47e:	f7ff ff09 	bl	800a294 <_malloc_r>
 800a482:	6028      	str	r0, [r5, #0]
 800a484:	6128      	str	r0, [r5, #16]
 800a486:	b930      	cbnz	r0, 800a496 <_svfiprintf_r+0x32>
 800a488:	230c      	movs	r3, #12
 800a48a:	603b      	str	r3, [r7, #0]
 800a48c:	f04f 30ff 	mov.w	r0, #4294967295
 800a490:	b01d      	add	sp, #116	@ 0x74
 800a492:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a496:	2340      	movs	r3, #64	@ 0x40
 800a498:	616b      	str	r3, [r5, #20]
 800a49a:	2300      	movs	r3, #0
 800a49c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a49e:	2320      	movs	r3, #32
 800a4a0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a4a4:	f8cd 800c 	str.w	r8, [sp, #12]
 800a4a8:	2330      	movs	r3, #48	@ 0x30
 800a4aa:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800a648 <_svfiprintf_r+0x1e4>
 800a4ae:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a4b2:	f04f 0901 	mov.w	r9, #1
 800a4b6:	4623      	mov	r3, r4
 800a4b8:	469a      	mov	sl, r3
 800a4ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a4be:	b10a      	cbz	r2, 800a4c4 <_svfiprintf_r+0x60>
 800a4c0:	2a25      	cmp	r2, #37	@ 0x25
 800a4c2:	d1f9      	bne.n	800a4b8 <_svfiprintf_r+0x54>
 800a4c4:	ebba 0b04 	subs.w	fp, sl, r4
 800a4c8:	d00b      	beq.n	800a4e2 <_svfiprintf_r+0x7e>
 800a4ca:	465b      	mov	r3, fp
 800a4cc:	4622      	mov	r2, r4
 800a4ce:	4629      	mov	r1, r5
 800a4d0:	4638      	mov	r0, r7
 800a4d2:	f7ff ff6b 	bl	800a3ac <__ssputs_r>
 800a4d6:	3001      	adds	r0, #1
 800a4d8:	f000 80a7 	beq.w	800a62a <_svfiprintf_r+0x1c6>
 800a4dc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a4de:	445a      	add	r2, fp
 800a4e0:	9209      	str	r2, [sp, #36]	@ 0x24
 800a4e2:	f89a 3000 	ldrb.w	r3, [sl]
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	f000 809f 	beq.w	800a62a <_svfiprintf_r+0x1c6>
 800a4ec:	2300      	movs	r3, #0
 800a4ee:	f04f 32ff 	mov.w	r2, #4294967295
 800a4f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a4f6:	f10a 0a01 	add.w	sl, sl, #1
 800a4fa:	9304      	str	r3, [sp, #16]
 800a4fc:	9307      	str	r3, [sp, #28]
 800a4fe:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a502:	931a      	str	r3, [sp, #104]	@ 0x68
 800a504:	4654      	mov	r4, sl
 800a506:	2205      	movs	r2, #5
 800a508:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a50c:	484e      	ldr	r0, [pc, #312]	@ (800a648 <_svfiprintf_r+0x1e4>)
 800a50e:	f7f5 fe77 	bl	8000200 <memchr>
 800a512:	9a04      	ldr	r2, [sp, #16]
 800a514:	b9d8      	cbnz	r0, 800a54e <_svfiprintf_r+0xea>
 800a516:	06d0      	lsls	r0, r2, #27
 800a518:	bf44      	itt	mi
 800a51a:	2320      	movmi	r3, #32
 800a51c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a520:	0711      	lsls	r1, r2, #28
 800a522:	bf44      	itt	mi
 800a524:	232b      	movmi	r3, #43	@ 0x2b
 800a526:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a52a:	f89a 3000 	ldrb.w	r3, [sl]
 800a52e:	2b2a      	cmp	r3, #42	@ 0x2a
 800a530:	d015      	beq.n	800a55e <_svfiprintf_r+0xfa>
 800a532:	9a07      	ldr	r2, [sp, #28]
 800a534:	4654      	mov	r4, sl
 800a536:	2000      	movs	r0, #0
 800a538:	f04f 0c0a 	mov.w	ip, #10
 800a53c:	4621      	mov	r1, r4
 800a53e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a542:	3b30      	subs	r3, #48	@ 0x30
 800a544:	2b09      	cmp	r3, #9
 800a546:	d94b      	bls.n	800a5e0 <_svfiprintf_r+0x17c>
 800a548:	b1b0      	cbz	r0, 800a578 <_svfiprintf_r+0x114>
 800a54a:	9207      	str	r2, [sp, #28]
 800a54c:	e014      	b.n	800a578 <_svfiprintf_r+0x114>
 800a54e:	eba0 0308 	sub.w	r3, r0, r8
 800a552:	fa09 f303 	lsl.w	r3, r9, r3
 800a556:	4313      	orrs	r3, r2
 800a558:	9304      	str	r3, [sp, #16]
 800a55a:	46a2      	mov	sl, r4
 800a55c:	e7d2      	b.n	800a504 <_svfiprintf_r+0xa0>
 800a55e:	9b03      	ldr	r3, [sp, #12]
 800a560:	1d19      	adds	r1, r3, #4
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	9103      	str	r1, [sp, #12]
 800a566:	2b00      	cmp	r3, #0
 800a568:	bfbb      	ittet	lt
 800a56a:	425b      	neglt	r3, r3
 800a56c:	f042 0202 	orrlt.w	r2, r2, #2
 800a570:	9307      	strge	r3, [sp, #28]
 800a572:	9307      	strlt	r3, [sp, #28]
 800a574:	bfb8      	it	lt
 800a576:	9204      	strlt	r2, [sp, #16]
 800a578:	7823      	ldrb	r3, [r4, #0]
 800a57a:	2b2e      	cmp	r3, #46	@ 0x2e
 800a57c:	d10a      	bne.n	800a594 <_svfiprintf_r+0x130>
 800a57e:	7863      	ldrb	r3, [r4, #1]
 800a580:	2b2a      	cmp	r3, #42	@ 0x2a
 800a582:	d132      	bne.n	800a5ea <_svfiprintf_r+0x186>
 800a584:	9b03      	ldr	r3, [sp, #12]
 800a586:	1d1a      	adds	r2, r3, #4
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	9203      	str	r2, [sp, #12]
 800a58c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a590:	3402      	adds	r4, #2
 800a592:	9305      	str	r3, [sp, #20]
 800a594:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800a658 <_svfiprintf_r+0x1f4>
 800a598:	7821      	ldrb	r1, [r4, #0]
 800a59a:	2203      	movs	r2, #3
 800a59c:	4650      	mov	r0, sl
 800a59e:	f7f5 fe2f 	bl	8000200 <memchr>
 800a5a2:	b138      	cbz	r0, 800a5b4 <_svfiprintf_r+0x150>
 800a5a4:	9b04      	ldr	r3, [sp, #16]
 800a5a6:	eba0 000a 	sub.w	r0, r0, sl
 800a5aa:	2240      	movs	r2, #64	@ 0x40
 800a5ac:	4082      	lsls	r2, r0
 800a5ae:	4313      	orrs	r3, r2
 800a5b0:	3401      	adds	r4, #1
 800a5b2:	9304      	str	r3, [sp, #16]
 800a5b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a5b8:	4824      	ldr	r0, [pc, #144]	@ (800a64c <_svfiprintf_r+0x1e8>)
 800a5ba:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a5be:	2206      	movs	r2, #6
 800a5c0:	f7f5 fe1e 	bl	8000200 <memchr>
 800a5c4:	2800      	cmp	r0, #0
 800a5c6:	d036      	beq.n	800a636 <_svfiprintf_r+0x1d2>
 800a5c8:	4b21      	ldr	r3, [pc, #132]	@ (800a650 <_svfiprintf_r+0x1ec>)
 800a5ca:	bb1b      	cbnz	r3, 800a614 <_svfiprintf_r+0x1b0>
 800a5cc:	9b03      	ldr	r3, [sp, #12]
 800a5ce:	3307      	adds	r3, #7
 800a5d0:	f023 0307 	bic.w	r3, r3, #7
 800a5d4:	3308      	adds	r3, #8
 800a5d6:	9303      	str	r3, [sp, #12]
 800a5d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a5da:	4433      	add	r3, r6
 800a5dc:	9309      	str	r3, [sp, #36]	@ 0x24
 800a5de:	e76a      	b.n	800a4b6 <_svfiprintf_r+0x52>
 800a5e0:	fb0c 3202 	mla	r2, ip, r2, r3
 800a5e4:	460c      	mov	r4, r1
 800a5e6:	2001      	movs	r0, #1
 800a5e8:	e7a8      	b.n	800a53c <_svfiprintf_r+0xd8>
 800a5ea:	2300      	movs	r3, #0
 800a5ec:	3401      	adds	r4, #1
 800a5ee:	9305      	str	r3, [sp, #20]
 800a5f0:	4619      	mov	r1, r3
 800a5f2:	f04f 0c0a 	mov.w	ip, #10
 800a5f6:	4620      	mov	r0, r4
 800a5f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a5fc:	3a30      	subs	r2, #48	@ 0x30
 800a5fe:	2a09      	cmp	r2, #9
 800a600:	d903      	bls.n	800a60a <_svfiprintf_r+0x1a6>
 800a602:	2b00      	cmp	r3, #0
 800a604:	d0c6      	beq.n	800a594 <_svfiprintf_r+0x130>
 800a606:	9105      	str	r1, [sp, #20]
 800a608:	e7c4      	b.n	800a594 <_svfiprintf_r+0x130>
 800a60a:	fb0c 2101 	mla	r1, ip, r1, r2
 800a60e:	4604      	mov	r4, r0
 800a610:	2301      	movs	r3, #1
 800a612:	e7f0      	b.n	800a5f6 <_svfiprintf_r+0x192>
 800a614:	ab03      	add	r3, sp, #12
 800a616:	9300      	str	r3, [sp, #0]
 800a618:	462a      	mov	r2, r5
 800a61a:	4b0e      	ldr	r3, [pc, #56]	@ (800a654 <_svfiprintf_r+0x1f0>)
 800a61c:	a904      	add	r1, sp, #16
 800a61e:	4638      	mov	r0, r7
 800a620:	f3af 8000 	nop.w
 800a624:	1c42      	adds	r2, r0, #1
 800a626:	4606      	mov	r6, r0
 800a628:	d1d6      	bne.n	800a5d8 <_svfiprintf_r+0x174>
 800a62a:	89ab      	ldrh	r3, [r5, #12]
 800a62c:	065b      	lsls	r3, r3, #25
 800a62e:	f53f af2d 	bmi.w	800a48c <_svfiprintf_r+0x28>
 800a632:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a634:	e72c      	b.n	800a490 <_svfiprintf_r+0x2c>
 800a636:	ab03      	add	r3, sp, #12
 800a638:	9300      	str	r3, [sp, #0]
 800a63a:	462a      	mov	r2, r5
 800a63c:	4b05      	ldr	r3, [pc, #20]	@ (800a654 <_svfiprintf_r+0x1f0>)
 800a63e:	a904      	add	r1, sp, #16
 800a640:	4638      	mov	r0, r7
 800a642:	f000 f9bb 	bl	800a9bc <_printf_i>
 800a646:	e7ed      	b.n	800a624 <_svfiprintf_r+0x1c0>
 800a648:	0800b02c 	.word	0x0800b02c
 800a64c:	0800b036 	.word	0x0800b036
 800a650:	00000000 	.word	0x00000000
 800a654:	0800a3ad 	.word	0x0800a3ad
 800a658:	0800b032 	.word	0x0800b032

0800a65c <__sfputc_r>:
 800a65c:	6893      	ldr	r3, [r2, #8]
 800a65e:	3b01      	subs	r3, #1
 800a660:	2b00      	cmp	r3, #0
 800a662:	b410      	push	{r4}
 800a664:	6093      	str	r3, [r2, #8]
 800a666:	da08      	bge.n	800a67a <__sfputc_r+0x1e>
 800a668:	6994      	ldr	r4, [r2, #24]
 800a66a:	42a3      	cmp	r3, r4
 800a66c:	db01      	blt.n	800a672 <__sfputc_r+0x16>
 800a66e:	290a      	cmp	r1, #10
 800a670:	d103      	bne.n	800a67a <__sfputc_r+0x1e>
 800a672:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a676:	f7ff bc5c 	b.w	8009f32 <__swbuf_r>
 800a67a:	6813      	ldr	r3, [r2, #0]
 800a67c:	1c58      	adds	r0, r3, #1
 800a67e:	6010      	str	r0, [r2, #0]
 800a680:	7019      	strb	r1, [r3, #0]
 800a682:	4608      	mov	r0, r1
 800a684:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a688:	4770      	bx	lr

0800a68a <__sfputs_r>:
 800a68a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a68c:	4606      	mov	r6, r0
 800a68e:	460f      	mov	r7, r1
 800a690:	4614      	mov	r4, r2
 800a692:	18d5      	adds	r5, r2, r3
 800a694:	42ac      	cmp	r4, r5
 800a696:	d101      	bne.n	800a69c <__sfputs_r+0x12>
 800a698:	2000      	movs	r0, #0
 800a69a:	e007      	b.n	800a6ac <__sfputs_r+0x22>
 800a69c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a6a0:	463a      	mov	r2, r7
 800a6a2:	4630      	mov	r0, r6
 800a6a4:	f7ff ffda 	bl	800a65c <__sfputc_r>
 800a6a8:	1c43      	adds	r3, r0, #1
 800a6aa:	d1f3      	bne.n	800a694 <__sfputs_r+0xa>
 800a6ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a6b0 <_vfiprintf_r>:
 800a6b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6b4:	460d      	mov	r5, r1
 800a6b6:	b09d      	sub	sp, #116	@ 0x74
 800a6b8:	4614      	mov	r4, r2
 800a6ba:	4698      	mov	r8, r3
 800a6bc:	4606      	mov	r6, r0
 800a6be:	b118      	cbz	r0, 800a6c8 <_vfiprintf_r+0x18>
 800a6c0:	6a03      	ldr	r3, [r0, #32]
 800a6c2:	b90b      	cbnz	r3, 800a6c8 <_vfiprintf_r+0x18>
 800a6c4:	f7ff fb2c 	bl	8009d20 <__sinit>
 800a6c8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a6ca:	07d9      	lsls	r1, r3, #31
 800a6cc:	d405      	bmi.n	800a6da <_vfiprintf_r+0x2a>
 800a6ce:	89ab      	ldrh	r3, [r5, #12]
 800a6d0:	059a      	lsls	r2, r3, #22
 800a6d2:	d402      	bmi.n	800a6da <_vfiprintf_r+0x2a>
 800a6d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a6d6:	f7ff fd60 	bl	800a19a <__retarget_lock_acquire_recursive>
 800a6da:	89ab      	ldrh	r3, [r5, #12]
 800a6dc:	071b      	lsls	r3, r3, #28
 800a6de:	d501      	bpl.n	800a6e4 <_vfiprintf_r+0x34>
 800a6e0:	692b      	ldr	r3, [r5, #16]
 800a6e2:	b99b      	cbnz	r3, 800a70c <_vfiprintf_r+0x5c>
 800a6e4:	4629      	mov	r1, r5
 800a6e6:	4630      	mov	r0, r6
 800a6e8:	f7ff fc62 	bl	8009fb0 <__swsetup_r>
 800a6ec:	b170      	cbz	r0, 800a70c <_vfiprintf_r+0x5c>
 800a6ee:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a6f0:	07dc      	lsls	r4, r3, #31
 800a6f2:	d504      	bpl.n	800a6fe <_vfiprintf_r+0x4e>
 800a6f4:	f04f 30ff 	mov.w	r0, #4294967295
 800a6f8:	b01d      	add	sp, #116	@ 0x74
 800a6fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6fe:	89ab      	ldrh	r3, [r5, #12]
 800a700:	0598      	lsls	r0, r3, #22
 800a702:	d4f7      	bmi.n	800a6f4 <_vfiprintf_r+0x44>
 800a704:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a706:	f7ff fd49 	bl	800a19c <__retarget_lock_release_recursive>
 800a70a:	e7f3      	b.n	800a6f4 <_vfiprintf_r+0x44>
 800a70c:	2300      	movs	r3, #0
 800a70e:	9309      	str	r3, [sp, #36]	@ 0x24
 800a710:	2320      	movs	r3, #32
 800a712:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a716:	f8cd 800c 	str.w	r8, [sp, #12]
 800a71a:	2330      	movs	r3, #48	@ 0x30
 800a71c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a8cc <_vfiprintf_r+0x21c>
 800a720:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a724:	f04f 0901 	mov.w	r9, #1
 800a728:	4623      	mov	r3, r4
 800a72a:	469a      	mov	sl, r3
 800a72c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a730:	b10a      	cbz	r2, 800a736 <_vfiprintf_r+0x86>
 800a732:	2a25      	cmp	r2, #37	@ 0x25
 800a734:	d1f9      	bne.n	800a72a <_vfiprintf_r+0x7a>
 800a736:	ebba 0b04 	subs.w	fp, sl, r4
 800a73a:	d00b      	beq.n	800a754 <_vfiprintf_r+0xa4>
 800a73c:	465b      	mov	r3, fp
 800a73e:	4622      	mov	r2, r4
 800a740:	4629      	mov	r1, r5
 800a742:	4630      	mov	r0, r6
 800a744:	f7ff ffa1 	bl	800a68a <__sfputs_r>
 800a748:	3001      	adds	r0, #1
 800a74a:	f000 80a7 	beq.w	800a89c <_vfiprintf_r+0x1ec>
 800a74e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a750:	445a      	add	r2, fp
 800a752:	9209      	str	r2, [sp, #36]	@ 0x24
 800a754:	f89a 3000 	ldrb.w	r3, [sl]
 800a758:	2b00      	cmp	r3, #0
 800a75a:	f000 809f 	beq.w	800a89c <_vfiprintf_r+0x1ec>
 800a75e:	2300      	movs	r3, #0
 800a760:	f04f 32ff 	mov.w	r2, #4294967295
 800a764:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a768:	f10a 0a01 	add.w	sl, sl, #1
 800a76c:	9304      	str	r3, [sp, #16]
 800a76e:	9307      	str	r3, [sp, #28]
 800a770:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a774:	931a      	str	r3, [sp, #104]	@ 0x68
 800a776:	4654      	mov	r4, sl
 800a778:	2205      	movs	r2, #5
 800a77a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a77e:	4853      	ldr	r0, [pc, #332]	@ (800a8cc <_vfiprintf_r+0x21c>)
 800a780:	f7f5 fd3e 	bl	8000200 <memchr>
 800a784:	9a04      	ldr	r2, [sp, #16]
 800a786:	b9d8      	cbnz	r0, 800a7c0 <_vfiprintf_r+0x110>
 800a788:	06d1      	lsls	r1, r2, #27
 800a78a:	bf44      	itt	mi
 800a78c:	2320      	movmi	r3, #32
 800a78e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a792:	0713      	lsls	r3, r2, #28
 800a794:	bf44      	itt	mi
 800a796:	232b      	movmi	r3, #43	@ 0x2b
 800a798:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a79c:	f89a 3000 	ldrb.w	r3, [sl]
 800a7a0:	2b2a      	cmp	r3, #42	@ 0x2a
 800a7a2:	d015      	beq.n	800a7d0 <_vfiprintf_r+0x120>
 800a7a4:	9a07      	ldr	r2, [sp, #28]
 800a7a6:	4654      	mov	r4, sl
 800a7a8:	2000      	movs	r0, #0
 800a7aa:	f04f 0c0a 	mov.w	ip, #10
 800a7ae:	4621      	mov	r1, r4
 800a7b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a7b4:	3b30      	subs	r3, #48	@ 0x30
 800a7b6:	2b09      	cmp	r3, #9
 800a7b8:	d94b      	bls.n	800a852 <_vfiprintf_r+0x1a2>
 800a7ba:	b1b0      	cbz	r0, 800a7ea <_vfiprintf_r+0x13a>
 800a7bc:	9207      	str	r2, [sp, #28]
 800a7be:	e014      	b.n	800a7ea <_vfiprintf_r+0x13a>
 800a7c0:	eba0 0308 	sub.w	r3, r0, r8
 800a7c4:	fa09 f303 	lsl.w	r3, r9, r3
 800a7c8:	4313      	orrs	r3, r2
 800a7ca:	9304      	str	r3, [sp, #16]
 800a7cc:	46a2      	mov	sl, r4
 800a7ce:	e7d2      	b.n	800a776 <_vfiprintf_r+0xc6>
 800a7d0:	9b03      	ldr	r3, [sp, #12]
 800a7d2:	1d19      	adds	r1, r3, #4
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	9103      	str	r1, [sp, #12]
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	bfbb      	ittet	lt
 800a7dc:	425b      	neglt	r3, r3
 800a7de:	f042 0202 	orrlt.w	r2, r2, #2
 800a7e2:	9307      	strge	r3, [sp, #28]
 800a7e4:	9307      	strlt	r3, [sp, #28]
 800a7e6:	bfb8      	it	lt
 800a7e8:	9204      	strlt	r2, [sp, #16]
 800a7ea:	7823      	ldrb	r3, [r4, #0]
 800a7ec:	2b2e      	cmp	r3, #46	@ 0x2e
 800a7ee:	d10a      	bne.n	800a806 <_vfiprintf_r+0x156>
 800a7f0:	7863      	ldrb	r3, [r4, #1]
 800a7f2:	2b2a      	cmp	r3, #42	@ 0x2a
 800a7f4:	d132      	bne.n	800a85c <_vfiprintf_r+0x1ac>
 800a7f6:	9b03      	ldr	r3, [sp, #12]
 800a7f8:	1d1a      	adds	r2, r3, #4
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	9203      	str	r2, [sp, #12]
 800a7fe:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a802:	3402      	adds	r4, #2
 800a804:	9305      	str	r3, [sp, #20]
 800a806:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a8dc <_vfiprintf_r+0x22c>
 800a80a:	7821      	ldrb	r1, [r4, #0]
 800a80c:	2203      	movs	r2, #3
 800a80e:	4650      	mov	r0, sl
 800a810:	f7f5 fcf6 	bl	8000200 <memchr>
 800a814:	b138      	cbz	r0, 800a826 <_vfiprintf_r+0x176>
 800a816:	9b04      	ldr	r3, [sp, #16]
 800a818:	eba0 000a 	sub.w	r0, r0, sl
 800a81c:	2240      	movs	r2, #64	@ 0x40
 800a81e:	4082      	lsls	r2, r0
 800a820:	4313      	orrs	r3, r2
 800a822:	3401      	adds	r4, #1
 800a824:	9304      	str	r3, [sp, #16]
 800a826:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a82a:	4829      	ldr	r0, [pc, #164]	@ (800a8d0 <_vfiprintf_r+0x220>)
 800a82c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a830:	2206      	movs	r2, #6
 800a832:	f7f5 fce5 	bl	8000200 <memchr>
 800a836:	2800      	cmp	r0, #0
 800a838:	d03f      	beq.n	800a8ba <_vfiprintf_r+0x20a>
 800a83a:	4b26      	ldr	r3, [pc, #152]	@ (800a8d4 <_vfiprintf_r+0x224>)
 800a83c:	bb1b      	cbnz	r3, 800a886 <_vfiprintf_r+0x1d6>
 800a83e:	9b03      	ldr	r3, [sp, #12]
 800a840:	3307      	adds	r3, #7
 800a842:	f023 0307 	bic.w	r3, r3, #7
 800a846:	3308      	adds	r3, #8
 800a848:	9303      	str	r3, [sp, #12]
 800a84a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a84c:	443b      	add	r3, r7
 800a84e:	9309      	str	r3, [sp, #36]	@ 0x24
 800a850:	e76a      	b.n	800a728 <_vfiprintf_r+0x78>
 800a852:	fb0c 3202 	mla	r2, ip, r2, r3
 800a856:	460c      	mov	r4, r1
 800a858:	2001      	movs	r0, #1
 800a85a:	e7a8      	b.n	800a7ae <_vfiprintf_r+0xfe>
 800a85c:	2300      	movs	r3, #0
 800a85e:	3401      	adds	r4, #1
 800a860:	9305      	str	r3, [sp, #20]
 800a862:	4619      	mov	r1, r3
 800a864:	f04f 0c0a 	mov.w	ip, #10
 800a868:	4620      	mov	r0, r4
 800a86a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a86e:	3a30      	subs	r2, #48	@ 0x30
 800a870:	2a09      	cmp	r2, #9
 800a872:	d903      	bls.n	800a87c <_vfiprintf_r+0x1cc>
 800a874:	2b00      	cmp	r3, #0
 800a876:	d0c6      	beq.n	800a806 <_vfiprintf_r+0x156>
 800a878:	9105      	str	r1, [sp, #20]
 800a87a:	e7c4      	b.n	800a806 <_vfiprintf_r+0x156>
 800a87c:	fb0c 2101 	mla	r1, ip, r1, r2
 800a880:	4604      	mov	r4, r0
 800a882:	2301      	movs	r3, #1
 800a884:	e7f0      	b.n	800a868 <_vfiprintf_r+0x1b8>
 800a886:	ab03      	add	r3, sp, #12
 800a888:	9300      	str	r3, [sp, #0]
 800a88a:	462a      	mov	r2, r5
 800a88c:	4b12      	ldr	r3, [pc, #72]	@ (800a8d8 <_vfiprintf_r+0x228>)
 800a88e:	a904      	add	r1, sp, #16
 800a890:	4630      	mov	r0, r6
 800a892:	f3af 8000 	nop.w
 800a896:	4607      	mov	r7, r0
 800a898:	1c78      	adds	r0, r7, #1
 800a89a:	d1d6      	bne.n	800a84a <_vfiprintf_r+0x19a>
 800a89c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a89e:	07d9      	lsls	r1, r3, #31
 800a8a0:	d405      	bmi.n	800a8ae <_vfiprintf_r+0x1fe>
 800a8a2:	89ab      	ldrh	r3, [r5, #12]
 800a8a4:	059a      	lsls	r2, r3, #22
 800a8a6:	d402      	bmi.n	800a8ae <_vfiprintf_r+0x1fe>
 800a8a8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a8aa:	f7ff fc77 	bl	800a19c <__retarget_lock_release_recursive>
 800a8ae:	89ab      	ldrh	r3, [r5, #12]
 800a8b0:	065b      	lsls	r3, r3, #25
 800a8b2:	f53f af1f 	bmi.w	800a6f4 <_vfiprintf_r+0x44>
 800a8b6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a8b8:	e71e      	b.n	800a6f8 <_vfiprintf_r+0x48>
 800a8ba:	ab03      	add	r3, sp, #12
 800a8bc:	9300      	str	r3, [sp, #0]
 800a8be:	462a      	mov	r2, r5
 800a8c0:	4b05      	ldr	r3, [pc, #20]	@ (800a8d8 <_vfiprintf_r+0x228>)
 800a8c2:	a904      	add	r1, sp, #16
 800a8c4:	4630      	mov	r0, r6
 800a8c6:	f000 f879 	bl	800a9bc <_printf_i>
 800a8ca:	e7e4      	b.n	800a896 <_vfiprintf_r+0x1e6>
 800a8cc:	0800b02c 	.word	0x0800b02c
 800a8d0:	0800b036 	.word	0x0800b036
 800a8d4:	00000000 	.word	0x00000000
 800a8d8:	0800a68b 	.word	0x0800a68b
 800a8dc:	0800b032 	.word	0x0800b032

0800a8e0 <_printf_common>:
 800a8e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a8e4:	4616      	mov	r6, r2
 800a8e6:	4698      	mov	r8, r3
 800a8e8:	688a      	ldr	r2, [r1, #8]
 800a8ea:	690b      	ldr	r3, [r1, #16]
 800a8ec:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a8f0:	4293      	cmp	r3, r2
 800a8f2:	bfb8      	it	lt
 800a8f4:	4613      	movlt	r3, r2
 800a8f6:	6033      	str	r3, [r6, #0]
 800a8f8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a8fc:	4607      	mov	r7, r0
 800a8fe:	460c      	mov	r4, r1
 800a900:	b10a      	cbz	r2, 800a906 <_printf_common+0x26>
 800a902:	3301      	adds	r3, #1
 800a904:	6033      	str	r3, [r6, #0]
 800a906:	6823      	ldr	r3, [r4, #0]
 800a908:	0699      	lsls	r1, r3, #26
 800a90a:	bf42      	ittt	mi
 800a90c:	6833      	ldrmi	r3, [r6, #0]
 800a90e:	3302      	addmi	r3, #2
 800a910:	6033      	strmi	r3, [r6, #0]
 800a912:	6825      	ldr	r5, [r4, #0]
 800a914:	f015 0506 	ands.w	r5, r5, #6
 800a918:	d106      	bne.n	800a928 <_printf_common+0x48>
 800a91a:	f104 0a19 	add.w	sl, r4, #25
 800a91e:	68e3      	ldr	r3, [r4, #12]
 800a920:	6832      	ldr	r2, [r6, #0]
 800a922:	1a9b      	subs	r3, r3, r2
 800a924:	42ab      	cmp	r3, r5
 800a926:	dc26      	bgt.n	800a976 <_printf_common+0x96>
 800a928:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a92c:	6822      	ldr	r2, [r4, #0]
 800a92e:	3b00      	subs	r3, #0
 800a930:	bf18      	it	ne
 800a932:	2301      	movne	r3, #1
 800a934:	0692      	lsls	r2, r2, #26
 800a936:	d42b      	bmi.n	800a990 <_printf_common+0xb0>
 800a938:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a93c:	4641      	mov	r1, r8
 800a93e:	4638      	mov	r0, r7
 800a940:	47c8      	blx	r9
 800a942:	3001      	adds	r0, #1
 800a944:	d01e      	beq.n	800a984 <_printf_common+0xa4>
 800a946:	6823      	ldr	r3, [r4, #0]
 800a948:	6922      	ldr	r2, [r4, #16]
 800a94a:	f003 0306 	and.w	r3, r3, #6
 800a94e:	2b04      	cmp	r3, #4
 800a950:	bf02      	ittt	eq
 800a952:	68e5      	ldreq	r5, [r4, #12]
 800a954:	6833      	ldreq	r3, [r6, #0]
 800a956:	1aed      	subeq	r5, r5, r3
 800a958:	68a3      	ldr	r3, [r4, #8]
 800a95a:	bf0c      	ite	eq
 800a95c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a960:	2500      	movne	r5, #0
 800a962:	4293      	cmp	r3, r2
 800a964:	bfc4      	itt	gt
 800a966:	1a9b      	subgt	r3, r3, r2
 800a968:	18ed      	addgt	r5, r5, r3
 800a96a:	2600      	movs	r6, #0
 800a96c:	341a      	adds	r4, #26
 800a96e:	42b5      	cmp	r5, r6
 800a970:	d11a      	bne.n	800a9a8 <_printf_common+0xc8>
 800a972:	2000      	movs	r0, #0
 800a974:	e008      	b.n	800a988 <_printf_common+0xa8>
 800a976:	2301      	movs	r3, #1
 800a978:	4652      	mov	r2, sl
 800a97a:	4641      	mov	r1, r8
 800a97c:	4638      	mov	r0, r7
 800a97e:	47c8      	blx	r9
 800a980:	3001      	adds	r0, #1
 800a982:	d103      	bne.n	800a98c <_printf_common+0xac>
 800a984:	f04f 30ff 	mov.w	r0, #4294967295
 800a988:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a98c:	3501      	adds	r5, #1
 800a98e:	e7c6      	b.n	800a91e <_printf_common+0x3e>
 800a990:	18e1      	adds	r1, r4, r3
 800a992:	1c5a      	adds	r2, r3, #1
 800a994:	2030      	movs	r0, #48	@ 0x30
 800a996:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a99a:	4422      	add	r2, r4
 800a99c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a9a0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a9a4:	3302      	adds	r3, #2
 800a9a6:	e7c7      	b.n	800a938 <_printf_common+0x58>
 800a9a8:	2301      	movs	r3, #1
 800a9aa:	4622      	mov	r2, r4
 800a9ac:	4641      	mov	r1, r8
 800a9ae:	4638      	mov	r0, r7
 800a9b0:	47c8      	blx	r9
 800a9b2:	3001      	adds	r0, #1
 800a9b4:	d0e6      	beq.n	800a984 <_printf_common+0xa4>
 800a9b6:	3601      	adds	r6, #1
 800a9b8:	e7d9      	b.n	800a96e <_printf_common+0x8e>
	...

0800a9bc <_printf_i>:
 800a9bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a9c0:	7e0f      	ldrb	r7, [r1, #24]
 800a9c2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a9c4:	2f78      	cmp	r7, #120	@ 0x78
 800a9c6:	4691      	mov	r9, r2
 800a9c8:	4680      	mov	r8, r0
 800a9ca:	460c      	mov	r4, r1
 800a9cc:	469a      	mov	sl, r3
 800a9ce:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a9d2:	d807      	bhi.n	800a9e4 <_printf_i+0x28>
 800a9d4:	2f62      	cmp	r7, #98	@ 0x62
 800a9d6:	d80a      	bhi.n	800a9ee <_printf_i+0x32>
 800a9d8:	2f00      	cmp	r7, #0
 800a9da:	f000 80d2 	beq.w	800ab82 <_printf_i+0x1c6>
 800a9de:	2f58      	cmp	r7, #88	@ 0x58
 800a9e0:	f000 80b9 	beq.w	800ab56 <_printf_i+0x19a>
 800a9e4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a9e8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a9ec:	e03a      	b.n	800aa64 <_printf_i+0xa8>
 800a9ee:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a9f2:	2b15      	cmp	r3, #21
 800a9f4:	d8f6      	bhi.n	800a9e4 <_printf_i+0x28>
 800a9f6:	a101      	add	r1, pc, #4	@ (adr r1, 800a9fc <_printf_i+0x40>)
 800a9f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a9fc:	0800aa55 	.word	0x0800aa55
 800aa00:	0800aa69 	.word	0x0800aa69
 800aa04:	0800a9e5 	.word	0x0800a9e5
 800aa08:	0800a9e5 	.word	0x0800a9e5
 800aa0c:	0800a9e5 	.word	0x0800a9e5
 800aa10:	0800a9e5 	.word	0x0800a9e5
 800aa14:	0800aa69 	.word	0x0800aa69
 800aa18:	0800a9e5 	.word	0x0800a9e5
 800aa1c:	0800a9e5 	.word	0x0800a9e5
 800aa20:	0800a9e5 	.word	0x0800a9e5
 800aa24:	0800a9e5 	.word	0x0800a9e5
 800aa28:	0800ab69 	.word	0x0800ab69
 800aa2c:	0800aa93 	.word	0x0800aa93
 800aa30:	0800ab23 	.word	0x0800ab23
 800aa34:	0800a9e5 	.word	0x0800a9e5
 800aa38:	0800a9e5 	.word	0x0800a9e5
 800aa3c:	0800ab8b 	.word	0x0800ab8b
 800aa40:	0800a9e5 	.word	0x0800a9e5
 800aa44:	0800aa93 	.word	0x0800aa93
 800aa48:	0800a9e5 	.word	0x0800a9e5
 800aa4c:	0800a9e5 	.word	0x0800a9e5
 800aa50:	0800ab2b 	.word	0x0800ab2b
 800aa54:	6833      	ldr	r3, [r6, #0]
 800aa56:	1d1a      	adds	r2, r3, #4
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	6032      	str	r2, [r6, #0]
 800aa5c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800aa60:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800aa64:	2301      	movs	r3, #1
 800aa66:	e09d      	b.n	800aba4 <_printf_i+0x1e8>
 800aa68:	6833      	ldr	r3, [r6, #0]
 800aa6a:	6820      	ldr	r0, [r4, #0]
 800aa6c:	1d19      	adds	r1, r3, #4
 800aa6e:	6031      	str	r1, [r6, #0]
 800aa70:	0606      	lsls	r6, r0, #24
 800aa72:	d501      	bpl.n	800aa78 <_printf_i+0xbc>
 800aa74:	681d      	ldr	r5, [r3, #0]
 800aa76:	e003      	b.n	800aa80 <_printf_i+0xc4>
 800aa78:	0645      	lsls	r5, r0, #25
 800aa7a:	d5fb      	bpl.n	800aa74 <_printf_i+0xb8>
 800aa7c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800aa80:	2d00      	cmp	r5, #0
 800aa82:	da03      	bge.n	800aa8c <_printf_i+0xd0>
 800aa84:	232d      	movs	r3, #45	@ 0x2d
 800aa86:	426d      	negs	r5, r5
 800aa88:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800aa8c:	4859      	ldr	r0, [pc, #356]	@ (800abf4 <_printf_i+0x238>)
 800aa8e:	230a      	movs	r3, #10
 800aa90:	e011      	b.n	800aab6 <_printf_i+0xfa>
 800aa92:	6821      	ldr	r1, [r4, #0]
 800aa94:	6833      	ldr	r3, [r6, #0]
 800aa96:	0608      	lsls	r0, r1, #24
 800aa98:	f853 5b04 	ldr.w	r5, [r3], #4
 800aa9c:	d402      	bmi.n	800aaa4 <_printf_i+0xe8>
 800aa9e:	0649      	lsls	r1, r1, #25
 800aaa0:	bf48      	it	mi
 800aaa2:	b2ad      	uxthmi	r5, r5
 800aaa4:	2f6f      	cmp	r7, #111	@ 0x6f
 800aaa6:	4853      	ldr	r0, [pc, #332]	@ (800abf4 <_printf_i+0x238>)
 800aaa8:	6033      	str	r3, [r6, #0]
 800aaaa:	bf14      	ite	ne
 800aaac:	230a      	movne	r3, #10
 800aaae:	2308      	moveq	r3, #8
 800aab0:	2100      	movs	r1, #0
 800aab2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800aab6:	6866      	ldr	r6, [r4, #4]
 800aab8:	60a6      	str	r6, [r4, #8]
 800aaba:	2e00      	cmp	r6, #0
 800aabc:	bfa2      	ittt	ge
 800aabe:	6821      	ldrge	r1, [r4, #0]
 800aac0:	f021 0104 	bicge.w	r1, r1, #4
 800aac4:	6021      	strge	r1, [r4, #0]
 800aac6:	b90d      	cbnz	r5, 800aacc <_printf_i+0x110>
 800aac8:	2e00      	cmp	r6, #0
 800aaca:	d04b      	beq.n	800ab64 <_printf_i+0x1a8>
 800aacc:	4616      	mov	r6, r2
 800aace:	fbb5 f1f3 	udiv	r1, r5, r3
 800aad2:	fb03 5711 	mls	r7, r3, r1, r5
 800aad6:	5dc7      	ldrb	r7, [r0, r7]
 800aad8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800aadc:	462f      	mov	r7, r5
 800aade:	42bb      	cmp	r3, r7
 800aae0:	460d      	mov	r5, r1
 800aae2:	d9f4      	bls.n	800aace <_printf_i+0x112>
 800aae4:	2b08      	cmp	r3, #8
 800aae6:	d10b      	bne.n	800ab00 <_printf_i+0x144>
 800aae8:	6823      	ldr	r3, [r4, #0]
 800aaea:	07df      	lsls	r7, r3, #31
 800aaec:	d508      	bpl.n	800ab00 <_printf_i+0x144>
 800aaee:	6923      	ldr	r3, [r4, #16]
 800aaf0:	6861      	ldr	r1, [r4, #4]
 800aaf2:	4299      	cmp	r1, r3
 800aaf4:	bfde      	ittt	le
 800aaf6:	2330      	movle	r3, #48	@ 0x30
 800aaf8:	f806 3c01 	strble.w	r3, [r6, #-1]
 800aafc:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ab00:	1b92      	subs	r2, r2, r6
 800ab02:	6122      	str	r2, [r4, #16]
 800ab04:	f8cd a000 	str.w	sl, [sp]
 800ab08:	464b      	mov	r3, r9
 800ab0a:	aa03      	add	r2, sp, #12
 800ab0c:	4621      	mov	r1, r4
 800ab0e:	4640      	mov	r0, r8
 800ab10:	f7ff fee6 	bl	800a8e0 <_printf_common>
 800ab14:	3001      	adds	r0, #1
 800ab16:	d14a      	bne.n	800abae <_printf_i+0x1f2>
 800ab18:	f04f 30ff 	mov.w	r0, #4294967295
 800ab1c:	b004      	add	sp, #16
 800ab1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab22:	6823      	ldr	r3, [r4, #0]
 800ab24:	f043 0320 	orr.w	r3, r3, #32
 800ab28:	6023      	str	r3, [r4, #0]
 800ab2a:	4833      	ldr	r0, [pc, #204]	@ (800abf8 <_printf_i+0x23c>)
 800ab2c:	2778      	movs	r7, #120	@ 0x78
 800ab2e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ab32:	6823      	ldr	r3, [r4, #0]
 800ab34:	6831      	ldr	r1, [r6, #0]
 800ab36:	061f      	lsls	r7, r3, #24
 800ab38:	f851 5b04 	ldr.w	r5, [r1], #4
 800ab3c:	d402      	bmi.n	800ab44 <_printf_i+0x188>
 800ab3e:	065f      	lsls	r7, r3, #25
 800ab40:	bf48      	it	mi
 800ab42:	b2ad      	uxthmi	r5, r5
 800ab44:	6031      	str	r1, [r6, #0]
 800ab46:	07d9      	lsls	r1, r3, #31
 800ab48:	bf44      	itt	mi
 800ab4a:	f043 0320 	orrmi.w	r3, r3, #32
 800ab4e:	6023      	strmi	r3, [r4, #0]
 800ab50:	b11d      	cbz	r5, 800ab5a <_printf_i+0x19e>
 800ab52:	2310      	movs	r3, #16
 800ab54:	e7ac      	b.n	800aab0 <_printf_i+0xf4>
 800ab56:	4827      	ldr	r0, [pc, #156]	@ (800abf4 <_printf_i+0x238>)
 800ab58:	e7e9      	b.n	800ab2e <_printf_i+0x172>
 800ab5a:	6823      	ldr	r3, [r4, #0]
 800ab5c:	f023 0320 	bic.w	r3, r3, #32
 800ab60:	6023      	str	r3, [r4, #0]
 800ab62:	e7f6      	b.n	800ab52 <_printf_i+0x196>
 800ab64:	4616      	mov	r6, r2
 800ab66:	e7bd      	b.n	800aae4 <_printf_i+0x128>
 800ab68:	6833      	ldr	r3, [r6, #0]
 800ab6a:	6825      	ldr	r5, [r4, #0]
 800ab6c:	6961      	ldr	r1, [r4, #20]
 800ab6e:	1d18      	adds	r0, r3, #4
 800ab70:	6030      	str	r0, [r6, #0]
 800ab72:	062e      	lsls	r6, r5, #24
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	d501      	bpl.n	800ab7c <_printf_i+0x1c0>
 800ab78:	6019      	str	r1, [r3, #0]
 800ab7a:	e002      	b.n	800ab82 <_printf_i+0x1c6>
 800ab7c:	0668      	lsls	r0, r5, #25
 800ab7e:	d5fb      	bpl.n	800ab78 <_printf_i+0x1bc>
 800ab80:	8019      	strh	r1, [r3, #0]
 800ab82:	2300      	movs	r3, #0
 800ab84:	6123      	str	r3, [r4, #16]
 800ab86:	4616      	mov	r6, r2
 800ab88:	e7bc      	b.n	800ab04 <_printf_i+0x148>
 800ab8a:	6833      	ldr	r3, [r6, #0]
 800ab8c:	1d1a      	adds	r2, r3, #4
 800ab8e:	6032      	str	r2, [r6, #0]
 800ab90:	681e      	ldr	r6, [r3, #0]
 800ab92:	6862      	ldr	r2, [r4, #4]
 800ab94:	2100      	movs	r1, #0
 800ab96:	4630      	mov	r0, r6
 800ab98:	f7f5 fb32 	bl	8000200 <memchr>
 800ab9c:	b108      	cbz	r0, 800aba2 <_printf_i+0x1e6>
 800ab9e:	1b80      	subs	r0, r0, r6
 800aba0:	6060      	str	r0, [r4, #4]
 800aba2:	6863      	ldr	r3, [r4, #4]
 800aba4:	6123      	str	r3, [r4, #16]
 800aba6:	2300      	movs	r3, #0
 800aba8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800abac:	e7aa      	b.n	800ab04 <_printf_i+0x148>
 800abae:	6923      	ldr	r3, [r4, #16]
 800abb0:	4632      	mov	r2, r6
 800abb2:	4649      	mov	r1, r9
 800abb4:	4640      	mov	r0, r8
 800abb6:	47d0      	blx	sl
 800abb8:	3001      	adds	r0, #1
 800abba:	d0ad      	beq.n	800ab18 <_printf_i+0x15c>
 800abbc:	6823      	ldr	r3, [r4, #0]
 800abbe:	079b      	lsls	r3, r3, #30
 800abc0:	d413      	bmi.n	800abea <_printf_i+0x22e>
 800abc2:	68e0      	ldr	r0, [r4, #12]
 800abc4:	9b03      	ldr	r3, [sp, #12]
 800abc6:	4298      	cmp	r0, r3
 800abc8:	bfb8      	it	lt
 800abca:	4618      	movlt	r0, r3
 800abcc:	e7a6      	b.n	800ab1c <_printf_i+0x160>
 800abce:	2301      	movs	r3, #1
 800abd0:	4632      	mov	r2, r6
 800abd2:	4649      	mov	r1, r9
 800abd4:	4640      	mov	r0, r8
 800abd6:	47d0      	blx	sl
 800abd8:	3001      	adds	r0, #1
 800abda:	d09d      	beq.n	800ab18 <_printf_i+0x15c>
 800abdc:	3501      	adds	r5, #1
 800abde:	68e3      	ldr	r3, [r4, #12]
 800abe0:	9903      	ldr	r1, [sp, #12]
 800abe2:	1a5b      	subs	r3, r3, r1
 800abe4:	42ab      	cmp	r3, r5
 800abe6:	dcf2      	bgt.n	800abce <_printf_i+0x212>
 800abe8:	e7eb      	b.n	800abc2 <_printf_i+0x206>
 800abea:	2500      	movs	r5, #0
 800abec:	f104 0619 	add.w	r6, r4, #25
 800abf0:	e7f5      	b.n	800abde <_printf_i+0x222>
 800abf2:	bf00      	nop
 800abf4:	0800b03d 	.word	0x0800b03d
 800abf8:	0800b04e 	.word	0x0800b04e

0800abfc <__sflush_r>:
 800abfc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ac00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac04:	0716      	lsls	r6, r2, #28
 800ac06:	4605      	mov	r5, r0
 800ac08:	460c      	mov	r4, r1
 800ac0a:	d454      	bmi.n	800acb6 <__sflush_r+0xba>
 800ac0c:	684b      	ldr	r3, [r1, #4]
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	dc02      	bgt.n	800ac18 <__sflush_r+0x1c>
 800ac12:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	dd48      	ble.n	800acaa <__sflush_r+0xae>
 800ac18:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ac1a:	2e00      	cmp	r6, #0
 800ac1c:	d045      	beq.n	800acaa <__sflush_r+0xae>
 800ac1e:	2300      	movs	r3, #0
 800ac20:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ac24:	682f      	ldr	r7, [r5, #0]
 800ac26:	6a21      	ldr	r1, [r4, #32]
 800ac28:	602b      	str	r3, [r5, #0]
 800ac2a:	d030      	beq.n	800ac8e <__sflush_r+0x92>
 800ac2c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ac2e:	89a3      	ldrh	r3, [r4, #12]
 800ac30:	0759      	lsls	r1, r3, #29
 800ac32:	d505      	bpl.n	800ac40 <__sflush_r+0x44>
 800ac34:	6863      	ldr	r3, [r4, #4]
 800ac36:	1ad2      	subs	r2, r2, r3
 800ac38:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ac3a:	b10b      	cbz	r3, 800ac40 <__sflush_r+0x44>
 800ac3c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ac3e:	1ad2      	subs	r2, r2, r3
 800ac40:	2300      	movs	r3, #0
 800ac42:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ac44:	6a21      	ldr	r1, [r4, #32]
 800ac46:	4628      	mov	r0, r5
 800ac48:	47b0      	blx	r6
 800ac4a:	1c43      	adds	r3, r0, #1
 800ac4c:	89a3      	ldrh	r3, [r4, #12]
 800ac4e:	d106      	bne.n	800ac5e <__sflush_r+0x62>
 800ac50:	6829      	ldr	r1, [r5, #0]
 800ac52:	291d      	cmp	r1, #29
 800ac54:	d82b      	bhi.n	800acae <__sflush_r+0xb2>
 800ac56:	4a2a      	ldr	r2, [pc, #168]	@ (800ad00 <__sflush_r+0x104>)
 800ac58:	410a      	asrs	r2, r1
 800ac5a:	07d6      	lsls	r6, r2, #31
 800ac5c:	d427      	bmi.n	800acae <__sflush_r+0xb2>
 800ac5e:	2200      	movs	r2, #0
 800ac60:	6062      	str	r2, [r4, #4]
 800ac62:	04d9      	lsls	r1, r3, #19
 800ac64:	6922      	ldr	r2, [r4, #16]
 800ac66:	6022      	str	r2, [r4, #0]
 800ac68:	d504      	bpl.n	800ac74 <__sflush_r+0x78>
 800ac6a:	1c42      	adds	r2, r0, #1
 800ac6c:	d101      	bne.n	800ac72 <__sflush_r+0x76>
 800ac6e:	682b      	ldr	r3, [r5, #0]
 800ac70:	b903      	cbnz	r3, 800ac74 <__sflush_r+0x78>
 800ac72:	6560      	str	r0, [r4, #84]	@ 0x54
 800ac74:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ac76:	602f      	str	r7, [r5, #0]
 800ac78:	b1b9      	cbz	r1, 800acaa <__sflush_r+0xae>
 800ac7a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ac7e:	4299      	cmp	r1, r3
 800ac80:	d002      	beq.n	800ac88 <__sflush_r+0x8c>
 800ac82:	4628      	mov	r0, r5
 800ac84:	f7ff fa9a 	bl	800a1bc <_free_r>
 800ac88:	2300      	movs	r3, #0
 800ac8a:	6363      	str	r3, [r4, #52]	@ 0x34
 800ac8c:	e00d      	b.n	800acaa <__sflush_r+0xae>
 800ac8e:	2301      	movs	r3, #1
 800ac90:	4628      	mov	r0, r5
 800ac92:	47b0      	blx	r6
 800ac94:	4602      	mov	r2, r0
 800ac96:	1c50      	adds	r0, r2, #1
 800ac98:	d1c9      	bne.n	800ac2e <__sflush_r+0x32>
 800ac9a:	682b      	ldr	r3, [r5, #0]
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d0c6      	beq.n	800ac2e <__sflush_r+0x32>
 800aca0:	2b1d      	cmp	r3, #29
 800aca2:	d001      	beq.n	800aca8 <__sflush_r+0xac>
 800aca4:	2b16      	cmp	r3, #22
 800aca6:	d11e      	bne.n	800ace6 <__sflush_r+0xea>
 800aca8:	602f      	str	r7, [r5, #0]
 800acaa:	2000      	movs	r0, #0
 800acac:	e022      	b.n	800acf4 <__sflush_r+0xf8>
 800acae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800acb2:	b21b      	sxth	r3, r3
 800acb4:	e01b      	b.n	800acee <__sflush_r+0xf2>
 800acb6:	690f      	ldr	r7, [r1, #16]
 800acb8:	2f00      	cmp	r7, #0
 800acba:	d0f6      	beq.n	800acaa <__sflush_r+0xae>
 800acbc:	0793      	lsls	r3, r2, #30
 800acbe:	680e      	ldr	r6, [r1, #0]
 800acc0:	bf08      	it	eq
 800acc2:	694b      	ldreq	r3, [r1, #20]
 800acc4:	600f      	str	r7, [r1, #0]
 800acc6:	bf18      	it	ne
 800acc8:	2300      	movne	r3, #0
 800acca:	eba6 0807 	sub.w	r8, r6, r7
 800acce:	608b      	str	r3, [r1, #8]
 800acd0:	f1b8 0f00 	cmp.w	r8, #0
 800acd4:	dde9      	ble.n	800acaa <__sflush_r+0xae>
 800acd6:	6a21      	ldr	r1, [r4, #32]
 800acd8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800acda:	4643      	mov	r3, r8
 800acdc:	463a      	mov	r2, r7
 800acde:	4628      	mov	r0, r5
 800ace0:	47b0      	blx	r6
 800ace2:	2800      	cmp	r0, #0
 800ace4:	dc08      	bgt.n	800acf8 <__sflush_r+0xfc>
 800ace6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800acea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800acee:	81a3      	strh	r3, [r4, #12]
 800acf0:	f04f 30ff 	mov.w	r0, #4294967295
 800acf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800acf8:	4407      	add	r7, r0
 800acfa:	eba8 0800 	sub.w	r8, r8, r0
 800acfe:	e7e7      	b.n	800acd0 <__sflush_r+0xd4>
 800ad00:	dfbffffe 	.word	0xdfbffffe

0800ad04 <_fflush_r>:
 800ad04:	b538      	push	{r3, r4, r5, lr}
 800ad06:	690b      	ldr	r3, [r1, #16]
 800ad08:	4605      	mov	r5, r0
 800ad0a:	460c      	mov	r4, r1
 800ad0c:	b913      	cbnz	r3, 800ad14 <_fflush_r+0x10>
 800ad0e:	2500      	movs	r5, #0
 800ad10:	4628      	mov	r0, r5
 800ad12:	bd38      	pop	{r3, r4, r5, pc}
 800ad14:	b118      	cbz	r0, 800ad1e <_fflush_r+0x1a>
 800ad16:	6a03      	ldr	r3, [r0, #32]
 800ad18:	b90b      	cbnz	r3, 800ad1e <_fflush_r+0x1a>
 800ad1a:	f7ff f801 	bl	8009d20 <__sinit>
 800ad1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d0f3      	beq.n	800ad0e <_fflush_r+0xa>
 800ad26:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ad28:	07d0      	lsls	r0, r2, #31
 800ad2a:	d404      	bmi.n	800ad36 <_fflush_r+0x32>
 800ad2c:	0599      	lsls	r1, r3, #22
 800ad2e:	d402      	bmi.n	800ad36 <_fflush_r+0x32>
 800ad30:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ad32:	f7ff fa32 	bl	800a19a <__retarget_lock_acquire_recursive>
 800ad36:	4628      	mov	r0, r5
 800ad38:	4621      	mov	r1, r4
 800ad3a:	f7ff ff5f 	bl	800abfc <__sflush_r>
 800ad3e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ad40:	07da      	lsls	r2, r3, #31
 800ad42:	4605      	mov	r5, r0
 800ad44:	d4e4      	bmi.n	800ad10 <_fflush_r+0xc>
 800ad46:	89a3      	ldrh	r3, [r4, #12]
 800ad48:	059b      	lsls	r3, r3, #22
 800ad4a:	d4e1      	bmi.n	800ad10 <_fflush_r+0xc>
 800ad4c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ad4e:	f7ff fa25 	bl	800a19c <__retarget_lock_release_recursive>
 800ad52:	e7dd      	b.n	800ad10 <_fflush_r+0xc>

0800ad54 <__swhatbuf_r>:
 800ad54:	b570      	push	{r4, r5, r6, lr}
 800ad56:	460c      	mov	r4, r1
 800ad58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad5c:	2900      	cmp	r1, #0
 800ad5e:	b096      	sub	sp, #88	@ 0x58
 800ad60:	4615      	mov	r5, r2
 800ad62:	461e      	mov	r6, r3
 800ad64:	da0d      	bge.n	800ad82 <__swhatbuf_r+0x2e>
 800ad66:	89a3      	ldrh	r3, [r4, #12]
 800ad68:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ad6c:	f04f 0100 	mov.w	r1, #0
 800ad70:	bf14      	ite	ne
 800ad72:	2340      	movne	r3, #64	@ 0x40
 800ad74:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ad78:	2000      	movs	r0, #0
 800ad7a:	6031      	str	r1, [r6, #0]
 800ad7c:	602b      	str	r3, [r5, #0]
 800ad7e:	b016      	add	sp, #88	@ 0x58
 800ad80:	bd70      	pop	{r4, r5, r6, pc}
 800ad82:	466a      	mov	r2, sp
 800ad84:	f000 f862 	bl	800ae4c <_fstat_r>
 800ad88:	2800      	cmp	r0, #0
 800ad8a:	dbec      	blt.n	800ad66 <__swhatbuf_r+0x12>
 800ad8c:	9901      	ldr	r1, [sp, #4]
 800ad8e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ad92:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ad96:	4259      	negs	r1, r3
 800ad98:	4159      	adcs	r1, r3
 800ad9a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ad9e:	e7eb      	b.n	800ad78 <__swhatbuf_r+0x24>

0800ada0 <__smakebuf_r>:
 800ada0:	898b      	ldrh	r3, [r1, #12]
 800ada2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ada4:	079d      	lsls	r5, r3, #30
 800ada6:	4606      	mov	r6, r0
 800ada8:	460c      	mov	r4, r1
 800adaa:	d507      	bpl.n	800adbc <__smakebuf_r+0x1c>
 800adac:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800adb0:	6023      	str	r3, [r4, #0]
 800adb2:	6123      	str	r3, [r4, #16]
 800adb4:	2301      	movs	r3, #1
 800adb6:	6163      	str	r3, [r4, #20]
 800adb8:	b003      	add	sp, #12
 800adba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800adbc:	ab01      	add	r3, sp, #4
 800adbe:	466a      	mov	r2, sp
 800adc0:	f7ff ffc8 	bl	800ad54 <__swhatbuf_r>
 800adc4:	9f00      	ldr	r7, [sp, #0]
 800adc6:	4605      	mov	r5, r0
 800adc8:	4639      	mov	r1, r7
 800adca:	4630      	mov	r0, r6
 800adcc:	f7ff fa62 	bl	800a294 <_malloc_r>
 800add0:	b948      	cbnz	r0, 800ade6 <__smakebuf_r+0x46>
 800add2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800add6:	059a      	lsls	r2, r3, #22
 800add8:	d4ee      	bmi.n	800adb8 <__smakebuf_r+0x18>
 800adda:	f023 0303 	bic.w	r3, r3, #3
 800adde:	f043 0302 	orr.w	r3, r3, #2
 800ade2:	81a3      	strh	r3, [r4, #12]
 800ade4:	e7e2      	b.n	800adac <__smakebuf_r+0xc>
 800ade6:	89a3      	ldrh	r3, [r4, #12]
 800ade8:	6020      	str	r0, [r4, #0]
 800adea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800adee:	81a3      	strh	r3, [r4, #12]
 800adf0:	9b01      	ldr	r3, [sp, #4]
 800adf2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800adf6:	b15b      	cbz	r3, 800ae10 <__smakebuf_r+0x70>
 800adf8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800adfc:	4630      	mov	r0, r6
 800adfe:	f000 f837 	bl	800ae70 <_isatty_r>
 800ae02:	b128      	cbz	r0, 800ae10 <__smakebuf_r+0x70>
 800ae04:	89a3      	ldrh	r3, [r4, #12]
 800ae06:	f023 0303 	bic.w	r3, r3, #3
 800ae0a:	f043 0301 	orr.w	r3, r3, #1
 800ae0e:	81a3      	strh	r3, [r4, #12]
 800ae10:	89a3      	ldrh	r3, [r4, #12]
 800ae12:	431d      	orrs	r5, r3
 800ae14:	81a5      	strh	r5, [r4, #12]
 800ae16:	e7cf      	b.n	800adb8 <__smakebuf_r+0x18>

0800ae18 <memmove>:
 800ae18:	4288      	cmp	r0, r1
 800ae1a:	b510      	push	{r4, lr}
 800ae1c:	eb01 0402 	add.w	r4, r1, r2
 800ae20:	d902      	bls.n	800ae28 <memmove+0x10>
 800ae22:	4284      	cmp	r4, r0
 800ae24:	4623      	mov	r3, r4
 800ae26:	d807      	bhi.n	800ae38 <memmove+0x20>
 800ae28:	1e43      	subs	r3, r0, #1
 800ae2a:	42a1      	cmp	r1, r4
 800ae2c:	d008      	beq.n	800ae40 <memmove+0x28>
 800ae2e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ae32:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ae36:	e7f8      	b.n	800ae2a <memmove+0x12>
 800ae38:	4402      	add	r2, r0
 800ae3a:	4601      	mov	r1, r0
 800ae3c:	428a      	cmp	r2, r1
 800ae3e:	d100      	bne.n	800ae42 <memmove+0x2a>
 800ae40:	bd10      	pop	{r4, pc}
 800ae42:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ae46:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ae4a:	e7f7      	b.n	800ae3c <memmove+0x24>

0800ae4c <_fstat_r>:
 800ae4c:	b538      	push	{r3, r4, r5, lr}
 800ae4e:	4d07      	ldr	r5, [pc, #28]	@ (800ae6c <_fstat_r+0x20>)
 800ae50:	2300      	movs	r3, #0
 800ae52:	4604      	mov	r4, r0
 800ae54:	4608      	mov	r0, r1
 800ae56:	4611      	mov	r1, r2
 800ae58:	602b      	str	r3, [r5, #0]
 800ae5a:	f7f6 f82a 	bl	8000eb2 <_fstat>
 800ae5e:	1c43      	adds	r3, r0, #1
 800ae60:	d102      	bne.n	800ae68 <_fstat_r+0x1c>
 800ae62:	682b      	ldr	r3, [r5, #0]
 800ae64:	b103      	cbz	r3, 800ae68 <_fstat_r+0x1c>
 800ae66:	6023      	str	r3, [r4, #0]
 800ae68:	bd38      	pop	{r3, r4, r5, pc}
 800ae6a:	bf00      	nop
 800ae6c:	2000d8cc 	.word	0x2000d8cc

0800ae70 <_isatty_r>:
 800ae70:	b538      	push	{r3, r4, r5, lr}
 800ae72:	4d06      	ldr	r5, [pc, #24]	@ (800ae8c <_isatty_r+0x1c>)
 800ae74:	2300      	movs	r3, #0
 800ae76:	4604      	mov	r4, r0
 800ae78:	4608      	mov	r0, r1
 800ae7a:	602b      	str	r3, [r5, #0]
 800ae7c:	f7f6 f829 	bl	8000ed2 <_isatty>
 800ae80:	1c43      	adds	r3, r0, #1
 800ae82:	d102      	bne.n	800ae8a <_isatty_r+0x1a>
 800ae84:	682b      	ldr	r3, [r5, #0]
 800ae86:	b103      	cbz	r3, 800ae8a <_isatty_r+0x1a>
 800ae88:	6023      	str	r3, [r4, #0]
 800ae8a:	bd38      	pop	{r3, r4, r5, pc}
 800ae8c:	2000d8cc 	.word	0x2000d8cc

0800ae90 <_sbrk_r>:
 800ae90:	b538      	push	{r3, r4, r5, lr}
 800ae92:	4d06      	ldr	r5, [pc, #24]	@ (800aeac <_sbrk_r+0x1c>)
 800ae94:	2300      	movs	r3, #0
 800ae96:	4604      	mov	r4, r0
 800ae98:	4608      	mov	r0, r1
 800ae9a:	602b      	str	r3, [r5, #0]
 800ae9c:	f7f6 f832 	bl	8000f04 <_sbrk>
 800aea0:	1c43      	adds	r3, r0, #1
 800aea2:	d102      	bne.n	800aeaa <_sbrk_r+0x1a>
 800aea4:	682b      	ldr	r3, [r5, #0]
 800aea6:	b103      	cbz	r3, 800aeaa <_sbrk_r+0x1a>
 800aea8:	6023      	str	r3, [r4, #0]
 800aeaa:	bd38      	pop	{r3, r4, r5, pc}
 800aeac:	2000d8cc 	.word	0x2000d8cc

0800aeb0 <_realloc_r>:
 800aeb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aeb4:	4680      	mov	r8, r0
 800aeb6:	4615      	mov	r5, r2
 800aeb8:	460c      	mov	r4, r1
 800aeba:	b921      	cbnz	r1, 800aec6 <_realloc_r+0x16>
 800aebc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aec0:	4611      	mov	r1, r2
 800aec2:	f7ff b9e7 	b.w	800a294 <_malloc_r>
 800aec6:	b92a      	cbnz	r2, 800aed4 <_realloc_r+0x24>
 800aec8:	f7ff f978 	bl	800a1bc <_free_r>
 800aecc:	2400      	movs	r4, #0
 800aece:	4620      	mov	r0, r4
 800aed0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aed4:	f000 f81a 	bl	800af0c <_malloc_usable_size_r>
 800aed8:	4285      	cmp	r5, r0
 800aeda:	4606      	mov	r6, r0
 800aedc:	d802      	bhi.n	800aee4 <_realloc_r+0x34>
 800aede:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800aee2:	d8f4      	bhi.n	800aece <_realloc_r+0x1e>
 800aee4:	4629      	mov	r1, r5
 800aee6:	4640      	mov	r0, r8
 800aee8:	f7ff f9d4 	bl	800a294 <_malloc_r>
 800aeec:	4607      	mov	r7, r0
 800aeee:	2800      	cmp	r0, #0
 800aef0:	d0ec      	beq.n	800aecc <_realloc_r+0x1c>
 800aef2:	42b5      	cmp	r5, r6
 800aef4:	462a      	mov	r2, r5
 800aef6:	4621      	mov	r1, r4
 800aef8:	bf28      	it	cs
 800aefa:	4632      	movcs	r2, r6
 800aefc:	f7ff f94f 	bl	800a19e <memcpy>
 800af00:	4621      	mov	r1, r4
 800af02:	4640      	mov	r0, r8
 800af04:	f7ff f95a 	bl	800a1bc <_free_r>
 800af08:	463c      	mov	r4, r7
 800af0a:	e7e0      	b.n	800aece <_realloc_r+0x1e>

0800af0c <_malloc_usable_size_r>:
 800af0c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800af10:	1f18      	subs	r0, r3, #4
 800af12:	2b00      	cmp	r3, #0
 800af14:	bfbc      	itt	lt
 800af16:	580b      	ldrlt	r3, [r1, r0]
 800af18:	18c0      	addlt	r0, r0, r3
 800af1a:	4770      	bx	lr

0800af1c <_init>:
 800af1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af1e:	bf00      	nop
 800af20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af22:	bc08      	pop	{r3}
 800af24:	469e      	mov	lr, r3
 800af26:	4770      	bx	lr

0800af28 <_fini>:
 800af28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af2a:	bf00      	nop
 800af2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af2e:	bc08      	pop	{r3}
 800af30:	469e      	mov	lr, r3
 800af32:	4770      	bx	lr
